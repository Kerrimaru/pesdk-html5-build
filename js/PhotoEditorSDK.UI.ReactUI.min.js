!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("photoeditorsdk/js/PhotoEditorSDK"),require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["photoeditorsdk","react","react-dom"],t):"object"==typeof exports?exports.PhotoEditorReactUI=t(require("photoeditorsdk/js/PhotoEditorSDK"),require("react"),require("react-dom")):e.PhotoEditorReactUI=t(e.PhotoEditorSDK,e.React,e.ReactDOM)}("undefined"!=typeof self?self:this,function(e,t,n){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=59)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SharedConstants=t.PropTypes=t.ImageLoader=t.ImageFormat=t.ColorMatrix=t.now=t.Log=t.cancelAnimationFrame=t.requestAnimationFrame=t.SDK=t.EXIF=t.ReactDOM=t.UniformType=t.OptionType=t.RenderType=t.Base64=t.Color=t.SharedState=t.Constants=t.EventEmitter=t.SDKUtils=t.Vector2=t.ReactBEM=t.BaseComponent=t.Classnames=t.BEM=t.React=t.Utils=t.Promise=void 0;var r=g(n(7)),i=g(n(16)),o=g(n(62)),a=g(n(33)),s=g(n(35)),l=g(n(36)),c=g(n(37)),u=g(n(67)),f=g(n(68)),p=g(n(84)),d=g(n(85)),h=n(86),_=g(n(20)),m=g(n(23)),y=g(n(38));function g(e){return e&&e.__esModule?e:{default:e}}var v=r.default.Base64,b=r.default.Color,k=r.default.Math.ColorMatrix,w=r.default.EventEmitter,O=r.default.EXIF,E=r.default.OptionType,S=r.default.Promise,P=r.default.Utils,x=r.default.RenderType,C=r.default.ImageFormat,M=r.default,j=r.default.UniformType,R=r.default.Math.Vector2,B="undefined"!=typeof window&&window.performance&&window.performance.now?window.performance.now.bind(window.performance):n(39);t.Promise=S,t.Utils=f.default,t.React=i.default,t.BEM=l.default,t.Classnames=s.default,t.BaseComponent=u.default,t.ReactBEM=c.default,t.Vector2=R,t.SDKUtils=P,t.EventEmitter=w,t.Constants=p.default,t.SharedState=d.default,t.Color=b,t.Base64=v,t.RenderType=x,t.OptionType=E,t.UniformType=j,t.ReactDOM=o.default,t.EXIF=O,t.SDK=M,t.requestAnimationFrame=h.requestAnimationFrame,t.cancelAnimationFrame=h.cancelAnimationFrame,t.Log=_.default,t.now=B,t.ColorMatrix=k,t.ImageFormat=C,t.ImageLoader=m.default,t.PropTypes=a.default,t.SharedConstants=y.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var l=function(e){function t(e,n,r){var i=arguments.length>3&&void 0!==arguments[3]&&arguments[3];o(this,t);var s=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return s.type=e,s.title=n,s.text=r,s.overlay=i,s.data=null,s}return s(t,i.EventEmitter),r(t,[{key:"setData",value:function(e){this.data=e,this.emit("update")}},{key:"close",value:function(){this.emit("close")}}]),t}(),c=function(e){function t(){o(this,t);var e=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._modals=[],e}return s(t,i.EventEmitter),r(t,[{key:"displayLoading",value:function(e){var t=new l("loading",null,e);return this.addModal(t),t}},{key:"displayProgress",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=new l("progress",null,e);return n.setData({progress:t}),this.addModal(n),n}},{key:"displayWarning",value:function(e,t){var n=new l("warning",e,t);return this.addModal(n),n}},{key:"displayError",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=new l("error",e,t,n);return this.addModal(r),r}},{key:"addModal",value:function(e){var t=this;this._modals.push(e),e.on("close",function(){t.removeModal(e)}),e.on("update",function(){t.emit("update")}),this.emit("update")}},{key:"removeModal",value:function(e){var t=this._modals.indexOf(e);this._modals.splice(t,1),this.emit("update")}},{key:"getModals",value:function(){return this._modals}}],[{key:"instance",get:function(){return this._instance||(this._instance=new t),this._instance}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(5),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.constructor.NATIVE_SCROLLBAR_WIDTH||(e.constructor.NATIVE_SCROLLBAR_WIDTH=o.Utils.getScrollbarWidth()),e._needsStyleFixes=!0,e._isDragging=!1,e._bindAll("_onButtonDragStart","_onButtonDrag","_onButtonDragStop","_onBarDragStart","_onBarDrag","_onBarDragStop","_onListScroll"),e.state={buttonSize:0,buttonPosition:0,buttonVisible:!1},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this.update()}},{key:"fixStyles",value:function(){o.Utils.isMobile()||this._updateListSize()}},{key:"_onListScroll",value:function(){if(!this._isDragging){var e=this._getDirection(),n=void 0,r=void 0,i=void 0;e===t.HORIZONTAL?(n=this._list.scrollWidth-this._list.offsetWidth,r=this._list.scrollLeft,i=this._node.offsetWidth-this.state.buttonSize):e===t.VERTICAL&&(n=this._list.scrollHeight-this._list.offsetHeight,r=this._list.scrollTop,i=this._node.offsetHeight-this.state.buttonSize);var o=r/n;this.setState({buttonPosition:i*o})}}},{key:"_onButtonDragStart",value:function(e){this._isDragging=!0,this._initialButtonPosition=this.state.buttonPosition||0}},{key:"_onButtonDrag",value:function(e){var n=this._getDirection(),r=void 0;n===t.HORIZONTAL?r=this._initialButtonPosition+e.x:n===t.VERTICAL&&(r=this._initialButtonPosition+e.y),this._setButtonPosition(r)}},{key:"_onButtonDragStop",value:function(){this._isDragging=!1}},{key:"_onBarDragStart",value:function(e){var n=o.Utils.getEventPosition(e);this._initialPosition=n.clone();var r=this._node.getBoundingClientRect(),i=new o.Vector2(r.left,r.top),a=n.clone().subtract(i),s=this._getDirection();s===t.HORIZONTAL?this._setButtonPosition(a.x-this.state.buttonSize/2):s===t.VERTICAL&&this._setButtonPosition(a.y-this.state.buttonSize/2),document.addEventListener("mousemove",this._onBarDrag),document.addEventListener("touchmove",this._onBarDrag),document.addEventListener("mouseup",this._onBarDragStop),document.addEventListener("touchend",this._onBarDragStop)}},{key:"_onBarDrag",value:function(e){var n=o.Utils.getEventPosition(e),r=this._node.getBoundingClientRect(),i=new o.Vector2(r.left,r.top),a=n.clone().subtract(i),s=this._getDirection();s===t.HORIZONTAL?this._setButtonPosition(a.x-this.state.buttonSize/2):s===t.VERTICAL&&this._setButtonPosition(a.y-this.state.buttonSize/2)}},{key:"_onBarDragStop",value:function(){document.removeEventListener("mousemove",this._onBarDrag),document.removeEventListener("touchmove",this._onBarDrag),document.removeEventListener("mouseup",this._onBarDragStop),document.removeEventListener("touchend",this._onBarDragStop)}},{key:"_setButtonPosition",value:function(e){var n=this._getDirection(),r=void 0,i=void 0;n===t.HORIZONTAL?(r=this._node.offsetWidth-this.state.buttonSize,i=this._list.scrollWidth-this._list.offsetWidth):n===t.VERTICAL&&(r=this._node.offsetHeight-this.state.buttonSize,i=this._list.scrollHeight-this._list.offsetHeight),e=Math.max(0,e),e=Math.min(e,r),this.setState({buttonPosition:e});var o=i*(e/r);n===t.HORIZONTAL?this._list.scrollLeft=o:n===t.VERTICAL&&(this._list.scrollTop=o)}},{key:"_updateButtonSize",value:function(e){var n,r,i=void 0,o=void 0,a=this._getDirection();a===t.HORIZONTAL?(i=this._list.clientWidth,o=this._list.scrollWidth):a===t.VERTICAL&&(i=this._list.offsetHeight,o=this._list.scrollHeight),n=i/o*i,r=o>i,this.setState({buttonSize:n,buttonVisible:r},e)}},{key:"_updateListSize",value:function(){if(this._list){var e=this._getDirection();if(e===t.HORIZONTAL){this._list.style.height="";var n=this._getFullListDimensions();this._listSize=n.y,this._listContentSize=this._list.offsetHeight}else if(e===t.VERTICAL){this._list.style.width="";var r=this._getFullListDimensions();this._listSize=r.x,this._listContentSize=this._list.offsetWidth}}}},{key:"_getFullListDimensions",value:function(){var e=this._list.getBoundingClientRect();return new o.Vector2(e.width,e.height)}},{key:"update",value:function(){var e=this;if(!o.Utils.isMobile()){var n=this.refs,r=n.root,i=n.list;this._node=r,this._list=i;var a=this._getDirection();this._updateButtonSize(function(){e._listSize||e._updateListSize();var n=e._listSize;e.state.buttonVisible&&(n+=e.constructor.NATIVE_SCROLLBAR_WIDTH),a===t.HORIZONTAL?(e._list.style.height=n+"px",e._node.style.top=e._listContentSize-12+"px",e._node.style.width=e._list.offsetWidth+"px"):a===t.VERTICAL&&(e._list.style.width=n+"px",e._node.style.left=e._listContentSize-12+"px",e._node.style.height=e._list.offsetHeight+"px")}),this._list.addEventListener("scroll",this._onListScroll)}}},{key:"_getDirection",value:function(){return this.props.direction||"horizontal"}},{key:"_getButtonStyle",value:function(){return"horizontal"===this._getDirection()?{left:this.state.buttonPosition,width:this.state.buttonSize}:{top:this.state.buttonPosition,height:this.state.buttonSize}}},{key:"getList",value:function(){return this.refs.list}},{key:"getRoot",value:function(){return this.refs.root}},{key:"renderWithBEM",value:function(){if(o.Utils.isMobile())return this.props.children;var e=this._getButtonStyle(),t={display:this.state.buttonVisible?"block":"none"},n=o.React.cloneElement(this.props.children,{ref:"list"});return o.ReactBEM.createElement("div",null,n,o.ReactBEM.createElement("div",{bem:"$b:scrollbar m:"+(this.props.direction||"horizontal")+" m:"+(this.state.buttonVisible?"visible":"invisible"),ref:"root",style:t,onMouseDown:this._onBarDragStart,onTouchStart:this._onBarDragStart},o.ReactBEM.createElement(s.default,{onStart:this._onButtonDragStart,onDrag:this._onButtonDrag,onStop:this._onButtonDragStop},o.ReactBEM.createElement("div",{bem:"e:bar",style:e,onMouseDown:this._onButtonDown}))))}}]),t}();t.default=l,l.HORIZONTAL="horizontal",l.VERTICAL="vertical",l.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(111)),a=s(n(112));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._hasBackButton=!0,o._hasDoneButton=!1,o._backButtonClicked=!1,o._bindAll("_onBackClick","_onDoneClick"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"getGlobalToolState",value:function(e){return this.context.globalState.get(e)}},{key:"setGlobalToolState",value:function(e,t){var n,r,i;this.context.globalState.set((i=t,(r=e)in(n={})?Object.defineProperty(n,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[r]=i,n))}},{key:"_onBackClick",value:function(e){this._backButtonClicked=!0,this.props.onSwitchControls("back")}},{key:"_onDoneClick",value:function(e){this._onBackClick()}},{key:"renderControls",value:function(){return null}},{key:"renderOverlayControls",value:function(){return null}},{key:"renderWithBEM",value:function(){var e=this.props.options&&this.props.options.forcedControl,t=this._hasBackButton&&!e?i.ReactBEM.createElement(o.default,{onClick:this._onBackClick}):null,n=this._hasDoneButton||e?i.ReactBEM.createElement(a.default,{onClick:this._onDoneClick}):null;return i.ReactBEM.createElement("div",{bem:"$b:controls",ref:"root"},this.renderOverlayControls(),i.ReactBEM.createElement("div",{bem:"e:table"},t,this.renderControls(),n))}}]),t}();t.default=l,l.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"getInitialSharedState",value:function(){return{}}},{key:"getGlobalToolState",value:function(){return this.context.globalState.get(this.constructor.identifier)}},{key:"setGlobalToolState",value:function(e){var t,n,r;this.context.globalState.set((t={},n=this.constructor.identifier,r=e,n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t))}},{key:"isAvailable",value:function(e){return!1}}],[{key:"getPreloadAssets",value:function(){return[]}}]),e}();i.topBarControlsComponent=null,i.controlsComponent=null,i.canvasControlsComponent=null,i.identifier=null,i.iconPath=null,i.languageKey=null,i.defaultOptions={},t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onDragStart","_onDragMove","_onDragEnd"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onDragStart",value:function(e){if(!this.props.disabled){e.preventDefault(),e.stopPropagation(),this._initialMousePosition=i.Utils.getEventPosition(e),document.addEventListener("mousemove",this._onDragMove),document.addEventListener("touchmove",this._onDragMove),document.addEventListener("mouseup",this._onDragEnd),document.addEventListener("touchend",this._onDragEnd);var t=this.refs.element.getBoundingClientRect(),n=new i.Vector2(t.left,t.top),r=this._initialMousePosition.clone().subtract(n);this.props.onStart&&this.props.onStart(r,e)}}},{key:"_onDragMove",value:function(e){e.preventDefault(),e.stopPropagation();var t=i.Utils.getEventPosition(e);if(t){var n=t.clone().subtract(this._initialMousePosition);this.props.onDrag&&this.props.onDrag(n,e)}}},{key:"_onDragEnd",value:function(e){e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation(),this._onDragMove(e),document.removeEventListener("mousemove",this._onDragMove),document.removeEventListener("touchmove",this._onDragMove),document.removeEventListener("mouseup",this._onDragEnd),document.removeEventListener("touchend",this._onDragEnd),this.props.onStop&&this.props.onStop(e)}},{key:"render",value:function(){if(!this.props.children||this.props.children instanceof Array)throw new Error("DraggableComponent expects exactly one child.");return i.React.cloneElement(this.props.children,{onMouseDown:this._onDragStart,onTouchStart:this._onDragStart,ref:"element"})}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(13),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onSliderValueChange"),o.state={value:o.props.value},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"componentWillReceiveProps",value:function(e){e.value!==this.state.value&&(this.state.value=e.value)}},{key:"_onSliderValueChange",value:function(e){this.props.onChange&&this.props.onChange(e),this.setState({value:e})}},{key:"_renderSlider",value:function(){var e=o.SDKUtils.defaults(this.props,{style:"",middleDot:!1,minValue:1,maxValue:100,label:"Label",onChange:this._onSliderValueChange,value:this.state.value});return o.ReactBEM.createElement(s.default,e)}},{key:"renderWithBEM",value:function(){return o.ReactBEM.createElement("div",{bem:"$b:controls e:overlay m:slider m:dark"},this._renderSlider())}}]),t}();t.default=l,l.contextTypes=o.BaseComponent.contextTypes},function(t,n){t.exports=e},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(89),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"_renderHeader",value:function(){return this.context.options.showHeader?o.ReactBEM.createElement(s.default,null):null}},{key:"_renderScreen",value:function(){return o.ReactBEM.createElement("div",null)}},{key:"renderWithBEM",value:function(){var e="b:screen";return this.context.options.showHeader||(e+=" m:noHeader"),o.ReactBEM.createElement("div",{bem:e,className:this.props.visible?null:"is-hidden"},this._renderHeader(),this._renderScreen())}}]),t}();t.default=l,l.propTypes={editor:o.PropTypes.any},l.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=n(0);var a=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onCanvasZoomDone"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),r(t,[{key:"_performHitTest",value:function(e){var t=this.refs.container.getBoundingClientRect(),n=new o.Vector2(t.left,t.top),r=e.subtract(n),i=this.context.editor,a=i.controls.getAvailable();for(var s in a){var l=a[s],c=l.clickAtPosition&&l.clickAtPosition(r,i);if(c)return c.selectedSprite===this.getSharedState("selectedSprite")||(this.props.onSwitchControls(l,c),!0)}return!1}},{key:"_onCanvasZoomDone",value:function(){this.forceUpdate()}},{key:"_bindEvents",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_bindEvents",this).call(this),this.context.mediator.on(o.Constants.EVENTS.ZOOM_DONE,this._onCanvasZoomDone)}},{key:"_unbindEvents",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_unbindEvents",this).call(this),this.context.mediator.off(o.Constants.EVENTS.ZOOM_DONE,this._onCanvasZoomDone)}}]),t}();t.default=a,a.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(38)),a=s(n(22));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._categoriesById={},this._categories=[],this._stickersById={},this._addCategories(o.default.DEFAULTS.STICKER_CATEGORIES);var r=this._options,i=r.categories,a=r.replaceCategories;this._options.categories?this._addCategories(i,a):(this._updateCategoriesMap(),this._updateAllCategory())}return r(e,[{key:"loadExternal",value:function(e){var t=this;return new a.default(e).load().then(function(e){t._addCategories(e.categories,t._options.replaceCategories)})}},{key:"_addCategories",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._categories=t?e.slice(0):i.Utils.mergeCategories(this._categories,e,"stickers"),this._updateCategoriesMap(),this._updateAllCategory()}},{key:"_updateCategoriesMap",value:function(){var e=this;this._categoriesById={},this._categories.forEach(function(t){e._categoriesById[t.identifier]=t}),this._categories.forEach(function(t){t.stickers.forEach(function(t){e._stickersById[t.identifier]=t})}),void 0!==this._options.availableStickers&&null!==this._options.availableStickers&&(this._categories.forEach(function(t){t.stickers=t.stickers.filter(function(t){return-1!==e._options.availableStickers.indexOf(t.identifier)})}),this._categories=this._categories.filter(function(e){return e.stickers.length>0})),this._updateAllCategory()}},{key:"_updateAllCategory",value:function(){this._allCategory={identifier:"all",defaultName:"All",stickers:this._categories.map(function(e){return e.stickers}).reduce(function(e,t){return e.concat(t)},[])},this._categoriesById.all=this._allCategory}},{key:"getStickersForCategory",value:function(e){if(!this._categoriesById[e])throw new Error("Unknown sticker category '"+e+"'");return this._categoriesById[e].stickers}},{key:"getStickerByIdentifier",value:function(e){return this._stickersById[e]}},{key:"getCategories",value:function(){return arguments.length>0&&void 0!==arguments[0]&&arguments[0]?[this._allCategory].concat(this._categories):this._categories}},{key:"getCategory",value:function(e){return this._categoriesById[e]}}],[{key:"getURLForSticker",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"base",n=e.images,r="base"===t&&n.mediaBase||n.mediaThumb,o=r.uris||[r.uri];if(void 0===i.Utils.Browser||i.Utils.Browser.getIEVersion()){var a=o.filter(function(e){return!/\.svg$/i.test(e)});return a.length?a[0]:o[0]}var s=o.filter(function(e){return/\.svg$/i.test(e)});return s.length?s[0]:o[0]}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"renderContent",value:function(){return this.props.children}},{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("div",{bem:"$b:topBar e:row"},i.ReactBEM.createElement("div",{bem:"e:cell"},this.renderContent()))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),s=n(5),l=(r=s)&&r.__esModule?r:{default:r};var c=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onKnobDragStart","_onKnobDrag","_onKnobDragStop","_onBarDragStart","_onBarDrag","_onBarDragStop","_onMiddleDotClick"),o.state={value:o.props.value||0,sliderPosition:0,foregroundLeft:0,foregroundWidth:0},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.BaseComponent),o(t,[{key:"componentDidMount",value:function(){this._setValue(this.state.value,!1)}},{key:"componentWillReceiveProps",value:function(e){e.value!==this.state.value&&this._setValue(e.value,!1)}},{key:"_onMiddleDotClick",value:function(){this._previousValue=this.state.value;var e=this.props.minValue+(this.props.maxValue-this.props.minValue)/2;this._setValue(e,!0,!0)}},{key:"_onKnobDragStart",value:function(e){this._previousValue=this.state.value,this._initialSliderPosition=this.state.sliderPosition,this._initialPosition=e}},{key:"_onKnobDrag",value:function(e){var t=this.refs.bar.offsetWidth,n=this._initialSliderPosition+e.x,r=(n=Math.max(0,Math.min(n,t)))/t,i=this.props.minValue+(this.props.maxValue-this.props.minValue)*r;this._setValue(i)}},{key:"_onKnobDragStop",value:function(){this._setValue(this.state.value,!0,!0)}},{key:"_onBarDragStart",value:function(e){this._previousValue=this.state.value,this._initialPosition=e.clone();var t=this.refs.bar.offsetWidth,n=e.x/t,r=this.props.minValue+(this.props.maxValue-this.props.minValue)*n;this._setValue(r)}},{key:"_onBarDrag",value:function(e){var t=this._initialPosition.clone().add(e),n=this.refs.bar.offsetWidth,r=t.x/n,i=this.props.minValue+(this.props.maxValue-this.props.minValue)*r;i=Math.max(this.props.minValue,Math.min(this.props.maxValue,i)),this._setValue(i)}},{key:"_onBarDragStop",value:function(){this._setValue(this.state.value,!0,!0)}},{key:"_getKnobStyle",value:function(){return{left:this.state.sliderPosition}}},{key:"_getForegroundStyle",value:function(){return{left:this.state.foregroundLeft,width:this.state.foregroundWidth}}},{key:"_displayMiddleDot",value:function(){return!1!==this.props.middleDot}},{key:"_setValue",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];e=Math.round(e);var r=this.props,i=r.minValue,o=(e-i)/(r.maxValue-i),a=this.refs.bar.offsetWidth,s=a*o,l=o*a,c=0;this._displayMiddleDot()&&(l=Math.abs(o-.5)*a,c=o<.5?.5*a-l:"50%"),this.setState({value:e,sliderPosition:s,foregroundWidth:l,foregroundLeft:c}),t&&this.props.onChange&&this.props.onChange(e,this._previousValue,n)}},{key:"_buildValue",value:function(e){return e%1!=0&&(e=e.toFixed(2)),this.props.positiveValuePrefix&&e>=0&&(e=""+this.props.positiveValuePrefix+e),this.props.valueUnit&&(e+=this.props.valueUnit),e}},{key:"renderWithBEM",value:function(){var e=null;this._displayMiddleDot()&&(e=a.ReactBEM.createElement("div",{bem:"e:middleDot",onClick:this._onMiddleDotClick}));var t={style:this._getForegroundStyle()},n="$b:slider"+(this.props.style?" m:"+this.props.style:"");return a.ReactBEM.createElement("div",{bem:n},a.ReactBEM.createElement("div",{bem:"$e:bar",ref:"bar"},a.ReactBEM.createElement(l.default,{onStart:this._onBarDragStart,onDrag:this._onBarDrag,onStop:this._onBarDragStop},a.ReactBEM.createElement("div",null,a.ReactBEM.createElement("div",{bem:"$e:background"}),a.ReactBEM.createElement("div",i({bem:"$e:foreground"},t)),a.ReactBEM.createElement(l.default,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag,onStop:this._onKnobDragStop},a.ReactBEM.createElement("div",{bem:"e:knob b:knob m:slider",style:this._getKnobStyle()})))),e),a.ReactBEM.createElement("div",{bem:"$e:labels"},a.ReactBEM.createElement("div",{bem:"e:label m:lowerBoundary"},this._buildValue(this.props.minValue)),a.ReactBEM.createElement("div",{bem:"e:label m:value"},this.props.label," ",this._buildValue(this.state.value)),a.ReactBEM.createElement("div",{bem:"e:label m:upperBoundary"},this._buildValue(this.props.maxValue))))}}]),t}();t.default=c,c.contextTypes=a.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=u(n(145)),s=u(n(146)),l=u(n(147)),c=u(n(10));function u(e){return e&&e.__esModule?e:{default:e}}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var p=o.SDK.Operations.SpriteOperation,d=p.StickerSprite,h=p.TextSprite,_=p.BrushSprite,m=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];var s=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i)));return s._bindAll("_onCanvasClick","_onSpriteDragStart","_onSpriteDragStop","_onOperationUpdated","_onOperationRemoved","_onSpriteFlip","_onSpriteTakeToFront","_onSpriteRemove"),s._canvasClickDisabled=!1,s._events=(f(n={},o.Constants.EVENTS.OPERATION_UPDATED,s._onOperationUpdated),f(n,o.Constants.EVENTS.OPERATION_REMOVED,s._onOperationRemoved),n),s}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,c.default),i(t,[{key:"_onOperationRemoved",value:function(e){var t=this.getSharedState("selectedSprite");if(e===this.getSharedState("operation")&&t){var n=this.context.editor.operations.getOrCreate("sprite",{sprites:[t],enabled:!1});this.setSharedState({operation:n,operationExistedBefore:!1,initialOptions:{}})}}},{key:"_onOperationUpdated",value:function(e){var t=this.getSharedState("selectedSprite");if(e===this.getSharedState("operation")&&t){var n=e.getSprites();-1===n.indexOf(t)&&n.push(t),this.forceUpdate()}}},{key:"_onItemBlur",value:function(){}},{key:"_onCanvasClick",value:function(e){this._canvasClickDisabled||(this._performHitTest(o.Utils.getEventPosition(e))||(this.getSharedState("selectedSprite")&&this._onItemBlur(),this.props.onSwitchControls("home")))}},{key:"_onSpriteFlip",value:function(e){var t=this.getSharedState("selectedSprite");switch(e){case"h":t.setFlipHorizontally(!t.getFlipHorizontally());break;case"v":t.setFlipVertically(!t.getFlipVertically())}this.context.editor.render()}},{key:"_onSpriteTakeToFront",value:function(e){this.getSharedState("operation").takeSpriteToFront(this.getSharedState("selectedSprite")),this.forceSharedUpdate(),this.context.editor.render()}},{key:"_onSpriteRemove",value:function(){var e=this.getSharedState("operation"),t=this.getSharedState("selectedSprite");e.removeSprite(t),t.dispose(),this.setSharedState({selectedSprite:null}),this.context.editor.render()}},{key:"_onSpriteDragStart",value:function(){this._canvasClickDisabled=!0}},{key:"_onSpriteDragStop",value:function(){var e=this;setTimeout(function(){e._canvasClickDisabled=!1},100)}},{key:"_getContainerStyle",value:function(){var e=this.context.editor,t=e.getCanvasDimensions(),n=e.getOutputDimensions(),r=t.clone().divide(2).subtract(n.clone().divide(2));return{left:r.x,top:r.y,width:n.x,height:n.y}}},{key:"_getContainerProps",value:function(){return{}}},{key:"_getInnerContainerProps",value:function(){return{style:this._getContainerStyle(),onClick:this._onCanvasClick}}},{key:"_getPropsForSprite",value:function(e){return{hideContent:!0}}},{key:"_getComponentTypeForSprite",value:function(e){return e instanceof h?a.default:e instanceof d?s.default:e instanceof _?l.default:void 0}},{key:"_renderSpriteItems",value:function(){var e=this,t=this.getSharedState("operation"),n=t.getSprites(),i=this.getSharedState("selectedSprite");return n.map(function(n){var a=n===i,s=e._getComponentTypeForSprite(n),l=e._getPropsForSprite(n);return o.ReactBEM.createElement(s,r({operation:t,sharedState:e.props.sharedState,sprite:n,selected:a,onDragStart:e._onSpriteDragStart,onDragStop:e._onSpriteDragStop,onRemove:e._onSpriteRemove.bind(e,n),options:e.props.options,ref:"sprite-"+n.getId()},l))})}},{key:"_renderOverlayControls",value:function(){return null}},{key:"renderWithBEM",value:function(){return o.ReactBEM.createElement("div",r({bem:"$b:canvasControls e:container m:full",ref:"container"},this._getContainerProps()),o.ReactBEM.createElement("div",r({bem:"b:canvasControls e:innerContainer",ref:"innerContainer"},this._getInnerContainerProps()),o.ReactBEM.createElement("div",{bem:"$b:spritesCanvasControls",ref:"container"},this._renderSpriteItems(),this._renderOverlayControls())))}}]),t}();t.default=m,m.contextTypes=c.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=c(n(158)),s=c(n(20)),l=c(n(47));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._fonts=[],this._variationsByIdentifier={},this._fontsByFontFamily={},this._initFonts()}return i(e,[{key:"_initFonts",value:function(){var e=this,t=this._options,n=t.fonts,r=t.replaceFonts,i=t.availableVariations,c=o.Constants.DEFAULTS.FONTS,u=void 0;c=(c=r?n:c.concat(n||[])).map(function(t){var n=t.fontFamily,r=t.variations;if(i&&(r=r.filter(function(e){return-1!==i.indexOf(e.identifier)})),0===r.length)return null;var o=new a.default({fontFamily:n});return r=r.map(function(t){var r=new l.default(t);return r.setFontFamily(n),r.setFont(o),t.default&&!u&&(u=r),null==r.getTextMetrics()&&s.default.warn("Missing font metrics for "+r.getIdentifier()+". The SDK will fall back to basic font rendering, which may lead to layout issues. Please provide font metrics for your custom fonts. See https://docs.photoeditorsdk.com/guides/html5/ for more details."),e._variationsByIdentifier[r.getIdentifier()]=r,r}),o.setVariations(r),e._fontsByFontFamily[n]=o,o}).filter(function(e){return e}),u||(u=c[0].getVariations()[0]),this._defaultVariation=u,this._fonts=c}},{key:"getFonts",value:function(){return this._fonts}},{key:"getFontByFontFamily",value:function(e){return this._fontsByFontFamily[e]}},{key:"getVariationByIdentifier",value:function(e){return this._variationsByIdentifier[e]}},{key:"getVariationsByIdentifier",value:function(){return r({},this._variationsByIdentifier)}},{key:"getDefaultVariation",value:function(){return this._defaultVariation}}]),e}();t.default=u},function(e,n){e.exports=t},function(e,t,n){"use strict";function r(e){return function(){return e}}var i=function(){};i.thatReturns=r,i.thatReturnsFalse=r(!1),i.thatReturnsTrue=r(!0),i.thatReturnsNull=r(null),i.thatReturnsThis=function(){return this},i.thatReturnsArgument=function(e){return e},e.exports=i},function(e,t,n){"use strict";var r=function(e){};"production"!=={ENV:'"development"'}.NODE_ENV&&(r=function(e){if(void 0===e)throw new Error("invariant requires an error message argument")}),e.exports=function(e,t,n,i,o,a,s,l){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,i,o,a,s,l],f=0;(c=new Error(t.replace(/%s/g,function(){return u[f++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.Logger=void 0;var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(69),a=(r=o)&&r.__esModule?r:{default:r};function s(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var l=[{name:"trace",type:"trace",background:"#EEEEEE",color:"#AAAAAA"},{name:"info",type:"log",background:"#BDE5F8",color:"#00529B"},{name:"warn",type:"warn",background:"#FEEFB3",color:"#9F6000"},{name:"error",type:"error",background:"#FFBABA",color:"#D8000C"},{name:"log",type:"log",background:"#EEEEEE",color:"#1f4f6b"}],c=function(){return console&&console.group&&console.groupCollapsed&&console.groupEnd},u=function(){function t(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"warn",r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._levels=[].concat(s(r)),this._maxLevel=this.getLevelIndexByName(n),this._consoleFuncs={trace:function(){var e,t;c()?((e=console).groupCollapsed.apply(e,arguments),console.trace(),console.groupEnd()):(t=console).trace.apply(t,arguments)}},this._levels.forEach(function(t){var n=t.name;e[n]=function(t){for(var r=arguments.length,i=Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];e._log.apply(e,[n,t].concat(i))}})}return i(t,[{key:"getLevelIndexByName",value:function(e){return a.default.Array.findIndex(this._levels,function(t){return t.name===e})}},{key:"getLevelObjectByName",value:function(e){return a.default.Array.find(this._levels,function(t){return t.name===e})}},{key:"canLog",value:function(e){var t=this.getLevelIndexByName(e);return!(t<0)&&t>=this._maxLevel}},{key:"setLevel",value:function(e){var t=this.getLevelIndexByName(e);t<0||(this._maxLevel=t)}},{key:"_log",value:function(t,n){for(var r=arguments.length,i=Array(r>2?r-2:0),o=2;o<r;o++)i[o-2]=arguments[o];var l=this.getLevelObjectByName(t);if(l&&this.canLog(t)){l.name;var u,f=l.type,p=l.background,d=l.color,h=i.filter(function(e){return void 0!==e}).map(function(e){return e.toObject?JSON.parse(JSON.stringify(e.toObject())):e}),_=this._consoleFuncs[f]||console[f]?function(){var e;return(e=console)[f].apply(e,arguments)}:function(){var e;return(e=console).log.apply(e,arguments)},m=h.length,y=function(e,t){return["background: #2D7BFF; line-height: 20px; padding: 4px 0","background: #2B2B2B; color: white; line-height: 20px; padding: 4px 0","background: #2D7BFF; line-height: 20px; padding: 4px 0","background: "+e+"; color: "+t+"; line-height: 20px; padding: 4px 0; font-weight: bold","background: #2B2B2B; color: white; line-height: 20px; padding: 4px 0","background: #2D7BFF; line-height: 20px; padding: 4px 0"]}(p,d);if(!(!e||e&&e.browser)||"undefined"==typeof navigator||!navigator.userAgent.match(/Gecko|WebKit/i)||navigator.userAgent.match(/Trident/)){var g=h.length;return g<=0?void _("PhotoEditorSDK | "+n+" "):1===g&&"string"==typeof h[0]?void _("PhotoEditorSDK | "+n+" | "+h[0]):void _.apply(void 0,["PhotoEditorSDK | "+n+" | "].concat(s(h)))}if(m<=0)_.apply(void 0,["%c  %c PhotoEditorSDK %c  %c "+n+" %c %c  "].concat(s(y)));else if(1!==m||"string"!=typeof h[0])if(c())(u=console).groupCollapsed.apply(u,["%c  %c PhotoEditorSDK %c  %c "+n+" %c"].concat(s(a.default.Array.init(y)))),_.apply(void 0,s(h)),console.groupEnd();else _.apply(void 0,["%c  %c PhotoEditorSDK %c  %c "+n+" %c"].concat(s(a.default.Array.init(y)),s(h)));else _.apply(void 0,["%c  %c PhotoEditorSDK %c  %c "+n+" %c  "+h[0]+"  %c  "].concat(s(y)))}}},{key:"image",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments[1],n=new window.Image,r=function(){var t=n.width,r=n.height;e&&console.log(e),console.log("%c+","\n        font-size: 1px;\n        padding: 0px "+Math.floor(t/2)+"px;\n        line-height: "+r+"px;\n        background: url("+n.src+");\n        color: transparent;\n        background-repeat: no-repeat;\n        background-size: "+t+"px "+r+"px;")};return n.onload=r,t instanceof window.HTMLCanvasElement?n.src=t.toDataURL():t instanceof window.Image?(n=t,r()):"string"==typeof t?n.src=t:this.log(e,t),n}},{key:"texture",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments[1];if(t){var n=t.getBaseTexture(),r=n.getRenderers(),i=a.default.Array.find(r,function(e){return e&&"WebGL"===e.constructor.type}),o=n.getFrame(),s=o.width,l=o.height;if(i){var c=i.getContext(),u=n.getGLTextureForRenderer(i);this.logGlTexture(c,u,s,l,e)}else f.image(e,n.getSource())}else this.log(e,"texture: null or undefined")}},{key:"logGlTexture",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:150,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:150,i=arguments[4];e.bindTexture(e.TEXTURE_2D,t);var o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0);var a=new Uint8Array(n*r*4);e.readPixels(0,0,n,r,e.RGBA,e.UNSIGNED_BYTE,a),e.deleteFramebuffer(o);var s=document.createElement("canvas");s.width=n,s.height=r;var l=s.getContext("2d"),c=l.createImageData(n,r);return c.data.set(a),l.putImageData(c,0,0),f.image(i,s)}}]),t}();t.Logger=u;var f=new u("warn");t.default=f}).call(t,n(21))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],u=!1,f=-1;function p(){u&&l&&(u=!1,l.length?c=l.concat(c):f=-1,c.length&&d())}function d(){if(!u){var e=s(p);u=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function _(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||u||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=_,i.addListener=_,i.once=_,i.off=_,i.removeListener=_,i.removeAllListeners=_,i.emit=_,i.prependListener=_,i.prependOnceListener=_,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(73)),o=a(n(76));function a(e){return e&&e.__esModule?e:{default:e}}var s="undefined"!=typeof window?window:e,l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t,this._parsedUrl=o.default.parse(this._url,!0)}return r(e,[{key:"_isJSONPRequest",value:function(){var e=this._parsedUrl.query;for(var t in e){if("?"===e[t])return!0}return!1}},{key:"load",value:function(){return this._isJSONPRequest()?this._loadJSONP():this._loadJSON()}},{key:"_loadJSON",value:function(){var e=this;return new i.default(function(t,n){var r=void 0;s.XDomainRequest?((r=new s.XDomainRequest).onload=function(){var e=JSON.parse(r.responseText);t(e)},r.onerror=function(e){n(e)},r.open("GET",e._url,!0),r.send()):s.XMLHttpRequest&&((r=new XMLHttpRequest).onreadystatechange=function(e){if(4===r.readyState)if(200===r.status){var i=JSON.parse(r.responseText);t(i)}else n(new Error("HTTP Status "+r.status))},r.open("GET",e._url,!0),r.send())})}},{key:"_loadJSONP",value:function(){var e=this,t=!1,n=!1,r="pesdk"+Math.round(99999999999999*Math.random());return new i.default(function(i,o){var a=e._createJSONPNode(r);s[r]=function(r){e._removeJSONPNode(a),t||(n=!0,i(r))},s.setTimeout(function(){n||(e._removeJSONPNode(a),t=!0,o(new Error("Timeout of 5 seconds exceeded.")))},5e3)})}},{key:"_createJSONPNode",value:function(e){var t=this._buildJSONPUrl(e),n=document.querySelector("head"),r=document.createElement("script");return r.src=t,n.appendChild(r),r}},{key:"_removeJSONPNode",value:function(e){e.parentNode.removeChild(e)}},{key:"_buildJSONPUrl",value:function(e){var t=this._parsedUrl.query,n=null;for(var r in t)if("?"===t[r]){n=r;break}return delete this._parsedUrl.search,t[n]=e,o.default.format(this._parsedUrl)}}]),e}();t.default=l}).call(t,n(8))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.default={load:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{cors:!0,value:"anonymous"};return(e.substr(0,5),Promise.resolve([e,e])).then(function(e){var i=r(e,2),o=i[0],a=i[1];return t._createAndLoadImage(o,a,n)})},_createAndLoadImage:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{cors:!0,value:"anonymous"};return new Promise(function(e,r){var i=new window.Image;i.addEventListener("load",function(){e(i)}),i.addEventListener("error",function(){r(new Error("Failed to load image at "+t))}),n.cors&&(i.crossOrigin=n.value),i.src=t})},loadXHR:function(e,t){return new Promise(function(n,r){var i=void 0;window.XDomainRequest?(i=new window.XDomainRequest,t&&i.overrideMimeType(t),i.onload=function(){n(i)},i.onerror=function(e){r(e)}):window.XMLHttpRequest&&(i=new window.XMLHttpRequest,t&&i.overrideMimeType(t),i.onreadystatechange=function(e){4===i.readyState&&(200===i.status?n(i):r(new Error("HTTP Status "+i.status)))}),i.open("GET",e,!0),i.send()})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onClick"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onClick",value:function(e){this.props.onClick&&this.props.onClick()}},{key:"_renderContent",value:function(){return null}},{key:"renderWithBEM",value:function(){var e="$e:row m:"+this._modifier;return this.props.totalRows&&(e+=" m:row-"+this.props.totalRows),i.ReactBEM.createElement("bem",{specifier:"b:splashScreen"},i.ReactBEM.createElement("div",{bem:e},this._renderContent()))}}]),t}();t.default=o,o.propTypes={onClick:i.PropTypes.func},o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(93),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onNewFile"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"componentDidMount",value:function(){this._fileLoader=new s.default(this.refs.fileInput),this._fileLoader.on("file",this._onNewFile)}},{key:"componentWillUnmount",value:function(){this._fileLoader.off("file",this._onNewFile),this._fileLoader.dispose(),this._fileLoader=null}},{key:"_onNewFile",value:function(e){this.props.onNewFile&&this.props.onNewFile(e)}},{key:"open",value:function(){this._fileLoader.open()}},{key:"renderWithBEM",value:function(){return o.ReactBEM.createElement("input",{type:"file",accept:"image/*",bem:"b:hiddenFileInput",ref:"fileInput"})}}]),t}();t.default=l,l.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"renderWithBEM",value:function(){var e="$e:button";this.props.style&&(e+=" m:"+this.props.style),this.props.icon&&(e+=" m:withIcon");var t=null;return this.props.icon&&(t=i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath(this.props.icon,!0)})),i.ReactBEM.createElement("bem",{specifier:"$b:topBar"},i.ReactBEM.createElement("div",{bem:e,onClick:this.props.onClick},t,i.ReactBEM.createElement("div",{bem:"e:label"},this.props.label||"Button")))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._categoriesById={},this._filtersByIdentifier={identity:i.SDK.Operations.FilterOperation.Filters.IdentityFilter},this._categories=i.SharedConstants.DEFAULTS.FILTERS.slice(0),this._initCategories()}return r(e,[{key:"instantiateFilterWithIdentifier",value:function(e){var t=this,n=this.getFilterByIdentifier(e);if(!n)return Promise.reject(new Error("Unknown filter with identifier `"+e+"`!"));if(n.prototype instanceof i.SDK.Operations.FilterOperation.Filter)return Promise.resolve(new n);var r=n.lutImage,o=n.resolution,a=n.horizontalTileCount,s=n.verticalTileCount,l=void 0;this._ui.getPreloader&&(l=this._ui.getPreloader().getAsset(r));return(l?Promise.resolve(l):i.ImageLoader.load(this._ui.getAssetPath(r))).then(function(e){return i.ImageLoader.load(t._ui.getAssetPath(r)).then(function(e){return new i.SDK.Operations.FilterOperation.Filters.ThreeDLUTFilter({image:e,resolution:o,horizontalTileCount:a,verticalTileCount:s})})})}},{key:"_initCategories",value:function(){var e=this;if(this._options.categories&&(this._options.replaceCategories?this._categories=this._options.categories:this._categories=i.Utils.mergeCategories(this._categories,this._options.categories,"filters")),this._options.availableFilters){var t=[];this._categories.forEach(function(n){var r=n.filters.filter(function(t){return-1!==e._options.availableFilters.indexOf(t.identifier)});r.length>0&&t.push({identifier:n.identifier,defaultName:n.defaultName,filters:r})}),this._categories=t}var n={identifier:"all",defaultName:"All",filters:this._categories.length<=0?[]:this._categories.map(function(e){return e.filters}).reduce(function(e,t){return e.concat(t)})};this._categories.unshift(n),this._categoriesById.all=n,this._categories.forEach(function(t){e._categoriesById[t.identifier]=t}),n.filters.forEach(function(t){e._filtersByIdentifier[t.identifier]=t})}},{key:"getFiltersForCategory",value:function(e){if(!this._categoriesById[e])throw new Error("Unknown filter category '"+e+"'");return this._categoriesById[e].filters}},{key:"getFilterByIdentifier",value:function(e){return this._filtersByIdentifier[e]}},{key:"getCategories",value:function(){return this._categories}},{key:"getCategoryByIdentifier",value:function(e){return this._categoriesById[e]}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=n(0);var a=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onItemDragStart","_onItemDragStop","_onItemDrag","_onSpriteUpdate"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),r(t,[{key:"_getAbsoluteSpritePosition",value:function(){var e=this.context.editor.getOutputDimensions();return this.props.sprite.getPosition().clone().multiply(e)}},{key:"componentDidMount",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this.props.sprite.on("update",this._onSpriteUpdate)}},{key:"componentWillUnmount",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentWillUnmount",this).call(this),this.props.sprite.off("update",this._onSpriteUpdate)}},{key:"componentWillReceiveProps",value:function(e){this.props.sprite.off("update",this._onSpriteUpdate),e.sprite.on("update",this._onSpriteUpdate)}},{key:"_onSpriteUpdate",value:function(){this.forceUpdate()}},{key:"_onItemDragStart",value:function(){var e=this.props.sprite;this._initialPosition=e.getPosition(),this.props.onDragStart&&this.props.onDragStart()}},{key:"_onItemDrag",value:function(e){var t=this.props.sprite,n=this.context.editor,r=n.getOutputDimensions(),i=this._initialPosition.clone().add(e.divide(r));t.setPosition(i),n.render()}},{key:"_onItemDragStop",value:function(){this.props.onDragStop&&this.props.onDragStop()}}]),t}();t.default=a,a.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(153),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return c._value=c.props.initialValue.clone(),c._bindAll("_onButtonClick","_onValueChange","_onColorPickerOpen","_onColorPickerClose"),c._events=(a={},s=o.Constants.EVENTS.COLORPICKER_OPEN,l=c._onColorPickerOpen,s in a?Object.defineProperty(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c.state={overlayVisible:!1},c._transparentPatternCanvas=o.Utils.createTransparentPatternCanvas(),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"componentWillReceiveProps",value:function(e){e.initialValue!==this.props.initialValue&&(this._value=e.initialValue.clone(),this._renderColor())}},{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._renderColor()}},{key:"componentDidUpdate",value:function(){this._renderColor()}},{key:"_onColorPickerOpen",value:function(e){e!==this&&this.setState({overlayVisible:!1})}},{key:"_onColorPickerClose",value:function(){this.setState({overlayVisible:!1})}},{key:"_onButtonClick",value:function(e){e.preventDefault(),e.stopPropagation(),this.state.overlayVisible||this._emitEvent(o.Constants.EVENTS.COLORPICKER_OPEN,this),this.setState({overlayVisible:!this.state.overlayVisible})}},{key:"_onValueChange",value:function(e){this._value=e,this._renderColor(),this.forceUpdate(),this.props.onChange&&this.props.onChange(e)}},{key:"_renderColor",value:function(){var e=this.refs.canvas,t=e.getContext("2d");e.width=e.offsetWidth,e.height=e.offsetHeight;var n=t.createPattern(this._transparentPatternCanvas,"repeat");t.fillStyle=n,t.fillRect(0,0,e.width,e.height),t.fillStyle=this._value.toRGBA(),t.fillRect(0,0,e.width,e.height)}},{key:"renderWithBEM",value:function(){var e=null;this.state.overlayVisible&&(e=o.ReactBEM.createElement(s.default,{initialValue:this._value,onChange:this._onValueChange,onClose:this._onColorPickerClose,alpha:this.props.alpha}));var t=this.state.overlayVisible?"is-active":null;return o.ReactBEM.createElement("bem",{specifier:"$b:controls"},o.ReactBEM.createElement("div",{bem:"$b:colorPicker",className:t,onClick:this._onButtonClick},o.ReactBEM.createElement("canvas",{bem:"e:preview",ref:"canvas"}),o.ReactBEM.createElement("div",{bem:"e:label"},this.props.label||this._t("pesdk.common.text.color")),e))}}]),t}();t.default=l,l.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(177)),a=s(n(180));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._fonts=n,this._loadedFonts=[]}return i(e,[{key:"setFonts",value:function(e){this._fonts=e}},{key:"needsToLoad",value:function(){for(var e=this,t=function(t){var n=void 0;return e._fonts[t].getVariations().forEach(function(e){n=n||e.getProvider()}),n?{v:!0}:"continue"},n=0;n<this._fonts.length;n++){var i=t(n);switch(i){case"continue":continue;default:if("object"===(void 0===i?"undefined":r(i)))return i.v}}}},{key:"fontLoaded",value:function(e){var t=e.getFontFamily();return-1!==this._loadedFonts.indexOf(t)}},{key:"setFontLoaded",value:function(e){if(!this.fontLoaded(e)){var t=e.getFontFamily();this._loadedFonts.push(t)}}},{key:"load",value:function(){var e=this,t=this._fonts,n={google:new o.default(this._ui),file:new a.default(this._ui)},r=function(){for(var e in n){n[e].dispose()}};t.filter(function(t){return!e.fontLoaded(t)}).forEach(function(e){e.getVariations().forEach(function(e){var t=e.getProvider();t&&n[t].add(e)})});var i=[];for(var s in n)i.push(n[s].load());return Promise.all(i).then(function(){r(),t.forEach(function(t){e.setFontLoaded(t)})}).catch(function(e){throw r(),e})}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=s(n(53)),a=s(n(55));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_serializeSticker",value:function(e,n){var r=e.getInputDimensions(!1),o=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeSticker",this).call(this,e,n);return"none"!==n.getTintMode()&&(o.options.tintColor=n.serializeOption("tintColor",!0)),o.options.dimensions=n.getDimensions().clone().divide(r.min()).toObject(),o.options.identifier=o.options.name,delete o.options.name,o}},{key:"_serializePath",value:function(e){var n=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializePath",this).call(this,e),r=e.getBrush();return r.hasOption("hardness")&&(n.hardness=r.getOption("hardness")),n}},{key:"_serializeOperation",value:function(e,n){return"frame"===e.constructor.identifier?(this._serializeFrameOperation(e,n),null):"overlay"===e.constructor.identifier?(this._serializeOverlayOperation(e,n),null):i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeOperation",this).call(this,e,n)}},{key:"_serializeFrameOperation",value:function(e,t){var n=t.filter(function(e){return"sprite"===e.type}),r=void 0;n.length?r=n.pop():(r={type:"sprite",options:{sprites:[]}},t.push(r)),r.options.sprites.push({type:"frame",options:this._getFrameOptions(e)})}},{key:"_serializeOverlayOperation",value:function(e,t){if(e.getIdentifier()){var n=t.filter(function(e){return"sprite"===e.type}),r=void 0;n.length?r=n.pop():(r={type:"sprite",options:{sprites:[]}},t.push(r)),r.options.sprites.push({type:"overlay",options:{identifier:e.getIdentifier(),intensity:e.getAlpha(),blendMode:a.default[e.getBlendMode()]}})}}},{key:"_getFrameOptions",value:function(e){return{identifier:e.getFrame().identifier}}},{key:"_serializeOrientationOperation",value:function(e){var n=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeOrientationOperation",this).call(this,e);return 90!==n.options.rotation&&270!==n.options.rotation||(n.options.flipHorizontally=!n.options.flipHorizontally,n.options.flipVertically=!n.options.flipVertically),n}},{key:"_serializeTransformOperation",value:function(e){var n=this._editor.operations;if(n.exists("orientation")){e=e.clone();var r=n.get("orientation");e.rotate(-r.getRotation()),r.getFlipVertically()&&(e.flip("vertical"),e.setRotation(-1*e.getRotation())),r.getFlipHorizontally()&&(e.flip("horizontal"),e.setRotation(-1*e.getRotation()))}var o=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeTransformOperation",this).call(this,e);return o.type="transform",o}},{key:"_serializeText",value:function(e,n){var r=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeText",this).call(this,e,n),o=e.getInputDimensions(!1);return r.options.fontIdentifier=n.getFontIdentifier(),r.options.maxWidth=r.options.maxWidth*o.x/o.min(),delete r.options.fontFamily,r}},{key:"_serializeFilterOperation",value:function(e){var n=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeFilterOperation",this).call(this,e);return n?(n.options.identifier=n.options.name,delete n.options.name,n):null}},{key:"_serializeRadialFocusOperation",value:function(e){var n=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeRadialFocusOperation",this).call(this,e),r=n.options.options;return r.start=r.position,delete r.position,r.end={x:r.start.x+r.radius,y:r.start.y},delete r.radius,n}}]),t}();t.default=l,l.version="2.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=n(0),a=h(n(54)),s=h(n(48)),l=h(n(183)),c=h(n(11)),u=h(n(49)),f=h(n(30)),p=h(n(23)),d=h(n(55));function h(e){return e&&e.__esModule?e:{default:e}}var _=o.SDKUtils.flipObject(d.default),m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));o._frameManager=new s.default(o._ui,o._getOptions("frame"));var a=o._getOptions("overlay");return a&&(o._overlayManager=new l.default(o._ui,a)),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"_deserializeSprite",value:function(e,n){return"frame"===n.type?this._deserializeFrame(e,n):"overlay"===n.type?this._deserializeOverlay(e,n):i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_deserializeSprite",this).call(this,e,n)}},{key:"_deserializeOperation",value:function(e){return"transform"===e.type?this._deserializeTransformOperation(e):i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_deserializeOperation",this).call(this,e)}},{key:"_deserializeOrientationOperation",value:function(e){return 90!==e.options.rotation&&270!==e.options.rotation||(e.options.flipHorizontally=!e.options.flipHorizontally,e.options.flipVertically=!e.options.flipVertically),i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_deserializeOrientationOperation",this).call(this,e)}},{key:"_deserializeTransformOperation",value:function(e){var n=this;return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_deserializeCropOperation",this).call(this,e).then(function(e){if(e){var t=o.SDKUtils.Array.find(n._data.operations,function(e){return"orientation"===e.type});if(t){var r=t.options,i=r.rotation,a=r.flipHorizontally,s=r.flipVertically;90!==i&&270!==i||(!a&&s||a&&!s)&&(a=!a,s=!s),e.rotate(r.rotation),a&&(e.flip("horizontal"),e.setRotation(-1*e.getRotation())),s&&(e.flip("vertical"),e.setRotation(-1*e.getRotation()))}return e}})}},{key:"_deserializeFrame",value:function(e,t){var n=this,r=t.options.identifier,i=this._frameManager.getFrameByIdentifier(r);if(!i)return o.Log.warn("Deserializer","Unknown frame `"+r+"`. Skipping frame."),Promise.resolve();var a=new u.default(this._ui,i);return a.load().then(function(){n._editor.operations.getOrCreate("frame",{frame:a.getFrame()})})}},{key:"_deserializeOverlay",value:function(e,t){var n=this,r=t.options,i=r.blendMode,a=r.intensity,s=r.identifier,l=this._overlayManager.getOverlayByIdentifier(s);if(!l)return o.Log.warn("Deserializer","Unknown overlay `"+s+"`. Skipping overlay."),Promise.resolve();var c=this._editor.getUI().getAssetPath(l.image);return p.default.load(c).then(function(e){n._editor.operations.getOrCreate("overlay",{alpha:a,identifier:s,blendMode:parseInt(_[i||l.blendMode],10),image:e})})}},{key:"_createBrushForPath",value:function(e){var n=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_createBrushForPath",this).call(this,e);return void 0!==e.hardness&&n.hasOption("hardness")&&n.setHardness(e.hardness),n}},{key:"_deserializeSticker",value:function(e,t){var n=this,r=o.SDK.Operations.SpriteOperation,i=t.options,a=this._stickerManager.getStickerByIdentifier(i.identifier),s=c.default.getURLForSticker(a,"base");if(!a)return o.Log.warn("Deserializer","Unknown sticker `"+i.identifier+"`. Skipping sprite."),Promise.resolve();var l=e.getInputDimensions(!1);return new Promise(function(t,c){var u=new window.Image;u.addEventListener("load",function(){var n=r.StickerSprite.prototype.availableOptions.adjustments.structure,s=i.rotation,c=i.flipHorizontally,f=i.flipVertically,p={identifier:i.identifier,image:u,position:o.Vector2.fromObject(i.position),dimensions:o.Vector2.fromObject(i.dimensions).multiply(l.min()),rotation:s,flipHorizontally:c,flipVertically:f,adjustments:{}};void 0!==i.adjustments&&["brightness","contrast","saturation"].forEach(function(e){void 0!==i.adjustments[e]&&(p.adjustments[e]=i.adjustments[e]+n[e].default)}),void 0!==i.tintColor&&void 0!==a.tintMode&&(p.tintColor=o.Color.fromArray(i.tintColor),p.tintMode=a.tintMode),t(e.createSticker(p))}),u.crossOrigin=n._editor.getCrossOrigin(),u.src=n._editor.getUI().getAssetPath(s)})}},{key:"_deserializeFilterOperation",value:function(e){var t=this,n=e.options;return this._filterManager.getFilterByIdentifier(n.identifier)?this._filterManager.instantiateFilterWithIdentifier(n.identifier).then(function(e){var r=t._editor.operations.getOrCreate("filter");if(r)return r.set({identifier:n.identifier,filter:e,intensity:n.intensity}),r}):(o.Log.warn("Deserializer","Unknown filter `"+n.identifier+"`"),Promise.resolve())}},{key:"_deserializeFocusOperation",value:function(e){var n=e.options,r=n.options;if("radial"!==n.type)return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_deserializeFocusOperation",this).call(this,e);var a=r.start,s=r.end,l=r.gradientRadius,c=r.blurRadius,u=o.Vector2.fromObject(s).subtract(o.Vector2.fromObject(a)).len();return Promise.resolve(this._editor.operations.getOrCreate("radial-focus",{position:o.Vector2.fromObject(a),radius:u,gradientRadius:l,blurRadius:c}))}},{key:"_deserializeText",value:function(e,t){var n=t.options,r=n.fontSize,i=n.lineHeight,a=n.fontIdentifier,s=n.alignment,l=n.rotation,c=n.maxWidth,u=n.color,p=n.backgroundColor,d=new f.default(this._ui),h=this._fontManager.getVariationByIdentifier(a);return h?d.setFonts([h.getFont()]):h=this._fontManager.getDefaultFont(),d.load().then(function(){var t=e.getInputDimensions(!1),a=c*t.min()/t.x;return e.createText({fontSize:r,lineHeight:i,fontFamily:h.getFontFamily(),fontWeight:h.getFontWeight(),fontIdentifier:h.getIdentifier(),alignment:s,rotation:l,maxWidth:a,text:n.text,color:o.Color.fromArray(u),backgroundColor:o.Color.fromArray(p),position:o.Vector2.fromObject(n.position)})})}}]),t}();t.default=m,m.version="2.0.0"},function(e,t,n){if("production"!=={ENV:'"development"'}.NODE_ENV){var r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;e.exports=n(63)(function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},!0)}else e.exports=n(66)()},function(e,t,n){"use strict";var r=n(17);if("production"!=={ENV:'"development"'}.NODE_ENV){r=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==t.indexOf("Failed Composite propType: ")&&!e){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];(function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var i=0,o="Warning: "+e.replace(/%s/g,function(){return n[i++]});"undefined"!=typeof console&&console.error(o);try{throw new Error(o)}catch(e){}}).apply(void 0,[t].concat(r))}}}e.exports=r},function(e,t,n){var r;
/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r))e.push(i.apply(null,r));else if("object"===o)for(var a in r)n.call(r,a)&&r[a]&&e.push(a)}}return e.join(" ")}void 0!==e&&e.exports?e.exports=i:void 0===(r=function(){return i}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._parent=t,this._type=n,this._name=r}return r(e,[{key:"element",value:function(t){return new e(this,"element",t)}},{key:"modifier",value:function(t){return new e(this,"modifier",t)}},{key:"str",get:function(){var e=this._parent?this._parent.str:"";switch(this._type){case"block":e+="pesdk-react-"+this._name;break;case"element":e+="__"+this._name;break;case"modifier":e+="--"+this._name}return e}}]),e}();t.default={block:function(e){return new i(null,"block",e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=s(n(16)),o=s(n(35)),a=s(n(36));function s(e){return e&&e.__esModule?e:{default:e}}function l(e){for(var t=[],n=0;n<e.length;n++)e[n]instanceof Array?t=t.concat(l(e[n])):t.push(e[n]);return t}var c={b:"block",e:"element",m:"modifier"},u={_parseBemSpecifier:function(e){return e?e.split(" ").map(function(e){var t=e.match(/^(\$)?([bem]):(.*)$/i);if(!t)throw new Error("Invalid BEM specifier: "+e);var n=void 0!==t[1];return{type:c[t[2]],name:t[3],pass:n}}):[]},_getBemInfoForNode:function(e){var t="bem"===e.type,n=t?e.props.specifier:e.props.bem;if(t&&!n)throw new Error("<bem> elements should always have a `specifier` property");var r=this._parseBemSpecifier(n);return t&&r.forEach(function(e){e.pass=!0}),{data:r,isBemNode:t}},createElement:function(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return{type:e,props:t=t||{},children:r=r.filter(function(e){return null!==e&&void 0!==e})}},_isNodeBEMable:function(e){return null!==e&&"object"===(void 0===e?"undefined":r(e))&&!i.default.isValidElement(e)},_applyBEMClasses:function(e){var t=this;if(!this._isNodeBEMable(e))return e;var n=e.props.className?[e.props.className]:[],r=this._getBemInfoForNode(e),i=e.props.__bemObject,s=e.props.__bemObject;r.data.forEach(function(e){if("block"===e.type)i=a.default.block(e.name),e.pass&&(s=a.default.block(e.name)),n.push(i.str);else if("element"===e.type){if(!i)throw new Error("Tried to create an element, but no parent block has been found.");i=i.element(e.name),e.pass&&(s=s.element(e.name)),n.push(i.str)}else if("modifier"===e.type){if(!i)throw new Error("Tried to create a modifier, but no parent block has been found.");e.pass&&(s=s.modifier(e.name)),n.push(i.modifier(e.name).str)}});var c=(0,o.default)(n);return c&&(e.props.className=c),e.children=l(e.children),e.children.forEach(function(e){t._isNodeBEMable(e)&&(e.props.__bemObject=s)}),e.children=e.children.map(function(e){return t._applyBEMClasses(e)}),e.children=l(e.children),delete e.props.__bemObject,delete e.props.bem,r.isBemNode&&(e=e.children instanceof Array&&1===e.children.length?e.children[0]:e.children),e},_transformToReact:function(e){var t=this;return this._isNodeBEMable(e)?(e.children=e.children.map(function(e){return t._transformToReact(e)}),i.default.createElement.apply(i.default,[e.type,e.props].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e.children)))):e},transform:function(e){return(e=this._applyBEMClasses(e))instanceof Array?e:e=this._transformToReact(e)}};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={DEFAULTS:{FILTERS:[{identifier:"imgly_filters_analog",defaultName:"Analog",filters:[{identifier:"imgly_lut_cool",defaultName:"Cool",lutImage:"filters/imgly_lut_cool_5_5_128.png"},{identifier:"imgly_lut_blues",defaultName:"Blues",lutImage:"filters/imgly_lut_blues_5_5_128.png"},{identifier:"imgly_lut_blueshadows",defaultName:"Blue Shadows",lutImage:"filters/imgly_lut_blueshadows_5_5_128.png"},{identifier:"imgly_lut_k6",defaultName:"K6",lutImage:"filters/imgly_lut_k6_5_5_128.png"},{identifier:"imgly_lut_kdynamic",defaultName:"KDynamic",lutImage:"filters/imgly_lut_kdynamic_5_5_128.png"},{identifier:"imgly_lut_lucid",defaultName:"Lucid",lutImage:"filters/imgly_lut_lucid_5_5_128.png"},{identifier:"imgly_lut_pale",defaultName:"Pale",lutImage:"filters/imgly_lut_pale_5_5_128.png"}]},{identifier:"imgly_filters_bw",defaultName:"Black & White",filters:[{identifier:"imgly_lut_sin",defaultName:"Sin",lutImage:"filters/imgly_lut_sin_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_ad1920",defaultName:"1920 A.D.",lutImage:"filters/imgly_lut_ad1920_5_5_128.png"},{identifier:"imgly_lut_bw",defaultName:"B & W",lutImage:"filters/imgly_lut_bw_5_5_128.png"},{identifier:"imgly_lut_litho",defaultName:"Litho",lutImage:"filters/imgly_lut_litho_5_5_128.png"},{identifier:"imgly_lut_plate",defaultName:"Plate",lutImage:"filters/imgly_lut_plate_5_5_128.png"},{identifier:"imgly_lut_x400",defaultName:"X400",lutImage:"filters/imgly_lut_x400_5_5_128.png"}]},{identifier:"imgly_filters_retro",defaultName:"Retro",filters:[{identifier:"imgly_lut_celsius",defaultName:"Celsius",lutImage:"filters/imgly_lut_celsius_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_k2",defaultName:"K2",lutImage:"filters/imgly_lut_k2_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_sepiahigh",defaultName:"Sepia High",lutImage:"filters/imgly_lut_sepiahigh_5_5_128.png"},{identifier:"imgly_lut_ancient",defaultName:"Ancient",lutImage:"filters/imgly_lut_ancient_5_5_128.png"},{identifier:"imgly_lut_classic",defaultName:"Classic",lutImage:"filters/imgly_lut_classic_5_5_128.png"},{identifier:"imgly_lut_eighties",defaultName:"Eighties",lutImage:"filters/imgly_lut_eighties_5_5_128.png"},{identifier:"imgly_lut_elder",defaultName:"Elder",lutImage:"filters/imgly_lut_elder_5_5_128.png"},{identifier:"imgly_lut_glam",defaultName:"Glam",lutImage:"filters/imgly_lut_glam_5_5_128.png"},{identifier:"imgly_lut_gobblin",defaultName:"Gobblin",lutImage:"filters/imgly_lut_gobblin_5_5_128.png"},{identifier:"imgly_lut_orchid",defaultName:"Orchid",lutImage:"filters/imgly_lut_orchid_5_5_128.png"},{identifier:"imgly_lut_seventies",defaultName:"Seventies",lutImage:"filters/imgly_lut_seventies_5_5_128.png"}]},{identifier:"imgly_filters_special",defaultName:"Special",filters:[{identifier:"imgly_lut_fixie",defaultName:"Fixie",lutImage:"filters/imgly_lut_fixie_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_colorful",defaultName:"Colorful",lutImage:"filters/imgly_lut_colorful_5_5_128.png"},{identifier:"imgly_lut_cottoncandy",defaultName:"Cotton Candy",lutImage:"filters/imgly_lut_cottoncandy_5_5_128.png"},{identifier:"imgly_lut_food",defaultName:"Food",lutImage:"filters/imgly_lut_food_5_5_128.png"},{identifier:"imgly_lut_highcontrast",defaultName:"High Contrast",lutImage:"filters/imgly_lut_highcontrast_5_5_128.png"},{identifier:"imgly_lut_k1",defaultName:"K1",lutImage:"filters/imgly_lut_k1_5_5_128.png"},{identifier:"imgly_lut_lomo100",defaultName:"Lomo 100",lutImage:"filters/imgly_lut_lomo100_5_5_128.png"},{identifier:"imgly_lut_neat",defaultName:"Neat",lutImage:"filters/imgly_lut_neat_5_5_128.png"},{identifier:"imgly_lut_nogreen",defaultName:"No Green",lutImage:"filters/imgly_lut_nogreen_5_5_128.png"},{identifier:"imgly_lut_pola669",defaultName:"Pola 669",lutImage:"filters/imgly_lut_pola669_5_5_128.png"},{identifier:"imgly_lut_polasx",defaultName:"Pola SX",lutImage:"filters/imgly_lut_polasx_5_5_128.png"},{identifier:"imgly_lut_pro400",defaultName:"Pro 400",lutImage:"filters/imgly_lut_pro400_5_5_128.png"},{identifier:"imgly_lut_twilight",defaultName:"Twilight",lutImage:"filters/imgly_lut_twilight_5_5_128.png"},{identifier:"imgly_lut_settled",defaultName:"Settled",lutImage:"filters/imgly_lut_settled_5_5_128.png"},{identifier:"imgly_lut_steel",defaultName:"Steel",lutImage:"filters/imgly_lut_steel_5_5_128.png"}]},{identifier:"imgly_filters_summer",defaultName:"Summer",filters:[{identifier:"imgly_lut_texas",defaultName:"Texas",lutImage:"filters/imgly_lut_texas_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_mellow",defaultName:"Mellow",lutImage:"filters/imgly_lut_mellow_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_chest",defaultName:"Chest",lutImage:"filters/imgly_lut_chest_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_creamy",defaultName:"Creamy",lutImage:"filters/imgly_lut_creamy_5_5_128.png"},{identifier:"imgly_lut_evening",defaultName:"Evening",lutImage:"filters/imgly_lut_evening_5_5_128.png"},{identifier:"imgly_lut_fall",defaultName:"Fall",lutImage:"filters/imgly_lut_fall_5_5_128.png"},{identifier:"imgly_lut_front",defaultName:"Front",lutImage:"filters/imgly_lut_front_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_highcarb",defaultName:"High Carb",lutImage:"filters/imgly_lut_highcarb_5_5_128.png"},{identifier:"imgly_lut_keen",defaultName:"Keen",lutImage:"filters/imgly_lut_keen_5_5_128.png"},{identifier:"imgly_lut_pitched",defaultName:"Pitched",lutImage:"filters/imgly_lut_pitched_5_5_128.png"},{identifier:"imgly_lut_soft",defaultName:"Soft",lutImage:"filters/imgly_lut_soft_5_5_128.png"},{identifier:"imgly_lut_summer",defaultName:"Summer",lutImage:"filters/imgly_lut_summer_5_5_128.png"},{identifier:"imgly_lut_sunset",defaultName:"Sunset",lutImage:"filters/imgly_lut_sunset_5_5_128.png"},{identifier:"imgly_lut_tender",defaultName:"Tender",lutImage:"filters/imgly_lut_tender_5_5_128.png"}]},{identifier:"imgly_filters_winter",defaultName:"Winter",filters:[{identifier:"imgly_lut_fridge",defaultName:"Fridge",lutImage:"filters/imgly_lut_fridge_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_bleached",defaultName:"Bleached",lutImage:"filters/imgly_lut_bleached_5_5_128.png"},{identifier:"imgly_lut_bleachedblue",defaultName:"Bleached Blue",lutImage:"filters/imgly_lut_bleachedblue_5_5_128.png"},{identifier:"imgly_lut_breeze",defaultName:"Breeze",lutImage:"filters/imgly_lut_breeze_5_5_128.png"},{identifier:"imgly_lut_lenin",defaultName:"Lenin",lutImage:"filters/imgly_lut_lenin_5_5_128.png"},{identifier:"imgly_lut_quozi",defaultName:"Quozi",lutImage:"filters/imgly_lut_quozi_5_5_128.png"},{identifier:"imgly_lut_winter",defaultName:"Winter",lutImage:"filters/imgly_lut_winter_5_5_128.png"}]}],OVERLAYS:[{identifier:"imgly_overlay_golden",defaultName:"Golden",image:"overlays/imgly_overlay_golden.jpg",thumbnail:"overlays/imgly_overlay_golden_thumb.jpg",blendMode:"lighten"},{identifier:"imgly_overlay_bokeh",defaultName:"Bokeh",image:"overlays/imgly_overlay_bokeh.jpg",thumbnail:"overlays/imgly_overlay_bokeh_thumb.jpg",blendMode:"lighten"},{identifier:"imgly_overlay_hearts",defaultName:"Hearts",image:"overlays/imgly_overlay_hearts.jpg",thumbnail:"overlays/imgly_overlay_hearts_thumb.jpg",blendMode:"screen"},{identifier:"imgly_overlay_lightleak1",defaultName:"Light Leak",image:"overlays/imgly_overlay_lightleak1.jpg",thumbnail:"overlays/imgly_overlay_lightleak1_thumb.jpg",blendMode:"screen"},{identifier:"imgly_overlay_lightleak2",defaultName:"Light Leak 2",image:"overlays/imgly_overlay_lightleak2.jpg",thumbnail:"overlays/imgly_overlay_lightleak2_thumb.jpg",blendMode:"lighten"},{identifier:"imgly_overlay_rain",defaultName:"Rain",image:"overlays/imgly_overlay_rain.jpg",thumbnail:"overlays/imgly_overlay_rain_thumb.jpg",blendMode:"overlay"},{identifier:"imgly_overlay_wood",defaultName:"Wood",image:"overlays/imgly_overlay_wood.jpg",thumbnail:"overlays/imgly_overlay_wood_thumb.jpg",blendMode:"multiply"},{identifier:"imgly_overlay_mosaic",defaultName:"Mosaic",image:"overlays/imgly_overlay_mosaic.jpg",thumbnail:"overlays/imgly_overlay_mosaic_thumb.jpg",blendMode:"multiply"},{identifier:"imgly_overlay_chop",defaultName:"Chop",image:"overlays/imgly_overlay_chop.jpg",thumbnail:"overlays/imgly_overlay_chop_thumb.jpg",blendMode:"multiply"},{identifier:"imgly_overlay_vintage",defaultName:"Vintage",image:"overlays/imgly_overlay_vintage.jpg",thumbnail:"overlays/imgly_overlay_vintage_thumb.jpg",blendMode:"darken"},{identifier:"imgly_overlay_metal",defaultName:"Metal",image:"overlays/imgly_overlay_metal.jpg",thumbnail:"overlays/imgly_overlay_metal_thumb.jpg",blendMode:"overlay"},{identifier:"imgly_overlay_paper",defaultName:"Paper",image:"overlays/imgly_overlay_paper.jpg",thumbnail:"overlays/imgly_overlay_paper_thumb.jpg",blendMode:"multiply"},{identifier:"imgly_overlay_painting",defaultName:"Painting",image:"overlays/imgly_overlay_painting.jpg",thumbnail:"overlays/imgly_overlay_painting_thumb.jpg",blendMode:"overlay"},{identifier:"imgly_overlay_grain",defaultName:"Grain",image:"overlays/imgly_overlay_grain.jpg",thumbnail:"overlays/imgly_overlay_grain_thumb.jpg",blendMode:"overlay"},{identifier:"imgly_overlay_clouds",defaultName:"Clouds",image:"overlays/imgly_overlay_clouds.jpg",thumbnail:"overlays/imgly_overlay_clouds_thumb.jpg",blendMode:"softLight"},{identifier:"imgly_overlay_wall1",defaultName:"Wall",image:"overlays/imgly_overlay_wall1.jpg",thumbnail:"overlays/imgly_overlay_wall1_thumb.jpg",blendMode:"lighten"},{identifier:"imgly_overlay_wall2",defaultName:"Wall 2",image:"overlays/imgly_overlay_wall2.jpg",thumbnail:"overlays/imgly_overlay_wall2_thumb.jpg",blendMode:"overlay"}],FRAME_CATEGORIES:[{identifier:"imgly_frame_generic",defaultName:"Generic",metaData:{backgroundImage:"frames/generic.png"},frames:[{identifier:"imgly_frame_dia",defaultName:"Dia",layoutMode:"horizontal-inside",thumbnail:"frames/imgly_frame_dia/imgly_frame_dia_thumb.png",imageGroups:{top:{mid:{image:"frames/imgly_frame_dia/imgly_frame_dia_top.png",mode:"repeat"}},left:{start:"frames/imgly_frame_dia/imgly_frame_dia_top_corner_left.png",mid:"frames/imgly_frame_dia/imgly_frame_dia_left.png",end:"frames/imgly_frame_dia/imgly_frame_dia_bottom_corner_left.png"},right:{start:"frames/imgly_frame_dia/imgly_frame_dia_top_corner_right.png",mid:"frames/imgly_frame_dia/imgly_frame_dia_right.png",end:"frames/imgly_frame_dia/imgly_frame_dia_bottom_corner_right.png"},bottom:{mid:{image:"frames/imgly_frame_dia/imgly_frame_dia_bottom.png",mode:"repeat"}}}},{identifier:"imgly_frame_art_decor",defaultName:"Art Decor",tintable:!0,layoutMode:"horizontal-inside",thumbnail:"frames/imgly_frame_art_decor/imgly_frame_art_decor_thumb.png",imageGroups:{top:{start:"frames/imgly_frame_art_decor/imgly_frame_art_decor_top_corner_left.png",mid:{image:"frames/imgly_frame_art_decor/imgly_frame_art_decor_top.png",mode:"stretch"},end:"frames/imgly_frame_art_decor/imgly_frame_art_decor_top_corner_right.png"},left:{mid:{image:"frames/imgly_frame_art_decor/imgly_frame_art_decor_left.png",mode:"stretch"}},right:{mid:{image:"frames/imgly_frame_art_decor/imgly_frame_art_decor_right.png",mode:"stretch"}},bottom:{start:"frames/imgly_frame_art_decor/imgly_frame_art_decor_bottom_corner_left.png",mid:{image:"frames/imgly_frame_art_decor/imgly_frame_art_decor_bottom.png",mode:"stretch"},end:"frames/imgly_frame_art_decor/imgly_frame_art_decor_bottom_corner_right.png"}}},{identifier:"imgly_frame_black_passepartout",defaultName:"Black Passepartout",layoutMode:"horizontal-inside",thumbnail:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_thumb.png",imageGroups:{top:{start:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_top_corner_left.png",mid:{image:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_top.png",mode:"stretch"},end:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_top_corner_right.png"},left:{mid:{image:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_left.png",mode:"stretch"}},right:{mid:{image:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_right.png",mode:"stretch"}},bottom:{start:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_bottom_corner_left.png",mid:{image:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_bottom.png",mode:"stretch"},end:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_bottom_corner_right.png"}}},{identifier:"imgly_frame_lowpoly_shadow",defaultName:"Low Poly",layoutMode:"horizontal-inside",thumbnail:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_thumb.png",imageGroups:{top:{start:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_top_corner_left.png",mid:{image:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_top.png",mode:"stretch"},end:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_top_corner_right.png"},left:{mid:{image:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_left.png",mode:"stretch"}},right:{mid:{image:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_right.png",mode:"stretch"}},bottom:{start:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_bottom_corner_left.png",mid:{image:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_bottom.png",mode:"stretch"},end:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_bottom_corner_right.png"}}},{identifier:"imgly_frame_wood_passepartout",defaultName:"Wood Passepartout",layoutMode:"horizontal-inside",thumbnail:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_thumb.png",imageGroups:{top:{start:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_top_corner_left.png",mid:{image:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_top.png",mode:"stretch"},end:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_top_corner_right.png"},left:{mid:{image:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_left.png",mode:"stretch"}},right:{mid:{image:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_right.png",mode:"stretch"}},bottom:{start:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_bottom_corner_left.png",mid:{image:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_bottom.png",mode:"stretch"},end:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_bottom_corner_right.png"}}}]}],STICKER_CATEGORIES:[{identifier:"imgly_sticker_emoticons",defaultName:"Emoticons",metaData:{backgroundImage:"stickers/emoticons/background.png"},stickers:[{identifier:"imgly_sticker_emoticons_alien",defaultName:"Alien",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_alien.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_alien.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_alien.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_alien.png"],width:1e3,height:935}}},{identifier:"imgly_sticker_emoticons_angel",defaultName:"Angel",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_angel.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_angel.png"],width:62,height:64},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_angel.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_angel.png"]}}},{identifier:"imgly_sticker_emoticons_angry",defaultName:"Angry",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_angry.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_angry.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_angry.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_angry.png"]}}},{identifier:"imgly_sticker_emoticons_anxious",defaultName:"Anxious",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_anxious.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_anxious.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_anxious.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_anxious.png"]}}},{identifier:"imgly_sticker_emoticons_asleep",defaultName:"Asleep",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_asleep.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_asleep.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_asleep.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_asleep.png"]}}},{identifier:"imgly_sticker_emoticons_attention",defaultName:"Attention",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_attention.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_attention.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_attention.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_attention.png"]}}},{identifier:"imgly_sticker_emoticons_baby_chicken",defaultName:"Baby Chicken",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_baby_chicken.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_baby_chicken.png"],width:61,height:42},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_baby_chicken.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_baby_chicken.png"]}}},{identifier:"imgly_sticker_emoticons_batman",defaultName:"Batman",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_batman.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_batman.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_batman.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_batman.png"]}}},{identifier:"imgly_sticker_emoticons_beer",defaultName:"Beer",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_beer.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_beer.png"],width:62,height:59},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_beer.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_beer.png"]}}},{identifier:"imgly_sticker_emoticons_blush",defaultName:"Blush",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_blush.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_blush.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_blush.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_blush.png"]}}},{identifier:"imgly_sticker_emoticons_boxer",defaultName:"Boxer",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_boxer.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_boxer.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_boxer.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_boxer.png"]}}},{identifier:"imgly_sticker_emoticons_business",defaultName:"Business",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_business.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_business.png"],width:60,height:63},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_business.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_business.png"]}}},{identifier:"imgly_sticker_emoticons_chicken",defaultName:"Chicken",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_chicken.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_chicken.png"],width:63,height:55},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_chicken.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_chicken.png"]}}},{identifier:"imgly_sticker_emoticons_cool",defaultName:"Cool",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_cool.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_cool.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_cool.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_cool.png"]}}},{identifier:"imgly_sticker_emoticons_cry",defaultName:"Cry",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_cry.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_cry.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_cry.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_cry.png"]}}},{identifier:"imgly_sticker_emoticons_deceased",defaultName:"Deceased",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_deceased.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_deceased.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_deceased.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_deceased.png"]}}},{identifier:"imgly_sticker_emoticons_devil",defaultName:"Devil",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_devil.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_devil.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_devil.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_devil.png"]}}},{identifier:"imgly_sticker_emoticons_duckface",defaultName:"Duckface",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_duckface.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_duckface.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_duckface.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_duckface.png"]}}},{identifier:"imgly_sticker_emoticons_furious",defaultName:"Furious",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_furious.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_furious.png"],width:62,height:61},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_furious.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_furious.png"]}}},{identifier:"imgly_sticker_emoticons_grin",defaultName:"Grin",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_grin.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_grin.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_grin.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_grin.png"]}}},{identifier:"imgly_sticker_emoticons_guitar",defaultName:"Guitar",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_guitar.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_guitar.png"],width:64,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_guitar.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_guitar.png"]}}},{identifier:"imgly_sticker_emoticons_harry_potter",defaultName:"Harry Potter",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_harry_potter.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_harry_potter.png"],width:64,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_harry_potter.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_harry_potter.png"]}}},{identifier:"imgly_sticker_emoticons_hippie",defaultName:"Hippie",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_hippie.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_hippie.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_hippie.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_hippie.png"]}}},{identifier:"imgly_sticker_emoticons_hitman",defaultName:"Hitman",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_hitman.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_hitman.png"],width:64,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_hitman.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_hitman.png"]}}},{identifier:"imgly_sticker_emoticons_humourous",defaultName:"Humourous",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_humourous.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_humourous.png"],width:64,height:64},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_humourous.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_humourous.png"]}}},{identifier:"imgly_sticker_emoticons_idea",defaultName:"Idea",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_idea.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_idea.png"],width:64,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_idea.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_idea.png"]}}},{identifier:"imgly_sticker_emoticons_impatient",defaultName:"Impatient",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_impatient.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_impatient.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_impatient.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_impatient.png"]}}},{identifier:"imgly_sticker_emoticons_kiss",defaultName:"Kiss",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_kiss.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_kiss.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_kiss.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_kiss.png"]}}},{identifier:"imgly_sticker_emoticons_kisses",defaultName:"Kisses",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_kisses.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_kisses.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_kisses.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_kisses.png"]}}},{identifier:"imgly_sticker_emoticons_laugh",defaultName:"Laugh",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_laugh.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_laugh.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_laugh.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_laugh.png"]}}},{identifier:"imgly_sticker_emoticons_loud_cry",defaultName:"Loud Cry",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_loud_cry.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_loud_cry.png"],width:64,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_loud_cry.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_loud_cry.png"]}}},{identifier:"imgly_sticker_emoticons_loving",defaultName:"Loving",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_loving.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_loving.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_loving.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_loving.png"]}}},{identifier:"imgly_sticker_emoticons_masked",defaultName:"Masked",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_masked.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_masked.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_masked.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_masked.png"]}}},{identifier:"imgly_sticker_emoticons_music",defaultName:"Music",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_music.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_music.png"],width:62,height:54},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_music.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_music.png"]}}},{identifier:"imgly_sticker_emoticons_nerd",defaultName:"Nerd",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_nerd.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_nerd.png"]},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_nerd.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_nerd.png"]}}},{identifier:"imgly_sticker_emoticons_ninja",defaultName:"Ninja",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_ninja.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_ninja.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_ninja.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_ninja.png"]}}},{identifier:"imgly_sticker_emoticons_not_speaking_to_you",defaultName:"Not Speaking To You",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_not_speaking_to_you.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_not_speaking_to_you.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_not_speaking_to_you.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_not_speaking_to_you.png"]}}},{identifier:"imgly_sticker_emoticons_pig",defaultName:"Pig",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_pig.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_pig.png"],width:63,height:41},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_pig.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_pig.png"]}}},{identifier:"imgly_sticker_emoticons_pumpkin",defaultName:"Pumpkin",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_pumpkin.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_pumpkin.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_pumpkin.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_pumpkin.png"]}}},{identifier:"imgly_sticker_emoticons_question",defaultName:"Question",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_question.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_question.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_question.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_question.png"]}}},{identifier:"imgly_sticker_emoticons_rabbit",defaultName:"Rabbit",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_rabbit.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_rabbit.png"],width:65,height:47},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_rabbit.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_rabbit.png"]}}},{identifier:"imgly_sticker_emoticons_sad",defaultName:"Sad",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sad.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sad.png"]},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sad.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_sad.png"]}}},{identifier:"imgly_sticker_emoticons_sick",defaultName:"Sick",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sick.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sick.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sick.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_sick.png"]}}},{identifier:"imgly_sticker_emoticons_skateboard",defaultName:"Skateboard",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_skateboard.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_skateboard.png"],width:62,height:64},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_skateboard.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_skateboard.png"]}}},{identifier:"imgly_sticker_emoticons_skull",defaultName:"Skull",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_skull.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_skull.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_skull.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_skull.png"]}}},{identifier:"imgly_sticker_emoticons_sleepy",defaultName:"Sleepy",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sleepy.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sleepy.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sleepy.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_sleepy.png"]}}},{identifier:"imgly_sticker_emoticons_smile",defaultName:"Smile",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_smile.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_smile.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_smile.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_smile.png"]}}},{identifier:"imgly_sticker_emoticons_smoking",defaultName:"Smoking",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_smoking.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_smoking.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_smoking.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_smoking.png"]}}},{identifier:"imgly_sticker_emoticons_sobbing",defaultName:"Sobbing",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sobbing.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sobbing.png"],width:62,height:59},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sobbing.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_sobbing.png"]}}},{identifier:"imgly_sticker_emoticons_star",defaultName:"Star",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_star.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_star.png"],width:64,height:64},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_star.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_star.png"]}}},{identifier:"imgly_sticker_emoticons_steaming_furious",defaultName:"Steaming Furious",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_steaming_furious.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_steaming_furious.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_steaming_furious.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_steaming_furious.png"]}}},{identifier:"imgly_sticker_emoticons_sunbathing",defaultName:"Sunbathing",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sunbathing.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sunbathing.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sunbathing.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_sunbathing.png"]}}},{identifier:"imgly_sticker_emoticons_tired",defaultName:"Tired",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_tired.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_tired.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_tired.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_tired.png"]}}},{identifier:"imgly_sticker_emoticons_tongue_out_wink",defaultName:"Tongue Out Wink",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_tongue_out_wink.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_tongue_out_wink.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_tongue_out_wink.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_tongue_out_wink.png"]}}},{identifier:"imgly_sticker_emoticons_wave",defaultName:"Wave",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wave.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wave.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wave.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_wave.png"]}}},{identifier:"imgly_sticker_emoticons_wide_grin",defaultName:"Wide Grin",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wide_grin.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wide_grin.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wide_grin.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_wide_grin.png"]}}},{identifier:"imgly_sticker_emoticons_wink",defaultName:"Wink",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wink.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wink.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wink.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_wink.png"]}}},{identifier:"imgly_sticker_emoticons_wrestler",defaultName:"Wrestler",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wrestler.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wrestler.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wrestler.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_wrestler.png"]}}}]},{identifier:"imgly_sticker_shapes",defaultName:"Shapes",metaData:{backgroundImage:"stickers/shapes/background.png"},stickers:[{identifier:"imgly_sticker_shapes_arrow_02",defaultName:"Arrow 1",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_arrow_02.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_arrow_02.png"],width:2e3,height:1236},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_arrow_02.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_arrow_02.png"],width:2e3,height:1236}}},{identifier:"imgly_sticker_shapes_arrow_03",defaultName:"Arrow 2",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_arrow_03.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_arrow_03.png"],width:2e3,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_arrow_03.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_arrow_03.png"],width:2e3,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_01",defaultName:"Badge 1",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_01.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_01.png"],width:2e3,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_01.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_01.png"],width:2e3,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_04",defaultName:"Badge 2",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_04.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_04.png"],width:2e3,height:1589},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_04.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_04.png"],width:2e3,height:1589}}},{identifier:"imgly_sticker_shapes_badge_06",defaultName:"Badge 3",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_06.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_06.png"],width:2e3,height:1733},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_06.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_06.png"],width:2e3,height:1733}}},{identifier:"imgly_sticker_shapes_badge_08",defaultName:"Badge 4",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_08.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_08.png"],width:2e3,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_08.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_08.png"],width:2e3,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_11",defaultName:"Badge 5",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_11.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_11.png"],width:2e3,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_11.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_11.png"],width:2e3,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_12",defaultName:"Badge 6",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_12.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_12.png"],width:2001,height:1903},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_12.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_12.png"],width:2001,height:1903}}},{identifier:"imgly_sticker_shapes_badge_13",defaultName:"Badge 7",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_13.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_13.png"],width:2e3,height:1718},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_13.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_13.png"],width:2e3,height:1718}}},{identifier:"imgly_sticker_shapes_badge_15",defaultName:"Badge 8",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_15.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_15.png"],width:1618,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_15.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_15.png"],width:1618,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_18",defaultName:"Badge 9",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_18.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_18.png"],width:1198,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_18.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_18.png"],width:1198,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_19",defaultName:"Badge 10",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_19.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_19.png"],width:2127,height:481},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_19.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_19.png"],width:2127,height:481}}},{identifier:"imgly_sticker_shapes_badge_20",defaultName:"Badge 11",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_20.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_20.png"],width:2e3,height:1404},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_20.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_20.png"],width:2e3,height:1404}}},{identifier:"imgly_sticker_shapes_badge_28",defaultName:"Badge 12",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_28.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_28.png"],width:2e3,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_28.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_28.png"],width:2e3,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_32",defaultName:"Badge 13",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_32.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_32.png"],width:1960,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_32.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_32.png"],width:1960,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_35",defaultName:"Badge 14",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_35.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_35.png"],width:2e3,height:2002},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_35.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_35.png"],width:2e3,height:2002}}},{identifier:"imgly_sticker_shapes_badge_36",defaultName:"Badge 15",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_36.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_36.png"],width:2e3,height:1668},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_36.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_36.png"],width:2e3,height:1668}}},{identifier:"imgly_sticker_shapes_spray_01",defaultName:"Spray 1",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_01.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_spray_01.png"],width:1912,height:2039},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_01.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_spray_01.png"],width:1912,height:2039}}},{identifier:"imgly_sticker_shapes_spray_03",defaultName:"Spray 2",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_03.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_spray_03.png"],width:1681,height:1779},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_03.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_spray_03.png"],width:1681,height:1779}}},{identifier:"imgly_sticker_shapes_spray_04",defaultName:"Spray 3",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_04.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_spray_04.png"],width:1407,height:2248},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_04.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_spray_04.png"],width:1407,height:2248}}}]}]}}},function(e,t,n){(function(t){(function(){var n,r,i;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:void 0!==t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-i)/1e6},r=t.hrtime,i=(n=function(){var e;return 1e9*(e=r())[0]+e[1]})()):Date.now?(e.exports=function(){return Date.now()-i},i=Date.now()):(e.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)}).call(t,n(21))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onClick"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onClick",value:function(){this.props.onClick&&this.props.onClick(this.props.searchSuggestion)}},{key:"renderWithBEM",value:function(){var e=this.props.searchSuggestion,t={backgroundImage:"url("+e.coverImage+")"};return i.ReactBEM.createElement("bem",{specifier:"b:photoRoll e:libraryList"},i.ReactBEM.createElement("li",{bem:"e:item",style:t,onClick:this._onClick},i.ReactBEM.createElement("div",{bem:"e:overlay"}),i.ReactBEM.createElement("div",{bem:"e:name"},e.query)))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=l(n(1)),a=l(n(104)),s=l(n(2));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._needsStyleFixes=!0,o._totalPhotosHeight=0,o.state={loading:!1,photos:[]},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._loadPhotos()}},{key:"componentDidUpdate",value:function(){this.refs.scrollbar&&this.refs.scrollbar.update()}},{key:"_onPhotoClicked",value:function(e){this.props.onPhotoClicked&&this.props.onPhotoClicked(e)}},{key:"_getHeadline",value:function(){return this.props.library.name}},{key:"fixStyles",value:function(){if(i.Utils.Browser.isIElte(11)){var e=this.refs.cell,t=this.refs.scrollbar.getList();if(!e||!t)return;var n=e.offsetHeight;t.style.height=n+"px"}this.refs.scrollbar&&this.refs.scrollbar.update()}},{key:"_renderColumns",value:function(){for(var e=this,t=this.state.photos,n=[],r=[],o=0;o<3;o++)r.push([]),n.push(0);return t.forEach(function(t){for(var o=t.dimensions,s=null,l=1/0,c=0;c<3;c++)n[c]<l&&(s=c,l=n[c]);r[s].push(i.ReactBEM.createElement(a.default,{photo:t.obj,onClick:e._onPhotoClicked.bind(e,t.obj)})),n[s]+=o.y}),r}},{key:"_renderPhotos",value:function(){var e=this._renderColumns();return i.ReactBEM.createElement("div",{bem:"$b:photoRoll e:row m:fullHeight"},i.ReactBEM.createElement("div",{bem:"e:cell",ref:"cell"},i.ReactBEM.createElement(s.default,{direction:"vertical",ref:"scrollbar"},i.ReactBEM.createElement("div",{bem:"e:container",ref:"container"},i.ReactBEM.createElement("div",{bem:"e:innerContainer"},i.ReactBEM.createElement("div",{bem:"e:headline"},this._getHeadline()),i.ReactBEM.createElement("bem",{specifier:"e:photoList"},e.map(function(e){return i.ReactBEM.createElement("ul",{bem:"$e:list"},e)})))))))}},{key:"_loadPhotos",value:function(){var e=this;this._totalPhotosHeight=0;var t=o.default.instance.displayProgress(this._t("pesdk.common.text.loading"));(new(0,this.context.options.photoRoll.provider)).getPhotosForLibrary(this.props.library).then(function(n){return e._preloadPhotos(n,t)}).then(function(n){e.setState({photos:n,loading:!1}),t.close()}).catch(function(n){t.close(),o.default.instance.displayError(e._t("pesdk.library.title.photoRollLoadFail"),e._t("pesdk.library.text.photoRollLoadFail",{error:n.message}))})}},{key:"_preloadPhotos",value:function(e,t){var n=this,r=e.length,o=0;return Promise.all(e.map(function(e){return n._preloadPhoto(e).then(function(a){var s=new i.Vector2(a.width,a.height);return s.multiply(240/a.width),n._totalPhotosHeight+=s.y,o++,t.setData({progress:o/r}),{obj:e,dimensions:s}})}))}},{key:"_preloadPhoto",value:function(e){var t=this;return new Promise(function(n,r){var i=new window.Image;i.addEventListener("load",function(){n(i)}),i.addEventListener("error",function(){n(i)}),i.crossOrigin=t.props.crossOrigin||"anonymous",i.src=e.urls.thumb})}},{key:"renderWithBEM",value:function(){return this.state.loading?i.ReactBEM.createElement("div",null):this._renderPhotos()}}]),t}();t.default=c,c.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(3)),a=s(n(2));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._hasBackButton=!1,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_onItemClick",value:function(e){this.props.onSwitchControls(e)}},{key:"_renderListItems",value:function(){var e=this,t=this.context.editor,n=[],r=function(n){var r=t.controls.get(n);return i.ReactBEM.createElement("li",{bem:"e:item",key:r.identifier,"data-identifier":r.identifier,onClick:e._onItemClick.bind(e,r)},i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"$e:button m:withLabel"},i.ReactBEM.createElement("img",{bem:"e:icon",src:e._getAssetPath(r.iconPath,!0)}),i.ReactBEM.createElement("div",{bem:"e:label"},e._t(r.languageKey)))))};this.context.options.editor.controlsOrder.forEach(function(e){if(Array.isArray(e)){var i=[];e.forEach(function(e){t.controls.isEnabled(e)&&i.push(r(e))}),i.length&&n.push(i)}else{var o=e;if(!t.controls.isEnabled(o))return;n.push(r(o))}});var o=[];return n.forEach(function(e){o=o.concat(e),e!==n[n.length-1]&&o.push(i.ReactBEM.createElement("li",{bem:"e:separator"}))}),o}},{key:"renderControls",value:function(){var e=this._renderListItems();return i.ReactBEM.createElement("div",{bem:"e:cell m:list"},i.ReactBEM.createElement(a.default,null,i.ReactBEM.createElement("ul",{bem:"$e:list"},e)))}}]),t}();t.default=l,l.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=p(n(121)),a=p(n(123)),s=p(n(124)),l=p(n(125)),c=p(n(169)),u=p(n(170)),f=p(n(171));function p(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e,n,r){var i=arguments.length>3&&void 0!==arguments[3]&&arguments[3];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return o._ui=e,o._options=n,o._mediator=r,o._ready=!1,o._padding=[0,0,0,0],o._shallow=i,i||(o._initSDK(),o._onZoom=o._onZoom.bind(o),o._onUndo=o._onUndo.bind(o),o.history=new f.default(o,o._sdk,o._mediator),o.history.on("undo",o._onUndo),o.zoom=new u.default(o,o._sdk,o._mediator),o.zoom.on("set",o._onZoom),o._initSerializers()),o.operations=new s.default(o,o._sdk,o._mediator),o.controls=new l.default(o,o._sdk,o._mediator),o.features=new c.default(o,o._sdk,o._mediator),o._running=!1,o._renderRequested=!0,o._renderCallbacks=[],o._animationFrameRequest=null,o.render=o.render.bind(o),o._tick=o._tick.bind(o),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.EventEmitter),r(t,[{key:"setImage",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._options.editor.image,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=this._sdk.getRenderer(),o=new i.Vector2(t.naturalWidth,t.naturalHeight),s=1e6*this.getMaxMegapixels(),l=r.getMaxDimensions();n&&this.reset();var c=new a.default(t,s,l),u=null,f=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o;arguments.length>2&&void 0!==arguments[2]&&arguments[2];e._setImage(t,u,n),e._initWatermark(),e._ready=!0,e.emit("ready")};c.needsResize()?(this.emit("resize"),u=this._sdk.parseExif(t),c.resize().then(function(t){var n=t.canvas,r=t.dimensions,i=t.reason;n.src="data:image/jpeg;base64,",e.emit("resized",{dimensions:r,reason:i}),f(n,r,i)})):f(t)}},{key:"_initWatermark",value:function(){this._options.editor.watermarkImage&&(this._watermarkOperation=this.operations.getOrCreate("watermark",{image:this._options.editor.watermarkImage}))}},{key:"_initSDK",value:function(){var e=this._options,t=e.logLevel,n=e.displayWelcomeMessage,r=e.debug,o=e.license,a=e.crossOrigin,s=this._options.editor,l=s.smoothDownscaling,c=s.smoothUpscaling,u=s.preferredRenderer,f={logLevel:t,debug:r,displayWelcomeMessage:n,pixelRatio:s.pixelRatio,smoothDownscaling:l,smoothUpscaling:c,crossOrigin:a,transparent:!0,license:o};this._sdk=new i.SDK(u,f)}},{key:"_onZoom",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.fixOffset(),this.render(function(){t._mediator.emit(i.Constants.EVENTS.ZOOM_DONE),n&&n()})}},{key:"_onUndo",value:function(){this.render()}},{key:"getRotation",value:function(){return this._sdk.getRotation()}},{key:"setRotation",value:function(e){this._sdk.setRotation(e)}},{key:"getSpriteScale",value:function(){return this._sdk.getSpriteScale()}},{key:"setSpriteScale",value:function(e){this._sdk.setSpriteScale(e)}},{key:"getCrossOrigin",value:function(){return i.SDKUtils.getCrossOriginValue(this._options.crossOrigin||"anonymous")}},{key:"isToolAllowed",value:function(e){return!!this._shallow||this._sdk._l.isToolAllowed(e)}},{key:"isToolEnabled",value:function(e){return-1!==this._options.editor.tools.indexOf(e)}},{key:"getMaxMegapixels",value:function(){var e=this._options.editor.maxMegaPixels;return i.Utils.isMobile()?e.mobile:e.desktop}},{key:"getOutputDimensions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this._sdk.getOutputDimensions(e)}},{key:"getOutputTextureDimensions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this._sdk.getOutputTextureDimensions(e)}},{key:"getFinalDimensions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this._sdk.getFinalDimensions(e)}},{key:"getCanvasDimensions",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=this._sdk.getCanvas(),n=new i.Vector2(t.offsetWidth,t.offsetHeight);return e&&n.subtract(this._padding[1]+this._padding[3],this._padding[0]+this._padding[2]),n}},{key:"_setImage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._options.editor.image,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this._sdk.setAllOperationsToDirty(),this._options.editor.image=e,this._sdk.setImage(e,t,n),this.zoom.set("auto"),this.emit("new-image")}},{key:"export",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this._watermarkOperation&&this._watermarkOperation.setEnabled(!1),this._sdk.setAllOperationsToDirty();var n=this._options.editor.export;return new o.default(this._sdk,n,t).export().then(function(t){return e.emit("export",t),e._mediator.emit(i.Constants.EVENTS.EXPORT,t,e),e._watermarkOperation&&(e._watermarkOperation.setEnabled(!0),e._sdk.render()),e._sdk.setAllOperationsToDirty(),t})}},{key:"_initSerializers",value:function(){this._serializers={"1.0.0":n(172).default,"1.0.1":n(181).default,"2.0.0":n(182).default,"2.0.1":n(184).default,"3.0.0":n(187).default,"3.1.0":n(188).default}}},{key:"serialize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"3.1.0",n=this._serializers[t];return n?new n(this).serialize(e):i.Promise.reject(new Error("No serializer for version "+t+" found."))}},{key:"deserialize",value:function(e){var t=this,n=this._serializers[e.version];return n?new n(this).deserialize(e).then(function(){t.zoom.set("auto")}):i.Promise.reject(new Error("No serializer for version "+e.version+" found."))}},{key:"_applyOffset",value:function(){var e=this._offset.clone();e.x-=this._padding[1]/2,e.x+=this._padding[3]/2,e.y-=this._padding[2]/2,e.y+=this._padding[0]/2,this._sdk.setOffset(e)}},{key:"start",value:function(){this.zoom.set("auto"),this._animationFrameRequest=(0,i.requestAnimationFrame)(this._tick)}},{key:"stop",value:function(){this._running=!1,this._animationFrameRequest&&((0,i.cancelAnimationFrame)(this._animationFrameRequest),this._renderCallbacks=[])}},{key:"render",value:function(e){this._renderRequested=!0,e&&this._renderCallbacks.push(e)}},{key:"setOffset",value:function(e){this._offset=this._clampOffset(e)}},{key:"getOffset",value:function(){return this._offset}},{key:"fixOffset",value:function(){this.setOffset(this._sdk.getOffset())}},{key:"_clampOffset",value:function(e){var t=this._sdk.getRenderer(),n=new i.Vector2(t.getWidth(),t.getHeight()),r=this._sdk.getOutputDimensions(!1),o=n.clone().subtract(r).divide(2).clamp(null,new i.Vector2(0,0)),a=r.clone().subtract(n).divide(2).clamp(new i.Vector2(0,0),null);return e.clone().clamp(o,a).round()}},{key:"_tick",value:function(){var e=this;if(this._renderRequested){var t=this._renderCallbacks.slice(0);this._renderCallbacks=[],this._render().then(function(){t.forEach(function(e){return e()}),e._animationFrameRequest=(0,i.requestAnimationFrame)(e._tick)}).catch(function(e){i.Log.error("An error occurred while rendering: "+e.message)}),this._renderRequested=!1}else this._animationFrameRequest=(0,i.requestAnimationFrame)(this._tick)}},{key:"_render",value:function(){var e=this;return this._ready?(this._applyOffset(),this._sdk.render().then(function(){e._lastOutputBounds=e._sdk.getSprite().getBounds()}).catch(function(t){e.emit("render-error",t)})):i.Promise.resolve()}},{key:"reset",value:function(){this._sdk.reset(),this.history.reset(),this.operations.reset()}},{key:"dispose",value:function(){this.stop(),this._sdk.dispose()}},{key:"isReady",value:function(){return this._ready}},{key:"getRenderer",value:function(){return this._sdk.getRenderer()}},{key:"getSDK",value:function(){return this._sdk}},{key:"getInputDimensions",value:function(){return this._sdk.getInputDimensions(!1)}},{key:"getPadding",value:function(){return this._padding}},{key:"setPadding",value:function(e){this._padding=e||[0,0,0,0]}},{key:"getImage",value:function(){return this._options.editor.image}},{key:"getOptions",value:function(){return this._options}},{key:"getUI",value:function(){return this._ui}},{key:"getMediator",value:function(){return this._mediator}},{key:"broadcastTransform",value:function(e,t){var n=this,r=new i.SDK.Operations.TransformOperation.TransformChange(e,t);["sprite","selective-blur","radial-focus","mirrored-focus","linear-focus","blur"].forEach(function(e){var t=n.operations.get(e);t&&t.transform(r)})}},{key:"broadcastFlip",value:function(e){var t=this;["mirrored-focus","radial-focus","sprite","selective-blur"].forEach(function(n){var r=t.operations.get(n);r&&r.flip(e)})}},{key:"broadcastRotate",value:function(e){var t=this;["transform","mirrored-focus","radial-focus","sprite","selective-blur"].forEach(function(n){var r=t.operations.get(n);r&&r.rotate(e)})}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(126);Object.defineProperty(t,"adjustments",{enumerable:!0,get:function(){return p(r).default}});var i=n(129);Object.defineProperty(t,"transform",{enumerable:!0,get:function(){return p(i).default}});var o=n(133);Object.defineProperty(t,"filter",{enumerable:!0,get:function(){return p(o).default}});var a=n(136);Object.defineProperty(t,"focus",{enumerable:!0,get:function(){return p(a).default}});var s=n(141);Object.defineProperty(t,"sticker",{enumerable:!0,get:function(){return p(s).default}});var l=n(149);Object.defineProperty(t,"text",{enumerable:!0,get:function(){return p(l).default}});var c=n(159);Object.defineProperty(t,"brush",{enumerable:!0,get:function(){return p(c).default}});var u=n(163);Object.defineProperty(t,"selectiveBlur",{enumerable:!0,get:function(){return p(u).default}});var f=n(166);function p(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"frame",{enumerable:!0,get:function(){return p(f).default}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(135),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._bindAll("_onButtonClick"),e.state={overlayVisible:!1},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"_onButtonClick",value:function(e){e.preventDefault(),e.stopPropagation(),this.setState({overlayVisible:!this.state.overlayVisible})}},{key:"renderWithBEM",value:function(){var e=null;this.state.overlayVisible&&(e=o.ReactBEM.createElement(s.default,{items:this.props.items,selectedItem:this.props.selectedItem,onChange:this.props.onChange}));var t=this.state.overlayVisible?"is-active":null;return o.ReactBEM.createElement("bem",{specifier:"$b:controls"},o.ReactBEM.createElement("div",{bem:"$e:categoryDropdown",className:t,onClick:this._onButtonClick},o.ReactBEM.createElement("img",{bem:"e:icon",src:this.props.selectedItem.icon}),o.ReactBEM.createElement("div",{bem:"e:label"},this.props.selectedItem.label),e))}}]),t}();t.default=l,l.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._renderCanvas()}},{key:"componentDidUpdate",value:function(){this._renderCanvas()}},{key:"_renderCanvas",value:function(){var e=this.refs.canvas,t=this.context.editor.getSDK().getPixelRatio();e.width=e.offsetWidth*t,e.height=e.offsetHeight*t,e.style.width=e.offsetWidth+"px",e.style.height=e.offsetHeight+"px";var n=e.getContext("2d");n.fillStyle="red",n.clearRect(0,0,e.width,e.height),n.font=(this.props.fontStyle||"")+" "+(this.props.fontWeight||"")+" "+24*t+"px "+this.props.fontFamily,n.textBaseline="middle",n.textAlign="center",n.fillStyle="white",n.fillText("Abc",e.width/2,e.height/2)}},{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("canvas",{bem:"b:fontFamily e:canvas",ref:"canvas"})}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(7);var o={100:"Extra Light",200:"Light",300:"Book",400:"Regular",500:"Medium",600:"Semibold",700:"Bold",800:"Black",900:"Extra Black",bold:"Bold",normal:"Regular"},a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Configurable),r(t,[{key:"getLabel",value:function(){var e=o[this._options.fontWeight];switch(this._options.fontStyle){case"italic":e+=" Italic"}return e}}]),t}();t.default=a,a.prototype.availableOptions={identifier:{type:i.OptionType.STRING,required:!0},fontFamily:{type:i.OptionType.STRING,required:!0},fontWeight:{type:i.OptionType.ALL,default:400},fontStyle:{type:i.OptionType.STRING,default:"normal"},textMetrics:{type:i.OptionType.OBJECT,default:null},provider:{type:i.OptionType.STRING,available:["google","file"]},filePath:{type:i.OptionType.STRING},default:{type:i.OptionType.BOOLEAN,default:!1},font:{type:i.OptionType.OBJECT}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._categoriesById={},this._categories=[],this._framesById={},this._addCategories(i.SharedConstants.DEFAULTS.FRAME_CATEGORIES);var r=this._options,o=r.categories,a=r.replaceCategories;this._options.categories?this._addCategories(o,a):this._updateAllCategory()}return r(e,[{key:"_addCategories",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._categories=n?e.slice(0):i.Utils.mergeCategories(this._categories,e,"frames"),this._categoriesById={},this._categories.forEach(function(e){t._categoriesById[e.identifier]=e});var r=this._options.availableFrames;r&&this._categories.forEach(function(e){e.frames=e.frames.filter(function(e){return-1!==r.indexOf(e.identifier)})}),this._categories.forEach(function(e){e.frames.forEach(function(e){t._framesById[e.identifier]=e})}),this._updateAllCategory()}},{key:"_updateAllCategory",value:function(){this._allCategory={identifier:"all",defaultName:"All",frames:this._categories.map(function(e){return e.frames}).reduce(function(e,t){return e.concat(t)},[])},this._categoriesById.all=this._allCategory}},{key:"getFramesForCategory",value:function(e){if(!this._categoriesById[e])throw new Error("Unknown frame category '"+e+"'");return this._categoriesById[e].frames}},{key:"getFrameByIdentifier",value:function(e){return this._framesById[e]}},{key:"getCategories",value:function(){return this._categories}},{key:"getCategory",value:function(e){return this._categoriesById[e]}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=i.SDK.OptionType,a=function(e){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n));return r._loaded=!1,r._loading=!1,r._ui=e,r._frame=i.SDK.Utils.deepClone(r._options),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.SDK.Configurable),r(t,[{key:"load",value:function(){var e=this;if(this._loaded)return Promise.resolve();if(this._loading)return Promise.reject(new Error("Called Frame#load while it's already loading"));this._loading=!0;var t=this._frame.imageGroups,n=[];return["top","left","right","bottom"].forEach(function(r){if(r in t){var i=t[r];["start","mid","end"].forEach(function(t){t in i&&n.push(e._loadPart(r,t))})}}),Promise.all(n).then(function(){e._loaded=!0,e._loading=!1}).catch(function(t){e._loaded=!1,e._loading=!1})}},{key:"_loadPart",value:function(e,t){var n=this;return new Promise(function(r,i){var o=n._frame.imageGroups[e][t],a=o;"string"!=typeof o&&"image"in o&&(a=o.image);var s=new window.Image;s.addEventListener("load",function(){"string"!=typeof o?n._frame.imageGroups[e][t].image=s:n._frame.imageGroups[e][t]=s,r(s)}),s.addEventListener("error",function(){i(new Error("Failed to load image at "+a))}),s.crossOrigin=n._ui.getEditor().getCrossOrigin(),s.src=n._ui.getAssetPath(a)})}},{key:"getFrame",value:function(){return this._frame}}]),t}();t.default=a,a.prototype.availableOptions={identifier:{type:o.STRING,required:!0},defaultName:{type:o.STRING},thumbnail:{type:o.STRING},tintable:{type:o.BOOLEAN,default:!1},layoutMode:{type:o.STRING,default:"horizontal-inside",available:["horizontal-inside","vertical-inside"]},imageGroups:{type:o.OBJECT,required:!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=2*Math.PI,a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t,this._serializeOperations=this._serializeOperations.bind(this)}return r(e,[{key:"serialize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this._options=i.SDKUtils.defaults(e,{image:!0});var t={version:this.constructor.version};return this._serializeInputImage(t).then(this._serializeOperations)}},{key:"_serializeInputImage",value:function(e){var t=this._editor.getImage(),n=t.width,r=t.height;if(!this._options.image)return e.inputImage={width:n,height:r},Promise.resolve(e);var o=i.SDKUtils.createCanvas();o.width=t.width,o.height=t.height,o.getContext("2d").drawImage(t,0,0);var a=o.toDataURL(i.ImageFormat.PNG);return e.inputImage={type:i.ImageFormat.PNG,data:a.replace(/^data:image\/(.*?);base64,/,""),width:n,height:r},Promise.resolve(e)}},{key:"_serializeOperations",value:function(e){var t=this,n=[];return this._editor.operations.getStack().forEach(function(e){var r=t._serializeOperation(e,n);r&&n.push(r)}),e.operations=n.filter(function(e){return e}),Promise.resolve(e)}},{key:"_serializeOperation",value:function(e,t){switch(e.constructor.identifier){case"transform":return this._serializeTransformOperation(e);case"orientation":return this._serializeOrientationOperation(e);case"filter":return this._serializeFilterOperation(e);case"adjustments":return this._serializeAdjustmentsOperation(e);case"sprite":return this._serializeSpriteOperation(e,t);case"radial-focus":return this._serializeRadialFocusOperation(e);case"mirrored-focus":return this._serializeLinearFocusOperation(e);default:i.Log.warn("Unable to serialize operation of type "+e.constructor.identifier)}}},{key:"_serializeTransformOperation",value:function(e){var t=e.serializeOptions(["start","end","rotation"],!0);return t.rotation=(t.rotation+o)%o,{type:"crop",options:t}}},{key:"_serializeOrientationOperation",value:function(e){return{type:"orientation",options:e.serializeOptions(["flipVertically","flipHorizontally","rotation"],!0)}}},{key:"_serializeFilterOperation",value:function(e){return"identity"===e.getIdentifier()?null:{type:"filter",options:{intensity:e.getIntensity(),name:e.getIdentifier()}}}},{key:"_serializeAdjustmentsOperation",value:function(e){var t=e.availableOptions,n={};return["brightness","saturation","contrast","exposure","shadows","highlights","clarity"].forEach(function(r){var i=t[r],o=e.getOption(r),a=i.minValue,s=i.midValue,l=i.maxValue;n[r]=o<=s?(o-a)/(s-a)-1:(o-s)/(l-s)}),{type:"adjustments",options:n}}},{key:"_serializeSpriteOperation",value:function(e,t){var n=this,r=t.filter(function(e){return"sprite"===e.type}),i=void 0,o=!0;if(r.length?(i=r.pop(),o=!1):i={type:"sprite",options:{sprites:[]}},e.getSprites().forEach(function(t){var r=null;t instanceof e.constructor.StickerSprite?r=n._serializeSticker(e,t):t instanceof e.constructor.TextSprite?r=n._serializeText(e,t):t instanceof e.constructor.BrushSprite?r=n._serializeBrush(e,t):t instanceof e.constructor.TextDesignSprite&&(r=n._serializeTextDesign&&n._serializeTextDesign(e,t)),r&&i.options.sprites.push(r)}),o)return i}},{key:"_serializeSticker",value:function(e,t){var n=t.getAdjustments(),r=t.serializeOptions(["identifier","position","dimensions","flipVertically","flipHorizontally","rotation"],!0);r.name=r.identifier,delete r.identifier,r.rotation=(r.rotation+o)%o;var i=n.availableOptions;return r.adjustments={brightness:n.getBrightness()-i.brightness.default,saturation:n.getSaturation()-i.saturation.default,contrast:n.getContrast()-i.contrast.default},{type:"sticker",options:r}}},{key:"_serializeText",value:function(e,t){var n=t.serializeOptions(["fontSize","lineHeight","fontFamily","fontWeight","alignment","color","backgroundColor","position","rotation","text","maxWidth"],!0);return n.rotation=(n.rotation+o)%o,{type:"text",options:n}}},{key:"_serializeBrush",value:function(e,t){var n=this;return{type:"brush",options:{paths:t.getPaths().map(function(e){return n._serializePath(e)})}}}},{key:"_serializePath",value:function(e){var t=e.getBrush().serializeOptions(["color","size"],!0);return t.points=e.getControlPoints().map(function(e){return e.getPosition().toObject()}),t}},{key:"_serializeRadialFocusOperation",value:function(e){return{type:"focus",options:{type:"radial",options:e.serializeOptions(["position","radius","gradientRadius","blurRadius"],!0)}}}},{key:"_serializeLinearFocusOperation",value:function(e){return{type:"focus",options:{type:"linear",options:e.serializeOptions(["start","end","blurRadius","size","gradientSize"],!0)}}}},{key:"_getInputDimensionsForOperation",value:function(e){var t=!1,n=this._editor.getInputDimensions();return this._editor.operations.getStack().forEach(function(r){r===e&&(t=!0),t||(n=r.getNewDimensions(n))}),n}}]),e}();t.default=a,a.version="1.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=f(n(173)),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=f(n(27)),s=f(n(11)),l=f(n(176)),c=f(n(15)),u=f(n(30));function f(e){return e&&e.__esModule?e:{default:e}}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var d=void 0;void 0!==o.SDK.Operations.SpriteOperation&&(d=o.SDK.Operations.SpriteOperation.BrushSprite);var h=function(){function e(t,n){p(this,e),this._editor=t,this._ui=this._editor.getUI(),this._data=n,this._filterManager=new a.default(this._ui,this._getOptions("filter")),this._stickerManager=new s.default(this._ui,this._getOptions("sticker")),this._brushManager=new l.default(this._ui,this._getOptions("brush")),this._fontManager=new c.default(this._ui,this._getOptions("text"))}return i(e,[{key:"_getOptions",value:function(e){var t=this._editor.controls,n={};t&&t.get(e)&&(n=t.get(e).defaultOptions);var r=this._editor.getOptions();return o.SDKUtils.deepDefaults({},r.editor.controlsOptions[e]||{},n)}},{key:"deserialize",value:function(){var e=this;return this._validateVersion().then(function(){return e._deserializeInputImage()}).then(function(){return e._deserializeOperations()})}},{key:"_validateVersion",value:function(){return this._data.version!==this.constructor.version?Promise.reject(new Error("Invalid version "+this._data.version+", expected "+this.constructor.version)):Promise.resolve()}},{key:"_deserializeInputImage",value:function(){var e=this;return new Promise(function(t,n){var r=e._data.inputImage,i=r.data,o=r.type;if(i&&o){var a=new window.Image;a.addEventListener("load",function(){e._editor.setImage(a),t()}),a.src="data:"+o+";base64,"+i}else t()})}},{key:"_deserializeOperations",value:function(){var e,t=(e=r.default.mark(function e(){var t,n,i,o,a;return r.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:t=this._data.operations,n=[],i=0;case 3:if(!(i<t.length)){e.next=12;break}return o=t[i],e.next=7,this._deserializeOperation(o);case 7:a=e.sent,n.push(a);case 9:i++,e.next=3;break;case 12:return e.abrupt("return",n);case 13:case"end":return e.stop()}},e,this)}),function(){var t=e.apply(this,arguments);return new Promise(function(e,n){return function r(i,o){try{var a=t[i](o),s=a.value}catch(e){return void n(e)}if(!a.done)return Promise.resolve(s).then(function(e){r("next",e)},function(e){r("throw",e)});e(s)}("next")})});return function(){return t.apply(this,arguments)}}()},{key:"_deserializeOperation",value:function(e){switch(e.type){case"crop":return this._deserializeCropOperation(e);case"orientation":return this._deserializeOrientationOperation(e);case"filter":return this._deserializeFilterOperation(e);case"adjustments":return this._deserializeAdjustmentsOperation(e);case"sprite":return this._deserializeSpriteOperation(e);case"focus":return this._deserializeFocusOperation(e)}}},{key:"_deserializeCropOperation",value:function(e){var t=e.options,n=t.rotation,r=o.Vector2.fromObject(t.start),i=o.Vector2.fromObject(t.end);n>Math.PI&&(n-=2*Math.PI);var a={start:r,end:i};void 0!==n&&(a.rotation=n);var s=this._editor.operations.getOrCreate("transform");return this._editor.broadcastTransform(s,a),s.set(a),Promise.resolve(s)}},{key:"_deserializeOrientationOperation",value:function(e){var t=e.options,n=this._editor.operations.getOrCreate("orientation");return n?(n.set(t),Promise.resolve(n)):Promise.resolve()}},{key:"_deserializeFilterOperation",value:function(e){var t=this,n=e.options;return this._filterManager.getFilterByIdentifier(n.name)?this._filterManager.instantiateFilterWithIdentifier(n.name).then(function(e){var r=t._editor.operations.getOrCreate("filter");return r.set({identifier:n.name,filter:e,intensity:n.intensity}),r}):(o.Log.warn("Deserializer","Unknown filter `"+n.name+"`"),Promise.resolve())}},{key:"_deserializeAdjustmentsOperation",value:function(e){var t=o.SDK.Operations.AdjustmentsOperation,n=e.options,r={};return["brightness","saturation","contrast","exposure","shadows","highlights","clarity"].forEach(function(e){if(void 0!==n[e]){var i=t.prototype.availableOptions[e],o=i.minValue,a=i.midValue,s=i.maxValue,l=n[e];l=l<0?a+(a-o)*l:a+(s-a)*l,r[e]=l}}),Promise.resolve(this._editor.operations.getOrCreate("adjustments",r))}},{key:"_deserializeSpriteOperation",value:function(e){var t=this,n=e.options,r=this._editor.operations.getOrCreate("sprite");if(!r)return Promise.resolve();var i=n.sprites.map(function(e){return t._deserializeSprite(r,e)}).filter(function(e){return e});return Promise.all(i).then(function(e){return r.setSprites(e.filter(function(e){return e})),r})}},{key:"_deserializeSprite",value:function(e,t){switch(t.type){case"sticker":return this._deserializeSticker(e,t);case"text":return this._deserializeText(e,t);case"brush":return this._deserializeBrush(e,t);case"textdesign":return this._deserializeTextDesign&&this._deserializeTextDesign(e,t)}}},{key:"_deserializeSticker",value:function(e,t){var n=this,r=o.SDK.Operations.SpriteOperation,i=t.options,a=this._stickerManager.getStickerByIdentifier(i.name),s=this._stickerManager.getURLForSticker(a);return a?new Promise(function(t,a){var l=new window.Image;l.addEventListener("load",function(){var n=r.StickerSprite.prototype.availableOptions.adjustments.structure,a=i.rotation,s=i.flipHorizontally,c=i.flipVertically,u={identifier:i.name,image:l,position:o.Vector2.fromObject(i.position),dimensions:o.Vector2.fromObject(i.dimensions),rotation:a,flipHorizontally:s,flipVertically:c,adjustments:{}};void 0!==i.adjustments&&["brightness","contrast","saturation"].forEach(function(e){void 0!==i.adjustments[e]&&(u.adjustments[e]=i.adjustments[e]+n[e].default)}),t(e.createSticker(u))}),l.crossOrigin=n._editor.getCrossOrigin(),l.src=n._editor.getUI().getAssetPath(s)}):(o.Log.warn("Deserializer","Unknown sticker '"+i.name+"'. Skipping sprite."),Promise.resolve())}},{key:"_deserializeText",value:function(e,t){var n=t.options,r=n.fontSize,i=n.lineHeight,a=n.fontFamily,s=n.fontWeight,l=n.alignment,c=n.rotation,f=n.maxWidth,p=n.color,d=n.backgroundColor,h=new u.default(this._ui),_=this._fontManager.getFontByFontFamily(a);return _||(_=this._fontManager.getDefaultFont()),h.setFonts([_]),h.load().then(function(){return e.createText({fontSize:r,lineHeight:i,fontFamily:a,fontWeight:s,alignment:l,rotation:c,maxWidth:f,text:n.text,color:o.Color.fromArray(p),backgroundColor:o.Color.fromArray(d),position:o.Vector2.fromObject(n.position)})})}},{key:"_deserializeBrush",value:function(e,t){var n=this,r=t.options.paths,i=e.createBrush();return r.forEach(function(e){n._deserializeBrushPath(i,e)}),Promise.resolve(i)}},{key:"_deserializeBrushPath",value:function(e,t){var n=t.points,r=this._createBrushForPath(t),i=e.createPath(r);i.setClosed(!0),n.forEach(function(e){i.addControlPoint(o.Vector2.fromObject(e))})}},{key:"_createBrushForPath",value:function(e){var t=e.color,n=e.size,r={color:o.Color.fromArray(t),size:n},i=this._brushManager.getFirstBrush();if(i.prototype&&i.prototype instanceof d)return new i(r);var a=o.SDKUtils.extend({},i);delete a.image;var s=function(e){function t(){return p(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,d),t}();return s.identifier=i.identifier,new s(o.SDKUtils.extend({},a,r))}},{key:"_deserializeFocusOperation",value:function(e){var t=e.options.options;switch(e.options.type){case"radial":var n=t.position,r=t.radius,i=t.gradientRadius,a=t.blurRadius;return Promise.resolve(this._editor.operations.getOrCreate("radial-focus",{position:o.Vector2.fromObject(n),radius:r,gradientRadius:i,blurRadius:a}));case"linear":var s=t.start,l=t.end,c=t.size,u=t.gradientSize,f=t.blurRadius;return Promise.resolve(this._editor.operations.getOrCreate("mirrored-focus",{start:o.Vector2.fromObject(s),end:o.Vector2.fromObject(l),size:c,gradientSize:u,blurRadius:f}))}}},{key:"_getInputDimensionsForOperation",value:function(e){var t=!1,n=this._editor.getInputDimensions();return this._editor.operations.getStack().forEach(function(r){r===e&&(t=!0),t||(n=r.getNewDimensions(n))}),n}}]),e}();t.default=h,h.version="1.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(178),a=(r=o)&&r.__esModule?r:{default:r};var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._fonts=[],this._observers=[]}return i(e,[{key:"add",value:function(e){this._fonts.push(e)}},{key:"load",value:function(){var e=this;return 0===this._fonts.length?Promise.resolve():(this._observers=[],this._fonts.forEach(function(t){e._observers.push(new a.default(t))}),Promise.all(this._observers.map(function(e){return e.observe()})))}},{key:"dispose",value:function(){this._observers.forEach(function(e){return e.dispose()})}}]),e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(50),a=(r=o)&&r.__esModule?r:{default:r};var s=2*Math.PI,l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),i(t,[{key:"_serializeTransformOperation",value:function(e){var t=e.serializeOptions(["start","end","rotation","textureScale"],!0);return t.rotation=(t.rotation+s)%s,1!==t.textureScale&&(t.dimensions=e.getNewDimensions(e.getInputDimensions(!1))),delete t.textureScale,{type:"crop",options:t}}}]),t}();t.default=l,l.version="1.0.1"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(51),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default),i(t,[{key:"_deserializeOperation",value:function(e){return"selective-blur"===e.type?this._deserializeSelectiveBlurOperation(e):function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_deserializeOperation",this).call(this,e)}},{key:"_deserializeCropOperation",value:function(e){var t=e.options,n=t.rotation,r=o.Vector2.fromObject(t.start),i=o.Vector2.fromObject(t.end),a=t.dimensions?o.Vector2.fromObject(t.dimensions):null;n>Math.PI&&(n-=2*Math.PI);var s={start:r,end:i};void 0!==n&&(s.rotation=n);var l=this._editor.operations.getOrCreate("transform");if(!l)return Promise.resolve();if(this._editor.broadcastTransform(l,s),l.set(s),a){var c=i.clone().subtract(r),u=l.getInputDimensions(!1).multiply(c);l.setTextureScale(a.x/u.x)}return Promise.resolve(l)}}]),t}();t.default=l,l.version="1.0.1"},function(e,t,n){"use strict";var r;function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0).SDK.Engine.Filters.OverlayFilter;t.default=(i(r={},o.BLEND_MODES.NORMAL,"normal"),i(r,o.BLEND_MODES.OVERLAY,"overlay"),i(r,o.BLEND_MODES.HARD_LIGHT,"hard light"),i(r,o.BLEND_MODES.SOFT_LIGHT,"soft light"),i(r,o.BLEND_MODES.MULTIPLY,"multiply"),i(r,o.BLEND_MODES.DARKEN,"darken"),i(r,o.BLEND_MODES.LIGHTEN,"lighten"),i(r,o.BLEND_MODES.SCREEN,"screen"),i(r,o.BLEND_MODES.COLOR_BURN,"color burn"),r)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},s=n(0),l=n(31),c=(r=l)&&r.__esModule?r:{default:r};var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,c.default),o(t,[{key:"serialize",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return a(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"serialize",this).call(this,n).then(function(t){return t.meta={platform:"html5",version:e._editor.getSDK().version,createdAt:s.SDKUtils.ISODateString(new Date)},t.image=t.inputImage,delete t.inputImage,t})}},{key:"_serializeSticker",value:function(e,n){var r=a(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeSticker",this).call(this,e,n);return r.options.alpha=n.getAlpha(),r.options.tintColor&&(r.options.tintColor={rgba:r.options.tintColor}),r}},{key:"_serializeText",value:function(e,n){var r=a(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeText",this).call(this,e,n);return r.options.color={rgba:r.options.color},r.options.backgroundColor={rgba:r.options.backgroundColor},r.options.flipHorizontally=!1,r.options.flipVertically=!1,delete r.options.fontWeight,r}},{key:"_serializePath",value:function(e){var n=a(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializePath",this).call(this,e);delete n.hardness,delete n.size,delete n.color;var r=e.getBrush();n.brush=r.serializeOptions(["identifier","size","color"],!0),void 0===n.brush.identifier&&delete n.brush.identifier,n.brush.color={rgba:n.brush.color};var i=r.getOption("hardness");return"undefined"!==i&&(n.brush.hardness=i),n}},{key:"_serializeFrameOperation",value:function(e,n){a(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeFrameOperation",this).call(this,e,n);var r=n.filter(function(e){return"sprite"===e.type});if(r.length){var i=r.pop().options.sprites.filter(function(e){return"frame"===e.type})[0];e.getTintColor().equals(new s.Color(1,1,1,0))||(i.options.tintColor={rgba:e.serializeOption("tintColor",!0)});var o=e.serializeOptions(["scale","alpha"],!0);i.options=s.SDKUtils.extend(i.options,o),i.options.size=i.options.scale,delete i.options.scale}}},{key:"_serializeTransformOperation",value:function(e){var n=a(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeTransformOperation",this).call(this,e);return e._ratio&&(n.options.meta={identifier:e._ratio.identifier}),delete n.options.scale,n}},{key:"_serializeAdjustmentsOperation",value:function(e){var n=a(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeAdjustmentsOperation",this).call(this,e),r=e.availableOptions,o={};return["gamma","whites","blacks","temperature"].forEach(function(t){var n=r[t],i=e.getOption(t),a=n.minValue,s=n.midValue,l=n.maxValue;o[t]=i<=s?(i-a)/(s-a)-1:(i-s)/(l-s)}),n.options=i({},n.options,o),n}},{key:"_serializeOperation",value:function(e,n){switch(e.constructor.identifier){case"mirrored-focus":return this._serializeMirroredFocusOperation(e);case"linear-focus":return this._serializeLinearFocusOperation(e);case"blur":return this._serializeBlurOperation(e);default:return a(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_serializeOperation",this).call(this,e,n)}}},{key:"_serializeMirroredFocusOperation",value:function(e){return{type:"focus",options:{type:"mirrored",options:e.serializeOptions(["start","end","blurRadius","size","gradientSize"],!0)}}}},{key:"_serializeLinearFocusOperation",value:function(e){var t=e.serializeOptions(["controlPoint1","controlPoint2","blurRadius"],!0);return t.start=t.controlPoint1,delete t.controlPoint1,t.end=t.controlPoint2,delete t.controlPoint2,{type:"focus",options:{type:"linear",options:t}}}},{key:"_serializeBlurOperation",value:function(e){return{type:"focus",options:{type:"gaussian",options:e.serializeOptions(["blurRadius"],!0)}}}}]),t}();t.default=u,u.version="3.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},a=n(0),s=p(n(32)),l=p(n(11)),c=p(n(58)),u=p(n(23)),f=p(n(15));function p(e){return e&&e.__esModule?e:{default:e}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var m=void 0;void 0!==a.SDK.Operations.SpriteOperation&&(m=a.SDK.Operations.SpriteOperation.BrushSprite.Brush);var y=function(e){function t(){return d(this,t),h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return _(t,s.default),i(t,[{key:"_deserializeSticker",value:function(e,t){var n=a.SDK.Operations.SpriteOperation,r=t.options,i=this._stickerManager.getStickerByIdentifier(r.identifier);if(!i)return a.Log.warn("Deserializer","Unknown sticker `"+r.identifier+"`. Skipping sprite."),Promise.resolve();var o=l.default.getURLForSticker(i,"base"),s=this._editor.getUI().getAssetPath(o),c=e.getInputDimensions(!1);return u.default.load(s).then(function(t){var o=n.StickerSprite.prototype.availableOptions.adjustments.structure,s=r.rotation,l=r.flipHorizontally,u=r.flipVertically,f={identifier:r.identifier,image:t,position:a.Vector2.fromObject(r.position),dimensions:a.Vector2.fromObject(r.dimensions).multiply(c.min()),rotation:s||0,flipHorizontally:l,flipVertically:u,adjustments:{}};return void 0!==r.adjustments&&["brightness","contrast","saturation"].forEach(function(e){void 0!==r.adjustments[e]&&(f.adjustments[e]=r.adjustments[e]+o[e].default)}),void 0!==r.tintColor&&void 0!==i.tintMode&&(f.tintColor=a.Color.fromArray(r.tintColor.rgba),f.tintMode=i.tintMode),void 0!==r.alpha&&(f.alpha=r.alpha),e.createSticker(f)})}},{key:"_deserializeTransformOperation",value:function(e){return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_deserializeTransformOperation",this).call(this,e).then(function(e){if(e)return e._ratio=null,e})}},{key:"_deserializeInputImage",value:function(){var e=this,t=this._data.image,n=t.data,r=t.type,i=t.uri;return n&&r&&(i="data:"+r+";base64,"+n),i?u.default.load(i).then(function(t){e._editor.setImage(t)}):Promise.resolve()}},{key:"_deserializeAdjustmentsOperation",value:function(e){var n=a.SDK.Operations.AdjustmentsOperation;return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_deserializeAdjustmentsOperation",this).call(this,e).then(function(t){if(!t)return null;var r=e.options,i={};return["gamma","whites","blacks","temperature"].forEach(function(e){if(void 0!==r[e]){var t=n.prototype.availableOptions[e],o=t.minValue,a=t.midValue,s=t.maxValue,l=r[e];l=l<0?a+(a-o)*l:a+(s-a)*l,i[e]=l}}),t.set(i),t})}},{key:"_deserializeFocusOperation",value:function(e){var n=e.options.options;switch(e.options.type){case"radial":return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_deserializeFocusOperation",this).call(this,e);case"linear":var r=n.start,i=n.end,s=n.blurRadius;return Promise.resolve(this._editor.operations.getOrCreate("linear-focus",{controlPoint1:a.Vector2.fromObject(r),controlPoint2:a.Vector2.fromObject(i),blurRadius:s}));case"mirrored":var l=n.start,c=n.end,u=n.size,f=n.gradientSize,p=n.blurRadius;return Promise.resolve(this._editor.operations.getOrCreate("mirrored-focus",{start:a.Vector2.fromObject(l),end:a.Vector2.fromObject(c),size:u,gradientSize:f,blurRadius:p}));case"gaussian":var d=n.blurRadius;return Promise.resolve(this._editor.operations.getOrCreate("blur",{blurRadius:d}))}}},{key:"_deserializeText",value:function(e,t){var n=t.options,r=n.fontSize,i=n.lineHeight,o=n.fontIdentifier,s=n.alignment,l=n.rotation,c=n.maxWidth,u=n.color,f=n.backgroundColor,p=this._ui.getFontLoader(),d=this._fontManager.getVariationByIdentifier(o);return d?p.setFonts([d.getFont()]):d=this._fontManager.getDefaultVariation(),p.load().then(function(){var t=e.getInputDimensions(!1),o=c*t.min()/t.x;return e.createText({fontSize:r,lineHeight:i,fontFamily:d.getFontFamily(),fontWeight:d.getFontWeight(),fontIdentifier:d.getIdentifier(),textMetrics:d.getTextMetrics(),alignment:s,rotation:l,maxWidth:o,text:n.text,color:a.Color.fromArray(u.rgba),backgroundColor:a.Color.fromArray(f.rgba),position:a.Vector2.fromObject(n.position)})})}},{key:"_createBrushForPath",value:function(e){var t=e.brush,n=t.identifier,r=t.color,i=t.size,o=t.hardness,s={color:a.Color.fromArray(r.rgba),size:i};void 0!==o&&(s.hardness=o);var l=this._brushManager.getBrushByIdentifier(n);if(l||(l=this._brushManager.getFirstBrush()),l.prototype&&l.prototype instanceof m)return new l(s);var c=a.SDKUtils.extend({},l);delete c.image;var u=function(e){function t(){return d(this,t),h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return _(t,m),t}();return u.identifier=l.identifier,new u(a.SDKUtils.extend({},c,s))}},{key:"_deserializeFrame",value:function(e,n){var r=this;return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_deserializeFrame",this).call(this,e,n).then(function(){var e=r._editor.operations.get("frame"),t=n.options,i=t.size,o=t.alpha,s=t.tintColor,l={};void 0!==i&&(l.scale=i),void 0!==o&&(l.alpha=o),void 0!==s&&(l.tintColor=a.Color.fromArray(s.rgba)),e.set(l)})}},{key:"_deserializeTextDesign",value:function(e,t){var n=this,i=t.options,o=i.position,s=i.rotation,l=i.flipHorizontally,u=i.flipVertically,p=i.text,d=i.color,h=i.width,_=i.seed,m=i.inverted,y=i.identifier,g=new c.default(this._ui,this._getOptions("textdesign")),v=new f.default(this._ui,{fonts:a.Constants.DEFAULTS.TEXT_DESIGN_FONTS,replaceFonts:!0}),b=e.constructor.TextDesignSprite.AssetManager,k=this._ui.getFontLoader(),w=new(g.getLayoutByIdentifier(y));return k.setFonts(v.getFonts()),b.setFonts(r({},b.getFonts(),v.getVariationsByIdentifier())),k.load().then(function(){var t=w.getImagePaths().map(function(e){return{path:e,fullPath:n._ui.getAssetPath(e),image:null}});return b.loadImages(t).then(function(){return w.onImagesLoaded(),e.createTextDesign({position:o,rotation:s,flipHorizontally:l,flipVertically:u,text:p,color:a.Color.fromArray(d.rgba),width:h,seed:_,inverted:m,layout:w})})})}}]),t}();t.default=y,y.version="3.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._defaultLayouts=i.SDK.Operations.SpriteOperation.TextDesignSprite.Layouts,this._layouts=[],this._init()}return r(e,[{key:"_init",value:function(){var e=this,t=this._options.availableLayouts;this._layouts=Object.keys(this._defaultLayouts).map(function(t){return{identifier:e._defaultLayouts[t].identifier,layout:e._defaultLayouts[t]}}),t&&(this._layouts=this._layouts.filter(function(e){return t.indexOf(e.identifier)>=0}))}},{key:"getLayoutByIdentifier",value:function(e){var t=i.SDKUtils.Array.find(this._layouts,function(t){return t.identifier===e});return t&&t.layout}},{key:"getLayouts",value:function(){return[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this._layouts))}}]),e}();t.default=o},function(e,t,n){"use strict";
/*!
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */n(60),e.exports=n(61).default},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=g(n(87)),a=g(n(2)),s=g(n(3)),l=g(n(1)),c=g(n(22)),u=g(n(196)),f=y(n(197)),p=g(n(4)),d=y(n(44)),h=g(n(13)),_=g(n(6)),m=g(n(30));function y(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function g(e){return e&&e.__esModule?e:{default:e}}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function k(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 * @license
 */var w=function(e){return i.SDKUtils.byteArrayToString(i.Base64.decode(e))},O=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};v(this,t);var n=b(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n._mediator=new i.EventEmitter,n._fontLoader=new m.default(n),n._options=e,n._initOptions(),n._initLanguage(),n._initEvents(),n._disposed=!1,n._isReady=!1,n._mediator.once(i.Constants.EVENTS.EDITOR_READY,function(){n._isReady=!0}),n._globalState=new i.SharedState,n._preloader=new u.default(n,n._options,n._mediator),i.Log.setLevel(n._options.logLevel),n._options.license&&!n._v()||n.run(),n}return k(t,i.EventEmitter),r(t,[{key:"run",value:function(){this._registerWebFonts(),this._options.container.style.position="relative",this._render()}},{key:"_render",value:function(){var e=this,t=i.React.createElement(o.default,{ui:this,mediator:this._mediator,ref:function(t){e._component=t},globalState:this._globalState,options:this._options});if(this._options.renderReturnsComponent)return t;i.ReactDOM.render(t,this._options.container)}},{key:"export",value:function(){var e;return(e=this._component).export.apply(e,arguments)}},{key:"serialize",value:function(){var e;return(e=this._component).serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return this._component.deserialize(e)}},{key:"getEditor",value:function(){return this._component.getEditor()}},{key:"isReady",value:function(){return this._isReady}},{key:"onReady",value:function(e){this._isReady?e():(this._mediator.once(i.Constants.EVENTS.EDITOR_READY,e),this._isReady=!0)}},{key:"_initOptions",value:function(){this._options=i.SDKUtils.defaults(this._options,{language:"en",title:"PhotoEditor SDK",logLevel:"warn",crossOrigin:"anonymous",preloader:!0,editor:{},assets:{},photoRoll:{},enableUpload:!0,enableWebcam:!0,showCloseButton:!1,showHeader:!0,showTopBar:!0,responsive:!1}),this._options.editor=i.SDKUtils.defaults(this._options.editor||{},{pixelRatio:"undefined"!=typeof window&&window.devicePixelRatio||1,preferredRenderer:"webgl",enableZoom:!0,enableDrag:!0,smoothDownscaling:!1,smoothUpscaling:!1,displayResizeMessage:!0,maxMegaPixels:{},forceControls:[],forceCrop:!1,watermarkImage:null,tools:["transform","filter","brightness","saturation","contrast","clarity","exposure","shadows","highlights","gamma","whites","blacks","temperature","text","sticker","brush","radial-focus","mirrored-focus","frame"],controlsOrder:["transform",["filter","adjustments"],["text","sticker","brush"],["selectiveBlur","focus","frame"]],operationsOrder:["exif-orientation","orientation","transform","filter","adjustments","radial-focus","mirrored-focus","selective-blur","sprite","frame","watermark"],controlsOptions:{}}),this._options.editor.maxMegaPixels=i.SDKUtils.defaults(this._options.editor.maxMegaPixels,{mobile:5,desktop:10}),this._options.editor.export=i.SDKUtils.defaults(this._options.editor.export||{},{showButton:!0,format:"image/png",type:i.RenderType.IMAGE,download:!0,fileBasename:"photoeditorsdk-export",quality:.8}),this._options.photoRoll=i.SDKUtils.defaults(this._options.photoRoll||{},{provider:null}),this._options.extensions=i.SDKUtils.defaults(this._options.extensions||{},{languages:{},operations:[],controls:[]}),this._options.assets=i.SDKUtils.defaults(this._options.assets||{},{baseUrl:"assets",resolver:null})}},{key:"_v",value:function(){return!!this[w("X29wdGlvbnM=")][w("bGljZW5zZQ==")]||(i.Log.error(w("TGljZW5zaW5n"),w("Tm8gYGxpY2Vuc2VgIG9wdGlvbiBnaXZlbi4=")),i.Log.error(w("TGljZW5zaW5n"),w("SW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIGxpY2Vuc2UgeWV0LCBwbGVhc2UgY29udGFjdCBvdXIgc2FsZXMgc3RhZmYgYXQgc2FsZXNAcGhvdG9lZGl0b3JzZGsuY29tIHRvIG9idGFpbiBhIGxpY2Vuc2Ugb3IgbG9nIGluIHRvIHlvdXIgY3VzdG9tZXIgZGFzaGJvYXJkLg==")),!1)}},{key:"_registerWebFonts",value:function(){var e='\n      // Injected by PhotoEditorSDK\n      @font-face {\n        font-family: "__pesdk_Montserrat";\n        src: url(\''+this.getAssetPath("fonts/montserrat-regular.woff",!0,!0)+"') format('woff');\n        font-weight: normal;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: \"__pesdk_Montserrat\";\n        src: url('"+this.getAssetPath("fonts/montserrat-light.woff",!0,!0)+"') format('woff');\n        font-weight: 100;\n        font-style: normal;\n      }\n    ";this._webFontsStyle=document.createElement("style"),this._webFontsStyle.innerHTML=e,document.getElementsByTagName("head")[0].appendChild(this._webFontsStyle)}},{key:"_initEvents",value:function(){this._mediator.pipeEvents(this)}},{key:"_disposeEvents",value:function(){this._mediator.unpipeEvents(this)}},{key:"_initLanguage",value:function(){this._languages=i.SDKUtils.deepDefaults(this._options.extensions.languages,{de:n(202),en:n(203)}),this._language=this._languages[this._options.language],this._language||i.Log.error(this.constructor.name,"Language `"+this._options.language+"` not found!")}},{key:"translate",value:function(e,t){return i.Utils.translate(this._language,e,t)}},{key:"setImage",value:function(e){this._component&&this._component.setImage(e)}},{key:"getAssetPath",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=this._options.assets,i=r.baseUrl,o=r.resolver,a=i+"/"+e;if(e.match(/(ftp|http|https):\/\//)&&(a=e),t){if(!n)if(("undefined"!=typeof window&&window.devicePixelRatio||1)>1){e=e.replace(/\.[\w?=]+$/,function(e){return"@2x"+e})}a=i+"/ui/react/"+e}return void 0!==o&&null!==o&&(a=o(a)),a}},{key:"getFontLoader",value:function(){return this._fontLoader}},{key:"getPreloader",value:function(){return this._preloader}},{key:"dispose",value:function(){if(this._disposed)throw new Error("This instance of PhotoEditorSDK is already disposed.");this._disposed=!0,this._webFontsStyle.parentNode.removeChild(this._webFontsStyle),i.ReactDOM.unmountComponentAtNode(this._options.container),this._disposeEvents()}}]),t}();O.prototype.identifier="react",O.BaseComponent=i.BaseComponent,O.BaseControls=p.default,O.ControlsComponent=s.default,O.React=i.React,O.ReactBEM=i.ReactBEM,O.SharedState=i.SharedState,O.Constants=i.Constants,O.Utils=i.Utils,O.ScrollbarComponent=a.default,O.ModalManager=l.default,O.JSONLoader=c.default,O.PhotoRoll=f,O.Controls=d,O.SliderComponent=h.default,O.SliderOverlayComponent=_.default;var E=function(e){function t(){return v(this,t),b(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return k(t,i.React.Component),r(t,[{key:"componentDidMount",value:function(){this._ui=new O(i.SDKUtils.extend({},this.props,{container:this.refs.container})),this.props.onEditorReady&&this._ui.onReady(this.props.onEditorReady)}},{key:"render",value:function(){var e=i.SDKUtils.extend({},this.props.style||{});return i.React.createElement("div",{style:e,ref:"container"})}},{key:"ui",get:function(){return this._ui}}]),t}();O.ReactComponent=E,i.SDK.UI=i.SDK.UI||{},i.SDK.UI.ReactUI=O,t.default=O},function(e,t){e.exports=n},function(e,t,n){"use strict";var r=n(17),i=n(18),o=n(34),a=n(64),s=n(19),l=n(65);e.exports=function(e,t){var n="function"==typeof Symbol&&Symbol.iterator,c="@@iterator";var u="<<anonymous>>",f={array:_("array"),bool:_("boolean"),func:_("function"),number:_("number"),object:_("object"),string:_("string"),symbol:_("symbol"),any:h(r.thatReturnsNull),arrayOf:function(e){return h(function(t,n,r,i,o){if("function"!=typeof e)return new d("Property `"+o+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var a=t[n];if(!Array.isArray(a)){var l=y(a);return new d("Invalid "+i+" `"+o+"` of type `"+l+"` supplied to `"+r+"`, expected an array.")}for(var c=0;c<a.length;c++){var u=e(a,c,r,i,o+"["+c+"]",s);if(u instanceof Error)return u}return null})},element:function(){return h(function(t,n,r,i,o){var a=t[n];if(!e(a)){var s=y(a);return new d("Invalid "+i+" `"+o+"` of type `"+s+"` supplied to `"+r+"`, expected a single ReactElement.")}return null})}(),instanceOf:function(e){return h(function(t,n,r,i,o){if(!(t[n]instanceof e)){var a=e.name||u,s=function(e){if(!e.constructor||!e.constructor.name)return u;return e.constructor.name}(t[n]);return new d("Invalid "+i+" `"+o+"` of type `"+s+"` supplied to `"+r+"`, expected instance of `"+a+"`.")}return null})},node:function(){return h(function(e,t,n,r,i){if(!m(e[t]))return new d("Invalid "+r+" `"+i+"` supplied to `"+n+"`, expected a ReactNode.");return null})}(),objectOf:function(e){return h(function(t,n,r,i,o){if("function"!=typeof e)return new d("Property `"+o+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var a=t[n],l=y(a);if("object"!==l)return new d("Invalid "+i+" `"+o+"` of type `"+l+"` supplied to `"+r+"`, expected an object.");for(var c in a)if(a.hasOwnProperty(c)){var u=e(a,c,r,i,o+"."+c,s);if(u instanceof Error)return u}return null})},oneOf:function(e){if(!Array.isArray(e))return"production"!=={ENV:'"development"'}.NODE_ENV&&o(!1,"Invalid argument supplied to oneOf, expected an instance of array."),r.thatReturnsNull;return h(function(t,n,r,i,o){for(var a=t[n],s=0;s<e.length;s++)if(p(a,e[s]))return null;var l=JSON.stringify(e);return new d("Invalid "+i+" `"+o+"` of value `"+a+"` supplied to `"+r+"`, expected one of "+l+".")})},oneOfType:function(e){if(!Array.isArray(e))return"production"!=={ENV:'"development"'}.NODE_ENV&&o(!1,"Invalid argument supplied to oneOfType, expected an instance of array."),r.thatReturnsNull;for(var t=0;t<e.length;t++){var n=e[t];if("function"!=typeof n)return o(!1,"Invalid argument supplied to oneOfType. Expected an array of check functions, but received %s at index %s.",v(n),t),r.thatReturnsNull}return h(function(t,n,r,i,o){for(var a=0;a<e.length;a++){var l=e[a];if(null==l(t,n,r,i,o,s))return null}return new d("Invalid "+i+" `"+o+"` supplied to `"+r+"`.")})},shape:function(e){return h(function(t,n,r,i,o){var a=t[n],l=y(a);if("object"!==l)return new d("Invalid "+i+" `"+o+"` of type `"+l+"` supplied to `"+r+"`, expected `object`.");for(var c in e){var u=e[c];if(u){var f=u(a,c,r,i,o+"."+c,s);if(f)return f}}return null})},exact:function(e){return h(function(t,n,r,i,o){var l=t[n],c=y(l);if("object"!==c)return new d("Invalid "+i+" `"+o+"` of type `"+c+"` supplied to `"+r+"`, expected `object`.");var u=a({},t[n],e);for(var f in u){var p=e[f];if(!p)return new d("Invalid "+i+" `"+o+"` key `"+f+"` supplied to `"+r+"`.\nBad object: "+JSON.stringify(t[n],null,"  ")+"\nValid keys: "+JSON.stringify(Object.keys(e),null,"  "));var h=p(l,f,r,i,o+"."+f,s);if(h)return h}return null})}};function p(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function d(e){this.message=e,this.stack=""}function h(e){if("production"!=={ENV:'"development"'}.NODE_ENV)var n={},r=0;function a(a,l,c,f,p,h,_){if(f=f||u,h=h||c,_!==s)if(t)i(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");else if("production"!=={ENV:'"development"'}.NODE_ENV&&"undefined"!=typeof console){var m=f+":"+c;!n[m]&&r<3&&(o(!1,"You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",h,f),n[m]=!0,r++)}return null==l[c]?a?null===l[c]?new d("The "+p+" `"+h+"` is marked as required in `"+f+"`, but its value is `null`."):new d("The "+p+" `"+h+"` is marked as required in `"+f+"`, but its value is `undefined`."):null:e(l,c,f,p,h)}var l=a.bind(null,!1);return l.isRequired=a.bind(null,!0),l}function _(e){return h(function(t,n,r,i,o,a){var s=t[n];return y(s)!==e?new d("Invalid "+i+" `"+o+"` of type `"+g(s)+"` supplied to `"+r+"`, expected `"+e+"`."):null})}function m(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(m);if(null===t||e(t))return!0;var r=function(e){var t=e&&(n&&e[n]||e[c]);if("function"==typeof t)return t}(t);if(!r)return!1;var i,o=r.call(t);if(r!==t.entries){for(;!(i=o.next()).done;)if(!m(i.value))return!1}else for(;!(i=o.next()).done;){var a=i.value;if(a&&!m(a[1]))return!1}return!0;default:return!1}}function y(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||"Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol}(t,e)?"symbol":t}function g(e){if(void 0===e||null===e)return""+e;var t=y(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function v(e){var t=g(e);switch(t){case"array":case"object":return"an "+t;case"boolean":case"date":case"regexp":return"a "+t;default:return t}}return d.prototype=Error.prototype,f.checkPropTypes=l,f.PropTypes=f,f}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))i.call(n,c)&&(s[c]=n[c]);if(r){a=r(n);for(var u=0;u<a.length;u++)o.call(n,a[u])&&(s[a[u]]=n[a[u]])}}return s}},function(e,t,n){"use strict";if("production"!=={ENV:'"development"'}.NODE_ENV)var r=n(18),i=n(34),o=n(19),a={};e.exports=function(e,t,n,s,l){if("production"!=={ENV:'"development"'}.NODE_ENV)for(var c in e)if(e.hasOwnProperty(c)){var u;try{r("function"==typeof e[c],"%s: %s type `%s` is invalid; it must be a function, usually from the `prop-types` package, but received `%s`.",s||"React class",n,c,typeof e[c]),u=e[c](t,c,s,n,null,o)}catch(e){u=e}if(i(!u||u instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",s||"React class",n,c,typeof u),u instanceof Error&&!(u.message in a)){a[u.message]=!0;var f=l?l():"";i(!1,"Failed %s type: %s%s",n,u.message,null!=f?f:"")}}}},function(e,t,n){"use strict";var r=n(17),i=n(18),o=n(19);e.exports=function(){function e(e,t,n,r,a,s){s!==o&&i(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(16)),o=s(n(33)),a=s(n(37));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._events={},o._needsStyleFixes=!1,o._bindAll("_onSharedStateUpdate","fixStyles"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),r(t,[{key:"fixStyles",value:function(){}},{key:"componentDidMount",value:function(){this._bindEvents(),this.props.sharedState&&this.props.sharedState.on("update",this._onSharedStateUpdate),this._needsStyleFixes&&(this.fixStyles(),this.context.options.responsive&&window.addEventListener("resize",this.fixStyles))}},{key:"componentWillUnmount",value:function(){this._unbindEvents(),this.props.sharedState&&this.props.sharedState.off("update",this._onSharedStateUpdate),this.context.options.responsive&&this._needsStyleFixes&&window.removeEventListener("resize",this.fixStyles)}},{key:"componentWillReceiveProps",value:function(e){e.sharedState&&(this.props.sharedState&&this.props.sharedState.off("update",this._onSharedStateUpdate),e.sharedState.on("update",this._onSharedStateUpdate))}},{key:"_bindAll",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];n.forEach(function(t){if("function"!=typeof e[t])throw new Error("_bindAll: "+e.constructor.name+"."+t+" is not a function.");e[t]=e[t].bind(e)})}},{key:"_t",value:function(e,t){return this.context.ui.translate(e,t)}},{key:"_getAssetPath",value:function(){var e;return(e=this.context.ui).getAssetPath.apply(e,arguments)}},{key:"_onSharedStateUpdate",value:function(e,t){this.sharedStateDidChange(t),this.shouldSharedComponentUpdate(e,t)&&this.forceUpdate()}},{key:"shouldSharedComponentUpdate",value:function(e,t){return!0}},{key:"sharedStateDidChange",value:function(e){}},{key:"setSharedState",value:function(e,t){this.props.sharedState.set(e,t)}},{key:"getSharedState",value:function(e){return this.props.sharedState.get(e)}},{key:"forceSharedUpdate",value:function(){this.props.sharedState.broadcastUpdate()}},{key:"_bindEvents",value:function(){for(var e in this._events){var t=this._events[e];this.context.mediator.on(e,t)}}},{key:"_unbindEvents",value:function(){for(var e in this._events){var t=this._events[e];this.context.mediator.off(e,t)}}},{key:"_emitEvent",value:function(e){for(var t,n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];(t=this.context.mediator).emit.apply(t,[e].concat(r))}},{key:"renderWithBEM",value:function(){return a.default.createElement("div")}},{key:"render",value:function(){return a.default.transform(this.renderWithBEM())}}]),t}();t.default=l,l.contextTypes={editor:o.default.object,ui:o.default.object,options:o.default.object,mediator:o.default.object,editorScreen:o.default.object,globalState:o.default.object},l.propTypes={sharedState:o.default.any}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(7)),i=s(n(20)),o=s(n(72)),a=s(n(22));function s(e){return e&&e.__esModule?e:{default:e}}var l=r.default.Utils,c=r.default.Math.Vector2,u={getInnerDimensionsForElement:function(e){var t=new c(e.offsetWidth,e.offsetHeight),n=window.getComputedStyle(e,null);return t.x-=parseInt(n.getPropertyValue("padding-left"),10),t.x-=parseInt(n.getPropertyValue("padding-right"),10),t.y-=parseInt(n.getPropertyValue("padding-top"),10),t.y-=parseInt(n.getPropertyValue("padding-bottom"),10),t},getEventPosition:function(e){var t=e.clientX,n=e.clientY;if(-1!==e.type.indexOf("touch")){if(!e.touches.length)return;t=e.touches[0].clientX,n=e.touches[0].clientY}return new c(t,n)},createTransparentPatternCanvas:function(){var e=document.createElement("canvas"),t=e.getContext("2d");return e.width=10,e.height=10,t.fillStyle="white",t.fillRect(0,0,e.width,e.height),t.fillStyle="#cccccc",t.fillRect(0,0,e.width/2,e.height/2),t.fillRect(e.width/2,e.height/2,e.width,e.height),e},supportsMSBlob:function(){return void 0!==document.createElement("canvas").msToBlob},translate:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=this.fetch(e,t);if(!o){i.default.info("Utils#translate","Unable to translate `"+t+"`");var a=n(83)[t];return null!=a?(i.default.warn("Utils#translate","Trying to find localized string for old key: `"+a+"`. Please update your localization to use the new key as soon as possible. Support for the old, deprecated key will be dropped with the next major version update."),this.translate(e,a,r)):null}for(var s in r)o=o.replace("${"+s+"}",r[s]);return o},fetch:function(e,t,n){for(var r=(t=(t=t.replace(/\[(\w+)]/g,".$1")).replace(/^\./,"")).split("."),i=0;i<r.length;i++){if(!(e=e[r[i]]))break}return void 0!==e&&e},isMobile:function(){var e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))},isTouchDevice:function(){return!!("ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch)},select:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;n||(n=function(e){return e});var r=[];return t.forEach(function(t){e.forEach(function(e){n(e)===t&&r.push(e)})}),r},getJSONP:function(e){return new a.default(e).load()},cloneCategories:function(e,t){return e.map(function(e){return(e=l.clone(e))[t]=e[t].slice(0),e})},mergeCategories:function(e,t,n){e=this.cloneCategories(e,n);var r=null;return t.forEach(function(t){e.forEach(function(e){t.identifier===e.identifier&&(r=e)}),r?r[n]=r[n].concat(t[n]):e.push(t)}),e},getStyleObject:function(e){var t=window.getComputedStyle(e),n={};for(var r in t){var i=t.getPropertyValue(r),o=r.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()});""!==i&&(n[o]=i)}return n},debounce:function(e,t,n){var r;return function(){var i=this,o=arguments,a=n&&!r;clearTimeout(r),r=setTimeout(function(){r=null,n||e.apply(i,o)},t),a&&e.apply(this,o)}},getScrollbarWidth:function(){var e=document.createElement("div");e.style.visibility="hidden",e.style.width="100px",e.style.msOverflowStyle="scrollbar",document.body.appendChild(e);var t=e.offsetWidth;e.style.overflow="scroll";var n=document.createElement("div");n.style.width="100%",e.appendChild(n);var r=n.offsetWidth;return e.parentNode.removeChild(e),t-r},capitalize:function(e){return e.charAt(0).toUpperCase()+e.slice(1)},Browser:o.default};t.default=u},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(70)),s=l(n(71));function l(e){return e&&e.__esModule?e:{default:e}}function c(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var u=function(){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t)}return o(t,null,[{key:"isArray",value:function(e){return"[object Array]"===Object.prototype.toString.call(e)}},{key:"isPlainObject",value:function(e){if("object"!==(void 0===e?"undefined":i(e))||!e)return!1;if("function"==typeof Object.getPrototypeOf){var t=Object.getPrototypeOf(e);return t===Object.prototype||null===t}return"[object Object]"===Object.prototype.toString.call(e)}},{key:"isMobile",value:function(){if("undefined"==typeof navigator)return!1;var e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od|ad)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}},{key:"isBrowser",value:function(){return"undefined"!=typeof window}},{key:"isNode",value:function(){return"undefined"==typeof window&&void 0!==e}},{key:"values",value:function(e){var t=[];for(var n in e)t.push(e[n]);return t}},{key:"isDOMElement",value:function(e){return"object"===("undefined"==typeof HTMLElement?"undefined":i(HTMLElement))?e instanceof HTMLElement:e&&"object"===(void 0===e?"undefined":i(e))&&null!==e&&1===e.nodeType&&"string"==typeof e.nodeName}},{key:"isTouchEvent",value:function(e){return-1!==e.type.indexOf("touch")}},{key:"resizeVectorToFit",value:function(e,t){var n=Math.min(t.x/e.x,t.y/e.y);return e.clone().multiply(n)}},{key:"resizeVectorToFill",value:function(e,t){var n=e.x/e.y;return n>t.x/t.y?t.clone().set(t.y*n,t.y):t.clone().set(t.x,t.x/n)}},{key:"isExtendable",value:function(e){return void 0!==e&&null!==e&&("object"===(void 0===e?"undefined":i(e))||"function"==typeof e)}},{key:"defaults",value:function(e){var t={};for(var n in e)t[n]=e[n];for(var r=arguments.length,i=Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];for(var a=0;a<i.length;a++){var s=i[a];for(var l in s)void 0===t[l]&&(t[l]=s[l])}return t}},{key:"deepMerge",value:function(e){for(var n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];return i.reduce(function e(n,i){if(void 0===i)return e(null,n);if(Array.isArray(i))return[].concat(c(i));if(!t.isPlainObject(i))return i;if(!t.isPlainObject(n))return r({},i);var o=r({},n);return Object.keys(i).forEach(function(t){var r=i[t];void 0!==r&&(o[t]=e(n[t],r))}),o},e)}},{key:"deepDefaults",value:function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];var o=[].concat(r).reverse();return t.deepMerge.apply(t,c(o).concat([e]))}},{key:"deepClone",value:function(e){var n={};for(var r in e)t.isExtendable(e[r])?n[r]=t.deepClone(e[r]):n[r]=e[r];return n}},{key:"getDeepProperty",value:function(e,t){if("string"==typeof t)return e[t];if(Array.isArray(t)){return t.reduce(function(e,t){return e?"function"==typeof t?function(e,t){var n=void 0;try{n=t(e)}catch(e){if(!(e instanceof TypeError))throw e}return n}(e,t):e[t]:null},e)}}},{key:"extend",value:function(e){var t={};for(var n in e)t[n]=e[n];for(var r=arguments.length,i=Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];for(var a=0;a<i.length;a++){var s=i[a];for(var l in s)t[l]=s[l]}return t}},{key:"clone",value:function(e){return this.extend({},e)}},{key:"createBlobURIFromDataURI",value:function(t){var n="undefined"==typeof window?e:window;if(!(n.Blob&&n.URL&&ArrayBuffer&&Uint8Array))return t;for(var r=a.default.decode(t.split(",")[1]),i=t.split(",")[0].split(":")[1].split(";")[0],o=new ArrayBuffer(r.length),s=new Uint8Array(o),l=0;l<r.length;l++)s[l]=r[l];var c=new n.Blob([o],{type:i});return n.URL.createObjectURL(c)}},{key:"getUUID",value:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}},{key:"createCanvas",value:function(){return document.createElement("canvas")}},{key:"convertHtmlImageToRGBACanvas",value:function(e){var n=t.createCanvas();return n.width=e.width,n.height=e.height,n.getContext("2d").drawImage(e,0,0,e.width,e.height),n}},{key:"isPowerOfTwo",value:function(e){return 0==(e.x&e.x-1)&&0==(e.y&e.y-1)}},{key:"nextLowestPOT",value:function(e){for(var t=1;t<32;t<<=1)e|=e>>t;return e-(e>>1)}},{key:"nextHighestPOT",value:function(e){e--;for(var t=1;t<32;t<<=1)e|=e>>t;return e+1}},{key:"moveArrayItem",value:function(e,t,n){if(n>=e.length)for(var r=n-e.length;1+r--;)e.push(void 0);e.splice(n,0,e.splice(t,1)[0])}},{key:"ensureCanvasDimensions",value:function(e,t){e.width===t.x&&e.height===t.y||(e.width=t.x,e.height=t.y)}},{key:"byteArrayToString",value:function(e){return e.map(function(e){return String.fromCharCode(e)}).join("")}},{key:"clamp",value:function(e,t,n){return Math.max(t,Math.min(e,n))}},{key:"wildCardMatch",value:function(e,t){return new RegExp("^"+t.split("*").join(".*")+"$").test(e)}},{key:"flipObject",value:function(e){var t={};for(var n in e)t[e[n]]=n;return t}},{key:"cloneOptions",value:function(e){var t={};for(var n in e){var r=e[n];Array.isArray(r)?r=r.slice():r.clone&&(r=r.clone()),t[n]=r}return t}},{key:"ISODateString",value:function(e){function t(e){return e<10?"0"+e:e}return e.getUTCFullYear()+"-"+t(e.getUTCMonth()+1)+"-"+t(e.getUTCDate())+"T"+t(e.getUTCHours())+":"+t(e.getUTCMinutes())+":"+t(e.getUTCSeconds())+"Z"}},{key:"getCrossOriginValue",value:function(e){return e?"none"!==e?e:void 0:"anonymous"}},{key:"shallowEqual",value:function(e,t){if(e===t)return!0;if("object"!==(void 0===e?"undefined":i(e))||null===e||"object"!==(void 0===t?"undefined":i(t))||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=hasOwnProperty.bind(t),a=0;a<n.length;a++)if(!o(n[a])||e[n[a]]!==t[n[a]])return!1;return!0}},{key:"enableIf",value:function(e,t){return e?t:void 0}},{key:"invariant",value:function(e,t){if(!e)throw new Error(t)}},{key:"executePromises",value:function(e){var t=e.length,n=0,r=[],i=[];return new Promise(function(o,a){var s=function(){++n>=t&&(i.length<=0?o(r):a(i))},l=function(e){r.push(e),s()},c=function(e){i.push(e),s()};e.forEach(function(e){e.then(l).catch(c)})})}}]),t}();u.Array=s.default,t.default=u}).call(t,n(8))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});
/*
 * Extracted from MinifyJpeg (Copyright (c) 2014 Hiroaki Matoba, MIT License):
 * https://github.com/hMatoba/MinifyJpeg
 * @license
 */
var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",i={encode:function(e){var t="",n=void 0,i=void 0,o=void 0,a=void 0,s=void 0,l=void 0,c=void 0,u=0;do{a=(n=e[u++])>>2,s=(3&n)<<4|(i=e[u++])>>4,l=(15&i)<<2|(o=e[u++])>>6,c=63&o,isNaN(i)?l=c=64:isNaN(o)&&(c=64),t=t+r.charAt(a)+r.charAt(s)+r.charAt(l)+r.charAt(c),n=i=o="",a=s=l=c=""}while(u<e.length);return t},decode:function(e){var t=void 0,n=void 0,i=void 0,o=void 0,a=void 0,s=void 0,l=0,c=[];if(/[^A-Za-z0-9+/=]/g.exec(e))throw new Error("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding.");e=e.replace(/[^A-Za-z0-9+/=]/g,"");do{t=r.indexOf(e.charAt(l++))<<2|(o=r.indexOf(e.charAt(l++)))>>4,n=(15&o)<<4|(a=r.indexOf(e.charAt(l++)))>>2,i=(3&a)<<6|(s=r.indexOf(e.charAt(l++))),c.push(t),64!==a&&c.push(n),64!==s&&c.push(i),t=n=i="",o=a=s=""}while(l<e.length);return c}};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"head",value:function(e){return e[0]}},{key:"tail",value:function(e){return e.slice(1)}},{key:"last",value:function(e){return e[e.length-1]}},{key:"init",value:function(e){return e.slice(0,e.length-1)}},{key:"remove",value:function(e,t){return e.filter(function(e,n,r){return!t(e,n,r)})}},{key:"findIndex",value:function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n;return-1}},{key:"find",value:function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return e[n]}},{key:"flatten",value:function(t){return t.reduce(function(t,n){return t.concat(Array.isArray(n)?e.flatten(n):n)},[])}},{key:"range",value:function(e,t){var n=[];if(t>e)for(var r=e;r<t;r++)n.push(r);return n}},{key:"repeat",value:function(e,t){for(var n=[],r=0;r<t;r++)n[r]=e;return n}},{key:"zip",value:function(e,t){for(var n=Math.min(e.length,t.length),r=[],i=0;i<n;i++)r[i]=[e[i],t[i]];return r}}]),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={getIEVersion:function(){var e=navigator,t=e.userAgent,n=e.appVersion;return-1!==n.indexOf("MSIE")?n.match(/MSIE\s+?([0-9]+)/i)[1]:-1!==t.indexOf("Trident")&&t.match(/rv:([0-9]+)/i)[1]},isIE10:function(){var e=this.getIEVersion();return!1!==e&&10===e},isIE11:function(){var e=this.getIEVersion();return!1!==e&&11===e},isIElte:function(e){var t=this.getIEVersion();return!1!==t&&t<=e}}},function(e,t,n){"use strict";(function(e,n){Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=void 0===n?window:n,o="undefined"!=typeof Promise?Promise:function(){var t,n,i,o=Object.prototype.toString,a=void 0!==e?function(t){return e(t)}:setTimeout;try{Object.defineProperty({},"x",{}),t=function(e,t,n,r){return Object.defineProperty(e,t,{value:n,writable:!0,configurable:!1!==r})}}catch(e){t=function(e,t,n){return e[t]=n,e}}function s(e,t){i.add(e,t),n||(n=a(i.drain))}function l(e){var t,n=void 0===e?"undefined":r(e);return null==e||"object"!=n&&"function"!=n||(t=e.then),"function"==typeof t&&t}function c(){for(var e=0;e<this.chain.length;e++)u(this,1===this.state?this.chain[e].success:this.chain[e].failure,this.chain[e]);this.chain.length=0}function u(e,t,n){var r,i;try{!1===t?n.reject(e.msg):(r=!0===t?e.msg:t.call(void 0,e.msg))===n.promise?n.reject(TypeError("Promise-chain cycle")):(i=l(r))?i.call(r,n.resolve,n.reject):n.resolve(r)}catch(e){n.reject(e)}}function f(e){var t=this;t.triggered||(t.triggered=!0,t.def&&(t=t.def),t.msg=e,t.state=2,t.chain.length>0&&s(c,t))}function p(e,t,n,r){for(var i=0;i<t.length;i++)!function(i){e.resolve(t[i]).then(function(e){n(i,e)},r)}(i)}function d(e){this.def=e,this.triggered=!1}function h(e){if("function"!=typeof e)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var t=new function(e){this.promise=e,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}(this);this.then=function(e,n){var r={success:"function"!=typeof e||e,failure:"function"==typeof n&&n};return r.promise=new this.constructor(function(e,t){if("function"!=typeof e||"function"!=typeof t)throw TypeError("Not a function");r.resolve=e,r.reject=t}),t.chain.push(r),0!==t.state&&s(c,t),r.promise},this.catch=function(e){return this.then(void 0,e)};try{e.call(void 0,function(e){(function e(t){var n,r=this;if(!r.triggered){r.triggered=!0,r.def&&(r=r.def);try{(n=l(t))?s(function(){var i=new d(r);try{n.call(t,function(){e.apply(i,arguments)},function(){f.apply(i,arguments)})}catch(e){f.call(i,e)}}):(r.msg=t,r.state=1,r.chain.length>0&&s(c,r))}catch(e){f.call(new d(r),e)}}}).call(t,e)},function(e){f.call(t,e)})}catch(e){f.call(t,e)}}i={add:function(e,t){y=new function(e,t){this.fn=e,this.self=t,this.next=void 0}(e,t),m?m.next=y:_=y,m=y,y=void 0},drain:function(){var e=_;for(_=m=n=void 0;e;)e.fn.call(e.self),e=e.next}};var _,m,y;var g=t({},"constructor",h,!1);return h.prototype=g,t(g,"__NPO__",0,!1),t(h,"resolve",function(e){return e&&"object"==(void 0===e?"undefined":r(e))&&1===e.__NPO__?e:new this(function(t,n){if("function"!=typeof t||"function"!=typeof n)throw TypeError("Not a function");t(e)})}),t(h,"reject",function(e){return new this(function(t,n){if("function"!=typeof t||"function"!=typeof n)throw TypeError("Not a function");n(e)})}),t(h,"all",function(e){var t=this;return"[object Array]"!=o.call(e)?t.reject(TypeError("Not an array")):0===e.length?t.resolve([]):new t(function(n,r){if("function"!=typeof n||"function"!=typeof r)throw TypeError("Not a function");var i=e.length,o=Array(i),a=0;p(t,e,function(e,t){o[e]=t,++a===i&&n(o)},r)})}),t(h,"race",function(e){var t=this;return"[object Array]"!=o.call(e)?t.reject(TypeError("Not an array")):new t(function(n,r){if("function"!=typeof n||"function"!=typeof r)throw TypeError("Not a function");p(t,e,function(e,t){n(t)},r)})}),h}();
/*!
 * Native Promise Only
 * v0.8.0-a (c) Kyle Simpson
 * MIT License: http://getify.mit-license.org
 */i.Promise=i.Promise||o,t.default=o}).call(t,n(74).setImmediate,n(8))},function(e,t,n){var r=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(r.call(setTimeout,window,arguments),clearTimeout)},t.setInterval=function(){return new i(r.call(setInterval,window,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(window,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(75),t.setImmediate=setImmediate,t.clearImmediate=clearImmediate},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,o,a,s,l=1,c={},u=!1,f=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){h(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){h(e.data)},r=function(e){o.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(e){var t=f.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(h,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&h(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),r=function(t){e.postMessage(a+t,"*")}),p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return c[l]=i,r(l),l++},p.clearImmediate=d}function d(e){delete c[e]}function h(e){if(u)setTimeout(h,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{d(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(t,n(8),n(21))},function(e,t,n){"use strict";var r=n(77),i=n(79);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=v,t.resolve=function(e,t){return v(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?v(e,!1,!0).resolveObject(t):t},t.format=function(e){i.isString(e)&&(e=v(e));return e instanceof o?e.format():o.prototype.format.call(e)},t.Url=o;var a=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(c),f=["%","/","?",";","#"].concat(u),p=["/","?","#"],d=/^[+a-z0-9A-Z_-]{0,63}$/,h=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,_={javascript:!0,"javascript:":!0},m={javascript:!0,"javascript:":!0},y={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},g=n(80);function v(e,t,n){if(e&&i.isObject(e)&&e instanceof o)return e;var r=new o;return r.parse(e,t,n),r}o.prototype.parse=function(e,t,n){if(!i.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),s=-1!==o&&o<e.indexOf("#")?"?":"#",c=e.split(s);c[0]=c[0].replace(/\\/g,"/");var v=e=c.join(s);if(v=v.trim(),!n&&1===e.split("#").length){var b=l.exec(v);if(b)return this.path=v,this.href=v,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?g.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var k=a.exec(v);if(k){var w=(k=k[0]).toLowerCase();this.protocol=w,v=v.substr(k.length)}if(n||k||v.match(/^\/\/[^@\/]+@[^@\/]+/)){var O="//"===v.substr(0,2);!O||k&&m[k]||(v=v.substr(2),this.slashes=!0)}if(!m[k]&&(O||k&&!y[k])){for(var E,S,P=-1,x=0;x<p.length;x++){-1!==(C=v.indexOf(p[x]))&&(-1===P||C<P)&&(P=C)}-1!==(S=-1===P?v.lastIndexOf("@"):v.lastIndexOf("@",P))&&(E=v.slice(0,S),v=v.slice(S+1),this.auth=decodeURIComponent(E)),P=-1;for(x=0;x<f.length;x++){var C;-1!==(C=v.indexOf(f[x]))&&(-1===P||C<P)&&(P=C)}-1===P&&(P=v.length),this.host=v.slice(0,P),v=v.slice(P),this.parseHost(),this.hostname=this.hostname||"";var M="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!M)for(var j=this.hostname.split(/\./),R=(x=0,j.length);x<R;x++){var B=j[x];if(B&&!B.match(d)){for(var T="",D=0,F=B.length;D<F;D++)B.charCodeAt(D)>127?T+="x":T+=B[D];if(!T.match(d)){var I=j.slice(0,x),A=j.slice(x+1),z=B.match(h);z&&(I.push(z[1]),A.unshift(z[2])),A.length&&(v="/"+A.join(".")+v),this.hostname=I.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),M||(this.hostname=r.toASCII(this.hostname));var N=this.port?":"+this.port:"",L=this.hostname||"";this.host=L+N,this.href+=this.host,M&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==v[0]&&(v="/"+v))}if(!_[w])for(x=0,R=u.length;x<R;x++){var U=u[x];if(-1!==v.indexOf(U)){var V=encodeURIComponent(U);V===U&&(V=escape(U)),v=v.split(U).join(V)}}var W=v.indexOf("#");-1!==W&&(this.hash=v.substr(W),v=v.slice(0,W));var K=v.indexOf("?");if(-1!==K?(this.search=v.substr(K),this.query=v.substr(K+1),t&&(this.query=g.parse(this.query)),v=v.slice(0,K)):t&&(this.search="",this.query={}),v&&(this.pathname=v),y[w]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){N=this.pathname||"";var H=this.search||"";this.path=N+H}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",o=!1,a="";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(a=g.stringify(this.query));var s=this.search||a&&"?"+a||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||y[t])&&!1!==o?(o="//"+(o||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):o||(o=""),r&&"#"!==r.charAt(0)&&(r="#"+r),s&&"?"!==s.charAt(0)&&(s="?"+s),t+o+(n=n.replace(/[?#]/g,function(e){return encodeURIComponent(e)}))+(s=s.replace("#","%23"))+r},o.prototype.resolve=function(e){return this.resolveObject(v(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(i.isString(e)){var t=new o;t.parse(e,!1,!0),e=t}for(var n=new o,r=Object.keys(this),a=0;a<r.length;a++){var s=r[a];n[s]=this[s]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var l=Object.keys(e),c=0;c<l.length;c++){var u=l[c];"protocol"!==u&&(n[u]=e[u])}return y[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!y[e.protocol]){for(var f=Object.keys(e),p=0;p<f.length;p++){var d=f[p];n[d]=e[d]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||m[e.protocol])n.pathname=e.pathname;else{for(var h=(e.pathname||"").split("/");h.length&&!(e.host=h.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==h[0]&&h.unshift(""),h.length<2&&h.unshift(""),n.pathname=h.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var _=n.pathname||"",g=n.search||"";n.path=_+g}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var v=n.pathname&&"/"===n.pathname.charAt(0),b=e.host||e.pathname&&"/"===e.pathname.charAt(0),k=b||v||n.host&&e.pathname,w=k,O=n.pathname&&n.pathname.split("/")||[],E=(h=e.pathname&&e.pathname.split("/")||[],n.protocol&&!y[n.protocol]);if(E&&(n.hostname="",n.port=null,n.host&&(""===O[0]?O[0]=n.host:O.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===h[0]?h[0]=e.host:h.unshift(e.host)),e.host=null),k=k&&(""===h[0]||""===O[0])),b)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,O=h;else if(h.length)O||(O=[]),O.pop(),O=O.concat(h),n.search=e.search,n.query=e.query;else if(!i.isNullOrUndefined(e.search)){if(E)n.hostname=n.host=O.shift(),(M=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=M.shift(),n.host=n.hostname=M.shift());return n.search=e.search,n.query=e.query,i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!O.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var S=O.slice(-1)[0],P=(n.host||e.host||O.length>1)&&("."===S||".."===S)||""===S,x=0,C=O.length;C>=0;C--)"."===(S=O[C])?O.splice(C,1):".."===S?(O.splice(C,1),x++):x&&(O.splice(C,1),x--);if(!k&&!w)for(;x--;x)O.unshift("..");!k||""===O[0]||O[0]&&"/"===O[0].charAt(0)||O.unshift(""),P&&"/"!==O.join("/").substr(-1)&&O.push("");var M,j=""===O[0]||O[0]&&"/"===O[0].charAt(0);E&&(n.hostname=n.host=j?"":O.length?O.shift():"",(M=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=M.shift(),n.host=n.hostname=M.shift()));return(k=k||n.host&&O.length)&&!j&&O.unshift(""),O.length?n.pathname=O.join("/"):(n.pathname=null,n.path=null),i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},o.prototype.parseHost=function(){var e=this.host,t=s.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,n){(function(e,r){var i;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(o){"object"==typeof t&&t&&t.nodeType,"object"==typeof e&&e&&e.nodeType;var a="object"==typeof r&&r;a.global!==a&&a.window!==a&&a.self;var s,l=2147483647,c=36,u=1,f=26,p=38,d=700,h=72,_=128,m="-",y=/^xn--/,g=/[^\x20-\x7E]/,v=/[\x2E\u3002\uFF0E\uFF61]/g,b={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},k=c-u,w=Math.floor,O=String.fromCharCode;function E(e){throw new RangeError(b[e])}function S(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function P(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+S((e=e.replace(v,".")).split("."),t).join(".")}function x(e){for(var t,n,r=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function C(e){return S(e,function(e){var t="";return e>65535&&(t+=O((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=O(e)}).join("")}function M(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function j(e,t,n){var r=0;for(e=n?w(e/d):e>>1,e+=w(e/t);e>k*f>>1;r+=c)e=w(e/k);return w(r+(k+1)*e/(e+p))}function R(e){var t,n,r,i,o,a,s,p,d,y,g,v=[],b=e.length,k=0,O=_,S=h;for((n=e.lastIndexOf(m))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&E("not-basic"),v.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<b;){for(o=k,a=1,s=c;i>=b&&E("invalid-input"),((p=(g=e.charCodeAt(i++))-48<10?g-22:g-65<26?g-65:g-97<26?g-97:c)>=c||p>w((l-k)/a))&&E("overflow"),k+=p*a,!(p<(d=s<=S?u:s>=S+f?f:s-S));s+=c)a>w(l/(y=c-d))&&E("overflow"),a*=y;S=j(k-o,t=v.length+1,0==o),w(k/t)>l-O&&E("overflow"),O+=w(k/t),k%=t,v.splice(k++,0,O)}return C(v)}function B(e){var t,n,r,i,o,a,s,p,d,y,g,v,b,k,S,P=[];for(v=(e=x(e)).length,t=_,n=0,o=h,a=0;a<v;++a)(g=e[a])<128&&P.push(O(g));for(r=i=P.length,i&&P.push(m);r<v;){for(s=l,a=0;a<v;++a)(g=e[a])>=t&&g<s&&(s=g);for(s-t>w((l-n)/(b=r+1))&&E("overflow"),n+=(s-t)*b,t=s,a=0;a<v;++a)if((g=e[a])<t&&++n>l&&E("overflow"),g==t){for(p=n,d=c;!(p<(y=d<=o?u:d>=o+f?f:d-o));d+=c)S=p-y,k=c-y,P.push(O(M(y+S%k,0))),p=w(S/k);P.push(O(M(p,0))),o=j(n,b,r==i),n=0,++r}++n,++t}return P.join("")}s={version:"1.4.1",ucs2:{decode:x,encode:C},decode:R,encode:B,toASCII:function(e){return P(e,function(e){return g.test(e)?"xn--"+B(e):e})},toUnicode:function(e){return P(e,function(e){return y.test(e)?R(e.slice(4).toLowerCase()):e})}},void 0===(i=function(){return s}.call(t,n,t,e))||(e.exports=i)}()}).call(t,n(78)(e),n(8))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,n){"use strict";t.decode=t.parse=n(81),t.encode=t.stringify=n(82)},function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,o){t=t||"&",n=n||"=";var a={};if("string"!=typeof e||0===e.length)return a;var s=/\+/g;e=e.split(t);var l=1e3;o&&"number"==typeof o.maxKeys&&(l=o.maxKeys);var c=e.length;l>0&&c>l&&(c=l);for(var u=0;u<c;++u){var f,p,d,h,_=e[u].replace(s,"%20"),m=_.indexOf(n);m>=0?(f=_.substr(0,m),p=_.substr(m+1)):(f=_,p=""),d=decodeURIComponent(f),h=decodeURIComponent(p),r(a,d)?i(a[d])?a[d].push(h):a[d]=[a[d],h]:a[d]=h}return a};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";var r=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,s){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?o(a(e),function(a){var s=encodeURIComponent(r(a))+n;return i(e[a])?o(e[a],function(e){return s+encodeURIComponent(r(e))}).join(t):s+encodeURIComponent(r(e[a]))}).join(t):s?encodeURIComponent(r(s))+n+encodeURIComponent(r(e)):""};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function o(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var a=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},function(e,t){e.exports={"pesdk.adjustments.text.brightness":"controls.adjustments.brightness","pesdk.adjustments.text.clarity":"controls.adjustments.clarity","pesdk.adjustments.text.contrast":"controls.adjustments.contrast","pesdk.adjustments.text.exposure":"controls.adjustments.exposure","pesdk.adjustments.text.gamma":"controls.adjustments.gamma","pesdk.adjustments.text.highlights":"controls.adjustments.highlights","pesdk.adjustments.text.saturation":"controls.adjustments.saturation","pesdk.adjustments.text.shadows":"controls.adjustments.shadows","pesdk.adjustments.title.name":"controls.overview.adjustments","pesdk.brush.text.size":"controls.brush.size","pesdk.brush.title.name":"controls.overview.brush","pesdk.camera.text.webcamUnavailable":"errors.webcamUnavailable.text","pesdk.camera.title.headline":"webcam.headline","pesdk.common.button.back":"generic.back","pesdk.common.button.cancel":"generic.cancel","pesdk.common.text.color":"generic.color","pesdk.common.text.imageLoadFailed":"errors.imageLoadFailed.text","pesdk.common.text.loading":"loading.loading","pesdk.common.title.error":"errors.title","pesdk.common.title.imageLoadFailed":"errors.imageLoadFailed.title","pesdk.editor.button.backgroundImage":"editor.backgroundImage","pesdk.editor.button.export":"editor.export","pesdk.editor.button.new":"editor.new","pesdk.editor.button.undo":"editor.undo","pesdk.editor.text.exporting":"loading.exporting","pesdk.editor.text.imageResized_maxDimensions":"warning.imageResized_maxDimensions.text","pesdk.editor.text.imageResized_maxMegaPixels":"warning.imageResized_maxMegaPixels.text","pesdk.editor.text.invalidFileType":"errors.invalidFileType.text","pesdk.editor.text.renderingError":"error.renderingError.text","pesdk.editor.text.resizing":"loading.resizing","pesdk.editor.title.imageResized_maxDimensions":"warnings.imageResized_maxDimensions.title","pesdk.editor.title.imageResized_maxMegaPixels":"warnings.imageResized_maxMegaPixels.title","pesdk.editor.title.renderingError":"errors.renderingError.title","pesdk.editor.title.zoom":"editor.zoom","pesdk.filter.asset.all":"controls.filter.categories.all","pesdk.filter.asset.identity":"controls.filter.filters.identity","pesdk.filter.asset.imgly_filters_analog":"controls.filter.categories.imgly_filters_analog","pesdk.filter.asset.imgly_filters_bw":"controls.filter.categories.imgly_filters_bw","pesdk.filter.asset.imgly_filters_retro":"controls.filter.categories.imgly_filters_retro","pesdk.filter.asset.imgly_filters_special":"controls.filter.categories.imgly_filters_special","pesdk.filter.asset.imgly_filters_summer":"controls.filter.categories.imgly_filters_summer","pesdk.filter.asset.imgly_filters_winter":"controls.filter.categories.imgly_filters_winter","pesdk.filter.asset.imgly_lut_ad1920":"controls.filter.filters.imgly_lut_ad1920","pesdk.filter.asset.imgly_lut_ancient":"controls.filter.filters.imgly_lut_ancient","pesdk.filter.asset.imgly_lut_bleached":"controls.filter.filters.imgly_lut_bleached","pesdk.filter.asset.imgly_lut_bleachedblue":"controls.filter.filters.imgly_lut_bleachedblue","pesdk.filter.asset.imgly_lut_blues":"controls.filter.filters.imgly_lut_blues","pesdk.filter.asset.imgly_lut_blueshadows":"controls.filter.filters.imgly_lut_blueshadows","pesdk.filter.asset.imgly_lut_breeze":"controls.filter.filters.imgly_lut_breeze","pesdk.filter.asset.imgly_lut_bw":"controls.filter.filters.imgly_lut_bw","pesdk.filter.asset.imgly_lut_celsius":"controls.filter.filters.imgly_lut_celsius","pesdk.filter.asset.imgly_lut_chest":"controls.filter.filters.imgly_lut_chest","pesdk.filter.asset.imgly_lut_classic":"controls.filter.filters.imgly_lut_classic","pesdk.filter.asset.imgly_lut_colorful":"controls.filter.filters.imgly_lut_colorful","pesdk.filter.asset.imgly_lut_cool":"controls.filter.filters.imgly_lut_cool","pesdk.filter.asset.imgly_lut_cottoncandy":"controls.filter.filters.imgly_lut_cottoncandy","pesdk.filter.asset.imgly_lut_creamy":"controls.filter.filters.imgly_lut_creamy","pesdk.filter.asset.imgly_lut_eighties":"controls.filter.filters.imgly_lut_eighties","pesdk.filter.asset.imgly_lut_elder":"controls.filter.filters.imgly_lut_elder","pesdk.filter.asset.imgly_lut_evening":"controls.filter.filters.imgly_lut_evening","pesdk.filter.asset.imgly_lut_fall":"controls.filter.filters.imgly_lut_fall","pesdk.filter.asset.imgly_lut_fixie":"controls.filter.filters.imgly_lut_fixie","pesdk.filter.asset.imgly_lut_food":"controls.filter.filters.imgly_lut_food","pesdk.filter.asset.imgly_lut_fridge":"controls.filter.filters.imgly_lut_fridge","pesdk.filter.asset.imgly_lut_front":"controls.filter.filters.imgly_lut_front","pesdk.filter.asset.imgly_lut_glam":"controls.filter.filters.imgly_lut_glam","pesdk.filter.asset.imgly_lut_gobblin":"controls.filter.filters.imgly_lut_gobblin","pesdk.filter.asset.imgly_lut_highcarb":"controls.filter.filters.imgly_lut_highcarb","pesdk.filter.asset.imgly_lut_highcontrast":"controls.filter.filters.imgly_lut_highcontrast","pesdk.filter.asset.imgly_lut_k1":"controls.filter.filters.imgly_lut_k1","pesdk.filter.asset.imgly_lut_k2":"controls.filter.filters.imgly_lut_k2","pesdk.filter.asset.imgly_lut_k6":"controls.filter.filters.imgly_lut_k6","pesdk.filter.asset.imgly_lut_kdynamic":"controls.filter.filters.imgly_lut_kdynamic","pesdk.filter.asset.imgly_lut_keen":"controls.filter.filters.imgly_lut_keen","pesdk.filter.asset.imgly_lut_lenin":"controls.filter.filters.imgly_lut_lenin","pesdk.filter.asset.imgly_lut_litho":"controls.filter.filters.imgly_lut_litho","pesdk.filter.asset.imgly_lut_lomo100":"controls.filter.filters.imgly_lut_lomo100","pesdk.filter.asset.imgly_lut_lucid":"controls.filter.filters.imgly_lut_lucid","pesdk.filter.asset.imgly_lut_mellow":"controls.filter.filters.imgly_lut_mellow","pesdk.filter.asset.imgly_lut_neat":"controls.filter.filters.imgly_lut_neat","pesdk.filter.asset.imgly_lut_nogreen":"controls.filter.filters.imgly_lut_nogreen","pesdk.filter.asset.imgly_lut_orchid":"controls.filter.filters.imgly_lut_orchid","pesdk.filter.asset.imgly_lut_pale":"controls.filter.filters.imgly_lut_pale","pesdk.filter.asset.imgly_lut_pitched":"controls.filter.filters.imgly_lut_pitched","pesdk.filter.asset.imgly_lut_plate":"controls.filter.filters.imgly_lut_plate","pesdk.filter.asset.imgly_lut_pola669":"controls.filter.filters.imgly_lut_pola669","pesdk.filter.asset.imgly_lut_polasx":"controls.filter.filters.imgly_lut_polasx","pesdk.filter.asset.imgly_lut_pro400":"controls.filter.filters.imgly_lut_pro400","pesdk.filter.asset.imgly_lut_quozi":"controls.filter.filters.imgly_lut_quozi","pesdk.filter.asset.imgly_lut_sepiahigh":"controls.filter.filters.imgly_lut_sepiahigh","pesdk.filter.asset.imgly_lut_settled":"controls.filter.filters.imgly_lut_settled","pesdk.filter.asset.imgly_lut_seventies":"controls.filter.filters.imgly_lut_seventies","pesdk.filter.asset.imgly_lut_sin":"controls.filter.filters.imgly_lut_sin","pesdk.filter.asset.imgly_lut_soft":"controls.filter.filters.imgly_lut_soft","pesdk.filter.asset.imgly_lut_steel":"controls.filter.filters.imgly_lut_steel","pesdk.filter.asset.imgly_lut_summer":"controls.filter.filters.imgly_lut_summer","pesdk.filter.asset.imgly_lut_sunset":"controls.filter.filters.imgly_lut_sunset","pesdk.filter.asset.imgly_lut_tender":"controls.filter.filters.imgly_lut_tender","pesdk.filter.asset.imgly_lut_texas":"controls.filter.filters.imgly_lut_texas","pesdk.filter.asset.imgly_lut_twilight":"controls.filter.filters.imgly_lut_twilight","pesdk.filter.asset.imgly_lut_winter":"controls.filter.filters.imgly_lut_winter","pesdk.filter.asset.imgly_lut_x400":"controls.filter.filters.imgly_lut_x400","pesdk.filter.text.intensity":"controls.filter.intensity","pesdk.filter.title.name":"controls.overview.filters","pesdk.focus.button.mirrored":"controls.focus.mirrored","pesdk.focus.button.none":"controls.focus.none","pesdk.focus.button.radial":"controls.focus.radial","pesdk.focus.text.blurRadius":"controls.focus.blurRadius","pesdk.focus.title.name":"controls.overview.focus","pesdk.frame.asset.imgly_frame_art_decor":"controls.frame.frames.imgly_frame_art_decor","pesdk.frame.asset.imgly_frame_black_passepartout":"controls.frame.frames.imgly_frame_black_passepartout","pesdk.frame.asset.imgly_frame_dia":"controls.frame.frames.imgly_frame_dia","pesdk.frame.asset.imgly_frame_lowpoly_shadow":"controls.frame.frames.imgly_frame_lowpoly_shadow","pesdk.frame.asset.imgly_frame_wood_passepartout":"controls.frame.frames.imgly_frame_wood_passepartout","pesdk.frame.button.none":"controls.frame.noFrame","pesdk.frame.text.scale":"controls.frame.scale","pesdk.frame.title.name":"controls.overview.frame","pesdk.library.placeholder.search":"photoRoll.search.placeholder","pesdk.library.text.noSearchResults":"photoRoll.search.noSearchResults","pesdk.library.text.photoRollLoadFail":"errors.photoRollLoadFail.text","pesdk.library.title.photoRollLoadFail":"errors.photoRollLoadFail.title","pesdk.library.title.seachResults":"photoRoll.search.results.headline","pesdk.splash.button.upload":"splash.upload.button","pesdk.splash.text.photoRoll":"splash.photoRoll.description","pesdk.splash.text.upload":"splash.upload.description","pesdk.splash.text.webcam":"splash.webcam.description","pesdk.splash.title.photoRoll":"splash.photoRoll.headline","pesdk.splash.title.webcam":"splash.webcam.headline","pesdk.sticker.asset.imgly_sticker_emoticons":"controls.sticker.categories.imgly_sticker_emoticons","pesdk.sticker.asset.imgly_sticker_shapes":"controls.sticker.categories.imgly_sticker_shapes","pesdk.sticker.title.loadingStickersFailed":"errors.loadingStickersFailed.title","pesdk.sticker.title.name":"controls.overview.sticker","pesdk.text.button.alignment":"controls.text.alignment","pesdk.text.button.background":"controls.text.background","pesdk.text.button.font":"controls.text.font","pesdk.text.button.foreground":"controls.text.foreground","pesdk.text.button.size":"controls.text.size","pesdk.text.button.takeToFront":"controls.text.takeToFront","pesdk.text.placeholder.defaultText":"controls.text.defaultText","pesdk.text.text.loadingFontsFailed":"errors.loadingFontsFailed.text","pesdk.text.title.loadingFontsFailed":"errors.loadingFontsFailed.title","pesdk.text.title.name":"controls.overview.text","pesdk.transform.asset.imgly_transform_common_16-9":"controls.transform.ratios.imgly_transform_common_16-9","pesdk.transform.asset.imgly_transform_common_4-3":"controls.transform.ratios.imgly_transform_common_4-3","pesdk.transform.asset.imgly_transform_common_custom":"controls.transform.ratios.imgly_transform_common_custom","pesdk.transform.asset.imgly_transform_common_square":"controls.transform.ratios.imgly_transform_common_square","pesdk.transform.asset.imgly_transform_facebook_ad":"controls.transform.ratios.imgly_transform_facebook_ad","pesdk.transform.asset.imgly_transform_facebook_cover":"controls.transform.ratios.imgly_transform_facebook_cover","pesdk.transform.asset.imgly_transform_facebook_post":"controls.transform.ratios.imgly_transform_facebook_post","pesdk.transform.asset.imgly_transform_facebook_profile":"controls.transform.ratios.imgly_transform_facebook_profile","pesdk.transform.button.none":"controls.transform.none","pesdk.transform.text.rotation":"controls.transform.rotation","pesdk.transform.title.name":"controls.overview.transform"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(7),o=(r=i)&&r.__esModule?r:{default:r};t.default={EVENTS:{RENDER:"render",EXPORT:"export",EDITOR_READY:"editor:ready",CLOSE:"close",ZOOM_DONE:"zoom:done",OPERATION_CREATED:"operation:created",OPERATION_UPDATED:"operation:updated",OPERATION_REMOVED:"operation:removed",FEATURES_DISABLED:"editor:features:disabled",FEATURES_ENABLED:"editor:features:enabled",FEATURES_UPDATED:"editor:features:updated",COLORPICKER_OPEN:"colorpicker:open",HISTORY_UPDATED:"history:update",HISTORY_BEFORE_UNDO:"history:before_undo",HISTORY_UNDO:"history:undo",WINDOW_RESIZE:"window:resize",CONTROLS_SWITCHED:"controls:switched",TRANSFORM_REAPPLY_RATIO:"transform:reapply_ratio"},DEFAULTS:{TRANSFORM_RATIOS:[[{identifier:"imgly_transform_common_custom",defaultName:"Custom",ratio:"*",selected:!0},{identifier:"imgly_transform_common_square",defaultName:"Square",ratio:1},{identifier:"imgly_transform_common_4-3",defaultName:"4:3",ratio:1.33},{identifier:"imgly_transform_common_16-9",defaultName:"16:9",ratio:1.77}],[{identifier:"imgly_transform_facebook_profile",defaultName:"FB Profile",ratio:1},{identifier:"imgly_transform_facebook_ad",defaultName:"FB Ad",dimensions:new o.default.Math.Vector2(1200,627)},{identifier:"imgly_transform_facebook_post",defaultName:"FB Post",dimensions:new o.default.Math.Vector2(940,788)},{identifier:"imgly_transform_facebook_cover",defaultName:"FB Cover",dimensions:new o.default.Math.Vector2(851,315)}]],BRUSHES:[o.default.Operations.SpriteOperation.BrushSprite.Brushes.RadialBrush],FONTS:[{fontFamily:"Aleo",variations:[{identifier:"imgly_font_aleo_bold",fontWeight:"bold",provider:"file",filePath:"fonts/imgly_font_aleo_bold.woff",textMetrics:{unitsPerEm:2048,ascender:1919,descender:-409}}]},{fontFamily:"Amatic SC",variations:[{identifier:"imgly_font_amaticsc",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_amaticsc.woff",textMetrics:{unitsPerEm:2048,ascender:2332,descender:-583}}]},{fontFamily:"Bernier",variations:[{identifier:"imgly_font_bernier_regular",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_bernier_regular.woff",textMetrics:{unitsPerEm:2048,ascender:2007,descender:-552}}]},{fontFamily:"Cheque",variations:[{identifier:"imgly_font_cheque_regular",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_cheque_regular.woff",textMetrics:{unitsPerEm:2048,ascender:1853,descender:-495}}]},{fontFamily:"Open Sans",variations:[{identifier:"imgly_font_open_sans_bold",fontWeight:"bold",provider:"file",filePath:"fonts/imgly_font_open_sans_bold.woff",default:!0,textMetrics:{unitsPerEm:2048,ascender:2189,descender:-640}}]},{fontFamily:"Gagalin",variations:[{identifier:"imgly_font_gagalin_regular",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_gagalin_regular.woff",textMetrics:{unitsPerEm:2048,ascender:1987,descender:-628}}]},{fontFamily:"Hagin",variations:[{identifier:"imgly_font_hagin_caps_thin",fontWeight:200,provider:"file",filePath:"fonts/imgly_font_hagin_caps_thin.woff",textMetrics:{unitsPerEm:2048,ascender:1964,descender:-482}}]},{fontFamily:"Intro",variations:[{identifier:"imgly_font_intro_inline",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_intro_inline.woff",textMetrics:{unitsPerEm:2048,ascender:1944,descender:-548}}]},{fontFamily:"Lobster",variations:[{identifier:"imgly_font_lobster",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_lobster.woff",textMetrics:{unitsPerEm:2048,ascender:2048,descender:-552}}]},{fontFamily:"Nexa",variations:[{identifier:"imgly_font_nexa_script",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_nexa_script.woff",textMetrics:{unitsPerEm:2048,ascender:1835,descender:-663}}]},{fontFamily:"Ostrich",variations:[{identifier:"imgly_font_ostrich_sans_black",fontWeight:800,provider:"file",filePath:"fonts/imgly_font_ostrich_sans_black.woff",textMetrics:{unitsPerEm:2048,ascender:1513,descender:-235}},{identifier:"imgly_font_ostrich_sans_bold",fontWeight:"bold",provider:"file",filePath:"fonts/imgly_font_ostrich_sans_bold.woff",textMetrics:{unitsPerEm:2048,ascender:1513,descender:-235}}]},{fontFamily:"Panton",variations:[{identifier:"imgly_font_panton_black_italic_caps",fontWeight:800,fontStyle:"italic",provider:"file",filePath:"fonts/imgly_font_panton_blackitalic_caps.woff",textMetrics:{unitsPerEm:2048,ascender:2033,descender:-572}},{identifier:"imgly_font_panton_light_italic_caps",fontWeight:200,fontStyle:"italic",provider:"file",filePath:"fonts/imgly_font_panton_lightitalic_caps.woff",textMetrics:{unitsPerEm:2048,ascender:1961,descender:-556}}]},{fontFamily:"Perfograma",variations:[{identifier:"imgly_font_perfograma",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_perfograma.woff",textMetrics:{unitsPerEm:2048,ascender:1982,descender:-842}}]},{fontFamily:"Trashhand",variations:[{identifier:"imgly_font_trash_hand",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_trash_hand.woff",textMetrics:{unitsPerEm:2048,ascender:1554,descender:-663}}]}]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(7),s=(r=a)&&r.__esModule?r:{default:r};var l=s.default.EventEmitter,c=s.default.Utils,u=s.default.Log,f=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n._state=e,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l),o(t,[{key:"set",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];"object"!==(void 0===e?"undefined":i(e))&&u.warn("SharedState#set expects an object as first parameter");var n=c.extend({},this._state);this._state=c.extend(this._state,e),t&&this.broadcastUpdate(n,this._state)}},{key:"get",value:function(e){return this._state[e]}},{key:"broadcastUpdate",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.emit("update",e,t)}},{key:"clear",value:function(){this._state={}}}]),t}();t.default=f},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});for(
/*
 * http://paulirish.com/2011/requestanimationframe-for-smart-animating/
 * http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
 * requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel
 * MIT license
 * @license
 */
var n="undefined"==typeof window?e:window,r=n.requestAnimationFrame,i=n.cancelAnimationFrame,o=0,a=["ms","moz","webkit","o"],s=0;s<a.length&&!r;++s)t.requestAnimationFrame=r=n[a[s]+"RequestAnimationFrame"],t.cancelAnimationFrame=i=n[a[s]+"CancelAnimationFrame"]||n[a[s]+"CancelRequestAnimationFrame"];r&&(t.requestAnimationFrame=r=r.bind(n)),i&&(t.cancelAnimationFrame=i=i.bind(n)),r||(t.requestAnimationFrame=r=function(e,t){var n=(new Date).getTime(),r=Math.max(0,16-(n-o)),i=setTimeout(function(){e(n+r)},r);return o=n+r,i}),i||(t.cancelAnimationFrame=i=function(e){clearTimeout(e)}),t.requestAnimationFrame=r,t.cancelAnimationFrame=i}).call(t,n(8))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=d(n(88)),a=d(n(90)),s=d(n(97)),l=d(n(107)),c=d(n(110)),u=d(n(9)),f=d(n(191)),p=d(n(1));function d(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),f=0;f<n;f++)r[f]=arguments[f];var p=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));p._onScreenMounted=function(e,t){p._screenElements[e+"Screen"]=t,"editor"!==e||p._isReady||(p._isReady=!0,p.props.mediator.emit(i.Constants.EVENTS.EDITOR_READY))},p._screens={loading:o.default,splash:a.default,photoRoll:s.default,webcam:l.default,editor:c.default,empty:u.default};var d,h,_,m=void 0;return p.props.options.preloader&&(m="loading"),p._screenAfterLoading="splash",p.props.options.editor.image&&(p._screenAfterLoading="editor"),m||(m=p._screenAfterLoading),p._screenElements={},p._isReady=!1,p._previousScreensStack=[],p.state={activeScreen:p._screens[m],activeScreenName:m,screens:(d={},h=m,_=p._screens[m],h in d?Object.defineProperty(d,h,{value:_,enumerable:!0,configurable:!0,writable:!0}):d[h]=_,d)},p}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.React.Component),r(t,[{key:"hasPreviousScreen",value:function(){return!!this._previousScreensStack.length}},{key:"getPreviousScreen",value:function(){var e=this._previousScreensStack;return e[e.length-1]}},{key:"switchToScreen",value:function(e){var t=this,n=null;if("back"===e){if(!(n=this._previousScreensStack.pop()))throw new Error("Unable to switch to previous screen - no previous screen found.")}else{if("post-loading"===e&&(e=this._screenAfterLoading),!(n=this._screens[e]))throw new Error("Unknown screen `"+e+"`");this._previousScreensStack.push(this.state.activeScreen)}return this.state.screens[e]||(this.state.screens[e]=n),"editor"!==this.state.activeScreenName&&delete this.state.screens[this.state.activeScreenName],new i.Promise(function(r){t.setState({activeScreen:n,activeScreenName:e},function(){r()})})}},{key:"setImage",value:function(e,t){var n=this;this.props.options.editor.image=e;var r=!this._screenElements.editorScreen;this.switchToScreen("editor").then(function(){r||n._screenElements.editorScreen.setImage(e,t)})}},{key:"export",value:function(){return this.state.activeScreen!==this._screens.editor?i.Promise.reject(new Error("Unable to export: Active screen is not the editor screen.")):this.state.screens.editor?(e=this._screenElements.editorScreen).export.apply(e,arguments):void 0;var e}},{key:"getEditor",value:function(){return this.state.activeScreen!==this._screens.editor?i.Promise.reject(new Error("Unable to get editor: Active screen is not the editor screen.")):this.state.screens.editor?this._screenElements.editorScreen.getEditor():void 0}},{key:"serialize",value:function(){var e;return this.state.screens.editor?(e=this._screenElements.editorScreen).serialize.apply(e,arguments):i.Promise.reject(new Error("Editor screen unavailable"))}},{key:"deserialize",value:function(e){return this.state.screens.editor?this._screenElements.editorScreen.deserialize(e):i.Promise.reject(new Error("Editor screen unavailable"))}},{key:"getChildContext",value:function(){return{ui:this.props.ui,options:this.props.options,mediator:this.props.mediator,globalState:this.props.globalState}}},{key:"_renderScreens",value:function(){var e=this,t=[],n=function(n){var r=e.state.screens[n],o=e.state.activeScreen===r;t.push(i.ReactBEM.createElement(r,{ref:function(t){return e._onScreenMounted(n,t)},app:e,visible:o}))};for(var r in this.state.screens)n(r);return t}},{key:"render",value:function(){return i.ReactBEM.transform(i.ReactBEM.createElement("div",{bem:"b:editor"},i.ReactBEM.createElement(f.default,{modalManager:p.default.instance}),this._renderScreens()))}}]),t}();t.default=h,h.childContextTypes={ui:i.PropTypes.object.isRequired,mediator:i.PropTypes.object.isRequired,options:i.PropTypes.object.isRequired,globalState:i.PropTypes.object.isRequired},h.propTypes={ui:i.PropTypes.object.isRequired,mediator:i.PropTypes.object.isRequired,options:i.PropTypes.object.isRequired,globalState:i.PropTypes.object.isRequired}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},a=n(0),s=n(9),l=(r=s)&&r.__esModule?r:{default:r};var c=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o.state={progress:0},o._preloader=o.context.ui.getPreloader(),o._preloader.on("progress",function(e){o.state.progress=e}),o._preloader.on("done",function(){o.props.app.switchToScreen("post-loading")}),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default),i(t,[{key:"componentDidMount",value:function(){var e=this;o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this);var n=window.devicePixelRatio;this._canvas=this.refs.canvas,this._canvas.width=this._canvas.offsetWidth*n,this._canvas.height=this._canvas.offsetHeight*n,this._context=this._canvas.getContext("2d"),this._preloaderImage=new window.Image,this._preloaderImage.addEventListener("load",function(){e._preloader.load(),(0,a.requestAnimationFrame)(e._tick)}),this._preloaderImage.crossOrigin="Anonymous",this._preloaderImage.src=this.context.ui.getAssetPath("preloader.png",!0),this._running=!0,this._tick=this._tick.bind(this)}},{key:"componentWillUnmount",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentWillUnmount",this).call(this),this._running=!1}},{key:"_tick",value:function(){this._renderLoadingIndicator(),this._running&&(0,a.requestAnimationFrame)(this._tick)}},{key:"_renderLoadingIndicator",value:function(){var e=this._canvas,t=e.width,n=e.height,r=this._context;r.clearRect(0,0,t,n),r.save(),r.beginPath(),r.moveTo(t/2,n/2),r.arc(t/2,n/2,t/2,.5*-Math.PI,2*Math.PI*this.state.progress-.5*Math.PI,!1),r.lineTo(t/2,n/2),r.clip(),r.drawImage(this._preloaderImage,0,0,this._preloaderImage.width,this._preloaderImage.height,0,0,t,n),r.restore(),r.save(),r.globalAlpha=.05,r.drawImage(this._preloaderImage,0,0,this._preloaderImage.width,this._preloaderImage.height,0,0,t,n),r.restore()}},{key:"_renderScreen",value:function(){return a.ReactBEM.createElement("div",{bem:"$b:loadingScreen"},a.ReactBEM.createElement("div",{bem:"e:container"},a.ReactBEM.createElement("canvas",{bem:"e:canvas",ref:"canvas"})))}}]),t}();t.default=c,c.contextTypes=a.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onCloseClick"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onCloseClick",value:function(){this.context.mediator.emit(i.Constants.EVENTS.CLOSE)}},{key:"renderWithBEM",value:function(){var e=void 0;return this.context.options.showCloseButton&&(e=i.ReactBEM.createElement("div",{bem:"$e:close",onClick:this._onCloseClick},i.ReactBEM.createElement("img",{bem:"e:image",src:this._getAssetPath("close.png",!0)}))),i.ReactBEM.createElement("div",{bem:"$b:header"},i.ReactBEM.createElement("div",{bem:"e:label"},this.context.options.title),e)}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=c(n(9)),a=c(n(91)),s=c(n(95)),l=c(n(96));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._bindAll("_onWebcamClick","_onPhotoRollClick","_onImage"),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_onPhotoRollClick",value:function(){this.props.app.switchToScreen("photoRoll")}},{key:"_onWebcamClick",value:function(){this.props.app.switchToScreen("webcam")}},{key:"_onImage",value:function(e){this.props.app.setImage(e)}},{key:"_isWebcamAvailable",value:function(){return!i.Utils.isMobile()&&!1!==this.context.options.enableWebcam}},{key:"_isPhotoRollAvailable",value:function(){return!!this.context.options.photoRoll.provider}},{key:"_renderScreen",value:function(){var e=[],t=0,n=this.context.options.enableUpload;n&&t++;var r=this._isWebcamAvailable();r&&t++;var o=this._isPhotoRollAvailable();return o&&t++,n&&e.push(i.ReactBEM.createElement(a.default,{onImage:this._onImage,totalRows:t})),r&&e.push(i.ReactBEM.createElement(s.default,{onClick:this._onWebcamClick,totalRows:t})),o&&e.push(i.ReactBEM.createElement(l.default,{onClick:this._onPhotoRollClick,totalRows:t})),i.ReactBEM.createElement("div",{bem:"$b:splashScreen"},i.ReactBEM.createElement("div",{bem:"e:container"},e))}}]),t}();t.default=u,u.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=u(n(1)),s=u(n(24)),l=u(n(92)),c=u(n(25));function u(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._modifier="upload",e._bindAll("_onImage","_onDragEnter","_onDragOver","_onDragLeave","_onDrop"),e._dragCounter=0,e.state={dragAreaHovered:!1},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default),i(t,[{key:"_onDragEnter",value:function(e){e.preventDefault(),this._dragCounter++,this.setState({dragAreaHovered:!0})}},{key:"_onDragOver",value:function(e){e.preventDefault()}},{key:"_onDragLeave",value:function(e){e.preventDefault(),this._dragCounter--,0===this._dragCounter&&this.setState({dragAreaHovered:!1})}},{key:"_onDrop",value:function(e){var t=this;e.stopPropagation(),e.preventDefault(),(e=e.nativeEvent).returnValue=!1,this.setState({dragAreaHovered:!1},function(){if(e.dataTransfer)return e.dataTransfer.files[0].type.match(/^image\//i)?void t._handleFile(e.dataTransfer.files[0]):a.default.instance.displayError(t._t("pesdk.common.title.error"),t._t("pesdk.editor.text.invalidFileType",{fileType:e.dataTransfer.files[0].type}))})}},{key:"_onClick",value:function(e){this.refs.upload.open()}},{key:"_handleFile",value:function(e){var t=this,n=new window.FileReader;n.onload=function(e){var n=e.target.result,r=new window.Image;r.addEventListener("load",function(){t._onImage(r)}),r.src=n},n.readAsDataURL(e)}},{key:"_onImage",value:function(e){this.props.onImage&&this.props.onImage(e)}},{key:"_renderContent",value:function(){var e={onDragEnter:this._onDragEnter,onDragOver:this._onDragOver,onDragLeave:this._onDragLeave,onDrop:this._onDrop};this.state.dragAreaHovered&&(e.className="is-hovered");var t="e:contentCell";return!1===this.context.options.enableWebcam&&null===this.context.options.photoRoll.provider||(t+=" m:withBorder"),o.ReactBEM.createElement("div",{bem:"e:contentWrapper"},o.ReactBEM.createElement("div",{bem:"e:contentRow"},o.ReactBEM.createElement("div",r({bem:t,onClick:this._onClick},e),o.ReactBEM.createElement(c.default,{ref:"upload",onNewFile:this._onImage}),o.ReactBEM.createElement(l.default,{bem:"e:button",uppercase:!0},this._t("pesdk.splash.button.upload")),o.ReactBEM.createElement("div",{bem:"e:description"},this._t("pesdk.splash.text.upload")))))}}]),t}();t.default=f,f.propTypes={onImage:o.PropTypes.func.isRequired},f.contextTypes=s.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"renderWithBEM",value:function(){var e="b:button";return this.props.uppercase&&(e+=" m:uppercase"),i.ReactBEM.createElement("button",{bem:e,className:this.props.className,onClick:this.props.onClick},this.props.children)}}]),t}();t.default=o,o.propTypes={onClick:i.PropTypes.func,children:i.PropTypes.any.isRequired,className:i.PropTypes.string},o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(94),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n._input=e,n._onFileChange=n._onFileChange.bind(n),n._input.addEventListener("change",n._onFileChange),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.EventEmitter),i(t,[{key:"open",value:function(){this._input.value=null,this._input.click()}},{key:"_handleFile",value:function(e){var t=this,n=new window.FileReader;n.onload=function(e){var n=e.target.result,r=new window.Image;r.addEventListener("load",function(){t.emit("file",r)}),r.addEventListener("error",function(e){return s.default.instance.displayError(t._t("errors.title"),t._t("errors.imageLoadingError.text"))}),r.src=n},n.readAsDataURL(e)}},{key:"_onFileChange",value:function(){var e=this._input.files;e.length&&this._handleFile(e[0])}},{key:"dispose",value:function(){this._input.removeEventListener("change",this._onFileChange)}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var l=function(e){function t(e,n,r){var s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],l=arguments.length>4&&void 0!==arguments[4]&&arguments[4];o(this,t);var c=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return c.id=i.SDKUtils.getUUID(),c.type=e,c.title=n,c.text=r,c.overlay=s,c.closeOnOverlayClick=l,c.visible=!0,c.data=null,c}return s(t,i.EventEmitter),r(t,[{key:"setData",value:function(e){this.data=e,this.emit("update")}},{key:"close",value:function(){this.visible=!1,this.emit("close")}},{key:"remove",value:function(){this.emit("remove")}}]),t}(),c=function(e){function t(){o(this,t);var e=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._modals=[],e}return s(t,i.EventEmitter),r(t,[{key:"displayLoading",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=new l("loading",e,null,t);return this.addModal(n),n}},{key:"displayProgress",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=new l("progress",null,e);return n.setData({progress:t}),this.addModal(n),n}},{key:"displayInput",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=new l("input",e,null,n,!0);return r.setData({text:t}),this.addModal(r),r}},{key:"displayWarning",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:["OK"],r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=new l("warning",e,t,r);return i.setData({buttons:n}),this.addModal(i),i}},{key:"displayError",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=new l("error",e,t,n);return this.addModal(r),r}},{key:"addModal",value:function(e){var t=this;this._modals.push(e),e.on("close",function(){t.emit("update")}),e.on("remove",function(){t.removeModal(e)}),e.on("update",function(){t.emit("update")}),this.emit("update")}},{key:"removeModal",value:function(e){var t=this._modals.indexOf(e);this._modals.splice(t,1),this.emit("update")}},{key:"getModals",value:function(){return this._modals}}],[{key:"instance",get:function(){return this._instance||(this._instance=new t),this._instance}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(24),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._needsStyleFixes=!0,o._modifier="webcam",o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default),i(t,[{key:"fixStyles",value:function(){if(o.Utils.Browser.isIElte(11)){var e=this.refs,t=e.cell,n=e.overlay,r=t.offsetHeight;n.style.height=r+"px"}}},{key:"_renderContent",value:function(){var e={backgroundImage:"url("+this._getAssetPath("splash/webcam.png",!0,!0)+")"};return o.ReactBEM.createElement("div",{bem:"e:contentWrapper"},o.ReactBEM.createElement("div",{bem:"e:contentRow"},o.ReactBEM.createElement("div",{bem:"e:contentCell",onClick:this._onClick,style:e,ref:"cell"},o.ReactBEM.createElement("div",{bem:"e:overlay",ref:"overlay"}),o.ReactBEM.createElement("div",{bem:"e:headline"},this._t("pesdk.splash.title.webcam")),o.ReactBEM.createElement("div",{bem:"e:description"},this._t("pesdk.splash.text.webcam")))))}}]),t}();t.default=l,l.contextTypes=s.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(24),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._needsStyleFixes=!0,o._modifier="photoRoll",o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default),i(t,[{key:"fixStyles",value:function(){if(o.Utils.Browser.isIElte(11)){var e=this.refs,t=e.cell,n=e.overlay,r=t.offsetHeight;n.style.height=r+"px"}}},{key:"_renderContent",value:function(){var e={backgroundImage:"url("+this._getAssetPath("splash/photo-roll.png",!0,!0)+")"};return o.ReactBEM.createElement("div",{bem:"e:contentWrapper"},o.ReactBEM.createElement("div",{bem:"e:contentRow"},o.ReactBEM.createElement("div",{bem:"e:contentCell",onClick:this._onClick,style:e,ref:"cell"},o.ReactBEM.createElement("div",{bem:"e:overlay",ref:"overlay"}),o.ReactBEM.createElement("div",{bem:"e:headline"},this._t("pesdk.splash.title.photoRoll")),o.ReactBEM.createElement("div",{bem:"e:description"},this._t("pesdk.splash.text.photoRoll")))))}}]),t}();t.default=l,l.contextTypes=s.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=f(n(9)),a=f(n(98)),s=f(n(102)),l=f(n(41)),c=f(n(105)),u=f(n(1));function f(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o.state={section:"overview",sectionsHistory:[]},o._bindAll("_onLibraryClicked","_onSearchSuggestionClicked","_onPhotoClicked","_onFileUpload","_onWebcamClick","_onBackClicked","_onSearch"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"hasPreviousSection",value:function(){return!!this.state.sectionsHistory.length}},{key:"switchToSection",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if("back"===e){if(!this.hasPreviousSection())return t?this.props.app.switchToScreen("back"):this.switchToSection("overview");e=this.state.sectionsHistory.pop()}else this.state.section!==e&&n&&this.state.sectionsHistory.push(this.state.section);this.setState({section:e})}},{key:"_onLibraryClicked",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.state.library=e,this.switchToSection("library",!0,!t)}},{key:"_onSearchSuggestionClicked",value:function(e){this.state.searchQuery=e.query,this.switchToSection("search")}},{key:"_onPhotoClicked",value:function(e){var t=this,n=u.default.instance.displayLoading(this._t("pesdk.common.text.loading")),r=new window.Image;r.addEventListener("load",function(){n.close(),t.props.app.setImage(r,!0)}),r.addEventListener("error",function(){n.close(),u.default.instance.displayError(t._t("pesdk.common.title.imageLoadFail"),t._t("pesdk.common.text.imageLoadFail",{path:r.src}))}),r.crossOrigin=i.SDKUtils.getCrossOriginValue(this.context.options.crossOrigin),r.src=e.urls.raw}},{key:"_onBackClicked",value:function(){this.switchToSection("back")}},{key:"_onSearch",value:function(e){if(!e.trim().length)return this.state.searchQuery=null,this.switchToSection("back",!1);this.state.searchQuery=e,this.switchToSection("search")}},{key:"_onWebcamClick",value:function(){this.props.app.switchToScreen("webcam")}},{key:"_onFileUpload",value:function(e){this.props.app.setImage(e)}},{key:"_isBackButtonVisible",value:function(){return 0!==this.state.sectionsHistory.length||this.props.app.hasPreviousScreen()}},{key:"_renderContent",value:function(){switch(this.state.section){case"search":return i.ReactBEM.createElement(c.default,{query:this.state.searchQuery,onPhotoClicked:this._onPhotoClicked,onSearchSuggestionClicked:this._onSearchSuggestionClicked});case"library":return i.ReactBEM.createElement(l.default,{crossOrigin:i.SDKUtils.getCrossOriginValue(this.context.options.crossOrigin),library:this.state.library,onPhotoClicked:this._onPhotoClicked});case"overview":return i.ReactBEM.createElement(s.default,{onLibraryClicked:this._onLibraryClicked,onSearchSuggestionClicked:this._onSearchSuggestionClicked})}}},{key:"_renderScreen",value:function(){var e=this._renderContent();return i.ReactBEM.createElement("div",{bem:"$b:photoRollScreen"},i.ReactBEM.createElement(a.default,{onBackClicked:this._onBackClicked,onSearch:this._onSearch,searchQuery:this.state.searchQuery,onFileUpload:this._onFileUpload,onWebcamClick:this._onWebcamClick,backButton:this._isBackButtonVisible(),backButtonLabel:this._t("pesdk.common.button.back"),ref:"topBarControls"}),e)}}]),t}();t.default=p,p.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=u(n(12)),a=u(n(99)),s=u(n(25)),l=u(n(100)),c=u(n(101));function u(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return a._bindAll("_onUploadButtonClicked","_onWebcamButtonClicked","_onBackClicked","_onSearchValueChange","_onNewFile"),a._onSearchValueChange=i.Utils.debounce(a._onSearchValueChange,250),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_onBackClicked",value:function(){this.props.onBackClicked&&this.props.onBackClicked()}},{key:"_onSearchValueChange",value:function(e){this.props.onSearch&&this.props.onSearch(e)}},{key:"_onUploadButtonClicked",value:function(){this.refs.upload.open()}},{key:"_onWebcamButtonClicked",value:function(){this.props.onWebcamClick&&this.props.onWebcamClick()}},{key:"_onNewFile",value:function(e){this.props.onFileUpload&&this.props.onFileUpload(e)}},{key:"_isWebcamAvailable",value:function(){return!i.Utils.isMobile()&&!1!==this.context.options.enableWebcam}},{key:"_renderRightButtons",value:function(){var e=[];return this.context.options.enableUpload&&e.push(i.ReactBEM.createElement(a.default,{icon:this._getAssetPath("photo-roll/upload.png",!0),onClick:this._onUploadButtonClicked})),this._isWebcamAvailable()&&e.push(i.ReactBEM.createElement(a.default,{icon:this._getAssetPath("photo-roll/webcam.png",!0),onClick:this._onWebcamButtonClicked})),e}},{key:"renderWithBEM",value:function(){var e=void 0;return this.props.backButton&&(e=i.ReactBEM.createElement(c.default,{label:this.props.backButtonLabel,onClick:this._onBackClicked})),i.ReactBEM.createElement("div",{bem:"$b:topBar e:row"},i.ReactBEM.createElement("div",{bem:"e:cell"},i.ReactBEM.createElement("div",{bem:"e:table"},i.ReactBEM.createElement("div",{bem:"e:cell m:left"},e),i.ReactBEM.createElement("div",{bem:"e:cell m:fullWidth"},i.ReactBEM.createElement(l.default,{searchQuery:this.props.searchQuery,onChange:this._onSearchValueChange}),i.ReactBEM.createElement(s.default,{onNewFile:this._onNewFile,ref:"upload"})),i.ReactBEM.createElement("div",{bem:"e:cell m:right"},this._renderRightButtons()))))}}]),t}();t.default=f,f.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("bem",{specifier:"$b:topBar"},i.ReactBEM.createElement("div",{bem:"$e:iconButton",onClick:this.props.onClick},i.ReactBEM.createElement("img",{bem:"e:icon",src:this.props.icon})))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onFocus","_onBlur","_onChange","_onBarClick"),o.state={active:!1,placeholder:o._t("pesdk.library.placeholder.search"),value:o.props.searchQuery||""},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"componentWillReceiveProps",value:function(e){e.searchQuery||this.state.value?this.state.active=!0:this.state.active=!1,this.setState({value:e.searchQuery||""})}},{key:"componentDidUpdate",value:function(){this.refs.input.value=this.state.value}},{key:"componentDidMount",value:function(){var e=this;(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._hiddenInputDummy=document.createElement("div");var n=i.Utils.getStyleObject(this.refs.input);["font","lineHeight","textAlign","textIndent","textTransform","textDecoration","textRendering","textShadow","textOverflow","wordSpacing","letterSpacing","whiteSpace"].forEach(function(t){e._hiddenInputDummy.style[t]=n[t]}),this._hiddenInputDummy.style.position="absolute",this._hiddenInputDummy.style.top="-9999px",this._hiddenInputDummy.style.left="-9999px",this.refs.root.appendChild(this._hiddenInputDummy),this._updateInputWidth()}},{key:"_updateInputWidth",value:function(){var e=this;this._hiddenInputDummy.innerHTML=this.state.value||this.state.placeholder,setTimeout(function(){e.setState({inputWidth:e._hiddenInputDummy.offsetWidth+5})},0)}},{key:"_onBarClick",value:function(){this.refs.input.focus()}},{key:"_onFocus",value:function(){this.setState({active:!0})}},{key:"_onBlur",value:function(){""!==this.state.value||this.props.searchQuery||this.setState({active:!1})}},{key:"_onChange",value:function(e){this.state.value=e.target.value,this.forceUpdate(),this.props.onChange&&this.props.onChange(this.state.value)}},{key:"renderWithBEM",value:function(){var e="$e:searchBar",t="photo-roll/search-light.png";this.state.active&&(e+=" m:active",t="photo-roll/search-dark.png"),t=this._getAssetPath(t,!0);var n={width:this.state.inputWidth+"px"};return i.ReactBEM.createElement("bem",{specifier:"$b:photoRollScreen"},i.ReactBEM.createElement("div",{bem:e,ref:"root",onClick:this._onBarClick},i.ReactBEM.createElement("div",{bem:"e:content"},i.ReactBEM.createElement("div",{bem:"$e:icon"},i.ReactBEM.createElement("img",{src:t,bem:"e:image"})),i.ReactBEM.createElement("div",{bem:"e:inputContainer"},i.ReactBEM.createElement("input",{bem:"e:input",ref:"input",placeholder:this.state.placeholder,onBlur:this._onBlur,onFocus:this._onFocus,onChange:this._onChange,defaultValue:this.state.value,style:n})))))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("bem",{specifier:"$b:topBar"},i.ReactBEM.createElement("div",{bem:"$e:backButton",onClick:this.props.onClick},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("top-bar/back.png",!0)}),i.ReactBEM.createElement("div",{bem:"e:label"},this.props.label)))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=c(n(1)),s=c(n(103)),l=c(n(40));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));o._needsStyleFixes=!0,o.state={loading:!0,libraries:[],searchSuggestions:[]},o._bindAll("_onLibraryClick","_onSearchSuggestionClick");var a=o.context.options.photoRoll.provider;return o._provider=new a,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"fixStyles",value:function(){if(o.Utils.Browser.isIElte(11)){var e=this.refs,t=e.cell,n=e.container;if(!t||!n)return;var r=t.offsetHeight;n.style.height=r+"px"}}},{key:"componentDidMount",value:function(){var e=this;(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this);var n=a.default.instance.displayLoading(this._t("pesdk.common.text.loading"));this._load().then(function(t){var i=r(t,2),o=i[0],a=i[1];n.close(),1===o.length?e._onLibraryClick(o[0],!0):e.setState({loading:!1,libraries:o,searchSuggestions:a})})}},{key:"_onLibraryClick",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.props.onLibraryClicked&&this.props.onLibraryClicked(e,t)}},{key:"_onSearchSuggestionClick",value:function(e){this.props.onSearchSuggestionClicked&&this.props.onSearchSuggestionClicked(e)}},{key:"_load",value:function(){var e=[this._provider.getLibraries(),this._provider.getSearchSuggestions()];return o.Promise.all(e)}},{key:"_renderLibraries",value:function(){var e=this,t=this.state.libraries.map(function(t){return o.ReactBEM.createElement(s.default,{onClick:e._onLibraryClick,library:t})});return o.ReactBEM.createElement("li",{bem:"e:item"},o.ReactBEM.createElement("bem",{specifier:"b:photoRoll"},o.ReactBEM.createElement("div",{bem:"e:headline"},"Browse libraries"),o.ReactBEM.createElement("ul",{bem:"$e:libraryList"},t)))}},{key:"_renderSearchSuggestions",value:function(){var e=this;if(!this.state.searchSuggestions.length)return null;var t=this.state.searchSuggestions.map(function(t){return o.ReactBEM.createElement(l.default,{onClick:e._onSearchSuggestionClick,searchSuggestion:t})});return o.ReactBEM.createElement("li",{bem:"e:item"},o.ReactBEM.createElement("bem",{specifier:"b:photoRoll"},o.ReactBEM.createElement("div",{bem:"e:headline"},"Search suggestions"),o.ReactBEM.createElement("ul",{bem:"$e:libraryList"},t)))}},{key:"_renderContent",value:function(){return o.ReactBEM.createElement("div",{bem:"$b:photoRoll e:row m:fullHeight"},o.ReactBEM.createElement("div",{bem:"e:cell",ref:"cell"},o.ReactBEM.createElement("div",{bem:"e:container",ref:"container"},o.ReactBEM.createElement("div",{bem:"e:innerContainer"},o.ReactBEM.createElement("ul",{bem:"$e:groupList"},this._renderLibraries(),this._renderSearchSuggestions())))))}},{key:"renderWithBEM",value:function(){return this.state.loading?o.ReactBEM.createElement("div",null):this._renderContent()}}]),t}();t.default=u,u.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onClick"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onClick",value:function(){this.props.onClick&&this.props.onClick(this.props.library)}},{key:"renderWithBEM",value:function(){var e=this.props.library,t={backgroundImage:"url("+e.coverImage+")"};return i.ReactBEM.createElement("bem",{specifier:"b:photoRoll e:libraryList"},i.ReactBEM.createElement("li",{bem:"e:item",style:t,onClick:this._onClick},i.ReactBEM.createElement("div",{bem:"e:overlay"}),i.ReactBEM.createElement("div",{bem:"e:name"},e.name)))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"renderWithBEM",value:function(){var e=this.props.photo;return i.ReactBEM.createElement("bem",{specifier:"b:photoRoll e:photoList"},i.ReactBEM.createElement("li",{bem:"$e:item",onClick:this.props.onClick},i.ReactBEM.createElement("div",{bem:"e:overlay"}),i.ReactBEM.createElement("div",{bem:"e:title"},e.title),i.ReactBEM.createElement("img",{bem:"e:image",src:e.urls.thumb})))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=l(n(41)),a=l(n(106)),s=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"componentWillReceiveProps",value:function(e){e.query!==this.props.query&&this._loadPhotos(e.query)}},{key:"_getHeadline",value:function(){return this._t("pesdk.library.title.searchResults",{query:this.props.query})}},{key:"_loadPhotos",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props.query;this._totalPhotosHeight=0;var n=s.default.instance.displayProgress(this._t("pesdk.common.text.loading"));(new(0,this.context.options.photoRoll.provider)).searchPhotos(t).then(function(t){return e._preloadPhotos(t,n)}).then(function(t){e.setState({photos:t,loading:!1}),n.close()})}},{key:"_renderNotFound",value:function(){return i.ReactBEM.createElement(a.default,{query:this.props.query,onSearchSuggestionClicked:this.props.onSearchSuggestionClicked})}},{key:"renderWithBEM",value:function(){return this.state.loading?i.ReactBEM.createElement("div",null):0===this.state.photos.length?this._renderNotFound():this._renderPhotos()}}]),t}();t.default=c,c.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(40),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));o._bindAll("_onSearchSuggestionClick");var a=o.context.options.photoRoll.provider;return o._provider=new a,o.state={searchSuggestions:[]},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"_onSearchSuggestionClick",value:function(e){this.props.onSearchSuggestionClicked&&this.props.onSearchSuggestionClicked(e)}},{key:"componentDidMount",value:function(){var e=this;(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._provider.getSearchSuggestions().then(function(t){e.setState({searchSuggestions:t})})}},{key:"_renderMessage",value:function(){return{__html:this._t("pesdk.library.text.noSearchResults",{query:this.props.query})}}},{key:"_renderSearchSuggestions",value:function(){var e=this;if(!this.state.searchSuggestions.length)return null;var t=this.state.searchSuggestions.map(function(t){return o.ReactBEM.createElement(s.default,{onClick:e._onSearchSuggestionClick,searchSuggestion:t})});return o.ReactBEM.createElement("div",null,o.ReactBEM.createElement("div",{bem:"e:headline"},"Search suggestions"),o.ReactBEM.createElement("ul",{bem:"$e:libraryList"},t))}},{key:"renderWithBEM",value:function(){return o.ReactBEM.createElement("div",{bem:"$b:photoRoll e:row m:fullHeight"},o.ReactBEM.createElement("div",{bem:"e:cell"},o.ReactBEM.createElement("div",{bem:"e:container"},o.ReactBEM.createElement("div",{bem:"e:innerContainer"},o.ReactBEM.createElement("div",{bem:"e:noSearchResults",dangerouslySetInnerHTML:this._renderMessage()}),this._renderSearchSuggestions()))))}}]),t}();t.default=l,l.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=l(n(9)),a=l(n(12)),s=l(n(108));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._bindAll("_onCancel","_onWebcamReady","_onShutterClicked"),e.state={webcamReady:!1},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_onWebcamReady",value:function(){this.setState({webcamReady:!0})}},{key:"_onCancel",value:function(){this.props.app.switchToScreen("back")}},{key:"_onShutterClicked",value:function(){var e=this;this.refs.webcam.makePhoto().then(function(t){e.props.app.setImage(t)}).catch(function(e){i.Log.error(e)})}},{key:"_renderScreen",value:function(){return i.ReactBEM.createElement("div",{bem:"$b:webcamScreen"},i.ReactBEM.createElement(a.default,{label:this._t("pesdk.camera.title.headline")},i.ReactBEM.createElement("bem",{specifier:"$b:topBar"},i.ReactBEM.createElement("div",{bem:"e:cancelButton",onClick:this._onCancel},this._t("pesdk.common.button.cancel")),i.ReactBEM.createElement("div",{bem:"e:label"},this._t("pesdk.camera.title.headline")))),i.ReactBEM.createElement("div",{bem:"$b:canvas e:container e:row"},i.ReactBEM.createElement("div",{bem:"e:container e:cell"},i.ReactBEM.createElement(s.default,{ref:"webcam",onReady:this._onWebcamReady,onBack:this._onCancel}))),i.ReactBEM.createElement("div",{bem:"$b:controls $e:container e:row"},i.ReactBEM.createElement("div",{bem:"e:cell"},i.ReactBEM.createElement("bem",{specifier:"b:webcamScreen"},i.ReactBEM.createElement("div",{bem:"$e:shutterButton",onClick:this._onShutterClicked,className:!!this.state.webcamReady&&"is-active"},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/webcam/shutter.png",!0)}))))))}}]),t}();t.default=c,c.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(1)),a=s(n(109));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._bindAll("_onWebcamReady","_onWebcamError"),e.state={webcamReady:!1},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"shouldComponentUpdate",value:function(e,t){return!1}},{key:"_onWebcamReady",value:function(){this.props.onReady&&this.props.onReady(),this.setState({webcamReady:!0})}},{key:"_onWebcamError",value:function(e){var t=this;o.default.instance.displayError(this._t("pesdk.common.title.error"),this._t("pesdk.camera.text.webcamUnavailable",{error:e})).on("close",function(){return t.props.onBack()})}},{key:"makePhoto",value:function(){if(this.state.webcamReady)return this._webcam.capture()}},{key:"renderWithBEM",value:function(){var e=this;return i.ReactBEM.createElement("div",{bem:"$b:webcam",ref:"container"},i.ReactBEM.createElement(a.default,{flashURL:this._getAssetPath("fallback/webcam.swf"),ref:function(t){e._webcam=t},onWebcamError:this._onWebcamError,onWebcamAvailable:this._onWebcamReady}))}}]),t}();t.default=l,l.propTypes={onReady:i.PropTypes.func},l.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._bindAll("_onLoadedMetadata"),n.state={webcamAvailable:!1,useFlashFallback:!1,containerWidth:null,containerHeight:null},n._getUserMedia=null,n._webcamStream=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"componentDidMount",value:function(){var e=this;if(this._initGetUserMedia(),this._calculateFlashDimensions(),this._getUserMedia)this._getUserMedia({video:{optional:[{minWidth:320},{minWidth:640},{minWidth:1024},{minWidth:1280},{minWidth:1920},{minWidth:2560}]},audio:!1}).then(function(t){e._webcamStream=t;var n=e._videoElement;"srcObject"in n?n.srcObject=t:n.src=window.URL.createObjectURL(t)}).catch(function(t){e.props.onWebcamError&&e.props.onWebcamError(t)});else{var t=!1;window.Webcam||(window.Webcam={},t=!0),window.Webcam.flashNotify=function(n,r){switch(n){case"cameraLive":e.setState({webcamAvailable:!0},function(){e.props.onWebcamAvailable&&e.props.onWebcamAvailable()}),delete window.Webcam.flashNotify,t&&delete window.Webcam;break;case"error":e.props.onWebcamError&&e.props.onWebcamError(r),delete window.Webcam.flashNotify,t&&delete window.Webcam}}}}},{key:"componentWillUnmount",value:function(){this._disposeWebcam()}},{key:"_initGetUserMedia",value:function(){if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia&&(this._getUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices)),!this._getUserMedia){var e=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia;e&&(this._getUserMedia=function(t){return new Promise(function(n,r){return e.call(navigator,t,n,r)})})}this._getUserMedia||this.setState({useFlashFallback:!0})}},{key:"_disposeWebcam",value:function(){if(this._webcamStream){var e=this._webcamStream,t=e.getTracks()[0];t?t.stop():e.stop&&e.stop()}else this._flashWebcam&&this._flashWebcam._releaseCamera()}},{key:"capture",value:function(){var e=this;return this.state.webcamAvailable?this._videoElement&&!this._flashWebcam?new Promise(function(t,n){var r=e._videoElement;if(0===r.readyState)n(new Error("Webcam video not available"));else{var i=document.createElement("canvas");i.width=r.videoWidth,i.height=r.videoHeight,i.getContext("2d").drawImage(r,0,0);var o=new window.Image;o.addEventListener("load",function(){t(o)}),o.src=i.toDataURL("image/jpeg")}}):this._flashWebcam?new Promise(function(t,n){var r=e._flashWebcam._snap(),i=new Image;i.onload=function(){t(i)},i.src="data:image/jpeg;base64,"+r}):Promise.reject(new Error("Webcam video not available")):Promise.reject(new Error("Webcam video not available"))}},{key:"_getIEHeight",value:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:100,t=this._container,n=0;n<1e3&&!(t.clientHeight>e)&&t.parentNode;n++)t=t.parentNode;return t.clientHeight>e?t.clientHeight:null}},{key:"_calculateFlashDimensions",value:function(){var e=.9*(this._getIEHeight()||window.innerHeight),t=4/3*e||640,n=e||480;this.setState({containerWidth:t,containerHeight:n})}},{key:"_getFlashFallbackComponent",value:function(){var e=this,t=this.state.containerWidth||640,n=this.state.containerHeight||480,r="width="+t+"&height="+n+"&dest_width=1024&dest_height=768&jpeg_quality=100&fps=24";return React.createElement("object",{classID:"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000",type:"application/x-shockwave-flash",width:t,height:n,ref:function(t){e._flashWebcam=t},align:"middle"},React.createElement("param",{name:"wmode",value:"transparent"}),React.createElement("param",{name:"allowScriptAccess",value:"always"}),React.createElement("param",{name:"allowFullScreen",value:"false"}),React.createElement("param",{name:"movie",value:this.props.flashURL}),React.createElement("param",{name:"loop",value:"false"}),React.createElement("param",{name:"menu",value:"false"}),React.createElement("param",{name:"quality",value:"best"}),React.createElement("param",{name:"bgcolor",value:"#ffffff"}),React.createElement("param",{name:"flashvars",value:r}))}},{key:"_onLoadedMetadata",value:function(){var e=this;this.setState({webcamAvailable:!0},function(){e.props.onWebcamAvailable&&e.props.onWebcamAvailable()})}},{key:"render",value:function(){var e=this,t=this.state.useFlashFallback?this._getFlashFallbackComponent():React.createElement("video",{style:{width:"100%"},autoPlay:!0,ref:function(t){e._videoElement=t},onLoadedMetadata:this._onLoadedMetadata});return React.createElement("div",{style:{width:this.state.useFlashFallback?this.state.containerWidth:"100%",height:this.state.useFlashFallback?this.state.containerHeight:"100%",display:"block",margin:"auto",overflow:"hidden"},ref:function(t){e._container=t}},t)}}]),t}();t.default=o,o.propTypes={flashURL:i.PropTypes.string,onWebcamAvailable:i.PropTypes.func,onWebcamError:i.PropTypes.func}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=n(0),a=p(n(42)),s=p(n(9)),l=p(n(113)),c=p(n(1)),u=p(n(114)),f=p(n(43));function p(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var s=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return s._overviewControls=a.default,s._bindAll("switchToControls","_startEditor","_onWindowResize","_onWindowResizeDone","_onImageResize","_onNewImage","_onRenderError"),s._previousControlsStack=[],s.state={zoom:null,controls:u.default,dragEnabled:!0,sharedState:new o.SharedState},s._editor=new f.default(s.context.ui,s.context.options,s.context.mediator),s._editor.on("new-image",s._onNewImage),s._editor.on("ready",s._startEditor),s._editor.on("resize",s._onImageResize),s._editor.on("render-error",s._onRenderError),s._hasUsedForceCrop=!1,s._forceControls=s.context.options.editor.forceControls,s._forceControlIndex=0,s}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default),r(t,[{key:"componentDidMount",value:function(){var e=this;i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this);var n=this.context.options,r=this.context.options.editor,o=r.image,a=r.forceCrop;this.setImage(o),this._editor.render(),this._editor.on("ready",function(){a?e._switchToFroceCropControl():e._switchToNextForceControl()}),n.responsive&&window.addEventListener("resize",this._onWindowResize)}},{key:"componentWillUnmount",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentWillUnmount",this).call(this),this._editor.dispose(),this.context.options.responsive&&window.removeEventListener("resize",this._onWindowResize)}},{key:"_startEditor",value:function(){this._editor.start()}},{key:"_switchToFroceCropControl",value:function(){var e=this._editor.controls.getAvailable().transform;e&&(this.switchToControls(e,{},null,{forceCrop:!0,firstCrop:!0}),this._hasUsedForceCrop=!0)}},{key:"_switchToNextForceControl",value:function(){if(this._forceControlIndex<this._forceControls.length){var e=this._forceControls[this._forceControlIndex],t=e.control,n=e.options,r=this._editor.controls.getAvailable()[t],i=o.SDKUtils.defaults({forcedControl:!0},n);if(!r)throw new Error("Force controls: Could not find control with identifier `"+t+"`");this.switchToControls(r,{},null,i),this._forceControlIndex++}}},{key:"_onRenderError",value:function(e){c.default.instance.displayError(this._t("pesdk.editor.title.renderingError"),this._t("pesdk.editor.text.renderingError"),!0),o.Log.error(this.constructor.name,"An error occurred while rendering: "+e.message)}},{key:"_onNewImage",value:function(){this.switchToControls(u.default)}},{key:"_onImageResize",value:function(){var e=this,t=c.default.instance.displayLoading(this._t("pesdk.editor.text.resizing"));this._editor.once("resized",function(n){var r=n.dimensions,i=n.reason;t.close(),e.context.options.editor.displayResizeMessage&&c.default.instance.displayWarning(e._t("pesdk.editor.title.imageResized_"+i),e._t("pesdk.editor.text.imageResized_"+i,{maxMegaPixels:e._editor.getMaxMegapixels(),width:r.x,height:r.y}))})}},{key:"_onWindowResize",value:function(){this._resizeTimeout&&(window.clearTimeout(this._resizeTimeout),this._resizeTimeout=null),this._resizeTimeout=window.setTimeout(this._onWindowResizeDone,500)}},{key:"_onWindowResizeDone",value:function(){this._emitEvent(o.Constants.EVENTS.WINDOW_RESIZE)}},{key:"switchToControls",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=null;if("back"===e)i=this._previousControlsStack.pop();else if("home"===e||e===u.default){if(this.context.options.editor.forceCrop&&!this._hasUsedForceCrop)return this._switchToFroceCropControl();if(this._forceControlIndex<this._forceControls.length)return this._switchToNextForceControl();i=u.default,this._previousControlsStack=[]}else i=e,this._previousControlsStack.push(this.state.controls);var a=this.state.controls!==i;this.state.controls.onExit&&this.state.controls.onExit.call(this.refs.controls),this.state.sharedState.clear(),this.state.sharedState.set(t,!1);var s=o.SDKUtils.defaults(o.SDKUtils.defaults(r,this.context.options.editor.controlsOptions[i.identifier]),i.defaultOptions);if(i.onEnter&&i.onEnter.call(this.refs.controls,this.state.sharedState,s),!a)return n&&n();this.setState({controls:i,controlsOptions:s},n)}},{key:"getZoom",value:function(){return this.state.zoom}},{key:"export",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return new Promise(function(t,r){e.switchToControls("home",{},function(){var i;(i=e._editor).export.apply(i,n).then(t).catch(r)})})}},{key:"getEditor",value:function(){return this._editor}},{key:"serialize",value:function(){var e;return(e=this._editor).serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return this._editor.deserialize(e)}},{key:"_showUndoButton",value:function(){return this._editor.history.isAvailable()}},{key:"getChildContext",value:function(){return{editor:this._editor,ui:this.context.ui,options:this.context.options,editorScreen:this,mediator:this.context.mediator,globalState:this.context.globalState}}},{key:"setImage",value:function(e,t){this._forceControlIndex=0,this._editor.setImage(e,t)}},{key:"_renderScreen",value:function(){var e=this.state.controls.controlsComponent,t=this.state.controls.canvasControlsComponent;t||(t=u.default.canvasControlsComponent);var n=this.state.controls.topBarControlsComponent;n||(n=u.default.topBarControlsComponent);var r=void 0,i=void 0,a=void 0;n&&this.context.options.showTopBar&&(a=o.ReactBEM.createElement(n,{sharedState:this.state.sharedState,options:this.state.controlsOptions,app:this.props.app,ref:"topBarControls"})),e&&(r=o.ReactBEM.createElement(e,{onSwitchControls:this.switchToControls,sharedState:this.state.sharedState,options:this.state.controlsOptions,app:this.props.app,key:this.state.controls.identifier+"-controls",ref:"controls"})),t&&(i=o.ReactBEM.createElement(t,{onSwitchControls:this.switchToControls,sharedState:this.state.sharedState,options:this.state.controlsOptions,app:this.props.app,key:this.state.controls.identifier+"-canvasControls",ref:"canvasControls"}));var s="$b:editorScreen";return this.context.options.showHeader||(s+=" m:noHeader"),o.ReactBEM.createElement("div",{bem:s},a,o.ReactBEM.createElement(l.default,{ref:"canvas",largeControls:this.state.controls.largeCanvasControls},i),o.ReactBEM.createElement("div",{bem:"$b:controls $e:container e:row"},o.ReactBEM.createElement("div",{bem:"e:cell"},r)))}}]),t}();t.default=d,d.childContextTypes={ui:o.PropTypes.object.isRequired,editor:o.PropTypes.object.isRequired,mediator:o.PropTypes.object.isRequired,options:o.PropTypes.object.isRequired,editorScreen:o.PropTypes.object.isRequired,globalState:o.PropTypes.object.isRequired},d.contextTypes=s.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"e:cell m:largeButton"},i.ReactBEM.createElement("div",{bem:"$e:largeButton",onClick:this.props.onClick},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/back.png",!0)}))))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"e:cell m:largeButton"},i.ReactBEM.createElement("div",{bem:"$e:largeButton",onClick:this.props.onClick},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/tick.png",!0)}))))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,a=Array(r),s=0;s<r;s++)a[s]=arguments[s];var l=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a)));return l._bindAll("_onDragStart","_onDragMove","_onDragEnd","_onWindowResize","_onFeaturesUpdated","_onZoomChange"),l._events=(o(n={},i.Constants.EVENTS.WINDOW_RESIZE,l._onWindowResize),o(n,i.Constants.EVENTS.FEATURES_UPDATED,l._onFeaturesUpdated),n),l._initialRenderDone=!1,l.state={canvasPosition:new i.Vector2,canvasOffset:new i.Vector2},l}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onWindowResize",value:function(){var e=this.context.editor;e.getSDK().resizeTo(this._getContainerDimensions()),e.zoom.set("auto")}},{key:"_onFeaturesUpdated",value:function(e){-1!==e.indexOf("drag")&&this.forceUpdate()}},{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this);var e=this.context.editor,n=e.getRenderer(),r=this.refs,o=r.canvasCell,a=r.canvas,s=o.offsetWidth,l=o.offsetHeight;n.setCanvas(a),n.resizeTo(new i.Vector2(s,l),!0),e.zoom.on("set",this._onZoomChange)}},{key:"componentWillUnmount",value:function(){this.context.editor.zoom.off("set",this._onZoomChange)}},{key:"_onZoomChange",value:function(){this.forceUpdate()}},{key:"_onDragStart",value:function(e){var t=this.context.editor;t.features.isEnabled("drag")&&(e.preventDefault(),this._dragStartPosition=i.Utils.getEventPosition(e.nativeEvent),this._dragInitialOffset=t.getOffset().clone(),document.addEventListener("mousemove",this._onDragMove),document.addEventListener("touchmove",this._onDragMove),document.addEventListener("mouseup",this._onDragEnd),document.addEventListener("touchend",this._onDragEnd))}},{key:"_onDragMove",value:function(e){var t=i.Utils.getEventPosition(e).clone().subtract(this._dragStartPosition),n=this._dragInitialOffset.clone().add(t),r=this.context.editor,o=r.getOffset().clone();r.setOffset(n),r.getOffset().equals(o)||r.render()}},{key:"_onDragEnd",value:function(e){document.removeEventListener("mousemove",this._onDragMove),document.removeEventListener("touchmove",this._onDragMove),document.removeEventListener("mouseup",this._onDragEnd),document.removeEventListener("touchend",this._onDragEnd)}},{key:"_getContainerDimensions",value:function(){var e=this.refs.canvasCell;return new i.Vector2(e.offsetWidth,e.offsetHeight)}},{key:"_getDraggableStyle",value:function(){return{top:this.state.canvasPosition.y+this.state.canvasOffset.y,left:this.state.canvasPosition.x+this.state.canvasOffset.x}}},{key:"renderWithBEM",value:function(){var e=null,t=null;this.props.largeControls?t=this.props.children:e=this.props.children;var n=this.context.editor,r=n.isReady()&&n.zoom.get()>n.zoom.getDefault(),o=n.features.isEnabled("drag")&&r;return i.ReactBEM.createElement("div",{bem:"$b:canvas e:container e:row"},i.ReactBEM.createElement("div",{bem:"e:container e:cell",ref:"canvasCell"},i.ReactBEM.createElement("div",{bem:"e:innerContainer",className:o?"is-draggable":null,onTouchStart:this._onDragStart,onMouseDown:this._onDragStart,style:this._getDraggableStyle()},i.ReactBEM.createElement("canvas",{bem:"e:canvas",ref:"canvas"}),e),t))}}]),t}();t.default=a,a.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(4)),i=s(n(115)),o=s(n(42)),a=s(n(120));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default),t}();l.topBarControlsComponent=i.default,l.controlsComponent=o.default,l.canvasControlsComponent=a.default,t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=u(n(12)),a=u(n(116)),s=u(n(117)),l=u(n(118)),c=u(n(119));function u(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"renderContent",value:function(){var e=null;this.context.options.enableUpload&&(e=i.ReactBEM.createElement(a.default,{app:this.props.app}));var t=null;return this.context.options.editor.enableZoom&&(t=i.ReactBEM.createElement(c.default,null)),i.ReactBEM.createElement("bem",{specifier:"$b:topBar"},i.ReactBEM.createElement("div",{bem:"e:left"},e),i.ReactBEM.createElement("div",{bem:"e:right"},i.ReactBEM.createElement(l.default,null),i.ReactBEM.createElement(s.default,null)),t)}}]),t}();t.default=f,f.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(26)),a=s(n(25));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onNewFile","_onButtonClick"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onNewFile",value:function(e){var t=this.context.editor;t.reset(),t.setImage(e),t.zoom.set("auto")}},{key:"_onButtonClick",value:function(){var e=this.context.options,t=!1===e.enableWebcam||i.Utils.isMobile(),n=!!e.photoRoll.provider;t&&!n?this.refs.upload.open():n?this.props.app.switchToScreen("photoRoll"):this.props.app.switchToScreen("splash")}},{key:"renderWithBEM",value:function(){var e=null;return e=this.context.options.photoRoll.provider?this._t("pesdk.editor.button.backgroundImage"):this._t("pesdk.editor.button.new"),i.ReactBEM.createElement("div",null,i.ReactBEM.createElement(a.default,{onNewFile:this._onNewFile,ref:"upload"}),i.ReactBEM.createElement(o.default,{label:e,icon:"editor/new.png",onClick:this._onButtonClick}))}}]),t}();t.default=l,l.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(1)),a=s(n(26));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onButtonClick"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onButtonClick",value:function(){var e=this,t=this.context,n=t.options,r=t.editor,i=t.editorScreen,a=n.editor.export;i.switchToControls("home",null,function(){var t=o.default.instance.displayLoading(e._t("pesdk.editor.text.exporting"));setTimeout(function(){r.export(a.download).then(function(){t.close()}).catch(function(n){o.default.instance.displayError(e._t("pesdk.common.title.error"),n.message),t.close()})},100)})}},{key:"renderWithBEM",value:function(){return this.context.options.editor.export.showButton?i.ReactBEM.createElement(a.default,{style:"blue",label:this._t("pesdk.editor.button.export"),icon:"editor/export.png",onClick:this._onButtonClick}):null}}]),t}();t.default=l,l.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(26),s=(r=a)&&r.__esModule?r:{default:r};function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];var s=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i)));return s._bindAll("_onButtonClick","_onHistoryUpdated","_onFeaturesUpdated"),s._events=(l(n={},o.Constants.EVENTS.HISTORY_UPDATED,s._onHistoryUpdated),l(n,o.Constants.EVENTS.FEATURES_UPDATED,s._onFeaturesUpdated),n),s}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"_onFeaturesUpdated",value:function(){this.forceUpdate()}},{key:"_onHistoryUpdated",value:function(){this.forceUpdate()}},{key:"_onButtonClick",value:function(){this.context.editor.history.undo()}},{key:"renderWithBEM",value:function(){return this.context.editor.history.isAvailable()?o.ReactBEM.createElement(s.default,{label:this._t("pesdk.editor.button.undo"),icon:"editor/undo.png",onClick:this._onButtonClick}):null}}]),t}();t.default=c,c.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,a=Array(r),s=0;s<r;s++)a[s]=arguments[s];var l=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a)));return l._bindAll("_onZoomOutClick","_onZoomInClick","_onZoomDone","_onFeaturesUpdated"),l._events=(o(n={},i.Constants.EVENTS.ZOOM_DONE,l._onZoomDone),o(n,i.Constants.EVENTS.FEATURES_UPDATED,l._onFeaturesUpdated),n),l}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onFeaturesUpdated",value:function(){this.forceUpdate()}},{key:"_onZoomDone",value:function(){this.forceUpdate()}},{key:"_onZoomOutClick",value:function(e){var t=this.context.editor;t.features.isEnabled("zoom")&&t.zoom.out()}},{key:"_onZoomInClick",value:function(e){var t=this.context.editor;t.features.isEnabled("zoom")&&t.zoom.in()}},{key:"renderWithBEM",value:function(){var e=this.context.editor,t=e.zoom.get(),n=e.features.isEnabled("zoom");return i.ReactBEM.createElement("bem",{specifier:"b:editorScreen"},i.ReactBEM.createElement("div",{bem:"$e:zoom"},i.ReactBEM.createElement("div",{bem:"$e:button m:zoomOut",onClick:this._onZoomOutClick,className:n?null:"is-disabled"},i.ReactBEM.createElement("img",{bem:"e:image",src:this._getAssetPath("controls/minus.png",!0)})),i.ReactBEM.createElement("div",{bem:"e:label"},this._t("pesdk.editor.title.zoom"),i.ReactBEM.createElement("br",null),Math.round(100*t),"%"),i.ReactBEM.createElement("div",{bem:"$e:button m:zoomIn",onClick:this._onZoomInClick,className:n?null:"is-disabled"},i.ReactBEM.createElement("img",{bem:"e:image",src:this._getAssetPath("controls/plus.png",!0)}))))}}]),t}();t.default=a,a.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(10),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onClick"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default),i(t,[{key:"_onClick",value:function(e){this._performHitTest(o.Utils.getEventPosition(e))}},{key:"_getContainerStyle",value:function(){if(!this.context.editor.isReady())return{left:0,top:0,width:1,height:1};var e=this.context.editor.getSDK().getSprite().getBounds();return{left:e.x,top:e.y,width:e.width,height:e.height}}},{key:"renderWithBEM",value:function(){return o.ReactBEM.createElement("div",{bem:"$b:canvasControls e:container m:full",ref:"container"},o.ReactBEM.createElement("div",{bem:"$b:canvasControls e:innerContainer",ref:"innerContainer",style:this._getContainerStyle(),onClick:this._onClick,onTouchStart:this._onClick}))}}]),t}();t.default=l,l.contextTypes=s.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(122),s=(r=a)&&r.__esModule?r:{default:r};var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._sdk=t,this._options=n,this._download=r}return i(e,[{key:"export",value:function(){var e=this,t=this._getRenderType();return this._sdk.export(t,this._options.format,this._options.quality).then(function(n){return e._download&&e._downloadData(t,n),n})}},{key:"_downloadData",value:function(e,t){switch(e){case o.RenderType.DATAURL:s.default.downloadDataURL(t,this._options.fileBasename);break;case o.RenderType.MSBLOB:s.default.downloadMSBlob(t,this._options.fileBasename)}}},{key:"_getRenderType",value:function(){var e=this._options;return e.type===o.RenderType.IMAGE&&this._download?o.Utils.supportsMSBlob()?o.RenderType.MSBLOB:o.RenderType.DATAURL:e.type}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"downloadDataURL",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"photoeditorsdk-export",n=this.createBlobURLFromDataURL(e),r=this.getExtensionFromDataURL(e),i=document.createElement("a");i.download=t+"."+r,i.href=n,document.body.appendChild(i),i.click(),document.body.removeChild(i)}},{key:"downloadMSBlob",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"photoeditorsdk-export";navigator.msSaveBlob(e,t+".png")}},{key:"getExtensionFromDataURL",value:function(e){return e.split(",")[0].split(":")[1].split(";")[0].split("/").pop()}},{key:"createBlobURLFromDataURL",value:function(e){if(!(window.Blob&&window.URL&&ArrayBuffer&&Uint8Array))return e;for(var t=i.Base64.decode(e.split(",")[1]),n=e.split(",")[0].split(":")[1].split(";")[0],r=new ArrayBuffer(t.length),o=new Uint8Array(r),a=0;a<t.length;a++)o[a]=t[a];var s=new window.Blob([r],{type:n});return window.URL.createObjectURL(s)}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._image=t,this._maxPixels=n,this._maxDimensions=r}return r(e,[{key:"needsResize",value:function(){var e=new i.Vector2(this._image.width,this._image.height),t=e.x*e.y>this._maxPixels,n=null!==this._maxDimensions&&(e.x>this._maxDimensions||e.y>this._maxDimensions);return t||n}},{key:"resize",value:function(){var e=this,t=null,n=null,r=this._maxDimensions;return new i.Promise(function(o,a){window.setTimeout(function(){var a=new i.Vector2(e._image.width,e._image.height).clone();if(a.x*a.y>e._maxPixels&&(a.copy(e._getDimensionsByMaxPixels()),t="maxMegaPixels"),null!==r&&(a.x>r||a.y>r)){var s=Math.min(r/a.x,r/a.y);a.multiply(s),t="maxDimensions"}a.floor(),n=e._createResizedImageCanvas(a),o({canvas:n,dimensions:a,reason:t})},1e3)})}},{key:"_createResizedImageCanvas",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e,n=this._image,r=document.createElement("canvas");r.width=e.x,r.height=e.y;var i=e.clone().subtract(t).divide(2);return r.getContext("2d").drawImage(n,0,0,n.width,n.height,i.x,i.y,t.x,t.y),r}},{key:"_getDimensionsByMaxPixels",value:function(){var e=this._image,t=this._maxPixels,n=e.width/e.height,r=e.height/e.width;return new i.Vector2(Math.sqrt(t*n),Math.sqrt(t*r)).floor()}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(7),a=(r=o)&&r.__esModule?r:{default:r},s=n(0);var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t,this._sdk=n,this._mediator=r,this._map={},this._stack=this._sdk&&this._sdk.getOperationsStack(),this._preferredOrder=this._editor.getOptions().editor.operationsOrder,this._available={};var i=a.default.Operations;for(var o in i){var s=i[o];this._available[s.identifier]=s}var l=t.getOptions().extensions.operations;for(var c in l){var u=l[c];this._available[u.identifier]=u}this._stack&&this._fixStack()}return i(e,[{key:"exists",value:function(e){return!!this._map[e]}},{key:"add",value:function(e){var t=this,n=e.constructor.identifier;e.on("update",function(){t._mediator.emit(s.Constants.EVENTS.OPERATION_UPDATED,e)});var r=this._preferredOrder.indexOf(n);if(-1===r)throw new Error("EditorOperations#add: `"+n+"` does not appear in `operationsOrder`");this._stack.set(r,e),this._map[n]=e,this._mediator.emit(s.Constants.EVENTS.OPERATION_CREATED,e)}},{key:"remove",value:function(e){var t=e.constructor.identifier,n=this._stack.getStack();delete this._map[t];var r=n.map(function(e){return e.constructor.identifier}).indexOf(e.constructor.identifier);if(-1!==r){this._stack.removeAt(r);for(var i=r+1;i<n.length;i++){var o=n[i];o&&o.setDirty(!0)}this._mediator.emit(s.Constants.EVENTS.OPERATION_REMOVED,e)}}},{key:"get",value:function(e){return this._map[e]}},{key:"getOrCreate",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this._map[e]){var n=this._map[e];return n.set(t,!1),n}var r=new(0,this._available[e])(this._sdk,t);return this.add(r),r}},{key:"getStack",value:function(){return this._stack}},{key:"isAvailable",value:function(e){return!!this._available[e]}},{key:"getAvailable",value:function(){return this._available}},{key:"reset",value:function(){this._map={}}},{key:"_fixStack",value:function(){var e=this,t=this._stack.getStack().slice();this._stack.clear(),t.forEach(function(t){e.add(t)})}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(44)),o=n(0);var a=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t,this._sdk=n,this._mediator=r,this._invalidOperationsSeen=[],this._options=this._editor.getOptions(),this._available=o.SDKUtils.extend({},i,this._options.extensions.controls)}return r(e,[{key:"isEnabled",value:function(e){var t=this,n=this.get(e);if(!n)return o.Log.info("EditorControls#isEnabled: Unknown control: "+e),!1;var r=[];return(n.requiredOperations||[]).forEach(function(e){t._editor.operations.isAvailable(e)||r.push(e)}),r.length?(-1===this._invalidOperationsSeen.indexOf(e)&&(this._invalidOperationsSeen.push(e),o.Log.error("Control `"+e+"` can not be used because "+(1===r.length?"operation is":"operations are")+" missing: "+r.map(function(e){return"`"+e+"`"}).join(", "))),!1):n.isAvailable&&n.isAvailable(this._editor)}},{key:"get",value:function(e){return this._available[e]}},{key:"getAvailable",value:function(){return this._available}}]),e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(4)),o=a(n(127));function a(e){return e&&e.__esModule?e:{default:e}}var s=["brightness","clarity","contrast","exposure","highlights","saturation","shadows","gamma","whites","blacks","temperature"],l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,null,[{key:"onEnter",value:function(e){var t=this.context.editor,n=t.operations.exists("adjustments"),r=t.operations.getOrCreate("adjustments"),i=r.serializeOptions();this.setSharedState({operation:r,operationExistedBefore:n,initialOptions:i})}},{key:"isAvailable",value:function(e){return e.isToolAllowed("adjustment")&&s.filter(function(t){return e.isToolEnabled(t)}).length>0}},{key:"getPreloadAssets",value:function(e){return s.filter(function(t){return e.isToolEnabled(t)}).map(function(e){return"controls/adjustments/"+e+".png"})}}]),t}();l.controlsComponent=o.default,l.identifier="adjustments",l.iconPath="controls/overview/adjustments.png",l.languageKey="pesdk.adjustments.title.name",l.defaultOptions={},l.requiredOperations=["adjustments"],t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=l(n(3)),a=l(n(2)),s=l(n(6));l(n(128));function l(e){return e&&e.__esModule?e:{default:e}}var c=i.SDK.Operations.AdjustmentsOperation,u=["brightness","saturation","contrast","gamma","clarity","exposure","shadows","highlights","whites","blacks","temperature"],f=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));o._bindAll("_onSliderValueChange");var a=o.context.editor;return o._operation=a.operations.getOrCreate("adjustments"),o.state={selectedControls:null},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_onBackClick",value:function(e){var n=this.context.editor,r=this.getSharedState("operationExistedBefore"),i=this.getSharedState("initialOptions");this._operation.optionsEqual(i)||n.history.add(this._operation,i,r);var o=this._operation.getDefaultOptions();this._operation.optionsEqual(o)&&n.operations.remove(this._operation),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_onBackClick",this).call(this,e)}},{key:"_onSliderValueChange",value:function(e){var t=this.state.selectedControls,n=c.prototype.availableOptions[t],r=n.minValue,i=n.midValue,o=n.maxValue;e=e<0?i+(i-r)*e/100:i+(o-i)*e/100,this._operation.setOption(t,e),this.context.editor.render()}},{key:"_onButtonClick",value:function(e,t){this.setState({selectedControls:e})}},{key:"_buildSliderProps",value:function(e){var t=c.prototype.availableOptions[e],n=t.minValue,r=t.midValue,i=t.maxValue,o=this._operation?this._operation.getOption(e):r;return{minValue:-100,maxValue:100,value:100*(o<=r?(o-n)/(r-n)-1:(o-r)/(i-r)),valueUnit:"%",positiveValuePrefix:"+",label:this._t("pesdk.adjustments.text."+e),middleDot:!0,onChange:this._onSliderValueChange}}},{key:"renderOverlayControls",value:function(){var e=this.state.selectedControls;if(e){var t=this._buildSliderProps(e);return i.ReactBEM.createElement(s.default,t)}}},{key:"_renderListItems",value:function(){var e=this;return u.filter(function(t){return e.context.editor.isToolEnabled(t)}).map(function(t){var n=e.state.selectedControls===t,r=n?"is-active":null,o=void 0;return i.ReactBEM.createElement("li",{bem:"e:item",key:t,"data-identifier":t},i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"$e:button m:withLabel",onClick:e._onButtonClick.bind(e,t),className:r},i.ReactBEM.createElement("img",{bem:"e:icon",src:e._getAssetPath("controls/adjustments/"+t+".png",!0)}),i.ReactBEM.createElement("div",{bem:"e:label"},e._t("pesdk.adjustments.text."+t)),o)))})}},{key:"renderControls",value:function(){var e=this._renderListItems();return i.ReactBEM.createElement("div",{bem:"e:cell m:list"},i.ReactBEM.createElement(a.default,null,i.ReactBEM.createElement("ul",{bem:"$e:list"},e)))}}]),t}();t.default=f,f.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0);var a=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o.state={value:o.props.value||0,sliderPosition:0,foregroundLeft:0,foregroundWidth:0},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"componentDidMount",value:function(){this._setValue(this.state.value,!1)}},{key:"componentWillReceiveProps",value:function(e){e.value!==this.state.value&&this._setValue(e.value,!1)}},{key:"_getKnobStyle",value:function(){return{left:this.state.sliderPosition}}},{key:"_getForegroundStyle",value:function(){return{left:this.state.foregroundLeft,width:this.state.foregroundWidth}}},{key:"_displayMiddleDot",value:function(){return!1!==this.props.middleDot}},{key:"_setValue",value:function(e){!(arguments.length>1&&void 0!==arguments[1])||arguments[1];e=Math.round(e);var t=this.props,n=t.minValue,r=(e-n)/(t.maxValue-n),i=this.refs.bar.offsetWidth,o=i*r,a=r*i,s=0;this._displayMiddleDot()&&(a=Math.abs(r-.5)*i,s=r<.5?.5*i-a:"50%"),this.setState({value:e,sliderPosition:o,foregroundWidth:a,foregroundLeft:s})}},{key:"renderWithBEM",value:function(){var e={style:this._getForegroundStyle()};return o.ReactBEM.createElement("div",{bem:"$b:miniSlider"},o.ReactBEM.createElement("div",{bem:"$e:bar",ref:"bar"},o.ReactBEM.createElement("div",{bem:"$e:background"}),o.ReactBEM.createElement("div",r({bem:"$e:foreground"},e)),o.ReactBEM.createElement("div",{bem:"e:knob",style:this._getKnobStyle()})))}}]),t}();t.default=a,a.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=c(n(4)),a=c(n(130)),s=c(n(131)),l=c(n(132));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,null,[{key:"onEnter",value:function(e){var t=this.context.editor,n=t.operations.exists("transform"),r=t.operations.getOrCreate("transform");r.setEnabled(!1,!1);var o=t.operations.exists("orientation"),a=t.operations.getOrCreate("orientation"),s={end:new i.Vector2(1,1),rotation:0,start:new i.Vector2(0,0),textureScale:1},l=r.getInputDimensions(!1),c=r.getNewDimensions(l),u=s;if(n){delete(u=r.serializeOptions()).enabled;var f=u,p=f.start,d=f.end,h=f.rotation,_=r.calculateScale(h),m=r.getInputDimensions(!1),y=Math.cos(h),g=Math.sin(h),v=d.clone().subtract(p).divide(2),b=p.clone().add(v).multiply(m).subtract(m.clone().multiply(.5)),k=new i.Vector2(b.x*y-b.y*g,b.x*g+b.y*y).multiply(_),w=m.clone().multiply(.5).add(k).clone().divide(m),O=w.clone().subtract(v.clone().multiply(_)),E=w.clone().add(v.clone().multiply(_));u.start=O,u.end=E}t.broadcastTransform(r,s);var S=a.serializeOptions(),P=[10,0,68,0];t.setSpriteScale(r.calculateScale()),t.setRotation(u.rotation),t.setPadding(P),r.set(s,n),t.zoom.set("auto",function(){t.features.disable("zoom","drag")},!1),this.setSharedState({initialTransformOptions:u,initialOrientationOptions:S,operation:r,orientationOperation:a,activePadding:P,orientationOperationExistedBefore:o,transformOperationExistedBefore:n,start:i.Vector2.fromObject(u.start),end:i.Vector2.fromObject(u.end),rotation:u.rotation,orientationRotation:a.getRotation(),flipVertically:a.getFlipVertically(),flipHorizontally:a.getFlipHorizontally(),initialDimensions:c,inputDimensions:l})}},{key:"isAvailable",value:function(e){return e.isToolAllowed("transform")&&e.isToolEnabled("transform")}},{key:"getPreloadAssets",value:function(e){var t=e.getOptions(),n=i.SDKUtils.defaults(t.editor.controlsOptions.transform,this.defaultOptions),r=["controls/transform/rotate-ccw.png","controls/transform/rotate-cw.png","controls/transform/flip-h.png","controls/transform/flip-v.png"];return a.default.getRatios(n).forEach(function(e){Array.isArray(e)?e.forEach(function(e){var t=e.identifier;r.push("controls/transform/"+t+".png")}):r.push("controls/transform/"+e.identifier+".png")}),r}}]),t}();u.topBarControlsComponent=l.default,u.controlsComponent=a.default,u.canvasControlsComponent=s.default,u.identifier="transform",u.iconPath="controls/overview/transform.png",u.languageKey="pesdk.transform.title.name",u.defaultOptions={},u.requiredOperations=["transform"],t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=l(n(3)),a=l(n(2)),s=l(n(6));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return c._bindAll("_selectRatio","_onRotationChange","_reapplyRatio"),c.state={ratio:null},c._ratios=c.constructor.getRatios(c.props.options),c._events=(a={},s=i.Constants.EVENTS.TRANSFORM_REAPPLY_RATIO,l=c._reapplyRatio,s in a?Object.defineProperty(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c._selectInitialRatio(!c.getSharedState("transformOperationExistedBefore")),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"shouldSharedComponentUpdate",value:function(e,t){return e.ratio!==t.ratio}},{key:"_onRotationChange",value:function(e){var t=this.getSharedState("operation"),n=this.context.editor;e=e*Math.PI/180,n.setRotation(e),n.setSpriteScale(t.calculateScale(e)),n.render(),this.setSharedState({rotation:e})}},{key:"_getRotatedSpriteDimensions",value:function(){var e=this.context.editor,t=e.getRotation(),n=e.getOutputDimensions(!1);return new i.Vector2(Math.abs(n.x*Math.cos(t))+Math.abs(n.y*Math.sin(t)),Math.abs(n.x*Math.sin(t))+Math.abs(n.y*Math.cos(t)))}},{key:"_calculateTextureScale",value:function(){var e=this.getSharedState("operation"),t=this.getSharedState("ratio");if(!t||!t.dimensions)return 1;var n=this.getSharedState("start"),r=this.getSharedState("end").clone().subtract(n),i=e.getInputDimensions(!1).multiply(r);return t.dimensions.x/i.x}},{key:"_getHistoryItems",value:function(){var e=[],t=this._getTransformHistoryItem();t&&e.push(t);var n=this._getOrientationHistoryItem();return n&&e.push(n),e}},{key:"_getTransformHistoryItem",value:function(){var e=this.context.editor,t=this.getSharedState("operation"),n=this.getSharedState("initialTransformOptions"),r=this.getSharedState("transformOperationExistedBefore");if(!t.optionsEqual(n))return{operation:t,options:n,existent:r,undo:function(t,n){e.broadcastTransform(t,n)}}}},{key:"_getOrientationHistoryItem",value:function(){var e=this.context.editor,t=this.getSharedState("orientationOperation"),n=this.getSharedState("initialOrientationOptions"),r=this.getSharedState("orientationOperationExistedBefore");if(!t.optionsEqual(n))return{operation:t,options:n,existent:r,undo:function(t,n){t.getRotation()!==n.rotation&&e.broadcastRotate(n.rotation-t.getRotation());var r=n.rotation,i=90===r||270===r;t.getFlipVertically()!==n.flipVertically?e.broadcastFlip(i?"horizontal":"vertical"):t.getFlipHorizontally()!==n.flipHorizontally&&e.broadcastFlip(i?"vertical":"horizontal")}}}},{key:"_reapplyRatio",value:function(){var e=this.getSharedState("ratio");this._selectRatio(e)}},{key:"_onBackClick",value:function(e){var n=this.context.editor,r=this.getSharedState("ratio"),o=this.getSharedState("operation"),a=this.getSharedState("orientationOperation"),s=n.getRotation(),l=this.getSharedState("start").clone(),c=this.getSharedState("end").clone();if((null===r||l.equals(0,0)&&c.equals(1,1))&&0===s)n.operations.remove(o);else{var u={rotation:s,start:l,end:c,textureScale:this._calculateTextureScale(),enabled:!0},f=o.calculateScale(s),p=o.getInputDimensions(!1),d=Math.cos(-s),h=Math.sin(-s),_=c.clone().subtract(l).divide(2),m=l.clone().add(_).multiply(p).subtract(p.clone().multiply(.5)),y=new i.Vector2(m.x*d-m.y*h,m.x*h+m.y*d).divide(f),g=p.clone().multiply(.5).add(y).clone().divide(p);u.start=g.clone().subtract(_.clone().divide(f)),u.end=g.clone().add(_.clone().divide(f)),n.broadcastTransform(o,u),o.set(u)}0!==a.getRotation()||a.getFlipVertically()||a.getFlipHorizontally()||n.operations.remove(a),n.setPadding(!1),n.setRotation(0),n.setSpriteScale(1);var v=this._getHistoryItems();if(v.length){var b=this.props.options,k=b.forceCrop,w=b.firstCrop;k||w||n.history.add(v)}n.features.enable("zoom","drag"),n.zoom.set("auto"),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_onBackClick",this).call(this,e)}},{key:"_selectInitialRatio",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=this.getSharedState("operation"),n=null,r=i.SDKUtils.Array.flatten(this._ratios),o=t._ratio;o&&(n=r.filter(function(e){return e===o})[0]);n||(n=r.filter(function(e){return e.selected}).pop());return n||(n=r[0]),this._selectRatio(n,e,!1)}},{key:"_selectRatio",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=this.getSharedState("operation");t&&e&&this._setDefaultOptionsForRatio(e,n),r._ratio=e;var o={ratio:e},a=this.context.editor;e?a.setPadding(this.getSharedState("activePadding")):(a.setPadding(!1),a.setRotation(0),a.setSpriteScale(1),o.rotation=0,o.start=new i.Vector2(0,0),o.end=new i.Vector2(1,1)),a.render(),this.setSharedState(o,n)}},{key:"_setDefaultOptionsForRatio",value:function(e){var t=e.ratio,n=(e.name,e.dimensions),r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=this.context.editor,a=new i.Vector2,s=new i.Vector2;if(n&&!t&&(t=n.x/n.y),"*"===t)a=new i.Vector2(0,0),s=new i.Vector2(1,1);else{var l=o.getOutputDimensions();if(l.x/l.y<=t){var c=1/l.y*(l.x/t);a.set(0,(1-c)/2),s.set(1,1-a.y)}else{var u=1/l.x*(t*l.y);a.set((1-u)/2,0),s.set(1-a.x,1)}}this.setSharedState({start:a,end:s},r)}},{key:"renderOverlayControls",value:function(){var e=180*this.getSharedState("rotation")/Math.PI;return this.getSharedState("ratio")?i.ReactBEM.createElement(s.default,{value:e,minValue:-45,middleDot:!0,maxValue:45,valueUnit:"°",label:this._t("pesdk.transform.text.rotation"),onChange:this._onRotationChange}):null}},{key:"_renderListItems",value:function(){var e=this,t=[],n=function(t){return i.ReactBEM.createElement("li",{bem:"e:item",key:t.identifier,"data-identifier":t.identifier},i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"$e:button m:withLabel",className:e.getSharedState("ratio")===t?"is-active":null,onClick:e._selectRatio.bind(e,t)},i.ReactBEM.createElement("img",{bem:"e:icon",src:e._getAssetPath("controls/transform/"+t.identifier+".png",!0)}),i.ReactBEM.createElement("div",{bem:"e:label"},e._t("pesdk.transform.asset."+t.identifier)||t.defaultName))))};this._ratios.forEach(function(e){if(Array.isArray(e)){var r=[];e.forEach(function(e){r.push(n(e))}),r.length&&t.push(r)}else{var i=e;t.push(n(i))}});var r=[];t.forEach(function(e){r=r.concat(e),Array.isArray(e)&&e!==t[t.length-1]&&r.push(i.ReactBEM.createElement("li",{bem:"e:separator"}))});var o=i.ReactBEM.createElement("li",{bem:"e:item","data-identifier":"none",key:"noTransform"},i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"$e:button m:withLabel",className:this.getSharedState("ratio")?null:"is-active",onClick:this._selectRatio.bind(this,null)},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/transform/no-transform.png",!0)}),i.ReactBEM.createElement("div",{bem:"e:label"},this._t("pesdk.transform.button.none")))));return this.context.options.editor.forceCrop?r:[o,i.ReactBEM.createElement("li",{bem:"e:separator"})].concat(r)}},{key:"renderControls",value:function(){var e=this._renderListItems();return i.ReactBEM.createElement("div",{bem:"e:cell m:list"},i.ReactBEM.createElement(a.default,null,i.ReactBEM.createElement("ul",{bem:"$e:list"},e)))}}],[{key:"getRatios",value:function(e){var t=e.ratios,n=e.replaceRatios,r=e.availableRatios;t=t||[];var o=void 0;if(o=i.Constants.DEFAULTS.TRANSFORM_RATIOS,o=n?t:o.concat(t),r&&r.length){o=o.map(function e(t){return Array.isArray(t)?t.map(e).filter(function(e){return e}):-1===r.indexOf(t.identifier)?null:t}).filter(function(e){return e})}return o}}]),t}();t.default=c,c.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(5)),a=s(n(10));function s(e){return e&&e.__esModule?e:{default:e}}var l=new i.Vector2(50,50),c=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._needsStyleFixes=!0,o._bindAll("_onCenterDragStart","_onCenterDrag"),o.state={dimensions:o.getSharedState("initialDimensions")},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"fixStyles",value:function(){if(i.Utils.Browser.isIElte(11)){var e=this.context.editor,t=this.refs.container,n=e.getCanvasDimensions(!1).y;t.style.height=n+"px"}}},{key:"sharedStateDidChange",value:function(e){e!==this.getSharedState("ratio")&&this._updateDimensions()}},{key:"_updateDimensions",value:function(){var e=this.getSharedState("operation"),t=this.getSharedState("ratio")||{ratio:"*"},n=void 0;if(t.dimensions)n=t.dimensions.clone();else{var r=e.getInputDimensions(!1),i=this.getSharedState("start");n=this.getSharedState("end").clone().subtract(i).multiply(r).floor()}this.setState({dimensions:n})}},{key:"_onCenterDragStart",value:function(){var e=this.getSharedState("start"),t=this.getSharedState("end");this._initialValues={start:e.clone(),end:t.clone(),size:t.clone().subtract(e)}}},{key:"_onCenterDrag",value:function(e){var t=this.context.editor,n=this._initialValues,r=n.start,o=n.size,a=t.getOutputDimensions(),s=e.clone().divide(a),l=new i.Vector2(0,0),c=new i.Vector2(1,1).subtract(o),u=r.clone().add(s).clamp(l,c),f=u.clone().add(o);this.setSharedState({start:u,end:f})}},{key:"_onKnobDragStart",value:function(e){this._currentDragOption=e,this._initialValues={start:this.getSharedState("start").clone(),end:this.getSharedState("end").clone()}}},{key:"_onKnobDrag",value:function(e,t){var n=this.context.editor.getOutputDimensions(),r=this.getSharedState("ratio")||{ratio:"*"},o=r.ratio,a=r.dimensions;a&&!o&&(o=a.x/a.y);var s=this._initialValues.end.clone().subtract(this._initialValues.start).multiply(n),c=void 0;"start"===e?(s.subtract(t),c=this._initialValues.end.clone().multiply(n)):"end"===e&&(s.add(t),c=new i.Vector2(1,1).subtract(this._initialValues.start).multiply(n));var u=n;if(void 0!==o&&"*"!==o&&(u=o>n.x/n.y?new i.Vector2(n.x,n.x/o):new i.Vector2(n.y*o,n.y)),s.x=Math.min(Math.max(Math.min(l.x,u.x),s.x),c.x),"*"!==o&&(s.y=s.x/o),s.y=Math.min(Math.max(Math.min(l.y,u.y),s.y),c.y),"*"!==o&&(s.x=s.y*o),"start"===e){var f=this._initialValues.end.clone().subtract(s.clone().divide(n));this.setSharedState({start:f},!1),this._updateDimensions()}else if("end"===e){var p=this._initialValues.start.clone().add(s.clone().divide(n));this.setSharedState({end:p},!1),this._updateDimensions()}}},{key:"_calculateDimensions",value:function(){var e=this.context.editor,t=this.getSharedState("start");return this.getSharedState("end").clone().subtract(t).multiply(e.getInputDimensions(!1)).round()}},{key:"_getAreaStyles",value:function(){var e=this.context.editor,t=e.getOutputDimensions(),n=e.getCanvasDimensions(),r=this.getSharedState("start").clone().multiply(t).floor(),i=this.getSharedState("end").clone().multiply(t).ceil().clone().subtract(r),o=n.clone().subtract(t).divide(2).floor(),a=e.getPadding();return r.add(o).add(0,a[0]),{topLeft:this._getDimensionsStyles(r.x,r.y),topCenter:this._getDimensionsStyles(i.x,r.y),centerLeft:this._getDimensionsStyles(r.x,i.y),center:this._getDimensionsStyles(i.x,i.y)}}},{key:"_getDimensionsStyles",value:function(e,t){return{width:Math.max(1,e),height:Math.max(1,t)}}},{key:"renderWithBEM",value:function(){var e=this.getSharedState("ratio"),t=this.state.dimensions,n=void 0;if(e){var r=this._getAreaStyles();n=i.ReactBEM.createElement("div",{bem:"$b:transformCanvasControls"},i.ReactBEM.createElement("div",{bem:"e:row"},i.ReactBEM.createElement("div",{bem:"e:cell m:dark",style:r.topLeft}," "),i.ReactBEM.createElement("div",{bem:"e:cell m:dark",style:r.topCenter}," "),i.ReactBEM.createElement("div",{bem:"e:cell m:dark"})),i.ReactBEM.createElement("div",{bem:"e:row"},i.ReactBEM.createElement("div",{bem:"e:cell m:dark",style:r.centerLeft}," "),i.ReactBEM.createElement(o.default,{onStart:this._onCenterDragStart,onDrag:this._onCenterDrag},i.ReactBEM.createElement("div",{bem:"e:cell m:bordered",style:r.center},i.ReactBEM.createElement(o.default,{onStart:this._onKnobDragStart.bind(this,"start"),onDrag:this._onKnobDrag.bind(this,"start")},i.ReactBEM.createElement("div",{bem:"e:knob m:topLeft $b:knob"},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/knobs/resize-diagonal-down.png",!0)}))),i.ReactBEM.createElement("div",{bem:"e:dimensions"},t.x+"x"+t.y),i.ReactBEM.createElement(o.default,{onStart:this._onKnobDragStart.bind(this,"end"),onDrag:this._onKnobDrag.bind(this,"end")},i.ReactBEM.createElement("div",{bem:"e:knob m:bottomRight $b:knob"},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/knobs/resize-diagonal-down.png",!0)}))))),i.ReactBEM.createElement("div",{bem:"e:cell m:dark"}," ")),i.ReactBEM.createElement("div",{bem:"e:row"},i.ReactBEM.createElement("div",{bem:"e:cell m:dark"}," "),i.ReactBEM.createElement("div",{bem:"e:cell m:dark"}," "),i.ReactBEM.createElement("div",{bem:"e:cell m:dark"}," ")))}else n=i.ReactBEM.createElement("div",{bem:"$b:transformCanvasControls"},i.ReactBEM.createElement("div",{bem:"e:dimensions"},t.x+"x"+t.y));return i.ReactBEM.createElement("div",{bem:"b:canvasControls e:container m:full",ref:"container"},n)}}]),t}();t.default=c,c.contextTypes=a.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(12),s=(r=a)&&r.__esModule?r:{default:r};function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default),i(t,[{key:"_onRotateClick",value:function(e){var t=void 0;"cw"===e?t=90:"ccw"===e&&(t=-90);var n=this.context.editor,r=this.getSharedState("orientationOperation"),i=(r.getRotation()+t)%360;r.set({rotation:i});var a={orientationRotation:i},s=this.getSharedState("ratio");if(s&&!s.dimensions){var l=this.getSharedState("start"),c=this.getSharedState("end"),u=l.clone();"cw"===e?(l.set(1-c.y,u.x),c.set(1-u.y,c.x)):"ccw"===e&&(l.set(u.y,1-c.x),c.set(c.y,1-u.x)),a.start=l,a.end=c}s&&s.dimensions&&this._emitEvent(o.Constants.EVENTS.TRANSFORM_REAPPLY_RATIO),this.setSharedState(a),n.broadcastRotate(t),n.zoom.set("auto")}},{key:"_onFlipClick",value:function(e){var t,n=this.context.editor,r=this.getSharedState("orientationOperation"),i=!this.getSharedState("flip"+e),o=-1*this.getSharedState("rotation");this.setSharedState((l(t={},"flip"+e,i),l(t,"rotation",o),t)),n.setRotation(o),r.flip(e);var a=this.getSharedState("start"),s=this.getSharedState("end"),c=a.clone();"horizontal"===e?(a.set(1-s.x,a.y),s.set(1-c.x,s.y)):"vertical"===e&&(a.set(a.x,1-s.y),s.set(s.x,1-c.y)),this.setSharedState({start:a,end:s}),n.broadcastFlip(e),n.render()}},{key:"shouldSharedComponentUpdate",value:function(e,t){return!1}},{key:"renderContent",value:function(){return o.ReactBEM.createElement("bem",{specifier:"$b:topBar"},o.ReactBEM.createElement("div",{bem:"$e:iconButton",onClick:this._onFlipClick.bind(this,"vertical")},o.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/transform/flip-v.png",!0)})),o.ReactBEM.createElement("div",{bem:"$e:iconButton",onClick:this._onFlipClick.bind(this,"horizontal")},o.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/transform/flip-h.png",!0)})),o.ReactBEM.createElement("div",{bem:"e:space"}),o.ReactBEM.createElement("div",{bem:"$e:iconButton",onClick:this._onRotateClick.bind(this,"ccw")},o.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/transform/rotate-ccw.png",!0)})),o.ReactBEM.createElement("div",{bem:"$e:iconButton",onClick:this._onRotateClick.bind(this,"cw")},o.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/transform/rotate-cw.png",!0)})))}}]),t}();t.default=c,c.contextTypes=s.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=l(n(4)),a=l(n(134)),s=l(n(27));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,null,[{key:"onEnter",value:function(e){var t=this.context.editor,n=t.operations.exists("filter"),r=t.operations.getOrCreate("filter"),i=r.serializeOptions(["identifier","filter","intensity"]);this.setSharedState({operation:r,operationExistedBefore:n,initialOptions:i})}},{key:"onExit",value:function(){var e=this.getSharedState("initialOptions"),t=this._operation.getFilter().constructor,n=e.filter.constructor,r=void 0;"3d-lut"===n.identifier&&(r=e.filter.getImage());var i=this._operation.getIntensity();if(this._operation.getIdentifier()!==e.identifier||i!==e.intensity){var o=this.context.editor;o.history.add(this._operation,{identifier:e.identifier,intensity:i},this.getSharedState("operationExistedBefore"),function(){var e=o.operations.getOrCreate("filter");"3d-lut"===n.identifier?e.setFilter(new n({image:r})):e.setFilter(new n)})}t.isIdentity&&this.context.editor.operations.remove(this._operation)}},{key:"isAvailable",value:function(e){return e.isToolAllowed("filter")&&e.isToolEnabled(this.identifier)}},{key:"getPreloadAssets",value:function(e){var t=e.getOptions(),n=i.SDKUtils.defaults(t.editor.controlsOptions.filter,this.defaultOptions),r=new s.default(e.getUI(),n),o=[];return r.getCategories().forEach(function(e){o.push("controls/filters/categories/"+e.identifier+".png"),r.getFiltersForCategory(e.identifier).forEach(function(e){o.push("controls/filters/"+e.identifier+".png"),e.lutImage&&o.push([e.lutImage,!1,!1])})}),o}}]),t}();c.controlsComponent=a.default,c.identifier="filter",c.iconPath="controls/overview/filters.png",c.languageKey="pesdk.filter.title.name",c.defaultOptions={categories:[],replaceCategories:!1,availableFilters:null,hideCategories:!1},c.requiredOperations=["filter"],t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=u(n(3)),a=u(n(2)),s=u(n(45)),l=u(n(6)),c=u(n(27));function u(e){return e&&e.__esModule?e:{default:e}}var f=i.SDK.Operations.FilterOperation.Filters,p=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return c._bindAll("_onItemClick","_onOperationUpdated","_onSliderValueChange","_onCategoryChange"),c._operation=c.getSharedState("operation"),c._events=(a={},s=i.Constants.EVENTS.OPERATION_UPDATED,l=c._onOperationUpdated,s in a?Object.defineProperty(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c._initFilterManager(),c.state={category:c._filterManager.getCategoryByIdentifier("all")},c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_initFilterManager",value:function(){this._filterManager=new c.default(this.context.ui,this.props.options)}},{key:"_onSliderValueChange",value:function(e){this._operation.setIntensity(e/100),this.context.editor.render()}},{key:"_onCategoryChange",value:function(e){var t=this;this.setState({category:e},function(){t.refs.scrollbar.update()})}},{key:"_onOperationUpdated",value:function(e){e===this._operation&&this.forceUpdate()}},{key:"_onItemClick",value:function(e,t){var n=this;this._filterManager.instantiateFilterWithIdentifier(e).then(function(t){n._operation.set({filter:t,identifier:e,intensity:1}),n.context.editor.render(),n.forceUpdate()})}},{key:"renderOverlayControls",value:function(){if(this._operation.getFilter().isIdentity)return null;var e=this._operation.getIntensity();return i.ReactBEM.createElement(l.default,{minValue:0,maxValue:100,value:100*e,valueUnit:"%",positiveValuePrefix:"+",label:this._t("pesdk.filter.text.intensity"),onChange:this._onSliderValueChange})}},{key:"_renderListItems",value:function(){var e=this,t=this._operation.getIdentifier(),n=this._filterManager.getFiltersForCategory(this.state.category.identifier);return[f.IdentityFilter].concat(n).map(function(n){var r=n.identifier;return i.ReactBEM.createElement("li",{bem:"e:item",key:r,onClick:e._onItemClick.bind(e,r)},i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"$e:button m:withInlineLabel"},i.ReactBEM.createElement("img",{bem:"e:icon",src:e._getAssetPath("controls/filters/"+r+".png",!0)}),i.ReactBEM.createElement("div",{bem:"$e:inlineLabel",className:r===t?"is-active":null},i.ReactBEM.createElement("div",{bem:"e:label"},e._t("pesdk.filter.asset."+n.identifier)||n.defaultName)))))})}},{key:"_renderCategoryDropdown",value:function(){var e=this,t=this._filterManager.getCategories();if(!(!this.props.options.hideCategories&&t.length>1))return null;var n=t.map(function(t){return{identifier:t.identifier,item:t,label:e._t("pesdk.filter.asset."+t.identifier)||t.defaultName,icon:e._getAssetPath("controls/filters/categories/"+t.identifier+".png",!0)}}),r={identifier:this.state.category.identifier,item:this.state.category,label:this._t("pesdk.filter.asset."+this.state.category.identifier)||this.state.category.defaultName,icon:this._getAssetPath("controls/filters/categories/"+this.state.category.identifier+".png",!0)};return i.ReactBEM.createElement("div",{bem:"e:cell m:categoryDropdown"},i.ReactBEM.createElement(s.default,{items:n,selectedItem:r,onChange:this._onCategoryChange}))}},{key:"renderControls",value:function(){var e=this._renderListItems();return[this._renderCategoryDropdown(),i.ReactBEM.createElement("div",{bem:"e:cell m:list"},i.ReactBEM.createElement(a.default,{ref:"scrollbar"},i.ReactBEM.createElement("ul",{bem:"$e:list"},e)))]}}]),t}();t.default=p,p.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onItemClick",value:function(e){this.props.onChange&&this.props.onChange(e.item)}},{key:"_renderListItems",value:function(){var e=this;return this.props.items.map(function(t){var n=t.identifier===e.props.selectedItem.identifier;return i.ReactBEM.createElement("li",{bem:"$e:item",className:n?" is-active":"",onClick:e._onItemClick.bind(e,t)},i.ReactBEM.createElement("img",{bem:"e:icon",src:t.icon}),i.ReactBEM.createElement("div",{bem:"e:label"},t.label))})}},{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("div",{bem:"$b:categoryDropdown $e:overlay"},i.ReactBEM.createElement("ul",{bem:"$e:list"},this._renderListItems()))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(4)),o=s(n(137)),a=s(n(138));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,null,[{key:"isAvailable",value:function(e){return e.isToolAllowed("focus")&&(e.isToolEnabled("radial-focus")||e.isToolEnabled("mirrored-focus"))}},{key:"onExit",value:function(){var e=this.context.editor;e.features.enable("zoom","drag");var t=this.getSharedState("initialOptions"),n=this.getSharedState("initialOperation"),r=this.getSharedState("operation");(!r&&n||r&&n&&r.constructor===n.constructor)&&e.history.add(n,t,!0),r&&!n&&e.history.add(r,{},!1),r&&n&&r.constructor!==n.constructor&&e.history.add([{operation:n,options:t,existent:!0},{operation:r,options:{},existent:!1}])}},{key:"onEnter",value:function(e){var t=this.context.editor,n=t.operations.get("mirrored-focus")||t.operations.get("radial-focus"),r={};n&&delete(r=n.serializeOptions()).enabled,this.setSharedState({operation:n,initialOperation:n,operationExistedBefore:!!n,initialOptions:r,inputDimensions:t.getOutputDimensions()})}},{key:"getPreloadAssets",value:function(e){var t=[];return e.isToolEnabled("radial-focus")&&t.push("controls/focus/radial.png"),e.isToolEnabled("mirrored-focus")&&t.push("controls/focus/mirrored.png"),t}}]),t}();l.controlsComponent=o.default,l.canvasControlsComponent=a.default,l.identifier="focus",l.iconPath="controls/overview/focus.png",l.languageKey="pesdk.focus.title.name",l.defaultOptions={},l.requiredOperations=["radial-focus","mirrored-focus","linear-focus","blur"],t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=l(n(3)),a=l(n(2)),s=l(n(6));function l(e){return e&&e.__esModule?e:{default:e}}var c=[{toolName:"radial-focus",iconName:"radial",languageKey:"pesdk.focus.button.radial"},{toolName:"mirrored-focus",iconName:"mirrored",languageKey:"pesdk.focus.button.mirrored"}],u=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return c._bindAll("_onBlurRadiusChange","_onOperationRemoved"),c._removedOperation=null,c._events=(a={},s=i.Constants.EVENTS.OPERATION_REMOVED,l=c._onOperationRemoved,s in a?Object.defineProperty(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_onBlurRadiusChange",value:function(e){var t=this.getSharedState("operation"),n=this.getSharedState("inputDimensions");t.setBlurRadius(e/n.min()),this.context.editor.render()}},{key:"_onButtonClick",value:function(e,t){var n=this.context.editor,r=this.getSharedState("operation");r&&(this._removedOperation=r,n.operations.remove(r));var i=null;e&&(i=n.operations.getOrCreate(e)),this.setSharedState({operation:i}),n.render()}},{key:"_onOperationRemoved",value:function(e){var t=this.getSharedState("operation");if(t&&e===t&&e!==this._removedOperation&&!this._backButtonClicked){var n=this.context.editor,r=t.constructor.identifier,i=n.operations.getOrCreate(r);this.setSharedState({operation:i,operationExistedBefore:!1,initialOptions:{}})}}},{key:"renderOverlayControls",value:function(){var e=this.getSharedState("operation");if(!e)return null;var t=this.getSharedState("inputDimensions").min(),n=e.getBlurRadius()*t;return i.ReactBEM.createElement(s.default,{minValue:0,maxValue:Math.min(180,Math.round(.1*t)),valueUnit:"px",middleDot:!1,label:this._t("pesdk.focus.text.blurRadius"),onChange:this._onBlurRadiusChange,value:n})}},{key:"_renderListItems",value:function(){var e=this,t=this.getSharedState("operation"),n=this.context.editor;return[i.ReactBEM.createElement("li",{bem:"e:item",key:"none"},i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"$e:button m:withLabel",className:t?null:"is-active",onClick:this._onButtonClick.bind(this,null)},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/focus/none.png",!0)}),i.ReactBEM.createElement("div",{bem:"e:label"},this._t("pesdk.focus.button.none")))))].concat(c.filter(function(e){var t=e.toolName;return n.isToolEnabled(t)}).map(function(n){var r=n.toolName,o=n.iconName,a=n.languageKey,s=t&&t.constructor.identifier===r;return i.ReactBEM.createElement("li",{bem:"e:item","data-identifier":r,key:r},i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"$e:button m:withLabel",className:s?"is-active":null,onClick:e._onButtonClick.bind(e,r)},i.ReactBEM.createElement("img",{bem:"e:icon",src:e._getAssetPath("controls/focus/"+o+".png",!0)}),i.ReactBEM.createElement("div",{bem:"e:label"},e._t(a)))))}))}},{key:"renderControls",value:function(){var e=this._renderListItems();return i.ReactBEM.createElement("div",{bem:"e:cell m:list"},i.ReactBEM.createElement(a.default,null,i.ReactBEM.createElement("ul",{bem:"$e:list"},e)))}}]),t}();t.default=u,u.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=l(n(10)),a=l(n(139)),s=l(n(140));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_getControlsForOperation",value:function(e){if(!e)return null;switch(e.constructor.identifier){case"mirrored-focus":return a.default;case"radial-focus":return s.default}}},{key:"renderWithBEM",value:function(){var e=this.getSharedState("operation"),t=this._getControlsForOperation(e);return t?i.ReactBEM.createElement(t,this.props):i.ReactBEM.createElement("div",null)}}]),t}();t.default=c,c.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(5)),a=s(n(10));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return c._bindAll("_onCenterDragStart","_onCenterDrag","_onKnobDragStart","_onKnobDrag","_onOperationUpdated"),c.state={areaPosition:new i.Vector2,areaDimensions:new i.Vector2,knobPosition:new i.Vector2},c._operation=c.getSharedState("operation"),c._events=(a={},s=i.Constants.EVENTS.OPERATION_UPDATED,l=c._onOperationUpdated,s in a?Object.defineProperty(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"_onCanvasZoomDone",value:function(){this._setStylesFromOptions()}},{key:"_onOperationUpdated",value:function(e){e===this.getSharedState("operation")&&this._setStylesFromOptions()}},{key:"sharedStateDidChange",value:function(e){e.operation&&(this._operation=e.operation,"mirrored-focus"===this._operation.constructor.identifier&&this._setStylesFromOptions())}},{key:"componentDidMount",value:function(){var e=this;(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this);var n=this.context.editor;n.zoom.set("auto",function(){n.features.disable("zoom","drag"),e._setStylesFromOptions()})}},{key:"_onCenterDragStart",value:function(){this._initialStart=this._operation.getStart(),this._initialEnd=this._operation.getEnd(),this._initialDist=this._initialEnd.clone().subtract(this._initialStart)}},{key:"_onCenterDrag",value:function(e){var t=this.context.editor,n=t.getOutputDimensions(),r=e.clone().divide(n),o=this._initialStart.clone().add(r).clamp(new i.Vector2(0,0),new i.Vector2(1,1).subtract(this._initialDist)),a=o.clone().add(this._initialDist);this._operation.set({start:o,end:a}),t.render(),this._setStylesFromOptions(),this.forceUpdate()}},{key:"_onKnobDragStart",value:function(e){this._initialKnobPosition=this.state.knobPosition.clone()}},{key:"_onKnobDrag",value:function(e){var t=this.context.editor,n=t.getOutputDimensions(),r=this._initialKnobPosition.clone().add(e).clamp(new i.Vector2(0,0),n),o=r.clone().subtract(this.state.areaPosition),a=this.state.areaPosition.clone().add(-o.y,o.x).divide(n),s=this.state.areaPosition.clone().add(o.y,-o.x).divide(n),l=2*o.len();this._operation.set({start:a,end:s,size:l/n.min(),gradientSize:l/n.min()}),this.setState({knobPosition:r,areaDimensions:new i.Vector2(this.state.areaDimensions.x,l)}),t.render()}},{key:"_getAreaStyle",value:function(){var e=this.state.knobPosition.clone().subtract(this.state.areaPosition),t="rotate("+(-(Math.atan2(e.x,e.y)*(180/Math.PI))).toFixed(2)+"deg)";return{width:this.state.areaDimensions.x,height:this.state.areaDimensions.y,left:this.state.areaPosition.x,top:this.state.areaPosition.y,marginLeft:-.5*this.state.areaDimensions.x,marginTop:-.5*this.state.areaDimensions.y,transform:t,MozTransform:t,msTransform:t,WebkitTransform:t}}},{key:"_getKnobStyle",value:function(){return{left:this.state.knobPosition.x,top:this.state.knobPosition.y}}},{key:"_setStylesFromOptions",value:function(){var e=this.context.editor.getOutputDimensions(),t=this._operation.getStart().clone().multiply(e),n=this._operation.getEnd().clone().multiply(e),r=this._operation.getSize()*e.min(),o=n.clone().subtract(t),a=t.clone().add(o.clone().divide(2)),s=new i.Vector2(2*e.len(),r),l=o.len(),c=o.clone().divide(l).divide(2);this.setState({areaDimensions:s,areaPosition:a.clone(),knobPosition:a.clone().add(-r*c.y,r*c.x)})}},{key:"_getContainerStyle",value:function(){var e=this.context.editor.getSDK().getSprite().getBounds();return{left:e.x,top:e.y,width:e.width,height:e.height}}},{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("div",{bem:"b:canvasControls e:container m:full",ref:"container",style:this._getContainerStyle()},i.ReactBEM.createElement("div",{bem:"$b:linearFocusCanvasControls"},i.ReactBEM.createElement(o.default,{onStart:this._onCenterDragStart,onDrag:this._onCenterDrag},i.ReactBEM.createElement("div",{bem:"e:area",style:this._getAreaStyle()})),i.ReactBEM.createElement(o.default,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag},i.ReactBEM.createElement("div",{bem:"e:knob $b:knob",style:this._getKnobStyle()}))))}}]),t}();t.default=l,l.contextTypes=a.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(5)),a=s(n(10));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return c._bindAll("_onCenterDragStart","_onCenterDrag","_onKnobDragStart","_onKnobDrag","_onOperationUpdated"),c.state={areaPosition:new i.Vector2,areaDimensions:new i.Vector2,knobPosition:new i.Vector2},c._knobChangedManually=!1,c._operation=c.getSharedState("operation"),c._events=(a={},s=i.Constants.EVENTS.OPERATION_UPDATED,l=c._onOperationUpdated,s in a?Object.defineProperty(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"_onCanvasZoomDone",value:function(){this._setStylesFromOptions()}},{key:"_onOperationUpdated",value:function(e){e===this.getSharedState("operation")&&(this._knobChangedManually=!1,this._setStylesFromOptions())}},{key:"sharedStateDidChange",value:function(e){e.operation&&(this._operation=e.operation,"radial-focus"===this._operation.constructor.identifier&&this._setStylesFromOptions())}},{key:"componentDidMount",value:function(){var e=this;(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this);var n=this.context.editor;n.zoom.set("auto",function(){n.features.disable("zoom","drag"),e._setStylesFromOptions()})}},{key:"_onCenterDragStart",value:function(){this._initialPosition=this._operation.getPosition(),this._initialKnobPosition=this.state.knobPosition.clone()}},{key:"_onCenterDrag",value:function(e){var t=this.context.editor,n=t.getOutputDimensions(),r=e.clone().divide(n),i=this._initialPosition.clone().add(r),o=this._initialKnobPosition.clone().add(e);this._operation.set({position:i}),this.state.knobPosition=o,t.render(),this._setStylesFromOptions()}},{key:"_onKnobDragStart",value:function(e){this._knobChangedManually=!0,this._initialKnobPosition=this.state.knobPosition.clone()}},{key:"_onKnobDrag",value:function(e){var t=this.context.editor,n=t.getOutputDimensions(),r=this._initialKnobPosition.clone().add(e).clamp(new i.Vector2(0,0),n),o=this._operation.getPosition().clone().multiply(n),a=r.clone().subtract(o).abs().len(),s=a/2;this.setState({knobPosition:r,areaDimensions:new i.Vector2(2*a,2*a)}),this._operation.set({radius:a/n.min(),gradientRadius:s/n.min()}),t.render()}},{key:"_getAreaStyle",value:function(){return{width:this.state.areaDimensions.x,height:this.state.areaDimensions.y,left:this.state.areaPosition.x,top:this.state.areaPosition.y,marginLeft:-.5*this.state.areaDimensions.x,marginTop:-.5*this.state.areaDimensions.y}}},{key:"_getKnobStyle",value:function(){return{left:this.state.knobPosition.x,top:this.state.knobPosition.y}}},{key:"_setStylesFromOptions",value:function(){var e=this.context.editor.getOutputDimensions(),t=this._operation.getPosition().clone().multiply(e),n=this._operation.getRadius()*e.min(),r=2*n,o={areaDimensions:new i.Vector2(r,r),areaPosition:t};this._knobChangedManually||(o.knobPosition=t.clone().add(n,0)),this.setState(o)}},{key:"_getContainerStyle",value:function(){var e=this.context.editor.getSDK().getSprite().getBounds();return{left:e.x,top:e.y,width:e.width,height:e.height}}},{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("div",{bem:"b:canvasControls e:container m:full",ref:"container",style:this._getContainerStyle()},i.ReactBEM.createElement("div",{bem:"$b:radialFocusCanvasControls"},i.ReactBEM.createElement(o.default,{onStart:this._onCenterDragStart,onDrag:this._onCenterDrag},i.ReactBEM.createElement("div",{bem:"e:area",style:this._getAreaStyle()})),i.ReactBEM.createElement(o.default,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag},i.ReactBEM.createElement("div",{bem:"e:knob $b:knob",style:this._getKnobStyle()}))))}}]),t}();t.default=l,l.contextTypes=a.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=l(n(4)),a=l(n(142)),s=l(n(144));function l(e){return e&&e.__esModule?e:{default:e}}var c=i.SDK.Operations.SpriteOperation,u=c.StickerSprite,f=c.BrushSprite,p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,null,[{key:"onExit",value:function(){var e=this.context.editor,t=this.getSharedState("operation");this.getSharedState("skipHistory")||e.history.add(t,this.getSharedState("initialOptions"),this.getSharedState("operationExistedBefore")),e.zoom.restore(),e.features.enable("zoom","drag"),e.render()}},{key:"onEnter",value:function(e){var t=this.context.editor,n=t.operations.exists("sprite"),r=t.operations.getOrCreate("sprite"),i=r.getSprites(),o=r.getSpritesOfType(u),a=r.serializeOptions();t.zoom.save(),t.zoom.set("auto"),t.features.disable("zoom","drag"),this.setSharedState({operationExistedBefore:n,operation:r,sprites:i,stickers:o,initialOptions:a})}},{key:"clickAtPosition",value:function(e,t){if(!t.operations.exists("sprite"))return!1;var n=t.operations.getOrCreate("sprite").getSpritesAtPosition(e,t.getOutputTextureDimensions()).filter(function(e){return!(e instanceof f)});return!!(n.length&&n[0]instanceof u)&&{selectedSprite:n[0]}}},{key:"isAvailable",value:function(e){return e.isToolAllowed("sticker")&&e.isToolEnabled("sticker")}}]),t}();p.controlsComponent=a.default,p.canvasControlsComponent=s.default,p.identifier="sticker",p.iconPath="controls/overview/sticker.png",p.languageKey="pesdk.sticker.title.name",p.defaultOptions={categories:null,replaceCategories:!1,availableStickers:null,tooltips:!1,hideCategories:!1,fixedRatio:!0,snapRotation:90,snapRotationTolerance:5,smoothDownscaling:!1},p.requiredOperations=["sprite"],p.getPreloadAssets=o.default.getPreloadAssets,t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=p(n(3)),s=p(n(2)),l=p(n(45)),c=p(n(1)),u=p(n(11)),f=p(n(143));function p(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return c._bindAll("_onStickerMouseLeave","_renderTooltipCanvas","_onCategoryChange","_onBeforeHistoryUndo"),c._events=(a={},s=o.Constants.EVENTS.HISTORY_BEFORE_UNDO,l=c._onBeforeHistoryUndo,s in a?Object.defineProperty(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c._operation=c.getSharedState("operation"),c._sprites=c.getSharedState("sprites"),c._stickers=c.getSharedState("stickers"),c._initStickerManager(),c.state={category:c._stickerManager.getCategory("all")},c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),i(t,[{key:"_onBeforeHistoryUndo",value:function(e){var t=e.operation,n=e.options;t===this.getSharedState("operation")&&(-1===n.sprites.indexOf(this.getSharedState("selectedSprite"))&&(this.setSharedState({skipHistory:!0},!1),this.props.onSwitchControls("home")))}},{key:"_onCategoryChange",value:function(e){var t=this;this.setState({category:e},function(){t.refs.scrollbar.update()})}},{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this.props.options.stickersJSONPath&&this._loadExternalStickers();var e=this.context.editor;e.zoom.set("auto",function(){e.features.disable("zoom","drag")})}},{key:"_loadExternalStickers",value:function(){var e=this,t=null,n=setTimeout(function(){t=c.default.instance.displayLoading(e._t("pesdk.common.text.loading"))},100),r=function(){n&&(clearTimeout(n),n=null),t&&t.close(),e._jsonLoaded=!0};this._stickerManager.loadExternal(this.props.options.stickersJSONPath).then(function(t){r(),e.forceUpdate(function(){e.refs.scrollbar.update()})}).catch(function(t){r(),c.default.instance.displayError(e._t("pesdk.sticker.title.loadingStickersFailed"),t.message).on("close",function(){e.props.onBack()})})}},{key:"_renderTooltipCanvas",value:function(){var e=this,t=this.state.hoveredSticker,n=new window.Image,r=t.images.mediaBase;n.addEventListener("load",function(){if(e.state.tooltipVisible&&e.state.hoveredSticker===t){void 0!==r.width&&void 0!==r.height&&(n.width=r.width,n.height=r.height);var i=e.refs.tooltipCanvas;i.width=i.offsetWidth,i.height=i.offsetHeight;var a=i.getContext("2d"),s=Math.min(i.width/n.width,i.height/n.height),l=new o.Vector2(n.width,n.height).multiply(s),c=new o.Vector2(i.width,i.height).divide(2).subtract(l.clone().divide(2));a.drawImage(n,0,0,n.width,n.height,c.x,c.y,l.x,l.y)}});var i=this._getAssetPath(u.default.getURLForSticker(t,"base"));n.crossOrigin=this.context.editor.getCrossOrigin(),n.src=i}},{key:"_initStickerManager",value:function(){this._stickerManager=new u.default(this.context.ui,this.props.options)}},{key:"_onBackClick",value:function(e){this._backButtonClicked=!0,this.props.onSwitchControls("home")}},{key:"_onStickerClick",value:function(e){var t=this,n=e.images.mediaBase,r=u.default.getURLForSticker(e,"base"),i=this._getAssetPath(r),a=new window.Image,s=void 0,l=setTimeout(function(){s=c.default.instance.displayLoading(t._t("pesdk.common.text.loading"))},100);a.addEventListener("load",function(){s&&s.close(),l&&(clearTimeout(l),l=null),void 0!==n.width&&void 0!==n.height&&(a.width=n.width,a.height=n.height);var r=t.context.editor,i=t._calculateInitialStickerScale(e,a),c=t._operation.createSticker({identifier:e.identifier,image:a,position:new o.Vector2(.5,.5),dimensions:new o.Vector2(a.width,a.height).multiply(i),rotation:0,smoothDownscaling:t.props.options.smoothDownscaling});t._operation.addSprite(c),t._stickers.push(c),r.render(function(){t.setSharedState({selectedSprite:c,sprites:t._sprites,stickers:t._stickers})})}),a.addEventListener("error",function(){s&&s.close(),l&&(clearTimeout(l),l=null),c.default.instance.displayError(t._t("pesdk.common.title.imageLoadFail"),t._t("pesdk.common.text.imageLoadFail",{path:a.src}))}),a.crossOrigin=this.context.editor.getCrossOrigin(),a.src=i}},{key:"_calculateInitialStickerScale",value:function(e,t){var n=this.getSharedState("operation").getInputDimensions(!1),r=new o.Vector2(t.width,t.height);return o.SDKUtils.resizeVectorToFit(r,n.clone().multiply(.5)).x/r.x}},{key:"_onStickerMouseEnter",value:function(e,t){var n=this;this.setState({tooltipVisible:!0,hoveredSticker:e,hoveredStickerElement:t.currentTarget},function(){n._renderTooltipCanvas(),n._updateTooltipPosition()})}},{key:"_updateTooltipPosition",value:function(){var e=this.state.hoveredStickerElement,t=this.refs.root,n=e.getBoundingClientRect(),r=t.getBoundingClientRect();this.setState({tooltipPosition:n.left-r.left})}},{key:"_onStickerMouseLeave",value:function(){this.setState({tooltipVisible:!1,hoveredSticker:null})}},{key:"_renderListItems",value:function(){var e=this,t=this.props.options,n=t.stickersJSONPath,i=t.replaceCategories;if(!n||!i||this._jsonLoaded)return this._stickerManager.getStickersForCategory(this.state.category.identifier).map(function(t,n){var i=e.props.options.tooltips?{onMouseEnter:e._onStickerMouseEnter.bind(e,t),onMouseLeave:e._onStickerMouseLeave}:null;return o.ReactBEM.createElement(f.default,r({sticker:t,onClick:e._onStickerClick.bind(e,t)},i))})}},{key:"_renderTooltip",value:function(){var e=this.props.options.tooltips&&this.state.tooltipVisible,t={left:this.state.tooltipPosition};return e?o.ReactBEM.createElement("div",{bem:"e:cell m:empty"},o.ReactBEM.createElement("div",{bem:"$b:stickersControls $e:tooltip",style:t},o.ReactBEM.createElement("canvas",{bem:"e:canvas",ref:"tooltipCanvas"}))):null}},{key:"_renderCategoryDropdown",value:function(){var e=this,t=this.props.options,n=t.stickersJSONPath,r=t.replaceCategories;if(!n||!r||this._jsonLoaded){var i=this._stickerManager.getCategories(!0);if(!(!this.props.options.hideCategories&&i.length>1))return null;var a=i.map(function(t){return{identifier:t.identifier,item:t,label:e._t("pesdk.sticker.asset."+t.identifier)||t.defaultName,icon:e._getAssetPath("controls/stickers/categories/"+t.identifier+".png",!0)}}),s=this.state.category,c={identifier:s.identifier,item:s,label:this._t("pesdk.sticker.asset."+s.identifier)||s.defaultName,icon:this._getAssetPath("controls/stickers/categories/"+s.identifier+".png",!0)};return o.ReactBEM.createElement("div",{bem:"e:cell m:categoryDropdown"},o.ReactBEM.createElement(l.default,{items:a,selectedItem:c,onChange:this._onCategoryChange}))}}},{key:"renderControls",value:function(){var e=this._renderListItems();return[this._renderTooltip(),this._renderCategoryDropdown(),o.ReactBEM.createElement("div",{bem:"e:cell m:list"},o.ReactBEM.createElement(s.default,{ref:"scrollbar"},o.ReactBEM.createElement("ul",{bem:"$e:list"},e)))]}}]),t}();t.default=d,d.contextTypes=a.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(11),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o.state={sticker:o.props.sticker},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"componentDidMount",value:function(){this._renderSticker()}},{key:"componentWillReceiveProps",value:function(e){var t=this;this.props.sticker!==e.sticker&&this.setState({sticker:e.sticker},function(){t._renderSticker()})}},{key:"_renderSticker",value:function(){var e=this.context.editor.getSDK(),t=this.props.sticker,n=t.images.mediaThumb,r=s.default.getURLForSticker(t,"thumb"),i=this._getAssetPath(r),a=this.refs["canvas-"+t.name],l=e.getPixelRatio();a.width=a.offsetWidth*l,a.height=a.offsetHeight*l,a.style.width=a.offsetWidth+"px",a.style.height=a.offsetHeight+"px";var c=a.getContext("2d"),u=new window.Image;u.addEventListener("load",function(){void 0===n.width||void 0===n.height||o.Utils.Browser.getIEVersion()||(u.width=n.width,u.height=n.height);var e=Math.min(a.width/u.width,a.height/u.height),t=new o.Vector2(u.width,u.height).multiply(e),r=new o.Vector2(a.width,a.height).divide(2).subtract(t.clone().divide(2));c.drawImage(u,0,0,u.width,u.height,r.x,r.y,t.x,t.y)}),u.crossOrigin=this.context.editor.getCrossOrigin(),u.src=i}},{key:"renderWithBEM",value:function(){return o.ReactBEM.createElement("li",{bem:"$b:stickersControls $e:item",key:this.props.sticker.name,onClick:this.props.onClick,onMouseEnter:this.props.onMouseEnter,onMouseLeave:this.props.onMouseLeave},o.ReactBEM.createElement("canvas",{bem:"e:canvas",ref:"canvas-"+this.props.sticker.name}))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(14)),a=s(n(148));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_renderOverlayControls",value:function(){if(this.getSharedState("selectedSprite"))return i.ReactBEM.createElement(a.default,{onFlip:this._onSpriteFlip,onTakeToFront:this._onSpriteTakeToFront,onRemove:this._onSpriteRemove})}}]),t}();t.default=l,l.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(5)),a=s(n(28));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onTextChange","_onItemDoubleClick","_onItemTouchStart","_onItemTouchEnd","_onResizeKnobDragStart","_onResizeKnobDrag","_onResizeKnobDragStop","_onRotationKnobDragStart","_onRotationKnobDrag","_onRotationKnobDragStop","_onBlur"),o.state={editMode:!1,text:o.props.sprite.getText()},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"componentWillReceiveProps",value:function(e){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentWillReceiveProps",this).call(this,e),e.sprite!==this.props.sprite&&(this.refs.textarea.blur(),this.setState({text:e.sprite.getText(),editMode:!1}))}},{key:"_onTextChange",value:function(e){this.props.sprite.setText(e.target.value),this.setState({text:e.target.value})}},{key:"_onItemDoubleClick",value:function(){this.enterEditMode()}},{key:"enterEditMode",value:function(){var e=this,t=this.props.sprite,n=this.context.editor;t.setVisible(!1),t._edited||(t.setText(""),this.refs.textarea.value="",t._edited=!0,this.setState({text:""})),this.setState({editMode:!0},function(){e.refs.textarea.focus(),e.refs.textarea.select()}),n.render()}},{key:"leaveEditMode",value:function(){var e=this.props.sprite,t=this.context.editor;e.setVisible(!0),t.render(),this.setState({editMode:!1})}},{key:"_onItemTouchStart",value:function(e){this._initialTouchPosition=i.Utils.getEventPosition(e),this._tapStartAt=(0,i.now)()}},{key:"_onItemTouchEnd",value:function(){(0,i.now)()-this._tapStartAt<=100&&(void 0!==this._lastTapAt&&(0,i.now)()-this._lastTapAt<=300&&this._onItemDoubleClick(),this._lastTapAt=(0,i.now)())}},{key:"_onRotationKnobDragStart",value:function(e,t){this._dragging=!0,this._initialPosition=this._getRotationKnobPosition(),this.props.onDragStart&&this.props.onDragStart()}},{key:"_onRotationKnobDrag",value:function(e,t){var n=this.props.sprite,r=this.context.editor,i=this._getAbsoluteSpritePosition(),o=this._initialPosition.clone().add(e).clone().subtract(i),a=n.getDimensions(r.getSDK(),r.getOutputDimensions()),s=Math.atan2(o.y/2,o.x/2)-Math.atan2(a.y/2,a.x/2);n.setRotation(s),r.render(),this.forceUpdate()}},{key:"_onRotationKnobDragStop",value:function(e){this.props.onDragStop&&this.props.onDragStop()}},{key:"_onResizeKnobDragStart",value:function(e,t){this._initialPosition=this._getResizeKnobPosition(),this.props.onDragStart&&this.props.onDragStart()}},{key:"_onResizeKnobDrag",value:function(e,t){var n=this.props.sprite,r=n.getRotation(),i=this.context.editor,o=i.getOutputDimensions(),a=Math.cos(r),s=Math.sin(r),l=this._initialPosition.clone().add(e),c=this._getAbsoluteSpritePosition(),u=l.clone().subtract(c),f=Math.max((u.x*a+u.y*s)/o.x*2,.1);n.setMaxWidth(f),i.render()}},{key:"_onResizeKnobDragStop",value:function(e){this.props.onDragStop&&this.props.onDragStop()}},{key:"_onBlur",value:function(){this.leaveEditMode()}},{key:"_getRotationKnobStyle",value:function(){var e=this._getRotationKnobPosition();return{left:e.x,top:e.y}}},{key:"_getResizeKnobStyle",value:function(){var e=this._getResizeKnobPosition();return{left:e.x,top:e.y}}},{key:"_getTextStyle",value:function(){var e=this.context.editor,t=this.props.sprite,n=e.getSDK(),r=e.getOutputDimensions(),i=t.getDOMStyle(n,r),o=this._getAbsoluteSpritePosition(),a=t.getDimensions(n,r);return i.height=Math.min(a.y,r.y-o.y),this.state.editMode||(i.display="none"),i}},{key:"_getItemContainerStyle",value:function(){var e=this.context.editor,t=this.props.sprite,n=e.getOutputDimensions(),r=t.getDimensions(e.getSDK(),n),i=t.getPosition().clone().multiply(n),o="rotateZ("+(180*t.getRotation()/Math.PI).toFixed(2)+"deg)",a=r.x,s=r.y;return{width:a,height:s,left:i.x-.5*a,top:i.y-.5*s,marginLeft:0,marginTop:0,transform:o,MozTransform:o,msTransform:o,WebkitTransform:o,transformOrigin:"50% 50%",MozTransformOrigin:"50% 50%",msTransformOrigin:"50% 50%",WebkitTransformOrigin:"50% 50%"}}},{key:"_getRotationKnobPosition",value:function(){var e=this.props.sprite,t=this.context.editor,n=Math.sin(e.getRotation()),r=Math.cos(e.getRotation()),i=t.getOutputDimensions(),o=e.getDimensions(t.getSDK(),i).clone().divide(2);return e.getPosition().clone().multiply(i).add(o.x*r-o.y*n,o.x*n+o.y*r)}},{key:"_getResizeKnobPosition",value:function(){var e=this.props.sprite,t=this.context.editor,n=Math.sin(e.getRotation()),r=Math.cos(e.getRotation()),i=t.getOutputDimensions(),o=e.getDimensions(t.getSDK(),i).clone().divide(2);return e.getPosition().clone().multiply(i).add(o.x*r+o.y*n,o.x*n-o.y*r)}},{key:"_renderKnobs",value:function(){var e=[];return this.props.selected&&!this.state.editMode&&(e=[i.ReactBEM.createElement(o.default,{onStart:this._onRotationKnobDragStart,onDrag:this._onRotationKnobDrag,onStop:this._onRotationKnobDragStop},i.ReactBEM.createElement("div",{bem:"e:knob m:rotate $b:knob",style:this._getRotationKnobStyle()},i.ReactBEM.createElement("img",{bem:"e:icon m:larger",src:this._getAssetPath("controls/knobs/rotate.png",!0)}))),i.ReactBEM.createElement(o.default,{onStart:this._onResizeKnobDragStart,onDrag:this._onResizeKnobDrag,onStop:this._onResizeKnobDragStop},i.ReactBEM.createElement("div",{bem:"e:knob m:resize $b:knob",style:this._getResizeKnobStyle()},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/knobs/resize-diagonal-up.png",!0)})))]),e}},{key:"_renderItem",value:function(){var e=this._getItemContainerStyle(),t=i.ReactBEM.createElement("textarea",{bem:"e:content",ref:"textarea",style:this._getTextStyle(),value:this.state.text,disabled:!this.state.editMode,onBlur:this._onBlur,onChange:this._onTextChange});return i.ReactBEM.createElement("bem",{specifier:"e:text"},i.ReactBEM.createElement("div",{bem:"e:container",style:e},t))}},{key:"_renderSelectedOverlay",value:function(){var e=[];this.props.selected&&e.push("is-selected"),this.state.editMode&&e.push("is-disabled"),e=e.join(" ");var t=this._getItemContainerStyle();return i.ReactBEM.createElement("bem",{specifier:"e:text"},i.ReactBEM.createElement(o.default,{onStart:this._onItemDragStart,onStop:this._onItemDragStop,onDrag:this._onItemDrag,disabled:!this.props.selected||this.props.selected&&this.state.editMode},i.ReactBEM.createElement("div",{bem:"e:selectedOverlay",onDoubleClick:this._onItemDoubleClick,onTouchStart:this._onItemTouchStart,onTouchEnd:this._onItemTouchEnd,style:t,className:e})))}},{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("bem",{specifier:"b:spritesCanvasControls"},i.ReactBEM.createElement("div",{bem:"$e:item e:container"},this._renderItem(),this._renderSelectedOverlay(),this._renderKnobs()))}}]),t}();t.default=l,l.contextTypes=a.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(5)),a=s(n(28));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return a._bindAll("_onRotateKnobDragStart","_onRotateKnobDrag","_onRotateKnobDragStop"),a._id=i.SDKUtils.getUUID(),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,[{key:"_onKnobDragStart",value:function(e,t,n){var r=this.props.sprite;switch(e){case"bottom":this._initialPosition=this._getBottomDragKnobPosition();break;case"top":this._initialPosition=this._getTopDragKnobPosition()}this._initialDimensions=r.getDimensions().clone(),this.props.onDragStart&&this.props.onDragStart()}},{key:"_onKnobDrag",value:function(e,t,n){var r=this.props.sprite,o=this.context.editor,a=this._getAbsoluteSpritePosition(),s=this._initialPosition.clone().add(t).clone().subtract(a),l=this._initialPosition.clone().subtract(a);if(this.props.options.fixedRatio){var c=this._getStickerDimensions().divide(2).abs(),u=this._initialPosition.clone().subtract(a),f=void 0;switch(e){case"bottom":f=Math.atan2(s.y,s.x)-Math.atan2(c.y,c.x);break;case"top":f=Math.atan2(s.y,s.x)-Math.atan2(-c.y,-c.x)}var p=this._initialDimensions.clone().multiply(s.len()/u.len()),d=this.props.options,h=d.snapRotation,_=d.snapRotationTolerance,m=Math.round(180*f/Math.PI),y=Math.round(m/h)*h,g=m-y;Math.abs(g)<_&&(f=y*Math.PI/180),r.set({dimensions:p,rotation:f})}else{var v=this.context.editor.zoom.get(),b=r.getRotation(),k=Math.cos(-1*b),w=Math.sin(-1*b),O=new i.Vector2(s.x*k-s.y*w,s.x*w+s.y*k),E=new i.Vector2(l.x*k-l.y*w,l.x*w+l.y*k),S=void 0;switch(e){case"bottom":S=O.clone().subtract(E);break;case"top":S=E.clone().subtract(O)}var P=this._initialDimensions.clone().add(S.clone().divide(v).multiply(2));r.set({dimensions:P})}o.render()}},{key:"_onKnobDragStop",value:function(){this.props.onDragStop&&this.props.onDragStop()}},{key:"_onRotateKnobDragStart",value:function(e,t){this._initialPosition=this._getRotateKnobPosition(),this.props.onDragStart&&this.props.onDragStart()}},{key:"_onRotateKnobDragStop",value:function(){this.props.onDragStop&&this.props.onDragStop()}},{key:"_onRotateKnobDrag",value:function(e,t){var n,r=this.props.sprite,i=this.context.editor,o=this._getAbsoluteSpritePosition(),a=this._initialPosition.clone().add(e),s=this._getStickerDimensions().divide(2),l=a.clone().subtract(o);n=Math.atan2(l.y,l.x)-Math.atan2(-s.y,s.x),r.set({rotation:n}),i.render()}},{key:"_getBottomDragKnobStyle",value:function(){var e=this._getBottomDragKnobPosition();return{left:e.x,top:e.y}}},{key:"_getTopDragKnobStyle",value:function(){var e=this._getTopDragKnobPosition();return{left:e.x,top:e.y}}},{key:"_getRotateKnobStyle",value:function(){var e=this._getRotateKnobPosition();return{left:e.x,top:e.y}}},{key:"_getStickerStyle",value:function(){var e=this.props.sprite,t=this._getStickerDimensions().abs(),n=this._getAbsoluteSpritePosition().subtract(t.clone().divide(2)),r="rotate("+(180*e.getRotation()/Math.PI).toFixed(2)+"deg)",i=e.getDimensions(),o=e.getFlipVertically();i.y<0&&(o=!o),o&&(r+=" scaleY(-1)");var a=e.getFlipHorizontally();return i.x<0&&(a=!a),a&&(r+=" scaleX(-1)"),{top:n.y,left:n.x,width:t.x,height:t.y,WebkitTransform:r,msTransform:r,MozTransform:r,OTransform:r}}},{key:"_getStickerDimensions",value:function(){var e=this.props.sprite,t=this.context.editor;return e.getDimensions().clone().multiply(t.zoom.get())}},{key:"_getRotateKnobPosition",value:function(){var e=this.props.sprite,t=this._getAbsoluteSpritePosition(),n=e.getRotation(),r=Math.sin(n||0),i=Math.cos(n||0),o=this._getStickerDimensions().divide(2);return t.clone().add(o.x*i+o.y*r,o.x*r-o.y*i)}},{key:"_getBottomDragKnobPosition",value:function(){var e=this.props.sprite,t=this._getAbsoluteSpritePosition(),n=e.getRotation(),r=Math.sin(n||0),i=Math.cos(n||0),o=this._getStickerDimensions().divide(2);return t.clone().add(o.x*i-o.y*r,o.x*r+o.y*i)}},{key:"_getTopDragKnobPosition",value:function(){var e=this.props.sprite,t=this._getAbsoluteSpritePosition(),n=e.getRotation(),r=Math.sin(n||0),i=Math.cos(n||0),o=this._getStickerDimensions(e).divide(2);return t.clone().subtract(o.x*i-o.y*r,o.x*r+o.y*i)}},{key:"_renderKnobs",value:function(){var e=[];return this.props.selected&&(e=[i.ReactBEM.createElement(o.default,{onStart:this._onKnobDragStart.bind(this,"bottom"),onStop:this._onKnobDragStop.bind(this,"bottom"),onDrag:this._onKnobDrag.bind(this,"bottom")},i.ReactBEM.createElement("div",{bem:"e:knob $b:knob",style:this._getBottomDragKnobStyle()},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/knobs/resize-diagonal-down.png",!0)}))),i.ReactBEM.createElement(o.default,{onStart:this._onKnobDragStart.bind(this,"top"),onStop:this._onKnobDragStop.bind(this,"top"),onDrag:this._onKnobDrag.bind(this,"top")},i.ReactBEM.createElement("div",{bem:"e:knob $b:knob",style:this._getTopDragKnobStyle()},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/knobs/resize-diagonal-down.png",!0)})))],this.props.options.fixedRatio||e.push(i.ReactBEM.createElement(o.default,{onStart:this._onRotateKnobDragStart,onStop:this._onRotateKnobDragStop,onDrag:this._onRotateKnobDrag},i.ReactBEM.createElement("div",{bem:"e:knob $b:knob",style:this._getRotateKnobStyle()},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/knobs/rotate.png",!0)}))))),e}},{key:"_renderSVGFilter",value:function(){if(this.props.hideContent)return null;var e=this.props.sprite.getAdjustments(),t=e.getBrightness(),n=e.getSaturation(),r=e.getContrast(),o="<filter id='pesdk-sticker-"+this._id+"-filter'>\n        <feComponentTransfer>\n          <feFuncR type='linear' intercept='"+t+"' />\n          <feFuncG type='linear' intercept='"+t+"' />\n          <feFuncB type='linear' intercept='"+t+"' />\n        </feComponentTransfer>\n        <feColorMatrix type='saturate' values='"+n+"' />\n        <feComponentTransfer>\n          <feFuncR type='linear' slope='"+r+"' intercept='"+(-.5*r+.5)+"' />\n          <feFuncG type='linear' slope='"+r+"' intercept='"+(-.5*r+.5)+"' />\n          <feFuncB type='linear' slope='"+r+"' intercept='"+(-.5*r+.5)+"' />\n        </feComponentTransfer>\n      </filter>";return i.ReactBEM.createElement("svg",{width:"0",height:"0","color-interpolation-filters":"sRGB",is:"svg"},i.ReactBEM.createElement("defs",{key:Math.random(),dangerouslySetInnerHTML:{__html:o}}))}},{key:"_renderSelectedOverlay",value:function(){var e=[];this.props.selected&&e.push("is-selected"),e=e.join(" ");var t=this._getStickerStyle();return i.ReactBEM.createElement("bem",{specifier:"e:text"},i.ReactBEM.createElement(o.default,{onStart:this._onItemDragStart,onStop:this._onItemDragStop,onDrag:this._onItemDrag,disabled:!this.props.selected},i.ReactBEM.createElement("div",{bem:"e:selectedOverlay",onDoubleClick:this._onItemDoubleClick,onTouchStart:this._onItemTouchStart,onTouchEnd:this._onItemTouchEnd,style:t,className:e})))}},{key:"_renderItem",value:function(){if(this.props.hideContent)return null;var e=this.props.sprite,t=this._getStickerStyle(),n={filter:'url("'+window.location.href.replace(window.location.hash,"")+"#pesdk-sticker-"+this._id+'-filter")'},r={width:t.width,height:t.height};return i.ReactBEM.createElement("bem",{specifier:"e:sticker"},i.ReactBEM.createElement("div",{bem:"e:container",style:t},i.ReactBEM.createElement("svg",{width:parseInt(t.width),height:parseInt(t.height),"color-interpolation-filters":"sRGB",is:"svg",style:r,preserveAspectRatio:"none"},i.ReactBEM.createElement("image",{xlinkHref:e.getImage().src,width:t.width,height:t.height,style:n,preserveAspectRatio:"none"}))))}},{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("bem",{specifier:"b:spritesCanvasControls"},i.ReactBEM.createElement("div",{bem:"$e:item e:container"},this._renderSVGFilter(),this._renderItem(),this._renderSelectedOverlay(),this._renderKnobs()))}}]),t}();t.default=l,l.contextTypes=a.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(28),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default),i(t,[{key:"componentDidMount",value:function(){if(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),!this.props.hideContent){var e=this.props.sprite.getCanvas();this._appendCanvas(e)}}},{key:"componentWillReceiveProps",value:function(e){if(!this.props.hideContent&&e.sprite!==this.props.sprite){var t=this.props.sprite.getCanvas();t.parentNode.removeChild(t);var n=e.sprite.getCanvas();this._appendCanvas(n)}}},{key:"_isSelected",value:function(){return this.getSharedState("brush")===this.props.sprite}},{key:"_appendCanvas",value:function(e){var t=this.context.editor.getOutputDimensions();e.style.width=t.x+"px",e.style.height=t.y+"px",this.refs.brush.appendChild(e)}},{key:"renderWithBEM",value:function(){if(this.props.hideContent)return null;var e=this._isSelected()?"is-selected":null;return o.ReactBEM.createElement("bem",{specifier:"b:spritesCanvasControls"},o.ReactBEM.createElement("div",{bem:"$e:item e:container m:full",ref:"container"},o.ReactBEM.createElement("div",{bem:"$e:brush",className:e,ref:"brush"})))}}]),t}();t.default=l,l.contextTypes=s.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onFlipClick",value:function(e,t){t.preventDefault(),t.stopPropagation(),this.props.onFlip&&this.props.onFlip(e)}},{key:"_onTakeToFrontClick",value:function(e){e.preventDefault(),e.stopPropagation(),this.props.onTakeToFront&&this.props.onTakeToFront()}},{key:"_onRemoveClick",value:function(e){e.preventDefault(),e.stopPropagation(),this.props.onRemove&&this.props.onRemove()}},{key:"_renderItems",value:function(){return[i.ReactBEM.createElement("div",{bem:"$e:item",onClick:this._onFlipClick.bind(this,"h")},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/sprites/flip-h.png",!0)})),i.ReactBEM.createElement("div",{bem:"$e:item",onClick:this._onFlipClick.bind(this,"v")},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/sprites/flip-v.png",!0)})),i.ReactBEM.createElement("div",{bem:"$e:item",onClick:this._onTakeToFrontClick.bind(this)},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/sprites/take-to-front.png",!0)})),i.ReactBEM.createElement("div",{bem:"$e:separator"}),i.ReactBEM.createElement("div",{bem:"$e:item",onClick:this._onRemoveClick.bind(this)},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/sprites/remove.png",!0)}))]}},{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("div",{bem:"$b:spritesControlsOverlay"},this._renderItems())}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=c(n(4)),a=c(n(150)),s=c(n(152)),l=c(n(15));function c(e){return e&&e.__esModule?e:{default:e}}var u=i.SDK.Operations.SpriteOperation,f=u.TextSprite,p=u.BrushSprite,d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"saveTextSettings",value:function(){var e=this.getSharedState("selectedSprite");e&&this.setGlobalToolState("text",e.serializeOptions(["color","backgroundColor","characterSpacing","lineHeight","alignment","fontIdentifier","fontFamily","fontWeight","fontStyle"]))}}],[{key:"onExit",value:function(){var e=this.context.editor,t=this.getSharedState("operation");this.saveTextSettings(),this.getSharedState("skipHistory")||e.history.add(t,this.getSharedState("initialOptions"),this.getSharedState("operationExistedBefore")),e.zoom.restore(),e.features.enable("zoom","drag"),e.render()}},{key:"onEnter",value:function(e,t){var n=this.context,r=n.editor,i=n.ui,o=r.operations.exists("sprite"),a=r.operations.getOrCreate("sprite"),s=a.getSprites(),c=a.serializeOptions(),u=new l.default(i,t),f=u.getDefaultVariation();this.setSharedState({operationExistedBefore:o,operation:a,sprites:s,initialOptions:c,fontManager:u,defaultFontVariation:f,fonts:u.getFonts()}),r.zoom.save(),r.render()}},{key:"clickAtPosition",value:function(e,t){if(!t.operations.exists("sprite"))return!1;var n=t.operations.getOrCreate("sprite").getSpritesAtPosition(e,t.getOutputTextureDimensions()).filter(function(e){return!(e instanceof p)});return!!(n.length&&n[0]instanceof f)&&{selectedSprite:n[0]}}},{key:"isAvailable",value:function(e){return e.isToolAllowed("text")&&e.isToolEnabled("text")}},{key:"getPreloadAssets",value:function(e){return["controls/text/align_left.png","controls/text/align_right.png","controls/text/align_center.png","controls/text/minus.png","controls/text/plus.png"]}}]),t}();d.controlsComponent=s.default,d.canvasControlsComponent=a.default,d.identifier="text",d.iconPath="controls/overview/text.png",d.languageKey="pesdk.text.title.name",d.defaultOptions={fonts:[],replaceFonts:!1,availableVariations:null},d.requiredOperations=["sprite"],t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(14)),a=s(n(151));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onTextEdit"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_onItemBlur",value:function(){var e=this.getSharedState("selectedSprite");e&&""===e.getText()&&(e.setText(this._t("pesdk.text.placeholder.defaultText")),e._edited=!1)}},{key:"_onSpriteRemove",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_onSpriteRemove",this).call(this),this.props.onSwitchControls("home")}},{key:"_onTextEdit",value:function(){var e=this.getSharedState("selectedSprite");this.refs["sprite-"+e.getId()].enterEditMode()}},{key:"_renderOverlayControls",value:function(){if(this.getSharedState("selectedSprite"))return i.ReactBEM.createElement(a.default,{onTakeToFront:this._onSpriteTakeToFront,onRemove:this._onSpriteRemove,onEdit:this._onTextEdit})}}]),t}();t.default=l,l.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onEditClick",value:function(e){e.preventDefault(),e.stopPropagation(),this.props.onEdit&&this.props.onEdit()}},{key:"_onTakeToFrontClick",value:function(e){e.preventDefault(),e.stopPropagation(),this.props.onTakeToFront&&this.props.onTakeToFront()}},{key:"_onRemoveClick",value:function(e){e.preventDefault(),e.stopPropagation(),this.props.onRemove&&this.props.onRemove()}},{key:"_renderItems",value:function(){var e=[i.ReactBEM.createElement("div",{bem:"$e:item",onClick:this._onTakeToFrontClick.bind(this)},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/sprites/take-to-front.png",!0)}))];return i.Utils.isTouchDevice()&&(e=e.concat([i.ReactBEM.createElement("div",{bem:"$e:separator"}),i.ReactBEM.createElement("div",{bem:"$e:item",onClick:this._onEditClick.bind(this)},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/sprites/edit.png",!0)}))])),e=e.concat([i.ReactBEM.createElement("div",{bem:"$e:separator"}),i.ReactBEM.createElement("div",{bem:"$e:item",onClick:this._onRemoveClick.bind(this)},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/sprites/remove.png",!0)}))])}},{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("div",{bem:"$b:spritesControlsOverlay"},this._renderItems())}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=d(n(3)),s=d(n(2)),l=d(n(29)),c=d(n(6)),u=d(n(46)),f=d(n(157)),p=d(n(1));function d(e){return e&&e.__esModule?e:{default:e}}var h=["left","center","right"],_=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return c._bindAll("_onFontSizeChange","_onFontChange","_onAlignmentClick","_onTakeToFrontClick","_onForegroundColorChange","_onBackgroundColorChange","_onBeforeHistoryUndo"),c._events=(a={},s=o.Constants.EVENTS.HISTORY_BEFORE_UNDO,l=c._onBeforeHistoryUndo,s in a?Object.defineProperty(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c._operation=c.getSharedState("operation"),c._fontLoader=c.context.ui.getFontLoader(),c._fontLoader.setFonts(c.getSharedState("fonts")),c.state={mode:null,loading:!0},c.context.editor.render(),c._fonts=c.getSharedState("fonts"),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),i(t,[{key:"componentDidMount",value:function(){var e=this;(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this);var n=this.context.editor;n.zoom.set("auto",function(){n.features.disable("zoom","drag")});var r=function(){e._createText(),e.setState({loading:!1})};this._fontLoader.needsToLoad()?this._loadFonts().then(r.bind(this)):r()}},{key:"_loadFonts",value:function(){var e=this,t=p.default.instance.displayLoading(this._t("pesdk.common.text.loading"));return this._fontLoader.load().then(function(){t.close()}).catch(function(n){t.close(),p.default.instance.displayWarning(e._t("pesdk.text.title.loadingFontsFailed"),e._t("pesdk.text.text.loadingFontsFailed"))})}},{key:"_createText",value:function(){var e=this.context.editor,t=this.getSharedState("selectedSprite"),n=this.getSharedState("operation"),i=this.getSharedState("fontManager"),a=this.getGlobalToolState("text"),s=a?this.getSharedState("defaultFontVariation"):i.getDefaultVariation(),l=e.getOutputDimensions();if(!t){var c=e.getSDK().getRenderer().getMaxTextureSize(),u=n.createText(r({fontIdentifier:s.getIdentifier(),text:this._t("pesdk.text.placeholder.defaultText"),position:new o.Vector2(.5,.5),pivot:new o.Vector2(.5,.5),maxWidth:.5,maxHeight:c?c/l.y:3,fontSize:.08,fontFamily:s.getFont().getFontFamily(),fontWeight:s.getFontWeight(),fontStyle:s.getFontStyle(),alignment:"center"},a||{}));n.addSprite(u),this.setSharedState({selectedSprite:u}),e.render()}}},{key:"_onBeforeHistoryUndo",value:function(e){var t=e.operation,n=e.options;t===this.getSharedState("operation")&&(-1===n.sprites.indexOf(this.getSharedState("selectedSprite"))&&(this.setSharedState({skipHistory:!0},!1),this.props.onSwitchControls("home")))}},{key:"_onBackClick",value:function(e){var t=this.context.editor;this.saveTextSettings(),t.render(),this._backButtonClicked=!0,this.props.onSwitchControls("home")}},{key:"saveTextSettings",value:function(){var e=this.getSharedState("selectedSprite");e&&this.setGlobalToolState("text",e.serializeOptions(["color","backgroundColor","characterSpacing","lineHeight","alignment","fontIdentifier","fontFamily","fontWeight","fontStyle"]))}},{key:"sharedStateDidChange",value:function(e){"selectedSprite"in e&&this.forceUpdate()}},{key:"_onFontSizeChange",value:function(e){var t=this.context.editor,n=this.context.editor.getOutputDimensions();this.getSharedState("selectedSprite").setFontSize(e/n.y),this.forceUpdate(),t.render()}},{key:"_onFontChange",value:function(e){var t=this.context.editor,n=this.getSharedState("selectedSprite");n.setFontFamily(e.getFont().getFontFamily()),n.setFontWeight(e.getFontWeight()),n.setFontStyle(e.getFontStyle()),n.setFontIdentifier(e.getIdentifier()),this.forceUpdate(),t.render()}},{key:"_onAlignmentClick",value:function(e){var t=this.context.editor,n=this.getSharedState("selectedSprite"),r=n.getAlignment(),i=(h.indexOf(r)+1)%h.length,o=h[i];n.setAlignment(o),this.forceSharedUpdate(),t.render()}},{key:"_onTakeToFrontClick",value:function(e){var t=this.context.editor;this.getSharedState("operation").takeSpriteToFront(this.getSharedState("selectedSprite")),this.forceSharedUpdate(),t.render()}},{key:"_onForegroundColorChange",value:function(e){var t=this.context.editor;this.getSharedState("selectedSprite").setColor(e),t.render()}},{key:"_onBackgroundColorChange",value:function(e){var t=this.context.editor;this.getSharedState("selectedSprite").setBackgroundColor(e),t.render()}},{key:"_switchToMode",value:function(e){e===this.state.mode&&(e=null),this.setState({mode:e})}},{key:"renderOverlayControls",value:function(){switch(this.state.mode){case"size":return this._renderFontSizeOverlayControl();case"font":return this._renderFontFamilyOverlayControl();default:return null}}},{key:"_renderFontSizeOverlayControl",value:function(){var e=this.getSharedState("selectedSprite");if(e){var t=this.context.editor.getOutputDimensions(),n=Math.round(t.y),r=Math.round(e.getFontSize()*t.y);return o.ReactBEM.createElement(c.default,{value:r,minValue:.05*t.y,maxValue:n,label:this._t("pesdk.text.button.size"),onChange:this._onFontSizeChange})}}},{key:"_renderSizeItem",value:function(){var e=this.getSharedState("selectedSprite");if(e){var t=this.context.editor.getOutputDimensions(),n=e.getFontSize(),r="size"===this.state.mode?"is-active":null;return o.ReactBEM.createElement("li",{bem:"e:item",key:"size"},o.ReactBEM.createElement("bem",{specifier:"$b:controls"},o.ReactBEM.createElement("div",{bem:"$e:button m:withLabel",className:r,"data-identifier":"fontSize",onClick:this._switchToMode.bind(this,"size")},o.ReactBEM.createElement("div",{bem:"b:fontSize e:text"},Math.round(n*t.y)),o.ReactBEM.createElement("div",{bem:"e:label"},this._t("pesdk.text.button.size")))))}}},{key:"_renderFontFamilyOverlayControl",value:function(){var e=this.getSharedState("selectedSprite");if(e)return o.ReactBEM.createElement(f.default,{fontFamily:e.getFontFamily(),fontWeight:e.getFontWeight(),fontStyle:e.getFontStyle(),fonts:this._fonts,onChange:this._onFontChange})}},{key:"_renderFontItem",value:function(){var e=this.getSharedState("selectedSprite");if(e){var t="font"===this.state.mode?"is-active":null;return o.ReactBEM.createElement("li",{bem:"e:item",key:"font"},o.ReactBEM.createElement("bem",{specifier:"$b:controls"},o.ReactBEM.createElement("div",{bem:"$e:button m:withLabel",className:t,"data-identifier":"font",onClick:this._switchToMode.bind(this,"font")},o.ReactBEM.createElement(u.default,{fontFamily:e.getFontFamily(),fontWeight:e.getFontWeight(),fontStyle:e.getFontStyle()}),o.ReactBEM.createElement("div",{bem:"e:label"},this._t("pesdk.text.button.font")))))}}},{key:"_renderAlignmentItem",value:function(){var e=this.getSharedState("selectedSprite");if(e){var t=e.getAlignment();return o.ReactBEM.createElement("li",{bem:"e:item",key:"alignment"},o.ReactBEM.createElement("bem",{specifier:"$b:controls"},o.ReactBEM.createElement("div",{bem:"$e:button m:withLabel",onClick:this._onAlignmentClick,"data-identifier":"alignment"},o.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/text/align_"+t+".png",!0)}),o.ReactBEM.createElement("div",{bem:"e:label"},this._t("pesdk.text.button.alignment")))))}}},{key:"_renderTakeToFrontItem",value:function(){return o.ReactBEM.createElement("li",{bem:"e:item",key:"takeToFront"},o.ReactBEM.createElement("bem",{specifier:"$b:controls"},o.ReactBEM.createElement("div",{bem:"$e:button m:withLabel",onClick:this._onTakeToFrontClick},o.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/sprites/take_to_front.png",!0)}),o.ReactBEM.createElement("div",{bem:"e:label"},this._t("pesdk.text.button.takeToFront")))))}},{key:"renderControls",value:function(){if(this.state.loading)return o.ReactBEM.createElement("div",null);var e=[this._renderSizeItem(),this._renderFontItem(),this._renderAlignmentItem()],t=this.getSharedState("selectedSprite"),n=t.getColor().clone(),r=t.getBackgroundColor().clone();return[o.ReactBEM.createElement("div",{bem:"e:cell m:list"},o.ReactBEM.createElement(s.default,{ref:"scrollbar"},o.ReactBEM.createElement("ul",{bem:"$e:list"},e))),o.ReactBEM.createElement("div",{bem:"e:cell m:colorPicker"},o.ReactBEM.createElement(l.default,{initialValue:n,label:this._t("pesdk.text.button.foreground"),onChange:this._onForegroundColorChange})),o.ReactBEM.createElement("div",{bem:"e:cell m:colorPicker"},o.ReactBEM.createElement(l.default,{initialValue:r,label:this._t("pesdk.text.button.background"),onChange:this._onBackgroundColorChange}))]}}]),t}();t.default=_,_.contextTypes=a.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=n(0),a=c(n(154)),s=c(n(155)),l=c(n(156));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));o._value=o.props.initialValue.clone();var a=o._value.toHSV(),s=a[0],l=a[1],c=a[2];return o._hsv={h:s,s:l,v:c},o._bindAll("_onElementClick","_onColorChange","_onDocumentClick"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),r(t,[{key:"componentDidMount",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),document.addEventListener("click",this._onDocumentClick)}},{key:"componentWillUnmount",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentWillUnmount",this).call(this),document.removeEventListener("click",this._onDocumentClick)}},{key:"_onDocumentClick",value:function(e){for(var t=e.target;t;t=t.parentNode)if(t===this.refs.root)return;this.props.onClose&&this.props.onClose()}},{key:"_onElementClick",value:function(e){e.stopPropagation()}},{key:"_onColorChange",value:function(e){this._value=e,this.props.onChange&&this.props.onChange(e)}},{key:"renderWithBEM",value:function(){var e=void 0;return!1!==this.props.alpha&&(e=o.ReactBEM.createElement(a.default,{initialValue:this._value,onChange:this._onColorChange})),o.ReactBEM.createElement("div",{bem:"$b:colorPicker $e:overlay",onClick:this._onElementClick,ref:"root"},e,o.ReactBEM.createElement("div",{bem:"e:bottom"},o.ReactBEM.createElement(s.default,{initialValue:this._value,onChange:this._onColorChange}),o.ReactBEM.createElement(l.default,{initialValue:this._value,onChange:this._onColorChange})))}}]),t}();t.default=u,u.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(5),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return a._bindAll("_onKnobDrag","_onKnobDragStart"),a._value=a.props.initialValue.clone(),a._transparentPatternCanvas=o.Utils.createTransparentPatternCanvas(),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._renderCanvas()}},{key:"shouldComponentUpdate",value:function(e){var t=e.initialValue;return t!==this._value&&(this._value=t.clone(),this._renderCanvas(),!0)}},{key:"_onKnobDragStart",value:function(e,t){t.target===this.refs.knob?this._initialAlpha=this._value.a:this._setAlphaFromPosition(e)}},{key:"_onKnobDrag",value:function(e,t){var n=this.refs.canvas.offsetWidth,r=e.x/n;this._setAlpha(this._initialAlpha+r)}},{key:"_getKnobStyle",value:function(){return{left:(100*this._value.a).toFixed(2)+"%",top:"50%"}}},{key:"_setAlpha",value:function(e){this._value.a=e,this._value.a=Math.min(1,Math.max(0,this._value.a)),this.forceUpdate(),this.props.onChange&&this.props.onChange(this._value)}},{key:"_setAlphaFromPosition",value:function(e){var t=this.refs.canvas;this._initialAlpha=e.x/t.offsetWidth,this._setAlpha(this._initialAlpha)}},{key:"_renderCanvas",value:function(){var e=this.refs.canvas,t=e.getContext("2d");e.width=e.offsetWidth,e.height=e.offsetHeight;var n=t.createPattern(this._transparentPatternCanvas,"repeat");t.fillStyle=n,t.fillRect(0,0,e.width,e.height);var r=t.createLinearGradient(0,0,e.width,e.height),i=this._value.clone();i.a=0,r.addColorStop(0,i.toRGBA()),r.addColorStop(1,this._value.toHex()),t.fillStyle=r,t.fillRect(0,0,e.width,e.height)}},{key:"renderWithBEM",value:function(){return o.ReactBEM.createElement("div",{bem:"$b:colorPicker $e:alpha"},o.ReactBEM.createElement(s.default,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag},o.ReactBEM.createElement("div",null,o.ReactBEM.createElement("canvas",{bem:"e:canvas",ref:"canvas"}),o.ReactBEM.createElement("div",{bem:"e:knob $b:knob m:transparent",ref:"knob",style:this._getKnobStyle()}))))}}]),t}();t.default=l,l.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(5),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));o._bindAll("_onKnobDrag","_onKnobDragStart"),o._value=o.props.initialValue.clone();var a=o._value.toHSV(),s=a[0],l=a[1],c=a[2];return o._hsvColor={h:s,s:l,v:c},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._renderCanvas()}},{key:"shouldComponentUpdate",value:function(e){var t=e.initialValue;if(t!==this._value){this._value=t.clone();var n=this._value.toHSV(),r=n[0],i=n[1],o=n[2];return this._hsvColor={h:r,s:i,v:o},this._renderCanvas(),!0}return!1}},{key:"_onKnobDragStart",value:function(e,t){t.target===this.refs.knob?(this._initialValue=this._hsvColor.v,this._initialSaturation=this._hsvColor.s):this._setValuesFromPosition(e)}},{key:"_onKnobDrag",value:function(e,t){var n=this.refs.canvas,r=n.offsetWidth,i=n.offsetHeight,o=e.x/r,a=e.y/i*-1,s=this._hsvColor.h;this._setHSV(s,this._initialSaturation+o,this._initialValue+a)}},{key:"_getKnobStyle",value:function(){var e=this._hsvColor,t=e.s,n=e.v;return{left:(100*t).toFixed(2)+"%",top:(100*(1-n)).toFixed(2)+"%"}}},{key:"_setHSV",value:function(e,t,n){t=Math.max(.01,Math.min(t,.99)),n=Math.max(.01,Math.min(n,.99)),this._value=o.Color.fromHSV(e,t,n,this._value.a),this._hsvColor={h:e,s:t,v:n},this.forceUpdate(),this.props.onChange&&this.props.onChange(this._value)}},{key:"_setValuesFromPosition",value:function(e){var t=this.refs.canvas;this._initialSaturation=e.x/t.offsetWidth,this._initialValue=1-e.y/t.offsetHeight;var n=this._hsvColor.h;this._setHSV(n,this._initialSaturation,this._initialValue)}},{key:"_renderCanvas",value:function(){var e=this.refs.canvas,t=e.getContext("2d");e.width=e.offsetWidth,e.height=e.offsetHeight;for(var n=t.getImageData(0,0,e.width,e.height),r=0;r<e.height;r++)for(var i=(e.height-r)/e.height,a=0;a<e.width;a++){var s=a/e.width,l=o.Color.fromHSV(this._hsvColor.h,s,i),c=l.r,u=l.g,f=l.b,p=l.a,d=4*(r*e.width+a);n.data[d]=255*c,n.data[d+1]=255*u,n.data[d+2]=255*f,n.data[d+3]=255*p}t.putImageData(n,0,0)}},{key:"renderWithBEM",value:function(){return o.ReactBEM.createElement("div",{bem:"$b:colorPicker $e:saturation"},o.ReactBEM.createElement(s.default,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag},o.ReactBEM.createElement("div",null,o.ReactBEM.createElement("canvas",{bem:"e:canvas",ref:"canvas"}),o.ReactBEM.createElement("div",{bem:"e:knob $b:knob m:transparent",ref:"knob",style:this._getKnobStyle()}))))}}]),t}();t.default=l,l.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(5),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));o._bindAll("_onKnobDrag","_onKnobDragStart"),o._value=o.props.initialValue.clone();var a=o._value.toHSV(),s=a[0],l=a[1],c=a[2];return o._hsvColor={h:s,s:l,v:c},o.state={value:o.props.initialValue},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),i(t,[{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._renderCanvas()}},{key:"shouldComponentUpdate",value:function(e){var t=e.initialValue;if(t!==this._value){this._value=t.clone();var n=this._value.toHSV(),r=n[0],i=n[1],o=n[2];return this._hsvColor={h:r,s:i,v:o},this._renderCanvas(),!0}return!1}},{key:"_onKnobDragStart",value:function(e,t){t.target===this.refs.knob?this._initialHue=this._hsvColor.h:this._setValueFromPosition(e)}},{key:"_onKnobDrag",value:function(e,t){var n=this.refs.canvas.offsetHeight,r=e.y/n;this._setHue(this._initialHue+r)}},{key:"_getKnobStyle",value:function(){return{left:"50%",top:(100*this._hsvColor.h).toFixed(2)+"%"}}},{key:"_setHue",value:function(e){var t=this._hsvColor,n=t.s,r=t.v;e=Math.min(1,Math.max(0,e)),n=Math.max(.01,Math.min(n,.99)),r=Math.max(.01,Math.min(r,.99)),this._value=o.Color.fromHSV(e,n,r,this._value.a),this._hsvColor={h:e,s:n,v:r},this.forceUpdate(),this.props.onChange&&this.props.onChange(this._value)}},{key:"_setValueFromPosition",value:function(e){var t=this.refs.canvas;this._initialHue=e.y/t.offsetHeight,this._setHue(this._initialHue)}},{key:"_renderCanvas",value:function(){var e=this.refs.canvas,t=e.getContext("2d");e.width=e.offsetWidth,e.height=e.offsetHeight;for(var n=0;n<e.height;n++){var r=n/e.height,i=o.Color.fromHSV(r,1,1);t.strokeStyle=i.toRGBA(),t.beginPath(),t.moveTo(0,n),t.lineTo(e.width,n),t.stroke()}}},{key:"renderWithBEM",value:function(){return o.ReactBEM.createElement("div",{bem:"$b:colorPicker $e:hue"},o.ReactBEM.createElement(s.default,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag},o.ReactBEM.createElement("div",null,o.ReactBEM.createElement("canvas",{bem:"e:canvas",ref:"canvas"}),o.ReactBEM.createElement("div",{bem:"e:knob $b:knob m:transparent",ref:"knob",style:this._getKnobStyle()}))))}}]),t}();t.default=l,l.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=s(n(2)),a=s(n(46));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onListItemClick",value:function(e,t){this.props.onChange&&this.props.onChange(e)}},{key:"_renderListItems",value:function(){var e=this;return this.props.fonts.map(function(t){var n=e.props.selectedIdentifier;return t.getVariations().map(function(r){var o=n===r.getIdentifier()?"is-active":null;return i.ReactBEM.createElement("li",{bem:"e:item",key:r.getIdentifier(),className:o,onClick:e._onListItemClick.bind(e,r)},i.ReactBEM.createElement(a.default,{fontFamily:r.getFontFamily(),fontWeight:r.getFontWeight(),fontStyle:r.getFontStyle()}),i.ReactBEM.createElement("div",{bem:"e:label"},t.getFontFamily()))})})}},{key:"renderWithBEM",value:function(){var e=this._renderListItems();return i.ReactBEM.createElement("div",{bem:"$b:controls e:overlay m:dark m:large"},i.ReactBEM.createElement(o.default,null,i.ReactBEM.createElement("ul",{bem:"$b:fontFamily e:list"},e)))}}]),t}();t.default=l,l.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7);var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Configurable),t}();t.default=i,i.prototype.availableOptions={fontFamily:{type:r.OptionType.STRING,required:!0},variations:{type:r.OptionType.ARRAY,required:!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=l(n(4)),a=l(n(160)),s=l(n(162));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,null,[{key:"onExit",value:function(){var e=this.context.editor;e.zoom.restore(),e.features.enable("zoom","drag"),e.render()}},{key:"onEnter",value:function(e,t){var n=this.context.editor;n.zoom.save(),n.zoom.set("auto",function(){n.render()});var r=n.getOutputDimensions(),o=n.operations.exists("sprite"),a=n.operations.getOrCreate("sprite"),s=a.createBrush(),l=a.serializeOptions(void 0,!0);a.addSprite(s);var c=Math.max(.05*r.min(),1);t.sizePresets&&t.sizePresets.length>0&&(c=t.sizePresets[0]);var u=new i.Color(1,0,0,1);this.setSharedState({operationExistedBefore:o,operation:a,brush:s,initialOptions:l,size:c,color:u,hardness:1})}},{key:"isAvailable",value:function(e){return e.isToolAllowed("brush")&&e.isToolEnabled("brush")}},{key:"getPreloadAssets",value:function(){return[]}}]),t}();c.controlsComponent=a.default,c.canvasControlsComponent=s.default,c.identifier="brush",c.iconPath="controls/overview/brush.png",c.languageKey="pesdk.brush.title.name",c.defaultOptions={sizePresets:[]},c.requiredOperations=["sprite"],t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=u(n(3)),a=u(n(13)),s=u(n(2)),l=u(n(29)),c=u(n(161));function u(e){return e&&e.__esModule?e:{default:e}}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var p=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];var s=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o)));return s._hasDoneButton=!1,s._brushOptions={size:s.getSharedState("size"),color:s.getSharedState("color").clone()},s._hasPresets=s.props.options.sizePresets&&s.props.options.sizePresets.length>0,s._hasSlider=!s._hasPresets,s._bindAll("_onSizeUpdated","_onColorUpdated","_onOperationUpdated","_onOperationRemoved"),s.state={sizeControlsEnabled:!1},s._events=(f(n={},i.Constants.EVENTS.OPERATION_UPDATED,s._onOperationUpdated),f(n,i.Constants.EVENTS.OPERATION_REMOVED,s._onOperationRemoved),n),s}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this);var e=this.context.editor;e.zoom.set("auto"),e.features.disable("zoom","drag")}},{key:"_onSizeClick",value:function(e){this._onSizeUpdated(e),this.forceUpdate()}},{key:"_onOperationRemoved",value:function(e){if(e===this.getSharedState("operation")&&!this._backButtonClicked){var t=this.context.editor,n=t.operations.getOrCreate("sprite"),r=n.createBrush();n.addSprite(r),this.setSharedState({operation:n,brush:r,operationExistedBefore:!1,initialOptions:{}}),t.render()}}},{key:"_onOperationUpdated",value:function(e){if(e===this.getSharedState("operation")){var t=this.getSharedState("brush");if(t){var n=e.getSprites().filter(function(e){return e.getId()===t.getId()})[0];this.setSharedState({brush:n})}this.context.editor.render()}}},{key:"_onSizeUpdated",value:function(e){this.setSharedState({size:e}),this._brushOptions.size=e}},{key:"_onColorUpdated",value:function(e){this.setSharedState({color:e}),this._brushOptions.color=e.clone()}},{key:"_renderSizeItems",value:function(){var e=this,t=this.props.options.sizePresets,n=Math.max.apply(null,t);return t.map(function(t){var r=e.getSharedState("size")===t;return i.ReactBEM.createElement(c.default,{size:t,maxSize:n,active:r,key:t,onClick:e._onSizeClick.bind(e,t)})})}},{key:"renderControls",value:function(){var e=this.context.editor,t=e.zoom.get(),n=[];if(this._hasSlider){var r=e.getFinalDimensions(),o=Math.round(r.clone().multiply(t).min()/2),c=this._brushOptions.size;n.push(i.ReactBEM.createElement("div",{bem:"e:cell m:slider"},i.ReactBEM.createElement(a.default,{style:"large",minValue:1,maxValue:o,valueUnit:"px",middleDot:!1,label:this._t("pesdk.brush.text.size"),onChange:this._onSizeUpdated,value:c})))}else this._hasPresets&&n.push(i.ReactBEM.createElement("div",{bem:"e:cell m:list"},i.ReactBEM.createElement(s.default,null,i.ReactBEM.createElement("ul",{bem:"$e:list"},this._renderSizeItems()))));return n.push(i.ReactBEM.createElement("div",{bem:"e:cell m:colorPicker"},i.ReactBEM.createElement(l.default,{initialValue:this._brushOptions.color.clone(),onChange:this._onColorUpdated}))),n}}]),t}();t.default=p,p.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._renderCanvas()}},{key:"componentDidUpdate",value:function(){this._renderCanvas()}},{key:"_renderCanvas",value:function(){var e=this.refs.canvas,t=e.getContext("2d");e.width=e.offsetWidth,e.height=e.offsetHeight;var n=this.props,r=n.maxSize,i=n.size,o=e.width*(i/r)/2;t.fillStyle="white",t.beginPath(),t.arc(e.width/2,e.height/2,o,0,2*Math.PI),t.fill()}},{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("bem",{specifier:"$b:controls $e:list"},i.ReactBEM.createElement("li",{bem:"e:item",onClick:this.props.onClick},i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"$e:button m:withLabel",className:this.props.active?"is-active":null},i.ReactBEM.createElement("canvas",{bem:"e:canvas",ref:"canvas"}),i.ReactBEM.createElement("div",{bem:"e:label"},this.props.size)))))}}]),t}();t.default=o,o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},a=n(0),s=n(14),l=(r=s)&&r.__esModule?r:{default:r};var c=a.SDK.Operations.SpriteOperation.BrushSprite,u=a.SDK.Operations.SpriteOperation.BrushSprite.Brushes.RadialBrush,f=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return c._windowResized=!1,c._drawing=!1,c._bindAll("_onMouseEnter","_onMouseLeave","_onMouseDown","_onMouseMove","_onMouseUp","_onMouseMoveOnCanvas","_onWindowResize"),c._lastDrawPosition=null,c._events=a.SDKUtils.extend(c._events,(o={},s=a.Constants.EVENTS.WINDOW_RESIZE,l=c._onWindowResize,s in o?Object.defineProperty(o,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):o[s]=l,o)),c.state={cursorVisible:!1,cursorPosition:new a.Vector2},c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default),i(t,[{key:"componentDidMount",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._updateContainerRect()}},{key:"componentDidUpdate",value:function(){this._windowResized&&(this._updateContainerRect(),this._windowResized=!1)}},{key:"_onWindowResize",value:function(){this._windowResized=!0}},{key:"_onOperationRemoved",value:function(e){}},{key:"_onOperationUpdated",value:function(e){e===this.getSharedState("operation")&&this.forceUpdate()}},{key:"_onMouseDown",value:function(e){e.preventDefault(),this._optionsBeforeDraw=this.getSharedState("operation").serializeOptions(),this._operationExistedBeforeDraw=this.getSharedState("operationExistedBefore"),this.setSharedState({operationExistedBefore:!0},!1);var t=this.context.editor.getOutputDimensions(),n=this._getCursorPosition(e),r=this.getSharedState("brush"),i=this.getSharedState("size")/t.min(),o=this.getSharedState("color"),a=this.getSharedState("hardness");this._drawing=!0;var s=new u({size:i,hardness:a,color:o});this._currentPath=r.createPath(s),this._currentPath.addControlPoint(n.clone().divide(t)),document.addEventListener("mousemove",this._onMouseMove),document.addEventListener("touchmove",this._onMouseMove),document.addEventListener("mouseup",this._onMouseUp),document.addEventListener("touchend",this._onMouseUp)}},{key:"_onMouseUp",value:function(){this._currentPath.setClosed(!0);var e=this.context.editor,t=e.getOutputTextureDimensions();this.getSharedState("brush").render(t),this._currentPath=null,this._drawing=!1,e.history.add(this.getSharedState("operation"),this._optionsBeforeDraw,this._operationExistedBeforeDraw),document.removeEventListener("mousemove",this._onMouseMove),document.removeEventListener("touchmove",this._onMouseMove),document.removeEventListener("mouseup",this._onMouseUp),document.removeEventListener("touchend",this._onMouseUp)}},{key:"_onMouseEnter",value:function(e){var t=this._getCursorPosition(e);this.setState({cursorVisible:!0,cursorPosition:t}),this._onMouseMove(e)}},{key:"_onMouseLeave",value:function(){this.setState({cursorVisible:!1})}},{key:"_onMouseMove",value:function(e){var t=this.context.editor,n=t.getOutputDimensions(),r=t.getOutputTextureDimensions(),i=t.zoom.get(),o=this._getCursorPosition(e);this.setState({cursorPosition:o});var a=void 0;if(this._lastDrawPosition){var s=this.getSharedState("size");a=this._lastDrawPosition.clone().subtract(o).abs().len()/i>=s/10}else a=!0;this._drawing&&a&&(this._currentPath.addControlPoint(o.clone().divide(n)),this.getSharedState("brush").render(r),this._lastDrawPosition=o.clone())}},{key:"_onMouseMoveOnCanvas",value:function(e){var t=this._getCursorPosition(e);this.setState({cursorPosition:t})}},{key:"_getPropsForSprite",value:function(e){var n=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_getPropsForSprite",this).call(this,e);return e instanceof c&&(n.hideContent=!1),n}},{key:"_getCursorStyle",value:function(){var e=this.getSharedState("size"),t=this.getSharedState("color"),n=this.state.cursorPosition;return{left:n.x,top:n.y,width:e,height:e,background:t.toRGBA(),marginLeft:-.5*e,marginTop:-.5*e}}},{key:"_updateContainerRect",value:function(){this._containerBoundingRect=this.refs.innerContainer.getBoundingClientRect()}},{key:"_getCursorPosition",value:function(e){var t=a.Utils.getEventPosition(e),n=this._containerBoundingRect;return t.subtract(n.left,n.top)}},{key:"_getContainerProps",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_getContainerProps",this).call(this);return e.onMouseDown=e.onTouchStart=this._onMouseDown,e}},{key:"_getInnerContainerProps",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_getInnerContainerProps",this).call(this);return delete e.onClick,e.onMouseEnter=this._onMouseEnter,e.onMouseLeave=this._onMouseLeave,e.onMouseMove=this._onMouseMoveOnCanvas,e}},{key:"_renderOverlayControls",value:function(){var e=this.state.cursorVisible?"is-visible":null;return a.ReactBEM.createElement("div",{bem:"$b:brushCanvasControls"},a.ReactBEM.createElement("div",{bem:"e:cursor",className:e,style:this._getCursorStyle()}))}}]),t}();t.default=f,f.contextTypes=l.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(4)),o=s(n(164)),a=s(n(165));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,null,[{key:"onExit",value:function(){var e=this.context.editor,t=this.getSharedState("operation");0===t.getPaths().length&&e.operations.remove(t),e.zoom.restore(),e.features.enable("zoom","drag"),e.render()}},{key:"onEnter",value:function(e,t){var n=this.context.editor;n.zoom.save(),n.zoom.set("auto",function(){n.render()});var r=n.getOutputDimensions(),i=n.operations.exists("selective-blur"),o=n.operations.getOrCreate("selective-blur"),a=o.serializeOptions(),s=o.getBrush(),l=.1*r.min(),c=o.getInputDimensions();this.setSharedState({operationExistedBefore:i,operation:o,brush:s,initialOptions:a,size:l,hardness:1,inputDimensions:c})}},{key:"isAvailable",value:function(e){return e.isToolEnabled("selective-blur")}}]),t}();l.controlsComponent=o.default,l.canvasControlsComponent=a.default,l.identifier="selective-blur",l.iconPath="controls/overview/selective-blur.png",l.languageKey="controls.overview.selective-blur",l.defaultOptions={},l.requiredOperations=["selective-blur"],t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=l(n(3)),a=l(n(13)),s=l(n(6));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];var s=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o)));return s._hasDoneButton=!1,s._brushSize=s.getSharedState("size"),s._bindAll("_onOperationUpdated","_onOperationRemoved","_onSizeUpdated","_onBlurRadiusChange"),s.state={sizeControlsEnabled:!1},s._events=(c(n={},i.Constants.EVENTS.OPERATION_UPDATED,s._onOperationUpdated),c(n,i.Constants.EVENTS.OPERATION_REMOVED,s._onOperationRemoved),n),s}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"componentDidMount",value:function(){(function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this);var e=this.context.editor;e.zoom.set("auto"),e.features.disable("zoom","drag")}},{key:"_onOperationRemoved",value:function(e){if(e===this.getSharedState("operation")&&!this._backButtonClicked){var t=this.context.editor,n=t.operations.getOrCreate("selective-blur"),r=n.getBrush();this.setSharedState({operation:n,brush:r,operationExistedBefore:!1,initialOptions:{}}),t.render()}}},{key:"_onOperationUpdated",value:function(e){e===this.getSharedState("operation")&&(this.context.editor.render(),this.forceUpdate())}},{key:"_onSizeUpdated",value:function(e){this.setSharedState({size:e}),this._brushSize=e}},{key:"_onBlurRadiusChange",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=this.getSharedState("inputDimensions");this.getSharedState("operation").setBlurRadius(e/r.min());var i=this.context.editor;i.render(),n&&i.history.add(this.getSharedState("operation"),{blurRadius:t/r.min()},!0)}},{key:"renderOverlayControls",value:function(){var e=this.getSharedState("inputDimensions").min(),t=this.getSharedState("operation").getBlurRadius()*e;return i.ReactBEM.createElement(s.default,{minValue:0,maxValue:Math.min(180,Math.round(.1*e)),value:t,valueUnit:"px",label:this._t("controls.selectiveBlur.blurRadius"),onChange:this._onBlurRadiusChange})}},{key:"renderControls",value:function(){var e=this.context.editor,t=e.zoom.get(),n=[],r=e.getFinalDimensions(),o=Math.round(r.clone().multiply(t).min()/2),s=this._brushSize;return n.push(i.ReactBEM.createElement("div",{bem:"e:cell m:slider"},i.ReactBEM.createElement(a.default,{style:"large",minValue:1,maxValue:o,valueUnit:"px",middleDot:!1,label:this._t("controls.brush.size"),onChange:this._onSizeUpdated,value:s}))),n}}]),t}();t.default=u,u.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},a=n(0),s=n(14),l=(r=s)&&r.__esModule?r:{default:r};var c=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return c._windowResized=!1,c._drawing=!1,c._bindAll("_onMouseEnter","_onMouseLeave","_onMouseDown","_onMouseMove","_onMouseUp","_onMouseMoveOnCanvas","_onWindowResize"),c._lastDrawPosition=null,c._events=a.SDKUtils.extend(c._events,(o={},s=a.Constants.EVENTS.WINDOW_RESIZE,l=c._onWindowResize,s in o?Object.defineProperty(o,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):o[s]=l,o)),c.state={cursorVisible:!1,cursorPosition:new a.Vector2},c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default),i(t,[{key:"componentDidMount",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._updateContainerRect()}},{key:"componentDidUpdate",value:function(){this._windowResized&&(this._updateContainerRect(),this._windowResized=!1)}},{key:"_onWindowResize",value:function(){this._windowResized=!0}},{key:"_onOperationRemoved",value:function(e){}},{key:"_onOperationUpdated",value:function(e){e===this.getSharedState("operation")&&this.forceUpdate()}},{key:"_onMouseDown",value:function(e){e.preventDefault();var t=this.getSharedState("operation");this._optionsBeforeDraw=t.serializeOptions(),this._operationExistedBeforeDraw=this.getSharedState("operationExistedBefore"),this.setSharedState({operationExistedBefore:!0},!1);var n=this.context.editor.getOutputDimensions(),r=this._getCursorPosition(e),i=this.getSharedState("size")/n.min(),o=this.getSharedState("hardness");this._drawing=!0,this._currentPath=t.createPath(i,o),this._currentPath.addControlPoint(r.clone().divide(n)),document.addEventListener("mousemove",this._onMouseMove),document.addEventListener("touchmove",this._onMouseMove),document.addEventListener("mouseup",this._onMouseUp),document.addEventListener("touchend",this._onMouseUp)}},{key:"_onMouseUp",value:function(){this._currentPath.setClosed(!0);var e=this.context.editor;e.render(),this._currentPath=null,this._drawing=!1,e.history.add(this.getSharedState("operation"),this._optionsBeforeDraw,this._operationExistedBeforeDraw),document.removeEventListener("mousemove",this._onMouseMove),document.removeEventListener("touchmove",this._onMouseMove),document.removeEventListener("mouseup",this._onMouseUp),document.removeEventListener("touchend",this._onMouseUp)}},{key:"_onMouseEnter",value:function(e){var t=this._getCursorPosition(e);this.setState({cursorVisible:!0,cursorPosition:t}),this._onMouseMove(e)}},{key:"_onMouseLeave",value:function(){this.setState({cursorVisible:!1})}},{key:"_onMouseMove",value:function(e){var t=this.context.editor,n=t.getOutputDimensions(),r=t.zoom.get(),i=this._getCursorPosition(e);this.setState({cursorPosition:i});var o=void 0;if(this._lastDrawPosition){var a=this.getSharedState("size");o=this._lastDrawPosition.clone().subtract(i).abs().len()/r>=a/10}else o=!0;this._drawing&&o&&(this._currentPath.addControlPoint(i.clone().divide(n)),this._lastDrawPosition=i.clone(),t.render())}},{key:"_onMouseMoveOnCanvas",value:function(e){var t=this._getCursorPosition(e);this.setState({cursorPosition:t})}},{key:"_getCursorStyle",value:function(){var e=this.getSharedState("size"),t=this.state.cursorPosition;return{left:t.x,top:t.y,width:e,height:e,marginLeft:-.5*e,marginTop:-.5*e}}},{key:"_updateContainerRect",value:function(){this._containerBoundingRect=this.refs.innerContainer.getBoundingClientRect()}},{key:"_getCursorPosition",value:function(e){var t=a.Utils.getEventPosition(e),n=this._containerBoundingRect;return t.subtract(n.left,n.top)}},{key:"_getContainerProps",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_getContainerProps",this).call(this);return e.onMouseDown=e.onTouchStart=this._onMouseDown,e}},{key:"_getInnerContainerProps",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_getInnerContainerProps",this).call(this);return delete e.onClick,e.onMouseEnter=this._onMouseEnter,e.onMouseLeave=this._onMouseLeave,e.onMouseMove=this._onMouseMoveOnCanvas,e}},{key:"_renderSpriteItems",value:function(){return null}},{key:"_renderOverlayControls",value:function(){var e=this.state.cursorVisible?"is-visible":null;return a.ReactBEM.createElement("div",{bem:"$b:selectiveBlurCanvasControls"},a.ReactBEM.createElement("div",{bem:"e:cursor",className:e,style:this._getCursorStyle()}))}}]),t}();t.default=c,c.contextTypes=l.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(4)),o=a(n(167));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),r(t,null,[{key:"onExit",value:function(){var e=this.context.editor,t=this.getSharedState("operation"),n=this.getSharedState("initialOptions"),r=t.getFrame(),i=t.getScale();(r&&r.identifier)===(n.frame&&n.frame.identifier)&&i===n.scale||e.history.add(t,this.getSharedState("initialOptions"),this.getSharedState("operationExistedBefore")),t.getFrame()||e.operations.remove(t),e.render()}},{key:"onEnter",value:function(e){var t=this.context.editor,n=t.operations.exists("frame"),r=t.operations.getOrCreate("frame"),i=r.serializeOptions();this.setSharedState({operation:r,operationExistedBefore:n,initialOptions:i,inputDimensions:r.getInputDimensions(),frame:r.getFrame()})}},{key:"isAvailable",value:function(e){return e.isToolAllowed("frame")&&e.isToolEnabled("frame")}}]),t}();s.controlsComponent=o.default,s.identifier="frame",s.iconPath="controls/overview/frame.png",s.languageKey="pesdk.frame.title.name",s.defaultOptions={frames:[]},s.requiredOperations=["sprite"],s.getPreloadAssets=i.default.getPreloadAssets,t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=d(n(3)),a=d(n(2)),s=d(n(1)),l=d(n(48)),c=d(n(168)),u=d(n(29)),f=d(n(6)),p=d(n(49));function d(e){return e&&e.__esModule?e:{default:e}}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var _=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];var s=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o)));return s._operation=s.getSharedState("operation"),s._bindAll("_onScaleChange","_onColorChange","_onOperationUpdated","_onOperationRemoved"),s._events=(h(n={},i.Constants.EVENTS.OPERATION_UPDATED,s._onOperationUpdated),h(n,i.Constants.EVENTS.OPERATION_REMOVED,s._onOperationRemoved),n),s._initFrameManager(),s}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"_initFrameManager",value:function(){this._frameManager=new l.default(this.context.ui,this.props.options)}},{key:"_onOperationUpdated",value:function(e){e===this.getSharedState("operation")&&this.forceSharedUpdate()}},{key:"_onOperationRemoved",value:function(e){if(e===this.getSharedState("operation")&&!this._backButtonClicked){var t=this.context.editor,n=t.operations.getOrCreate("frame");this.setSharedState({operation:n,frame:null,operationExistedBefore:!1,initialOptions:{}}),t.render()}}},{key:"_onScaleChange",value:function(e){var t=this.context.editor,n=this.getSharedState("inputDimensions");this._operation.setScale(e/n.min()),t.render()}},{key:"_onColorChange",value:function(e){this.getSharedState("operation").setTintColor(e.clone()),this.context.editor.render()}},{key:"_onBackClick",value:function(e){this._backButtonClicked=!0,this.props.onSwitchControls("home")}},{key:"_onFrameClick",value:function(e){var t=this,n=this.context.editor,r=this.getSharedState("operation");if(null===e)return r.setFrame(null),n.render(),this.setSharedState({frame:null});var i=void 0,o=setTimeout(function(){i=s.default.instance.displayLoading(t._t("pesdk.common.text.loading"))},100),a=new p.default(this.context.ui,e);a.load().then(function(){i&&i.close(),o&&(clearTimeout(o),o=null);var e=a.getFrame();r.setFrame(e),t.context.editor.render(),t.setSharedState({frame:a})})}},{key:"renderOverlayControls",value:function(){if(!this.getSharedState("frame"))return null;var e=this.getSharedState("inputDimensions"),t=Math.round(.3*e.min()),n=this._operation.getScale()*e.min();return i.ReactBEM.createElement(f.default,{minValue:5,maxValue:t,value:n,valueUnit:"px",middleDot:!1,label:this._t("pesdk.frame.text.scale"),onChange:this._onScaleChange})}},{key:"_renderListItems",value:function(){var e=this,t=this._frameManager.getFramesForCategory("all"),n=this.getSharedState("operation").getFrame();return[i.ReactBEM.createElement("li",{bem:"e:item",key:"no-frame",onClick:this._onFrameClick.bind(this,null)},i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"$e:button m:withLabel",className:n?null:"is-active"},i.ReactBEM.createElement("img",{bem:"e:icon",src:this._getAssetPath("controls/frame/no-frame.png",!0)}),i.ReactBEM.createElement("div",{bem:"e:label"},this._t("pesdk.frame.button.none")))))].concat(t.map(function(t,r){return i.ReactBEM.createElement(c.default,{frame:t,active:n&&n.identifier===t.identifier,onClick:e._onFrameClick.bind(e,t)})}))}},{key:"renderControls",value:function(){var e=this.getSharedState("operation").getFrame(),t=this._renderListItems(),n=[i.ReactBEM.createElement("div",{bem:"e:cell m:list"},i.ReactBEM.createElement(a.default,{ref:"scrollbar"},i.ReactBEM.createElement("ul",{bem:"$e:list"},t)))];if(e&&e.tintable){var r=this.getSharedState("operation");n.push(i.ReactBEM.createElement("div",{bem:"e:cell m:colorPicker"},i.ReactBEM.createElement(u.default,{initialValue:r.getTintColor().clone(),onChange:this._onColorChange})))}return n}}]),t}();t.default=_,_.contextTypes=o.default.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o.state={frame:o.props.frame},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"componentDidMount",value:function(){this._renderFrame()}},{key:"componentWillReceiveProps",value:function(e){var t=this;this.props.frame!==e.frame&&this.setState({frame:e.frame},function(){t._renderFrame()})}},{key:"_renderFrame",value:function(){var e=this.context.editor.getSDK(),t=this.props.frame,n=this._getAssetPath(t.thumbnail),r=this.refs["canvas-"+t.identifier],o=e.getPixelRatio();r.width=r.offsetWidth*o,r.height=r.offsetHeight*o,r.style.width=r.offsetWidth+"px",r.style.height=r.offsetHeight+"px";var a=r.getContext("2d"),s=new window.Image;s.addEventListener("load",function(){var e=Math.min(r.width/s.width,r.height/s.height),t=new i.Vector2(s.width,s.height).multiply(e),n=new i.Vector2(r.width,r.height).divide(2).subtract(t.clone().divide(2));a.drawImage(s,0,0,s.width,s.height,n.x,n.y,t.x,t.y)}),s.crossOrigin=this.context.editor.getCrossOrigin(),s.src=n}},{key:"renderWithBEM",value:function(){return i.ReactBEM.createElement("bem",{specifier:"b:controls e:list"},i.ReactBEM.createElement("li",{bem:"e:item",key:this.props.frame.identifier,onClick:this.props.onClick},i.ReactBEM.createElement("bem",{specifier:"$b:controls"},i.ReactBEM.createElement("div",{bem:"$e:button m:withInlineLabel"},i.ReactBEM.createElement("canvas",{bem:"e:canvas m:large",ref:"canvas-"+this.props.frame.identifier}),i.ReactBEM.createElement("div",{bem:"$e:inlineLabel",className:this.props.active?"is-active":null},i.ReactBEM.createElement("div",{bem:"e:label"},this._t("pesdk.frame.asset."+this.props.frame.identifier)||this.props.frame.defaultName))))))}}]),t}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t,this._sdk=n,this._mediator=r,this._options=this._editor.getOptions(),this._features={drag:this._options.editor.enableDrag,zoom:this._options.editor.enableZoom}}return r(e,[{key:"isEnabled",value:function(e){var t=e.charAt(0).toUpperCase()+e.slice(1),n=this._options.editor["enable"+t];return this._features[e]&&n}},{key:"enable",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];n.forEach(function(t){e._features[t]=!0}),this._mediator.emit(i.Constants.EVENTS.FEATURES_ENABLED,n),this._mediator.emit(i.Constants.EVENTS.FEATURES_UPDATED,n)}},{key:"disable",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];n.forEach(function(t){e._features[t]=!1}),this._mediator.emit(i.Constants.EVENTS.FEATURES_DISABLED,n),this._mediator.emit(i.Constants.EVENTS.FEATURES_UPDATED,n)}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(e,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return i._editor=e,i._sdk=n,i._mediator=r,i._isDefaultZoom=!1,i._zoom=i._sdk.getZoom(),i._options=i._editor.getOptions(),i._zoomLevels=[1,2,3,4,5,6.25,8.33,12.5,16.66,25,33.33,50,66.66,100,200,300,400,500,600,700,800,1200,1600,3200].map(function(e){return e/100}),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.EventEmitter),r(t,[{key:"in",value:function(){var e=this._getClosestZoomLevel(this._zoom+.001,1);if(!e)return this._zoomLevels[this._zoomLevels.length-1];this.set(e)}},{key:"out",value:function(){var e=this._getClosestZoomLevel(this._zoom-.001,-1);if(!e)return this._zoomLevels[0];this.set(e)}},{key:"_getClosestZoomLevel",value:function(e,t){return-1===t?this._zoomLevels.filter(function(t){return t<e}).pop():1===t?this._zoomLevels.filter(function(t){return t>e})[0]:void 0}},{key:"restore",value:function(){this._previousZoom&&(this.set(this._previousZoom),this._previousZoom=null)}},{key:"save",value:function(){this._previousZoom=this._zoom}},{key:"set",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(this._editor.isReady()){var r=e,i=this.getDefault();"auto"===e||r===i?(r=i,e="auto",this._isDefaultZoom=!0):this._isDefaultZoom=!1;var o=Math.max(1,2*i),a=n?this.getMinimum():0;r=Math.max(a,Math.min(o,r)),this._zoom=r,this._sdk.setZoom(this._zoom),this._sdk.setTextureQuality(Math.min(this._zoom,1)),this.emit("set",this._zoom,t)}}},{key:"getDefault",value:function(){var e=this._editor.getFinalDimensions(!1),t=this._editor.getCanvasDimensions();return i.SDKUtils.resizeVectorToFit(e,t).divide(e).x}},{key:"getMinimum",value:function(){var e=this._editor.getFinalDimensions();return i.SDKUtils.resizeVectorToFit(e,new i.Vector2(300,300)).divide(e).x}},{key:"isDefault",value:function(){return this._isDefaultZoom}},{key:"get",value:function(){return this._zoom}}]),t}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(e,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return i._editor=e,i._sdk=n,i._mediator=r,i._history=[],i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.EventEmitter),r(t,[{key:"isAvailable",value:function(){return 0!==this._history.length}},{key:"add",value:function(e,t,n){var r=this,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=void 0;if(e instanceof Array){var s=e;this._history.push(s),s.forEach(function(e){r._mediator.emit(i.Constants.EVENTS.HISTORY_UPDATED,e.operation)}),a=s}else a={operation:e,options:t,existent:n,undo:o},this._history.push(a),this._mediator.emit(i.Constants.EVENTS.HISTORY_UPDATED,e);return a}},{key:"undo",value:function(){var e=this,t=this._editor.operations,n=this._history.pop();n&&([].concat(n).forEach(function(n){var r=n.operation,o=n.existent,a=n.options,s=n.undo;e._mediator.emit(i.Constants.EVENTS.HISTORY_BEFORE_UNDO,n),o?((r=t.getOrCreate(r.constructor.identifier)).set(a),e._mediator.emit(i.Constants.EVENTS.OPERATION_UPDATED,r)):t.remove(r),"function"==typeof s&&s(r,a),e._mediator.emit(i.Constants.EVENTS.HISTORY_UPDATED,r),e._mediator.emit(i.Constants.EVENTS.HISTORY_UNDO,r)}),this.emit("undo"))}},{key:"reset",value:function(){this._history=[]}}]),t}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(50)),o=a(n(51));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return r(e,[{key:"serialize",value:function(){var e=new i.default(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new o.default(this._editor,e).deserialize()}}]),e}();t.default=s,s.version="1.0.0"},function(e,t,n){e.exports=n(174)},function(e,t,n){var r=function(){return this}()||Function("return this")(),i=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,o=i&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,e.exports=n(175),i)r.regeneratorRuntime=o;else try{delete r.regeneratorRuntime}catch(e){r.regeneratorRuntime=void 0}},function(e,t){!function(t){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag",c="object"==typeof e,u=t.regeneratorRuntime;if(u)c&&(e.exports=u);else{(u=t.regeneratorRuntime=c?e.exports:{}).wrap=b;var f="suspendedStart",p="suspendedYield",d="executing",h="completed",_={},m={};m[a]=function(){return this};var y=Object.getPrototypeOf,g=y&&y(y(R([])));g&&g!==r&&i.call(g,a)&&(m=g);var v=E.prototype=w.prototype=Object.create(m);O.prototype=v.constructor=E,E.constructor=O,E[l]=O.displayName="GeneratorFunction",u.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===O||"GeneratorFunction"===(t.displayName||t.name))},u.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,E):(e.__proto__=E,l in e||(e[l]="GeneratorFunction")),e.prototype=Object.create(v),e},u.awrap=function(e){return{__await:e}},S(P.prototype),P.prototype[s]=function(){return this},u.AsyncIterator=P,u.async=function(e,t,n,r){var i=new P(b(e,t,n,r));return u.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},S(v),v[l]="Generator",v[a]=function(){return this},v.toString=function(){return"[object Generator]"},u.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},u.values=R,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(M),!e)for(var t in this)"t"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,i){return s.type="throw",s.arg=e,t.next=r,i&&(t.method="next",t.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=i.call(a,"catchLoc"),c=i.call(a,"finallyLoc");if(l&&c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,_):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),_},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),M(n),_}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;M(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:R(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=n),_}}}function b(e,t,n,r){var i=t&&t.prototype instanceof w?t:w,o=Object.create(i.prototype),a=new j(r||[]);return o._invoke=function(e,t,n){var r=f;return function(i,o){if(r===d)throw new Error("Generator is already running");if(r===h){if("throw"===i)throw o;return B()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=x(a,n);if(s){if(s===_)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var l=k(e,t,n);if("normal"===l.type){if(r=n.done?h:p,l.arg===_)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=h,n.method="throw",n.arg=l.arg)}}}(e,n,a),o}function k(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function w(){}function O(){}function E(){}function S(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function P(e){var t;this._invoke=function(n,r){function o(){return new Promise(function(t,o){!function t(n,r,o,a){var s=k(e[n],e,r);if("throw"!==s.type){var l=s.arg,c=l.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(e){t("next",e,o,a)},function(e){t("throw",e,o,a)}):Promise.resolve(c).then(function(e){l.value=e,o(l)},a)}a(s.arg)}(n,r,t,o)})}return t=t?t.then(o,o):o()}}function x(e,t){var r=e.iterator[t.method];if(r===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,x(e,t),"throw"===t.method))return _;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return _}var i=k(r,e.iterator,t.arg);if("throw"===i.type)return t.method="throw",t.arg=i.arg,t.delegate=null,_;var o=i.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,_):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,_)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function M(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function R(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(i.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=n,t.done=!0,t};return o.next=o}}return{next:B}}function B(){return{value:n,done:!0}}}(function(){return this}()||Function("return this")())},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._brushes=[],this._brushesById={},this._addBrushes(i.Constants.DEFAULTS.BRUSHES);var r=this._options,o=r.brushes,a=r.replaceBrushes,s=r.availableBrushes;this._options.brushes&&this._addBrushes(o,a),s&&(this._brushes=this._brushes.filter(function(e){return-1!==s.indexOf(e.identifier)}))}return r(e,[{key:"_addBrushes",value:function(e,t){var n=this;t&&(this._brushes=[],this._brushesById={}),e.forEach(function(e){n._brushes.push(e),n._brushesById[e.identifier]=e})}},{key:"getBrushByIdentifier",value:function(e){return this._brushesById[e]}},{key:"getBrushes",value:function(){return this._brushes}},{key:"getFirstBrush",value:function(){return this._brushes[0]}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(52),a=(r=o)&&r.__esModule?r:{default:r};var s={italic:"i"},l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),i(t,[{key:"load",value:function(){return this._fonts.length&&this._addStylesheetTag(),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"load",this).call(this)}},{key:"_addStylesheetTag",value:function(){var e=this._getFamiliesString(),t=document.createElement("link");t.rel="stylesheet",t.href="https://fonts.googleapis.com/css?family="+e,document.getElementsByTagName("head")[0].appendChild(t)}},{key:"_getFamiliesString",value:function(){var e={};this._fonts.forEach(function(t){var n=t.getFontFamily(),r=t.getFontStyle(),i=t.getFontWeight();e[n]=e[n]||[],void 0!==i?e[n].push(""+i+(s[r]||"")):e[n].push(400)});var t=[];for(var n in e){var r=e[n],i=r.length?":"+r.join(","):"",o=n.replace(" ","+")+i;t.push(o)}return t.join("|")}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(179),a=(r=o)&&r.__esModule?r:{default:r};var s="undefined"!=typeof window&&window.performance&&window.performance.now?window.performance.now.bind(window.performance):n(39),l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._fontVariation=t,this._defaultFontRuler=new a.default,this._customFontRuler=new a.default(this._fontVariation)}return i(e,[{key:"observe",value:function(){var e=this,t=s();return new Promise(function(n,r){var i=window.setInterval(function(){if(e._defaultFontRuler.getWidth()!==e._customFontRuler.getWidth())return window.clearInterval(i),n();if(s()-t>=5e3){var o=new Error("Failed to load font "+e._fontVariation.getFontFamily()+".");return o.font=e._fontVariation,r(o)}},50)})}},{key:"dispose",value:function(){this._defaultFontRuler.dispose(),this._customFontRuler.dispose()}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(47),a=(r=o)&&r.__esModule?r:{default:r};var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._fontVariation=t||new a.default({fontFamily:"Times New Roman",fontWeight:"normal",fontStyle:"normal"}),this._createRuler()}return i(e,[{key:"_createRuler",value:function(){this._ruler=document.createElement("div"),this._ruler.innerText="abcdefghijklmnopqrstuvwxzy",document.body.appendChild(this._ruler),this._setRulerStyle()}},{key:"_setRulerStyle",value:function(){this._ruler.style.cssText="\n      position: absolute;\n      top: -9999px;\n      left: -9999px;\n      opacity: 0;\n      display: inline-block;\n      font: "+this._fontVariation.getFontStyle()+" "+this._fontVariation.getFontWeight()+" 30px "+this._fontVariation.getFontFamily()+";\n    "}},{key:"setFontVariation",value:function(e){this._fontVariation=e,this._setRulerStyle()}},{key:"getWidth",value:function(){return this._ruler.offsetWidth}},{key:"dispose",value:function(){this._ruler&&(this._ruler.parentNode.removeChild(this._ruler),this._ruler=null)}}]),e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(52),a=(r=o)&&r.__esModule?r:{default:r};var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),i(t,[{key:"load",value:function(){var e=this,n=[];this._fonts.forEach(function(t){var r=e._ui.getAssetPath(t.getFilePath(),!1,!0);n.push('@font-face {\n        font-family: "'+t.getFontFamily()+"\";\n        src: url('"+r+"') format('woff');\n        font-weight: "+t.getFontWeight()+";\n        font-style: "+t.getFontStyle()+";\n      }")});var r=n.join("\n"),i=document.createElement("style");return i.innerHTML=r,document.getElementsByTagName("head")[0].appendChild(i),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"load",this).call(this)}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(53)),o=a(n(54));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return r(e,[{key:"serialize",value:function(){var e=new i.default(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new o.default(this._editor,e).deserialize()}}]),e}();t.default=s,s.version="1.0.1"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(31)),o=a(n(32));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return r(e,[{key:"serialize",value:function(){var e=new i.default(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new o.default(this._editor,e).deserialize()}}]),e}();t.default=s,s.version="2.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._overlays=i.SharedConstants.DEFAULTS.OVERLAYS.slice(0),this._overlaysByIdentifier={},n.overlays&&(n.replaceOverlays?this._overlays=n.overlays:this._overlays=this._overlays.concat(n.overlays)),n.availableOverlays&&(this._overlays=this._overlays.filter(function(e){return-1!==n.availableOverlays.indexOf(e.identifier)})),this._overlays.forEach(function(e){r._overlaysByIdentifier[e.identifier]=e})}return r(e,[{key:"getOverlays",value:function(){return this._overlays}},{key:"getOverlayByIdentifier",value:function(e){return this._overlaysByIdentifier[e]}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(185)),o=a(n(186));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return r(e,[{key:"serialize",value:function(){var e=new i.default(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new o.default(this._editor,e).deserialize()}}]),e}();t.default=s,s.version="2.0.1"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(31),o=(r=i)&&r.__esModule?r:{default:r};var a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),t}();t.default=a,a.version="2.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(32),o=(r=i)&&r.__esModule?r:{default:r};var a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),t}();t.default=a,a.version="2.0.1"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(56)),o=a(n(57));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return r(e,[{key:"serialize",value:function(){var e=new i.default(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new o.default(this._editor,e).deserialize()}}]),e}();t.default=s,s.version="3.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(189)),o=a(n(190));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return r(e,[{key:"serialize",value:function(){var e=new i.default(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new o.default(this._editor,e).deserialize()}}]),e}();t.default=s,s.version="3.1.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(n(0),n(56)),a=(r=o)&&r.__esModule?r:{default:r};var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),i(t,[{key:"_serializeTextDesign",value:function(e,t){var n=t.serializeOptions(["position","rotation","flipHorizontally","flipVertically","text","color","width","seed","inverted"],!0);n.color={rgba:n.color};var r=t.getLayout();return r&&(n.identifier=r.constructor.identifier),{type:"textdesign",options:n}}}]),t}();t.default=s,s.version="3.1.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=c(n(57)),s=c(n(58)),l=c(n(15));function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),i(t,[{key:"_deserializeTextDesign",value:function(e,t){var n=this,i=t.options,a=i.position,c=i.rotation,u=i.flipHorizontally,f=i.flipVertically,p=i.text,d=i.color,h=i.width,_=i.seed,m=i.inverted,y=i.identifier,g=new s.default(this._ui,this._getOptions("textdesign")),v=new l.default(this._ui,{fonts:o.Constants.DEFAULTS.TEXT_DESIGN_FONTS,replaceFonts:!0}),b=e.constructor.TextDesignSprite.AssetManager,k=this._ui.getFontLoader(),w=new(g.getLayoutByIdentifier(y));return k.setFonts(v.getFonts()),b.setFonts(r({},b.getFonts(),v.getVariationsByIdentifier())),k.load().then(function(){var t=w.getImagePaths().map(function(e){return{path:e,fullPath:n._ui.getAssetPath(e),image:null}});return b.loadImages(t).then(function(){return w.onImagesLoaded(),e.createTextDesign({position:a,rotation:c,flipHorizontally:u,flipVertically:f,text:p,color:o.Color.fromArray(d.rgba),width:h,seed:_,inverted:m,layout:w})})})}}]),t}();t.default=u,u.version="3.1.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=n(0),a=u(n(192)),s=u(n(193)),l=u(n(194)),c=u(n(195));function u(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._modalManager=o.props.modalManager,o._bindAll("_onModalManagerUpdate"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.BaseComponent),r(t,[{key:"componentDidMount",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentDidMount",this).call(this),this._modalManager.on("update",this._onModalManagerUpdate)}},{key:"componentWillUnmount",value:function(){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentWillUnmount",this).call(this),this._modalManager.off("update",this._onModalManagerUpdate)}},{key:"_onModalManagerUpdate",value:function(){this.forceUpdate()}},{key:"_onModalClosed",value:function(e){this._modalManager.removeModal(e)}},{key:"_renderModals",value:function(){var e=this;return this._modalManager.getModals().map(function(t){var n=void 0;switch(t.type){case"loading":n=a.default;break;case"warning":n=s.default;break;case"error":n=l.default;break;case"progress":n=c.default}return o.ReactBEM.createElement(n,{modal:t,onClose:e._onModalClosed.bind(e,t)})})}},{key:"renderWithBEM",value:function(){return o.ReactBEM.createElement("div",null,this._renderModals())}}]),t}();t.default=f,f.contextTypes=o.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"renderWithBEM",value:function(){var e=this.props.modal;return i.ReactBEM.createElement("bem",{specifier:"$b:modals"},i.ReactBEM.createElement("div",{bem:"e:overlay"},i.ReactBEM.createElement("div",{bem:"e:modal m:loading"},i.ReactBEM.createElement("div",{bem:"e:text"},e.text))))}}]),t}();t.default=o,o.propTypes={modal:i.PropTypes.object},o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"renderWithBEM",value:function(){var e=this.props.modal;return i.ReactBEM.createElement("bem",{specifier:"$b:modals"},i.ReactBEM.createElement("div",{bem:"e:modal m:warning"},i.ReactBEM.createElement("div",{bem:"e:title"},e.title),i.ReactBEM.createElement("div",{bem:"e:text"},e.text),i.ReactBEM.createElement("div",{bem:"e:button b:button m:inline",onClick:this.props.onClose},"OK")))}}]),t}();t.default=o,o.propTypes={modal:i.PropTypes.object},o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._bindAll("_onClose"),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"_onClose",value:function(){this.props.modal.close()}},{key:"renderWithBEM",value:function(){var e=this.props.modal,t=i.ReactBEM.createElement("div",{bem:"e:modal m:error"},i.ReactBEM.createElement("div",{bem:"e:title"},e.title),i.ReactBEM.createElement("div",{bem:"e:text"},e.text),i.ReactBEM.createElement("div",{bem:"e:button b:button m:inline",onClick:this._onClose},"OK")),n=e.overlay?i.ReactBEM.createElement("div",{bem:"e:overlay"},t):t;return i.ReactBEM.createElement("bem",{specifier:"$b:modals"},n)}}]),t}();t.default=o,o.propTypes={modal:i.PropTypes.object},o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.BaseComponent),r(t,[{key:"renderWithBEM",value:function(){var e=this.props.modal,t={width:(100*(e.data.progress||0)).toFixed(2)+"%"};return i.ReactBEM.createElement("bem",{specifier:"$b:modals"},i.ReactBEM.createElement("div",{bem:"e:overlay"},i.ReactBEM.createElement("div",{bem:"e:modal m:loading"},i.ReactBEM.createElement("div",{bem:"e:text"},e.text),i.ReactBEM.createElement("bem",{specifier:"b:loadingModal"},i.ReactBEM.createElement("div",{bem:"$e:progressBar"},i.ReactBEM.createElement("div",{bem:"e:progress",style:t}))))))}}]),t}();t.default=o,o.propTypes={modal:i.PropTypes.object},o.contextTypes=i.BaseComponent.contextTypes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=n(43),s=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(e,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return i._ui=e,i._options=n,i._mediator=r,i._assets={},i._editor=new s.default(e,n,r,!0),i._assets=["controls/back.png","controls/minus.png","controls/plus.png","controls/tick.png","controls/webcam/shutter.png","controls/knobs/remove.png","controls/knobs/resize-diagonal-down.png","controls/knobs/resize-diagonal-up.png","controls/knobs/rotate.png","editor/export.png","editor/new.png","editor/undo.png",["splash/photo-roll.png",!1,!0],["splash/webcam.png",!1,!0],"top-bar/back.png","close.png"],i._appendControlsAssets(),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.EventEmitter),i(t,[{key:"_appendControlsAssets",value:function(){var e=this._editor.controls.getAvailable();for(var t in e){var n=e[t];this._editor.controls.isEnabled(t)&&(this._assets=this._assets.concat(n.getPreloadAssets(this._editor)),this._assets.push(n.iconPath))}}},{key:"load",value:function(){var e=this,t=this._assets.slice(),n=t.length,r=0,i=function(){r++,e.emit("progress",r/n),r===n&&e.emit("done")},a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"timed out";o.Log.warn("Preloader",e+" "+t+"."),i()};t.forEach(function(t){var n=!0,r=!0;o.SDKUtils.isArray(t)&&(r=t[2],n=t[1],t=t[0]);var s,l=e._ui.getAssetPath(t,r,!n),c=new window.Image,u=(s=l,window.setTimeout(function(){a(s)},5e3));c.addEventListener("load",function(){e._assets[l]=c,window.clearTimeout(u),i()}),c.addEventListener("error",function(){window.clearTimeout(u),a(l,"was not found")}),c.crossOrigin=o.SDKUtils.getCrossOriginValue(e._options.crossOrigin),c.src=l})}},{key:"getAsset",value:function(e){return this._assets[e]}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(198);Object.defineProperty(t,"Provider",{enumerable:!0,get:function(){return s(r).default}});var i=n(199);Object.defineProperty(t,"Library",{enumerable:!0,get:function(){return s(i).default}});var o=n(200);Object.defineProperty(t,"SearchSuggestion",{enumerable:!0,get:function(){return s(o).default}});var a=n(201);function s(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"Photo",{enumerable:!0,get:function(){return s(a).default}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"getLibraries",value:function(){return i.Log.warn(this.constructor.name,"`getLibraries` is abstract and not implemented."),i.Promise.resolve([])}},{key:"getSearchSuggestions",value:function(){return i.Log.warn(this.constructor.name,"`getSearchSuggestions` is abstract and not implemented."),i.Promise.resolve([])}},{key:"getPhotosForLibrary",value:function(e){return i.Log.warn(this.constructor.name,"`getPhotosForLibrary` is abstract and not implemented."),i.Promise.resolve([])}},{key:"searchPhotos",value:function(e){return i.Log.warn(this.constructor.name,"`searchPhotos` is abstract and not implemented."),i.Promise.resolve([])}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t.name,this.coverImage=t.coverImage}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.query=t.query,this.name=this.query,this.coverImage=t.coverImage}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.library=t,this.title=n.title,this.urls=n.urls}},function(e,t){e.exports={pesdk:{adjustments:{title:{name:"Korrekturen"},text:{brightness:"Helligkeit",saturation:"Sättigung",contrast:"Kontrast",gamma:"Gamma",clarity:"Klarheit",exposure:"Belichtung",shadows:"Schatten",highlights:"Lichter"}},brush:{title:{name:"Malen"},text:{size:"Dicke"}},camera:{title:{headline:"Mache ein Foto!"},text:{webcamUnavailable:"Webcam-Bild kann nicht dargestellt werden. (Fehler: ${error})"}},common:{title:{error:"Es ist ein Fehler aufgetreten",imageLoadFail:"Bild konnte nicht geladen werden"},text:{color:"Farbe",loading:"Lade...",imageLoadFail:"Beim Laden des Bildes unter ${path} ist ein Fehler aufgetreten."},button:{back:"Zurück",cancel:"Abbrechen"}},editor:{title:{zoom:"Zoom",renderingError:"Rendering-Fehler",imageResized_maxMegaPixels:"Bild verkleinert",imageResized_maxDimensions:"Bild verkleinert"},button:{export:"Speichern",backgroundImage:"Hintergrundbild",new:"Neu",undo:"Rückgängig"},text:{invalidFileType:"Der Dateityp ${fileType} wird nicht unterstützt.",exporting:"Exportiere...",renderingError:"Beim Rendern des Bildes ist ein Fehler aufgetreten.",resizing:"Bild wird bearbeitet...",imageResized_maxMegaPixels:"Da dein Bild die maximale Größe von ${maxMegaPixels} Megapixeln überschreitet, wurde es auf ${width}x${height} Pixel verkleinert.",imageResized_maxDimensions:"Aufgrund von Hardware-Beschränkungen wurde das Bild auf ${width}x${height} Pixel verkleinert."}},filter:{title:{name:"Filter"},text:{intensity:"Intensität"},asset:{identity:"Original",imgly_lut_celsius:"Celsius",imgly_lut_chest:"Chest",imgly_lut_fixie:"Fixie",imgly_lut_fridge:"Fridge",imgly_lut_front:"Front",imgly_lut_k2:"K2",imgly_lut_mellow:"Mellow",imgly_lut_sin:"Sin",imgly_lut_texas:"Texas",imgly_lut_ad1920:"1920 A.D.",imgly_lut_ancient:"Ancient",imgly_lut_bleached:"Bleached",imgly_lut_bleachedblue:"Bleached Blue",imgly_lut_blues:"Blues",imgly_lut_blueshadows:"Blue Shadows",imgly_lut_breeze:"Breeze",imgly_lut_bw:"B & W",imgly_lut_classic:"Classic",imgly_lut_colorful:"Colorful",imgly_lut_cool:"Cool",imgly_lut_cottoncandy:"Cotton Candy",imgly_lut_creamy:"Creamy",imgly_lut_eighties:"Eighties",imgly_lut_elder:"Elder",imgly_lut_evening:"Evening",imgly_lut_fall:"Fall",imgly_lut_food:"Food",imgly_lut_glam:"Glam",imgly_lut_gobblin:"Gobblin",imgly_lut_highcarb:"High Carb",imgly_lut_highcontrast:"High Contrast",imgly_lut_k1:"K1",imgly_lut_k6:"K6",imgly_lut_kdynamic:"KDynamic",imgly_lut_keen:"Keen",imgly_lut_lenin:"Lenin",imgly_lut_litho:"Litho",imgly_lut_lomo100:"Lomo 100",imgly_lut_lucid:"Lucid",imgly_lut_neat:"Neat",imgly_lut_nogreen:"No Green",imgly_lut_orchid:"Orchid",imgly_lut_pale:"Pale",imgly_lut_pitched:"Pitched",imgly_lut_plate:"Plate",imgly_lut_pola669:"Pola 669",imgly_lut_polasx:"Pola SX",imgly_lut_pro400:"Pro 400",imgly_lut_quozi:"Quozi",imgly_lut_sepiahigh:"Sepia High",imgly_lut_settled:"Settled",imgly_lut_seventies:"Seventies",imgly_lut_soft:"Soft",imgly_lut_steel:"Steel",imgly_lut_summer:"Summer",imgly_lut_sunset:"Sunset",imgly_lut_tender:"Tender",imgly_lut_twilight:"Twilight",imgly_lut_winter:"Winter",imgly_lut_x400:"X400",imgly_filters_analog:"Analog",imgly_filters_bw:"Black & White",imgly_filters_retro:"Retro",imgly_filters_special:"Special",imgly_filters_summer:"Summer",imgly_filters_winter:"Winter",all:"Alle"}},focus:{title:{name:"Focus"},text:{blurRadius:"Radius"},button:{none:"Original",radial:"Kreisförmig",mirrored:"Gespiegelt"}},frame:{title:{name:"Rahmen"},text:{scale:"Größe"},button:{none:"Kein Rahmen"},asset:{imgly_frame_dia:"Dia",imgly_frame_art_decor:"Art Decor",imgly_frame_black_passepartout:"Black Passepartout",imgly_frame_lowpoly_shadow:"Low Poly",imgly_frame_wood_passepartout:"Wood Passepartout"}},library:{title:{searchResults:'Suchergebnisse für "${query}"',photoRollLoadFail:"Laden der Photo Roll fehlgeschlagen"},text:{photoRollLoadFail:"Failed to load photos for the photo roll: ${error}",noSearchResults:"Die Photo Roll konnte nicht geladen werden: ${error}"},placeholder:{search:"Nach Fotos suchen"}},splash:{button:{upload:"Lade ein Foto hoch"},title:{photoRoll:"Kostenloses Bildmaterial",webcam:"Webcam"},text:{photoRoll:"Suche dir eines von tausenden Stock Photos aus.",upload:"Klicke hier, um ein Foto von deinem Rechner hochzuladen oder lade es per Drag-and-Drop hoch",webcam:"Klicke hier, um ein Foto mit deiner Webcam zu machen"}},sticker:{title:{name:"Sticker",loadingStickersFailed:"Laden der Sticker fehlgeschlagen"},asset:{all:"Alle",imgly_sticker_emoticons:"Emoticons",imgly_sticker_shapes:"Shapes"}},text:{title:{name:"Text",loadingFontsFailed:"Laden der Schriftarten fehlgeschlagen"},text:{loadingFontsFailed:"Einige Schriftarten sind möglicherweise nicht verfügbar."},button:{size:"Größe",font:"Schriftart",alignment:"Ausrichtung",foreground:"Vordergrund",background:"Hintergrund",takeToFront:"Nach oben"},placeholder:{defaultText:"Doppelklick zum Bearbeiten!"}},transform:{title:{name:"Zuschneiden"},button:{none:"Original"},text:{rotation:"Drehung"},asset:{imgly_transform_common_custom:"Frei",imgly_transform_common_square:"Quadratisch","imgly_transform_common_4-3":"4:3","imgly_transform_common_16-9":"16:9",imgly_transform_facebook_ad:"FB Ad",imgly_transform_facebook_post:"FB Post",imgly_transform_facebook_cover:"FB Cover",imgly_transform_facebook_profile:"FB Profile"}}}}},function(e,t){e.exports={pesdk:{adjustments:{title:{name:"Adjust"},text:{brightness:"Brightness",saturation:"Saturation",contrast:"Contrast",gamma:"Gamma",clarity:"Clarity",exposure:"Exposure",shadows:"Shadows",highlights:"Highlights",whites:"Whites",blacks:"Blacks",temperature:"Temperature"}},brush:{title:{name:"Brush"},text:{size:"Size"}},camera:{title:{headline:"Take a photo!"},text:{webcamUnavailable:"Unable to display webcam image (Error: ${error})"}},common:{title:{error:"An error has occurred",imageLoadFail:"Failed to load image"},text:{color:"Color",loading:"Loading...",imageLoadFail:"Failed to load the image at ${path}"},button:{back:"Back",cancel:"Cancel"}},editor:{title:{zoom:"Zoom",renderingError:"Error while rendering",imageResized_maxMegaPixels:"Image resized",imageResized_maxDimensions:"Image resized"},button:{export:"Export",backgroundImage:"Background Image",new:"New",undo:"Undo"},text:{invalidFileType:"The file type ${fileType} is not supported.",exporting:"Exporting...",renderingError:"An error has occurred while rendering the image.",resizing:"Resizing...",imageResized_maxMegaPixels:"Your image exceeds the maximum size of ${maxMegaPixels} megapixels and has therefore been resized to ${width}x${height} pixels.",imageResized_maxDimensions:"Due to hardware limitations your image has been resized to ${width}x${height} pixels."}},filter:{title:{name:"Filters"},text:{intensity:"Intensity"},asset:{identity:"None",imgly_lut_celsius:"Celsius",imgly_lut_chest:"Chest",imgly_lut_fixie:"Fixie",imgly_lut_fridge:"Fridge",imgly_lut_front:"Front",imgly_lut_k2:"K2",imgly_lut_mellow:"Mellow",imgly_lut_sin:"Sin",imgly_lut_texas:"Texas",imgly_lut_ad1920:"1920 A.D.",imgly_lut_ancient:"Ancient",imgly_lut_bleached:"Bleached",imgly_lut_bleachedblue:"Bleached Blue",imgly_lut_blues:"Blues",imgly_lut_blueshadows:"Blue Shadows",imgly_lut_breeze:"Breeze",imgly_lut_bw:"B & W",imgly_lut_classic:"Classic",imgly_lut_colorful:"Colorful",imgly_lut_cool:"Cool",imgly_lut_cottoncandy:"Cotton Candy",imgly_lut_creamy:"Creamy",imgly_lut_eighties:"Eighties",imgly_lut_elder:"Elder",imgly_lut_evening:"Evening",imgly_lut_fall:"Fall",imgly_lut_food:"Food",imgly_lut_glam:"Glam",imgly_lut_gobblin:"Gobblin",imgly_lut_highcarb:"High Carb",imgly_lut_highcontrast:"High Contrast",imgly_lut_k1:"K1",imgly_lut_k6:"K6",imgly_lut_kdynamic:"KDynamic",imgly_lut_keen:"Keen",imgly_lut_lenin:"Lenin",imgly_lut_litho:"Litho",imgly_lut_lomo100:"Lomo 100",imgly_lut_lucid:"Lucid",imgly_lut_neat:"Neat",imgly_lut_nogreen:"No Green",imgly_lut_orchid:"Orchid",imgly_lut_pale:"Pale",imgly_lut_pitched:"Pitched",imgly_lut_plate:"Plate",imgly_lut_pola669:"Pola 669",imgly_lut_polasx:"Pola SX",imgly_lut_pro400:"Pro 400",imgly_lut_quozi:"Quozi",imgly_lut_sepiahigh:"Sepia High",imgly_lut_settled:"Settled",imgly_lut_seventies:"Seventies",imgly_lut_soft:"Soft",imgly_lut_steel:"Steel",imgly_lut_summer:"Summer",imgly_lut_sunset:"Sunset",imgly_lut_tender:"Tender",imgly_lut_twilight:"Twilight",imgly_lut_winter:"Winter",imgly_lut_x400:"X400",imgly_filters_analog:"Analog",imgly_filters_bw:"Black & White",imgly_filters_retro:"Retro",imgly_filters_special:"Special",imgly_filters_summer:"Summer",imgly_filters_winter:"Winter",all:"All"}},focus:{title:{name:"Focus"},text:{blurRadius:"Blur radius"},button:{none:"None",radial:"Radial",mirrored:"Mirrored"}},frame:{title:{name:"Frame"},text:{scale:"Scale"},button:{none:"None"},asset:{imgly_frame_dia:"Dia",imgly_frame_art_decor:"Art Decor",imgly_frame_black_passepartout:"Black Passepartout",imgly_frame_lowpoly_shadow:"Low Poly",imgly_frame_wood_passepartout:"Wood Passepartout"}},library:{title:{searchResults:'Search results for "${query}"',photoRollLoadFail:"Failed to load Photo Roll"},text:{photoRollLoadFail:"Failed to load photos for the photo roll: ${error}",noSearchResults:'Sorry, but we couldn\'t find any photos for <strong>"${query}"</strong>.'},placeholder:{search:"Search for photos"}},splash:{button:{upload:"Upload your image"},title:{photoRoll:"Free stock footage",webcam:"Webcam"},text:{photoRoll:"Select from thousands of Free Stock Photos",upload:"Upload a picture from your library or just drag and drop",webcam:"Take a picture with your webcam or phone"}},sticker:{title:{name:"Sticker",loadingStickersFailed:"Failed to load stickers"},asset:{all:"All",imgly_sticker_emoticons:"Emoticons",imgly_sticker_shapes:"Shapes"}},text:{title:{name:"Text",loadingFontsFailed:"Failed to load fonts"},text:{loadingFontsFailed:"Some fonts might not be available."},button:{size:"Size",font:"Font",alignment:"Alignment",foreground:"Foreground",background:"Background",takeToFront:"To Front"},placeholder:{defaultText:"Double-click to edit"}},transform:{title:{name:"Transform"},button:{none:"Original"},text:{rotation:"Rotation"},asset:{imgly_transform_common_custom:"Custom",imgly_transform_common_square:"Square","imgly_transform_common_4-3":"4:3","imgly_transform_common_16-9":"16:9",imgly_transform_facebook_ad:"FB Ad",imgly_transform_facebook_post:"FB Post",imgly_transform_facebook_cover:"FB Cover",imgly_transform_facebook_profile:"FB Profile"}}}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,