!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("photoeditorsdk/js/PhotoEditorSDK"),require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["photoeditorsdk","react","react-dom"],t):"object"==typeof exports?exports.PhotoEditorDesktopUI=t(require("photoeditorsdk/js/PhotoEditorSDK"),require("react"),require("react-dom")):e.PhotoEditorDesktopUI=t(e.PhotoEditorSDK,e.React,e.ReactDOM)}("undefined"!=typeof self?self:this,function(e,t,n){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=137)}([function(e,t,n){e.exports={default:n(139),__esModule:!0}},function(e,t,n){e.exports={default:n(149),__esModule:!0}},function(e,t,n){e.exports={default:n(141),__esModule:!0}},function(e,t,n){e.exports={default:n(144),__esModule:!0}},function(e,t,n){"use strict";(function(e){n.d(t,"j",function(){return T}),n.d(t,"v",function(){return P}),n.d(t,"q",function(){return O}),n.d(t,"e",function(){return C}),n.d(t,"c",function(){return S}),n.d(t,"a",function(){return x}),n.d(t,"o",function(){return R}),n.d(t,"i",function(){return E}),n.d(t,"p",function(){return D}),n.d(t,"y",function(){return A}),n.d(t,"f",function(){return I}),n.d(t,"n",function(){return B}),n.d(t,"w",function(){return w});var i=n(7),o=n.n(i),r=n(32),a=n.n(r),s=n(151),l=n.n(s),c=n(42),u=n.n(c),p=n(93),f=n(156),d=n.n(f),h=n(94),m=n(172),_=n(208),g=n(214),y=n(15),v=n(46),b=n(22),k=n(108);n.d(t,"u",function(){return m.a}),n.d(t,"l",function(){return a.a}),n.d(t,"b",function(){return h.a}),n.d(t,"d",function(){return _.a}),n.d(t,"s",function(){return g.a}),n.d(t,"m",function(){return l.a}),n.d(t,"z",function(){return y.b}),n.d(t,"x",function(){return y.a}),n.d(t,"h",function(){return v.a}),n.o(f,"withTheme")&&n.d(t,"A",function(){return f.withTheme}),n.o(f,"ThemeProvider")&&n.d(t,"t",function(){return f.ThemeProvider}),n.d(t,"g",function(){return b.a}),n.d(t,"k",function(){return u.a}),n.d(t,"r",function(){return k.a});var w=new d.a(e.adonisOptions||{injection:"pre",theme:p.a,minified:!1,cssSelectorPrefix:".pesdk-desktop-editor ",classNamePrefix:"pesdk-",hashedStyles:!1}),x=o.a.Base64,S=o.a.Color,C=(o.a.Math.ColorMatrix,o.a.EventEmitter),E=(o.a.EXIF,o.a.OptionType),T=o.a.Promise,O=o.a.Utils,R=o.a.RenderType,I=o.a.ImageFormat,D=o.a,P=(o.a.UniformType,o.a.Math.Vector2),B=o.a.Math.Rectangle,A="undefined"!=typeof window&&window.performance&&window.performance.now?window.performance.now.bind(window.performance):n(109)}).call(t,n(26))},function(e,t,n){
/*!
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */
e.exports=n(138).default},function(e,t,n){e.exports={default:n(220),__esModule:!0}},function(t,n){t.exports=e},function(e,t,n){e.exports={default:n(157),__esModule:!0}},function(e,t){var n=e.exports={version:"2.5.3"};"number"==typeof __e&&(__e=n)},function(e,t,n){e.exports={default:n(179),__esModule:!0}},function(e,t,n){var i=n(64)("wks"),o=n(41),r=n(13).Symbol,a="function"==typeof r;(e.exports=function(e){return i[e]||(i[e]=a&&r[e]||(a?r:o)("Symbol."+e))}).store=i},function(e,t,n){var i=n(13),o=n(9),r=n(24),a=n(19),s=function(e,t,n){var l,c,u,p=e&s.F,f=e&s.G,d=e&s.S,h=e&s.P,m=e&s.B,_=e&s.W,g=f?o:o[t]||(o[t]={}),y=g.prototype,v=f?i:d?i[t]:(i[t]||{}).prototype;for(l in f&&(n=t),n)(c=!p&&v&&void 0!==v[l])&&l in g||(u=c?v[l]:n[l],g[l]=f&&"function"!=typeof v[l]?n[l]:m&&c?r(u,i):_&&v[l]==u?function(e){var t=function(t,n,i){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,i)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(u):h&&"function"==typeof u?r(Function.call,u):u,h&&((g.virtual||(g.virtual={}))[l]=u,e&s.R&&y&&!y[l]&&a(y,l,u)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,e.exports=s},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var i=n(17);e.exports=function(e){if(!i(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){"use strict";(function(e){n.d(t,"b",function(){return o}),n.d(t,"a",function(){return r});for(
/*
 * http://paulirish.com/2011/requestanimationframe-for-smart-animating/
 * http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
 * requestAnimationFrame polyfill by Erik MÃ¶ller. fixes from Paul Irish and Tino Zijdel
 * MIT license
 * @license
 */
var i="undefined"==typeof window?e:window,o=i.requestAnimationFrame,r=i.cancelAnimationFrame,a=0,s=["ms","moz","webkit","o"],l=0;l<s.length&&!o;++l)o=i[s[l]+"RequestAnimationFrame"],r=i[s[l]+"CancelAnimationFrame"]||i[s[l]+"CancelRequestAnimationFrame"];o&&(o=o.bind(i)),r&&(r=r.bind(i)),o||(o=function(e,t){var n=(new Date).getTime(),i=Math.max(0,16-(n-a)),o=setTimeout(function(){e(n+i)},i);return a=n+i,o}),r||(r=function(e){clearTimeout(e)})}).call(t,n(26))},function(e,t,n){var i=n(14),o=n(84),r=n(57),a=Object.defineProperty;t.f=n(18)?Object.defineProperty:function(e,t,n){if(i(e),t=r(t,!0),i(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(25)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var i=n(16),o=n(28);e.exports=n(18)?function(e,t,n){return i.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var i=n(85),o=n(59);e.exports=function(e){return i(o(e))}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";var i=n(106),o=n.n(i),r=n(107),a=n.n(r),s=n(8),l=n.n(s),c=function(){return function(e,t){if(Array.isArray(e))return e;if(o()(Object(e)))return function(e,t){var n=[],i=!0,o=!1,r=void 0;try{for(var s,l=a()(e);!(i=(s=l.next()).done)&&(n.push(s.value),!t||n.length!==t);i=!0);}catch(e){o=!0,r=e}finally{try{!i&&l.return&&l.return()}finally{if(o)throw r}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.a={load:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{cors:!0,value:"anonymous"};return(e.substr(0,5),l.a.resolve([e,e])).then(function(e){var i=c(e,2),o=i[0],r=i[1];return t._createAndLoadImage(o,r,n)})},_createAndLoadImage:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{cors:!0,value:"anonymous"};return new l.a(function(e,i){var o=new window.Image;o.addEventListener("load",function(){e(o)}),o.addEventListener("error",function(){i(new Error("Failed to load image at "+t))}),n.cors&&(o.crossOrigin=n.value),o.src=t})},loadXHR:function(e,t){return new l.a(function(n,i){var o=void 0;window.XDomainRequest?(o=new window.XDomainRequest,t&&o.overrideMimeType(t),o.onload=function(){n(o)},o.onerror=function(e){i(e)}):window.XMLHttpRequest&&(o=new window.XMLHttpRequest,t&&o.overrideMimeType(t),o.onreadystatechange=function(e){4===o.readyState&&(200===o.status?n(o):i(new Error("HTTP Status "+o.status)))}),o.open("GET",e,!0),o.send()})}}},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(6),l=n.n(s),c=n(2),u=n.n(c),p=n(3),f=n.n(p),d=n(1),h=n.n(d),m=n(4),_=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},g=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var y=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||h()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onDragStart","_onDragMove","_onDragEnd"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=f()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(u.a?u()(e,t):e.__proto__=t)}(t,m["b"]),g(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=l()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(i):void 0})(t.prototype.__proto__||h()(t.prototype),"componentDidMount",this).call(this),this.refs.element&&(this._element=this.refs.element)}},{key:"_onDragStart",value:function(e){if(!this.props.disabled){e.preventDefault(),e.stopPropagation(),this._initialMousePosition=m.u.getEventPosition(e),document.addEventListener("mousemove",this._onDragMove,{passive:!1}),document.addEventListener("touchmove",this._onDragMove,{passive:!1}),document.addEventListener("mouseup",this._onDragEnd),document.addEventListener("touchend",this._onDragEnd);var t=this._element.getBoundingClientRect(),n=new m.v(t.left,t.top);this._lastMousePosition=this._initialMousePosition.clone();var i=this._initialMousePosition.clone().subtract(n);this.props.onStart&&this.props.onStart(i,this._initialMousePosition.clone(),e)}}},{key:"_onDragMove",value:function(e){e.preventDefault(),e.stopPropagation();var t=m.u.getEventPosition(e);if(t){var n=t.clone().subtract(this._initialMousePosition),i=t.clone().subtract(this._lastMousePosition);this._lastMousePosition=t.clone(),this.props.onDrag&&this.props.onDrag(n,t,i,e)}}},{key:"_onDragEnd",value:function(e){e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation(),this._onDragMove(e),document.removeEventListener("mousemove",this._onDragMove),document.removeEventListener("touchmove",this._onDragMove),document.removeEventListener("mouseup",this._onDragEnd),document.removeEventListener("touchend",this._onDragEnd),this.props.onStop&&this.props.onStop(e)}},{key:"render",value:function(){var e=this;if(!this.props.children||this.props.children instanceof Array)throw new Error("DraggableComponent expects exactly one child.");var t={onMouseDown:this._onDragStart,onTouchStart:this._onDragStart,style:_({},this.props.children.props.style||{},{touchAction:"none"}),onClick:function(t){if(e.props.disabled){var n=e.props.children.props.onClick;n&&n(t)}else t.stopPropagation()}};if("string"==typeof this.props.children.type)t.ref="element";else{var n=this.props.children.props.innerRef;t.innerRef=function(t){e._element=t,n&&n(t)}}return m.l.cloneElement(this.props.children,t)}}]),t}();y.contextTypes=m.b.contextTypes,y.propTypes={onStart:m.k.func,onDrag:m.k.func,onStop:m.k.func,disabled:m.k.bool},t.a=y},function(e,t,n){var i=n(39);e.exports=function(e,t,n){if(i(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,i){return e.call(t,n,i)};case 3:return function(n,i,o){return e.call(t,n,i,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports={}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var i=n(86),o=n(65);e.exports=Object.keys||function(e){return i(e,o)}},function(e,t,n){var i=n(59);e.exports=function(e){return Object(i(e))}},function(e,n){e.exports=t},function(e,t,n){"use strict";var i=n(158)(!0);n(96)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=i(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){e.exports={default:n(173),__esModule:!0}},function(e,t,n){e.exports={default:n(182),__esModule:!0}},function(e,t,n){e.exports={default:n(183),__esModule:!0}},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function m(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}var _=function(e){function t(e,n,i){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];d(this,t);var a=h(this,(t.__proto__||u()(t)).call(this));return a.id=p.q.getUUID(),a.type=e,a.title=n,a.text=i,a.overlay=o,a.closeOnOverlayClick=r,a.visible=!0,a.data=null,a}return m(t,p["e"]),f(t,[{key:"setData",value:function(e){this.data=e,this.emit("update")}},{key:"close",value:function(){this.visible=!1,this.emit("close")}},{key:"remove",value:function(){this.emit("remove")}}]),t}(),g=function(e){function t(){d(this,t);var e=h(this,(t.__proto__||u()(t)).call(this));return e._modals=[],e}return m(t,p["e"]),f(t,[{key:"displayLoading",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=new _("loading",e,null,t);return this.addModal(n),n}},{key:"displayProgress",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=new _("progress",null,e);return n.setData({progress:t}),this.addModal(n),n}},{key:"displayInput",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=new _("input",e,null,n,!0);return i.setData({text:t}),this.addModal(i),i}},{key:"displayWarning",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:["OK"],i=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o=new _("warning",e,t,i);return o.setData({buttons:n}),this.addModal(o),o}},{key:"displayError",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=new _("error",e,t,n);return this.addModal(i),i}},{key:"addModal",value:function(e){var t=this;this._modals.push(e),e.on("close",function(){t.emit("update")}),e.on("remove",function(){t.removeModal(e)}),e.on("update",function(){t.emit("update")}),this.emit("update")}},{key:"removeModal",value:function(e){var t=this._modals.indexOf(e);this._modals.splice(t,1),this.emit("update")}},{key:"getModals",value:function(){return this._modals}}],[{key:"instance",get:function(){return this._instance||(this._instance=new t),this._instance}}]),t}();t.a=g},function(e,t,n){"use strict";n.d(t,"f",function(){return g}),n.d(t,"b",function(){return y}),n.d(t,"d",function(){return v}),n.d(t,"a",function(){return w}),n.d(t,"e",function(){return x}),n.d(t,"c",function(){return S});var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._buttons=[],r.state={visible:!1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["b"]),h(t,[{key:"componentDidMount",value:function(){for(var e,n=this,i=arguments.length,o=Array(i),r=0;r<i;r++)o[r]=arguments[r];(e=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0}(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this)).call.apply(e,[this].concat(o));var s=this.props.modal;s.on("close",function(){n.setState({visible:!1}),setTimeout(function(){s.remove()},1e3*n.context.theme.transitionDuration)}),Object(d.z)(function(){n.setState({visible:!0})})}},{key:"_onButtonClick",value:function(e){}},{key:"_renderButtons",value:function(){var e=this;return this._buttons.map(function(t,n){return d.l.createElement(k,{key:n,onClick:e._onButtonClick.bind(e,n)},t)})}},{key:"render",value:function(){var e,t,n,i=this.props.modal,r=(e={},t=i.type,n=!0,t in e?o()(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e),a=this._buttons.length?d.l.createElement(b,null,this._renderButtons()):null,s=this._renderContent&&this._renderContent();return s?d.l.createElement(_,{visible:this.state.visible,large:this.state.large},s,d.l.createElement(C,{onClick:this._onClickOverlay,visible:!this.state.visible})):d.l.createElement(_,{visible:this.state.visible},d.l.createElement(g,r,d.l.createElement(y,null,d.l.createElement(w,{src:this._getAssetPath("shared/modals/icon.png",!0)})),d.l.createElement(v,null,d.l.createElement(x,null,i.title),d.l.createElement(S,null,i.text))),a,d.l.createElement(C,{onClick:this._onClickOverlay,visible:!this.state.visible}))}}]),t}();m.propTypes={modal:d.k.object},m.contextTypes=d.b.contextTypes,t.g=m;var _=d.w.div({transform:"rotate3d(1, 1, 0, -15deg) translateX(-50%) translateY(-50%)",transformOrigin:"0 0",transition:function(e){return"all "+e.transitionDuration+"s"},position:"absolute",top:"50%",left:"50%",width:"280px",background:function(e){return"rgba("+e.secondaryControlsBackgroundColorRGB+", .95)"},zIndex:function(e){return e.zIndex("overlays")},boxShadow:"0 6px 10px 0 rgba(0, 0, 0, 0.50)",opacity:0},{visible:{transform:"translateX(-50%) translateY(-50%)",opacity:1},large:{width:"376px",borderRadius:"3px",background:function(e){return"rgba("+e.secondaryControlsBackgroundColorRGB+", 1)"}}},"Modal"),g=d.w.div({display:"table",tableLayout:"fixed",width:"100%",padding:"0 20px 0 0"},{error:{borderBottom:function(e){return"2px solid "+e.modalErrorColor}},warning:{borderBottom:function(e){return"2px solid "+e.modalWarningColor}},loading:{borderBottom:function(e){return"2px solid "+e.modalLoadingColor}}},"Top"),y=d.w.div({display:"table-cell",width:"100px",textAlign:"center",verticalAlign:"middle"},"IconContainer"),v=d.w.div({display:"table-cell",textAlign:"left",padding:"45px 0"},"TextContainer"),b=d.w.div({display:"table",tableLayout:"fixed",height:"48px",width:"100%"},"Buttons"),k=d.w.div({display:"table-cell",verticalAlign:"middle",textTransform:"uppercase",letterSpacing:.84,textAlign:"center",fontFamily:function(e){return e.uppercaseSemiBoldFontFamily},color:function(e){return e.textColor},cursor:"pointer",":hover":{background:function(e){return e.secondaryControlsBackgroundColor}}},"Button"),w=d.w.img({width:"56px",height:"56px"},"Icon"),x=d.w.div({fontFamily:function(e){return e.uppercaseSemiBoldFontFamily},color:function(e){return e.dimmedTextColor},textTransform:"uppercase",letterSpacing:1.2,fontSize:"13px"},"Title"),S=d.w.div({fontFamily:function(e){return e.regularFontFamily},color:function(e){return e.dimmedTextColor},fontSize:"13px",textOverflow:"ellipsis",overflowX:"auto"},"Text"),C=d.w.div({position:"absolute",left:0,top:0,width:"100%",height:"100%",display:"none"},{visible:{display:"block"}},"BlockingOverlay")},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t){var n=0,i=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+i).toString(36))}},function(e,t,n){var i="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;e.exports=n(152)(function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},!0)},function(e,t){e.exports=!0},function(e,t,n){var i=n(16).f,o=n(21),r=n(11)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,r)&&i(e,r,{configurable:!0,value:t})}},function(e,t,n){n(160);for(var i=n(13),o=n(19),r=n(27),a=n(11)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),l=0;l<s.length;l++){var c=s[l],u=i[c],p=u&&u.prototype;p&&!p[a]&&o(p,a,c),r[c]=r.Array}},function(e,t,n){"use strict";(function(e){var i=n(34),o=n.n(i),r=n(0),a=n.n(r),s=n(176),l=n.n(s),c=n(178),u=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function p(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return o()(e)}var f=[{name:"trace",type:"trace",background:"#EEEEEE",color:"#AAAAAA"},{name:"info",type:"log",background:"#BDE5F8",color:"#00529B"},{name:"warn",type:"warn",background:"#FEEFB3",color:"#9F6000"},{name:"error",type:"error",background:"#FFBABA",color:"#D8000C"},{name:"log",type:"log",background:"#EEEEEE",color:"#1f4f6b"}],d=function(){return console&&console.group&&console.groupCollapsed&&console.groupEnd},h=new(function(){function t(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"warn",i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:f;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._levels=[].concat(p(i)),this._maxLevel=this.getLevelIndexByName(n),this._consoleFuncs={trace:function(){var e,t;d()?((e=console).groupCollapsed.apply(e,arguments),console.trace(),console.groupEnd()):(t=console).trace.apply(t,arguments)}},this._levels.forEach(function(t){var n=t.name;e[n]=function(t){for(var i=arguments.length,o=Array(i>1?i-1:0),r=1;r<i;r++)o[r-1]=arguments[r];e._log.apply(e,[n,t].concat(o))}})}return u(t,[{key:"getLevelIndexByName",value:function(e){return c.a.Array.findIndex(this._levels,function(t){return t.name===e})}},{key:"getLevelObjectByName",value:function(e){return c.a.Array.find(this._levels,function(t){return t.name===e})}},{key:"canLog",value:function(e){var t=this.getLevelIndexByName(e);return!(t<0)&&t>=this._maxLevel}},{key:"setLevel",value:function(e){var t=this.getLevelIndexByName(e);t<0||(this._maxLevel=t)}},{key:"_log",value:function(t,n){for(var i=arguments.length,o=Array(i>2?i-2:0),r=2;r<i;r++)o[r-2]=arguments[r];var a=this.getLevelObjectByName(t);if(a&&this.canLog(t)){a.name;var s,u=a.type,f=a.background,h=a.color,m=o.filter(function(e){return void 0!==e}).map(function(e){return e.toObject?JSON.parse(l()(e.toObject())):e}),_=this._consoleFuncs[u]||console[u]?function(){var e;return(e=console)[u].apply(e,arguments)}:function(){var e;return(e=console).log.apply(e,arguments)},g=m.length,y=function(e,t){return["background: #2D7BFF; line-height: 20px; padding: 4px 0","background: #2B2B2B; color: white; line-height: 20px; padding: 4px 0","background: #2D7BFF; line-height: 20px; padding: 4px 0","background: "+e+"; color: "+t+"; line-height: 20px; padding: 4px 0; font-weight: bold","background: #2B2B2B; color: white; line-height: 20px; padding: 4px 0","background: #2D7BFF; line-height: 20px; padding: 4px 0"]}(f,h);if(!(!e||e&&e.browser)||"undefined"==typeof navigator||!navigator.userAgent.match(/Gecko|WebKit/i)||navigator.userAgent.match(/Trident/)){var v=m.length;return v<=0?void _("PhotoEditorSDK | "+n+" "):1===v&&"string"==typeof m[0]?void _("PhotoEditorSDK | "+n+" | "+m[0]):void _.apply(void 0,["PhotoEditorSDK | "+n+" | "].concat(p(m)))}if(g<=0)_.apply(void 0,["%c  %c PhotoEditorSDK %c  %c "+n+" %c %c  "].concat(p(y)));else if(1!==g||"string"!=typeof m[0])if(d())(s=console).groupCollapsed.apply(s,["%c  %c PhotoEditorSDK %c  %c "+n+" %c"].concat(p(c.a.Array.init(y)))),_.apply(void 0,p(m)),console.groupEnd();else _.apply(void 0,["%c  %c PhotoEditorSDK %c  %c "+n+" %c"].concat(p(c.a.Array.init(y)),p(m)));else _.apply(void 0,["%c  %c PhotoEditorSDK %c  %c "+n+" %c  "+m[0]+"  %c  "].concat(p(y)))}}},{key:"image",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments[1],n=new window.Image,i=function(){var t=n.width,i=n.height;e&&console.log(e),console.log("%c+","\n        font-size: 1px;\n        padding: 0px "+Math.floor(t/2)+"px;\n        line-height: "+i+"px;\n        background: url("+n.src+");\n        color: transparent;\n        background-repeat: no-repeat;\n        background-size: "+t+"px "+i+"px;")};return n.onload=i,t instanceof window.HTMLCanvasElement?n.src=t.toDataURL():t instanceof window.Image?(n=t,i()):"string"==typeof t?n.src=t:this.log(e,t),n}},{key:"texture",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments[1];if(t){var n=t.getBaseTexture(),i=n.getRenderers(),o=c.a.Array.find(i,function(e){return e&&"WebGL"===e.constructor.type}),r=n.getFrame(),a=r.width,s=r.height;if(o){var l=o.getContext(),u=n.getGLTextureForRenderer(o);this.logGlTexture(l,u,a,s,e)}else h.image(e,n.getSource())}else this.log(e,"texture: null or undefined")}},{key:"logGlTexture",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:150,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:150,o=arguments[4];e.bindTexture(e.TEXTURE_2D,t);var r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0);var a=new Uint8Array(n*i*4);e.readPixels(0,0,n,i,e.RGBA,e.UNSIGNED_BYTE,a),e.deleteFramebuffer(r);var s=document.createElement("canvas");s.width=n,s.height=i;var l=s.getContext("2d"),c=l.createImageData(n,i);return c.data.set(a),l.putImageData(c,0,0),h.image(o,s)}}]),t}())("warn");t.a=h}).call(t,n(104))},function(e,t,n){e.exports={default:n(191),__esModule:!0}},function(e,t,n){"use strict";(function(e){var i=n(0),o=n.n(i),r=n(196),a=n(200),s=n.n(a),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var c="undefined"!=typeof window?window:e,u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t,this._parsedUrl=s.a.parse(this._url,!0)}return l(e,[{key:"_isJSONPRequest",value:function(){var e=this._parsedUrl.query;for(var t in e){if("?"===e[t])return!0}return!1}},{key:"load",value:function(){return this._isJSONPRequest()?this._loadJSONP():this._loadJSON()}},{key:"_loadJSON",value:function(){var e=this;return new r.a(function(t,n){var i=void 0;c.XDomainRequest?((i=new c.XDomainRequest).onload=function(){var e=JSON.parse(i.responseText);t(e)},i.onerror=function(e){n(e)},i.open("GET",e._url,!0),i.send()):c.XMLHttpRequest&&((i=new XMLHttpRequest).onreadystatechange=function(e){if(4===i.readyState)if(200===i.status){var o=JSON.parse(i.responseText);t(o)}else n(new Error("HTTP Status "+i.status))},i.open("GET",e._url,!0),i.send())})}},{key:"_loadJSONP",value:function(){var e=this,t=!1,n=!1,i="pesdk"+Math.round(99999999999999*Math.random());return new r.a(function(o,r){var a=e._createJSONPNode(i);c[i]=function(i){e._removeJSONPNode(a),t||(n=!0,o(i))},c.setTimeout(function(){n||(e._removeJSONPNode(a),t=!0,r(new Error("Timeout of 5 seconds exceeded.")))},5e3)})}},{key:"_createJSONPNode",value:function(e){var t=this._buildJSONPUrl(e),n=document.querySelector("head"),i=document.createElement("script");return i.src=t,n.appendChild(i),i}},{key:"_removeJSONPNode",value:function(e){e.parentNode.removeChild(e)}},{key:"_buildJSONPUrl",value:function(e){var t=this._parsedUrl.query,n=null;for(var i in t)if("?"===t[i]){n=i;break}return delete this._parsedUrl.search,t[n]=e,s.a.format(this._parsedUrl)}}]),e}();t.a=u}).call(t,n(26))},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(32),f=n.n(p),d=n(42),h=n.n(d),m=n(15),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._timeout=null,r.state={enter:!1,appear:!1,leave:!1},r.props.active&&(r.state.enter=!0,r.state.appear=!0),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["Component"]),_(t,[{key:"componentWillReceiveProps",value:function(e){this.props.active&&!e.active?this._leave():!this.props.active&&e.active&&(this._enter(),this._appear())}},{key:"_cancelTimeout",value:function(){this._timeout&&(window.clearTimeout(this._timeout),this._timeout=null)}},{key:"_enter",value:function(){this.setState({enter:!0})}},{key:"_leave",value:function(){var e=this;this._timeout&&this._cancelTimeout(),this.setState({appear:!1,leave:!0}),this._timeout=window.setTimeout(function(){e._cancelTimeout(),e.setState({enter:!1})},this.props.leaveDuration)}},{key:"_appear",value:function(){var e=this;this._timeout&&this._cancelTimeout(),Object(m.b)(function(){e.setState({appear:!0,leave:!1}),e._timeout=window.setTimeout(function(){e._cancelTimeout()},e.props.appearDuration)})}},{key:"_buildStateProps",value:function(){var e=this.props,t=e.enterProp,n=e.appearProp,i=e.leaveProp,o={};return t&&(o[t]=this.state.enter),n&&(o[n]=this.state.appear),i&&(o[i]=this.state.leave),o}},{key:"render",value:function(){if(!this.props.children)return null;var e=this._buildStateProps();return f.a.cloneElement(this.props.children,e)}}]),t}();g.propTypes={active:h.a.bool,enterProp:h.a.string,enterDuration:h.a.number,appearProp:h.a.string,appearDuration:h.a.number,leaveProp:h.a.string,leaveDuration:h.a.number},g.defaultProps={active:!0,enterProp:"rendered",enterDuration:300,appearProp:"visible",appearDuration:300,leaveDuration:300},t.a=g},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(4),a=n(108),s=n(48),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._categoriesById={},this._categories=[],this._stickersById={},this._addCategories(a.a.DEFAULTS.STICKER_CATEGORIES);var i=this._options,o=i.categories,r=i.replaceCategories;this._options.categories?this._addCategories(o,r):(this._updateCategoriesMap(),this._updateAllCategory())}return l(e,[{key:"loadExternal",value:function(e){var t=this;return new s.a(e).load().then(function(e){t._addCategories(e.categories,t._options.replaceCategories)})}},{key:"_addCategories",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._categories=t?e.slice(0):r.u.mergeCategories(this._categories,e,"stickers"),this._updateCategoriesMap(),this._updateAllCategory()}},{key:"_updateCategoriesMap",value:function(){var e=this;this._categoriesById={},this._categories.forEach(function(t){e._categoriesById[t.identifier]=t}),this._categories.forEach(function(t){t.stickers.forEach(function(t){e._stickersById[t.identifier]=t})}),void 0!==this._options.availableStickers&&null!==this._options.availableStickers&&(this._categories.forEach(function(t){t.stickers=t.stickers.filter(function(t){return-1!==e._options.availableStickers.indexOf(t.identifier)})}),this._categories=this._categories.filter(function(e){return e.stickers.length>0})),this._updateAllCategory()}},{key:"_updateAllCategory",value:function(){this._allCategory={identifier:"all",defaultName:"All",stickers:this._categories.map(function(e){return e.stickers}).reduce(function(e,t){return e.concat(t)},[])},this._categoriesById.all=this._allCategory}},{key:"getStickersForCategory",value:function(e){if(!this._categoriesById[e])throw new Error("Unknown sticker category '"+e+"'");return this._categoriesById[e].stickers}},{key:"getStickerByIdentifier",value:function(e){return this._stickersById[e]}},{key:"getCategories",value:function(){return arguments.length>0&&void 0!==arguments[0]&&arguments[0]?[this._allCategory].concat(this._categories):this._categories}},{key:"getCategory",value:function(e){return this._categoriesById[e]}}],[{key:"getURLForSticker",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"base",n=e.images,i="base"===t&&n.mediaBase||n.mediaThumb,o=i.uris||[i.uri];if(void 0===r.u.Browser||r.u.Browser.getIEVersion()){var a=o.filter(function(e){return!/\.svg$/i.test(e)});return a.length?a[0]:o[0]}var s=o.filter(function(e){return/\.svg$/i.test(e)});return s.length?s[0]:o[0]}}]),e}();t.a=c},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(4),l=n(241),c=n(46),u=n(116),p=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var d=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._fonts=[],this._variationsByIdentifier={},this._fontsByFontFamily={},this._initFonts()}return f(e,[{key:"_initFonts",value:function(){var e=this,t=this._options,n=t.fonts,i=t.replaceFonts,o=t.availableVariations,r=s.d.DEFAULTS.FONTS,a=void 0;r=(r=i?n:r.concat(n||[])).map(function(t){var n=t.fontFamily,i=t.variations;if(o&&(i=i.filter(function(e){return-1!==o.indexOf(e.identifier)})),0===i.length)return null;var r=new l.a({fontFamily:n});return i=i.map(function(t){var i=new u.a(t);return i.setFontFamily(n),i.setFont(r),t.default&&!a&&(a=i),null==i.getTextMetrics()&&c.a.warn("Missing font metrics for "+i.getIdentifier()+". The SDK will fall back to basic font rendering, which may lead to layout issues. Please provide font metrics for your custom fonts. See https://docs.photoeditorsdk.com/guides/html5/ for more details."),e._variationsByIdentifier[i.getIdentifier()]=i,i}),r.setVariations(i),e._fontsByFontFamily[n]=r,r}).filter(function(e){return e}),a||(a=r[0].getVariations()[0]),this._defaultVariation=a,this._fonts=r}},{key:"getFonts",value:function(){return this._fonts}},{key:"getFontByFontFamily",value:function(e){return this._fontsByFontFamily[e]}},{key:"getVariationByIdentifier",value:function(e){return this._variationsByIdentifier[e]}},{key:"getVariationsByIdentifier",value:function(){return p({},this._variationsByIdentifier)}},{key:"getDefaultVariation",value:function(){return this._defaultVariation}}]),e}();t.a=d},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),m=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var _=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onSharedStateUpdate"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["b"]),h(t,[{key:"componentDidMount",value:function(){m(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this.context.sharedState&&this.context.sharedState.on("update",this._onSharedStateUpdate)}},{key:"componentWillUnmount",value:function(){m(t.prototype.__proto__||f()(t.prototype),"componentWillUnmount",this).call(this),this.context.sharedState&&this.context.sharedState.off("update",this._onSharedStateUpdate)}},{key:"_onSharedStateUpdate",value:function(e,t){this.shouldSharedComponentUpdate(e,t)?(this.sharedComponentWillUpdate(e,t),this.forceUpdate(),this.sharedStateDidChange(e,t)):this.sharedStateDidChange(e,t)}},{key:"sharedComponentWillUpdate",value:function(e,t){}},{key:"shouldSharedComponentUpdate",value:function(e,t){return!0}},{key:"sharedStateDidChange",value:function(e,t){}},{key:"sharedStateWillChange",value:function(e,t){}},{key:"setSharedState",value:function(e,t){this.context.sharedState.set(e,t)}},{key:"getSharedState",value:function(e){return this.context.sharedState.get(e)}},{key:"forceSharedUpdate",value:function(){this.context.sharedState.broadcastUpdate()}},{key:"sharedState",get:function(){return this.context.sharedState.state}}]),t}();_.contextTypes={editor:d.k.object,ui:d.k.object,options:d.k.object,mediator:d.k.object,sharedState:d.k.object,theme:d.k.object,screen:d.k.object,appComponent:d.k.object,globalState:d.k.object},_.propTypes={sharedState:d.k.any},t.a=_},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(80),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onKeyDown","_onInputBlur","_onInputChange"),r.state={},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),d(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.value!==e.value||this.props.disabled!==e.disabled}},{key:"_onInputChange",value:function(e){this.props.onLiveChange&&this.props.onLiveChange(e)}},{key:"_onInputBlur",value:function(e){this.props.onChange&&this.props.onChange(e)}},{key:"_onKeyDown",value:function(e){13!==e.keyCode&&27!==e.keyCode||this._input.blur(),this.props.onKeyDown&&this.props.onKeyDown()}},{key:"focus",value:function(){this._input.focus()}},{key:"_getInputStyle",value:function(){return{}}},{key:"render",value:function(){var e=this,t=this.constructor.RootElement;return p.l.createElement(t,{value:this.props.value,onChange:this._onInputChange,onBlur:this._onInputBlur,innerRef:function(t){e._input=t},onKeyDown:this._onKeyDown,name:this.props.name,styles:this.props.styles,className:this.props.className,style:this._getInputStyle(),disabled:this.props.disabled})}}]),t}();h.contextTypes=p.b.contextTypes,t.a=h,h.RootElement=Object(p.w)(f.a).input({},"NumericInputComponent")},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(6),l=n.n(s),c=n(2),u=n.n(c),p=n(3),f=n.n(p),d=n(1),h=n.n(d),m=n(7),_=(n.n(m),n(5)),g=(n.n(_),n(316)),y=n(317),v=n(318),b=n(319),k=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},w=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function x(e,t,n){return t in e?a()(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var S=m.Math.Vector2,C=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,o=Array(i),r=0;r<i;r++)o[r]=arguments[r];var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||h()(t)).call.apply(e,[this].concat(o)));return a._bindAll("_onZoomDone","_onWindowResize","_onHistoryChange","_onAfterTransform"),a._events=(x(n={},_.Constants.EVENTS.ZOOM_DONE,a._onZoomDone),x(n,_.Constants.EVENTS.WINDOW_RESIZE,a._onWindowResize),x(n,_.Constants.EVENTS.HISTORY_UNDO,a._onHistoryChange),x(n,_.Constants.EVENTS.HISTORY_REDO,a._onHistoryChange),n),a.state=m.Utils.extend(a.state,{visible:!1,canvasClickDisabled:!1}),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=f()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(u.a?u()(e,t):e.__proto__=t)}(t,_["CanvasControlsComponent"]),w(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=l()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(i):void 0})(t.prototype.__proto__||h()(t.prototype),"componentDidMount",this).call(this),this.forceUpdate()}},{key:"_onAfterTransform",value:function(e){var t="sprite-transform-"+e.getId();this.props.controls.addLocalHistorySnapshot(t,!0)}},{key:"_onHistoryChange",value:function(){var e=this.getSharedState("operation");if(e){var t=this.getSharedState("selectedSprite");-1===e.getSprites().indexOf(t)&&this._selectNextSprite()}}},{key:"_onWindowResize",value:function(){var e=this;this.context.editor.once("rendered",function(){e.forceUpdate()})}},{key:"_onZoomDone",value:function(){this.context.editor.render(),this.setState({visible:!0})}},{key:"_onItemBlur",value:function(){}},{key:"_onCanvasClick",value:function(e){this.state.canvasClickDisabled||(this._performHitTest(_.Utils.getEventPosition(e))||(this.getSharedState("selectedSprite")&&this._onItemBlur(),this.context.screen.switchToControls("default")))}},{key:"_onSpriteDelete",value:function(e){this.getSharedState("operation").removeSprite(e),e.dispose(),this._selectNextSprite(),this.props.controls.addLocalHistorySnapshot("sprite-deletion",!1),this.context.editor.render()}},{key:"_onSpriteTakeToFront",value:function(e){this.getSharedState("operation").takeSpriteToFront(e),this.props.controls.addLocalHistorySnapshot("sprite-order",!1),this.forceUpdate(),this.context.editor.render()}},{key:"_onSpriteFlipHorizontally",value:function(e,t){t.stopPropagation(),e.setFlipHorizontally(!e.getFlipHorizontally()),this.props.controls.addLocalHistorySnapshot("sprite-flip-horizontally",!1),this.forceUpdate(),this.context.editor.render()}},{key:"_onSpriteDuplicate",value:function(e,t){t.stopPropagation();var n=this.getSharedState("operation"),i=e.serializeOptions();delete i.id,delete i.type,e.hasOption("image")&&(i.image=e.getImage());var o=n.getInputDimensions();i.position.add(new S(10,10).divide(o));var r=this._createSprite(i);this.setSharedState({selectedSprite:r}),n.addSprite(r),this.props.controls.addLocalHistorySnapshot("sprite-creation",!1),this.context.editor.render()}},{key:"_selectNextSprite",value:function(){var e=this.getSharedState("operation").getSprites(),t=e[e.length-1];t?this.setSharedState({selectedSprite:t}):(this.props.controls.skipHistory=!0,this.context.screen.switchToControls("default"))}},{key:"_getComponentTypeForSprite",value:function(e){var t=m.Operations.SpriteOperation;switch(e.constructor){case t.StickerSprite:return g.a;case t.TextSprite:return y.a;case t.BrushSprite:return v.a;case t.TextDesignSprite:return b.a}}},{key:"_getPropsForSprite",value:function(e){var t={hideContent:!0};return t}},{key:"_renderSpriteItems",value:function(e){var t=this,n=this.getSharedState("selectedSprite");return e.map(function(e){var i=t._getComponentTypeForSprite(e),o=t._getPropsForSprite(e),r=n===e;return _.React.createElement(i,k({sprite:e,selected:r,onClick:t._onCanvasClick,onAfterChange:t._onAfterTransform.bind(t,e),onCanvasClickDisabled:t._onCanvasClickDisabled,onCanvasClickEnabled:t._onCanvasClickEnabled,onDelete:t._onSpriteDelete.bind(t,e),onTakeToFront:t._onSpriteTakeToFront.bind(t,e),onFlipHorizontally:t._onSpriteFlipHorizontally.bind(t,e),onDuplicate:t._onSpriteDuplicate.bind(t,e),snapRotation:t.props.options.snapRotation,snapRotationTolerance:t.props.options.snapRotationTolerance,canvasControls:t,key:e.getId()},o))})}},{key:"_renderOverlayControls",value:function(){return null}},{key:"_renderControls",value:function(){var e=this;if(this.state.visible){var t=this.getSharedState("operation").getSprites(),n=this._container&&this._getContainerStyle();return _.React.createElement(E,{className:void 0},_.React.createElement(T,{innerRef:function(t){e._innerContainer=t},style:n,className:void 0},!this.state.canvasClickDisabled&&_.React.createElement(O,{onClick:this._onCanvasClick}),_.React.createElement("div",null,this._renderSpriteItems(t),this._renderOverlayControls())))}}}]),t}();C.contextTypes=_.CanvasControlsComponent.contextTypes,t.a=C;var E=_.adonis.div({},"CanvasControls"),T=_.adonis.div({position:"absolute",overflow:"hidden"},"Container"),O=_.adonis.div({position:"absolute",top:0,left:0,width:"100%",height:"100%",background:"#FF0000",opacity:0,zIndex:function(e){return e.zIndex("controlsOverlays")}},"ClickHandlerForInternetExplorer")},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(5)),m=(n.n(h),o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=d.Math.Vector2,y=void 0,v=void 0;d.Operations.SpriteOperation&&(y=d.Operations.SpriteOperation.TextSprite,v=d.Operations.SpriteOperation.TextDesignSprite);var b=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onDragStart","_onDrag","_onDragStop","_onRotateDragStart","_onRotateDrag","_onRotateDragStop","_onCornerDrag","_onCornerDragStop","_onSpriteUpdate","_onTakeToFront","_onFlipHorizontally","_onDuplicate","_onDelete"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["BaseComponent"]),_(t,[{key:"componentDidMount",value:function(){this.props.sprite.on("update",this._onSpriteUpdate)}},{key:"componentWillUnmount",value:function(){this.props.sprite.off("update",this._onSpriteUpdate)}},{key:"componentWillReceiveProps",value:function(e){this.props.sprite.off("update",this._onSpriteUpdate),e.sprite.on("update",this._onSpriteUpdate)}},{key:"_onSpriteUpdate",value:function(){this.forceUpdate()}},{key:"_onTakeToFront",value:function(e){e.stopPropagation(),this.props.onTakeToFront&&this.props.onTakeToFront(e)}},{key:"_onFlipHorizontally",value:function(e){e.stopPropagation(),this.props.onFlipHorizontally&&this.props.onFlipHorizontally(e)}},{key:"_onDelete",value:function(e){e.stopPropagation(),this.props.onDelete&&this.props.onDelete(e)}},{key:"_onDuplicate",value:function(e){e.stopPropagation(),this.props.onDuplicate&&this.props.onDuplicate(e)}},{key:"_onBeforeScale",value:function(){}},{key:"_onScale",value:function(e){}},{key:"_onRotateDragStart",value:function(){this._imageBoundingBox=this.props.canvasControls.getImageBoundingRect(),this._containerOffset=this.props.canvasControls.getContainerOffset(),this.props.onBeforeChange&&this.props.onBeforeChange(),this.props.onCanvasClickDisabled&&this.props.onCanvasClickDisabled()}},{key:"_onRotateDrag",value:function(e,t){var n=this.context.editor,i=this.props.sprite,o=this._getAbsoluteSpritePosition().add(this._imageBoundingBox.x,this._imageBoundingBox.y).clone(),r=t.clone().subtract(this._containerOffset).subtract(o),a=Math.atan2(r.y,r.x)-Math.PI/2,s=this.props,l=s.snapRotation,c=s.snapRotationTolerance,u=Math.round(180*a/Math.PI),p=Math.round(u/l)*l,f=u-p;Math.abs(f)<c&&(a=p*Math.PI/180),i.setRotation(a),n.render(),this.forceUpdate()}},{key:"_onRotateDragStop",value:function(){this.props.onAfterChange&&this.props.onAfterChange(),this.props.onCanvasClickEnabled&&this.props.onCanvasClickEnabled()}},{key:"_onCornerDragStart",value:function(e,t,n,i){var o=this.context.editor,r=this.props.sprite,a=r.getDimensions(o.getSDK(),o.getOutputDimensions()).x;this._imageBoundingBox=this.props.canvasControls.getImageBoundingRect(),this._containerOffset=this.props.canvasControls.getContainerOffset();var s=r.getPivot(),l=r.getAnchor(),c=this._getAbsoluteSpritePosition().add(this._imageBoundingBox.x,this._imageBoundingBox.y),u=r.getDimensions(o.getSDK(),o.getOutputDimensions()),p=new g(u.width,u.height),f=c.clone().subtract(p.clone().multiply(l)).add(p.clone().multiply(s)).round(),d=i.clone().subtract(this._containerOffset).subtract(f);this._initialScaleSettings={width:a,mouseDistanceFromPivot:d},this._onBeforeScale(),this.props.onBeforeChange&&this.props.onBeforeChange(),this.props.onCanvasClickDisabled&&this.props.onCanvasClickDisabled()}},{key:"_onCornerDrag",value:function(e){var t=this.context.editor,n=this.props.sprite.getRotation(),i=this._initialScaleSettings,o=i.width,r=i.mouseDistanceFromPivot.clone().add(e),a=Math.cos(n),s=Math.sin(n),l=Math.max(Math.abs(2*(r.x*a+r.y*s)),this.constructor.MIN_WIDTH)/o;t.render(),this._onScale(l)}},{key:"_onCornerDragStop",value:function(){this.props.onAfterChange&&this.props.onAfterChange(),this.props.onCanvasClickEnabled&&this.props.onCanvasClickEnabled()}},{key:"_isDraggingDisabled",value:function(){return!this.props.selected}},{key:"_onDragStart",value:function(){var e=this.props.sprite;this._initialPosition=e.getPosition(),this.props.onBeforeChange&&this.props.onBeforeChange()}},{key:"_onDrag",value:function(e){var t=this.props.sprite,n=this.context.editor,i=n.getOutputDimensions(),o=this._initialPosition.clone().add(e.divide(i));this._dragEndPosition=o.clone(),t.setPosition(o),n.render(),this.forceUpdate()}},{key:"_onDragStop",value:function(){this._dragEndPosition&&0!==this._dragEndPosition.clone().subtract(this._initialPosition).len()&&this.props.onAfterChange&&this.props.onAfterChange()}},{key:"_getAbsoluteSpritePosition",value:function(){var e=this.context.editor.getOutputDimensions();return this.props.sprite.getPosition().clone().multiply(e)}},{key:"_getContainerStyle",value:function(){return{}}},{key:"_renderKnobs",value:function(){var e=this,t=[];return["top","bottom"].forEach(function(n){["left","right"].forEach(function(i){var o=n+"-"+i,r=function(e,t,n){return t in e?a()(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},o,!0);t.push(h.React.createElement(h.DraggableComponent,{key:o,onStart:e._onCornerDragStart.bind(e,n,i),onDrag:e._onCornerDrag,onStop:e._onCornerDragStop},h.React.createElement(O,r)))})}),t}},{key:"_getSpriteDimensions",value:function(){var e=this.context.editor,t=this.props.sprite,n=e.getOutputDimensions();return t.getDimensions(e.getSDK(),n)}},{key:"_getOverlayPosition",value:function(){var e=this.context.editor,t=this.props.sprite,n=e.getOutputDimensions(),i=this._getSpriteDimensions(),o=t.getPosition().clone().multiply(n),r=t.getRotation(),a=Math.sin(r),s=Math.cos(r),l=new g(Math.abs(i.x*s)+Math.abs(i.y*a),Math.abs(i.x*a)+Math.abs(i.y*s));return new g(o.x,o.y-l.y/2-70).clamp(new g(80,20),n.clone().subtract(80,70))}},{key:"_renderOverlayControls",value:function(){if(this.props.selected)return h.React.createElement(h.CanvasOverlayControlsComponent,{takeToFront:!0,flipHorizontally:!(this.props.sprite instanceof y||this.props.sprite instanceof v),duplicate:!(this.props.sprite instanceof v),delete:!0,position:this._getOverlayPosition(),onTakeToFront:this._onTakeToFront,onFlipHorizontally:this._onFlipHorizontally,onDuplicate:this._onDuplicate,onDelete:this._onDelete})}},{key:"_getItemControlsProps",value:function(){return{}}},{key:"render",value:function(){var e=this,t=this.props,n=t.selected,i=t.sprite,o=this.state.editing,r=!o,a=[this._renderKnobs(),h.React.createElement(C,{key:"rotateControls"},h.React.createElement(h.DraggableComponent,{onStart:this._onRotateDragStart,onDrag:this._onRotateDrag,onStop:this._onRotateDragStop},h.React.createElement(T,null)))],s=this._getItemControlsProps(),l=h.React.createElement(x,m({style:this._getContainerStyle()},s),a);return h.React.createElement(h.DraggableComponent,{onStart:this._onDragStart,onStop:this._onDragStop,onDrag:this._onDrag,disabled:this._isDraggingDisabled()},h.React.createElement(k,{onClick:this.props.onClick,"data-type":i.constructor.type,"data-selected":n,className:void 0},this._renderOverlayControls(),h.React.createElement(w,{style:this._getContainerStyle(),editing:n&&o,innerRef:function(t){e._container=t},className:void 0},h.React.createElement(S,null,this._renderContent()),n&&!r&&a),n&&r&&l))}}]),t}();b.contextTypes=h.BaseComponent.contextTypes,b.MIN_WIDTH=1,b.defaultProps={snapRotation:90,snapRotationTolerance:5},t.a=b;var k=h.adonis.div({},"OuterContainer"),w=h.adonis.div({position:"absolute",boxSizing:"border-box"},{editing:{border:function(e){return"2px solid "+e.controlsOutlineColor},boxShadow:"0 2px 6px 0 rgba(0, 0, 0, 0.20), inset 0 2px 6px 0 rgba(0, 0, 0, 0.20)",zIndex:function(e){return e.zIndex("controlsOverlays")+2}}},"Container"),x=h.adonis.div({position:"absolute",zIndex:function(e){return e.zIndex("controlsOverlays")+1},border:function(e){return"2px solid "+e.controlsOutlineColor},boxShadow:"0 2px 6px 0 rgba(0, 0, 0, 0.20), inset 0 2px 6px 0 rgba(0, 0, 0, 0.20)",cursor:"move"},"ItemControls"),S=h.adonis.div({},"Content"),C=h.adonis.div({position:"absolute",bottom:"-18px",left:"50%",width:"2px",height:"16px",marginLeft:"-1px",backgroundColor:function(e){return e.controlsOutlineColor}},"RotateControl"),E=h.adonis.div({position:"absolute",width:"24px",height:"24px",cursor:"pointer",":before":{display:"block",position:"absolute",content:'""',background:"white",borderRadius:"50%",width:"8px",height:"8px",marginLeft:"-4px",marginTop:"-4px",top:"50%",left:"50%",boxShadow:function(e){return e.defaultShadow}}},"Knob"),T=Object(h.adonis)(E)({marginLeft:"-11px"},"RotateKnob"),O=Object(h.adonis)(E)({marginTop:"-13px",marginLeft:"-13px"},{"top-left":{top:0,left:0,cursor:"nwse-resize"},"top-right":{marginLeft:"auto",marginRight:"-13px",top:0,right:0,cursor:"nesw-resize"},"bottom-left":{marginTop:"auto",marginBottom:"-13px",bottom:0,left:0,cursor:"nesw-resize"},"bottom-right":{marginTop:"auto",marginLeft:"auto",marginBottom:"-13px",marginRight:"-13px",bottom:0,right:0,cursor:"nwse-resize"}},"CornerKnob")},function(e,t,n){var i=n(17),o=n(13).document,r=i(o)&&i(o.createElement);e.exports=function(e){return r?o.createElement(e):{}}},function(e,t,n){var i=n(17);e.exports=function(e,t){if(!i(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!i(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!i(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!i(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var i=n(40),o=n(28),r=n(20),a=n(57),s=n(21),l=n(84),c=Object.getOwnPropertyDescriptor;t.f=n(18)?c:function(e,t){if(e=r(e),t=a(t,!0),l)try{return c(e,t)}catch(e){}if(s(e,t))return o(!i.f.call(e,t),e[t])}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var i=n(14),o=n(146),r=n(65),a=n(63)("IE_PROTO"),s=function(){},l=function(){var e,t=n(56)("iframe"),i=r.length;for(t.style.display="none",n(87).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;i--;)delete l.prototype[r[i]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(s.prototype=i(e),n=new s,s.prototype=null,n[a]=e):n=l(),void 0===t?n:o(n,t)}},function(e,t,n){var i=n(62),o=Math.min;e.exports=function(e){return e>0?o(i(e),9007199254740991):0}},function(e,t){var n=Math.ceil,i=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?i:n)(e)}},function(e,t,n){var i=n(64)("keys"),o=n(41);e.exports=function(e){return i[e]||(i[e]=o(e))}},function(e,t,n){var i=n(13),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});e.exports=function(e){return o[e]||(o[e]={})}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var i=n(12),o=n(9),r=n(25);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),i(i.S+i.F*r(function(){n(1)}),"Object",a)}},function(e,t,n){var i=n(29),o=n(11)("toStringTag"),r="Arguments"==i(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:r?i(t):"Object"==(a=i(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){var i=n(67),o=n(11)("iterator"),r=n(27);e.exports=n(9).getIteratorMethod=function(e){if(void 0!=e)return e[o]||e["@@iterator"]||r[i(e)]}},function(e,t,n){var i,o,r,a=n(24),s=n(166),l=n(87),c=n(56),u=n(13),p=u.process,f=u.setImmediate,d=u.clearImmediate,h=u.MessageChannel,m=u.Dispatch,_=0,g={},y=function(){var e=+this;if(g.hasOwnProperty(e)){var t=g[e];delete g[e],t()}},v=function(e){y.call(e.data)};f&&d||(f=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return g[++_]=function(){s("function"==typeof e?e:Function(e),t)},i(_),_},d=function(e){delete g[e]},"process"==n(29)(p)?i=function(e){p.nextTick(a(y,e,1))}:m&&m.now?i=function(e){m.now(a(y,e,1))}:h?(r=(o=new h).port2,o.port1.onmessage=v,i=a(r.postMessage,r,1)):u.addEventListener&&"function"==typeof postMessage&&!u.importScripts?(i=function(e){u.postMessage(e+"","*")},u.addEventListener("message",v,!1)):i="onreadystatechange"in c("script")?function(e){l.appendChild(c("script")).onreadystatechange=function(){l.removeChild(this),y.call(e)}}:function(e){setTimeout(a(y,e,1),0)}),e.exports={set:f,clear:d}},function(e,t,n){"use strict";var i=n(39);e.exports.f=function(e){return new function(e){var t,n;this.promise=new e(function(e,i){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=i}),this.resolve=i(t),this.reject=i(n)}(e)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){t.f=n(11)},function(e,t,n){var i=n(13),o=n(9),r=n(43),a=n(72),s=n(16).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=r?{}:i.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},function(e,t,n){"use strict";var i=n(35),o=n.n(i),r=n(36),a=n.n(r),s=n(0),l=n.n(s),c=n(8),u=n.n(c),p=n(242),f=n(245),d="function"==typeof a.a&&"symbol"==typeof o.a?function(e){return typeof e}:function(e){return e&&"function"==typeof a.a&&e.constructor===a.a&&e!==a.a.prototype?"symbol":typeof e},h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),l()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._fonts=n,this._loadedFonts=[]}return h(e,[{key:"setFonts",value:function(e){this._fonts=e}},{key:"needsToLoad",value:function(){for(var e=this,t=function(t){var n=void 0;return e._fonts[t].getVariations().forEach(function(e){n=n||e.getProvider()}),n?{v:!0}:"continue"},n=0;n<this._fonts.length;n++){var i=t(n);switch(i){case"continue":continue;default:if("object"===(void 0===i?"undefined":d(i)))return i.v}}}},{key:"fontLoaded",value:function(e){var t=e.getFontFamily();return-1!==this._loadedFonts.indexOf(t)}},{key:"setFontLoaded",value:function(e){if(!this.fontLoaded(e)){var t=e.getFontFamily();this._loadedFonts.push(t)}}},{key:"load",value:function(){var e=this,t=this._fonts,n={google:new p.a(this._ui),file:new f.a(this._ui)},i=function(){for(var e in n){n[e].dispose()}};t.filter(function(t){return!e.fontLoaded(t)}).forEach(function(e){e.getVariations().forEach(function(e){var t=e.getProvider();t&&n[t].add(e)})});var o=[];for(var r in n)o.push(n[r].load());return u.a.all(o).then(function(){i(),t.forEach(function(t){e.setFontLoaded(t)})}).catch(function(e){throw i(),e})}}]),e}();t.a=m},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(118),h=n(120),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),_=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var g=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["a"]),m(t,[{key:"_serializeSticker",value:function(e,n){var i=e.getInputDimensions(!1),o=_(t.prototype.__proto__||f()(t.prototype),"_serializeSticker",this).call(this,e,n);return"none"!==n.getTintMode()&&(o.options.tintColor=n.serializeOption("tintColor",!0)),o.options.dimensions=n.getDimensions().clone().divide(i.min()).toObject(),o.options.identifier=o.options.name,delete o.options.name,o}},{key:"_serializePath",value:function(e){var n=_(t.prototype.__proto__||f()(t.prototype),"_serializePath",this).call(this,e),i=e.getBrush();return i.hasOption("hardness")&&(n.hardness=i.getOption("hardness")),n}},{key:"_serializeOperation",value:function(e,n){return"frame"===e.constructor.identifier?(this._serializeFrameOperation(e,n),null):"overlay"===e.constructor.identifier?(this._serializeOverlayOperation(e,n),null):_(t.prototype.__proto__||f()(t.prototype),"_serializeOperation",this).call(this,e,n)}},{key:"_serializeFrameOperation",value:function(e,t){var n=t.filter(function(e){return"sprite"===e.type}),i=void 0;n.length?i=n.pop():(i={type:"sprite",options:{sprites:[]}},t.push(i)),i.options.sprites.push({type:"frame",options:this._getFrameOptions(e)})}},{key:"_serializeOverlayOperation",value:function(e,t){if(e.getIdentifier()){var n=t.filter(function(e){return"sprite"===e.type}),i=void 0;n.length?i=n.pop():(i={type:"sprite",options:{sprites:[]}},t.push(i)),i.options.sprites.push({type:"overlay",options:{identifier:e.getIdentifier(),intensity:e.getAlpha(),blendMode:h.a[e.getBlendMode()]}})}}},{key:"_getFrameOptions",value:function(e){return{identifier:e.getFrame().identifier}}},{key:"_serializeOrientationOperation",value:function(e){var n=_(t.prototype.__proto__||f()(t.prototype),"_serializeOrientationOperation",this).call(this,e);return 90!==n.options.rotation&&270!==n.options.rotation||(n.options.flipHorizontally=!n.options.flipHorizontally,n.options.flipVertically=!n.options.flipVertically),n}},{key:"_serializeTransformOperation",value:function(e){var n=this._editor.operations;if(n.exists("orientation")){e=e.clone();var i=n.get("orientation");e.rotate(-i.getRotation()),i.getFlipVertically()&&(e.flip("vertical"),e.setRotation(-1*e.getRotation())),i.getFlipHorizontally()&&(e.flip("horizontal"),e.setRotation(-1*e.getRotation()))}var o=_(t.prototype.__proto__||f()(t.prototype),"_serializeTransformOperation",this).call(this,e);return o.type="transform",o}},{key:"_serializeText",value:function(e,n){var i=_(t.prototype.__proto__||f()(t.prototype),"_serializeText",this).call(this,e,n),o=e.getInputDimensions(!1);return i.options.fontIdentifier=n.getFontIdentifier(),i.options.maxWidth=i.options.maxWidth*o.x/o.min(),delete i.options.fontFamily,i}},{key:"_serializeFilterOperation",value:function(e){var n=_(t.prototype.__proto__||f()(t.prototype),"_serializeFilterOperation",this).call(this,e);return n?(n.options.identifier=n.options.name,delete n.options.name,n):null}},{key:"_serializeRadialFocusOperation",value:function(e){var n=_(t.prototype.__proto__||f()(t.prototype),"_serializeRadialFocusOperation",this).call(this,e),i=n.options.options;return i.start=i.position,delete i.position,i.end={x:i.start.x+i.radius,y:i.start.y},delete i.radius,n}}]),t}();t.a=g,g.version="2.0.0"},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(8),f=n.n(p),d=n(1),h=n.n(d),m=n(4),_=n(119),g=n(121),y=n(122),v=n(50),b=n(123),k=n(74),w=n(22),x=n(120),S=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),C=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var E=m.q.flipObject(x.a),T=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||h()(t)).call.apply(e,[this].concat(i)));r._frameManager=new g.a(r._ui,r._getOptions("frame"));var a=r._getOptions("overlay");return a&&(r._overlayManager=new y.a(r._ui,a)),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,_["a"]),S(t,[{key:"_deserializeSprite",value:function(e,n){return"frame"===n.type?this._deserializeFrame(e,n):"overlay"===n.type?this._deserializeOverlay(e,n):C(t.prototype.__proto__||h()(t.prototype),"_deserializeSprite",this).call(this,e,n)}},{key:"_deserializeOperation",value:function(e){return"transform"===e.type?this._deserializeTransformOperation(e):C(t.prototype.__proto__||h()(t.prototype),"_deserializeOperation",this).call(this,e)}},{key:"_deserializeOrientationOperation",value:function(e){return 90!==e.options.rotation&&270!==e.options.rotation||(e.options.flipHorizontally=!e.options.flipHorizontally,e.options.flipVertically=!e.options.flipVertically),C(t.prototype.__proto__||h()(t.prototype),"_deserializeOrientationOperation",this).call(this,e)}},{key:"_deserializeTransformOperation",value:function(e){var n=this;return C(t.prototype.__proto__||h()(t.prototype),"_deserializeCropOperation",this).call(this,e).then(function(e){if(e){var t=m.q.Array.find(n._data.operations,function(e){return"orientation"===e.type});if(t){var i=t.options,o=i.rotation,r=i.flipHorizontally,a=i.flipVertically;90!==o&&270!==o||(!r&&a||r&&!a)&&(r=!r,a=!a),e.rotate(i.rotation),r&&(e.flip("horizontal"),e.setRotation(-1*e.getRotation())),a&&(e.flip("vertical"),e.setRotation(-1*e.getRotation()))}return e}})}},{key:"_deserializeFrame",value:function(e,t){var n=this,i=t.options.identifier,o=this._frameManager.getFrameByIdentifier(i);if(!o)return m.h.warn("Deserializer","Unknown frame `"+i+"`. Skipping frame."),f.a.resolve();var r=new b.a(this._ui,o);return r.load().then(function(){n._editor.operations.getOrCreate("frame",{frame:r.getFrame()})})}},{key:"_deserializeOverlay",value:function(e,t){var n=this,i=t.options,o=i.blendMode,r=i.intensity,a=i.identifier,s=this._overlayManager.getOverlayByIdentifier(a);if(!s)return m.h.warn("Deserializer","Unknown overlay `"+a+"`. Skipping overlay."),f.a.resolve();var l=this._editor.getUI().getAssetPath(s.image);return w.a.load(l).then(function(e){n._editor.operations.getOrCreate("overlay",{alpha:r,identifier:a,blendMode:parseInt(E[o||s.blendMode],10),image:e})})}},{key:"_createBrushForPath",value:function(e){var n=C(t.prototype.__proto__||h()(t.prototype),"_createBrushForPath",this).call(this,e);return void 0!==e.hardness&&n.hasOption("hardness")&&n.setHardness(e.hardness),n}},{key:"_deserializeSticker",value:function(e,t){var n=this,i=m.p.Operations.SpriteOperation,o=t.options,r=this._stickerManager.getStickerByIdentifier(o.identifier),a=v.a.getURLForSticker(r,"base");if(!r)return m.h.warn("Deserializer","Unknown sticker `"+o.identifier+"`. Skipping sprite."),f.a.resolve();var s=e.getInputDimensions(!1);return new f.a(function(t,l){var c=new window.Image;c.addEventListener("load",function(){var n=i.StickerSprite.prototype.availableOptions.adjustments.structure,a=o.rotation,l=o.flipHorizontally,u=o.flipVertically,p={identifier:o.identifier,image:c,position:m.v.fromObject(o.position),dimensions:m.v.fromObject(o.dimensions).multiply(s.min()),rotation:a,flipHorizontally:l,flipVertically:u,adjustments:{}};void 0!==o.adjustments&&["brightness","contrast","saturation"].forEach(function(e){void 0!==o.adjustments[e]&&(p.adjustments[e]=o.adjustments[e]+n[e].default)}),void 0!==o.tintColor&&void 0!==r.tintMode&&(p.tintColor=m.c.fromArray(o.tintColor),p.tintMode=r.tintMode),t(e.createSticker(p))}),c.crossOrigin=n._editor.getCrossOrigin(),c.src=n._editor.getUI().getAssetPath(a)})}},{key:"_deserializeFilterOperation",value:function(e){var t=this,n=e.options;return this._filterManager.getFilterByIdentifier(n.identifier)?this._filterManager.instantiateFilterWithIdentifier(n.identifier).then(function(e){var i=t._editor.operations.getOrCreate("filter");if(i)return i.set({identifier:n.identifier,filter:e,intensity:n.intensity}),i}):(m.h.warn("Deserializer","Unknown filter `"+n.identifier+"`"),f.a.resolve())}},{key:"_deserializeFocusOperation",value:function(e){var n=e.options,i=n.options;if("radial"!==n.type)return C(t.prototype.__proto__||h()(t.prototype),"_deserializeFocusOperation",this).call(this,e);var o=i.start,r=i.end,a=i.gradientRadius,s=i.blurRadius,l=m.v.fromObject(r).subtract(m.v.fromObject(o)).len();return f.a.resolve(this._editor.operations.getOrCreate("radial-focus",{position:m.v.fromObject(o),radius:l,gradientRadius:a,blurRadius:s}))}},{key:"_deserializeText",value:function(e,t){var n=t.options,i=n.fontSize,o=n.lineHeight,r=n.fontIdentifier,a=n.alignment,s=n.rotation,l=n.maxWidth,c=n.color,u=n.backgroundColor,p=new k.a(this._ui),f=this._fontManager.getVariationByIdentifier(r);return f?p.setFonts([f.getFont()]):f=this._fontManager.getDefaultFont(),p.load().then(function(){var t=e.getInputDimensions(!1),r=l*t.min()/t.x;return e.createText({fontSize:i,lineHeight:o,fontFamily:f.getFontFamily(),fontWeight:f.getFontWeight(),fontIdentifier:f.getIdentifier(),alignment:a,rotation:s,maxWidth:r,text:n.text,color:m.c.fromArray(c),backgroundColor:m.c.fromArray(u),position:m.v.fromObject(n.position)})})}}]),t}();t.a=T,T.version="2.0.0"},function(e,t,n){"use strict";var i=n(34),o=n.n(i),r=n(0),a=n.n(r),s=n(47),l=n.n(s),c=n(4),u=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var p=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._defaultLayouts=c.p.Operations.SpriteOperation.TextDesignSprite.Layouts,this._layouts=[],this._init()}return u(e,[{key:"_init",value:function(){var e=this,t=this._options.availableLayouts;this._layouts=l()(this._defaultLayouts).map(function(t){return{identifier:e._defaultLayouts[t].identifier,layout:e._defaultLayouts[t]}}),t&&(this._layouts=this._layouts.filter(function(e){return t.indexOf(e.identifier)>=0}))}},{key:"getLayoutByIdentifier",value:function(e){var t=c.q.Array.find(this._layouts,function(t){return t.identifier===e});return t&&t.layout}},{key:"getLayouts",value:function(){return[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return o()(e)}(this._layouts))}}]),e}();t.a=p},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(52),m=n(258),_=n(23),g=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),y=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};function v(e,t,n){return t in e?o()(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,o=Array(i),r=0;r<i;r++)o[r]=arguments[r];var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(o)));return a._needsStyleFixes=!0,a._bindAll("_onZoom","_onZoomDone","_onCanvasDrag","_onCanvasDragStart","_onCanvasDragStop","_onCanvasClick","_onCanvasClickDisabled","_onCanvasClickEnabled"),a._initialRerender=!0,a._events=(v(n={},d.d.EVENTS.ZOOM,a._onZoom),v(n,d.d.EVENTS.ZOOM_DONE,a._onZoomDone),n),a.state={canvasClickDisabled:!1,displayHeader:!0},a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["a"]),g(t,[{key:"setSharedState",value:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];y(t.prototype.__proto__||f()(t.prototype),"setSharedState",this).call(this,e,n),i&&this.props.controls.updateSharedState()}},{key:"fixStyles",value:function(){if(d.u.Browser.isIElte(11)){var e=this._outerContainer.offsetHeight;this._container.style.height=e+"px"}}},{key:"componentDidMount",value:function(){y(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._initialRerender&&this.forceUpdate()}},{key:"_performHitTest",value:function(e){var t=this.context.appComponent.getBounds(),n=e.subtract(t.left,t.top),i=this.context.editor,o=i.controls.getAvailable();if(this.props.controls){var r=this.props.controls.constructor.clickAtPosition(e,i);if(r)return this.setSharedState(r),!0}if(i.operations.get("sprite")){var a=this._getTopSpriteAtPosition(n);if(a){if(a.selectedSprite===this.getSharedState("selectedSprite"))return!0;var s=a.selectedSprite.serializeOptions().type;if(s){var l=o[s];if(l&&l.clickAtPosition(n,i))return this.context.screen.switchToControls(s,a),!0}}}for(var c in o){var u=o[c].clickAtPosition(n,i);if(u)return u.selectedSprite===this.getSharedState("selectedSprite")||(this.context.screen.switchToControls(c,u),!0)}return!1}},{key:"_getTopSpriteAtPosition",value:function(e){var t=this.context.editor,n=t.operations.get("sprite");if(!n)return!1;var i=n.getSpritesAtPosition(e,t.getOutputTextureDimensions());return!!i[0]&&{selectedSprite:i[0]}}},{key:"_onCanvasClickDisabled",value:function(){this.setState({canvasClickDisabled:!0})}},{key:"_onCanvasClickEnabled",value:function(){var e=this;Object(d.z)(function(){e.setState({canvasClickDisabled:!1})})}},{key:"_onCanvasClick",value:function(e){var t=d.u.getEventPosition(e);this._performHitTest(t)}},{key:"_onZoom",value:function(){this.forceUpdate()}},{key:"_onZoomDone",value:function(){this.forceUpdate()}},{key:"_onCanvasDragStart",value:function(){var e=this.context.editor;this._initialOffset=e.offset.clone()}},{key:"_onCanvasDrag",value:function(e){var t=this.context.editor,n=t.offset;t.offset=n.copy(this._initialOffset).add(e),t.render()}},{key:"_onCanvasDragStop",value:function(){this.forceUpdate()}},{key:"getImageBoundingRect",value:function(){var e=this.context.editor.getSDK(),t=e.getContainer(),n=e.getSprite(),i=t.getPosition(),o=n.getTexture();e.getTextureScale();if(!o)return new d.n;var r=e.getOutputDimensions(),a=this._outerContainer.getBoundingClientRect(),s=this.context.appComponent.getBounds();return new d.n(Math.floor(i.x-r.x/2-(a.left-s.left)),Math.floor(i.y-r.y/2-(a.top-s.top)),Math.ceil(r.x),Math.ceil(r.y))}},{key:"getContainerOffset",value:function(){var e=this._outerContainer.getBoundingClientRect();return new d.v(e.left,e.top)}},{key:"_getContainerStyle",value:function(){var e=this.getImageBoundingRect();return{left:e.x,top:e.y,width:e.width,height:e.height}}},{key:"_renderControls",value:function(){var e=this,t=this._imageContainer&&this._getContainerStyle();return d.l.createElement(k,{innerRef:function(t){e._imageContainer=t},style:t,onClick:this._onCanvasClick})}},{key:"render",value:function(){var e=this,t=this.context.editor;return d.l.createElement(w,{draggable:!t.isShallow&&t.isDraggable,className:void 0,innerRef:function(t){e._outerContainer=t}},d.l.createElement(_.a,{disabled:t.isShallow||!t.isDraggable,onStart:this._onCanvasDragStart,onDrag:this._onCanvasDrag,onStop:this._onCanvasDragStop},d.l.createElement("div",null,d.l.createElement(x,{innerRef:function(t){e._container=t}},this.state.displayHeader&&d.l.createElement(m.a,null),this._renderControls()))))}},{key:"container",get:function(){return this._container}}]),t}();b.contextTypes=h.a.contextTypes,b.propTypes={options:d.k.object},t.a=b;var k=d.w.div({position:"absolute",overflow:"hidden",background:"#ff0000",opacity:0},"Container"),w=d.w.div({display:"table-cell",position:"relative"},{draggable:{cursor:"move"}},"CanvasControls"),x=d.w.div({position:"absolute",top:"0",left:"0",width:"100%",height:"100%"},"CanvasControlsContainer")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(23),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).call(this));return e.constructor.NATIVE_SCROLLBAR_WIDTH||(e.constructor.NATIVE_SCROLLBAR_WIDTH=d.u.getScrollbarWidth()),e._isDragging=!1,e._bindAll("_onButtonDragStart","_onButtonDrag","_onButtonDragStop","_onBarDragStart","_onBarDrag","_onBarDragStop","_onListScroll"),e.state={buttonSize:0,buttonPosition:0,buttonVisible:!1},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["b"]),m(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this.update()}},{key:"_onListScroll",value:function(){if(!this._isDragging){var e=this._getDirection(),n=void 0,i=void 0,o=void 0;e===t.HORIZONTAL?(n=this._list.scrollWidth-this._list.offsetWidth,i=this._list.scrollLeft,o=this._root.offsetWidth-this.state.buttonSize):e===t.VERTICAL&&(n=this._list.scrollHeight-this._list.offsetHeight,i=this._list.scrollTop,o=this._root.offsetHeight-this.state.buttonSize);var r=i/n;this.setState({buttonPosition:o*r}),this.props.onScroll&&this.props.onScroll(i)}}},{key:"_onButtonDragStart",value:function(e){this._isDragging=!0,this._initialButtonPosition=this.state.buttonPosition||0}},{key:"_onButtonDrag",value:function(e){var n=this._getDirection(),i=void 0;n===t.HORIZONTAL?i=this._initialButtonPosition+e.x:n===t.VERTICAL&&(i=this._initialButtonPosition+e.y),this._setButtonPosition(i)}},{key:"_onButtonDragStop",value:function(){this._isDragging=!1}},{key:"_onBarDragStart",value:function(e){var n=d.u.getEventPosition(e);this._initialPosition=n.clone();var i=this._root.getBoundingClientRect(),o=new d.v(i.left,i.top),r=n.clone().subtract(o),a=this._getDirection();a===t.HORIZONTAL?this._setButtonPosition(r.x-this.state.buttonSize/2):a===t.VERTICAL&&this._setButtonPosition(r.y-this.state.buttonSize/2),document.addEventListener("mousemove",this._onBarDrag),document.addEventListener("touchmove",this._onBarDrag),document.addEventListener("mouseup",this._onBarDragStop),document.addEventListener("touchend",this._onBarDragStop)}},{key:"_onBarDrag",value:function(e){var n=d.u.getEventPosition(e),i=this._root.getBoundingClientRect(),o=new d.v(i.left,i.top),r=n.clone().subtract(o),a=this._getDirection();a===t.HORIZONTAL?this._setButtonPosition(r.x-this.state.buttonSize/2):a===t.VERTICAL&&this._setButtonPosition(r.y-this.state.buttonSize/2)}},{key:"_onBarDragStop",value:function(){document.removeEventListener("mousemove",this._onBarDrag),document.removeEventListener("touchmove",this._onBarDrag),document.removeEventListener("mouseup",this._onBarDragStop),document.removeEventListener("touchend",this._onBarDragStop)}},{key:"_setButtonPosition",value:function(e){var n=this._getDirection(),i=void 0,o=void 0;n===t.HORIZONTAL?(i=this._root.offsetWidth-this.state.buttonSize,o=this._list.scrollWidth-this._list.offsetWidth):n===t.VERTICAL&&(i=this._root.offsetHeight-this.state.buttonSize,o=this._list.scrollHeight-this._list.offsetHeight),e=Math.max(0,e),e=Math.min(e,i),this.setState({buttonPosition:e});var r=o*(e/i);n===t.HORIZONTAL?this._list.scrollLeft=r:n===t.VERTICAL&&(this._list.scrollTop=r),this.props.onScroll&&this.props.onScroll(r)}},{key:"_updateButtonSize",value:function(e){var n,i,o=void 0,r=void 0,a=this._getDirection();a===t.HORIZONTAL?(o=this._list.clientWidth,r=this._list.scrollWidth):a===t.VERTICAL&&(o=this._list.offsetHeight,r=this._list.scrollHeight),n=o/r*o,i=r>o,this.setState({buttonSize:n,buttonVisible:i},e)}},{key:"_updateListSize",value:function(){if(this._list){var e=this._getDirection();if(e===t.HORIZONTAL){this._list.style.height="";var n=this._getFullListDimensions();this._listSize=n.y}else if(e===t.VERTICAL){this._list.style.width="";var i=this._getFullListDimensions();this._listSize=i.x}}}},{key:"_getFullListDimensions",value:function(){var e=this._list.getBoundingClientRect();return new d.v(e.width,e.height)}},{key:"update",value:function(){var e=this;if(!d.u.isMobile()){if(d.u.Browser.isIElte(11)){var n=this._container.offsetHeight;this._list.style.height=n+"px"}var i=this._getDirection();this._updateButtonSize(function(){e._listSize||e._updateListSize();var n=e._listSize;e.state.buttonVisible&&(n+=e.constructor.NATIVE_SCROLLBAR_WIDTH),i===t.HORIZONTAL?(e._root.style.top=e._listSize-12+"px",e._root.style.width=e._list.offsetWidth+"px"):i===t.VERTICAL&&(e._list.style.width=n+"px",e._root.style.left=e._listSize-12+"px",e._root.style.height=e._list.offsetHeight+"px")}),this._list.addEventListener("scroll",this._onListScroll)}}},{key:"_getDirection",value:function(){return this.props.direction||"horizontal"}},{key:"_getGradientOpacity",value:function(){if(!this._list)return!1;var e=void 0;return e=this._getDirection()===t.HORIZONTAL?this._list.scrollWidth-this._list.offsetWidth-this._list.scrollLeft:this._list.scrollHeight-this._list.offsetHeight-this._list.scrollTop,Math.min(Math.max(e/15,0),1)}},{key:"_getButtonStyle",value:function(){return"horizontal"===this._getDirection()?{left:this.state.buttonPosition,width:this.state.buttonSize}:{top:this.state.buttonPosition,height:this.state.buttonSize}}},{key:"getList",value:function(){return this.refs.list}},{key:"getRoot",value:function(){return this.refs.root}},{key:"_renderChild",value:function(e){var t=this;return d.l.cloneElement(e,{innerRef:function(n){e.props.innerRef&&e.props.innerRef(n),t._list=n}})}},{key:"render",value:function(){var e=this;if(d.u.isMobile())return this.props.children;var n=this._getButtonStyle(),i=this._renderChild(this.props.children),o=this._getDirection(),r=this._getGradientOpacity();return d.l.createElement(g,{innerRef:function(t){e._container=t},styles:this.props.styles},i,this.props.noGradient||0===r?null:d.l.createElement(b,{style:{opacity:r},horizontal:o===t.HORIZONTAL,vertical:o===t.VERTICAL}),d.l.createElement(y,{innerRef:function(t){e._root=t},onMouseDown:this._onBarDragStart,onTouchStart:this._onBarDragStart,vertical:"vertical"===this.props.direction,horizontal:"horizontal"===this.props.direction},d.l.createElement(h.a,{onStart:this._onButtonDragStart,onDrag:this._onButtonDrag,onStop:this._onButtonDragStop},d.l.createElement(v,{style:n,visible:this.state.buttonVisible,onMouseDown:this._onButtonDown,vertical:"vertical"===this.props.direction,horizontal:"horizontal"===this.props.direction}))))}}]),t}();_.HORIZONTAL="horizontal",_.VERTICAL="vertical",_.contextTypes=d.b.contextTypes,t.a=_;var g=d.w.div({},"ScrollbarContainer");_.RootElement=g;var y=d.w.div({opacity:.3,position:"absolute",top:0,padding:"4px",cursor:"pointer",zIndex:function(e){return e.zIndex("controlsOverlays")-1}},{vertical:{right:"5px",width:"12px",height:"100%"},horizontal:{bottom:"5px",width:"100%",height:"12px"}},"Scrollbar"),v=d.w.div({position:"absolute",top:"0",left:"0",display:"none",width:"100%",height:"12px",padding:"4px",":before":{borderRadius:"4px",display:"block",background:"white",content:'""'}},{vertical:{":before":{width:"4px",height:"100%"}},horizontal:{":before":{width:"100%",height:"4px"}},visible:{display:"block"}},"ScrollbarButton"),b=d.w.div({position:"absolute",pointerEvents:"none"},{horizontal:{left:"0",bottom:"0",width:"100%",height:function(e){return e.scrollbarGradientSize+"px"},backgroundImage:"linear-gradient(-90deg, rgba(34, 34, 38, 0) 0%, #232326 98%)"},vertical:{left:"0",bottom:"0",width:"100%",height:function(e){return e.scrollbarGradientSize+"px"},backgroundImage:"linear-gradient(-180deg, rgba(34, 34, 38, 0) 0%, #232326 98%)"}},"Gradient")},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var i=n(4).w.css({transition:"opacity .2s ease-out",fontSize:"14px",fontFamily:function(e){return e.regularFontFamily},minWidth:"45px",height:"26px",color:function(e){return e.textColor},paddingBottom:"7px",border:"none",borderBottom:"1px solid rgba(255, 255, 255, 0.1)",background:"transparent",opacity:.7,":focus":{outline:"none"},":hover":{opacity:1}},"Input")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(280),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(52),m=n(53),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onInputLiveChange","_onInputChange"),r.state={value:r.props.value},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,h["a"]),_(t,[{key:"componentWillReceiveProps",value:function(e){e.value!==this.state.value&&this.setState({value:e.value})}},{key:"_onInputLiveChange",value:function(e){this.setState({value:e.target.value})}},{key:"_onInputChange",value:function(e){var t=parseFloat(e.target.value);if(u()(t))return this.setState({value:this.props.value});var n=this.props,i=n.minValue,o=n.maxValue;t=d.u.toFixed(Math.max(i,Math.min(t,o)),1),this.props.onValueChange&&this.props.onValueChange(t),this.setState({value:t})}},{key:"_renderRightPart",value:function(){var e=this;return d.l.createElement(w,{value:this.state.value,onLiveChange:this._onInputLiveChange,onChange:this._onInputChange,className:void 0,innerRef:function(t){e._input=t},disabled:this.props.disabled})}},{key:"render",value:function(){var e=this.props,t=e.label,n=e.inputLabel,i=e.className,o=e.disabled,r=e.styles,a="function"==typeof this._renderLeftPart;return d.l.createElement(y,{styles:r,className:i,disabled:o},d.l.createElement(v,null,a&&d.l.createElement(b,null,t&&d.l.createElement(k,{left:!0},t),this._renderLeftPart()),d.l.createElement(b,null,n&&d.l.createElement(k,null,n||" "),this._renderRightPart())))}}]),t}();g.contextTypes=h.a.contextTypes,t.a=g;var y=d.w.div({display:"table",width:"100%",height:"32px",marginBottom:"16px",position:"relative"},{disabled:{opacity:.4}},"ValueSelection");g.RootElement=y;var v=d.w.div({display:"table-row"},"Row"),b=d.w.div({display:"table-cell",width:"100%",height:"100%",paddingRight:"15px",textAlign:"left",verticalAlign:"top",":last-child":{paddingRight:0}},{bottomAligned:{verticalAlign:"bottom"}},"Column"),k=d.w.div({fontSize:"13px",fontFamily:function(e){return e.regularFontFamily},color:function(e){return e.dimmedTextColor},marginBottom:"6px"},{left:{textAlign:"left"}},"Title"),w=Object(d.w)(m.a)({textAlign:"center",width:"32px"},{disabled:{opacity:.4,":hover":{opacity:.4}}},"InputField")},function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return r}),n.d(t,"c",function(){return a});var i=n(4),o=i.w.css({position:"relative",height:"14px",width:"100%"},"CircleSlider"),r=i.w.css({position:"absolute",top:"3px",bottom:"2px",left:0,width:"100%",borderRadius:"1px",cursor:"pointer"},"CircleSliderBackground"),a=i.w.css({position:"absolute",left:0,top:0,height:"12px",width:"12px",marginLeft:"-6px",borderRadius:"50%",border:function(e){return"2px solid "+e.sliderCircleKnobColor},cursor:"pointer",boxShadow:"0 1px 1px 0 rgba(0,0,0,0.11), 0 1px 3px 0 rgba(0,0,0,0.46)"},"CircleSliderKnob")},function(e,t,n){"use strict";var i=n(7),o=(n.n(i),i.Engine.Filters.OverlayFilter);t.a={normal:o.BLEND_MODES.NORMAL,overlay:o.BLEND_MODES.OVERLAY,hardLight:o.BLEND_MODES.HARD_LIGHT,softLight:o.BLEND_MODES.SOFT_LIGHT,multiply:o.BLEND_MODES.MULTIPLY,darken:o.BLEND_MODES.DARKEN,lighten:o.BLEND_MODES.LIGHTEN,screen:o.BLEND_MODES.SCREEN,colorBurn:o.BLEND_MODES.COLOR_BURN}},function(e,t,n){e.exports=!n(18)&&!n(25)(function(){return 7!=Object.defineProperty(n(56)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var i=n(29);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==i(e)?e.split(""):Object(e)}},function(e,t,n){var i=n(21),o=n(20),r=n(147)(!1),a=n(63)("IE_PROTO");e.exports=function(e,t){var n,s=o(e),l=0,c=[];for(n in s)n!=a&&i(s,n)&&c.push(n);for(;t.length>l;)i(s,n=t[l++])&&(~r(c,n)||c.push(n));return c}},function(e,t,n){var i=n(13).document;e.exports=i&&i.documentElement},function(e,t,n){var i=n(21),o=n(31),r=n(63)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),i(e,r)?e[r]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){"use strict";function i(e){return function(){return e}}var o=function(){};o.thatReturns=i,o.thatReturnsFalse=i(!1),o.thatReturnsTrue=i(!0),o.thatReturnsNull=i(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var i=function(e){};i=function(e){if(void 0===e)throw new Error("invariant requires an error message argument")},e.exports=function(e,t,n,o,r,a,s,l){if(i(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,o,r,a,s,l],p=0;(c=new Error(t.replace(/%s/g,function(){return u[p++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";var i=n(89);i=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==t.indexOf("Failed Composite propType: ")&&!e){for(var n=arguments.length,i=Array(n>2?n-2:0),o=2;o<n;o++)i[o-2]=arguments[o];(function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];var o=0,r="Warning: "+e.replace(/%s/g,function(){return n[o++]});"undefined"!=typeof console&&console.error(r);try{throw new Error(r)}catch(e){}}).apply(void 0,[t].concat(i))}},e.exports=i},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var i=n(155),o=n.n(i),r=o.a;o.a},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(32),h=n.n(d),m=n(42),_=n.n(m),g=n(7),y=(n.n(g),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var v=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._events={},r._needsStyleFixes=!1,r._bindAll("fixStyles"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,h.a.Component),y(t,[{key:"fixStyles",value:function(){return u.a.resolve()}},{key:"componentDidMount",value:function(){this._bindEvents(),this._needsStyleFixes&&(this.fixStyles(),this.context.options.responsive&&window.addEventListener("resize",this.fixStyles))}},{key:"componentWillUnmount",value:function(){this._unbindEvents(),(this.context&&this.context.options||this.props.options).responsive&&this._needsStyleFixes&&window.removeEventListener("resize",this.fixStyles)}},{key:"_bindAll",value:function(){for(var e=this,t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];n.forEach(function(t){if("function"!=typeof e[t])throw new Error("_bindAll: `"+e.constructor.name+"."+t+"` is not a function.");e[t]=e[t].bind(e)})}},{key:"_t",value:function(e,t){return this.context.ui.translate(e,t)}},{key:"_getAssetPath",value:function(){var e;return(e=this.context.ui).getAssetPath.apply(e,arguments)}},{key:"_bindEvents",value:function(){for(var e in this._events){var t=this._events[e];this.context.mediator.on(e,t)}}},{key:"_unbindEvents",value:function(){for(var e in this._events){var t=this._events[e];this.context.mediator.off(e,t)}}},{key:"_emitEvent",value:function(e){for(var t,n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];(t=this.context.mediator).emit.apply(t,[e].concat(i))}},{key:"render",value:function(){return h.a.createElement("div",null)}}]),t}();v.contextTypes={appComponent:_.a.object,editor:_.a.object,ui:_.a.object,options:_.a.object,mediator:_.a.object,screen:_.a.object,theme:_.a.object,globalState:_.a.object},t.a=v},function(e,t){},function(e,t,n){"use strict";var i=n(43),o=n(12),r=n(97),a=n(19),s=n(21),l=n(27),c=n(159),u=n(44),p=n(88),f=n(11)("iterator"),d=!([].keys&&"next"in[].keys()),h=function(){return this};e.exports=function(e,t,n,m,_,g,y){c(n,t,m);var v,b,k,w=function(e){if(!d&&e in E)return E[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},x=t+" Iterator",S="values"==_,C=!1,E=e.prototype,T=E[f]||E["@@iterator"]||_&&E[_],O=!d&&T||w(_),R=_?S?w("entries"):O:void 0,I="Array"==t&&E.entries||T;if(I&&(k=p(I.call(new e)))!==Object.prototype&&k.next&&(u(k,x,!0),i||s(k,f)||a(k,f,h)),S&&T&&"values"!==T.name&&(C=!0,O=function(){return T.call(this)}),i&&!y||!d&&!C&&E[f]||a(E,f,O),l[t]=O,l[x]=h,_)if(v={values:S?O:w("values"),keys:g?O:w("keys"),entries:R},y)for(b in v)b in E||r(E,b,v[b]);else o(o.P+o.F*(d||C),t,v);return v}},function(e,t,n){e.exports=n(19)},function(e,t,n){var i=n(14);e.exports=function(e,t,n,o){try{return o?t(i(n)[0],n[1]):t(n)}catch(t){var r=e.return;throw void 0!==r&&i(r.call(e)),t}}},function(e,t,n){var i=n(27),o=n(11)("iterator"),r=Array.prototype;e.exports=function(e){return void 0!==e&&(i.Array===e||r[o]===e)}},function(e,t,n){var i=n(14),o=n(39),r=n(11)("species");e.exports=function(e,t){var n,a=i(e).constructor;return void 0===a||void 0==(n=i(a)[r])?t:o(n)}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){var i=n(14),o=n(17),r=n(70);e.exports=function(e,t){if(i(e),o(t)&&t.constructor===e)return t;var n=r.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){var i=n(11)("iterator"),o=!1;try{var r=[7][i]();r.return=function(){o=!0},Array.from(r,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var r=[7],a=r[i]();a.next=function(){return{done:n=!0}},r[i]=function(){return a},e(r)}catch(e){}return n}},function(e,t){var n,i,o=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(e){n=r}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var l,c=[],u=!1,p=-1;function f(){u&&l&&(u=!1,l.length?c=l.concat(c):p=-1,c.length&&d())}function d(){if(!u){var e=s(f);u=!0;for(var t=c.length;t;){for(l=c,c=[];++p<t;)l&&l[p].run();p=-1,t=c.length}l=null,u=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||u||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){var i=n(86),o=n(65).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return i(e,o)}},function(e,t,n){e.exports={default:n(215),__esModule:!0}},function(e,t,n){e.exports={default:n(217),__esModule:!0}},function(e,t,n){"use strict";t.a={DEFAULTS:{FILTERS:[{identifier:"imgly_filters_analog",defaultName:"Analog",filters:[{identifier:"imgly_lut_cool",defaultName:"Cool",lutImage:"filters/imgly_lut_cool_5_5_128.png"},{identifier:"imgly_lut_blues",defaultName:"Blues",lutImage:"filters/imgly_lut_blues_5_5_128.png"},{identifier:"imgly_lut_blueshadows",defaultName:"Blue Shadows",lutImage:"filters/imgly_lut_blueshadows_5_5_128.png"},{identifier:"imgly_lut_k6",defaultName:"K6",lutImage:"filters/imgly_lut_k6_5_5_128.png"},{identifier:"imgly_lut_kdynamic",defaultName:"KDynamic",lutImage:"filters/imgly_lut_kdynamic_5_5_128.png"},{identifier:"imgly_lut_lucid",defaultName:"Lucid",lutImage:"filters/imgly_lut_lucid_5_5_128.png"},{identifier:"imgly_lut_pale",defaultName:"Pale",lutImage:"filters/imgly_lut_pale_5_5_128.png"}]},{identifier:"imgly_filters_bw",defaultName:"Black & White",filters:[{identifier:"imgly_lut_sin",defaultName:"Sin",lutImage:"filters/imgly_lut_sin_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_ad1920",defaultName:"1920 A.D.",lutImage:"filters/imgly_lut_ad1920_5_5_128.png"},{identifier:"imgly_lut_bw",defaultName:"B & W",lutImage:"filters/imgly_lut_bw_5_5_128.png"},{identifier:"imgly_lut_litho",defaultName:"Litho",lutImage:"filters/imgly_lut_litho_5_5_128.png"},{identifier:"imgly_lut_plate",defaultName:"Plate",lutImage:"filters/imgly_lut_plate_5_5_128.png"},{identifier:"imgly_lut_x400",defaultName:"X400",lutImage:"filters/imgly_lut_x400_5_5_128.png"}]},{identifier:"imgly_filters_retro",defaultName:"Retro",filters:[{identifier:"imgly_lut_celsius",defaultName:"Celsius",lutImage:"filters/imgly_lut_celsius_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_k2",defaultName:"K2",lutImage:"filters/imgly_lut_k2_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_sepiahigh",defaultName:"Sepia High",lutImage:"filters/imgly_lut_sepiahigh_5_5_128.png"},{identifier:"imgly_lut_ancient",defaultName:"Ancient",lutImage:"filters/imgly_lut_ancient_5_5_128.png"},{identifier:"imgly_lut_classic",defaultName:"Classic",lutImage:"filters/imgly_lut_classic_5_5_128.png"},{identifier:"imgly_lut_eighties",defaultName:"Eighties",lutImage:"filters/imgly_lut_eighties_5_5_128.png"},{identifier:"imgly_lut_elder",defaultName:"Elder",lutImage:"filters/imgly_lut_elder_5_5_128.png"},{identifier:"imgly_lut_glam",defaultName:"Glam",lutImage:"filters/imgly_lut_glam_5_5_128.png"},{identifier:"imgly_lut_gobblin",defaultName:"Gobblin",lutImage:"filters/imgly_lut_gobblin_5_5_128.png"},{identifier:"imgly_lut_orchid",defaultName:"Orchid",lutImage:"filters/imgly_lut_orchid_5_5_128.png"},{identifier:"imgly_lut_seventies",defaultName:"Seventies",lutImage:"filters/imgly_lut_seventies_5_5_128.png"}]},{identifier:"imgly_filters_special",defaultName:"Special",filters:[{identifier:"imgly_lut_fixie",defaultName:"Fixie",lutImage:"filters/imgly_lut_fixie_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_colorful",defaultName:"Colorful",lutImage:"filters/imgly_lut_colorful_5_5_128.png"},{identifier:"imgly_lut_cottoncandy",defaultName:"Cotton Candy",lutImage:"filters/imgly_lut_cottoncandy_5_5_128.png"},{identifier:"imgly_lut_food",defaultName:"Food",lutImage:"filters/imgly_lut_food_5_5_128.png"},{identifier:"imgly_lut_highcontrast",defaultName:"High Contrast",lutImage:"filters/imgly_lut_highcontrast_5_5_128.png"},{identifier:"imgly_lut_k1",defaultName:"K1",lutImage:"filters/imgly_lut_k1_5_5_128.png"},{identifier:"imgly_lut_lomo100",defaultName:"Lomo 100",lutImage:"filters/imgly_lut_lomo100_5_5_128.png"},{identifier:"imgly_lut_neat",defaultName:"Neat",lutImage:"filters/imgly_lut_neat_5_5_128.png"},{identifier:"imgly_lut_nogreen",defaultName:"No Green",lutImage:"filters/imgly_lut_nogreen_5_5_128.png"},{identifier:"imgly_lut_pola669",defaultName:"Pola 669",lutImage:"filters/imgly_lut_pola669_5_5_128.png"},{identifier:"imgly_lut_polasx",defaultName:"Pola SX",lutImage:"filters/imgly_lut_polasx_5_5_128.png"},{identifier:"imgly_lut_pro400",defaultName:"Pro 400",lutImage:"filters/imgly_lut_pro400_5_5_128.png"},{identifier:"imgly_lut_twilight",defaultName:"Twilight",lutImage:"filters/imgly_lut_twilight_5_5_128.png"},{identifier:"imgly_lut_settled",defaultName:"Settled",lutImage:"filters/imgly_lut_settled_5_5_128.png"},{identifier:"imgly_lut_steel",defaultName:"Steel",lutImage:"filters/imgly_lut_steel_5_5_128.png"}]},{identifier:"imgly_filters_summer",defaultName:"Summer",filters:[{identifier:"imgly_lut_texas",defaultName:"Texas",lutImage:"filters/imgly_lut_texas_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_mellow",defaultName:"Mellow",lutImage:"filters/imgly_lut_mellow_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_chest",defaultName:"Chest",lutImage:"filters/imgly_lut_chest_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_creamy",defaultName:"Creamy",lutImage:"filters/imgly_lut_creamy_5_5_128.png"},{identifier:"imgly_lut_evening",defaultName:"Evening",lutImage:"filters/imgly_lut_evening_5_5_128.png"},{identifier:"imgly_lut_fall",defaultName:"Fall",lutImage:"filters/imgly_lut_fall_5_5_128.png"},{identifier:"imgly_lut_front",defaultName:"Front",lutImage:"filters/imgly_lut_front_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_highcarb",defaultName:"High Carb",lutImage:"filters/imgly_lut_highcarb_5_5_128.png"},{identifier:"imgly_lut_keen",defaultName:"Keen",lutImage:"filters/imgly_lut_keen_5_5_128.png"},{identifier:"imgly_lut_pitched",defaultName:"Pitched",lutImage:"filters/imgly_lut_pitched_5_5_128.png"},{identifier:"imgly_lut_soft",defaultName:"Soft",lutImage:"filters/imgly_lut_soft_5_5_128.png"},{identifier:"imgly_lut_summer",defaultName:"Summer",lutImage:"filters/imgly_lut_summer_5_5_128.png"},{identifier:"imgly_lut_sunset",defaultName:"Sunset",lutImage:"filters/imgly_lut_sunset_5_5_128.png"},{identifier:"imgly_lut_tender",defaultName:"Tender",lutImage:"filters/imgly_lut_tender_5_5_128.png"}]},{identifier:"imgly_filters_winter",defaultName:"Winter",filters:[{identifier:"imgly_lut_fridge",defaultName:"Fridge",lutImage:"filters/imgly_lut_fridge_8_8_512.png",resolution:512,horizontalTileCount:8,verticalTileCount:8},{identifier:"imgly_lut_bleached",defaultName:"Bleached",lutImage:"filters/imgly_lut_bleached_5_5_128.png"},{identifier:"imgly_lut_bleachedblue",defaultName:"Bleached Blue",lutImage:"filters/imgly_lut_bleachedblue_5_5_128.png"},{identifier:"imgly_lut_breeze",defaultName:"Breeze",lutImage:"filters/imgly_lut_breeze_5_5_128.png"},{identifier:"imgly_lut_lenin",defaultName:"Lenin",lutImage:"filters/imgly_lut_lenin_5_5_128.png"},{identifier:"imgly_lut_quozi",defaultName:"Quozi",lutImage:"filters/imgly_lut_quozi_5_5_128.png"},{identifier:"imgly_lut_winter",defaultName:"Winter",lutImage:"filters/imgly_lut_winter_5_5_128.png"}]}],OVERLAYS:[{identifier:"imgly_overlay_golden",defaultName:"Golden",image:"overlays/imgly_overlay_golden.jpg",thumbnail:"overlays/imgly_overlay_golden_thumb.jpg",blendMode:"lighten"},{identifier:"imgly_overlay_bokeh",defaultName:"Bokeh",image:"overlays/imgly_overlay_bokeh.jpg",thumbnail:"overlays/imgly_overlay_bokeh_thumb.jpg",blendMode:"lighten"},{identifier:"imgly_overlay_hearts",defaultName:"Hearts",image:"overlays/imgly_overlay_hearts.jpg",thumbnail:"overlays/imgly_overlay_hearts_thumb.jpg",blendMode:"screen"},{identifier:"imgly_overlay_lightleak1",defaultName:"Light Leak",image:"overlays/imgly_overlay_lightleak1.jpg",thumbnail:"overlays/imgly_overlay_lightleak1_thumb.jpg",blendMode:"screen"},{identifier:"imgly_overlay_lightleak2",defaultName:"Light Leak 2",image:"overlays/imgly_overlay_lightleak2.jpg",thumbnail:"overlays/imgly_overlay_lightleak2_thumb.jpg",blendMode:"lighten"},{identifier:"imgly_overlay_rain",defaultName:"Rain",image:"overlays/imgly_overlay_rain.jpg",thumbnail:"overlays/imgly_overlay_rain_thumb.jpg",blendMode:"overlay"},{identifier:"imgly_overlay_wood",defaultName:"Wood",image:"overlays/imgly_overlay_wood.jpg",thumbnail:"overlays/imgly_overlay_wood_thumb.jpg",blendMode:"multiply"},{identifier:"imgly_overlay_mosaic",defaultName:"Mosaic",image:"overlays/imgly_overlay_mosaic.jpg",thumbnail:"overlays/imgly_overlay_mosaic_thumb.jpg",blendMode:"multiply"},{identifier:"imgly_overlay_chop",defaultName:"Chop",image:"overlays/imgly_overlay_chop.jpg",thumbnail:"overlays/imgly_overlay_chop_thumb.jpg",blendMode:"multiply"},{identifier:"imgly_overlay_vintage",defaultName:"Vintage",image:"overlays/imgly_overlay_vintage.jpg",thumbnail:"overlays/imgly_overlay_vintage_thumb.jpg",blendMode:"darken"},{identifier:"imgly_overlay_metal",defaultName:"Metal",image:"overlays/imgly_overlay_metal.jpg",thumbnail:"overlays/imgly_overlay_metal_thumb.jpg",blendMode:"overlay"},{identifier:"imgly_overlay_paper",defaultName:"Paper",image:"overlays/imgly_overlay_paper.jpg",thumbnail:"overlays/imgly_overlay_paper_thumb.jpg",blendMode:"multiply"},{identifier:"imgly_overlay_painting",defaultName:"Painting",image:"overlays/imgly_overlay_painting.jpg",thumbnail:"overlays/imgly_overlay_painting_thumb.jpg",blendMode:"overlay"},{identifier:"imgly_overlay_grain",defaultName:"Grain",image:"overlays/imgly_overlay_grain.jpg",thumbnail:"overlays/imgly_overlay_grain_thumb.jpg",blendMode:"overlay"},{identifier:"imgly_overlay_clouds",defaultName:"Clouds",image:"overlays/imgly_overlay_clouds.jpg",thumbnail:"overlays/imgly_overlay_clouds_thumb.jpg",blendMode:"softLight"},{identifier:"imgly_overlay_wall1",defaultName:"Wall",image:"overlays/imgly_overlay_wall1.jpg",thumbnail:"overlays/imgly_overlay_wall1_thumb.jpg",blendMode:"lighten"},{identifier:"imgly_overlay_wall2",defaultName:"Wall 2",image:"overlays/imgly_overlay_wall2.jpg",thumbnail:"overlays/imgly_overlay_wall2_thumb.jpg",blendMode:"overlay"}],FRAME_CATEGORIES:[{identifier:"imgly_frame_generic",defaultName:"Generic",metaData:{backgroundImage:"frames/generic.png"},frames:[{identifier:"imgly_frame_dia",defaultName:"Dia",layoutMode:"horizontal-inside",thumbnail:"frames/imgly_frame_dia/imgly_frame_dia_thumb.png",imageGroups:{top:{mid:{image:"frames/imgly_frame_dia/imgly_frame_dia_top.png",mode:"repeat"}},left:{start:"frames/imgly_frame_dia/imgly_frame_dia_top_corner_left.png",mid:"frames/imgly_frame_dia/imgly_frame_dia_left.png",end:"frames/imgly_frame_dia/imgly_frame_dia_bottom_corner_left.png"},right:{start:"frames/imgly_frame_dia/imgly_frame_dia_top_corner_right.png",mid:"frames/imgly_frame_dia/imgly_frame_dia_right.png",end:"frames/imgly_frame_dia/imgly_frame_dia_bottom_corner_right.png"},bottom:{mid:{image:"frames/imgly_frame_dia/imgly_frame_dia_bottom.png",mode:"repeat"}}}},{identifier:"imgly_frame_art_decor",defaultName:"Art Decor",tintable:!0,layoutMode:"horizontal-inside",thumbnail:"frames/imgly_frame_art_decor/imgly_frame_art_decor_thumb.png",imageGroups:{top:{start:"frames/imgly_frame_art_decor/imgly_frame_art_decor_top_corner_left.png",mid:{image:"frames/imgly_frame_art_decor/imgly_frame_art_decor_top.png",mode:"stretch"},end:"frames/imgly_frame_art_decor/imgly_frame_art_decor_top_corner_right.png"},left:{mid:{image:"frames/imgly_frame_art_decor/imgly_frame_art_decor_left.png",mode:"stretch"}},right:{mid:{image:"frames/imgly_frame_art_decor/imgly_frame_art_decor_right.png",mode:"stretch"}},bottom:{start:"frames/imgly_frame_art_decor/imgly_frame_art_decor_bottom_corner_left.png",mid:{image:"frames/imgly_frame_art_decor/imgly_frame_art_decor_bottom.png",mode:"stretch"},end:"frames/imgly_frame_art_decor/imgly_frame_art_decor_bottom_corner_right.png"}}},{identifier:"imgly_frame_black_passepartout",defaultName:"Black Passepartout",layoutMode:"horizontal-inside",thumbnail:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_thumb.png",imageGroups:{top:{start:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_top_corner_left.png",mid:{image:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_top.png",mode:"stretch"},end:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_top_corner_right.png"},left:{mid:{image:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_left.png",mode:"stretch"}},right:{mid:{image:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_right.png",mode:"stretch"}},bottom:{start:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_bottom_corner_left.png",mid:{image:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_bottom.png",mode:"stretch"},end:"frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_bottom_corner_right.png"}}},{identifier:"imgly_frame_lowpoly_shadow",defaultName:"Low Poly",layoutMode:"horizontal-inside",thumbnail:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_thumb.png",imageGroups:{top:{start:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_top_corner_left.png",mid:{image:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_top.png",mode:"stretch"},end:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_top_corner_right.png"},left:{mid:{image:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_left.png",mode:"stretch"}},right:{mid:{image:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_right.png",mode:"stretch"}},bottom:{start:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_bottom_corner_left.png",mid:{image:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_bottom.png",mode:"stretch"},end:"frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_bottom_corner_right.png"}}},{identifier:"imgly_frame_wood_passepartout",defaultName:"Wood Passepartout",layoutMode:"horizontal-inside",thumbnail:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_thumb.png",imageGroups:{top:{start:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_top_corner_left.png",mid:{image:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_top.png",mode:"stretch"},end:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_top_corner_right.png"},left:{mid:{image:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_left.png",mode:"stretch"}},right:{mid:{image:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_right.png",mode:"stretch"}},bottom:{start:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_bottom_corner_left.png",mid:{image:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_bottom.png",mode:"stretch"},end:"frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_bottom_corner_right.png"}}}]}],STICKER_CATEGORIES:[{identifier:"imgly_sticker_emoticons",defaultName:"Emoticons",metaData:{backgroundImage:"stickers/emoticons/background.png"},stickers:[{identifier:"imgly_sticker_emoticons_alien",defaultName:"Alien",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_alien.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_alien.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_alien.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_alien.png"],width:1e3,height:935}}},{identifier:"imgly_sticker_emoticons_angel",defaultName:"Angel",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_angel.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_angel.png"],width:62,height:64},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_angel.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_angel.png"]}}},{identifier:"imgly_sticker_emoticons_angry",defaultName:"Angry",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_angry.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_angry.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_angry.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_angry.png"]}}},{identifier:"imgly_sticker_emoticons_anxious",defaultName:"Anxious",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_anxious.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_anxious.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_anxious.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_anxious.png"]}}},{identifier:"imgly_sticker_emoticons_asleep",defaultName:"Asleep",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_asleep.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_asleep.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_asleep.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_asleep.png"]}}},{identifier:"imgly_sticker_emoticons_attention",defaultName:"Attention",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_attention.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_attention.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_attention.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_attention.png"]}}},{identifier:"imgly_sticker_emoticons_baby_chicken",defaultName:"Baby Chicken",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_baby_chicken.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_baby_chicken.png"],width:61,height:42},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_baby_chicken.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_baby_chicken.png"]}}},{identifier:"imgly_sticker_emoticons_batman",defaultName:"Batman",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_batman.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_batman.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_batman.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_batman.png"]}}},{identifier:"imgly_sticker_emoticons_beer",defaultName:"Beer",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_beer.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_beer.png"],width:62,height:59},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_beer.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_beer.png"]}}},{identifier:"imgly_sticker_emoticons_blush",defaultName:"Blush",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_blush.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_blush.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_blush.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_blush.png"]}}},{identifier:"imgly_sticker_emoticons_boxer",defaultName:"Boxer",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_boxer.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_boxer.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_boxer.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_boxer.png"]}}},{identifier:"imgly_sticker_emoticons_business",defaultName:"Business",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_business.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_business.png"],width:60,height:63},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_business.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_business.png"]}}},{identifier:"imgly_sticker_emoticons_chicken",defaultName:"Chicken",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_chicken.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_chicken.png"],width:63,height:55},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_chicken.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_chicken.png"]}}},{identifier:"imgly_sticker_emoticons_cool",defaultName:"Cool",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_cool.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_cool.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_cool.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_cool.png"]}}},{identifier:"imgly_sticker_emoticons_cry",defaultName:"Cry",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_cry.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_cry.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_cry.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_cry.png"]}}},{identifier:"imgly_sticker_emoticons_deceased",defaultName:"Deceased",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_deceased.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_deceased.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_deceased.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_deceased.png"]}}},{identifier:"imgly_sticker_emoticons_devil",defaultName:"Devil",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_devil.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_devil.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_devil.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_devil.png"]}}},{identifier:"imgly_sticker_emoticons_duckface",defaultName:"Duckface",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_duckface.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_duckface.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_duckface.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_duckface.png"]}}},{identifier:"imgly_sticker_emoticons_furious",defaultName:"Furious",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_furious.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_furious.png"],width:62,height:61},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_furious.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_furious.png"]}}},{identifier:"imgly_sticker_emoticons_grin",defaultName:"Grin",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_grin.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_grin.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_grin.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_grin.png"]}}},{identifier:"imgly_sticker_emoticons_guitar",defaultName:"Guitar",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_guitar.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_guitar.png"],width:64,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_guitar.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_guitar.png"]}}},{identifier:"imgly_sticker_emoticons_harry_potter",defaultName:"Harry Potter",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_harry_potter.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_harry_potter.png"],width:64,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_harry_potter.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_harry_potter.png"]}}},{identifier:"imgly_sticker_emoticons_hippie",defaultName:"Hippie",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_hippie.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_hippie.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_hippie.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_hippie.png"]}}},{identifier:"imgly_sticker_emoticons_hitman",defaultName:"Hitman",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_hitman.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_hitman.png"],width:64,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_hitman.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_hitman.png"]}}},{identifier:"imgly_sticker_emoticons_humourous",defaultName:"Humourous",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_humourous.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_humourous.png"],width:64,height:64},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_humourous.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_humourous.png"]}}},{identifier:"imgly_sticker_emoticons_idea",defaultName:"Idea",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_idea.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_idea.png"],width:64,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_idea.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_idea.png"]}}},{identifier:"imgly_sticker_emoticons_impatient",defaultName:"Impatient",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_impatient.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_impatient.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_impatient.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_impatient.png"]}}},{identifier:"imgly_sticker_emoticons_kiss",defaultName:"Kiss",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_kiss.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_kiss.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_kiss.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_kiss.png"]}}},{identifier:"imgly_sticker_emoticons_kisses",defaultName:"Kisses",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_kisses.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_kisses.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_kisses.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_kisses.png"]}}},{identifier:"imgly_sticker_emoticons_laugh",defaultName:"Laugh",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_laugh.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_laugh.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_laugh.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_laugh.png"]}}},{identifier:"imgly_sticker_emoticons_loud_cry",defaultName:"Loud Cry",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_loud_cry.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_loud_cry.png"],width:64,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_loud_cry.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_loud_cry.png"]}}},{identifier:"imgly_sticker_emoticons_loving",defaultName:"Loving",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_loving.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_loving.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_loving.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_loving.png"]}}},{identifier:"imgly_sticker_emoticons_masked",defaultName:"Masked",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_masked.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_masked.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_masked.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_masked.png"]}}},{identifier:"imgly_sticker_emoticons_music",defaultName:"Music",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_music.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_music.png"],width:62,height:54},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_music.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_music.png"]}}},{identifier:"imgly_sticker_emoticons_nerd",defaultName:"Nerd",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_nerd.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_nerd.png"]},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_nerd.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_nerd.png"]}}},{identifier:"imgly_sticker_emoticons_ninja",defaultName:"Ninja",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_ninja.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_ninja.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_ninja.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_ninja.png"]}}},{identifier:"imgly_sticker_emoticons_not_speaking_to_you",defaultName:"Not Speaking To You",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_not_speaking_to_you.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_not_speaking_to_you.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_not_speaking_to_you.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_not_speaking_to_you.png"]}}},{identifier:"imgly_sticker_emoticons_pig",defaultName:"Pig",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_pig.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_pig.png"],width:63,height:41},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_pig.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_pig.png"]}}},{identifier:"imgly_sticker_emoticons_pumpkin",defaultName:"Pumpkin",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_pumpkin.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_pumpkin.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_pumpkin.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_pumpkin.png"]}}},{identifier:"imgly_sticker_emoticons_question",defaultName:"Question",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_question.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_question.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_question.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_question.png"]}}},{identifier:"imgly_sticker_emoticons_rabbit",defaultName:"Rabbit",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_rabbit.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_rabbit.png"],width:65,height:47},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_rabbit.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_rabbit.png"]}}},{identifier:"imgly_sticker_emoticons_sad",defaultName:"Sad",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sad.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sad.png"]},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sad.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_sad.png"]}}},{identifier:"imgly_sticker_emoticons_sick",defaultName:"Sick",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sick.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sick.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sick.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_sick.png"]}}},{identifier:"imgly_sticker_emoticons_skateboard",defaultName:"Skateboard",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_skateboard.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_skateboard.png"],width:62,height:64},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_skateboard.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_skateboard.png"]}}},{identifier:"imgly_sticker_emoticons_skull",defaultName:"Skull",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_skull.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_skull.png"],width:62,height:62},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_skull.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_skull.png"]}}},{identifier:"imgly_sticker_emoticons_sleepy",defaultName:"Sleepy",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sleepy.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sleepy.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sleepy.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_sleepy.png"]}}},{identifier:"imgly_sticker_emoticons_smile",defaultName:"Smile",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_smile.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_smile.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_smile.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_smile.png"]}}},{identifier:"imgly_sticker_emoticons_smoking",defaultName:"Smoking",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_smoking.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_smoking.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_smoking.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_smoking.png"]}}},{identifier:"imgly_sticker_emoticons_sobbing",defaultName:"Sobbing",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sobbing.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sobbing.png"],width:62,height:59},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sobbing.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_sobbing.png"]}}},{identifier:"imgly_sticker_emoticons_star",defaultName:"Star",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_star.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_star.png"],width:64,height:64},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_star.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_star.png"]}}},{identifier:"imgly_sticker_emoticons_steaming_furious",defaultName:"Steaming Furious",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_steaming_furious.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_steaming_furious.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_steaming_furious.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_steaming_furious.png"]}}},{identifier:"imgly_sticker_emoticons_sunbathing",defaultName:"Sunbathing",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sunbathing.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sunbathing.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_sunbathing.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_sunbathing.png"]}}},{identifier:"imgly_sticker_emoticons_tired",defaultName:"Tired",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_tired.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_tired.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_tired.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_tired.png"]}}},{identifier:"imgly_sticker_emoticons_tongue_out_wink",defaultName:"Tongue Out Wink",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_tongue_out_wink.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_tongue_out_wink.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_tongue_out_wink.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_tongue_out_wink.png"]}}},{identifier:"imgly_sticker_emoticons_wave",defaultName:"Wave",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wave.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wave.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wave.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_wave.png"]}}},{identifier:"imgly_sticker_emoticons_wide_grin",defaultName:"Wide Grin",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wide_grin.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wide_grin.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wide_grin.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_wide_grin.png"]}}},{identifier:"imgly_sticker_emoticons_wink",defaultName:"Wink",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wink.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wink.png"],width:62,height:58},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wink.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_wink.png"]}}},{identifier:"imgly_sticker_emoticons_wrestler",defaultName:"Wrestler",images:{mediaThumb:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wrestler.svg","stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wrestler.png"],width:62,height:60},mediaBase:{uris:["stickers/emoticons/stickers/imgly_sticker_emoticons_wrestler.svg","stickers/emoticons/stickers/base/imgly_sticker_emoticons_wrestler.png"]}}}]},{identifier:"imgly_sticker_shapes",defaultName:"Shapes",metaData:{backgroundImage:"stickers/shapes/background.png"},stickers:[{identifier:"imgly_sticker_shapes_arrow_02",defaultName:"Arrow 1",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_arrow_02.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_arrow_02.png"],width:2e3,height:1236},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_arrow_02.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_arrow_02.png"],width:2e3,height:1236}}},{identifier:"imgly_sticker_shapes_arrow_03",defaultName:"Arrow 2",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_arrow_03.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_arrow_03.png"],width:2e3,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_arrow_03.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_arrow_03.png"],width:2e3,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_01",defaultName:"Badge 1",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_01.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_01.png"],width:2e3,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_01.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_01.png"],width:2e3,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_04",defaultName:"Badge 2",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_04.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_04.png"],width:2e3,height:1589},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_04.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_04.png"],width:2e3,height:1589}}},{identifier:"imgly_sticker_shapes_badge_06",defaultName:"Badge 3",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_06.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_06.png"],width:2e3,height:1733},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_06.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_06.png"],width:2e3,height:1733}}},{identifier:"imgly_sticker_shapes_badge_08",defaultName:"Badge 4",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_08.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_08.png"],width:2e3,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_08.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_08.png"],width:2e3,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_11",defaultName:"Badge 5",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_11.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_11.png"],width:2e3,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_11.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_11.png"],width:2e3,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_12",defaultName:"Badge 6",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_12.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_12.png"],width:2001,height:1903},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_12.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_12.png"],width:2001,height:1903}}},{identifier:"imgly_sticker_shapes_badge_13",defaultName:"Badge 7",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_13.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_13.png"],width:2e3,height:1718},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_13.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_13.png"],width:2e3,height:1718}}},{identifier:"imgly_sticker_shapes_badge_15",defaultName:"Badge 8",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_15.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_15.png"],width:1618,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_15.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_15.png"],width:1618,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_18",defaultName:"Badge 9",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_18.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_18.png"],width:1198,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_18.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_18.png"],width:1198,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_19",defaultName:"Badge 10",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_19.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_19.png"],width:2127,height:481},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_19.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_19.png"],width:2127,height:481}}},{identifier:"imgly_sticker_shapes_badge_20",defaultName:"Badge 11",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_20.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_20.png"],width:2e3,height:1404},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_20.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_20.png"],width:2e3,height:1404}}},{identifier:"imgly_sticker_shapes_badge_28",defaultName:"Badge 12",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_28.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_28.png"],width:2e3,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_28.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_28.png"],width:2e3,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_32",defaultName:"Badge 13",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_32.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_32.png"],width:1960,height:2e3},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_32.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_32.png"],width:1960,height:2e3}}},{identifier:"imgly_sticker_shapes_badge_35",defaultName:"Badge 14",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_35.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_35.png"],width:2e3,height:2002},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_35.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_35.png"],width:2e3,height:2002}}},{identifier:"imgly_sticker_shapes_badge_36",defaultName:"Badge 15",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_36.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_36.png"],width:2e3,height:1668},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_badge_36.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_badge_36.png"],width:2e3,height:1668}}},{identifier:"imgly_sticker_shapes_spray_01",defaultName:"Spray 1",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_01.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_spray_01.png"],width:1912,height:2039},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_01.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_spray_01.png"],width:1912,height:2039}}},{identifier:"imgly_sticker_shapes_spray_03",defaultName:"Spray 2",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_03.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_spray_03.png"],width:1681,height:1779},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_03.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_spray_03.png"],width:1681,height:1779}}},{identifier:"imgly_sticker_shapes_spray_04",defaultName:"Spray 3",tintMode:"solid",images:{mediaThumb:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_04.svg","stickers/shapes/stickers/thumbs/imgly_sticker_shapes_spray_04.png"],width:1407,height:2248},mediaBase:{uris:["stickers/shapes/stickers/imgly_sticker_shapes_spray_04.svg","stickers/shapes/stickers/base/imgly_sticker_shapes_spray_04.png"],width:1407,height:2248}}}]}]}}},function(e,t,n){(function(t){(function(){var n,i,o;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:void 0!==t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-o)/1e6},i=t.hrtime,o=(n=function(){var e;return 1e9*(e=i())[0]+e[1]})()):Date.now?(e.exports=function(){return Date.now()-o},o=Date.now()):(e.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(t,n(104))},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(229),d=n(231),h=n(232),m=n(233),_=n(234),g=n(235),y=n(237),v=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var b=function(e){function t(e,n,i){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).call(this));if(r._ui=e,r._options=n,r._mediator=i,r._ready=!1,r._padding=[0,0,0,0],r._offset=new p.v(0,0),r._shallow=o,o||(r._initSDK(),r._onZoom=r._onZoom.bind(r),r._onUndo=r._onUndo.bind(r),r._onRedo=r._onRedo.bind(r),r.history=new y.a(r,r._sdk,r._mediator),r.history.on("undo",r._onUndo),r.history.on("redo",r._onRedo),r.zoom=new g.a(r,r._sdk,r._mediator),r.zoom.on("set",r._onZoom),r._initSerializers()),r.operations=new h.a(r,r._sdk,r._mediator),r.controls=new m.a(r,r._sdk,r._mediator),r.features=new _.a(r,r._sdk,r._mediator),r._sdk){var a=[];for(var s in r._operations)a.push(r._operations[s]);r._sdk.registerOperations(a)}return r._running=!1,r._renderRequested=!0,r._renderCallbacks=[],r._animationFrameRequest=null,r.render=r.render.bind(r),r._tick=r._tick.bind(r),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["e"]),v(t,[{key:"setImage",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._options.editor.image,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=this._sdk.getRenderer(),o=new p.v(t.naturalWidth,t.naturalHeight),r=1e6*this.getMaxMegapixels(),a=i.getMaxDimensions();n&&this.reset();var s=new d.a(t,r,a),l=null,c=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o,i=(arguments.length>2&&void 0!==arguments[2]&&arguments[2],void 0),r=void 0;e._sdk.getImage()&&(i=e.getInputDimensions(),r=n.clone().divide(i)),e._setImage(t,l,n),r&&e.broadcastScale(r),e._initWatermark(),e._ready=!0,e.emit("ready")};s.needsResize()?(this.emit("resize"),l=this._sdk.parseExif(t),s.resize().then(function(t){var n=t.canvas,i=t.dimensions,o=t.reason;n.src="data:image/jpeg;base64,",e.emit("resized",{dimensions:i,reason:o}),c(n,i,o)})):c(t)}},{key:"_initWatermark",value:function(){this._options.editor.watermarkImage&&(this._watermarkOperation=this.operations.getOrCreate("watermark",{image:this._options.editor.watermarkImage}))}},{key:"_initSDK",value:function(){var e=this._options,t=e.logLevel,n=e.displayWelcomeMessage,i=e.debug,o=e.license,r=e.crossOrigin,a=this._options.editor,s=a.smoothDownscaling,l=a.smoothUpscaling,c=a.preferredRenderer,u=a.pixelRatio,f=a.transparent,d=a.clearColor,h=void 0;Array.isArray(d)?h=p.c.fromArray(d):"string"==typeof d?h=p.c.fromHex(d):d instanceof p.c&&(h=d.clone());var m={logLevel:t,debug:i,displayWelcomeMessage:n,pixelRatio:u,smoothDownscaling:s,smoothUpscaling:l,transparent:f,crossOrigin:r,clearColor:h,license:o};this._sdk=new p.p(c,m)}},{key:"_onZoom",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.fixOffset(),this.render(function(){t&&t()})}},{key:"fixOffset",value:function(){this._offset=this._clampOffset(this._offset)}},{key:"_onUndo",value:function(){this.render()}},{key:"_onRedo",value:function(){this.render()}},{key:"getRotation",value:function(){return this._sdk.getRotation()}},{key:"setRotation",value:function(e){this._sdk.setRotation(e)}},{key:"getSpriteScale",value:function(){return this._sdk.getSpriteScale()}},{key:"setSpriteScale",value:function(e){this._sdk.setSpriteScale(e)}},{key:"getCrossOrigin",value:function(){return p.q.getCrossOriginValue(this._options.crossOrigin||"anonymous")}},{key:"isToolAllowed",value:function(e){return!!this._shallow||this._sdk._l.isToolAllowed(e)}},{key:"isToolEnabled",value:function(e){return-1!==this._options.editor.tools.indexOf(e)}},{key:"getMaxMegapixels",value:function(){var e=this._options.editor.maxMegaPixels;return p.u.isMobile()?e.mobile:e.desktop}},{key:"getOutputDimensions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this._sdk.getOutputDimensions(e)}},{key:"getOutputTextureDimensions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this._sdk.getOutputTextureDimensions(e)}},{key:"getFinalDimensions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this._sdk.getFinalDimensions(e)}},{key:"getCanvasDimensions",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=this._sdk.getCanvas(),n=new p.v(t.offsetWidth,t.offsetHeight);return e&&n.subtract(this._padding[1]+this._padding[3],this._padding[0]+this._padding[2]),n}},{key:"_setImage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._options.editor.image,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this._sdk.setAllOperationsToDirty(),this._options.editor.image=e,this._sdk.setImage(e,t,n),this.zoom.auto(!0,!0),this.emit("new-image")}},{key:"export",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this._watermarkOperation&&this._watermarkOperation.setEnabled(!1),this._sdk.setAllOperationsToDirty();var n=this._options.editor.export;return new f.a(this._sdk,n,t).export().then(function(t){return e.emit("export",t),e._mediator.emit(p.d.EVENTS.EXPORT,t,e),e._watermarkOperation&&(e._watermarkOperation.setEnabled(!0),e._sdk.render()),e._sdk.setAllOperationsToDirty(),t})}},{key:"_initSerializers",value:function(){this._serializers={"1.0.0":n(238).default,"1.0.1":n(246).default,"2.0.0":n(247).default,"2.0.1":n(248).default,"3.0.0":n(251).default,"3.1.0":n(252).default}}},{key:"serialize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"3.1.0",n=this._serializers[t];return n?new n(this).serialize(e):p.j.reject(new Error("No serializer for version "+t+" found."))}},{key:"deserialize",value:function(e){var t=this,n=this._serializers[e.version];return n?new n(this).deserialize(e).then(function(){t.zoom.auto(!0,!0)}):p.j.reject(new Error("No serializer for version "+e.version+" found."))}},{key:"_applyOffset",value:function(){var e=this._offset.clone();e.x-=this._padding[1]/2,e.x+=this._padding[3]/2,e.y-=this._padding[2]/2,e.y+=this._padding[0]/2,this._sdk.setOffset(e)}},{key:"start",value:function(){this._animationFrameRequest=Object(p.z)(this._tick)}},{key:"stop",value:function(){this._running=!1,this._animationFrameRequest&&(Object(p.x)(this._animationFrameRequest),this._renderCallbacks=[])}},{key:"render",value:function(e){this._renderRequested=!0,e&&this._renderCallbacks.push(e)}},{key:"_tick",value:function(){var e=this;if(this.zoom.tick(),this._renderRequested){var t=this._renderCallbacks.slice(0);this._renderCallbacks=[],this._render().then(function(){t.forEach(function(e){return e()}),e._animationFrameRequest=Object(p.z)(e._tick)}),this._renderRequested=!1}else this._animationFrameRequest=Object(p.z)(this._tick)}},{key:"_render",value:function(){var e=this;return this._ready?(this._applyOffset(),this._sdk.render().then(function(){e._lastOutputBounds=e._sdk.getSprite().getBounds(),e.emit("rendered")}).catch(function(t){p.h.error(e.constructor.name,"An error occurred while rendering: "+t.message),e.emit("render-error",t)})):p.j.resolve()}},{key:"reset",value:function(){this._sdk.reset(),this.history.reset(),this.operations.reset(),this.features.reset(),this.emit("reset")}},{key:"dispose",value:function(){this.stop(),this._sdk.dispose()}},{key:"isReady",value:function(){return this._ready}},{key:"getRenderer",value:function(){return this._sdk.getRenderer()}},{key:"getSDK",value:function(){return this._sdk}},{key:"getInputDimensions",value:function(){return this._sdk.getInputDimensions()}},{key:"getPadding",value:function(){return this._padding}},{key:"setPadding",value:function(e){this._padding=e||[0,0,0,0]}},{key:"getImage",value:function(){return this._options.editor.image}},{key:"getOptions",value:function(){return this._options}},{key:"getUI",value:function(){return this._ui}},{key:"broadcastScale",value:function(e){var t=this;["sprite"].forEach(function(n){var i=t.operations.get(n);i&&i.scale(e)})}},{key:"broadcastTransform",value:function(e,t){var n=this,i=new p.p.Operations.TransformOperation.TransformChange(e,t);["sprite","selective-blur","radial-focus","mirrored-focus","linear-focus","blur"].forEach(function(e){var t=n.operations.get(e);t&&t.transform(i)})}},{key:"broadcastFlip",value:function(e){var t=this;["mirrored-focus","radial-focus","sprite","selective-blur"].forEach(function(n){var i=t.operations.get(n);i&&i.flip(e)})}},{key:"broadcastRotate",value:function(e){var t=this;["transform","mirrored-focus","radial-focus","sprite","selective-blur"].forEach(function(n){var i=t.operations.get(n);i&&i.rotate(e)})}},{key:"_clampOffset",value:function(e){var t=this.getCanvasDimensions(),n=this._sdk.getOutputDimensions(!1),i=t.clone().subtract(n).divide(2).clamp(null,new p.v(0,0)),o=n.clone().subtract(t).divide(2).clamp(new p.v(0,0),null);return e.clone().clamp(i,o).round()}},{key:"getSnapshot",value:function(){return{operations:this.operations.getSnapshot(),zoom:this.zoom.getSnapshot(),canvasDimensions:this.getCanvasDimensions()}}},{key:"restoreSnapshot",value:function(e){this.operations.restoreSnapshot(e.operations),this.zoom.restoreSnapshot(e.zoom),e.canvasDimensions.equals(this.getCanvasDimensions())||this.zoom.auto(!0,!0)}},{key:"getMediator",value:function(){return this._mediator}},{key:"addSticker",value:function(e,t){var n=this._options.editor,i=p.q.getDeepProperty(n,["controlsOptions","sticker","categories"]);if(!i)return!1;var o=p.q.getDeepProperty(i,[function(t){return t.filter(function(t){return t.identifier===e})[0]},"stickers"]);return!!o&&(o.push(t),this._mediator.emit(p.d.EVENTS.ADDED_STICKER,i),!0)}},{key:"offset",get:function(){return this._offset},set:function(e){this._offset=this._clampOffset(e)}},{key:"isDraggable",get:function(){var e=this.zoom.targetLevel>this.zoom.defaultLevel;return this.features.isEnabled("drag")&&e}},{key:"isShallow",get:function(){return this._shallow}}]),t}();t.a=b},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(8),a=n.n(r),s=n(4),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var c=2*Math.PI,u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t,this._serializeOperations=this._serializeOperations.bind(this)}return l(e,[{key:"serialize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this._options=s.q.defaults(e,{image:!0});var t={version:this.constructor.version};return this._serializeInputImage(t).then(this._serializeOperations)}},{key:"_serializeInputImage",value:function(e){var t=this._editor.getImage(),n=t.width,i=t.height;if(!this._options.image)return e.inputImage={width:n,height:i},a.a.resolve(e);var o=s.q.createCanvas();o.width=t.width,o.height=t.height,o.getContext("2d").drawImage(t,0,0);var r=o.toDataURL(s.f.PNG);return e.inputImage={type:s.f.PNG,data:r.replace(/^data:image\/(.*?);base64,/,""),width:n,height:i},a.a.resolve(e)}},{key:"_serializeOperations",value:function(e){var t=this,n=[];return this._editor.operations.getStack().forEach(function(e){var i=t._serializeOperation(e,n);i&&n.push(i)}),e.operations=n.filter(function(e){return e}),a.a.resolve(e)}},{key:"_serializeOperation",value:function(e,t){switch(e.constructor.identifier){case"transform":return this._serializeTransformOperation(e);case"orientation":return this._serializeOrientationOperation(e);case"filter":return this._serializeFilterOperation(e);case"adjustments":return this._serializeAdjustmentsOperation(e);case"sprite":return this._serializeSpriteOperation(e,t);case"radial-focus":return this._serializeRadialFocusOperation(e);case"mirrored-focus":return this._serializeLinearFocusOperation(e);default:s.h.warn("Unable to serialize operation of type "+e.constructor.identifier)}}},{key:"_serializeTransformOperation",value:function(e){var t=e.serializeOptions(["start","end","rotation"],!0);return t.rotation=(t.rotation+c)%c,{type:"crop",options:t}}},{key:"_serializeOrientationOperation",value:function(e){return{type:"orientation",options:e.serializeOptions(["flipVertically","flipHorizontally","rotation"],!0)}}},{key:"_serializeFilterOperation",value:function(e){return"identity"===e.getIdentifier()?null:{type:"filter",options:{intensity:e.getIntensity(),name:e.getIdentifier()}}}},{key:"_serializeAdjustmentsOperation",value:function(e){var t=e.availableOptions,n={};return["brightness","saturation","contrast","exposure","shadows","highlights","clarity"].forEach(function(i){var o=t[i],r=e.getOption(i),a=o.minValue,s=o.midValue,l=o.maxValue;n[i]=r<=s?(r-a)/(s-a)-1:(r-s)/(l-s)}),{type:"adjustments",options:n}}},{key:"_serializeSpriteOperation",value:function(e,t){var n=this,i=t.filter(function(e){return"sprite"===e.type}),o=void 0,r=!0;if(i.length?(o=i.pop(),r=!1):o={type:"sprite",options:{sprites:[]}},e.getSprites().forEach(function(t){var i=null;t instanceof e.constructor.StickerSprite?i=n._serializeSticker(e,t):t instanceof e.constructor.TextSprite?i=n._serializeText(e,t):t instanceof e.constructor.BrushSprite?i=n._serializeBrush(e,t):t instanceof e.constructor.TextDesignSprite&&(i=n._serializeTextDesign&&n._serializeTextDesign(e,t)),i&&o.options.sprites.push(i)}),r)return o}},{key:"_serializeSticker",value:function(e,t){var n=t.getAdjustments(),i=t.serializeOptions(["identifier","position","dimensions","flipVertically","flipHorizontally","rotation"],!0);i.name=i.identifier,delete i.identifier,i.rotation=(i.rotation+c)%c;var o=n.availableOptions;return i.adjustments={brightness:n.getBrightness()-o.brightness.default,saturation:n.getSaturation()-o.saturation.default,contrast:n.getContrast()-o.contrast.default},{type:"sticker",options:i}}},{key:"_serializeText",value:function(e,t){var n=t.serializeOptions(["fontSize","lineHeight","fontFamily","fontWeight","alignment","color","backgroundColor","position","rotation","text","maxWidth"],!0);return n.rotation=(n.rotation+c)%c,{type:"text",options:n}}},{key:"_serializeBrush",value:function(e,t){var n=this;return{type:"brush",options:{paths:t.getPaths().map(function(e){return n._serializePath(e)})}}}},{key:"_serializePath",value:function(e){var t=e.getBrush().serializeOptions(["color","size"],!0);return t.points=e.getControlPoints().map(function(e){return e.getPosition().toObject()}),t}},{key:"_serializeRadialFocusOperation",value:function(e){return{type:"focus",options:{type:"radial",options:e.serializeOptions(["position","radius","gradientRadius","blurRadius"],!0)}}}},{key:"_serializeLinearFocusOperation",value:function(e){return{type:"focus",options:{type:"linear",options:e.serializeOptions(["start","end","blurRadius","size","gradientSize"],!0)}}}},{key:"_getInputDimensionsForOperation",value:function(e){var t=!1,n=this._editor.getInputDimensions();return this._editor.operations.getStack().forEach(function(i){i===e&&(t=!0),t||(n=i.getNewDimensions(n))}),n}}]),e}();t.a=u,u.version="1.0.0"},function(e,t,n){"use strict";var i=n(2),o=n.n(i),r=n(3),a=n.n(r),s=n(0),l=n.n(s),c=n(1),u=n.n(c),p=n(113),f=n.n(p),d=n(8),h=n.n(d),m=n(4),_=n(114),g=n(50),y=n(115),v=n(51),b=n(74),k=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),l()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function w(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var x=void 0;void 0!==m.p.Operations.SpriteOperation&&(x=m.p.Operations.SpriteOperation.BrushSprite);var S=function(){function e(t,n){w(this,e),this._editor=t,this._ui=this._editor.getUI(),this._data=n,this._filterManager=new _.a(this._ui,this._getOptions("filter")),this._stickerManager=new g.a(this._ui,this._getOptions("sticker")),this._brushManager=new y.a(this._ui,this._getOptions("brush")),this._fontManager=new v.a(this._ui,this._getOptions("text"))}return k(e,[{key:"_getOptions",value:function(e){var t=this._editor.controls,n={};t&&t.get(e)&&(n=t.get(e).defaultOptions);var i=this._editor.getOptions();return m.q.deepDefaults({},i.editor.controlsOptions[e]||{},n)}},{key:"deserialize",value:function(){var e=this;return this._validateVersion().then(function(){return e._deserializeInputImage()}).then(function(){return e._deserializeOperations()})}},{key:"_validateVersion",value:function(){return this._data.version!==this.constructor.version?h.a.reject(new Error("Invalid version "+this._data.version+", expected "+this.constructor.version)):h.a.resolve()}},{key:"_deserializeInputImage",value:function(){var e=this;return new h.a(function(t,n){var i=e._data.inputImage,o=i.data,r=i.type;if(o&&r){var a=new window.Image;a.addEventListener("load",function(){e._editor.setImage(a),t()}),a.src="data:"+r+";base64,"+o}else t()})}},{key:"_deserializeOperations",value:function(){var e,t=(e=f.a.mark(function e(){var t,n,i,o,r;return f.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:t=this._data.operations,n=[],i=0;case 3:if(!(i<t.length)){e.next=12;break}return o=t[i],e.next=7,this._deserializeOperation(o);case 7:r=e.sent,n.push(r);case 9:i++,e.next=3;break;case 12:return e.abrupt("return",n);case 13:case"end":return e.stop()}},e,this)}),function(){var t=e.apply(this,arguments);return new h.a(function(e,n){return function i(o,r){try{var a=t[o](r),s=a.value}catch(e){return void n(e)}if(!a.done)return h.a.resolve(s).then(function(e){i("next",e)},function(e){i("throw",e)});e(s)}("next")})});return function(){return t.apply(this,arguments)}}()},{key:"_deserializeOperation",value:function(e){switch(e.type){case"crop":return this._deserializeCropOperation(e);case"orientation":return this._deserializeOrientationOperation(e);case"filter":return this._deserializeFilterOperation(e);case"adjustments":return this._deserializeAdjustmentsOperation(e);case"sprite":return this._deserializeSpriteOperation(e);case"focus":return this._deserializeFocusOperation(e)}}},{key:"_deserializeCropOperation",value:function(e){var t=e.options,n=t.rotation,i=m.v.fromObject(t.start),o=m.v.fromObject(t.end);n>Math.PI&&(n-=2*Math.PI);var r={start:i,end:o};void 0!==n&&(r.rotation=n);var a=this._editor.operations.getOrCreate("transform");return this._editor.broadcastTransform(a,r),a.set(r),h.a.resolve(a)}},{key:"_deserializeOrientationOperation",value:function(e){var t=e.options,n=this._editor.operations.getOrCreate("orientation");return n?(n.set(t),h.a.resolve(n)):h.a.resolve()}},{key:"_deserializeFilterOperation",value:function(e){var t=this,n=e.options;return this._filterManager.getFilterByIdentifier(n.name)?this._filterManager.instantiateFilterWithIdentifier(n.name).then(function(e){var i=t._editor.operations.getOrCreate("filter");return i.set({identifier:n.name,filter:e,intensity:n.intensity}),i}):(m.h.warn("Deserializer","Unknown filter `"+n.name+"`"),h.a.resolve())}},{key:"_deserializeAdjustmentsOperation",value:function(e){var t=m.p.Operations.AdjustmentsOperation,n=e.options,i={};return["brightness","saturation","contrast","exposure","shadows","highlights","clarity"].forEach(function(e){if(void 0!==n[e]){var o=t.prototype.availableOptions[e],r=o.minValue,a=o.midValue,s=o.maxValue,l=n[e];l=l<0?a+(a-r)*l:a+(s-a)*l,i[e]=l}}),h.a.resolve(this._editor.operations.getOrCreate("adjustments",i))}},{key:"_deserializeSpriteOperation",value:function(e){var t=this,n=e.options,i=this._editor.operations.getOrCreate("sprite");if(!i)return h.a.resolve();var o=n.sprites.map(function(e){return t._deserializeSprite(i,e)}).filter(function(e){return e});return h.a.all(o).then(function(e){return i.setSprites(e.filter(function(e){return e})),i})}},{key:"_deserializeSprite",value:function(e,t){switch(t.type){case"sticker":return this._deserializeSticker(e,t);case"text":return this._deserializeText(e,t);case"brush":return this._deserializeBrush(e,t);case"textdesign":return this._deserializeTextDesign&&this._deserializeTextDesign(e,t)}}},{key:"_deserializeSticker",value:function(e,t){var n=this,i=m.p.Operations.SpriteOperation,o=t.options,r=this._stickerManager.getStickerByIdentifier(o.name),a=this._stickerManager.getURLForSticker(r);return r?new h.a(function(t,r){var s=new window.Image;s.addEventListener("load",function(){var n=i.StickerSprite.prototype.availableOptions.adjustments.structure,r=o.rotation,a=o.flipHorizontally,l=o.flipVertically,c={identifier:o.name,image:s,position:m.v.fromObject(o.position),dimensions:m.v.fromObject(o.dimensions),rotation:r,flipHorizontally:a,flipVertically:l,adjustments:{}};void 0!==o.adjustments&&["brightness","contrast","saturation"].forEach(function(e){void 0!==o.adjustments[e]&&(c.adjustments[e]=o.adjustments[e]+n[e].default)}),t(e.createSticker(c))}),s.crossOrigin=n._editor.getCrossOrigin(),s.src=n._editor.getUI().getAssetPath(a)}):(m.h.warn("Deserializer","Unknown sticker '"+o.name+"'. Skipping sprite."),h.a.resolve())}},{key:"_deserializeText",value:function(e,t){var n=t.options,i=n.fontSize,o=n.lineHeight,r=n.fontFamily,a=n.fontWeight,s=n.alignment,l=n.rotation,c=n.maxWidth,u=n.color,p=n.backgroundColor,f=new b.a(this._ui),d=this._fontManager.getFontByFontFamily(r);return d||(d=this._fontManager.getDefaultFont()),f.setFonts([d]),f.load().then(function(){return e.createText({fontSize:i,lineHeight:o,fontFamily:r,fontWeight:a,alignment:s,rotation:l,maxWidth:c,text:n.text,color:m.c.fromArray(u),backgroundColor:m.c.fromArray(p),position:m.v.fromObject(n.position)})})}},{key:"_deserializeBrush",value:function(e,t){var n=this,i=t.options.paths,o=e.createBrush();return i.forEach(function(e){n._deserializeBrushPath(o,e)}),h.a.resolve(o)}},{key:"_deserializeBrushPath",value:function(e,t){var n=t.points,i=this._createBrushForPath(t),o=e.createPath(i);o.setClosed(!0),n.forEach(function(e){o.addControlPoint(m.v.fromObject(e))})}},{key:"_createBrushForPath",value:function(e){var t=e.color,n=e.size,i={color:m.c.fromArray(t),size:n},r=this._brushManager.getFirstBrush();if(r.prototype&&r.prototype instanceof x)return new r(i);var s=m.q.extend({},r);delete s.image;var l=function(e){function t(){return w(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=a()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o.a?o()(e,t):e.__proto__=t)}(t,x),t}();return l.identifier=r.identifier,new l(m.q.extend({},s,i))}},{key:"_deserializeFocusOperation",value:function(e){var t=e.options.options;switch(e.options.type){case"radial":var n=t.position,i=t.radius,o=t.gradientRadius,r=t.blurRadius;return h.a.resolve(this._editor.operations.getOrCreate("radial-focus",{position:m.v.fromObject(n),radius:i,gradientRadius:o,blurRadius:r}));case"linear":var a=t.start,s=t.end,l=t.size,c=t.gradientSize,u=t.blurRadius;return h.a.resolve(this._editor.operations.getOrCreate("mirrored-focus",{start:m.v.fromObject(a),end:m.v.fromObject(s),size:l,gradientSize:c,blurRadius:u}))}}},{key:"_getInputDimensionsForOperation",value:function(e){var t=!1,n=this._editor.getInputDimensions();return this._editor.operations.getStack().forEach(function(i){i===e&&(t=!0),t||(n=i.getNewDimensions(n))}),n}}]),e}();t.a=S,S.version="1.0.0"},function(e,t,n){e.exports=n(239)},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(8),a=n.n(r),s=n(4),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._categoriesById={},this._filtersByIdentifier={identity:s.p.Operations.FilterOperation.Filters.IdentityFilter},this._categories=s.r.DEFAULTS.FILTERS.slice(0),this._initCategories()}return l(e,[{key:"instantiateFilterWithIdentifier",value:function(e){var t=this,n=this.getFilterByIdentifier(e);if(!n)return a.a.reject(new Error("Unknown filter with identifier `"+e+"`!"));if(n.prototype instanceof s.p.Operations.FilterOperation.Filter)return a.a.resolve(new n);var i=n.lutImage,o=n.resolution,r=n.horizontalTileCount,l=n.verticalTileCount,c=void 0;this._ui.getPreloader&&(c=this._ui.getPreloader().getAsset(i));return(c?a.a.resolve(c):s.g.load(this._ui.getAssetPath(i))).then(function(e){return s.g.load(t._ui.getAssetPath(i)).then(function(e){return new s.p.Operations.FilterOperation.Filters.ThreeDLUTFilter({image:e,resolution:o,horizontalTileCount:r,verticalTileCount:l})})})}},{key:"_initCategories",value:function(){var e=this;if(this._options.categories&&(this._options.replaceCategories?this._categories=this._options.categories:this._categories=s.u.mergeCategories(this._categories,this._options.categories,"filters")),this._options.availableFilters){var t=[];this._categories.forEach(function(n){var i=n.filters.filter(function(t){return-1!==e._options.availableFilters.indexOf(t.identifier)});i.length>0&&t.push({identifier:n.identifier,defaultName:n.defaultName,filters:i})}),this._categories=t}var n={identifier:"all",defaultName:"All",filters:this._categories.length<=0?[]:this._categories.map(function(e){return e.filters}).reduce(function(e,t){return e.concat(t)})};this._categories.unshift(n),this._categoriesById.all=n,this._categories.forEach(function(t){e._categoriesById[t.identifier]=t}),n.filters.forEach(function(t){e._filtersByIdentifier[t.identifier]=t})}},{key:"getFiltersForCategory",value:function(e){if(!this._categoriesById[e])throw new Error("Unknown filter category '"+e+"'");return this._categoriesById[e].filters}},{key:"getFilterByIdentifier",value:function(e){return this._filtersByIdentifier[e]}},{key:"getCategories",value:function(){return this._categories}},{key:"getCategoryByIdentifier",value:function(e){return this._categoriesById[e]}}]),e}();t.a=c},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(4),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var s=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._brushes=[],this._brushesById={},this._addBrushes(r.d.DEFAULTS.BRUSHES);var i=this._options,o=i.brushes,a=i.replaceBrushes,s=i.availableBrushes;this._options.brushes&&this._addBrushes(o,a),s&&(this._brushes=this._brushes.filter(function(e){return-1!==s.indexOf(e.identifier)}))}return a(e,[{key:"_addBrushes",value:function(e,t){var n=this;t&&(this._brushes=[],this._brushesById={}),e.forEach(function(e){n._brushes.push(e),n._brushesById[e.identifier]=e})}},{key:"getBrushByIdentifier",value:function(e){return this._brushesById[e]}},{key:"getBrushes",value:function(){return this._brushes}},{key:"getFirstBrush",value:function(){return this._brushes[0]}}]),e}();t.a=s},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(7),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d={100:"Extra Light",200:"Light",300:"Book",400:"Regular",500:"Medium",600:"Semibold",700:"Bold",800:"Black",900:"Extra Black",bold:"Bold",normal:"Regular"},h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["Configurable"]),f(t,[{key:"getLabel",value:function(){var e=d[this._options.fontWeight];switch(this._options.fontStyle){case"italic":e+=" Italic"}return e}}]),t}();t.a=h,h.prototype.availableOptions={identifier:{type:p.OptionType.STRING,required:!0},fontFamily:{type:p.OptionType.STRING,required:!0},fontWeight:{type:p.OptionType.ALL,default:400},fontStyle:{type:p.OptionType.STRING,default:"normal"},textMetrics:{type:p.OptionType.OBJECT,default:null},provider:{type:p.OptionType.STRING,available:["google","file"]},filePath:{type:p.OptionType.STRING},default:{type:p.OptionType.BOOLEAN,default:!1},font:{type:p.OptionType.OBJECT}}},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(8),a=n.n(r),s=n(243),l=n(7),c=(n.n(l),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._fonts=[],this._observers=[]}return c(e,[{key:"add",value:function(e){this._fonts.push(e)}},{key:"load",value:function(){var e=this;return 0===this._fonts.length?a.a.resolve():(this._observers=[],this._fonts.forEach(function(t){e._observers.push(new s.a(t))}),l.Utils.executePromises(this._observers.map(function(e){return e.observe()})))}},{key:"dispose",value:function(){this._observers.forEach(function(e){return e.dispose()})}}]),e}();t.a=u},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(111),f=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var d=2*Math.PI,h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["a"]),f(t,[{key:"_serializeTransformOperation",value:function(e){var t=e.serializeOptions(["start","end","rotation","textureScale"],!0);return t.rotation=(t.rotation+d)%d,1!==t.textureScale&&(t.dimensions=e.getNewDimensions(e.getInputDimensions(!1))),delete t.textureScale,{type:"crop",options:t}}}]),t}();t.a=h,h.version="1.0.1"},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(8),f=n.n(p),d=n(1),h=n.n(d),m=n(4),_=n(112),g=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var y=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||h()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,_["a"]),g(t,[{key:"_deserializeOperation",value:function(e){return"selective-blur"===e.type?this._deserializeSelectiveBlurOperation(e):function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0}(t.prototype.__proto__||h()(t.prototype),"_deserializeOperation",this).call(this,e)}},{key:"_deserializeCropOperation",value:function(e){var t=e.options,n=t.rotation,i=m.v.fromObject(t.start),o=m.v.fromObject(t.end),r=t.dimensions?m.v.fromObject(t.dimensions):null;n>Math.PI&&(n-=2*Math.PI);var a={start:i,end:o};void 0!==n&&(a.rotation=n);var s=this._editor.operations.getOrCreate("transform");if(!s)return f.a.resolve();if(this._editor.broadcastTransform(s,a),s.set(a),r){var l=o.clone().subtract(i),c=s.getInputDimensions(!1).multiply(l);s.setTextureScale(r.x/c.x)}return f.a.resolve(s)}}]),t}();t.a=y,y.version="1.0.1"},function(e,t,n){"use strict";var i,o=n(0),r=n.n(o);function a(e,t,n){return t in e?r()(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=n(4).p.Engine.Filters.OverlayFilter;t.a=(a(i={},s.BLEND_MODES.NORMAL,"normal"),a(i,s.BLEND_MODES.OVERLAY,"overlay"),a(i,s.BLEND_MODES.HARD_LIGHT,"hard light"),a(i,s.BLEND_MODES.SOFT_LIGHT,"soft light"),a(i,s.BLEND_MODES.MULTIPLY,"multiply"),a(i,s.BLEND_MODES.DARKEN,"darken"),a(i,s.BLEND_MODES.LIGHTEN,"lighten"),a(i,s.BLEND_MODES.SCREEN,"screen"),a(i,s.BLEND_MODES.COLOR_BURN,"color burn"),i)},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(4),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var s=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._categoriesById={},this._categories=[],this._framesById={},this._addCategories(r.r.DEFAULTS.FRAME_CATEGORIES);var i=this._options,o=i.categories,a=i.replaceCategories;this._options.categories?this._addCategories(o,a):this._updateAllCategory()}return a(e,[{key:"_addCategories",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._categories=n?e.slice(0):r.u.mergeCategories(this._categories,e,"frames"),this._categoriesById={},this._categories.forEach(function(e){t._categoriesById[e.identifier]=e});var i=this._options.availableFrames;i&&this._categories.forEach(function(e){e.frames=e.frames.filter(function(e){return-1!==i.indexOf(e.identifier)})}),this._categories.forEach(function(e){e.frames.forEach(function(e){t._framesById[e.identifier]=e})}),this._updateAllCategory()}},{key:"_updateAllCategory",value:function(){this._allCategory={identifier:"all",defaultName:"All",frames:this._categories.map(function(e){return e.frames}).reduce(function(e,t){return e.concat(t)},[])},this._categoriesById.all=this._allCategory}},{key:"getFramesForCategory",value:function(e){if(!this._categoriesById[e])throw new Error("Unknown frame category '"+e+"'");return this._categoriesById[e].frames}},{key:"getFrameByIdentifier",value:function(e){return this._framesById[e]}},{key:"getCategories",value:function(){return this._categories}},{key:"getCategory",value:function(e){return this._categoriesById[e]}}]),e}();t.a=s},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(4),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var s=function(){function e(t,n){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._ui=t,this._options=n,this._overlays=r.r.DEFAULTS.OVERLAYS.slice(0),this._overlaysByIdentifier={},n.overlays&&(n.replaceOverlays?this._overlays=n.overlays:this._overlays=this._overlays.concat(n.overlays)),n.availableOverlays&&(this._overlays=this._overlays.filter(function(e){return-1!==n.availableOverlays.indexOf(e.identifier)})),this._overlays.forEach(function(e){i._overlaysByIdentifier[e.identifier]=e})}return a(e,[{key:"getOverlays",value:function(){return this._overlays}},{key:"getOverlayByIdentifier",value:function(e){return this._overlaysByIdentifier[e]}}]),e}();t.a=s},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=d.p.OptionType,_=function(e){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).call(this,n));return i._loaded=!1,i._loading=!1,i._ui=e,i._frame=d.p.Utils.deepClone(i._options),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,d["p"].Configurable),h(t,[{key:"load",value:function(){var e=this;if(this._loaded)return u.a.resolve();if(this._loading)return u.a.reject(new Error("Called Frame#load while it's already loading"));this._loading=!0;var t=this._frame.imageGroups,n=[];return["top","left","right","bottom"].forEach(function(i){if(i in t){var o=t[i];["start","mid","end"].forEach(function(t){t in o&&n.push(e._loadPart(i,t))})}}),u.a.all(n).then(function(){e._loaded=!0,e._loading=!1}).catch(function(t){e._loaded=!1,e._loading=!1})}},{key:"_loadPart",value:function(e,t){var n=this;return new u.a(function(i,o){var r=n._frame.imageGroups[e][t],a=r;"string"!=typeof r&&"image"in r&&(a=r.image);var s=new window.Image;s.addEventListener("load",function(){"string"!=typeof r?n._frame.imageGroups[e][t].image=s:n._frame.imageGroups[e][t]=s,i(s)}),s.addEventListener("error",function(){o(new Error("Failed to load image at "+a))}),s.crossOrigin=n._ui.getEditor().getCrossOrigin(),s.src=n._ui.getAssetPath(a)})}},{key:"getFrame",value:function(){return this._frame}}]),t}();t.a=_,_.prototype.availableOptions={identifier:{type:m.STRING,required:!0},defaultName:{type:m.STRING},thumbnail:{type:m.STRING},tintable:{type:m.BOOLEAN,default:!1},layoutMode:{type:m.STRING,default:"horizontal-inside",available:["horizontal-inside","vertical-inside"]},imageGroups:{type:m.OBJECT,required:!0}}},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(6),l=n.n(s),c=n(2),u=n.n(c),p=n(3),f=n.n(p),d=n(1),h=n.n(d),m=n(4),_=n(75),g=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),v=function e(t,n,i){null===t&&(t=Function.prototype);var o=l()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(i):void 0};var b=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||h()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=f()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(u.a?u()(e,t):e.__proto__=t)}(t,_["a"]),y(t,[{key:"serialize",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return v(t.prototype.__proto__||h()(t.prototype),"serialize",this).call(this,n).then(function(t){return t.meta={platform:"html5",version:e._editor.getSDK().version,createdAt:m.q.ISODateString(new Date)},t.image=t.inputImage,delete t.inputImage,t})}},{key:"_serializeSticker",value:function(e,n){var i=v(t.prototype.__proto__||h()(t.prototype),"_serializeSticker",this).call(this,e,n);return i.options.alpha=n.getAlpha(),i.options.tintColor&&(i.options.tintColor={rgba:i.options.tintColor}),i}},{key:"_serializeText",value:function(e,n){var i=v(t.prototype.__proto__||h()(t.prototype),"_serializeText",this).call(this,e,n);return i.options.color={rgba:i.options.color},i.options.backgroundColor={rgba:i.options.backgroundColor},i.options.flipHorizontally=!1,i.options.flipVertically=!1,delete i.options.fontWeight,i}},{key:"_serializePath",value:function(e){var n=v(t.prototype.__proto__||h()(t.prototype),"_serializePath",this).call(this,e);delete n.hardness,delete n.size,delete n.color;var i=e.getBrush();n.brush=i.serializeOptions(["identifier","size","color"],!0),void 0===n.brush.identifier&&delete n.brush.identifier,n.brush.color={rgba:n.brush.color};var o=i.getOption("hardness");return"undefined"!==o&&(n.brush.hardness=o),n}},{key:"_serializeFrameOperation",value:function(e,n){v(t.prototype.__proto__||h()(t.prototype),"_serializeFrameOperation",this).call(this,e,n);var i=n.filter(function(e){return"sprite"===e.type});if(i.length){var o=i.pop().options.sprites.filter(function(e){return"frame"===e.type})[0];e.getTintColor().equals(new m.c(1,1,1,0))||(o.options.tintColor={rgba:e.serializeOption("tintColor",!0)});var r=e.serializeOptions(["scale","alpha"],!0);o.options=m.q.extend(o.options,r),o.options.size=o.options.scale,delete o.options.scale}}},{key:"_serializeTransformOperation",value:function(e){var n=v(t.prototype.__proto__||h()(t.prototype),"_serializeTransformOperation",this).call(this,e);return e._ratio&&(n.options.meta={identifier:e._ratio.identifier}),delete n.options.scale,n}},{key:"_serializeAdjustmentsOperation",value:function(e){var n=v(t.prototype.__proto__||h()(t.prototype),"_serializeAdjustmentsOperation",this).call(this,e),i=e.availableOptions,o={};return["gamma","whites","blacks","temperature"].forEach(function(t){var n=i[t],r=e.getOption(t),a=n.minValue,s=n.midValue,l=n.maxValue;o[t]=r<=s?(r-a)/(s-a)-1:(r-s)/(l-s)}),n.options=g({},n.options,o),n}},{key:"_serializeOperation",value:function(e,n){switch(e.constructor.identifier){case"mirrored-focus":return this._serializeMirroredFocusOperation(e);case"linear-focus":return this._serializeLinearFocusOperation(e);case"blur":return this._serializeBlurOperation(e);default:return v(t.prototype.__proto__||h()(t.prototype),"_serializeOperation",this).call(this,e,n)}}},{key:"_serializeMirroredFocusOperation",value:function(e){return{type:"focus",options:{type:"mirrored",options:e.serializeOptions(["start","end","blurRadius","size","gradientSize"],!0)}}}},{key:"_serializeLinearFocusOperation",value:function(e){var t=e.serializeOptions(["controlPoint1","controlPoint2","blurRadius"],!0);return t.start=t.controlPoint1,delete t.controlPoint1,t.end=t.controlPoint2,delete t.controlPoint2,{type:"focus",options:{type:"linear",options:t}}}},{key:"_serializeBlurOperation",value:function(e){return{type:"focus",options:{type:"gaussian",options:e.serializeOptions(["blurRadius"],!0)}}}}]),t}();t.a=b,b.version="3.0.0"},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(6),l=n.n(s),c=n(2),u=n.n(c),p=n(3),f=n.n(p),d=n(8),h=n.n(d),m=n(1),_=n.n(m),g=n(4),y=n(76),v=n(50),b=n(77),k=n(22),w=n(51),x=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},S=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),C=function e(t,n,i){null===t&&(t=Function.prototype);var o=l()(t,n);if(void 0===o){var r=_()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(i):void 0};function E(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function T(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function O(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=f()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(u.a?u()(e,t):e.__proto__=t)}var R=void 0;void 0!==g.p.Operations.SpriteOperation&&(R=g.p.Operations.SpriteOperation.BrushSprite.Brush);var I=function(e){function t(){return E(this,t),T(this,(t.__proto__||_()(t)).apply(this,arguments))}return O(t,y["a"]),S(t,[{key:"_deserializeSticker",value:function(e,t){var n=g.p.Operations.SpriteOperation,i=t.options,o=this._stickerManager.getStickerByIdentifier(i.identifier);if(!o)return g.h.warn("Deserializer","Unknown sticker `"+i.identifier+"`. Skipping sprite."),h.a.resolve();var r=v.a.getURLForSticker(o,"base"),a=this._editor.getUI().getAssetPath(r),s=e.getInputDimensions(!1);return k.a.load(a).then(function(t){var r=n.StickerSprite.prototype.availableOptions.adjustments.structure,a=i.rotation,l=i.flipHorizontally,c=i.flipVertically,u={identifier:i.identifier,image:t,position:g.v.fromObject(i.position),dimensions:g.v.fromObject(i.dimensions).multiply(s.min()),rotation:a||0,flipHorizontally:l,flipVertically:c,adjustments:{}};return void 0!==i.adjustments&&["brightness","contrast","saturation"].forEach(function(e){void 0!==i.adjustments[e]&&(u.adjustments[e]=i.adjustments[e]+r[e].default)}),void 0!==i.tintColor&&void 0!==o.tintMode&&(u.tintColor=g.c.fromArray(i.tintColor.rgba),u.tintMode=o.tintMode),void 0!==i.alpha&&(u.alpha=i.alpha),e.createSticker(u)})}},{key:"_deserializeTransformOperation",value:function(e){return C(t.prototype.__proto__||_()(t.prototype),"_deserializeTransformOperation",this).call(this,e).then(function(e){if(e)return e._ratio=null,e})}},{key:"_deserializeInputImage",value:function(){var e=this,t=this._data.image,n=t.data,i=t.type,o=t.uri;return n&&i&&(o="data:"+i+";base64,"+n),o?k.a.load(o).then(function(t){e._editor.setImage(t)}):h.a.resolve()}},{key:"_deserializeAdjustmentsOperation",value:function(e){var n=g.p.Operations.AdjustmentsOperation;return C(t.prototype.__proto__||_()(t.prototype),"_deserializeAdjustmentsOperation",this).call(this,e).then(function(t){if(!t)return null;var i=e.options,o={};return["gamma","whites","blacks","temperature"].forEach(function(e){if(void 0!==i[e]){var t=n.prototype.availableOptions[e],r=t.minValue,a=t.midValue,s=t.maxValue,l=i[e];l=l<0?a+(a-r)*l:a+(s-a)*l,o[e]=l}}),t.set(o),t})}},{key:"_deserializeFocusOperation",value:function(e){var n=e.options.options;switch(e.options.type){case"radial":return C(t.prototype.__proto__||_()(t.prototype),"_deserializeFocusOperation",this).call(this,e);case"linear":var i=n.start,o=n.end,r=n.blurRadius;return h.a.resolve(this._editor.operations.getOrCreate("linear-focus",{controlPoint1:g.v.fromObject(i),controlPoint2:g.v.fromObject(o),blurRadius:r}));case"mirrored":var a=n.start,s=n.end,l=n.size,c=n.gradientSize,u=n.blurRadius;return h.a.resolve(this._editor.operations.getOrCreate("mirrored-focus",{start:g.v.fromObject(a),end:g.v.fromObject(s),size:l,gradientSize:c,blurRadius:u}));case"gaussian":var p=n.blurRadius;return h.a.resolve(this._editor.operations.getOrCreate("blur",{blurRadius:p}))}}},{key:"_deserializeText",value:function(e,t){var n=t.options,i=n.fontSize,o=n.lineHeight,r=n.fontIdentifier,a=n.alignment,s=n.rotation,l=n.maxWidth,c=n.color,u=n.backgroundColor,p=this._ui.getFontLoader(),f=this._fontManager.getVariationByIdentifier(r);return f?p.setFonts([f.getFont()]):f=this._fontManager.getDefaultVariation(),p.load().then(function(){var t=e.getInputDimensions(!1),r=l*t.min()/t.x;return e.createText({fontSize:i,lineHeight:o,fontFamily:f.getFontFamily(),fontWeight:f.getFontWeight(),fontIdentifier:f.getIdentifier(),textMetrics:f.getTextMetrics(),alignment:a,rotation:s,maxWidth:r,text:n.text,color:g.c.fromArray(c.rgba),backgroundColor:g.c.fromArray(u.rgba),position:g.v.fromObject(n.position)})})}},{key:"_createBrushForPath",value:function(e){var t=e.brush,n=t.identifier,i=t.color,o=t.size,r=t.hardness,a={color:g.c.fromArray(i.rgba),size:o};void 0!==r&&(a.hardness=r);var s=this._brushManager.getBrushByIdentifier(n);if(s||(s=this._brushManager.getFirstBrush()),s.prototype&&s.prototype instanceof R)return new s(a);var l=g.q.extend({},s);delete l.image;var c=function(e){function t(){return E(this,t),T(this,(t.__proto__||_()(t)).apply(this,arguments))}return O(t,R),t}();return c.identifier=s.identifier,new c(g.q.extend({},l,a))}},{key:"_deserializeFrame",value:function(e,n){var i=this;return C(t.prototype.__proto__||_()(t.prototype),"_deserializeFrame",this).call(this,e,n).then(function(){var e=i._editor.operations.get("frame"),t=n.options,o=t.size,r=t.alpha,a=t.tintColor,s={};void 0!==o&&(s.scale=o),void 0!==r&&(s.alpha=r),void 0!==a&&(s.tintColor=g.c.fromArray(a.rgba)),e.set(s)})}},{key:"_deserializeTextDesign",value:function(e,t){var n=this,i=t.options,o=i.position,r=i.rotation,a=i.flipHorizontally,s=i.flipVertically,l=i.text,c=i.color,u=i.width,p=i.seed,f=i.inverted,d=i.identifier,h=new b.a(this._ui,this._getOptions("textdesign")),m=new w.a(this._ui,{fonts:g.d.DEFAULTS.TEXT_DESIGN_FONTS,replaceFonts:!0}),_=e.constructor.TextDesignSprite.AssetManager,y=this._ui.getFontLoader(),v=new(h.getLayoutByIdentifier(d));return y.setFonts(m.getFonts()),_.setFonts(x({},_.getFonts(),m.getVariationsByIdentifier())),y.load().then(function(){var t=v.getImagePaths().map(function(e){return{path:e,fullPath:n._ui.getAssetPath(e),image:null}});return _.loadImages(t).then(function(){return v.onImagesLoaded(),e.createTextDesign({position:o,rotation:r,flipHorizontally:a,flipVertically:s,text:l,color:g.c.fromArray(c.rgba),width:u,seed:p,inverted:f,layout:v})})})}}]),t}();t.a=I,I.version="3.0.0"},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(4),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._options=t,this._categoriesById={},this._categories=[],this._initCategories()}return a(e,[{key:"_initCategories",value:function(){var e=this,t=this._options,n=t.replaceCategories,i=t.categories,o=r.d.DEFAULTS.TRANSFORM_RATIO_CATEGORIES;this._categories=i?n?r.u.cloneCategories(i,"ratios"):r.u.mergeCategories(o,i,"ratios"):r.u.cloneCategories(o,"ratios"),this._categoriesById={},this._categories.forEach(function(t){e._categoriesById[t.name]=t})}},{key:"getCategories",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this._categories.slice(0);if(e){var n={name:"all",ratios:this._categories.map(function(e){return e.ratios}).reduce(function(e,t){return e.concat(t)})};t.unshift(n)}return t}},{key:"getRatiosForCategory",value:function(e){var t=this._options.availableRatios;return t?e.ratios.filter(function(e){return-1!==t.indexOf(e.identifier)}):e.ratios}},{key:"hasRatioValue",value:function(e){var t=this,n=!1;return this._categories.forEach(function(i){t.getRatiosForCategory(i).forEach(function(t){if(t.ratio)"*"===t.ratio?n=!0:t.ratio===e&&(n=!0);else if(t.dimension){t.dimension.y/t.dimension.x===e&&(n=!0)}})}),n}}]),e}();t.a=s},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(6),l=n.n(s),c=n(2),u=n.n(c),p=n(3),f=n.n(p),d=n(8),h=n.n(d),m=n(1),_=n.n(m),g=n(4),y=n(52),v=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},b=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var k=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||_()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onBackButtonClick"),r._needsStyleFixes=!0,r.state={backButton:!1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=f()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(u.a?u()(e,t):e.__proto__=t)}(t,y["a"]),b(t,[{key:"_onBackButtonClick",value:function(){}},{key:"setSharedState",value:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];(function e(t,n,i){null===t&&(t=Function.prototype);var o=l()(t,n);if(void 0===o){var r=_()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(i):void 0})(t.prototype.__proto__||_()(t.prototype),"setSharedState",this).call(this,e,n),i&&this.props.controls.updateSharedState()}},{key:"fixStyles",value:function(){var e=this;return g.u.Browser.isIElte(10)?(this._table&&(this._table.style.height="100%"),this._container&&(this._container.style.height="100%"),new h.a(function(t){Object(g.z)(function(){if(e._root){var n=e._root.offsetHeight;if(e._container&&e._header){var i=e._header.offsetHeight;e._container.style.height=n-i+"px"}e._table&&(e._table.style.height=n+"px"),e._scrollbar&&e._scrollbar.update(),t()}},1e3)})):(this._scrollbar&&this._scrollbar.update(),h.a.resolve())}},{key:"_getRootProps",value:function(){return{}}},{key:"_renderContent",value:function(){return g.l.createElement("div",null)}},{key:"render",value:function(){var e=this,t=this.constructor.RootElement,n=function(e,t){var n={};for(var i in e)t.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i]);return n}(this._getRootProps(),[]),i=this.context.screen.state.currentControl,o=null===i,r={backgroundImage:"url('"+this._getAssetPath("editor/controls/shared/back.png",!0)+"')"};return g.l.createElement(w,{innerRef:function(t){n.innerRef&&n.innerRef(t),e._root=t}},g.l.createElement(x,{innerRef:function(t){e._table=t}},!o&&g.l.createElement(S,{innerRef:function(t){e._header=t}},this.state.backButton&&g.l.createElement(T,{style:r,onClick:this._onBackButtonClick}),g.l.createElement(E,null,this._t("pesdk."+i+".title.name"))),g.l.createElement(C,null,g.l.createElement(t,v({},n,{innerRef:function(t){e._container=t},className:void 0}),this._renderContent()))))}},{key:"container",get:function(){return this._container}}]),t}();k.contextTypes=y.a.contextTypes,k.propTypes={options:g.k.object},t.a=k;var w=g.w.div({position:"relative",display:"table-cell",height:"100%",maxHeight:"100%",width:"230px",zIndex:function(e){return e.zIndex("controls")},overflow:"hidden"},"ControlsComponentRoot"),x=g.w.div({display:"table",tableLayout:"fixed",width:"100%",height:"100%"},"ControlsComponentTable"),S=g.w.div({display:"table-row",height:"48px",background:function(e){return e.controlsLightBackgroundColor}},"ControlsComponentHeader"),C=g.w.div({display:"table-row",position:"relative",width:"100%",background:function(e){return e.controlsBackgroundColor}},"RootElementContainer");k.RootElement=g.w.div({display:"table",tableLayout:"fixed",width:"100%",height:"100%"},{withBorderTop:{borderTop:function(e){return"1px solid "+e.controlsSeparatorColor}}},"ControlsComponent");var E=g.w.div({width:"100%",height:"100%",lineHeight:"48px",color:function(e){return e.dimmedTextColor},textTransform:"uppercase",fontSize:"13px",fontFamily:function(e){return e.uppercaseSemiBoldFontFamily},letterSpacing:"1.4px",textAlign:"center"},"ControlsComponentTitle"),T=g.w.button({height:"14px",width:"14px",position:"absolute",left:"16px",top:"16px",opacity:.7,border:"none",background:"no-repeat center",backgroundSize:"contain",cursor:"pointer",":focus":{outline:"none"}},"BackButton")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),f(t,[{key:"render",value:function(){var e=this.constructor.RootElement,t=function(e,t){var n={};for(var i in e)t.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i]);return n}(this.props,[]);return p.l.createElement(e,t)}}]),t}();d.contextTypes=p.b.contextTypes,t.a=d,d.RootElement=p.w.li({display:"table-cell",verticalAlign:"middle",height:"100%",width:"50px",cursor:"pointer",userSelect:"none"},{disabled:{cursor:"default"}},"CanvasHeaderButtonComponent")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(23),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onKnobDragStart","_onKnobDrag","_onKnobDragStop","_onBarDragStart","_onBarDrag","_onBarDragStop"),r.state={value:r.props.value||0,sliderPosition:0,foregroundLeft:0,foregroundWidth:0},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),d(t,[{key:"componentDidMount",value:function(){var e=this;Object(p.z)(function(){e._setValue(e.state.value,!1)})}},{key:"componentWillReceiveProps",value:function(e){e.value!==this.state.value&&this._setValue(e.value,!1)}},{key:"_onKnobDragStart",value:function(e){this._previousValue=this.state.value,this._initialSliderPosition=this.state.sliderPosition,this._initialPosition=e}},{key:"_onKnobDrag",value:function(e){var t=this._bar.offsetWidth,n=this._initialSliderPosition+e.x,i=(n=Math.max(0,Math.min(n,t)))/t,o=this.props.minValue+(this.props.maxValue-this.props.minValue)*i;this._setValue(o)}},{key:"_onKnobDragStop",value:function(){this._setValue(this.state.value,!0,!0)}},{key:"_onBarDragStart",value:function(e){this._previousValue=this.state.value,this._initialPosition=e.clone();var t=this._bar.offsetWidth,n=e.x/t,i=this.props.minValue+(this.props.maxValue-this.props.minValue)*n;this._setValue(i)}},{key:"_onBarDrag",value:function(e){var t=this._initialPosition.clone().add(e),n=this._bar.offsetWidth,i=t.x/n,o=this.props.minValue+(this.props.maxValue-this.props.minValue)*i;o=Math.max(this.props.minValue,Math.min(this.props.maxValue,o)),this._setValue(o)}},{key:"_onBarDragStop",value:function(){this._setValue(this.state.value,!0,!0)}},{key:"_getKnobStyle",value:function(){return{left:this.state.sliderPosition}}},{key:"_getForegroundStyle",value:function(){return{left:this.state.foregroundLeft,width:this.state.foregroundWidth}}},{key:"_setValue",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.props,o=i.minValue,r=(e-o)/(i.maxValue-o),a=this._bar.offsetWidth,s=a*r,l=r*a,c=0;this.props.middleDot&&(l=Math.abs(r-.5)*a,c=r<.5?.5*a-l:"50%"),this.setState({value:e,sliderPosition:s,foregroundWidth:l,foregroundLeft:c}),t&&this.props.onChange&&this.props.onChange(e,this._previousValue,n)}},{key:"_buildValue",value:function(e){return e%1!=0&&(e=e.toFixed(2)),this.props.positiveValuePrefix&&e>=0&&(e=""+this.props.positiveValuePrefix+e),this.props.valueUnit&&(e+=this.props.valueUnit),e}},{key:"render",value:function(){var e=this,t={style:this._getForegroundStyle()};return p.l.createElement(m,{disabled:this.props.disabled},p.l.createElement(f.a,{onStart:this._onBarDragStart,onDrag:this._onBarDrag,onStop:this._onBarDragStop,disabled:this.props.disabled},p.l.createElement(w,null,p.l.createElement(_,{ref:"foo",innerRef:function(t){e._bar=t}},p.l.createElement("div",null,p.l.createElement(y,{darkBackground:this.props.darkBackground}),p.l.createElement(v,t),p.l.createElement(f.a,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag,onStop:this._onKnobDragStop,disabled:this.props.disabled},p.l.createElement(k,{style:this._getKnobStyle(),className:void 0},p.l.createElement(b,{idle:0===this.state.value}))))))))}}]),t}();h.propTypes={value:p.k.number.isRequired,minValue:p.k.number.isRequired,maxValue:p.k.number.isRequired,middleDot:p.k.bool,onChange:p.k.func,positiveValuePrefix:p.k.string,valueUnit:p.k.string,label:p.k.string},h.contextTypes=p.b.contextTypes,t.a=h;var m=p.w.div({zIndex:"2",height:"12px",cursor:"pointer",position:"relative"},{disabled:{opacity:.4}},"Slider"),_=p.w.div({position:"absolute",top:"50%",width:"100%",height:"2px",marginTop:"-1px"},"Bar"),g=p.w.div({position:"absolute",top:0,left:0,width:"100%",height:"100%"},"BarSection"),y=Object(p.w)(g)({background:function(e){return e.sliderBackgroundColor}},{darkBackground:{background:function(e){return e.darkSliderBackgroundColor}}},"BarBackgroundSection"),v=Object(p.w)(g)({background:function(e){return e.highlightColor},boxShadow:"0 1px 2px 0 rgba(0,0,0,0.65)"},"BarForegroundSection"),b=p.w.div({background:function(e){return e.sliderKnobColor},position:"relative",width:"12px",height:"12px",borderRadius:"6px",boxShadow:"0 1px 4px 0 rgba(0, 0, 0, 0.45)",transition:"border, background, opacity 0.15s ease-in-out"},{idle:{background:function(e){return e.controlsBackgroundColor},border:function(e){return"1.5px solid "+e.dimmedTextColor},opacity:.85}},"Knob"),k=p.w.div({padding:"4px",cursor:"pointer",marginTop:"-9px",marginLeft:"-9px",position:"absolute",transition:"transform 0.15s ease-in-out",":active":{transform:"scale(1.2)"}},"KnobTouchTarget"),w=p.w.div({width:"100%",height:"100%"},"BarContainer")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n.d(t,"ControlGroupList",function(){return o}),n.d(t,"ControlGroup",function(){return r}),n.d(t,"ControlGroupTitle",function(){return a});var i=n(4),o=i.w.css({listStyle:"none",margin:"0",padding:"0"},"ControlGroupList"),r=i.w.css({padding:"25px",paddingBottom:"5px"},"ControlGroup"),a=i.w.css({marginBottom:"16px",fontSize:"13px",fontFamily:function(e){return e.uppercaseSemiBoldFontFamily},textTransform:"uppercase",letterSpacing:"1.2px",textAlign:"left",color:function(e){return e.dimmedTextColor}},"ControlGroupTitle")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),f(t,[{key:"render",value:function(){var e=this._getAssetPath("editor/controls/shared/checkbox.png",!0),t=this._getAssetPath("editor/controls/shared/checkbox-active.png",!0),n=this.props,i=n.styles,o=n.className,r=n.checked,a=n.onClick;return p.l.createElement(h,{styles:i,className:o,onClick:a,style:{backgroundImage:"url("+(r?t:e)+")"}})}}]),t}();t.a=d;var h=p.w.div({height:"16px",width:"16px",backgroundSize:"contain"},"Checkbox");d.RootElement=h},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(81),d=n(53),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["a"]),h(t,[{key:"_renderRightPart",value:function(){var e=this,t=[];return this.props.inputClassName&&t.push(this.props.inputClassName),p.l.createElement(_,{value:this.state.value,onLiveChange:this._onInputLiveChange,onChange:this._onInputChange,className:t.join(" "),innerRef:function(t){e._input=t},disabled:this.props.disabled})}},{key:"render",value:function(){var e=this.props,t=e.inputLabel,n=e.className,i=e.disabled,o=e.styles;return p.l.createElement(g,{styles:o,className:n,disabled:i},p.l.createElement(y,null,p.l.createElement(v,null,t&&p.l.createElement(b,null,t||" "),this._renderRightPart())))}}]),t}();m.contextTypes=f.a.contextTypes,t.a=m;var _=Object(p.w)(d.a)({textAlign:"center",width:"28px",minWidth:"auto"},"InputField"),g=Object(p.w)(f.a.RootElement)({display:"table-cell",width:"100%",paddingLeft:"4px"},"ColorComponentInput"),y=p.w.div({display:"table-row"},"Row"),v=p.w.div({display:"table-cell",width:"100%",height:"100%",paddingRight:"15px",textAlign:"left",verticalAlign:"top",":last-child":{paddingRight:0}},{bottomAligned:{verticalAlign:"bottom"}},"Column"),b=p.w.div({fontSize:"13px",fontFamily:function(e){return e.regularFontFamily},color:function(e){return e.dimmedTextColor},marginBottom:"6px",textAlign:"center"},"Title")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d=p.ControlsStyles.PlainControlItem,h=p.ControlsStyles.PlainControlItemBackground,m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onWebcamClick","_onDropZoneClick","_onDropZoneDragEnter","_onDropZoneDragLeave","_onDropZoneDragOver","_onDropZoneDrop","_onImage"),r._dragCounter=0,r.state={dropZoneHovered:!1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseComponent"]),f(t,[{key:"_onWebcamClick",value:function(){this.props.onWebcamActivated&&this.props.onWebcamActivated()}},{key:"_onImage",value:function(e){this.props.onImage&&this.props.onImage(e)}},{key:"_onDropZoneClick",value:function(){this.refs.upload.open()}},{key:"_onDropZoneDragEnter",value:function(e){e.preventDefault(),this._dragCounter++,this.setState({dropZoneHovered:!0})}},{key:"_onDropZoneDragLeave",value:function(e){e.preventDefault(),this._dragCounter--,0===this._dragCounter&&this.setState({dropZoneHovered:!1})}},{key:"_onDropZoneDragOver",value:function(e){e.preventDefault()}},{key:"_onDropZoneDrop",value:function(e){var t=this;e.stopPropagation(),e.preventDefault(),(e=e.nativeEvent).returnValue=!1,this.setState({dropZoneHovered:!1},function(){if(e.target||e.dataTransfer){var n=e.target.files||e.dataTransfer.files;if(n&&!(n.length<=0))return n[0].type.match(/^image\//i)?void t._handleFile(n[0]):p.ModalManager.instance.displayError(t._t("pesdk.common.title.error"),t._t("pesdk.editor.text.invalidFileTypeError",{fileType:n[0].type}))}})}},{key:"_handleFile",value:function(e){var t=this,n=new window.FileReader;n.onload=function(e){var n=e.target.result,i=new window.Image;i.addEventListener("load",function(){t._onImage(i)}),i.addEventListener("error",function(e){return p.ModalManager.instance.displayError(t._t("pesdk.common.title.error"),t._t("pesdk.editor.text.imageLoadingError"))}),i.crossOrigin=t.context.editor.getCrossOrigin(),i.src=n},n.readAsDataURL(e)}},{key:"render",value:function(){var e={backgroundImage:"url('"+this._getAssetPath("editor/controls/library/webcam.png",!0)+"')"};return p.React.createElement(_,null,p.React.createElement(p.InvisibleUploadComponent,{ref:"upload",onNewFile:this._onImage}),p.React.createElement(g,null,p.React.createElement(y,{onClick:this._onDropZoneClick,onDragEnter:this._onDropZoneDragEnter,onDragOver:this._onDropZoneDragOver,onDragLeave:this._onDropZoneDragLeave,onDrop:this._onDropZoneDrop,hovered:this.state.dropZoneHovered},this.state.dropZoneHovered?this._t("pesdk.library.button.fileDropZoneHovered"):this._t("pesdk.library.button.fileDropZone")),!this.state.dropZoneHovered&&this.props.webcamEnabled&&p.React.createElement(v,{style:e,className:void 0,onClick:this._onWebcamClick})))}}]),t}();t.a=m;var _=Object(p.adonis)(d).li({marginBottom:"24px",position:"relative",":hover *":{opacity:"1"}},"Container"),g=Object(p.adonis)(h).div({width:"100%",height:"80px",display:"table",tableLayout:"fixed",padding:"0"},"Background"),y=p.adonis.div({display:"table-cell",borderRight:"1px solid rgba(255, 255, 255, 0.08)",padding:"18px",fontFamily:function(e){return e.regularFontFamily},fontSize:"13px",textAlign:"center",verticalAlign:"middle",color:function(e){return e.dimmedTextColor}},{hovered:{background:"rgba(255, 255, 255, 0.05)",borderRight:"none"}},"DropZone"),v=p.adonis.div({display:"table-cell",width:"46px",background:"rgba(0, 0, 0, 0.06) no-repeat center center",backgroundSize:"contain"},"WebcamButton")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(8),a=n.n(r),s=n(15),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var c=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1/0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._queue=[],this._pendingPromises=0,this._maxConcurrency=t,this._maxQueueLength=n,this._minDelay=i,this._tick=this._tick.bind(this),this._lastPromiseDone=Date.now(),this._running=!0,this._animationFrameRequest=null,Object(s.b)(this._tick)}return l(e,[{key:"_tick",value:function(){this._running&&(Date.now()-this._lastPromiseDone>this._minDelay&&this._pendingPromises<this._maxConcurrency&&this._queue.length&&this._dequeue(),this._animationFrameRequest=Object(s.b)(this._tick))}},{key:"add",value:function(e){var t=this;return new a.a(function(n,i){if(t._queue.length>=t._maxQueueLength)return i(new Error("Max queue length reached"));t._queue.push({fn:e,resolve:n,reject:i})})}},{key:"_promisify",value:function(e){return void 0!==e&&"function"==typeof e.then?e:a.a.resolve(e)}},{key:"_dequeue",value:function(){var e=this,t=this._queue.shift(),n=Date.now();this._pendingPromises++;try{this._promisify(t.fn()).then(function(i){e._lastPromiseDone=n,e._pendingPromises--,t.resolve(i)}).catch(function(i){e._lastPromiseDone=n,e._pendingPromises--,t.reject(i)})}catch(e){this._lastPromiseDone=n,this._pendingPromises--,t.reject(e)}return!0}},{key:"dispose",value:function(){this._running=!1,this._animationFrameRequest&&Object(s.a)(this._animationFrameRequest)}}]),e}();t.a=c},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=n.n(p),d=n(324),h=n(326),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseControls"]),m(t,[{key:"_onEnter",value:function(){var e=this.context.editor;e.zoom.auto(!0,!1,function(){e.features.disable("zoom","drag")},!1)}},{key:"_onLeave",value:function(){this.context.editor.features.enable("zoom","drag")}}],[{key:"mapOperationsToSharedState",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1],arguments.length>2&&void 0!==arguments[2]&&arguments[2];var n=t.FOCUS_OPERATIONS.map(function(t){return e.get(t)}).reduce(function(e,t){return e||t}),i=n&&n.getInputDimensions(!1),o=n?n.constructor.identifier:null,r=t.getItemByOperationIdentifier(o),a=r?r.identifier:"none";return{operation:n||null,inputDimensions:i,operationIdentifier:o,selectedFocus:a,selectedFocusItem:r,blurRadius:n?n.getBlurRadius():0,linearFocus:"linear-focus"===o?{controlPoint1:n.getControlPoint1(),controlPoint2:n.getControlPoint2()}:null,mirroredFocus:"mirrored-focus"===o?{start:n.getStart(),end:n.getEnd(),size:n.getSize(),gradientSize:n.getGradientSize()}:null,radialFocus:"radial-focus"===o?{position:n.getPosition(),radius:n.getRadius(),gradientRadius:n.getGradientRadius()}:null,setSelectedFocus:function(t){t.operationIdentifier!==o&&(o&&e.remove(o),t.operationIdentifier&&e.getOrCreate(t.operationIdentifier))},setBlurRadius:function(e){n&&n.setBlurRadius(e)},setControlPoint1:function(e){"linear-focus"===o&&n.setControlPoint1(e)},setControlPoint2:function(e){"linear-focus"===o&&n.setControlPoint2(e)},setStart:function(e){"mirrored-focus"===o&&n.setStart(e)},setEnd:function(e){"mirrored-focus"===o&&n.setEnd(e)},setPosition:function(e){"radial-focus"===o&&n.setPosition(e)},setRadius:function(e){"radial-focus"===o&&n.setRadius(e)},setOperationOptions:function(e){n&&n.set(e)}}}},{key:"getPreloadAssets",value:function(e){var t=[];return this.ITEMS.forEach(function(e){t.push(e.backgroundImagePath),t.push(e.activeBackgroundImagePath)}),t}},{key:"isEnabled",value:function(e){return e.isToolAllowed("focus")&&e.isToolEnabled("focus")}},{key:"getItemByIdentifier",value:function(e){return t.ITEMS.filter(function(t){return t.identifier===e})[0]}},{key:"getItemByOperationIdentifier",value:function(e){return t.ITEMS.filter(function(t){return t.operationIdentifier===e})[0]}}]),t}();_.clickAtPosition=p.BaseControls.clickAtPosition,_.ITEMS=[{identifier:"none",operationIdentifier:null,backgroundImagePath:"editor/controls/focus/none.png",activeBackgroundImagePath:"editor/controls/focus/none-active.png"},{identifier:"radial",operationIdentifier:"radial-focus",backgroundImagePath:"editor/controls/focus/radial.png",activeBackgroundImagePath:"editor/controls/focus/radial-active.png"},{identifier:"mirrored",operationIdentifier:"mirrored-focus",backgroundImagePath:"editor/controls/focus/mirrored.png",activeBackgroundImagePath:"editor/controls/focus/mirrored-active.png"},{identifier:"linear",operationIdentifier:"linear-focus",backgroundImagePath:"editor/controls/focus/linear.png",activeBackgroundImagePath:"editor/controls/focus/linear-active.png"},{identifier:"gaussian",operationIdentifier:"blur",backgroundImagePath:"editor/controls/focus/gaussian.png",activeBackgroundImagePath:"editor/controls/focus/gaussian-active.png"}],_.FOCUS_OPERATIONS=_.ITEMS.map(function(e){return e.operationIdentifier}).filter(function(e){return e}),_.identifier="focus",_.controlsComponent=d.a,_.canvasControlsComponent=h.a,_.iconPath="editor/controls/focus/icon.png",_.activeIconPath="editor/controls/focus/icon-active.png",_.defaultOptions={availableModes:null},_.requiredOperations=_.ITEMS.map(function(e){return e.operationIdentifier}).filter(function(e){return e}),_.updatableOperations=_.ITEMS.map(function(e){return e.operationIdentifier}).filter(function(e){return e}),_.switchToDefaultControlsOnRemoval=!1,f.a.Controls.FocusControls=_,t.a=_},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d=p.ControlsStyles.PlainControlItem,h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["SharedStateComponent"]),f(t,[{key:"_onStickerClick",value:function(e){this.props.onStickerClick&&this.props.onStickerClick(e)}},{key:"_renderListItems",value:function(){var e=this,t=this.props.stickers,n=void 0,i=this.sharedState.selectedSprite;return i&&(n=i.getIdentifier()),t.map(function(t){var i=p.StickerManager.getURLForSticker(t,"thumb"),o=e._getAssetPath(i),r=e.context.editor.getCrossOrigin();return p.React.createElement(_,{selected:t.identifier===n,key:t.identifier,onClick:e._onStickerClick.bind(e,t),className:void 0,threeColumns:!0},p.React.createElement(g,{crossOrigin:r,src:o}))})}},{key:"render",value:function(){return p.React.createElement(m,null,this._renderListItems())}}]),t}();h.contextTypes=p.SharedStateComponent.contextTypes,t.a=h;var m=p.adonis.ul({listStyle:"none",margin:0,padding:0,paddingTop:"25px",paddingLeft:"17px",textAlign:"left"},"StickerList"),_=Object(p.adonis)(d).li({display:"inline-block",verticalAlign:"top",position:"relative",":last-child":{marginBottom:"25px"}},"StickerListItem"),g=p.adonis.img({backgroundSize:"contain",width:"100%",height:"100%",position:"relative",padding:"5px"},"StickerImage")},function(e,t,n){
/*!
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */
var i=n(7),o=n(5);n(297),i.UI.DesktopUI=o,e.exports=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(219),d=n(79),h=n(48),m=n(129),_=n(93),g=n(263),y=n(264),v=n(74),b=n(265),k=n(266),w=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function x(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function S(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function C(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}
/*!
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */var E=function(e){return p.q.byteArrayToString(p.a.decode(e))};Object(g.a)(p.w,".pesdk-desktop-editor"),Object(y.a)(p.w);var T=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};x(this,t);var n=S(this,(t.__proto__||u()(t)).call(this));return n._mediator=new p.e,n._fontLoader=new v.a(n),n._options=e,n._initOptions(),n._initLanguage(),n._initEvents(),n._disposed=!1,n._preloader=new b.a(n,n._options,n._mediator),n._globalState=new p.s,n._isReady=!1,n._mediator.once(p.d.EVENTS.EDITOR_READY,function(){n._isReady=!0}),p.h.setLevel(n._options.logLevel),n._options.license&&!n._v()||n.run(),n}return C(t,p["e"]),w(t,[{key:"run",value:function(){this._theme=this._options.theme,this._injectWebFonts(),this._options.container.style.position="relative",this._options.container.className+=" pesdk-desktop-editor",this._render()}},{key:"_render",value:function(){var e=this,t=p.l.createElement(f.a,{ui:this,mediator:this._mediator,ref:function(t){e._component=t},options:this._options,globalState:this._globalState});if(this._options.renderReturnsComponent)return t;p.m.render(t,this._options.container)}},{key:"export",value:function(){var e;return(e=this._component).export.apply(e,arguments)}},{key:"serialize",value:function(){var e;return(e=this.getEditor()).serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return this.getEditor().deserialize(e)}},{key:"getEditor",value:function(){return this._component.getEditor()}},{key:"isReady",value:function(){return this._isReady}},{key:"onReady",value:function(e){this._isReady?e():this._mediator.once(p.d.EVENTS.EDITOR_READY,e)}},{key:"_initOptions",value:function(){this._options=p.q.defaults(this._options,{language:"en",logLevel:"warn",crossOrigin:"anonymous",editor:{},assets:{},responsive:!1,preloader:!0,theme:_.a}),this._options.editor=p.q.defaults(this._options.editor||{},{pixelRatio:"undefined"!=typeof window&&window.devicePixelRatio||1,preferredRenderer:"webgl",transparent:!0,clearColor:[0,0,0,0],displayResizeMessage:!0,maxMegaPixels:{},enableDrag:!0,enableZoom:!0,displayCloseButton:!1,undoMode:"global",defaultControl:"filter",forceCrop:!1,tools:["transform","filter","adjustments","focus","text","textdesign","sticker","brush","frame","overlay","library"],controlsOrder:[["library"],["transform","filter","adjustments","focus"],["text","textdesign","sticker","brush","frame","overlay"]],operationsOrder:["exif-orientation","orientation","transform","filter","adjustments","radial-focus","mirrored-focus","linear-focus","blur","selective-blur","overlay","sprite","frame","watermark"],controlsOptions:{}}),this._options.editor.maxMegaPixels=p.q.defaults(this._options.editor.maxMegaPixels,{mobile:5,desktop:10}),this._options.editor.export=p.q.defaults(this._options.editor.export||{},{format:"image/png",type:p.o.IMAGE,download:!0,fileBasename:"photoeditorsdk-export",quality:.8}),this._options.extensions=p.q.defaults(this._options.extensions||{},{languages:{},operations:[],controls:[]}),this._options.assets=p.q.defaults(this._options.assets||{},{baseUrl:"assets",resolver:null})}},{key:"_injectWebFonts",value:function(){var e=[];for(var t in this._theme.fonts){var n=this._theme.fonts[t],i=this.getAssetPath(n.src,!0,!0);e.push('\n        @font-face {\n          font-family: "'+n.fontFamily+"\";\n          src: url('"+i+"') format('woff');\n          font-weight: "+n.fontWeight+";\n          font-style: "+n.fontStyle+";\n        }\n      ")}var o="\n      /* Injected by PhotoEditorSDK */\n      "+e.join("\n")+"\n    ";p.w.global(o,!0)}},{key:"_v",value:function(){return!!this[E("X29wdGlvbnM=")][E("bGljZW5zZQ==")]||(p.h.error(E("TGljZW5zaW5n"),E("Tm8gYGxpY2Vuc2VgIG9wdGlvbiBnaXZlbg==")),p.h.error(E("TGljZW5zaW5n"),E("SW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIGxpY2Vuc2UgeWV0LCBwbGVhc2UgY29udGFjdCBvdXIgc2FsZXMgc3RhZmYgYXQgc2FsZXNAcGhvdG9lZGl0b3JzZGsuY29tIHRvIG9idGFpbiBhIGxpY2Vuc2Ugb3IgbG9nIGluIHRvIHlvdXIgY3VzdG9tZXIgZGFzaGJvYXJkLg==")),!1)}},{key:"_initEvents",value:function(){this._mediator.pipeEvents(this)}},{key:"_disposeEvents",value:function(){this._mediator.unpipeEvents(this)}},{key:"_initLanguage",value:function(){this._languages=p.q.deepDefaults(this._options.extensions.languages,{de:n(295),en:n(296)}),this._language=this._languages[this._options.language],this._language||p.h.error(this.constructor.name,"Language `"+this._options.language+"` not found!")}},{key:"translate",value:function(e,t){return p.u.translate(this._language,e,t)}},{key:"setImage",value:function(e){this._component&&this._component.setImage(e)}},{key:"getAssetPath",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this._options.assets,o=i.baseUrl,r=i.resolver,a=o+"/"+e;if(e.match(/(ftp|http|https):\/\//)&&(a=e),t){if(!n)if(("undefined"!=typeof window&&window.devicePixelRatio||1)>1){e=e.replace(/\.[\w?=]+$/,function(e){return"@2x"+e})}a=o+"/ui/desktop/"+e}return void 0!==r&&null!==r&&(a=r(a)),a}},{key:"getTheme",value:function(){return this._theme}},{key:"getFontLoader",value:function(){return this._fontLoader}},{key:"getPreloader",value:function(){return this._preloader}},{key:"dispose",value:function(){if(this._disposed)throw new Error("This instance of PhotoEditorSDK is already disposed.");this._disposed=!0,p.m.unmountComponentAtNode(this._options.container),this._disposeEvents()}}]),t}();T.prototype.identifier="react",T.BaseComponent=p.b,T.React=p.l,T.adonis=p.w,T.SharedState=p.s,T.Constants=p.d,T.Utils=p.u,T.ScrollbarComponent=d.a,T.JSONLoader=h.a,T.SliderComponent=m.a;var O=function(e){function t(){return x(this,t),S(this,(t.__proto__||u()(t)).apply(this,arguments))}return C(t,p["l"].Component),w(t,[{key:"componentDidMount",value:function(){this._ui=new T(p.q.extend({},this.props,{container:this.refs.container})),this.props.onEditorReady&&this._ui.onReady(this.props.onEditorReady)}},{key:"render",value:function(){var e=p.q.extend({},this.props.style||{});return p.l.createElement("div",{style:e,ref:"container"})}},{key:"ui",get:function(){return this._ui}}]),t}();for(var R in T.ReactComponent=O,T.Controls={},k)T[R]=k[R];p.p.UI=p.p.UI||{},p.p.UI.DesktopUI=T,t.default=T},function(e,t,n){n(140);var i=n(9).Object;e.exports=function(e,t,n){return i.defineProperty(e,t,n)}},function(e,t,n){var i=n(12);i(i.S+i.F*!n(18),"Object",{defineProperty:n(16).f})},function(e,t,n){n(142),e.exports=n(9).Object.setPrototypeOf},function(e,t,n){var i=n(12);i(i.S,"Object",{setPrototypeOf:n(143).set})},function(e,t,n){var i=n(17),o=n(14),r=function(e,t){if(o(e),!i(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,i){try{(i=n(24)(Function.call,n(58).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return r(e,n),t?e.__proto__=n:i(e,n),e}}({},!1):void 0),check:r}},function(e,t,n){n(145);var i=n(9).Object;e.exports=function(e,t){return i.create(e,t)}},function(e,t,n){var i=n(12);i(i.S,"Object",{create:n(60)})},function(e,t,n){var i=n(16),o=n(14),r=n(30);e.exports=n(18)?Object.defineProperties:function(e,t){o(e);for(var n,a=r(t),s=a.length,l=0;s>l;)i.f(e,n=a[l++],t[n]);return e}},function(e,t,n){var i=n(20),o=n(61),r=n(148);e.exports=function(e){return function(t,n,a){var s,l=i(t),c=o(l.length),u=r(a,c);if(e&&n!=n){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((e||u in l)&&l[u]===n)return e||u||0;return!e&&-1}}},function(e,t,n){var i=n(62),o=Math.max,r=Math.min;e.exports=function(e,t){return(e=i(e))<0?o(e+t,0):r(e,t)}},function(e,t,n){n(150),e.exports=n(9).Object.getPrototypeOf},function(e,t,n){var i=n(31),o=n(88);n(66)("getPrototypeOf",function(){return function(e){return o(i(e))}})},function(e,t){e.exports=n},function(e,t,n){"use strict";var i=n(89),o=n(90),r=n(91),a=n(153),s=n(92),l=n(154);e.exports=function(e,t){var n="function"==typeof Symbol&&Symbol.iterator,c="@@iterator";var u="<<anonymous>>",p={array:m("array"),bool:m("boolean"),func:m("function"),number:m("number"),object:m("object"),string:m("string"),symbol:m("symbol"),any:h(i.thatReturnsNull),arrayOf:function(e){return h(function(t,n,i,o,r){if("function"!=typeof e)return new d("Property `"+r+"` of component `"+i+"` has invalid PropType notation inside arrayOf.");var a=t[n];if(!Array.isArray(a)){var l=g(a);return new d("Invalid "+o+" `"+r+"` of type `"+l+"` supplied to `"+i+"`, expected an array.")}for(var c=0;c<a.length;c++){var u=e(a,c,i,o,r+"["+c+"]",s);if(u instanceof Error)return u}return null})},element:function(){return h(function(t,n,i,o,r){var a=t[n];if(!e(a)){var s=g(a);return new d("Invalid "+o+" `"+r+"` of type `"+s+"` supplied to `"+i+"`, expected a single ReactElement.")}return null})}(),instanceOf:function(e){return h(function(t,n,i,o,r){if(!(t[n]instanceof e)){var a=e.name||u,s=function(e){if(!e.constructor||!e.constructor.name)return u;return e.constructor.name}(t[n]);return new d("Invalid "+o+" `"+r+"` of type `"+s+"` supplied to `"+i+"`, expected instance of `"+a+"`.")}return null})},node:function(){return h(function(e,t,n,i,o){if(!_(e[t]))return new d("Invalid "+i+" `"+o+"` supplied to `"+n+"`, expected a ReactNode.");return null})}(),objectOf:function(e){return h(function(t,n,i,o,r){if("function"!=typeof e)return new d("Property `"+r+"` of component `"+i+"` has invalid PropType notation inside objectOf.");var a=t[n],l=g(a);if("object"!==l)return new d("Invalid "+o+" `"+r+"` of type `"+l+"` supplied to `"+i+"`, expected an object.");for(var c in a)if(a.hasOwnProperty(c)){var u=e(a,c,i,o,r+"."+c,s);if(u instanceof Error)return u}return null})},oneOf:function(e){if(!Array.isArray(e))return r(!1,"Invalid argument supplied to oneOf, expected an instance of array."),i.thatReturnsNull;return h(function(t,n,i,o,r){for(var a=t[n],s=0;s<e.length;s++)if(f(a,e[s]))return null;var l=JSON.stringify(e);return new d("Invalid "+o+" `"+r+"` of value `"+a+"` supplied to `"+i+"`, expected one of "+l+".")})},oneOfType:function(e){if(!Array.isArray(e))return r(!1,"Invalid argument supplied to oneOfType, expected an instance of array."),i.thatReturnsNull;for(var t=0;t<e.length;t++){var n=e[t];if("function"!=typeof n)return r(!1,"Invalid argument supplied to oneOfType. Expected an array of check functions, but received %s at index %s.",v(n),t),i.thatReturnsNull}return h(function(t,n,i,o,r){for(var a=0;a<e.length;a++){var l=e[a];if(null==l(t,n,i,o,r,s))return null}return new d("Invalid "+o+" `"+r+"` supplied to `"+i+"`.")})},shape:function(e){return h(function(t,n,i,o,r){var a=t[n],l=g(a);if("object"!==l)return new d("Invalid "+o+" `"+r+"` of type `"+l+"` supplied to `"+i+"`, expected `object`.");for(var c in e){var u=e[c];if(u){var p=u(a,c,i,o,r+"."+c,s);if(p)return p}}return null})},exact:function(e){return h(function(t,n,i,o,r){var l=t[n],c=g(l);if("object"!==c)return new d("Invalid "+o+" `"+r+"` of type `"+c+"` supplied to `"+i+"`, expected `object`.");var u=a({},t[n],e);for(var p in u){var f=e[p];if(!f)return new d("Invalid "+o+" `"+r+"` key `"+p+"` supplied to `"+i+"`.\nBad object: "+JSON.stringify(t[n],null,"  ")+"\nValid keys: "+JSON.stringify(Object.keys(e),null,"  "));var h=f(l,p,i,o,r+"."+p,s);if(h)return h}return null})}};function f(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function d(e){this.message=e,this.stack=""}function h(e){var n={},i=0;function a(a,l,c,p,f,h,m){if(p=p||u,h=h||c,m!==s)if(t)o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");else if("undefined"!=typeof console){var _=p+":"+c;!n[_]&&i<3&&(r(!1,"You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",h,p),n[_]=!0,i++)}return null==l[c]?a?null===l[c]?new d("The "+f+" `"+h+"` is marked as required in `"+p+"`, but its value is `null`."):new d("The "+f+" `"+h+"` is marked as required in `"+p+"`, but its value is `undefined`."):null:e(l,c,p,f,h)}var l=a.bind(null,!1);return l.isRequired=a.bind(null,!0),l}function m(e){return h(function(t,n,i,o,r,a){var s=t[n];return g(s)!==e?new d("Invalid "+o+" `"+r+"` of type `"+y(s)+"` supplied to `"+i+"`, expected `"+e+"`."):null})}function _(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(_);if(null===t||e(t))return!0;var i=function(e){var t=e&&(n&&e[n]||e[c]);if("function"==typeof t)return t}(t);if(!i)return!1;var o,r=i.call(t);if(i!==t.entries){for(;!(o=r.next()).done;)if(!_(o.value))return!1}else for(;!(o=r.next()).done;){var a=o.value;if(a&&!_(a[1]))return!1}return!0;default:return!1}}function g(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||"Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol}(t,e)?"symbol":t}function y(e){if(void 0===e||null===e)return""+e;var t=g(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function v(e){var t=y(e);switch(t){case"array":case"object":return"an "+t;case"boolean":case"date":case"regexp":return"a "+t;default:return t}}return d.prototype=Error.prototype,p.checkPropTypes=l,p.PropTypes=p,p}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var i=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach(function(e){i[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(s[c]=n[c]);if(i){a=i(n);for(var u=0;u<a.length;u++)r.call(n,a[u])&&(s[a[u]]=n[a[u]])}}return s}},function(e,t,n){"use strict";var i=n(90),o=n(91),r=n(92),a={};e.exports=function(e,t,n,s,l){for(var c in e)if(e.hasOwnProperty(c)){var u;try{i("function"==typeof e[c],"%s: %s type `%s` is invalid; it must be a function, usually from the `prop-types` package, but received `%s`.",s||"React class",n,c,typeof e[c]),u=e[c](t,c,s,n,null,r)}catch(e){u=e}if(o(!u||u instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",s||"React class",n,c,typeof u),u instanceof Error&&!(u.message in a)){a[u.message]=!0;var p=l?l():"";o(!1,"Failed %s type: %s%s",n,u.message,null!=p?p:"")}}}},function(e,t){e.exports={primaryColor:"#2D7BFF",primaryColorRGB:"45, 123, 255",backgroundColor:"#141415",backgroundColorRGB:"20, 20, 21",controlsKnobColor:"white",controlsBackgroundColor:"#232326",controlsBackgroundColorRGB:"35, 35, 38",controlsLightBackgroundColor:"#2a2a2e",controlsOutlineColor:"rgba(255, 255, 255, 0.6)",controlsSeparatorColor:"#1b1b1d",navigationBackgroundColor:"#202022",navigationBackgroundColorRGB:"32, 32, 34",textColor:"#FFFFFF",dimmedTextColor:"#888888",dimmedTextColorRGB:"136, 136, 136",filterItemBackgroundColor:"#4b4b4c",secondaryControlsBackgroundColor:"#2a2a2e",secondaryControlsBackgroundColorRGB:"42, 42, 46",focusItemBackgroundColor:"#343437",sliderBackgroundColor:"rgba(255,255,255,0.24)",darkSliderBackgroundColor:"#1B1B1E",sliderKnobColor:"#b5b5be",sliderCircleKnobColor:"#c8c8d2",highlightColor:"#2675F8",highlightColorRGB:"38, 117, 253",darkHighlightColorRGB:"15, 47, 101",buttonBorderColor:"#303034",defaultShadow:"0 1px 2px 0 rgba(0, 0, 0, 0.60)",inputModalButtonBarColor:"#262629",modalErrorColor:"#C23A3A",modalWarningColor:"#C18226",modalLoadingColor:"#2D7BFF",zIndex:function(e){return 5*["background","controls","controlsOverlays","overlays","navigation"].indexOf(e)},transitionDuration:.3,listItemSlideInDelay:100,scrollbarGradientSize:64,uppercaseBoldFontFamily:"sourcesansprobold",uppercaseSemiBoldFontFamily:"sourcesansprosemibold",regularFontFamily:"firasansregular",mediumFontFamily:"firasansmedium",fonts:{firasansmedium:{fontFamily:"firasansmedium",fontWeight:"500",fontStyle:"normal",src:"fonts/FiraSans-Medium.woff"},firasansregular:{fontFamily:"firasansregular",fontWeight:"400",fontStyle:"normal",src:"fonts/FiraSans-Regular.woff"},sourcesansprobold:{fontFamily:"sourcesansprobold",fontWeight:"bolder",fontStyle:"normal",src:"fonts/SourceSansPro-Bold.woff"},sourcesansprosemibold:{fontFamily:"sourcesansprosemibold",fontWeight:"bold",fontStyle:"normal",src:"fonts/SourceSansPro-Semibold.woff"}}}},function(e,t,n){var i;i=function(e){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={exports:{},id:i,loaded:!1};return e[i].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}return n.m=e,n.c=t,n.p="",n(0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ThemeProvider=t.withTheme=void 0;var i=l(n(1)),o=l(n(27)),r=l(n(28)),a=l(n(29)),s=l(n(30));function l(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){var t=new i.default(e),n=function(e){if(e instanceof r.default){var n=e,i={};return o.default.forEach(function(e){i[e]=function(i,o,r){return"string"==typeof o&&(r=o,o=void 0),t.createComponent(e,{styles:i,variations:o,name:r,baseStyles:n})}}),i}return function(n,i,o){return"string"==typeof i&&(o=i,i=void 0),t.createComponent(e,{styles:n,variations:i,name:o})}};return o.default.forEach(function(e){n[e]=function(n,i,o){return"string"==typeof i&&(o=i,i=void 0),t.createComponent(e,{styles:n,variations:i,name:o})}}),n.global=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=t.getOptions(),o=i.injection,r=i.theme;if(o||n){"function"==typeof e&&(e=e(r));var a=t.getStylesBuffer();a.bufferCSS(e),a.flushToStyleTag(n)}},n.css=function(e,n,i){return"string"==typeof n&&(i=n,n=void 0),new r.default(t,{styles:e,variations:n,name:i||"baseStyles"})},["renderToStatic"].forEach(function(e){n[e]=t[e].bind(t)}),n},t.withTheme=a.default,t.ThemeProvider=s.default},function(e,t,n){(function(e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=s(n(3)),r=s(n(5)),a=n(4);function s(e){return e&&e.__esModule?e:{default:e}}var l=void 0!==e&&"production"===e.env.NODE_ENV,c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._options=(0,a.defaults)(t,{injection:!0,batchInjection:!0,minified:!1,autoPrefix:!0,cssSelectorPrefix:"",classNamePrefix:"",hashSeparator:"-",nameSeparator:"__",variationSeparator:"--",styleNode:null,injectionMode:l?"fast":"debug",hashedStyles:!1}),this._stylesBuffer=new o.default(this),this._componentFactory=new r.default(this,this._options)}return i(e,[{key:"createComponent",value:function(e,t){return this._componentFactory.createComponent(e,t)}},{key:"renderToStatic",value:function(e){this._stylesBuffer.disableInjection();var t=e(),n=this._stylesBuffer.flushToString(!0);return this._stylesBuffer.enableInjection(),{css:{content:n},html:t}}},{key:"getStylesBuffer",value:function(){return this._stylesBuffer}},{key:"getOptions",value:function(){return this._options}}]),e}();t.default=c}).call(t,n(2))},function(e,t){var n,i,o=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(e){n=r}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var l,c=[],u=!1,p=-1;function f(){u&&l&&(u=!1,l.length?c=l.concat(c):p=-1,c.length&&d())}function d(){if(!u){var e=s(f);u=!0;for(var t=c.length;t;){for(l=c,c=[];++p<t;)l&&l[p].run();p=-1,t=c.length}l=null,u=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||u||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],i=!0,o=!1,r=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){o=!0,r=e}finally{try{!i&&s.return&&s.return()}finally{if(o)throw r}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=n(4);var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._adonis=t,this._injectionEnabled=!0,this._bufferedSelectors={},this._buffer=[],this._styleNode=this._findStyleNode(),this._sheet=this._findSheet()}return o(e,[{key:"_findSheet",value:function(){if(this._styleNode){if(this._styleNode.sheet)return this._styleNode.sheet;for(var e=document.styleSheets,t=0;t<e.length;t++){var n=e[t];if(n.ownerNode===this._styleNode)return n}}}},{key:"_findStyleNode",value:function(){var e=this._adonis.getOptions().styleNode;return e||("undefined"==typeof document?null:((e=document.createElement("style")).setAttribute("data-adonis",!0),document.head.appendChild(e),e))}},{key:"bufferCSS",value:function(e){this._buffer.push(e)}},{key:"bufferRulesets",value:function(e){var t=this;e.forEach(function(e){var n=i(e,2),o=n[0];n[1];t._bufferedSelectors[o]=!0}),Array.prototype.push.apply(this._buffer,e.map(function(e){return i(e,2)[1]}))}},{key:"isSelectorBuffered",value:function(e){return this._bufferedSelectors[e]}},{key:"disableInjection",value:function(){this._injectionEnabled=!1}},{key:"enableInjection",value:function(){this._injectionEnabled=!0}},{key:"flushToString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this._adonis.getOptions().minified,n=this._buffer.join(t?"":"\n\n");return this._buffer=[],e&&(this._bufferedSelectors={}),n}},{key:"_injectFast",value:function(){var e=this;this._buffer.forEach(function(t){e._sheet.insertRule(t,e._sheet.cssRules.length)})}},{key:"_injectDebug",value:function(){var e=this.flushToString();if(e){var t=this._adonis.getOptions().minified,n=this._styleNode.innerHTML.length>0;this._styleNode.appendChild(document.createTextNode((t||!n?"":"\n\n")+e))}}},{key:"_flushToStyleTag",value:function(){var e=this._adonis.getOptions().injectionMode;if("fast"===e&&this._sheet.insertRule)this._injectFast();else{if("debug"!==e)throw new Error("Unknown CSS injection mode: `"+e+"`");this._injectDebug()}this._buffer=[]}},{key:"flushToStyleTag",value:function(){var e=this;if(this._injectionEnabled){var t=this._adonis.getOptions().batchInjection;!this._nextTick&&t?this._nextTick=(0,r.requestAnimationFrame)(function(){e._nextTick=null,e._flushToStyleTag()}):t||this._flushToStyleTag()}}}]),e}();t.default=a},function(e,t){(function(e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=(t.defaults=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];var o={};for(var r in e)o[r]=e[r];for(var a=0;a<n.length;a++){var s=n[a];for(var l in s)void 0===o[l]&&(o[l]=s[l])}return o},t.hashObject=function(e){for(var t=JSON.stringify(e),n=t.length,i=n,o=0,r=void 0;n>=4;)r=1540483477*(65535&(r=255&t.charCodeAt(o)|(255&t.charCodeAt(++o))<<8|(255&t.charCodeAt(++o))<<16|(255&t.charCodeAt(++o))<<24))+((1540483477*(r>>>16)&65535)<<16),i=1540483477*(65535&i)+((1540483477*(i>>>16)&65535)<<16)^(r=1540483477*(65535&(r^=r>>>24))+((1540483477*(r>>>16)&65535)<<16)),n-=4,++o;switch(n){case 3:i^=(255&t.charCodeAt(o+2))<<16;case 2:i^=(255&t.charCodeAt(o+1))<<8;case 1:i=1540483477*(65535&(i^=255&t.charCodeAt(o)))+((1540483477*(i>>>16)&65535)<<16)}return i=1540483477*(65535&(i^=i>>>13))+((1540483477*(i>>>16)&65535)<<16),((i^=i>>>15)>>>0).toString(36)},t.flatten=function e(t){return t.reduce(function(t,n){return t.concat(Array.isArray(n)?e(n):n)},[])},t.toStaticStyles=function e(t){var i={};for(var o in t){var r=t[o];"object"===(void 0===r?"undefined":n(r))?i[o]=e(r):"function"!=typeof r&&(i[o]=r)}return i},t.deepMerge=function e(t,i){var o={};for(var r in t)o[r]=t[r];for(var a in i)"object"===n(i[a])&&t[a]?o[a]=e(t[a],i[a]):o[a]=i[a];return o});t.deepMergeAll=function(e){return e.reduce(function(e,t){return i(e,t)},{})},t.resolveStylesObject=function e(t,i){var o={};for(var r in t){var a=t[r];if("object"===(void 0===a?"undefined":n(a)))o[r]=e(a,i);else if("function"==typeof a){if(!i)throw new Error("Trying to resolve a dynamic property without a `theme` given.");o[r]=a(i)}else o[r]=a}return o},t.findAllCombinations=function(e){return function e(t,n){var i=t[0];if(void 0===i)return n;for(var o=0,r=n.length;o<r;++o)n.push(n[o].concat(i));return e(t.slice(1),n)}(e,[[]]).slice(1)},t.requestAnimationFrame=function(){for(var t=0,n=void 0===e?window:e,i=n.requestAnimationFrame,o=["ms","moz","webkit","o"],r=0;r<o.length&&!i;++r)i=n[o[r]+"RequestAnimationFrame"];return!i&&void 0!==n&&n.setImmediate&&(i=n.setImmediate),i&&(i=i.bind(n)),i||(i=function(e){var n=(new Date).getTime(),i=Math.max(0,16-(n-t)),o=setTimeout(function(){e(n+i)},i);return t=n+i,o}),i}()}).call(t,function(){return this}())},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(6),r=p(o),a=n(4),s=p(n(7)),l=p(n(16)),c=p(n(17)),u=p(n(26));function p(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var d=function(){function e(t,n){f(this,e),this._adonis=t,this._options=n}return i(e,[{key:"_getName",value:function(e){return"string"==typeof e?e:e.name?e.name:"adonis"}},{key:"_getTargetStyles",value:function(e,t){var n=[e.adonisBaseStyles,e.adonisStyles];return e.adonisTarget&&n.unshift(this._getTargetStyles(e.adonisTarget)),e.RootElement&&n.unshift(this._getTargetStyles(e.RootElement)),(0,a.flatten)(n).filter(function(e){return e})}},{key:"createComponent",value:function(e,t){var n=this._adonis,p=t.name;p||(p=this._getName(e));var d="string"==typeof e,h=e.prototype instanceof s.default,m=!h&&e.prototype instanceof o.Component,_=t.styles,g=t.variations,y=t.baseStyles;g=g||{};var v=new l.default(n,{styles:_,variations:g,name:p}),b=n.getOptions(),k=b.injection,w=b.theme,x=b.hashedStyles;if("pre"===k&&!x){var S;S=this._getTargetStyles(e,p).concat([y,v]).filter(function(e){return e}),new u.default(n,S,w).bufferRulesets(),n.getStylesBuffer().flushToStyleTag()}var C=function(o){function l(){var e;f(this,l);for(var t=arguments.length,i=Array(t),o=0;o<t;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=l.__proto__||Object.getPrototypeOf(l)).call.apply(e,[this].concat(i)));return r._updateStylesManager(),r._adonis=n,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(l,s.default),i(l,[{key:"_updateStylesManager",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;this._allStyles=[y,v].concat(e.styles||[]).filter(function(e){return e});var t=this._getActiveVariationsFromProps(e);this._stylesManager=new c.default(n,this._allStyles,t,this.context.theme)}},{key:"componentWillReceiveProps",value:function(e){var t=this,n=e.styles!==this.props.styles,i=!1;(0,a.flatten)(this._allStyles.map(function(e){return e.getVariations()})).forEach(function(n){e[n]!==t.props[n]&&(i=!0)}),(n||i)&&this._updateStylesManager(e)}},{key:"_cloneProps",value:function(){var e=this,t={};return Object.keys(this.props).forEach(function(n){t[n]=e.props[n]}),t}},{key:"_getActiveVariationsFromProps",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,t={};return this._allStyles.forEach(function(e){return e.getVariations().forEach(function(e){return t[e]=!0})}),Object.keys(t).filter(function(t){return!0===e[t]}).sort()}},{key:"_buildClassName",value:function(){var e=this.props.className,t=[];t.push(e);var n=this._stylesManager.getClassName();return t.push(n),{className:t.filter(function(e){return e}).join(" ")}}},{key:"_shouldInjectCSS",value:function(){return!(!k||x)&&(d||m&&!h)}},{key:"render",value:function(){var n=this._cloneProps(),i=this._buildClassName().className,o=this._adonis.getStylesBuffer();if(this._shouldInjectCSS()&&(this._stylesManager.bufferRulesets(),!0!==k||x||o.flushToStyleTag()),d){var s=t.variations;s&&Object.keys(s).forEach(function(e){delete n[e]}),this.props._activeParentVariations&&this.props._activeParentVariations.forEach(function(e){delete n[e]}),y&&y.getVariations().forEach(function(e){delete n[e]})}d?n.className=i:(n.styles=(0,a.flatten)([v].concat(this.props.styles||[])),n._activeParentVariations=Object.keys(g||{}).concat(this.props._activeParentVariations||[]));var l=this.props,c=l.children,u=l.innerRef;return u&&(m||d?n.ref=u:h&&(n.innerRef=u)),d&&(delete n.styles,delete n.innerRef,delete n._activeParentVariations),r.default.createElement(e,n,c)}}],[{key:"name",get:function(){return p}}]),l}();return C.contextTypes=s.default.contextTypes,C.adonisTarget=e,C.adonisStyles=v,C.adonisBaseStyles=y,C}}]),e}();t.default=d},function(t,n){t.exports=e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,o=n(6),r=n(8),a=(i=r)&&i.__esModule?i:{default:i};var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),t}();t.default=s,s.contextTypes={theme:a.default.object}},function(e,t,n){(function(t){if("production"!==t.env.NODE_ENV){var i="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;e.exports=n(9)(function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},!0)}else e.exports=n(15)()}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var i=n(10),o=n(11),r=n(12),a=n(13),s=n(14);e.exports=function(e,n){var l="function"==typeof Symbol&&Symbol.iterator,c="@@iterator";var u="<<anonymous>>",p={array:m("array"),bool:m("boolean"),func:m("function"),number:m("number"),object:m("object"),string:m("string"),symbol:m("symbol"),any:h(i.thatReturnsNull),arrayOf:function(e){return h(function(t,n,i,o,r){if("function"!=typeof e)return new d("Property `"+r+"` of component `"+i+"` has invalid PropType notation inside arrayOf.");var s=t[n];if(!Array.isArray(s)){var l=g(s);return new d("Invalid "+o+" `"+r+"` of type `"+l+"` supplied to `"+i+"`, expected an array.")}for(var c=0;c<s.length;c++){var u=e(s,c,i,o,r+"["+c+"]",a);if(u instanceof Error)return u}return null})},element:function(){return h(function(t,n,i,o,r){var a=t[n];if(!e(a)){var s=g(a);return new d("Invalid "+o+" `"+r+"` of type `"+s+"` supplied to `"+i+"`, expected a single ReactElement.")}return null})}(),instanceOf:function(e){return h(function(t,n,i,o,r){if(!(t[n]instanceof e)){var a=e.name||u,s=function(e){if(!e.constructor||!e.constructor.name)return u;return e.constructor.name}(t[n]);return new d("Invalid "+o+" `"+r+"` of type `"+s+"` supplied to `"+i+"`, expected instance of `"+a+"`.")}return null})},node:function(){return h(function(e,t,n,i,o){if(!_(e[t]))return new d("Invalid "+i+" `"+o+"` supplied to `"+n+"`, expected a ReactNode.");return null})}(),objectOf:function(e){return h(function(t,n,i,o,r){if("function"!=typeof e)return new d("Property `"+r+"` of component `"+i+"` has invalid PropType notation inside objectOf.");var s=t[n],l=g(s);if("object"!==l)return new d("Invalid "+o+" `"+r+"` of type `"+l+"` supplied to `"+i+"`, expected an object.");for(var c in s)if(s.hasOwnProperty(c)){var u=e(s,c,i,o,r+"."+c,a);if(u instanceof Error)return u}return null})},oneOf:function(e){if(!Array.isArray(e))return"production"!==t.env.NODE_ENV&&r(!1,"Invalid argument supplied to oneOf, expected an instance of array."),i.thatReturnsNull;return h(function(t,n,i,o,r){for(var a=t[n],s=0;s<e.length;s++)if(f(a,e[s]))return null;var l=JSON.stringify(e);return new d("Invalid "+o+" `"+r+"` of value `"+a+"` supplied to `"+i+"`, expected one of "+l+".")})},oneOfType:function(e){if(!Array.isArray(e))return"production"!==t.env.NODE_ENV&&r(!1,"Invalid argument supplied to oneOfType, expected an instance of array."),i.thatReturnsNull;for(var n=0;n<e.length;n++){var o=e[n];if("function"!=typeof o)return r(!1,"Invalid argument supplid to oneOfType. Expected an array of check functions, but received %s at index %s.",v(o),n),i.thatReturnsNull}return h(function(t,n,i,o,r){for(var s=0;s<e.length;s++){var l=e[s];if(null==l(t,n,i,o,r,a))return null}return new d("Invalid "+o+" `"+r+"` supplied to `"+i+"`.")})},shape:function(e){return h(function(t,n,i,o,r){var s=t[n],l=g(s);if("object"!==l)return new d("Invalid "+o+" `"+r+"` of type `"+l+"` supplied to `"+i+"`, expected `object`.");for(var c in e){var u=e[c];if(u){var p=u(s,c,i,o,r+"."+c,a);if(p)return p}}return null})}};function f(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function d(e){this.message=e,this.stack=""}function h(e){if("production"!==t.env.NODE_ENV)var i={},s=0;function l(l,c,p,f,h,m,_){if(f=f||u,m=m||p,_!==a)if(n)o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");else if("production"!==t.env.NODE_ENV&&"undefined"!=typeof console){var g=f+":"+p;!i[g]&&s<3&&(r(!1,"You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",m,f),i[g]=!0,s++)}return null==c[p]?l?null===c[p]?new d("The "+h+" `"+m+"` is marked as required in `"+f+"`, but its value is `null`."):new d("The "+h+" `"+m+"` is marked as required in `"+f+"`, but its value is `undefined`."):null:e(c,p,f,h,m)}var c=l.bind(null,!1);return c.isRequired=l.bind(null,!0),c}function m(e){return h(function(t,n,i,o,r,a){var s=t[n];return g(s)!==e?new d("Invalid "+o+" `"+r+"` of type `"+y(s)+"` supplied to `"+i+"`, expected `"+e+"`."):null})}function _(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(_);if(null===t||e(t))return!0;var n=function(e){var t=e&&(l&&e[l]||e[c]);if("function"==typeof t)return t}(t);if(!n)return!1;var i,o=n.call(t);if(n!==t.entries){for(;!(i=o.next()).done;)if(!_(i.value))return!1}else for(;!(i=o.next()).done;){var r=i.value;if(r&&!_(r[1]))return!1}return!0;default:return!1}}function g(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||"Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol}(t,e)?"symbol":t}function y(e){if(void 0===e||null===e)return""+e;var t=g(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function v(e){var t=y(e);switch(t){case"array":case"object":return"an "+t;case"boolean":case"date":case"regexp":return"a "+t;default:return t}}return d.prototype=Error.prototype,p.checkPropTypes=s,p.PropTypes=p,p}}).call(t,n(2))},function(e,t){"use strict";function n(e){return function(){return e}}var i=function(){};i.thatReturns=n,i.thatReturnsFalse=n(!1),i.thatReturnsTrue=n(!0),i.thatReturnsNull=n(null),i.thatReturnsThis=function(){return this},i.thatReturnsArgument=function(e){return e},e.exports=i},function(e,t,n){(function(t){"use strict";var n=function(e){};"production"!==t.env.NODE_ENV&&(n=function(e){if(void 0===e)throw new Error("invariant requires an error message argument")}),e.exports=function(e,t,i,o,r,a,s,l){if(n(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[i,o,r,a,s,l],p=0;(c=new Error(t.replace(/%s/g,function(){return u[p++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}}).call(t,n(2))},function(e,t,n){(function(t){"use strict";var i=n(10);"production"!==t.env.NODE_ENV&&(i=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==t.indexOf("Failed Composite propType: ")&&!e){for(var n=arguments.length,i=Array(n>2?n-2:0),o=2;o<n;o++)i[o-2]=arguments[o];(function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];var o=0,r="Warning: "+e.replace(/%s/g,function(){return n[o++]});"undefined"!=typeof console&&console.error(r);try{throw new Error(r)}catch(e){}}).apply(void 0,[t].concat(i))}}),e.exports=i}).call(t,n(2))},function(e,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){(function(t){"use strict";if("production"!==t.env.NODE_ENV)var i=n(11),o=n(12),r=n(13),a={};e.exports=function(e,n,s,l,c){if("production"!==t.env.NODE_ENV)for(var u in e)if(e.hasOwnProperty(u)){var p;try{i("function"==typeof e[u],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",l||"React class",s,u),p=e[u](n,u,l,s,null,r)}catch(e){p=e}if(o(!p||p instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",l||"React class",s,u,typeof p),p instanceof Error&&!(p.message in a)){a[p.message]=!0;var f=c?c():"";o(!1,"Failed %s type: %s%s",s,p.message,null!=f?f:"")}}}}).call(t,n(2))},function(e,t,n){"use strict";var i=n(10),o=n(11),r=n(13);e.exports=function(){function e(e,t,n,i,a,s){s!==r&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t};return n.checkPropTypes=i,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(4);var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._adonis=t,this._options=(0,o.defaults)(n,{variations:[],styles:{},name:"Unnamed"});var i=this._adonis.getOptions().hashedStyles;if(i&&"string"!=typeof this._options.styles)throw new Error("Passing style objects with `hashedStyles` set to true is invalid.");this._hash=i?this._options.styles:(0,o.hashObject)(this._options.styles),this._variationHashes=this._hashVariations()}return i(e,[{key:"_hashVariations",value:function(){var e={},t=this._adonis.getOptions().hashedStyles,n=this._options.variations;for(var i in n){var r=n[i];e[i]=t?r:(0,o.hashObject)(r)}return e}},{key:"getIdentifierForVariations",value:function(e){var t=this,n=this._options.name,i=this._adonis.getOptions(),o=i.hashSeparator,r=i.variationSeparator,a=""+n+o+this._hash;return e.sort().forEach(function(e){var n=t._variationHashes[e];n&&(a+=""+r+e+o+n)}),a}},{key:"getStyles",value:function(){return this._options.styles}},{key:"getVariationStyles",value:function(e){var t=this._options.variations;return e?e.map(function(e){return t[e]}).filter(function(e){return e}):t}},{key:"getVariations",value:function(){return Object.keys(this._options.variations||{})}}]),e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=n(4),a=n(18),s=(i=a)&&i.__esModule?i:{default:i};var l=function(){function e(t,n,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._adonis=t,this._styles=n,this._theme=o,this._activeVariations=i,this._className=this._generateClassName(this._activeVariations),this._baseSelector="."+this._className,this._rulesets=this._generateRulesets()}return o(e,[{key:"generateCSS",value:function(){return this._rulesets.map(function(e){return e.toCSS()}).filter(function(e){return e})}},{key:"bufferRulesets",value:function(){var e=this._adonis.getStylesBuffer(),t=this._rulesets.filter(function(t){return!e.isSelectorBuffered(t.getSelector())&&t.hasDeclarations()}).map(function(e){return[e.getSelector(),e.toCSS()]});e.bufferRulesets(t)}},{key:"_getCombinedStyles",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=(0,r.flatten)(this._styles.map(function(t){return[t.getStyles(),t.getVariationStyles(e)]}));return(0,r.deepMergeAll)(t)}},{key:"_generateClassName",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=this._adonis.getOptions(),n=t.nameSeparator;return t.classNamePrefix+this._styles.map(function(t){return t.getIdentifierForVariations(e)}).join(n)}},{key:"_generateRulesets",value:function(){var e=new s.default(this._adonis,this._baseSelector,this._getCombinedStyles(this._activeVariations),{theme:this._theme});return(0,r.flatten)([e,e.getSubRulesets()])}},{key:"getClassName",value:function(){return this._className}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(4),r=s(n(19)),a=s(n(21));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t,n,i,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._options=r,this._adonis=t,this._selector=n,this._styles=i,this._resolvedStyles=(0,o.resolveStylesObject)(this._styles,this._options.theme);var a=this._adonis.getOptions().hashedStyles;this._hash=a?this._styles:(0,o.hashObject)(this._styles);var s=this._parseStyles(),l=s.subRulesets,c=s.declarations;this._subRulesets=l,this._declarations=c}return i(e,[{key:"_getSubRuleset",value:function(t,n){for(var i=this,r=this._adonis.getOptions().minified,s=null,l=function(t,r){var a=(0,o.deepMerge)(i._options,{parentSelector:r});s=new e(i._adonis,t,n,a)},c=0;c<a.default.length;c++){if((0,a.default[c])(t,this._selector,l,r),s)return s}}},{key:"_parseStyles",value:function(){var e=[],t=[];for(var n in this._resolvedStyles){var i=this._resolvedStyles[n],o=this._getSubRuleset(n,i);o?e.push(o,o.getSubRulesets()):t.push(new r.default(this._adonis,n,i))}return{subRulesets:e,declarations:t}}},{key:"toCSS",value:function(){var e=this._options.parentSelector,t=this._adonis.getOptions(),n=t.minified,i=t.cssSelectorPrefix;if(0===this._declarations.length)return null;var o=e&&e.match(/^@/),r="",a="";e?(i&&!o&&(r+=i),r+=e+(n?"{":" {\n"),a="  "):r+=i;var s="";return i&&o&&(s+=i),s+=this._selector,r+=a+s+(n?"{":" {\n"),this._declarations.forEach(function(e){r+=a+e.toCSS()+(n?"":"\n")}),r+=a+"}",e&&(r+=n?"}":"\n}"),r}},{key:"getSubRulesets",value:function(){return this._subRulesets}},{key:"hasDeclarations",value:function(){return 0!==this._declarations.length}},{key:"getSelector",value:function(){return this._selector}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],i=!0,o=!1,r=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){o=!0,r=e}finally{try{!i&&s.return&&s.return()}finally{if(o)throw r}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=n(20),s=(i=a)&&i.__esModule?i:{default:i};var l=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._adonis=t,this.key=n,this.value=i,this.cssKey=this.key.replace(/([A-Z])/g,function(e){return"-"+e[0].toLowerCase()})}return r(e,[{key:"_getAutoPrefixedKeyPairs",value:function(){var e=this,t=s.default[this.key],n=[];return t&&t.forEach(function(t){n.push(["-"+t+"-"+e.cssKey,e.value])}),n}},{key:"toCSS",value:function(){var e=this._adonis.getOptions(),t=e.minified,n=e.autoPrefix,i=[[this.cssKey,this.value]];return n&&(i=i.concat(this._getAutoPrefixedKeyPairs())),i.map(function(e){var n=o(e,2),i=n[0],r=n[1];return(t?"":"  ")+i+":"+(t?"":" ")+r+";"}).join(t?"":"\n")}}]),e}();t.default=l},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n="webkit",i="moz",o="ms";t.default={appearance:[n,i],userSelect:[n,i,o],textEmphasisPosition:[n],textEmphasis:[n],textEmphasisStyle:[n],textEmphasisColor:[n],boxDecorationBreak:[n],clipPath:[n],maskImage:[n],maskMode:[n],maskRepeat:[n],maskPosition:[n],maskClip:[n],maskOrigin:[n],maskSize:[n],maskComposite:[n],mask:[n],maskBorderSource:[n],maskBorderMode:[n],maskBorderSlice:[n],maskBorderWidth:[n],maskBorderOutset:[n],maskBorderRepeat:[n],maskBorder:[n],maskType:[n],textDecorationStyle:[n],textDecorationSkip:[n],textDecorationLine:[n],textDecorationColor:[n],filter:[n],fontFeatureSettings:[n],breakAfter:[n,i,o],breakBefore:[n,i,o],breakInside:[n,i,o],columnCount:[n,i],columnFill:[n,i],columnGap:[n,i],columnRule:[n,i],columnRuleColor:[n,i],columnRuleStyle:[n,i],columnRuleWidth:[n,i],columns:[n,i],columnSpan:[n,i],columnWidth:[n,i],flex:[n],flexBasis:[n],flexDirection:[n],flexGrow:[n],flexFlow:[n],flexShrink:[n],flexWrap:[n],alignContent:[n],alignItems:[n],alignSelf:[n],justifyContent:[n],order:[n],transform:[n],transformOrigin:[n],transformOriginX:[n],transformOriginY:[n],backfaceVisibility:[n],perspective:[n],perspectiveOrigin:[n],transformStyle:[n],transformOriginZ:[n],animation:[n],animationDelay:[n],animationDirection:[n],animationFillMode:[n],animationDuration:[n],animationIterationCount:[n],animationName:[n],animationPlayState:[n],animationTimingFunction:[n],backdropFilter:[n],fontKerning:[n],scrollSnapType:[n,o],scrollSnapPointsX:[n,o],scrollSnapPointsY:[n,o],scrollSnapDestination:[n,o],scrollSnapCoordinate:[n,o],shapeImageThreshold:[n],shapeImageMargin:[n],shapeImageOutside:[n],hyphens:[n,i,o],flowInto:[n,o],flowFrom:[n,o],regionFragment:[n,o],textAlignLast:[i],tabSize:[i],wrapFlow:[o],wrapThrough:[o],wrapMargin:[o],gridTemplateColumns:[o],gridTemplateRows:[o],gridTemplateAreas:[o],gridTemplate:[o],gridAutoColumns:[o],gridAutoRows:[o],gridAutoFlow:[o],grid:[o],gridRowStart:[o],gridColumnStart:[o],gridRowEnd:[o],gridRow:[o],gridColumn:[o],gridColumnEnd:[o],gridColumnGap:[o],gridRowGap:[o],gridArea:[o],gridGap:[o],textSizeAdjust:[n,o],transitionDelay:[n],transitionDuration:[n],transitionProperty:[n],transitionTimingFunction:[n]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(22)),o=s(n(23)),r=s(n(24)),a=s(n(25));function s(e){return e&&e.__esModule?e:{default:e}}t.default=[i.default,o.default,r.default,a.default]},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,i){if(">"!==(e=e.trim())[0])return null;e=e.slice(1).trim();var o=t;return i||(o+=" "),o+=">",i||(o+=" "),n(o+=e)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,i){if("&"!==(e=e.trim())[0])return null;var o=!e.match(/^&\s+/);return n((e=e.replace(/^&/,"")).split(",").map(function(e){return e.trim()}).map(function(e,n){return t+(0===n&&o?"":" ")+e}).join(", "))}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,i){return":"!==(e=e.trim())[0]?null:n(t+e)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,i){return"@"!==(e=e.trim())[0]?null:n(t,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(4),r=s(n(18)),a=s(n(17));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e,n,i){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,[],i))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),i(t,[{key:"_generateVariationRulesets",value:function(){var e=this,t=(0,o.flatten)(this._styles.map(function(e){return e.getVariations()}));return(0,o.findAllCombinations)(t).map(function(t){var n="."+e._generateClassName(t),i=new r.default(e._adonis,n,e._getCombinedStyles(t),{theme:e._theme});return[i,i.getSubRulesets()]})}},{key:"_generateRulesets",value:function(){var e=new r.default(this._adonis,this._baseSelector,this._getCombinedStyles(),{theme:this._theme}),t=[e,e.getSubRulesets()];return t.push(this._generateVariationRulesets()),(0,o.flatten)(t)}}]),t}();t.default=l},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,o=n(16),r=(i=o)&&i.__esModule?i:{default:i};var a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default),t}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=a(n(6)),r=a(n(8));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){var t=function(t){function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,o.default.Component),i(n,[{key:"_cloneProps",value:function(){var e=this,t={};return Object.keys(this.props).forEach(function(n){t[n]=e.props[n]}),t}},{key:"render",value:function(){var t=this._cloneProps(),n=t.innerRef;return n&&(t.ref=n),delete t.innerRef,o.default.createElement(e,t)}}]),n}();return t.contextTypes={theme:r.default.object},t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(6),r=s(o),a=s(n(8));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),i(t,[{key:"getChildContext",value:function(){var e={};for(var t in this.context)e[t]=this.context;return e.theme=this.props.theme,e}},{key:"render",value:function(){return this.props.children?r.default.Children.only(this.props.children):null}}]),t}();t.default=l,l.childContextTypes={theme:a.default.object.isRequired},l.contextTypes={theme:a.default.object}}])},e.exports=i(n(32))},function(e,t,n){n(95),n(33),n(45),n(163),n(170),n(171),e.exports=n(9).Promise},function(e,t,n){var i=n(62),o=n(59);e.exports=function(e){return function(t,n){var r,a,s=String(o(t)),l=i(n),c=s.length;return l<0||l>=c?e?"":void 0:(r=s.charCodeAt(l))<55296||r>56319||l+1===c||(a=s.charCodeAt(l+1))<56320||a>57343?e?s.charAt(l):r:e?s.slice(l,l+2):a-56320+(r-55296<<10)+65536}}},function(e,t,n){"use strict";var i=n(60),o=n(28),r=n(44),a={};n(19)(a,n(11)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=i(a,{next:o(1,n)}),r(e,t+" Iterator")}},function(e,t,n){"use strict";var i=n(161),o=n(162),r=n(27),a=n(20);e.exports=n(96)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),r.Arguments=r.Array,i("keys"),i("values"),i("entries")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var i,o,r,a,s=n(43),l=n(13),c=n(24),u=n(67),p=n(12),f=n(17),d=n(39),h=n(164),m=n(165),_=n(100),g=n(69).set,y=n(167)(),v=n(70),b=n(101),k=n(102),w=l.TypeError,x=l.process,S=l.Promise,C="process"==u(x),E=function(){},T=o=v.f,O=!!function(){try{var e=S.resolve(1),t=(e.constructor={})[n(11)("species")]=function(e){e(E,E)};return(C||"function"==typeof PromiseRejectionEvent)&&e.then(E)instanceof t}catch(e){}}(),R=function(e){var t;return!(!f(e)||"function"!=typeof(t=e.then))&&t},I=function(e,t){if(!e._n){e._n=!0;var n=e._c;y(function(){for(var i=e._v,o=1==e._s,r=0,a=function(t){var n,r,a=o?t.ok:t.fail,s=t.resolve,l=t.reject,c=t.domain;try{a?(o||(2==e._h&&B(e),e._h=1),!0===a?n=i:(c&&c.enter(),n=a(i),c&&c.exit()),n===t.promise?l(w("Promise-chain cycle")):(r=R(n))?r.call(n,s,l):s(n)):l(i)}catch(e){l(e)}};n.length>r;)a(n[r++]);e._c=[],e._n=!1,t&&!e._h&&D(e)})}},D=function(e){g.call(l,function(){var t,n,i,o=e._v,r=P(e);if(r&&(t=b(function(){C?x.emit("unhandledRejection",o,e):(n=l.onunhandledrejection)?n({promise:e,reason:o}):(i=l.console)&&i.error&&i.error("Unhandled promise rejection",o)}),e._h=C||P(e)?2:1),e._a=void 0,r&&t.e)throw t.v})},P=function(e){return 1!==e._h&&0===(e._a||e._c).length},B=function(e){g.call(l,function(){var t;C?x.emit("rejectionHandled",e):(t=l.onrejectionhandled)&&t({promise:e,reason:e._v})})},A=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),I(t,!0))},F=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw w("Promise can't be resolved itself");(t=R(e))?y(function(){var i={_w:n,_d:!1};try{t.call(e,c(F,i,1),c(A,i,1))}catch(e){A.call(i,e)}}):(n._v=e,n._s=1,I(n,!1))}catch(e){A.call({_w:n,_d:!1},e)}}};O||(S=function(e){h(this,S,"Promise","_h"),d(e),i.call(this);try{e(c(F,this,1),c(A,this,1))}catch(e){A.call(this,e)}},(i=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(168)(S.prototype,{then:function(e,t){var n=T(_(this,S));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=C?x.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&I(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),r=function(){var e=new i;this.promise=e,this.resolve=c(F,e,1),this.reject=c(A,e,1)},v.f=T=function(e){return e===S||e===a?new r(e):o(e)}),p(p.G+p.W+p.F*!O,{Promise:S}),n(44)(S,"Promise"),n(169)("Promise"),a=n(9).Promise,p(p.S+p.F*!O,"Promise",{reject:function(e){var t=T(this);return(0,t.reject)(e),t.promise}}),p(p.S+p.F*(s||!O),"Promise",{resolve:function(e){return k(s&&this===a?S:this,e)}}),p(p.S+p.F*!(O&&n(103)(function(e){S.all(e).catch(E)})),"Promise",{all:function(e){var t=this,n=T(t),i=n.resolve,o=n.reject,r=b(function(){var n=[],r=0,a=1;m(e,!1,function(e){var s=r++,l=!1;n.push(void 0),a++,t.resolve(e).then(function(e){l||(l=!0,n[s]=e,--a||i(n))},o)}),--a||i(n)});return r.e&&o(r.v),n.promise},race:function(e){var t=this,n=T(t),i=n.reject,o=b(function(){m(e,!1,function(e){t.resolve(e).then(n.resolve,i)})});return o.e&&i(o.v),n.promise}})},function(e,t){e.exports=function(e,t,n,i){if(!(e instanceof t)||void 0!==i&&i in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var i=n(24),o=n(98),r=n(99),a=n(14),s=n(61),l=n(68),c={},u={};(t=e.exports=function(e,t,n,p,f){var d,h,m,_,g=f?function(){return e}:l(e),y=i(n,p,t?2:1),v=0;if("function"!=typeof g)throw TypeError(e+" is not iterable!");if(r(g)){for(d=s(e.length);d>v;v++)if((_=t?y(a(h=e[v])[0],h[1]):y(e[v]))===c||_===u)return _}else for(m=g.call(e);!(h=m.next()).done;)if((_=o(m,y,h.value,t))===c||_===u)return _}).BREAK=c,t.RETURN=u},function(e,t){e.exports=function(e,t,n){var i=void 0===n;switch(t.length){case 0:return i?e():e.call(n);case 1:return i?e(t[0]):e.call(n,t[0]);case 2:return i?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return i?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return i?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var i=n(13),o=n(69).set,r=i.MutationObserver||i.WebKitMutationObserver,a=i.process,s=i.Promise,l="process"==n(29)(a);e.exports=function(){var e,t,n,c=function(){var i,o;for(l&&(i=a.domain)&&i.exit();e;){o=e.fn,e=e.next;try{o()}catch(i){throw e?n():t=void 0,i}}t=void 0,i&&i.enter()};if(l)n=function(){a.nextTick(c)};else if(!r||i.navigator&&i.navigator.standalone)if(s&&s.resolve){var u=s.resolve();n=function(){u.then(c)}}else n=function(){o.call(i,c)};else{var p=!0,f=document.createTextNode("");new r(c).observe(f,{characterData:!0}),n=function(){f.data=p=!p}}return function(i){var o={fn:i,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t,n){var i=n(19);e.exports=function(e,t,n){for(var o in t)n&&e[o]?e[o]=t[o]:i(e,o,t[o]);return e}},function(e,t,n){"use strict";var i=n(13),o=n(9),r=n(16),a=n(18),s=n(11)("species");e.exports=function(e){var t="function"==typeof o[e]?o[e]:i[e];a&&t&&!t[s]&&r.f(t,s,{configurable:!0,get:function(){return this}})}},function(e,t,n){"use strict";var i=n(12),o=n(9),r=n(13),a=n(100),s=n(102);i(i.P+i.R,"Promise",{finally:function(e){var t=a(this,o.Promise||r.Promise),n="function"==typeof e;return this.then(n?function(n){return s(t,e()).then(function(){return n})}:e,n?function(n){return s(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){"use strict";var i=n(12),o=n(70),r=n(101);i(i.S,"Promise",{try:function(e){var t=o.f(this),n=r(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},function(e,t,n){"use strict";var i=n(7),o=n.n(i),r=n(46),a=n(195),s=n(48),l=o.a.Utils,c=o.a.Math.Vector2,u={getInnerDimensionsForElement:function(e){var t=new c(e.offsetWidth,e.offsetHeight),n=window.getComputedStyle(e,null);return t.x-=parseInt(n.getPropertyValue("padding-left"),10),t.x-=parseInt(n.getPropertyValue("padding-right"),10),t.y-=parseInt(n.getPropertyValue("padding-top"),10),t.y-=parseInt(n.getPropertyValue("padding-bottom"),10),t},getEventPosition:function(e){var t=e.clientX,n=e.clientY;if(-1!==e.type.indexOf("touch")){if(!e.touches.length)return;t=e.touches[0].clientX,n=e.touches[0].clientY}return new c(t,n)},createTransparentPatternCanvas:function(){var e=document.createElement("canvas"),t=e.getContext("2d");return e.width=10,e.height=10,t.fillStyle="white",t.fillRect(0,0,e.width,e.height),t.fillStyle="#cccccc",t.fillRect(0,0,e.width/2,e.height/2),t.fillRect(e.width/2,e.height/2,e.width,e.height),e},supportsMSBlob:function(){return void 0!==document.createElement("canvas").msToBlob},translate:function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=this.fetch(e,t);if(!o){r.a.info("Utils#translate","Unable to translate `"+t+"`");var a=n(207)[t];return null!=a?(r.a.warn("Utils#translate","Trying to find localized string for old key: `"+a+"`. Please update your localization to use the new key as soon as possible. Support for the old, deprecated key will be dropped with the next major version update."),this.translate(e,a,i)):null}for(var s in i)o=o.replace("${"+s+"}",i[s]);return o},fetch:function(e,t,n){for(var i=(t=(t=t.replace(/\[(\w+)]/g,".$1")).replace(/^\./,"")).split("."),o=0;o<i.length;o++){if(!(e=e[i[o]]))break}return void 0!==e&&e},isMobile:function(){var e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))},select:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;n||(n=function(e){return e});var i=[];return t.forEach(function(t){e.forEach(function(e){n(e)===t&&i.push(e)})}),i},getJSONP:function(e){return new s.a(e).load()},cloneCategories:function(e,t){return e.map(function(e){return(e=l.clone(e))[t]=e[t].slice(0),e})},mergeCategories:function(e,t,n){e=this.cloneCategories(e,n);var i=null;return t.forEach(function(t){e.forEach(function(e){t.identifier===e.identifier&&(i=e)}),i?i[n]=i[n].concat(t[n]):e.push(t)}),e},getStyleObject:function(e){var t=window.getComputedStyle(e),n={};for(var i in t){var o=t.getPropertyValue(i),r=i.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()});""!==o&&(n[r]=o)}return n},styleElement:function(e,t){for(var n in t)e.style[n]=t[n]},debounce:function(e,t,n){var i;return function(){var o=this,r=arguments,a=n&&!i;clearTimeout(i),i=setTimeout(function(){i=null,n||e.apply(o,r)},t),a&&e.apply(this,r)}},getScrollbarWidth:function(){var e=document.createElement("div");e.style.visibility="hidden",e.style.width="100px",e.style.msOverflowStyle="scrollbar",document.body.appendChild(e);var t=e.offsetWidth;e.style.overflow="scroll";var n=document.createElement("div");n.style.width="100%",e.appendChild(n);var i=n.offsetWidth;return e.parentNode.removeChild(e),t-i},findIntegerFraction:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100,n=Number.MAX_VALUE,i=0,o=0,r=1,a=1,s=0;s<t;s++){var l=r/a-e;if(l<0)r++;else{if(!(l>0))return new c(r,a);a++}var u=Math.abs(r/a-e);u<n&&(n=u,i=r,o=a)}return new c(i,o)},toFixed:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2,n=e.toFixed(t);return parseFloat(n)},capitalize:function(e){return e.charAt(0).toUpperCase()+e.slice(1)},flipObject:function(e){var t={};for(var n in e)t[e[n]]=n;return t},Browser:a.a};t.a=u},function(e,t,n){n(33),n(174),e.exports=n(9).Array.from},function(e,t,n){"use strict";var i=n(24),o=n(12),r=n(31),a=n(98),s=n(99),l=n(61),c=n(175),u=n(68);o(o.S+o.F*!n(103)(function(e){Array.from(e)}),"Array",{from:function(e){var t,n,o,p,f=r(e),d="function"==typeof this?this:Array,h=arguments.length,m=h>1?arguments[1]:void 0,_=void 0!==m,g=0,y=u(f);if(_&&(m=i(m,h>2?arguments[2]:void 0,2)),void 0==y||d==Array&&s(y))for(n=new d(t=l(f.length));t>g;g++)c(n,g,_?m(f[g],g):f[g]);else for(p=y.call(f),n=new d;!(o=p.next()).done;g++)c(n,g,_?a(p,m,[o.value,g],!0):o.value);return n.length=g,n}})},function(e,t,n){"use strict";var i=n(16),o=n(28);e.exports=function(e,t,n){t in e?i.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){e.exports={default:n(177),__esModule:!0}},function(e,t,n){var i=n(9),o=i.JSON||(i.JSON={stringify:JSON.stringify});e.exports=function(e){return o.stringify.apply(o,arguments)}},function(e,t,n){"use strict";(function(e){var i=n(10),o=n.n(i),r=n(34),a=n.n(r),s=n(35),l=n.n(s),c=n(36),u=n.n(c),p=n(0),f=n.n(p),d=n(8),h=n.n(d),m=n(47),_=n.n(m),g=n(1),y=n.n(g),v=n(193),b=n(194),k=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},w="function"==typeof u.a&&"symbol"==typeof l.a?function(e){return typeof e}:function(e){return e&&"function"==typeof u.a&&e.constructor===u.a&&e!==u.a.prototype?"symbol":typeof e},x=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),f()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function S(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return a()(e)}var C=function(){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t)}return x(t,null,[{key:"isArray",value:function(e){return"[object Array]"===Object.prototype.toString.call(e)}},{key:"isPlainObject",value:function(e){if("object"!==(void 0===e?"undefined":w(e))||!e)return!1;if("function"==typeof y.a){var t=y()(e);return t===Object.prototype||null===t}return"[object Object]"===Object.prototype.toString.call(e)}},{key:"isMobile",value:function(){if("undefined"==typeof navigator)return!1;var e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od|ad)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}},{key:"isBrowser",value:function(){return"undefined"!=typeof window}},{key:"isNode",value:function(){return"undefined"==typeof window&&void 0!==e}},{key:"values",value:function(e){var t=[];for(var n in e)t.push(e[n]);return t}},{key:"isDOMElement",value:function(e){return"object"===("undefined"==typeof HTMLElement?"undefined":w(HTMLElement))?e instanceof HTMLElement:e&&"object"===(void 0===e?"undefined":w(e))&&null!==e&&1===e.nodeType&&"string"==typeof e.nodeName}},{key:"isTouchEvent",value:function(e){return-1!==e.type.indexOf("touch")}},{key:"resizeVectorToFit",value:function(e,t){var n=Math.min(t.x/e.x,t.y/e.y);return e.clone().multiply(n)}},{key:"resizeVectorToFill",value:function(e,t){var n=e.x/e.y;return n>t.x/t.y?t.clone().set(t.y*n,t.y):t.clone().set(t.x,t.x/n)}},{key:"isExtendable",value:function(e){return void 0!==e&&null!==e&&("object"===(void 0===e?"undefined":w(e))||"function"==typeof e)}},{key:"defaults",value:function(e){var t={};for(var n in e)t[n]=e[n];for(var i=arguments.length,o=Array(i>1?i-1:0),r=1;r<i;r++)o[r-1]=arguments[r];for(var a=0;a<o.length;a++){var s=o[a];for(var l in s)void 0===t[l]&&(t[l]=s[l])}return t}},{key:"deepMerge",value:function(e){for(var n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];return i.reduce(function e(n,i){if(void 0===i)return e(null,n);if(Array.isArray(i))return[].concat(S(i));if(!t.isPlainObject(i))return i;if(!t.isPlainObject(n))return k({},i);var o=k({},n);return _()(i).forEach(function(t){var r=i[t];void 0!==r&&(o[t]=e(n[t],r))}),o},e)}},{key:"deepDefaults",value:function(e){for(var n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];var r=[].concat(i).reverse();return t.deepMerge.apply(t,S(r).concat([e]))}},{key:"deepClone",value:function(e){var n={};for(var i in e)t.isExtendable(e[i])?n[i]=t.deepClone(e[i]):n[i]=e[i];return n}},{key:"getDeepProperty",value:function(e,t){if("string"==typeof t)return e[t];if(Array.isArray(t)){return t.reduce(function(e,t){return e?"function"==typeof t?function(e,t){var n=void 0;try{n=t(e)}catch(e){if(!(e instanceof TypeError))throw e}return n}(e,t):e[t]:null},e)}}},{key:"extend",value:function(e){var t={};for(var n in e)t[n]=e[n];for(var i=arguments.length,o=Array(i>1?i-1:0),r=1;r<i;r++)o[r-1]=arguments[r];for(var a=0;a<o.length;a++){var s=o[a];for(var l in s)t[l]=s[l]}return t}},{key:"clone",value:function(e){return this.extend({},e)}},{key:"createBlobURIFromDataURI",value:function(t){var n="undefined"==typeof window?e:window;if(!(n.Blob&&n.URL&&ArrayBuffer&&Uint8Array))return t;for(var i=v.a.decode(t.split(",")[1]),o=t.split(",")[0].split(":")[1].split(";")[0],r=new ArrayBuffer(i.length),a=new Uint8Array(r),s=0;s<i.length;s++)a[s]=i[s];var l=new n.Blob([r],{type:o});return n.URL.createObjectURL(l)}},{key:"getUUID",value:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}},{key:"createCanvas",value:function(){return document.createElement("canvas")}},{key:"convertHtmlImageToRGBACanvas",value:function(e){var n=t.createCanvas();return n.width=e.width,n.height=e.height,n.getContext("2d").drawImage(e,0,0,e.width,e.height),n}},{key:"isPowerOfTwo",value:function(e){return 0==(e.x&e.x-1)&&0==(e.y&e.y-1)}},{key:"nextLowestPOT",value:function(e){for(var t=1;t<32;t<<=1)e|=e>>t;return e-(e>>1)}},{key:"nextHighestPOT",value:function(e){e--;for(var t=1;t<32;t<<=1)e|=e>>t;return e+1}},{key:"moveArrayItem",value:function(e,t,n){if(n>=e.length)for(var i=n-e.length;1+i--;)e.push(void 0);e.splice(n,0,e.splice(t,1)[0])}},{key:"ensureCanvasDimensions",value:function(e,t){e.width===t.x&&e.height===t.y||(e.width=t.x,e.height=t.y)}},{key:"byteArrayToString",value:function(e){return e.map(function(e){return String.fromCharCode(e)}).join("")}},{key:"clamp",value:function(e,t,n){return Math.max(t,Math.min(e,n))}},{key:"wildCardMatch",value:function(e,t){return new RegExp("^"+t.split("*").join(".*")+"$").test(e)}},{key:"flipObject",value:function(e){var t={};for(var n in e)t[e[n]]=n;return t}},{key:"cloneOptions",value:function(e){var t={};for(var n in e){var i=e[n];Array.isArray(i)?i=i.slice():i.clone&&(i=i.clone()),t[n]=i}return t}},{key:"ISODateString",value:function(e){function t(e){return e<10?"0"+e:e}return e.getUTCFullYear()+"-"+t(e.getUTCMonth()+1)+"-"+t(e.getUTCDate())+"T"+t(e.getUTCHours())+":"+t(e.getUTCMinutes())+":"+t(e.getUTCSeconds())+"Z"}},{key:"getCrossOriginValue",value:function(e){return e?"none"!==e?e:void 0:"anonymous"}},{key:"shallowEqual",value:function(e,t){if(e===t)return!0;if("object"!==(void 0===e?"undefined":w(e))||null===e||"object"!==(void 0===t?"undefined":w(t))||null===t)return!1;var n=_()(e),i=_()(t);if(n.length!==i.length)return!1;for(var o=hasOwnProperty.bind(t),r=0;r<n.length;r++)if(!o(n[r])||e[n[r]]!==t[n[r]])return!1;return!0}},{key:"enableIf",value:function(e,t){return e?t:void 0}},{key:"invariant",value:function(e,t){if(!e)throw new Error(t)}},{key:"executePromises",value:function(e){var t=e.length,n=0,i=[],o=[];return new h.a(function(r,a){var s=function(){++n>=t&&(o.length<=0?r(i):a(o))},l=function(e){i.push(e),s()},c=function(e){o.push(e),s()};e.forEach(function(e){e.then(l).catch(c)})})}}]),t}();C.Array=b.a,t.a=C}).call(t,n(26))},function(e,t,n){n(180),e.exports=n(9).Object.assign},function(e,t,n){var i=n(12);i(i.S+i.F,"Object",{assign:n(181)})},function(e,t,n){"use strict";var i=n(30),o=n(71),r=n(40),a=n(31),s=n(85),l=Object.assign;e.exports=!l||n(25)(function(){var e={},t={},n=Symbol(),i="abcdefghijklmnopqrst";return e[n]=7,i.split("").forEach(function(e){t[e]=e}),7!=l({},e)[n]||Object.keys(l({},t)).join("")!=i})?function(e,t){for(var n=a(e),l=arguments.length,c=1,u=o.f,p=r.f;l>c;)for(var f,d=s(arguments[c++]),h=u?i(d).concat(u(d)):i(d),m=h.length,_=0;m>_;)p.call(d,f=h[_++])&&(n[f]=d[f]);return n}:l},function(e,t,n){n(33),n(45),e.exports=n(72).f("iterator")},function(e,t,n){n(184),n(95),n(189),n(190),e.exports=n(9).Symbol},function(e,t,n){"use strict";var i=n(13),o=n(21),r=n(18),a=n(12),s=n(97),l=n(185).KEY,c=n(25),u=n(64),p=n(44),f=n(41),d=n(11),h=n(72),m=n(73),_=n(186),g=n(187),y=n(14),v=n(17),b=n(20),k=n(57),w=n(28),x=n(60),S=n(188),C=n(58),E=n(16),T=n(30),O=C.f,R=E.f,I=S.f,D=i.Symbol,P=i.JSON,B=P&&P.stringify,A=d("_hidden"),F=d("toPrimitive"),j={}.propertyIsEnumerable,M=u("symbol-registry"),L=u("symbols"),N=u("op-symbols"),z=Object.prototype,U="function"==typeof D,V=i.QObject,W=!V||!V.prototype||!V.prototype.findChild,H=r&&c(function(){return 7!=x(R({},"a",{get:function(){return R(this,"a",{value:7}).a}})).a})?function(e,t,n){var i=O(z,t);i&&delete z[t],R(e,t,n),i&&e!==z&&R(z,t,i)}:R,q=function(e){var t=L[e]=x(D.prototype);return t._k=e,t},G=U&&"symbol"==typeof D.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof D},K=function(e,t,n){return e===z&&K(N,t,n),y(e),t=k(t,!0),y(n),o(L,t)?(n.enumerable?(o(e,A)&&e[A][t]&&(e[A][t]=!1),n=x(n,{enumerable:w(0,!1)})):(o(e,A)||R(e,A,w(1,{})),e[A][t]=!0),H(e,t,n)):R(e,t,n)},Z=function(e,t){y(e);for(var n,i=_(t=b(t)),o=0,r=i.length;r>o;)K(e,n=i[o++],t[n]);return e},Y=function(e){var t=j.call(this,e=k(e,!0));return!(this===z&&o(L,e)&&!o(N,e))&&(!(t||!o(this,e)||!o(L,e)||o(this,A)&&this[A][e])||t)},Q=function(e,t){if(e=b(e),t=k(t,!0),e!==z||!o(L,t)||o(N,t)){var n=O(e,t);return!n||!o(L,t)||o(e,A)&&e[A][t]||(n.enumerable=!0),n}},J=function(e){for(var t,n=I(b(e)),i=[],r=0;n.length>r;)o(L,t=n[r++])||t==A||t==l||i.push(t);return i},X=function(e){for(var t,n=e===z,i=I(n?N:b(e)),r=[],a=0;i.length>a;)!o(L,t=i[a++])||n&&!o(z,t)||r.push(L[t]);return r};U||(s((D=function(){if(this instanceof D)throw TypeError("Symbol is not a constructor!");var e=f(arguments.length>0?arguments[0]:void 0),t=function(n){this===z&&t.call(N,n),o(this,A)&&o(this[A],e)&&(this[A][e]=!1),H(this,e,w(1,n))};return r&&W&&H(z,e,{configurable:!0,set:t}),q(e)}).prototype,"toString",function(){return this._k}),C.f=Q,E.f=K,n(105).f=S.f=J,n(40).f=Y,n(71).f=X,r&&!n(43)&&s(z,"propertyIsEnumerable",Y,!0),h.f=function(e){return q(d(e))}),a(a.G+a.W+a.F*!U,{Symbol:D});for(var $="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;$.length>ee;)d($[ee++]);for(var te=T(d.store),ne=0;te.length>ne;)m(te[ne++]);a(a.S+a.F*!U,"Symbol",{for:function(e){return o(M,e+="")?M[e]:M[e]=D(e)},keyFor:function(e){if(!G(e))throw TypeError(e+" is not a symbol!");for(var t in M)if(M[t]===e)return t},useSetter:function(){W=!0},useSimple:function(){W=!1}}),a(a.S+a.F*!U,"Object",{create:function(e,t){return void 0===t?x(e):Z(x(e),t)},defineProperty:K,defineProperties:Z,getOwnPropertyDescriptor:Q,getOwnPropertyNames:J,getOwnPropertySymbols:X}),P&&a(a.S+a.F*(!U||c(function(){var e=D();return"[null]"!=B([e])||"{}"!=B({a:e})||"{}"!=B(Object(e))})),"JSON",{stringify:function(e){for(var t,n,i=[e],o=1;arguments.length>o;)i.push(arguments[o++]);if(n=t=i[1],(v(t)||void 0!==e)&&!G(e))return g(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!G(t))return t}),i[1]=t,B.apply(P,i)}}),D.prototype[F]||n(19)(D.prototype,F,D.prototype.valueOf),p(D,"Symbol"),p(Math,"Math",!0),p(i.JSON,"JSON",!0)},function(e,t,n){var i=n(41)("meta"),o=n(17),r=n(21),a=n(16).f,s=0,l=Object.isExtensible||function(){return!0},c=!n(25)(function(){return l(Object.preventExtensions({}))}),u=function(e){a(e,i,{value:{i:"O"+ ++s,w:{}}})},p=e.exports={KEY:i,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!r(e,i)){if(!l(e))return"F";if(!t)return"E";u(e)}return e[i].i},getWeak:function(e,t){if(!r(e,i)){if(!l(e))return!0;if(!t)return!1;u(e)}return e[i].w},onFreeze:function(e){return c&&p.NEED&&l(e)&&!r(e,i)&&u(e),e}}},function(e,t,n){var i=n(30),o=n(71),r=n(40);e.exports=function(e){var t=i(e),n=o.f;if(n)for(var a,s=n(e),l=r.f,c=0;s.length>c;)l.call(e,a=s[c++])&&t.push(a);return t}},function(e,t,n){var i=n(29);e.exports=Array.isArray||function(e){return"Array"==i(e)}},function(e,t,n){var i=n(20),o=n(105).f,r={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==r.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(i(e))}},function(e,t,n){n(73)("asyncIterator")},function(e,t,n){n(73)("observable")},function(e,t,n){n(192),e.exports=n(9).Object.keys},function(e,t,n){var i=n(31),o=n(30);n(66)("keys",function(){return function(e){return o(i(e))}})},function(e,t,n){"use strict";
/*
 * Extracted from MinifyJpeg (Copyright (c) 2014 Hiroaki Matoba, MIT License):
 * https://github.com/hMatoba/MinifyJpeg
 * @license
 */var i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o={encode:function(e){var t="",n=void 0,o=void 0,r=void 0,a=void 0,s=void 0,l=void 0,c=void 0,u=0;do{a=(n=e[u++])>>2,s=(3&n)<<4|(o=e[u++])>>4,l=(15&o)<<2|(r=e[u++])>>6,c=63&r,isNaN(o)?l=c=64:isNaN(r)&&(c=64),t=t+i.charAt(a)+i.charAt(s)+i.charAt(l)+i.charAt(c),n=o=r="",a=s=l=c=""}while(u<e.length);return t},decode:function(e){var t=void 0,n=void 0,o=void 0,r=void 0,a=void 0,s=void 0,l=0,c=[];if(/[^A-Za-z0-9+/=]/g.exec(e))throw new Error("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding.");e=e.replace(/[^A-Za-z0-9+/=]/g,"");do{t=i.indexOf(e.charAt(l++))<<2|(r=i.indexOf(e.charAt(l++)))>>4,n=(15&r)<<4|(a=i.indexOf(e.charAt(l++)))>>2,o=(3&a)<<6|(s=i.indexOf(e.charAt(l++))),c.push(t),64!==a&&c.push(n),64!==s&&c.push(o),t=n=o="",r=a=s=""}while(l<e.length);return c}};t.a=o},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"head",value:function(e){return e[0]}},{key:"tail",value:function(e){return e.slice(1)}},{key:"last",value:function(e){return e[e.length-1]}},{key:"init",value:function(e){return e.slice(0,e.length-1)}},{key:"remove",value:function(e,t){return e.filter(function(e,n,i){return!t(e,n,i)})}},{key:"findIndex",value:function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n;return-1}},{key:"find",value:function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return e[n]}},{key:"flatten",value:function(t){return t.reduce(function(t,n){return t.concat(Array.isArray(n)?e.flatten(n):n)},[])}},{key:"range",value:function(e,t){var n=[];if(t>e)for(var i=e;i<t;i++)n.push(i);return n}},{key:"repeat",value:function(e,t){for(var n=[],i=0;i<t;i++)n[i]=e;return n}},{key:"zip",value:function(e,t){for(var n=Math.min(e.length,t.length),i=[],o=0;o<n;o++)i[o]=[e[o],t[o]];return i}}]),e}();t.a=a},function(e,t,n){"use strict";t.a={getIEVersion:function(){var e=navigator,t=e.userAgent,n=e.appVersion;return-1!==n.indexOf("MSIE")?n.match(/MSIE\s+?([0-9]+)/i)[1]:-1!==t.indexOf("Trident")&&t.match(/rv:([0-9]+)/i)[1]},isIE10:function(){var e=this.getIEVersion();return!1!==e&&10===e},isIE11:function(){var e=this.getIEVersion();return!1!==e&&11===e},isIElte:function(e){var t=this.getIEVersion();return!1!==t&&t<=e}}},function(e,t,n){"use strict";(function(e){var i=n(35),o=n.n(i),r=n(36),a=n.n(r),s=n(8),l=n.n(s),c=n(0),u=n.n(c),p=n(197),f=n.n(p),d="function"==typeof a.a&&"symbol"==typeof o.a?function(e){return typeof e}:function(e){return e&&"function"==typeof a.a&&e.constructor===a.a&&e!==a.a.prototype?"symbol":typeof e},h=void 0===e?window:e,m=void 0!==l.a?l.a:function(){var e,t,n,i=Object.prototype.toString,o=void 0!==f.a?function(e){return f()(e)}:setTimeout;try{Object.defineProperty({},"x",{}),e=function(e,t,n,i){return u()(e,t,{value:n,writable:!0,configurable:!1!==i})}}catch(t){e=function(e,t,n){return e[t]=n,e}}function r(e,i){n.add(e,i),t||(t=o(n.drain))}function a(e){var t,n=void 0===e?"undefined":d(e);return null==e||"object"!=n&&"function"!=n||(t=e.then),"function"==typeof t&&t}function s(){for(var e=0;e<this.chain.length;e++)l(this,1===this.state?this.chain[e].success:this.chain[e].failure,this.chain[e]);this.chain.length=0}function l(e,t,n){var i,o;try{!1===t?n.reject(e.msg):(i=!0===t?e.msg:t.call(void 0,e.msg))===n.promise?n.reject(TypeError("Promise-chain cycle")):(o=a(i))?o.call(i,n.resolve,n.reject):n.resolve(i)}catch(e){n.reject(e)}}function c(e){var t=this;t.triggered||(t.triggered=!0,t.def&&(t=t.def),t.msg=e,t.state=2,t.chain.length>0&&r(s,t))}function p(e,t,n,i){for(var o=0;o<t.length;o++)!function(o){e.resolve(t[o]).then(function(e){n(o,e)},i)}(o)}function h(e){this.def=e,this.triggered=!1}function m(e){if("function"!=typeof e)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var t=new function(e){this.promise=e,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}(this);this.then=function(e,n){var i={success:"function"!=typeof e||e,failure:"function"==typeof n&&n};return i.promise=new this.constructor(function(e,t){if("function"!=typeof e||"function"!=typeof t)throw TypeError("Not a function");i.resolve=e,i.reject=t}),t.chain.push(i),0!==t.state&&r(s,t),i.promise},this.catch=function(e){return this.then(void 0,e)};try{e.call(void 0,function(e){(function e(t){var n,i=this;if(!i.triggered){i.triggered=!0,i.def&&(i=i.def);try{(n=a(t))?r(function(){var o=new h(i);try{n.call(t,function(){e.apply(o,arguments)},function(){c.apply(o,arguments)})}catch(e){c.call(o,e)}}):(i.msg=t,i.state=1,i.chain.length>0&&r(s,i))}catch(e){c.call(new h(i),e)}}}).call(t,e)},function(e){c.call(t,e)})}catch(e){c.call(t,e)}}n={add:function(e,t){y=new function(e,t){this.fn=e,this.self=t,this.next=void 0}(e,t),g?g.next=y:_=y,g=y,y=void 0},drain:function(){var e=_;for(_=g=t=void 0;e;)e.fn.call(e.self),e=e.next}};var _,g,y;var v=e({},"constructor",m,!1);return m.prototype=v,e(v,"__NPO__",0,!1),e(m,"resolve",function(e){return e&&"object"==(void 0===e?"undefined":d(e))&&1===e.__NPO__?e:new this(function(t,n){if("function"!=typeof t||"function"!=typeof n)throw TypeError("Not a function");t(e)})}),e(m,"reject",function(e){return new this(function(t,n){if("function"!=typeof t||"function"!=typeof n)throw TypeError("Not a function");n(e)})}),e(m,"all",function(e){var t=this;return"[object Array]"!=i.call(e)?t.reject(TypeError("Not an array")):0===e.length?t.resolve([]):new t(function(n,i){if("function"!=typeof n||"function"!=typeof i)throw TypeError("Not a function");var o=e.length,r=Array(o),a=0;p(t,e,function(e,t){r[e]=t,++a===o&&n(r)},i)})}),e(m,"race",function(e){var t=this;return"[object Array]"!=i.call(e)?t.reject(TypeError("Not an array")):new t(function(n,i){if("function"!=typeof n||"function"!=typeof i)throw TypeError("Not a function");p(t,e,function(e,t){n(t)},i)})}),m}();h.Promise=h.Promise||m,t.a=m}).call(t,n(26))},function(e,t,n){e.exports={default:n(198),__esModule:!0}},function(e,t,n){n(199),e.exports=n(9).setImmediate},function(e,t,n){var i=n(12),o=n(69);i(i.G+i.B,{setImmediate:o.set,clearImmediate:o.clear})},function(e,t,n){"use strict";var i=n(201),o=n(203);function r(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=v,t.resolve=function(e,t){return v(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?v(e,!1,!0).resolveObject(t):t},t.format=function(e){o.isString(e)&&(e=v(e));return e instanceof r?e.format():r.prototype.format.call(e)},t.Url=r;var a=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(c),p=["%","/","?",";","#"].concat(u),f=["/","?","#"],d=/^[+a-z0-9A-Z_-]{0,63}$/,h=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},_={javascript:!0,"javascript:":!0},g={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},y=n(204);function v(e,t,n){if(e&&o.isObject(e)&&e instanceof r)return e;var i=new r;return i.parse(e,t,n),i}r.prototype.parse=function(e,t,n){if(!o.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var r=e.indexOf("?"),s=-1!==r&&r<e.indexOf("#")?"?":"#",c=e.split(s);c[0]=c[0].replace(/\\/g,"/");var v=e=c.join(s);if(v=v.trim(),!n&&1===e.split("#").length){var b=l.exec(v);if(b)return this.path=v,this.href=v,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?y.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var k=a.exec(v);if(k){var w=(k=k[0]).toLowerCase();this.protocol=w,v=v.substr(k.length)}if(n||k||v.match(/^\/\/[^@\/]+@[^@\/]+/)){var x="//"===v.substr(0,2);!x||k&&_[k]||(v=v.substr(2),this.slashes=!0)}if(!_[k]&&(x||k&&!g[k])){for(var S,C,E=-1,T=0;T<f.length;T++){-1!==(O=v.indexOf(f[T]))&&(-1===E||O<E)&&(E=O)}-1!==(C=-1===E?v.lastIndexOf("@"):v.lastIndexOf("@",E))&&(S=v.slice(0,C),v=v.slice(C+1),this.auth=decodeURIComponent(S)),E=-1;for(T=0;T<p.length;T++){var O;-1!==(O=v.indexOf(p[T]))&&(-1===E||O<E)&&(E=O)}-1===E&&(E=v.length),this.host=v.slice(0,E),v=v.slice(E),this.parseHost(),this.hostname=this.hostname||"";var R="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!R)for(var I=this.hostname.split(/\./),D=(T=0,I.length);T<D;T++){var P=I[T];if(P&&!P.match(d)){for(var B="",A=0,F=P.length;A<F;A++)P.charCodeAt(A)>127?B+="x":B+=P[A];if(!B.match(d)){var j=I.slice(0,T),M=I.slice(T+1),L=P.match(h);L&&(j.push(L[1]),M.unshift(L[2])),M.length&&(v="/"+M.join(".")+v),this.hostname=j.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),R||(this.hostname=i.toASCII(this.hostname));var N=this.port?":"+this.port:"",z=this.hostname||"";this.host=z+N,this.href+=this.host,R&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==v[0]&&(v="/"+v))}if(!m[w])for(T=0,D=u.length;T<D;T++){var U=u[T];if(-1!==v.indexOf(U)){var V=encodeURIComponent(U);V===U&&(V=escape(U)),v=v.split(U).join(V)}}var W=v.indexOf("#");-1!==W&&(this.hash=v.substr(W),v=v.slice(0,W));var H=v.indexOf("?");if(-1!==H?(this.search=v.substr(H),this.query=v.substr(H+1),t&&(this.query=y.parse(this.query)),v=v.slice(0,H)):t&&(this.search="",this.query={}),v&&(this.pathname=v),g[w]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){N=this.pathname||"";var q=this.search||"";this.path=N+q}return this.href=this.format(),this},r.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",i=this.hash||"",r=!1,a="";this.host?r=e+this.host:this.hostname&&(r=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(r+=":"+this.port)),this.query&&o.isObject(this.query)&&Object.keys(this.query).length&&(a=y.stringify(this.query));var s=this.search||a&&"?"+a||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||g[t])&&!1!==r?(r="//"+(r||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):r||(r=""),i&&"#"!==i.charAt(0)&&(i="#"+i),s&&"?"!==s.charAt(0)&&(s="?"+s),t+r+(n=n.replace(/[?#]/g,function(e){return encodeURIComponent(e)}))+(s=s.replace("#","%23"))+i},r.prototype.resolve=function(e){return this.resolveObject(v(e,!1,!0)).format()},r.prototype.resolveObject=function(e){if(o.isString(e)){var t=new r;t.parse(e,!1,!0),e=t}for(var n=new r,i=Object.keys(this),a=0;a<i.length;a++){var s=i[a];n[s]=this[s]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var l=Object.keys(e),c=0;c<l.length;c++){var u=l[c];"protocol"!==u&&(n[u]=e[u])}return g[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!g[e.protocol]){for(var p=Object.keys(e),f=0;f<p.length;f++){var d=p[f];n[d]=e[d]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||_[e.protocol])n.pathname=e.pathname;else{for(var h=(e.pathname||"").split("/");h.length&&!(e.host=h.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==h[0]&&h.unshift(""),h.length<2&&h.unshift(""),n.pathname=h.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var m=n.pathname||"",y=n.search||"";n.path=m+y}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var v=n.pathname&&"/"===n.pathname.charAt(0),b=e.host||e.pathname&&"/"===e.pathname.charAt(0),k=b||v||n.host&&e.pathname,w=k,x=n.pathname&&n.pathname.split("/")||[],S=(h=e.pathname&&e.pathname.split("/")||[],n.protocol&&!g[n.protocol]);if(S&&(n.hostname="",n.port=null,n.host&&(""===x[0]?x[0]=n.host:x.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===h[0]?h[0]=e.host:h.unshift(e.host)),e.host=null),k=k&&(""===h[0]||""===x[0])),b)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,x=h;else if(h.length)x||(x=[]),x.pop(),x=x.concat(h),n.search=e.search,n.query=e.query;else if(!o.isNullOrUndefined(e.search)){if(S)n.hostname=n.host=x.shift(),(R=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=R.shift(),n.host=n.hostname=R.shift());return n.search=e.search,n.query=e.query,o.isNull(n.pathname)&&o.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!x.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var C=x.slice(-1)[0],E=(n.host||e.host||x.length>1)&&("."===C||".."===C)||""===C,T=0,O=x.length;O>=0;O--)"."===(C=x[O])?x.splice(O,1):".."===C?(x.splice(O,1),T++):T&&(x.splice(O,1),T--);if(!k&&!w)for(;T--;T)x.unshift("..");!k||""===x[0]||x[0]&&"/"===x[0].charAt(0)||x.unshift(""),E&&"/"!==x.join("/").substr(-1)&&x.push("");var R,I=""===x[0]||x[0]&&"/"===x[0].charAt(0);S&&(n.hostname=n.host=I?"":x.length?x.shift():"",(R=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=R.shift(),n.host=n.hostname=R.shift()));return(k=k||n.host&&x.length)&&!I&&x.unshift(""),x.length?n.pathname=x.join("/"):(n.pathname=null,n.path=null),o.isNull(n.pathname)&&o.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},r.prototype.parseHost=function(){var e=this.host,t=s.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,n){(function(e,i){var o;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(r){"object"==typeof t&&t&&t.nodeType,"object"==typeof e&&e&&e.nodeType;var a="object"==typeof i&&i;a.global!==a&&a.window!==a&&a.self;var s,l=2147483647,c=36,u=1,p=26,f=38,d=700,h=72,m=128,_="-",g=/^xn--/,y=/[^\x20-\x7E]/,v=/[\x2E\u3002\uFF0E\uFF61]/g,b={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},k=c-u,w=Math.floor,x=String.fromCharCode;function S(e){throw new RangeError(b[e])}function C(e,t){for(var n=e.length,i=[];n--;)i[n]=t(e[n]);return i}function E(e,t){var n=e.split("@"),i="";return n.length>1&&(i=n[0]+"@",e=n[1]),i+C((e=e.replace(v,".")).split("."),t).join(".")}function T(e){for(var t,n,i=[],o=0,r=e.length;o<r;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<r?56320==(64512&(n=e.charCodeAt(o++)))?i.push(((1023&t)<<10)+(1023&n)+65536):(i.push(t),o--):i.push(t);return i}function O(e){return C(e,function(e){var t="";return e>65535&&(t+=x((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=x(e)}).join("")}function R(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function I(e,t,n){var i=0;for(e=n?w(e/d):e>>1,e+=w(e/t);e>k*p>>1;i+=c)e=w(e/k);return w(i+(k+1)*e/(e+f))}function D(e){var t,n,i,o,r,a,s,f,d,g,y,v=[],b=e.length,k=0,x=m,C=h;for((n=e.lastIndexOf(_))<0&&(n=0),i=0;i<n;++i)e.charCodeAt(i)>=128&&S("not-basic"),v.push(e.charCodeAt(i));for(o=n>0?n+1:0;o<b;){for(r=k,a=1,s=c;o>=b&&S("invalid-input"),((f=(y=e.charCodeAt(o++))-48<10?y-22:y-65<26?y-65:y-97<26?y-97:c)>=c||f>w((l-k)/a))&&S("overflow"),k+=f*a,!(f<(d=s<=C?u:s>=C+p?p:s-C));s+=c)a>w(l/(g=c-d))&&S("overflow"),a*=g;C=I(k-r,t=v.length+1,0==r),w(k/t)>l-x&&S("overflow"),x+=w(k/t),k%=t,v.splice(k++,0,x)}return O(v)}function P(e){var t,n,i,o,r,a,s,f,d,g,y,v,b,k,C,E=[];for(v=(e=T(e)).length,t=m,n=0,r=h,a=0;a<v;++a)(y=e[a])<128&&E.push(x(y));for(i=o=E.length,o&&E.push(_);i<v;){for(s=l,a=0;a<v;++a)(y=e[a])>=t&&y<s&&(s=y);for(s-t>w((l-n)/(b=i+1))&&S("overflow"),n+=(s-t)*b,t=s,a=0;a<v;++a)if((y=e[a])<t&&++n>l&&S("overflow"),y==t){for(f=n,d=c;!(f<(g=d<=r?u:d>=r+p?p:d-r));d+=c)C=f-g,k=c-g,E.push(x(R(g+C%k,0))),f=w(C/k);E.push(x(R(f,0))),r=I(n,b,i==o),n=0,++i}++n,++t}return E.join("")}s={version:"1.4.1",ucs2:{decode:T,encode:O},decode:D,encode:P,toASCII:function(e){return E(e,function(e){return y.test(e)?"xn--"+P(e):e})},toUnicode:function(e){return E(e,function(e){return g.test(e)?D(e.slice(4).toLowerCase()):e})}},void 0===(o=function(){return s}.call(t,n,t,e))||(e.exports=o)}()}).call(t,n(202)(e),n(26))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,n){"use strict";t.decode=t.parse=n(205),t.encode=t.stringify=n(206)},function(e,t,n){"use strict";function i(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,r){t=t||"&",n=n||"=";var a={};if("string"!=typeof e||0===e.length)return a;var s=/\+/g;e=e.split(t);var l=1e3;r&&"number"==typeof r.maxKeys&&(l=r.maxKeys);var c=e.length;l>0&&c>l&&(c=l);for(var u=0;u<c;++u){var p,f,d,h,m=e[u].replace(s,"%20"),_=m.indexOf(n);_>=0?(p=m.substr(0,_),f=m.substr(_+1)):(p=m,f=""),d=decodeURIComponent(p),h=decodeURIComponent(f),i(a,d)?o(a[d])?a[d].push(h):a[d]=[a[d],h]:a[d]=h}return a};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";var i=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,s){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?r(a(e),function(a){var s=encodeURIComponent(i(a))+n;return o(e[a])?r(e[a],function(e){return s+encodeURIComponent(i(e))}).join(t):s+encodeURIComponent(i(e[a]))}).join(t):s?encodeURIComponent(i(s))+n+encodeURIComponent(i(e)):""};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function r(e,t){if(e.map)return e.map(t);for(var n=[],i=0;i<e.length;i++)n.push(t(e[i],i));return n}var a=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},function(e,t){e.exports={"pesdk.adjustments.button.reset":"editor.controls.adjustments.reset","pesdk.adjustments.text.brightness":"editor.controls.adjustments.items.brightness","pesdk.adjustments.text.clarity":"editor.controls.adjustments.items.clarity","pesdk.adjustments.text.contrast":"editor.controls.adjustments.items.contrast","pesdk.adjustments.text.exposure":"editor.controls.adjustments.items.exposure","pesdk.adjustments.text.gamma":"editor.controls.adjustments.items.gamma","pesdk.adjustments.text.highlights":"editor.controls.adjustments.items.highlights","pesdk.adjustments.text.saturation":"editor.controls.adjustments.items.saturation","pesdk.adjustments.text.shadows":"editor.controls.adjustments.items.shadows","pesdk.adjustments.title.basics":"editor.controls.adjustments.sections.basics","pesdk.adjustments.title.name":"editor.controls.adjustments.title","pesdk.adjustments.title.refinements":"editor.controls.adjustments.sections.refinements","pesdk.brush.title.hardness":"editor.controls.brush.hardness","pesdk.brush.title.name":"editor.controls.brush.title","pesdk.brush.title.settings":"editor.controls.brush.settings","pesdk.brush.title.width":"editor.controls.brush.width","pesdk.common.button.cancel":"editor.cancel","pesdk.common.text.loading":"loading.loading","pesdk.common.title.error":"errors.title","pesdk.editor.button.discardChangesWarningDiscard":"warnings.discardChanges.buttons.discard","pesdk.editor.button.discardChangesWarningKeep":"warnings.discardChanges.buttons.keep","pesdk.editor.button.export":"editor.export","pesdk.editor.button.newImageChangesLostWarningNo":"warnings.newImage_changesLost.buttons.no","pesdk.editor.button.newImageChangesLostWarningYes":"warnings.newImage_changesLost.buttons.yes","pesdk.editor.text.discardChangesWarning":"warnings.discardChanges.text","pesdk.editor.text.fontLoadingError":"errors.fontLoadingError.text","pesdk.editor.text.imageLoadingError":"errors.imageLoadingError.text","pesdk.editor.text.imageResizedWarning_maxDimensions":"warnings.imageResized_maxDimensions.text","pesdk.editor.text.imageResizedWarning_maxMegaPixels":"warnings.imageResized_maxMegaPixels.text","pesdk.editor.text.invalidFileTypeError":"errors.invalidFileType.text","pesdk.editor.text.loadingFonts":"loading.fonts","pesdk.editor.text.newImageChangesLostWarning":"warnings.newImage_changesLost.text","pesdk.editor.text.renderingError":"errors.renderingError.text","pesdk.editor.text.resizing":"loading.resizing","pesdk.editor.text.webcamUnavailableError":"errors.webcamUnavailable.text","pesdk.editor.title.discardChangesWarning":"warnings.discardChanges.title","pesdk.editor.title.fontLoadingError":"errors.fontLoadingError.title","pesdk.editor.title.imageResizedWarning_maxDimensions":"warnings.imageResized_maxDimensions.title","pesdk.editor.title.imageResizedWarning_maxMegaPixels":"warnings.imageResized_maxMegaPixels.title","pesdk.editor.title.newImageChangesLostWarning":"warnings.newImage_changesLost.title","pesdk.filter.asset.identity":"editor.controls.filter.filters.identity","pesdk.filter.asset.imgly_lut_ad1920":"editor.controls.filter.filters.imgly_lut_ad1920","pesdk.filter.asset.imgly_lut_ancient":"editor.controls.filter.filters.imgly_lut_ancient","pesdk.filter.asset.imgly_lut_bleached":"editor.controls.filter.filters.imgly_lut_bleached","pesdk.filter.asset.imgly_lut_bleachedblue":"editor.controls.filter.filters.imgly_lut_bleachedblue","pesdk.filter.asset.imgly_lut_blues":"editor.controls.filter.filters.imgly_lut_blues","pesdk.filter.asset.imgly_lut_blueshadows":"editor.controls.filter.filters.imgly_lut_blueshadows","pesdk.filter.asset.imgly_lut_breeze":"editor.controls.filter.filters.imgly_lut_breeze","pesdk.filter.asset.imgly_lut_bw":"editor.controls.filter.filters.imgly_lut_bw","pesdk.filter.asset.imgly_lut_celsius":"editor.controls.filter.filters.imgly_lut_celsius","pesdk.filter.asset.imgly_lut_chest":"editor.controls.filter.filters.imgly_lut_chest","pesdk.filter.asset.imgly_lut_classic":"editor.controls.filter.filters.imgly_lut_classic","pesdk.filter.asset.imgly_lut_colorful":"editor.controls.filter.filters.imgly_lut_colorful","pesdk.filter.asset.imgly_lut_cool":"editor.controls.filter.filters.imgly_lut_cool","pesdk.filter.asset.imgly_lut_cottoncandy":"editor.controls.filter.filters.imgly_lut_cottoncandy","pesdk.filter.asset.imgly_lut_creamy":"editor.controls.filter.filters.imgly_lut_creamy","pesdk.filter.asset.imgly_lut_eighties":"editor.controls.filter.filters.imgly_lut_eighties","pesdk.filter.asset.imgly_lut_elder":"editor.controls.filter.filters.imgly_lut_elder","pesdk.filter.asset.imgly_lut_evening":"editor.controls.filter.filters.imgly_lut_evening","pesdk.filter.asset.imgly_lut_fall":"editor.controls.filter.filters.imgly_lut_fall","pesdk.filter.asset.imgly_lut_fixie":"editor.controls.filter.filters.imgly_lut_fixie","pesdk.filter.asset.imgly_lut_food":"editor.controls.filter.filters.imgly_lut_food","pesdk.filter.asset.imgly_lut_fridge":"editor.controls.filter.filters.imgly_lut_fridge","pesdk.filter.asset.imgly_lut_front":"editor.controls.filter.filters.imgly_lut_front","pesdk.filter.asset.imgly_lut_glam":"editor.controls.filter.filters.imgly_lut_glam","pesdk.filter.asset.imgly_lut_gobblin":"editor.controls.filter.filters.imgly_lut_gobblin","pesdk.filter.asset.imgly_lut_highcarb":"editor.controls.filter.filters.imgly_lut_highcarb","pesdk.filter.asset.imgly_lut_highcontrast":"editor.controls.filter.filters.imgly_lut_highcontrast","pesdk.filter.asset.imgly_lut_k1":"editor.controls.filter.filters.imgly_lut_k1","pesdk.filter.asset.imgly_lut_k2":"editor.controls.filter.filters.imgly_lut_k2","pesdk.filter.asset.imgly_lut_k6":"editor.controls.filter.filters.imgly_lut_k6","pesdk.filter.asset.imgly_lut_kdynamic":"editor.controls.filter.filters.imgly_lut_kdynamic","pesdk.filter.asset.imgly_lut_keen":"editor.controls.filter.filters.imgly_lut_keen","pesdk.filter.asset.imgly_lut_lenin":"editor.controls.filter.filters.imgly_lut_lenin","pesdk.filter.asset.imgly_lut_litho":"editor.controls.filter.filters.imgly_lut_litho","pesdk.filter.asset.imgly_lut_lomo100":"editor.controls.filter.filters.imgly_lut_lomo100","pesdk.filter.asset.imgly_lut_lucid":"editor.controls.filter.filters.imgly_lut_lucid","pesdk.filter.asset.imgly_lut_mellow":"editor.controls.filter.filters.imgly_lut_mellow","pesdk.filter.asset.imgly_lut_neat":"editor.controls.filter.filters.imgly_lut_neat","pesdk.filter.asset.imgly_lut_nogreen":"editor.controls.filter.filters.imgly_lut_nogreen","pesdk.filter.asset.imgly_lut_orchid":"editor.controls.filter.filters.imgly_lut_orchid","pesdk.filter.asset.imgly_lut_pale":"editor.controls.filter.filters.imgly_lut_pale","pesdk.filter.asset.imgly_lut_pitched":"editor.controls.filter.filters.imgly_lut_pitched","pesdk.filter.asset.imgly_lut_plate":"editor.controls.filter.filters.imgly_lut_plate","pesdk.filter.asset.imgly_lut_pola669":"editor.controls.filter.filters.imgly_lut_pola669","pesdk.filter.asset.imgly_lut_polasx":"editor.controls.filter.filters.imgly_lut_polasx","pesdk.filter.asset.imgly_lut_pro400":"editor.controls.filter.filters.imgly_lut_pro400","pesdk.filter.asset.imgly_lut_quozi":"editor.controls.filter.filters.imgly_lut_quozi","pesdk.filter.asset.imgly_lut_sepiahigh":"editor.controls.filter.filters.imgly_lut_sepiahigh","pesdk.filter.asset.imgly_lut_settled":"editor.controls.filter.filters.imgly_lut_settled","pesdk.filter.asset.imgly_lut_seventies":"editor.controls.filter.filters.imgly_lut_seventies","pesdk.filter.asset.imgly_lut_sin":"editor.controls.filter.filters.imgly_lut_sin","pesdk.filter.asset.imgly_lut_soft":"editor.controls.filter.filters.imgly_lut_soft","pesdk.filter.asset.imgly_lut_steel":"editor.controls.filter.filters.imgly_lut_steel","pesdk.filter.asset.imgly_lut_summer":"editor.controls.filter.filters.imgly_lut_summer","pesdk.filter.asset.imgly_lut_sunset":"editor.controls.filter.filters.imgly_lut_sunset","pesdk.filter.asset.imgly_lut_tender":"editor.controls.filter.filters.imgly_lut_tender","pesdk.filter.asset.imgly_lut_texas":"editor.controls.filter.filters.imgly_lut_texas","pesdk.filter.asset.imgly_lut_twilight":"editor.controls.filter.filters.imgly_lut_twilight","pesdk.filter.asset.imgly_lut_winter":"editor.controls.filter.filters.imgly_lut_winter","pesdk.filter.asset.imgly_lut_x400":"editor.controls.filter.filters.imgly_lut_x400","pesdk.filter.title.name":"editor.controls.filter.title","pesdk.focus.button.gaussian":"editor.controls.focus.items.gaussian","pesdk.focus.button.linear":"editor.controls.focus.items.linear","pesdk.focus.button.mirrored":"editor.controls.focus.items.mirrored","pesdk.focus.button.none":"editor.controls.focus.items.none","pesdk.focus.button.radial":"editor.controls.focus.items.radial","pesdk.focus.title.name":"editor.controls.focus.title","pesdk.frame.asset.imgly_frame_art_decor":"editor.controls.frame.frames.imgly_frame_art_decor","pesdk.frame.asset.imgly_frame_black_passepartout":"editor.controls.frame.frames.imgly_frame_black_passepartout","pesdk.frame.asset.imgly_frame_dia":"editor.controls.frame.frames.imgly_frame_dia","pesdk.frame.asset.imgly_frame_lowpoly_shadow":"editor.controls.frame.frames.imgly_frame_lowpoly_shadow","pesdk.frame.asset.imgly_frame_wood_passepartout":"editor.controls.frame.frames.imgly_frame_wood_passepartout","pesdk.frame.button.fill":"editor.controls.frame.fill","pesdk.frame.button.replace":"editor.controls.frame.replace","pesdk.frame.title.name":"editor.controls.frame.title","pesdk.frame.title.opacity":"editor.controls.frame.opacity","pesdk.frame.title.width":"editor.controls.frame.width","pesdk.library.button.fileDropZone":"editor.controls.library.fileDropZone","pesdk.library.button.fileDropZoneHovered":"editor.controls.library.fileDropZoneHovered","pesdk.library.placeholder.search":"editor.controls.library.search","pesdk.library.text.noResults":"editor.controls.library.noResults","pesdk.library.title.name":"editor.controls.library.title","pesdk.overlay.asset.imgly_overlay_bokeh":"editor.controls.overlay.overlays.imgly_overlay_bokeh","pesdk.overlay.asset.imgly_overlay_chop":"editor.controls.overlay.overlays.imgly_overlay_chop","pesdk.overlay.asset.imgly_overlay_clouds":"editor.controls.overlay.overlays.imgly_overlay_clouds","pesdk.overlay.asset.imgly_overlay_golden":"editor.controls.overlay.overlays.imgly_overlay_golden","pesdk.overlay.asset.imgly_overlay_grain":"editor.controls.overlay.overlays.imgly_overlay_grain","pesdk.overlay.asset.imgly_overlay_hearts":"editor.controls.overlay.overlays.imgly_overlay_hearts","pesdk.overlay.asset.imgly_overlay_lightleak1":"editor.controls.overlay.overlays.imgly_overlay_lightleak1","pesdk.overlay.asset.imgly_overlay_lightleak2":"editor.controls.overlay.overlays.imgly_overlay_lightleak2","pesdk.overlay.asset.imgly_overlay_metal":"editor.controls.overlay.overlays.imgly_overlay_metal","pesdk.overlay.asset.imgly_overlay_mosaic":"editor.controls.overlay.overlays.imgly_overlay_mosaic","pesdk.overlay.asset.imgly_overlay_painting":"editor.controls.overlay.overlays.imgly_overlay_painting","pesdk.overlay.asset.imgly_overlay_paper":"editor.controls.overlay.overlays.imgly_overlay_paper","pesdk.overlay.asset.imgly_overlay_rain":"editor.controls.overlay.overlays.imgly_overlay_rain","pesdk.overlay.asset.imgly_overlay_vintage":"editor.controls.overlay.overlays.imgly_overlay_vintage","pesdk.overlay.asset.imgly_overlay_wall1":"editor.controls.overlay.overlays.imgly_overlay_wall1","pesdk.overlay.asset.imgly_overlay_wall2":"editor.controls.overlay.overlays.imgly_overlay_wall2","pesdk.overlay.asset.imgly_overlay_wood":"editor.controls.overlay.overlays.imgly_overlay_wood","pesdk.overlay.button.none":"editor.controls.overlay.overlays.none","pesdk.overlay.title.blending":"editor.controls.overlay.blendModes.blending","pesdk.overlay.title.colorBurn":"editor.controls.overlay.blendModes.colorBurn","pesdk.overlay.title.darken":"editor.controls.overlay.blendModes.darken","pesdk.overlay.title.hardLight":"editor.controls.overlay.blendModes.hardLight","pesdk.overlay.title.lighten":"editor.controls.overlay.blendModes.lighten","pesdk.overlay.title.multiply":"editor.controls.overlay.blendModes.multiply","pesdk.overlay.title.name":"editor.controls.overlay.title","pesdk.overlay.title.none":"editor.controls.overlay.blendModes.none","pesdk.overlay.title.normal":"editor.controls.overlay.blendModes.normal","pesdk.overlay.title.overlay":"editor.controls.overlay.blendModes.overlay","pesdk.overlay.title.screen":"editor.controls.overlay.blendModes.screen","pesdk.overlay.title.softLight":"editor.controls.overlay.blendModes.softLight","pesdk.sticker.asset.imgly_sticker_emoticons":"editor.controls.sticker.stickerCategories.imgly_sticker_emoticons","pesdk.sticker.asset.imgly_sticker_emoticons_alien":"editor.controls.sticker.stickers.imgly_sticker_emoticons_alien","pesdk.sticker.asset.imgly_sticker_emoticons_angel":"editor.controls.sticker.stickers.imgly_sticker_emoticons_angel","pesdk.sticker.asset.imgly_sticker_emoticons_angry":"editor.controls.sticker.stickers.imgly_sticker_emoticons_angry","pesdk.sticker.asset.imgly_sticker_emoticons_anxious":"editor.controls.sticker.stickers.imgly_sticker_emoticons_anxious","pesdk.sticker.asset.imgly_sticker_emoticons_asleep":"editor.controls.sticker.stickers.imgly_sticker_emoticons_asleep","pesdk.sticker.asset.imgly_sticker_emoticons_attention":"editor.controls.sticker.stickers.imgly_sticker_emoticons_attention","pesdk.sticker.asset.imgly_sticker_emoticons_baby_chicken":"editor.controls.sticker.stickers.imgly_sticker_emoticons_baby_chicken","pesdk.sticker.asset.imgly_sticker_emoticons_batman":"editor.controls.sticker.stickers.imgly_sticker_emoticons_batman","pesdk.sticker.asset.imgly_sticker_emoticons_beer":"editor.controls.sticker.stickers.imgly_sticker_emoticons_beer","pesdk.sticker.asset.imgly_sticker_emoticons_black":"editor.controls.sticker.stickers.imgly_sticker_emoticons_black","pesdk.sticker.asset.imgly_sticker_emoticons_blue":"editor.controls.sticker.stickers.imgly_sticker_emoticons_blue","pesdk.sticker.asset.imgly_sticker_emoticons_blush":"editor.controls.sticker.stickers.imgly_sticker_emoticons_blush","pesdk.sticker.asset.imgly_sticker_emoticons_boxer":"editor.controls.sticker.stickers.imgly_sticker_emoticons_boxer","pesdk.sticker.asset.imgly_sticker_emoticons_business":"editor.controls.sticker.stickers.imgly_sticker_emoticons_business","pesdk.sticker.asset.imgly_sticker_emoticons_chicken":"editor.controls.sticker.stickers.imgly_sticker_emoticons_chicken","pesdk.sticker.asset.imgly_sticker_emoticons_cool":"editor.controls.sticker.stickers.imgly_sticker_emoticons_cool","pesdk.sticker.asset.imgly_sticker_emoticons_cry":"editor.controls.sticker.stickers.imgly_sticker_emoticons_cry","pesdk.sticker.asset.imgly_sticker_emoticons_deceased":"editor.controls.sticker.stickers.imgly_sticker_emoticons_deceased","pesdk.sticker.asset.imgly_sticker_emoticons_devil":"editor.controls.sticker.stickers.imgly_sticker_emoticons_devil","pesdk.sticker.asset.imgly_sticker_emoticons_duckface":"editor.controls.sticker.stickers.imgly_sticker_emoticons_duckface","pesdk.sticker.asset.imgly_sticker_emoticons_furious":"editor.controls.sticker.stickers.imgly_sticker_emoticons_furious","pesdk.sticker.asset.imgly_sticker_emoticons_grin":"editor.controls.sticker.stickers.imgly_sticker_emoticons_grin","pesdk.sticker.asset.imgly_sticker_emoticons_guitar":"editor.controls.sticker.stickers.imgly_sticker_emoticons_guitar","pesdk.sticker.asset.imgly_sticker_emoticons_harry_potter":"editor.controls.sticker.stickers.imgly_sticker_emoticons_harry_potter","pesdk.sticker.asset.imgly_sticker_emoticons_hippie":"editor.controls.sticker.stickers.imgly_sticker_emoticons_hippie","pesdk.sticker.asset.imgly_sticker_emoticons_hitman":"editor.controls.sticker.stickers.imgly_sticker_emoticons_hitman","pesdk.sticker.asset.imgly_sticker_emoticons_humourous":"editor.controls.sticker.stickers.imgly_sticker_emoticons_humourous","pesdk.sticker.asset.imgly_sticker_emoticons_idea":"editor.controls.sticker.stickers.imgly_sticker_emoticons_idea","pesdk.sticker.asset.imgly_sticker_emoticons_impatient":"editor.controls.sticker.stickers.imgly_sticker_emoticons_impatient","pesdk.sticker.asset.imgly_sticker_emoticons_kiss":"editor.controls.sticker.stickers.imgly_sticker_emoticons_kiss","pesdk.sticker.asset.imgly_sticker_emoticons_kisses":"editor.controls.sticker.stickers.imgly_sticker_emoticons_kisses","pesdk.sticker.asset.imgly_sticker_emoticons_laugh":"editor.controls.sticker.stickers.imgly_sticker_emoticons_laugh","pesdk.sticker.asset.imgly_sticker_emoticons_loud_cry":"editor.controls.sticker.stickers.imgly_sticker_emoticons_loud_cry","pesdk.sticker.asset.imgly_sticker_emoticons_loving":"editor.controls.sticker.stickers.imgly_sticker_emoticons_loving","pesdk.sticker.asset.imgly_sticker_emoticons_masked":"editor.controls.sticker.stickers.imgly_sticker_emoticons_masked","pesdk.sticker.asset.imgly_sticker_emoticons_music":"editor.controls.sticker.stickers.imgly_sticker_emoticons_music","pesdk.sticker.asset.imgly_sticker_emoticons_nerd":"editor.controls.sticker.stickers.imgly_sticker_emoticons_nerd","pesdk.sticker.asset.imgly_sticker_emoticons_ninja":"editor.controls.sticker.stickers.imgly_sticker_emoticons_ninja","pesdk.sticker.asset.imgly_sticker_emoticons_not_speaking_to_you":"editor.controls.sticker.stickers.imgly_sticker_emoticons_not_speaking_to_you","pesdk.sticker.asset.imgly_sticker_emoticons_pig":"editor.controls.sticker.stickers.imgly_sticker_emoticons_pig","pesdk.sticker.asset.imgly_sticker_emoticons_pumpkin":"editor.controls.sticker.stickers.imgly_sticker_emoticons_pumpkin","pesdk.sticker.asset.imgly_sticker_emoticons_question":"editor.controls.sticker.stickers.imgly_sticker_emoticons_question","pesdk.sticker.asset.imgly_sticker_emoticons_rabbit":"editor.controls.sticker.stickers.imgly_sticker_emoticons_rabbit","pesdk.sticker.asset.imgly_sticker_emoticons_sad":"editor.controls.sticker.stickers.imgly_sticker_emoticons_sad","pesdk.sticker.asset.imgly_sticker_emoticons_sick":"editor.controls.sticker.stickers.imgly_sticker_emoticons_sick","pesdk.sticker.asset.imgly_sticker_emoticons_skateboard":"editor.controls.sticker.stickers.imgly_sticker_emoticons_skateboard","pesdk.sticker.asset.imgly_sticker_emoticons_skull":"editor.controls.sticker.stickers.imgly_sticker_emoticons_skull","pesdk.sticker.asset.imgly_sticker_emoticons_sleepy":"editor.controls.sticker.stickers.imgly_sticker_emoticons_sleepy","pesdk.sticker.asset.imgly_sticker_emoticons_smile":"editor.controls.sticker.stickers.imgly_sticker_emoticons_smile","pesdk.sticker.asset.imgly_sticker_emoticons_smoking":"editor.controls.sticker.stickers.imgly_sticker_emoticons_smoking","pesdk.sticker.asset.imgly_sticker_emoticons_sobbing":"editor.controls.sticker.stickers.imgly_sticker_emoticons_sobbing","pesdk.sticker.asset.imgly_sticker_emoticons_star":"editor.controls.sticker.stickers.imgly_sticker_emoticons_star","pesdk.sticker.asset.imgly_sticker_emoticons_steaming_furious":"editor.controls.sticker.stickers.imgly_sticker_emoticons_steaming_furious","pesdk.sticker.asset.imgly_sticker_emoticons_sunbathing":"editor.controls.sticker.stickers.imgly_sticker_emoticons_sunbathing","pesdk.sticker.asset.imgly_sticker_emoticons_tired":"editor.controls.sticker.stickers.imgly_sticker_emoticons_tired","pesdk.sticker.asset.imgly_sticker_emoticons_tongue_out_wink":"editor.controls.sticker.stickers.imgly_sticker_emoticons_tongue_out_wink","pesdk.sticker.asset.imgly_sticker_emoticons_wave":"editor.controls.sticker.stickers.imgly_sticker_emoticons_wave","pesdk.sticker.asset.imgly_sticker_emoticons_wide_grin":"editor.controls.sticker.stickers.imgly_sticker_emoticons_wide_grin","pesdk.sticker.asset.imgly_sticker_emoticons_wink":"editor.controls.sticker.stickers.imgly_sticker_emoticons_wink","pesdk.sticker.asset.imgly_sticker_emoticons_wrestler":"editor.controls.sticker.stickers.imgly_sticker_emoticons_wrestler","pesdk.sticker.asset.imgly_sticker_shapes":"editor.controls.sticker.stickerCategories.imgly_sticker_shapes","pesdk.sticker.asset.imgly_sticker_shapes_arrow_02":"editor.controls.sticker.stickers.imgly_sticker_shapes_arrow_02","pesdk.sticker.asset.imgly_sticker_shapes_arrow_03":"editor.controls.sticker.stickers.imgly_sticker_shapes_arrow_03","pesdk.sticker.asset.imgly_sticker_shapes_badge_01":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_01","pesdk.sticker.asset.imgly_sticker_shapes_badge_04":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_04","pesdk.sticker.asset.imgly_sticker_shapes_badge_06":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_06","pesdk.sticker.asset.imgly_sticker_shapes_badge_08":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_08","pesdk.sticker.asset.imgly_sticker_shapes_badge_11":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_11","pesdk.sticker.asset.imgly_sticker_shapes_badge_12":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_12","pesdk.sticker.asset.imgly_sticker_shapes_badge_13":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_13","pesdk.sticker.asset.imgly_sticker_shapes_badge_15":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_15","pesdk.sticker.asset.imgly_sticker_shapes_badge_18":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_18","pesdk.sticker.asset.imgly_sticker_shapes_badge_19":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_19","pesdk.sticker.asset.imgly_sticker_shapes_badge_20":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_20","pesdk.sticker.asset.imgly_sticker_shapes_badge_28":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_28","pesdk.sticker.asset.imgly_sticker_shapes_badge_32":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_32","pesdk.sticker.asset.imgly_sticker_shapes_badge_35":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_35","pesdk.sticker.asset.imgly_sticker_shapes_badge_36":"editor.controls.sticker.stickers.imgly_sticker_shapes_badge_36","pesdk.sticker.asset.imgly_sticker_shapes_spray_01":"editor.controls.sticker.stickers.imgly_sticker_shapes_spray_01","pesdk.sticker.asset.imgly_sticker_shapes_spray_03":"editor.controls.sticker.stickers.imgly_sticker_shapes_spray_03","pesdk.sticker.asset.imgly_sticker_shapes_spray_04":"editor.controls.sticker.stickers.imgly_sticker_shapes_spray_04","pesdk.sticker.button.fill":"editor.controls.sticker.fill","pesdk.sticker.button.new":"editor.controls.sticker.new","pesdk.sticker.button.replace":"editor.controls.sticker.replace","pesdk.sticker.text.stickerLoadingError":"errors.stickerLoadingError.text","pesdk.sticker.title.name":"editor.controls.sticker.title","pesdk.sticker.title.opacity":"editor.controls.sticker.opacity","pesdk.text.button.new":"editor.controls.text.new","pesdk.text.placeholder.defaultText":"editor.controls.text.defaultText","pesdk.text.title.background":"editor.controls.text.background","pesdk.text.title.font":"editor.controls.text.font","pesdk.text.title.line":"editor.controls.text.line","pesdk.text.title.name":"editor.controls.text.title","pesdk.text.title.size":"editor.controls.text.size","pesdk.text.title.spacing":"editor.controls.text.spacing","pesdk.textdesign.title.name":"editor.controls.textdesign.title","pesdk.transform.asset.imgly_transforms_common.imgly_transform_common_16-9":"editor.controls.transform.ratios.imgly_transforms_common.imgly_transform_common_16-9","pesdk.transform.asset.imgly_transforms_common.imgly_transform_common_4-3":"editor.controls.transform.ratios.imgly_transforms_common.imgly_transform_common_4-3","pesdk.transform.asset.imgly_transforms_common.imgly_transform_common_custom":"editor.controls.transform.ratios.imgly_transforms_common.imgly_transform_common_custom","pesdk.transform.asset.imgly_transforms_common.imgly_transform_common_square":"editor.controls.transform.ratios.imgly_transforms_common.imgly_transform_common_square","pesdk.transform.asset.imgly_transforms_common.name":"editor.controls.transform.ratios.imgly_transforms_common.name","pesdk.transform.asset.imgly_transforms_facebook.imgly_transform_facebook_ad":"editor.controls.transforms.ratios.imgly_transforms_facebook.imgly_transform_facebook_ad","pesdk.transform.asset.imgly_transforms_facebook.imgly_transform_facebook_cover":"editor.controls.transforms.ratios.imgly_transforms_facebook.imgly_transform_facebook_cover","pesdk.transform.asset.imgly_transforms_facebook.imgly_transform_facebook_post":"editor.controls.transforms.ratios.imgly_transforms_facebook.imgly_transform_facebook_post","pesdk.transform.asset.imgly_transforms_facebook.imgly_transform_facebook_profile":"editor.controls.transforms.ratios.imgly_transforms_facebook.imgly_transform_facebook_profile","pesdk.transform.asset.imgly_transforms_facebook.name":"editor.controls.transform.ratios.imgly_transforms_facebook.name","pesdk.transform.button.reset":"editor.controls.transform.reset","pesdk.transform.placeholder.height":"editor.controls.transform.dimensions.height","pesdk.transform.placeholder.width":"editor.controls.transform.dimensions.width","pesdk.transform.title.name":"editor.controls.transform.title"}},function(e,t,n){"use strict";var i=n(209),o=n(210);t.a={EVENTS:i.a,DEFAULTS:o.a}},function(e,t,n){"use strict";t.a={EXPORT:"export",CLOSE:"close",OPERATION_CREATED:"operation:created",OPERATION_UPDATED:"operation:updated",OPERATION_REMOVED:"operation:removed",WINDOW_RESIZE:"window:resize",EDITOR_RESIZE:"editor:resize",ZOOM:"editor:zoom",ZOOM_CHANGED:"editor:zoom_changed",ZOOM_DONE:"editor:zoom_done",HISTORY_UNDO:"history:undo",HISTORY_UPDATED:"history:updated",HISTORY_BEFORE_UNDO:"history:before-undo",HISTORY_REDO:"history:redo",HISTORY_BEFORE_REDO:"history:before-redo",FEATURES_DISABLED:"editor:features:disabled",FEATURES_ENABLED:"editor:features:enabled",FEATURES_UPDATED:"editor:features:updated",EDITOR_READY:"editor:ready",TEXT_SCALED:"editor:text:scaled",TRANSFORM_RESIZE:"transform:resize",TRANSFORM_REAPPLY_RATIO:"transform:reapply-ratio",ADDED_STICKER:"sticker:added-sticker"}},function(e,t,n){"use strict";var i=n(7),o=n.n(i),r=n(211),a=n(212),s=n(213),l=[];void 0!==o.a.Operations.SpriteOperation&&l.push(o.a.Operations.SpriteOperation.BrushSprite.Brushes.RadialBrush),t.a={TRANSFORM_RATIO_CATEGORIES:s.a,FONTS:r.a,TEXT_DESIGN_FONTS:a.a,BRUSHES:l}},function(e,t,n){"use strict";t.a=[{fontFamily:"Aleo",variations:[{identifier:"imgly_font_aleo_bold",fontWeight:"bold",provider:"file",filePath:"fonts/imgly_font_aleo_bold.woff",textMetrics:{unitsPerEm:2048,ascender:1919,descender:-409}}]},{fontFamily:"Amatic SC",variations:[{identifier:"imgly_font_amaticsc",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_amaticsc.woff",textMetrics:{unitsPerEm:2048,ascender:2332,descender:-583}}]},{fontFamily:"Bernier",variations:[{identifier:"imgly_font_bernier_regular",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_bernier_regular.woff",textMetrics:{unitsPerEm:2048,ascender:2007,descender:-552}}]},{fontFamily:"Cheque",variations:[{identifier:"imgly_font_cheque_regular",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_cheque_regular.woff",textMetrics:{unitsPerEm:2048,ascender:1853,descender:-495}}]},{fontFamily:"Open Sans",variations:[{identifier:"imgly_font_open_sans_bold",fontWeight:"bold",provider:"file",filePath:"fonts/imgly_font_open_sans_bold.woff",default:!0,textMetrics:{unitsPerEm:2048,ascender:2189,descender:-640}}]},{fontFamily:"Gagalin",variations:[{identifier:"imgly_font_gagalin_regular",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_gagalin_regular.woff",textMetrics:{unitsPerEm:2048,ascender:1987,descender:-628}}]},{fontFamily:"Hagin",variations:[{identifier:"imgly_font_hagin_caps_thin",fontWeight:200,provider:"file",filePath:"fonts/imgly_font_hagin_caps_thin.woff",textMetrics:{unitsPerEm:2048,ascender:1964,descender:-482}}]},{fontFamily:"Intro",variations:[{identifier:"imgly_font_intro_inline",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_intro_inline.woff",textMetrics:{unitsPerEm:2048,ascender:1944,descender:-548}}]},{fontFamily:"Lobster",variations:[{identifier:"imgly_font_lobster",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_lobster.woff",textMetrics:{unitsPerEm:2048,ascender:2048,descender:-552}}]},{fontFamily:"Nexa",variations:[{identifier:"imgly_font_nexa_script",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_nexa_script.woff",textMetrics:{unitsPerEm:2048,ascender:1835,descender:-663}}]},{fontFamily:"Ostrich",variations:[{identifier:"imgly_font_ostrich_sans_black",fontWeight:800,provider:"file",filePath:"fonts/imgly_font_ostrich_sans_black.woff",textMetrics:{unitsPerEm:2048,ascender:1513,descender:-235}},{identifier:"imgly_font_ostrich_sans_bold",fontWeight:"bold",provider:"file",filePath:"fonts/imgly_font_ostrich_sans_bold.woff",textMetrics:{unitsPerEm:2048,ascender:1513,descender:-235}}]},{fontFamily:"Panton",variations:[{identifier:"imgly_font_panton_black_italic_caps",fontWeight:800,fontStyle:"italic",provider:"file",filePath:"fonts/imgly_font_panton_blackitalic_caps.woff",textMetrics:{unitsPerEm:2048,ascender:2033,descender:-572}},{identifier:"imgly_font_panton_light_italic_caps",fontWeight:200,fontStyle:"italic",provider:"file",filePath:"fonts/imgly_font_panton_lightitalic_caps.woff",textMetrics:{unitsPerEm:2048,ascender:1961,descender:-556}}]},{fontFamily:"Perfograma",variations:[{identifier:"imgly_font_perfograma",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_perfograma.woff",textMetrics:{unitsPerEm:2048,ascender:1982,descender:-842}}]},{fontFamily:"Trashhand",variations:[{identifier:"imgly_font_trash_hand",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_trash_hand.woff",textMetrics:{unitsPerEm:2048,ascender:1554,descender:-663}}]}]},function(e,t,n){"use strict";t.a=[{fontFamily:"Open Sans",variations:[{identifier:"imgly_font_open_sans_bold",fontWeight:"bold",provider:"file",filePath:"fonts/imgly_font_open_sans_bold.woff",default:!0,textMetrics:{unitsPerEm:2048,ascender:2189,descender:-640}}]},{fontFamily:"Gagalin",variations:[{identifier:"imgly_font_gagalin_regular",fontWeight:"normal",provider:"file",filePath:"fonts/imgly_font_gagalin_regular.woff",textMetrics:{unitsPerEm:2048,ascender:1987,descender:-628}}]},{fontFamily:"Abril Fatface",variations:[{identifier:"imgly_font_abril_fatface_regular",fontWeight:"normal",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_abril_fatface_regular.woff",textMetrics:{unitsPerEm:1e3,ascender:1058,descender:-291}}]},{fontFamily:"Montserrat Light",variations:[{identifier:"imgly_font_montserrat_light",fontWeight:"normal",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_montserrat_light.woff",textMetrics:{unitsPerEm:1e3,ascender:968,descender:-251}}]},{fontFamily:"Hello Sunshine",variations:[{identifier:"imgly_font_hello_sunshine",fontWeight:"normal",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_hello_sunshine.woff",textMetrics:{unitsPerEm:1e3,ascender:750,descender:-250}},{identifier:"imgly_font_hello_sunshine_italic",fontWeight:"normal",fontStyle:"italic",provider:"file",filePath:"text-design/fonts/imgly_font_hello_sunshine_italic.woff",textMetrics:{unitsPerEm:1e3,ascender:750,descender:-250}}]},{fontFamily:"Hello Sunshine Marker",variations:[{identifier:"imgly_font_hello_sunshine_marker",fontWeight:"normal",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_hello_sunshine_marker.woff",textMetrics:{unitsPerEm:1e3,ascender:750,descender:-250}}]},{fontFamily:"Panton Caps",variations:[{identifier:"imgly_font_panton_light_italic_caps",fontWeight:"lighter",fontStyle:"italic",provider:"file",filePath:"text-design/fonts/imgly_font_panton_light_italic_caps.woff",default:!0,textMetrics:{unitsPerEm:1e3,ascender:940,descender:-260}},{identifier:"imgly_font_panton_black_italic_caps",fontWeight:800,fontStyle:"italic",provider:"file",filePath:"text-design/fonts/imgly_font_panton_black_italic_caps.woff",default:!0,textMetrics:{unitsPerEm:1e3,ascender:940,descender:-260}},{identifier:"imgly_font_panton_light_caps",fontWeight:"lighter",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_panton_light_caps.woff",default:!0,textMetrics:{unitsPerEm:1e3,ascender:940,descender:-260}},{identifier:"imgly_font_panton_black_caps",fontWeight:800,fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_panton_black_caps.woff",default:!0,textMetrics:{unitsPerEm:1e3,ascender:940,descender:-260}}]},{fontFamily:"Amberlight",variations:[{identifier:"imgly_font_amberlight",fontWeight:"normal",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_amberlight.woff",default:!0,textMetrics:{unitsPerEm:1e3,ascender:750,descender:-250}}]},{fontFamily:"Ultra",variations:[{identifier:"imgly_font_ultra",fontWeight:"normal",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_ultra.woff",default:!0,textMetrics:{unitsPerEm:2048,ascender:2066,descender:-561}}]},{fontFamily:"Galano Grotesque",variations:[{identifier:"imgly_font_galano_grotesque_bold",fontWeight:"bold",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_galano_grotesque_bold.woff",default:!0,textMetrics:{unitsPerEm:1e3,ascender:800,descender:-200}}]},{fontFamily:"Bungee Inline",variations:[{identifier:"imgly_font_bungee_inline",fontWeight:"normal",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_bungee_inline.woff",default:!0,textMetrics:{unitsPerEm:1e3,ascender:860,descender:-140}}]},{fontFamily:"Petit Formal Script",variations:[{identifier:"imgly_font_petit_formal_script",fontWeight:"normal",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_petit_formal_script.woff",default:!0,textMetrics:{unitsPerEm:2048,ascender:2033,descender:-527}}]},{fontFamily:"Summer Font",variations:[{identifier:"imgly_font_summer_font_light",fontWeight:"normal",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_summer_font_light.woff",default:!0,textMetrics:{unitsPerEm:2048,ascender:2189,descender:-600}}]},{fontFamily:"Handycheera",variations:[{identifier:"imgly_font_handycheera_regular",fontWeight:"normal",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_handycheera_regular.woff",default:!0,textMetrics:{unitsPerEm:2048,ascender:2199,descender:-808}}]},{fontFamily:"Rasa",variations:[{identifier:"imgly_font_rasa_regular",fontWeight:"normal",fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_rasa_regular.woff",default:!0,textMetrics:{unitsPerEm:2750,ascender:2300,descender:-1050}},{identifier:"imgly_font_rasa_500",fontWeight:500,fontStyle:"normal",provider:"file",filePath:"text-design/fonts/imgly_font_rasa_500.woff",default:!0,textMetrics:{unitsPerEm:2750,ascender:2300,descender:-1050}}]},{fontFamily:"Campton Book",variations:[{identifier:"imgly_font_campton_bold",fontWeight:"bold",provider:"file",filePath:"text-design/fonts/imgly_font_campton_bold.woff",default:!0,textMetrics:{unitsPerEm:1e3,ascender:770,descender:-294}}]},{fontFamily:"Ostrich",variations:[{identifier:"imgly_font_ostrich_sans_black",fontWeight:800,provider:"file",filePath:"fonts/imgly_font_ostrich_sans_black.woff",textMetrics:{unitsPerEm:2048,ascender:1513,descender:-235}},{identifier:"imgly_font_ostrich_sans_bold",fontWeight:"bold",provider:"file",filePath:"fonts/imgly_font_ostrich_sans_bold.woff",textMetrics:{unitsPerEm:2048,ascender:1513,descender:-235}},{identifier:"imgly_font_ostrich_sans_heavy",fontWeight:900,provider:"file",filePath:"text-design/fonts/imgly_font_ostrich_sans_heavy.woff",textMetrics:{unitsPerEm:1e3,ascender:674,descender:0}}]}]},function(e,t,n){"use strict";var i=n(7),o=n.n(i);t.a=[{identifier:"imgly_transforms_common",defaultName:"Common Ratios",ratios:[{identifier:"imgly_transform_common_custom",defaultName:"Custom",ratio:"*",selected:!0},{identifier:"imgly_transform_common_square",defaultName:"Square",ratio:1},{identifier:"imgly_transform_common_4-3",defaultName:"4:3",ratio:4/3},{identifier:"imgly_transform_common_16-9",defaultName:"16:9",ratio:16/9}]},{identifier:"imgly_transforms_facebook",defaultName:"Facebook",ratios:[{identifier:"imgly_transform_facebook_profile",defaultName:"Profile Pic",ratio:1},{identifier:"imgly_transform_facebook_ad",defaultName:"Ad",dimensions:new o.a.Math.Vector2(1200,627)},{identifier:"imgly_transform_facebook_post",defaultName:"Post",dimensions:new o.a.Math.Vector2(940,788)},{identifier:"imgly_transform_facebook_cover",defaultName:"Cover",dimensions:new o.a.Math.Vector2(851,315)}]}]},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(35),a=n.n(r),s=n(36),l=n.n(s),c=n(0),u=n.n(c),p=n(2),f=n.n(p),d=n(3),h=n.n(d),m=n(1),_=n.n(m),g=n(7),y=n.n(g),v=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},b="function"==typeof l.a&&"symbol"==typeof a.a?function(e){return typeof e}:function(e){return e&&"function"==typeof l.a&&e.constructor===l.a&&e!==l.a.prototype?"symbol":typeof e},k=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),u()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var w=y.a.EventEmitter,x=y.a.Log,S=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||_()(t)).call(this));return n.setMaxListeners(50),n._canBroadcast=!0,n.state=e,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=h()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(f.a?f()(e,t):e.__proto__=t)}(t,w),k(t,[{key:"set",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];"object"!==(void 0===e?"undefined":b(e))&&x.info("SharedState#set expects an object as first parameter");var n=v({},this.state,e),i=v({},this.state);this.state=n,t&&this.broadcastUpdate(i,n)}},{key:"get",value:function(e){return e?this.state[e]:v({},this.state)}},{key:"getState",value:function(){return this.state}},{key:"broadcastUpdate",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this._canBroadcast&&this.emit("update",e,t)}},{key:"enableBroadcast",value:function(){this._canBroadcast=!0}},{key:"disableBroadcast",value:function(){this._canBroadcast=!1}},{key:"clear",value:function(){var e=this.state;this.state={},this.broadcastUpdate(e,this.state)}}]),t}();t.a=S},function(e,t,n){n(45),n(33),e.exports=n(216)},function(e,t,n){var i=n(67),o=n(11)("iterator"),r=n(27);e.exports=n(9).isIterable=function(e){var t=Object(e);return void 0!==t[o]||"@@iterator"in t||r.hasOwnProperty(i(t))}},function(e,t,n){n(45),n(33),e.exports=n(218)},function(e,t,n){var i=n(14),o=n(68);e.exports=n(9).getIterator=function(e){var t=o(e);if("function"!=typeof t)throw TypeError(e+" is not iterable!");return i(t.call(e))}},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(6),l=n.n(s),c=n(2),u=n.n(c),p=n(3),f=n.n(p),d=n(1),h=n.n(d),m=n(4),_=n(37),g=n(222),y=n(228),v=n(262),b=n(94),k=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},w=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),x=function e(t,n,i){null===t&&(t=Function.prototype);var o=l()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(i):void 0};var S={loading:v.a,editor:y.a},C=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||h()(t)).call.apply(e,[this].concat(i)));r._bindAll("_onLoadingDone","_onPreloaderDone","_onImageDone");var a=r.props,s=a.options,l=a.ui,c=s.editor.image;r._preloaderIsComplete=!s.preloader,s.preloader&&(r._preloader=l.getPreloader(),r._preloader.on("done",r._onPreloaderDone)),r._imageIsComplete=c.complete,c.addEventListener("load",r._onImageDone);var u=!r._preloaderIsComplete||!r._imageIsComplete?v.a:y.a;return r.state={theme:r.props.ui.getTheme(),screen:u,screenOptions:{}},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=f()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(u.a?u()(e,t):e.__proto__=t)}(t,b["a"]),w(t,[{key:"componentDidMount",value:function(){x(t.prototype.__proto__||h()(t.prototype),"componentDidMount",this).call(this),this._preloader&&this._preloader.load()}},{key:"componentWillUnmount",value:function(){x(t.prototype.__proto__||h()(t.prototype),"componentWillUnmount",this).call(this),this._preloader&&this._preloader.off("done",this._onPreloaderDone)}},{key:"_onImageDone",value:function(){this._imageIsComplete=!0,this._onLoadingDone()}},{key:"_onPreloaderDone",value:function(){this._preloaderIsComplete=!0,this._onLoadingDone()}},{key:"_onLoadingDone",value:function(){this._preloaderIsComplete&&this._imageIsComplete&&this.setState({screen:y.a,screenOptions:{}})}},{key:"getChildContext",value:function(){return{ui:this.props.ui,options:this.props.options,mediator:this.props.mediator,globalState:this.props.globalState,appComponent:this}}},{key:"switchToScreen",value:function(e){this.setState({screen:S[e],screenOptions:{}})}},{key:"getEditor",value:function(){return this._currentScreen.getEditor()}},{key:"export",value:function(){var e;return(e=this._currentScreen).export.apply(e,arguments)}},{key:"serialize",value:function(){var e;return(e=this._currentScreen).serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return this._currentScreen.deserialize(e)}},{key:"getBounds",value:function(){return this._container.getBoundingClientRect()}},{key:"setImage",value:function(e){this.getEditor().setImage(e)}},{key:"_renderCurrentScreen",value:function(){var e=this,t=this.state,n=t.screen,i=t.screenOptions;return m.l.createElement(n,k({},i,{innerRef:function(t){e._currentScreen=t}}))}},{key:"render",value:function(){var e=this;return m.l.createElement(m.t,{theme:this.state.theme},m.l.createElement(E,{className:"photoeditorsdk-editor",innerRef:function(t){e._container=t}},m.l.createElement(g.a,{modalManager:_.a.instance}),this._renderCurrentScreen()))}}]),t}();C.childContextTypes={ui:m.k.object.isRequired,mediator:m.k.object.isRequired,options:m.k.object.isRequired,appComponent:m.k.object.isRequired,globalState:m.k.object.isRequired},C.propTypes={ui:m.k.object.isRequired,mediator:m.k.object.isRequired,globalState:m.k.object.isRequired,options:m.k.object.isRequired},t.a=C;var E=m.w.div({width:"100%",height:"100%",background:function(e){return e.backgroundColor},overflow:"hidden",position:"relative",textAlign:"left","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none","font-smooth":"antialiased","-webkit-font-smoothing":"antialiased","-moz-osx-font-smoothing":"grayscale"},"AppContainer")},function(e,t,n){n(221);var i=n(9).Object;e.exports=function(e,t){return i.getOwnPropertyDescriptor(e,t)}},function(e,t,n){var i=n(20),o=n(58).f;n(66)("getOwnPropertyDescriptor",function(){return function(e,t){return o(i(e),t)}})},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(223),m=n(224),_=n(225),g=n(226),y=n(227),v=n(49),b=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),k=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var w=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._onOverlayClick=function(){r._modalManager.getModals().forEach(function(e){e.closeOnOverlayClick&&e.close()})},r._modalManager=r.props.modalManager,r._bindAll("_onModalManagerUpdate"),r.state={overlayVisible:!1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["b"]),b(t,[{key:"componentDidMount",value:function(){k(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._modalManager.on("update",this._onModalManagerUpdate)}},{key:"componentWillUnmount",value:function(){k(t.prototype.__proto__||f()(t.prototype),"componentWillUnmount",this).call(this),this._modalManager.off("update",this._onModalManagerUpdate)}},{key:"_onModalManagerUpdate",value:function(){var e=this._modalManager.getModals().filter(function(e){return e.visible}).filter(function(e){return!!e.overlay}).length>0;this.state.overlayVisible=e,this.forceUpdate()}},{key:"_onModalClosed",value:function(e){this._modalManager.removeModal(e)}},{key:"_renderModals",value:function(){var e=this;return this._modalManager.getModals().map(function(t){var n=void 0;switch(t.type){case"loading":n=h.a;break;case"warning":n=m.a;break;case"error":n=_.a;break;case"input":n=y.a;break;case"progress":n=g.a}return d.l.createElement(n,{modal:t,key:t.id,onClose:e._onModalClosed.bind(e,t)})})}},{key:"render",value:function(){return d.l.createElement(S,null,d.l.createElement(v.a,{active:this.state.overlayVisible,enterProp:"rendered",enterDuration:1e3*this.context.theme.transitionDuration,appearProp:"visible",appearDuration:1e3*this.context.theme.transitionDuration,leaveDuration:1e3*this.context.theme.transitionDuration},d.l.createElement(x,{onClick:this._onOverlayClick})),d.l.createElement("div",null,this._renderModals()))}}]),t}();w.contextTypes=d.b.contextTypes,t.a=w;var x=d.w.div({position:"absolute",top:0,left:0,width:"100%",height:"100%",background:function(e){return"rgba("+e.controlsBackgroundColorRGB+", .7)"},zIndex:function(e){return e.zIndex("overlays")},opacity:0,display:"none",transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"}},{visible:{opacity:1},rendered:{display:"block"}},"Overlay"),S=d.w.div({position:"absolute",top:0,left:0,width:"100%",height:"100%"},"Container")},function(e,t,n){"use strict";var i=n(2),o=n.n(i),r=n(3),a=n.n(r),s=n(1),l=n.n(s),c=n(4),u=n(38);var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||l()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=a()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o.a?o()(e,t):e.__proto__=t)}(t,u["g"]),t}();p.contextTypes=c.b.contextTypes,t.a=p},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(38),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._buttons=r.props.modal.data.buttons||["OK"],r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["g"]),d(t,[{key:"_onButtonClick",value:function(e){this.props.modal.emit("button",e),this.props.modal.close()}}]),t}();h.contextTypes=p.b.contextTypes,t.a=h},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(38),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._buttons=["Okay"],r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["g"]),d(t,[{key:"_onButtonClick",value:function(e){0===e&&this.props.modal.close()}}]),t}();h.contextTypes=p.b.contextTypes,t.a=h},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(38),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["g"]),d(t,[{key:"_getProgressBarStyle",value:function(e){return{right:100*(1-e)+"%",borderRadius:"0 0 "+(1===e?2:0)+"px 2px"}}},{key:"_renderContent",value:function(){var e=this.props.modal;return React.createElement(f.f,null,React.createElement(f.b,null,React.createElement(f.a,{src:this._getAssetPath("shared/modals/icon.png",!0)})),React.createElement(f.d,null,React.createElement(f.e,null,e.title),React.createElement(f.c,null,e.text)),React.createElement(m,{style:this._getProgressBarStyle(e.data.progress)}))}}]),t}();h.propTypes={modal:p.k.object},h.contextTypes=p.b.contextTypes,t.a=h;var m=p.w.div({display:"block",zIndex:"1",position:"absolute",left:"0",bottom:"0",height:"2px",background:function(e){return""+e.highlightColor},border:"none"},"ProgressBar")},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(38),m=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._onKeyPress=function(e){"Enter"===e.key?r._onAccept():r.setState(function(e){return{count:e.count+1}})},r._onAccept=function(){r.props.modal.emit("input",r._textArea.value),r.props.modal.close()},r._onCancel=function(){var e=r.props.modal;e.emit("input",e.data.text||""),e.close()},r._onClickOverlay=function(){r._onCancel()},r._buttons=r.props.modal.data.buttons||["OK"],r.state=m({},r.state,{count:0,large:!0}),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["g"]),_(t,[{key:"_renderContent",value:function(){var e=this,t=this.props.modal;return d.l.createElement(x,null,d.l.createElement(v,null,d.l.createElement(k,null,t.title),d.l.createElement(w,{autoFocus:!0,innerRef:function(t){e._textArea=t},defaultValue:t.data.text||"",onKeyPress:this._onKeyPress})),d.l.createElement(y,null,d.l.createElement(b,{onClick:this._onAccept,right:!0,src:this._getAssetPath("shared/modals/input-accept.png",!0)}),d.l.createElement(b,{onClick:this._onCancel,src:this._getAssetPath("shared/modals/input-cancel.png",!0)})))}}]),t}();g.contextTypes=d.b.contextTypes,t.a=g;var y=d.w.div({backgroundColor:function(e){return e.inputModalButtonBarColor},width:"100%",height:"40px",padding:"0 12px",marginTop:"18px"},"ButtonBar"),v=d.w.div({width:"100%",paddingLeft:"24px",paddingRight:"24px"},"InputContainer"),b=d.w.img({width:"18px",height:"18px",marginTop:"11px",cursor:"pointer",opacity:.7,transition:function(e){return"all "+e.transitionDuration+"s ease-out"},"&:hover":{opacity:1,transition:function(e){return"all "+e.transitionDuration+"s ease-in"}}},{right:{float:"right"}},"Image"),k=d.w.div({fontFamily:function(e){return e.regularFontFamily},color:function(e){return e.dimmedTextColor},letterSpacing:1.2,fontSize:"13px",marginBottom:"14px"},"Title"),w=d.w.textarea({width:"100%",height:"80px",background:"transparent",border:0,borderBottom:"1px solid grey",resize:"none",outline:"none",fontFamily:function(e){return e.regularFontFamily},color:function(e){return e.textColor},fontSize:"14px",opacity:.75},"TextArea"),x=(d.w.span({display:"block",textAlign:"right",fontFamily:function(e){return e.regularFontFamily},color:function(e){return e.textColor},fontSize:"13px",lineHeight:"12px",marginTop:"14px",opacity:.45},"LetterCount"),d.w.div({paddingTop:"16px"},"Container"))},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(8),f=n.n(p),d=n(1),h=n.n(d),m=n(4),_=n(110),g=n(255),y=n(257),v=n(37),b=n(126),k=n(127),w=n(78),x=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),S=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var C=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||h()(t)).call.apply(e,[this].concat(i)));r._bindAll("_onRenderError","_onImageResize","_startEditor","_onEditorReset");var a=r.context,s=a.ui,l=a.options,c=a.mediator;return r._editor=new _.a(s,l,c),r._editor.on("ready",r._startEditor),r._editor.on("render-error",r._onRenderError),r._editor.on("resize",r._onImageResize),r._editor.on("reset",r._onEditorReset),r._onWindowResize=m.u.debounce(r._onWindowResize.bind(r),250),r._originalToolsOption=null,r._needsForceCrop=!1,r._isReady=!1,r.state={sharedState:new m.s,controls:null,controlsOptions:{},currentControl:null},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,m["b"]),x(t,[{key:"componentDidMount",value:function(){var e=this;S(t.prototype.__proto__||h()(t.prototype),"componentDidMount",this).call(this),this.context.options.responsive&&window.addEventListener("resize",this._onWindowResize),this._editor.isReady()?!this._hasSwitchedControls&&this.switchToInitialControls():this._editor.once("ready",function(){!e._hasSwitchedControls&&e.switchToInitialControls()})}},{key:"componentWillUnmount",value:function(){S(t.prototype.__proto__||h()(t.prototype),"componentWillUnmount",this).call(this),this.context.options.responsive&&window.removeEventListener("resize",this._onWindowResize)}},{key:"_onEditorReset",value:function(){"library"!==this.state.currentControl&&this.switchToInitialControls()}},{key:"_onImageResize",value:function(){var e=this,t=v.a.instance.displayLoading(this._t("pesdk.editor.text.resizing"));this._editor.once("resized",function(n){var i=n.dimensions,o=n.reason;t.close(),e.context.options.editor.displayResizeMessage&&v.a.instance.displayWarning(e._t("pesdk.editor.title.imageResizedWarning_"+o),e._t("pesdk.editor.text.imageResizedWarning_"+o,{maxMegaPixels:e._editor.getMaxMegapixels(),width:i.x,height:i.y}))})}},{key:"_onRenderError",value:function(e){v.a.instance.displayError(this._t("pesdk.common.title.error"),this._t("pesdk.editor.text.renderingError"),!0)}},{key:"_onWindowResize",value:function(){this._emitEvent(m.d.EVENTS.WINDOW_RESIZE);var e=new m.v(this._container.offsetWidth,this._container.offsetHeight);this._emitEvent(m.d.EVENTS.EDITOR_RESIZE,e)}},{key:"switchToInitialControls",value:function(e){var t=this.context.options,n=!1;if(t.editor.forceCrop&&this._editor.controls.isEnabled("transform")&&!this._hasSwitchedControls){var i=this._editor.getInputDimensions(),o=new b.a(t.editor.controlsOptions.transform||{}),r=i.x/i.y;n=!o.hasRatioValue(r)}n?(this._needsForceCrop=!0,this.switchToForceCropControls(e)):(this._needsForceCrop=!1,this.switchToDefaultControls(e))}},{key:"switchToDefaultControls",value:function(e){var t=this.context.options,n=t.editor.defaultControl;this._originalToolsOption&&(t.editor.tools=this._originalToolsOption,this._originalToolsOption=null),this._editor.controls.isEnabled(n)||(m.h.warn("Trying to switch to default control `"+n+"` which is not available. Falling back to first available control."),n=this._editor.controls.getFirstEnabledControlName()),this.switchToControls(n,null,null,e)}},{key:"switchToForceCropControls",value:function(e){var t=this.context.options,n=t.editor.tools;this._originalToolsOption||(this._originalToolsOption=n,t.editor.tools=m.q.Array.remove(n,function(e){return"transform"!==e&&"library"!==e})),this.switchToControls("transform",{forceCrop:!0},null,e)}},{key:"switchToControls",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this,i=arguments[2],o=arguments[3];if(this.state.currentControl===e)return o&&o();this._hasSwitchedControls=!0;var r=this.state.sharedState;if("default"===e)return this.switchToDefaultControls(o);if(!this._editor.controls.isEnabled(e))return m.h.warn("Tried to open control `"+e+"` which is not available.");var a=this._editor.controls.getAvailable()[e];if(!a&&"overview"!==e)return m.h.error("Control `"+e+"` does not exist!");var s=f.a.resolve(!0);this.state.controls&&(s=this.state.controls.onLeave()),s.then(function(s){if(s){r.disableBroadcast(),n._isReady||(n._isReady=!0,n.context.mediator.emit(m.d.EVENTS.EDITOR_READY)),r.disableBroadcast(),r.clear(),r.set(t);var l=m.q.defaults(i||n.context.options.editor.controlsOptions[a.identifier],a.defaultOptions),c=new a(n.getChildContext(),n.state.sharedState,l);c.onEnter(),r.enableBroadcast(),n.setState({controls:c,controlsOptions:l,currentControl:e},o)}})}},{key:"_startEditor",value:function(){var e=this.context.options;this._editor.start(),e.editor.forceCrop&&(this._hasSwitchedControls=!1,this.switchToInitialControls())}},{key:"getChildContext",value:function(){return{editor:this._editor,ui:this.context.ui,options:this.context.options,mediator:this.context.mediator,sharedState:this.state.sharedState,screen:this,appComponent:this.context.appComponent,globalState:this.context.globalState}}},{key:"render",value:function(){var e=this,t=this.state,n=t.controls,i=t.controlsOptions,o=void 0,r=void 0;if(n){var a=n.constructor,s=a.controlsComponent,l=a.canvasControlsComponent;o=s?m.l.createElement(s,{options:i,controls:n}):m.l.createElement("div",null),r=l?m.l.createElement(l,{options:i,controls:n}):m.l.createElement("div",null)}else o=m.l.createElement(k.a,null),r=m.l.createElement(w.a,null);return m.l.createElement(E,{innerRef:function(t){t&&(e._container=t)},className:void 0},m.l.createElement(y.a,{ref:"canvas"}),m.l.createElement(T,{innerRef:function(t){e._tableContainer=t}},m.l.createElement(g.a,{onControlSwitch:this.switchToControls.bind(this),currentControl:this.state.currentControl}),o,r))}},{key:"getEditor",value:function(){return this._editor}},{key:"export",value:function(){for(var e=this,t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];return new f.a(function(t,i){e.switchToControls("default",null,{},function(){var o;(o=e._editor).export.apply(o,n).then(t).catch(i)})})}},{key:"serialize",value:function(){var e;return(e=this._editor).serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return this._editor.deserialize(e)}}]),t}();C.contextTypes=m.b.contextTypes,C.childContextTypes={ui:m.k.object.isRequired,editor:m.k.object.isRequired,mediator:m.k.object.isRequired,options:m.k.object.isRequired,sharedState:m.k.object.isRequired,screen:m.k.object.isRequired,appComponent:m.k.object.isRequired,globalState:m.k.object.isRequired};var E=m.w.div({width:"100%",height:"100%",position:"absolute"},"Container"),T=m.w.div({position:"absolute",width:"100%",height:"100%",top:0,left:0,display:"table",tableLayout:"fixed",zIndex:1,overflow:"hidden"},"TableContainer");t.a=Object(m.A)(C)},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(4),a=n(230),s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var l=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._sdk=t,this._options=n,this._download=i}return s(e,[{key:"export",value:function(){var e=this,t=this._getRenderType();return this._sdk.export(t,this._options.format,this._options.quality).then(function(n){return e._download&&e._downloadData(t,n),n})}},{key:"_downloadData",value:function(e,t){switch(e){case r.o.DATAURL:a.a.downloadDataURL(t,this._options.fileBasename);break;case r.o.MSBLOB:a.a.downloadMSBlob(t,this._options.fileBasename)}}},{key:"_getRenderType",value:function(){var e=this._options;return e.type===r.o.IMAGE&&this._download?r.u.supportsMSBlob()?r.o.MSBLOB:r.o.DATAURL:e.type}}]),e}();t.a=l},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(4),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return a(e,null,[{key:"downloadDataURL",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"photoeditorsdk-export",n=this.createBlobURLFromDataURL(e),i=this.getExtensionFromDataURL(e),o=document.createElement("a");o.download=t+"."+i,o.href=n,document.body.appendChild(o),o.click(),document.body.removeChild(o)}},{key:"downloadMSBlob",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"photoeditorsdk-export";navigator.msSaveBlob(e,t+".png")}},{key:"getExtensionFromDataURL",value:function(e){return e.split(",")[0].split(":")[1].split(";")[0].split("/").pop()}},{key:"createBlobURLFromDataURL",value:function(e){if(!(window.Blob&&window.URL&&ArrayBuffer&&Uint8Array))return e;for(var t=r.a.decode(e.split(",")[1]),n=e.split(",")[0].split(":")[1].split(";")[0],i=new ArrayBuffer(t.length),o=new Uint8Array(i),a=0;a<t.length;a++)o[a]=t[a];var s=new window.Blob([i],{type:n});return window.URL.createObjectURL(s)}}]),e}();t.a=s},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(4),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var s=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._image=t,this._maxPixels=n,this._maxDimensions=i}return a(e,[{key:"needsResize",value:function(){var e=new r.v(this._image.width,this._image.height),t=e.x*e.y>this._maxPixels,n=null!==this._maxDimensions&&(e.x>this._maxDimensions||e.y>this._maxDimensions);return t||n}},{key:"resize",value:function(){var e=this,t=null,n=null,i=this._maxDimensions;return new r.j(function(o,a){window.setTimeout(function(){var a=new r.v(e._image.width,e._image.height).clone();if(a.x*a.y>e._maxPixels&&(a.copy(e._getDimensionsByMaxPixels()),t="maxMegaPixels"),null!==i&&(a.x>i||a.y>i)){var s=Math.min(i/a.x,i/a.y);a.multiply(s),t="maxDimensions"}a.floor(),n=e._createResizedImageCanvas(a),o({canvas:n,dimensions:a,reason:t})},1e3)})}},{key:"_createResizedImageCanvas",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e,n=this._image,i=document.createElement("canvas");i.width=e.x,i.height=e.y;var o=e.clone().subtract(t).divide(2);return i.getContext("2d").drawImage(n,0,0,n.width,n.height,o.x,o.y,t.x,t.y),i}},{key:"_getDimensionsByMaxPixels",value:function(){var e=this._image,t=this._maxPixels,n=e.width/e.height,i=e.height/e.width;return new r.v(Math.sqrt(t*n),Math.sqrt(t*i)).floor()}}]),e}();t.a=s},function(e,t,n){"use strict";var i=n(35),o=n.n(i),r=n(36),a=n.n(r),s=n(0),l=n.n(s),c=n(47),u=n.n(c),p=n(7),f=n.n(p),d=n(4),h="function"==typeof a.a&&"symbol"==typeof o.a?function(e){return typeof e}:function(e){return e&&"function"==typeof a.a&&e.constructor===a.a&&e!==a.a.prototype?"symbol":typeof e},m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),l()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t,this._sdk=n,this._mediator=i,this._map={},this._stack=this._sdk&&this._sdk.getOperationsStack(),this._preferredOrder=this._editor.getOptions().editor.operationsOrder,this._available={};var o=f.a.Operations;for(var r in o){var a=o[r];this._available[a.identifier]=a}var s=t.getOptions().extensions.operations;for(var l in s){var c=s[l];this._available[c.identifier]=c}this._stack&&this._fixStack()}return m(e,[{key:"exists",value:function(e){return!!this._map[e]}},{key:"add",value:function(e){var t=this,n=e.constructor.identifier;e.on("update",function(){t._mediator.emit(d.d.EVENTS.OPERATION_UPDATED,e)});var i=this._preferredOrder.indexOf(n);if(-1===i)throw new Error("EditorOperations#add: `"+n+"` does not appear in `operationsOrder`");this._stack.set(i,e),this._map[n]=e,this._mediator.emit(d.d.EVENTS.OPERATION_CREATED,e)}},{key:"remove",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n="object"===(void 0===e?"undefined":h(e))?e.constructor.identifier:e,i=this._stack.getStack();e=this.get(n),delete this._map[n];var o=i.map(function(e){return e.constructor.identifier}).indexOf(n);if(-1!==o){this._stack.removeAt(o);for(var r=o+1;r<i.length;r++){var a=i[r];a&&a.setDirty(!0)}t&&this._mediator.emit(d.d.EVENTS.OPERATION_REMOVED,e)}}},{key:"get",value:function(e){return this._map[e]}},{key:"getOrCreate",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this._map[e]){var n=this._map[e];return n.set(t,!1),n}var i=this._available[e];if(void 0===i)return d.h.warn("Trying to create an operation of type `"+e+"` that is not available."),null;var o=new i(this._sdk,t);return this.add(o),o}},{key:"getStack",value:function(){return this._stack}},{key:"getSnapshot",value:function(){var e=this,t={};return u()(this._map).forEach(function(n){var i=e._map[n];t[n]=i.serializeOptions()}),t}},{key:"removeUnused",value:function(){var e=this;u()(this._map).forEach(function(t){var n=e._map[t];n.hasChanges()||e.remove(n)})}},{key:"hasChanges",value:function(e){var t=this,n=!1;return u()(this._map).forEach(function(t){e[t]||(n=!0)}),!!n||(u()(e).forEach(function(i){var o=t.get(i);o&&o.optionsEqual(e[i])||(n=!0)}),n)}},{key:"restoreSnapshot",value:function(e){var t=this;u()(e).forEach(function(n){var i=t.getOrCreate(n);i.optionsEqual(e[n])||(i.restoreSnapshot?i.restoreSnapshot(e[n]):i.set(e[n]))}),u()(this._map).forEach(function(n){e[n]||t.remove(n)})}},{key:"isAvailable",value:function(e){return!!this._available[e]}},{key:"getAvailable",value:function(){return this._available}},{key:"reset",value:function(){this._map={}}},{key:"_fixStack",value:function(){var e=this,t=this._stack.getStack().slice();this._stack.clear(),t.forEach(function(t){e.add(t)})}}]),e}();t.a=_},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(7),a=n.n(r),s=n(4),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var c=function(){function e(t,n,i){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t,this._sdk=n,this._mediator=i,this._options=this._editor.getOptions(),this._invalidOperationsSeen=[],this._available={};var r=a.a.UI.DesktopUI.Controls;for(var s in r){var l=r[s];this._available[l.identifier]=l}(this._options.extensions.controls||[]).forEach(function(e){o._available[e.identifier]=e})}return l(e,[{key:"getFirstEnabledControlName",value:function(){for(var e in this._available)if(this.isEnabled(e))return e;return null}},{key:"isEnabled",value:function(e){var t=this,n=this.get(e);if(!n)return s.h.info("EditorControls#isEnabled: Unknown control: "+e),!1;var i=[];return(n.requiredOperations||[]).forEach(function(e){t._editor.operations.isAvailable(e)||i.push(e)}),i.length?(-1===this._invalidOperationsSeen.indexOf(e)&&(this._invalidOperationsSeen.push(e),s.h.error("Control `"+e+"` can not be used because "+(1===i.length?"operation is":"operations are")+" missing: "+i.map(function(e){return"`"+e+"`"}).join(", "))),!1):n.isEnabled(this._editor)}},{key:"get",value:function(e){return this._available[e]}},{key:"getAvailable",value:function(){return this._available}}]),e}();t.a=c},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(4),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var s=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t,this._sdk=n,this._mediator=i,this._options=this._editor.getOptions(),this.reset()}return a(e,[{key:"isEnabled",value:function(e){return this._features[e]&&this.isEnabledByOptions(e)}},{key:"isEnabledByOptions",value:function(e){var t=e.charAt(0).toUpperCase()+e.slice(1),n=this._options.editor["enable"+t];return void 0===n&&(n=!0),n}},{key:"enable",value:function(){for(var e=this,t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];n.forEach(function(t){e._features[t]=!0}),this._mediator.emit(r.d.EVENTS.FEATURES_ENABLED,n),this._mediator.emit(r.d.EVENTS.FEATURES_UPDATED,n)}},{key:"disable",value:function(){for(var e=this,t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];n.forEach(function(t){e._features[t]=!1}),this._mediator.emit(r.d.EVENTS.FEATURES_DISABLED,n),this._mediator.emit(r.d.EVENTS.FEATURES_UPDATED,n)}},{key:"reset",value:function(){this._features={drag:this._options.editor.enableDrag,zoom:this._options.editor.enableZoom,export:!0,new:!0}}}]),e}();t.a=s},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(236),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(e,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).call(this));return o._editor=e,o._sdk=n,o._mediator=i,o._isDefaultZoom=!1,o._zoom=o._sdk.getZoom(),o._targetZoom=o._zoom,o._options=o._editor.getOptions(),o._zoomLevels=[1,2,3,4,5,6.25,8.33,12.5,16.66,25,33.33,50,66.66,100,200,300,400,500,600,700,800,1200,1600,3200].map(function(e){return e/100}),o._editor.on("ready",function(){o._defaultLevel=o._calculateDefaultZoomLevel()}),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["e"]),d(t,[{key:"auto",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments[2];e&&(this._defaultLevel=this._calculateDefaultZoomLevel()),this.set(this._defaultLevel,t,n)}},{key:"in",value:function(e){var t=this._getClosestZoomLevel(this._targetZoom+.001,1);t=this._clamp(t),this.set(t,e)}},{key:"out",value:function(e){var t=this._getClosestZoomLevel(this._targetZoom-.001,-1);t=this._clamp(t),this.set(t,e)}},{key:"_clamp",value:function(e){var t=this._calculateDefaultZoomLevel(),n=Math.max(1,2*t),i=this.minimum;return Math.max(i,Math.min(n,e))}},{key:"set",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=arguments[2];this._targetZoom=e,this._mediator.emit(p.d.EVENTS.ZOOM,e),this._zoom===this._targetZoom&&(n=!0),this._transition&&(this._transition.stop(),this._transition=null);var o=function(e){t._set(e,function(){i&&i(),t._mediator.emit(p.d.EVENTS.ZOOM_DONE,t._zoom)}),t._transition=null,t._sdk.setTextureQuality(Math.min(t._zoom,1))};if(n)return o(e);this._transition=new f.a({zoom:this._zoom},{zoom:e},{duration:300,easing:"easeOutQuart",onUpdate:function(e){t._set(e.zoom)},onDone:function(e){o(e.zoom)}}),this._transition.start()}},{key:"tick",value:function(){this._transition&&this._transition.update()}},{key:"_getClosestZoomLevel",value:function(e,t){var n=void 0;return-1===t?(n=this._zoomLevels.filter(function(t){return t<e}).pop())||(n=this._zoomLevels[this._zoomLevels.length-1]):1===t&&((n=this._zoomLevels.filter(function(t){return t>e})[0])||(n=this._zoomLevels[0])),n}},{key:"undo",value:function(){this._previousZoom&&(this.set(this._previousZoom),this._previousZoom=null)}},{key:"_set",value:function(e,t){this._zoom=e,this._sdk.setZoom(this._zoom),this._mediator.emit(p.d.EVENTS.ZOOM_CHANGED,this._zoom),this.emit("set",this._zoom,t)}},{key:"_calculateDefaultZoomLevel",value:function(){var e=this._editor.getFinalDimensions(!1),t=this._editor.getCanvasDimensions();return p.q.resizeVectorToFit(e,t).divide(e).x}},{key:"getSnapshot",value:function(){return{zoom:this._targetZoom}}},{key:"restoreSnapshot",value:function(e){this.set(e.zoom,!0)}},{key:"minimum",get:function(){var e=this._editor.getFinalDimensions();return p.q.resizeVectorToFit(e,new p.v(300,300)).divide(e).x}},{key:"level",get:function(){return this._zoom}},{key:"defaultLevel",get:function(){return this._defaultLevel}},{key:"targetLevel",get:function(){return this._targetZoom}}]),t}();t.a=h},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(7),a=(n.n(r),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var s={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return e*(2-e)},easeInOutQuad:function(e){return e<.5?2*e*e:(4-2*e)*e-1},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return--e*e*e+1},easeInOutCubic:function(e){return e<.5?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return 1- --e*e*e*e},easeInOutQuart:function(e){return e<.5?8*e*e*e*e:1-8*--e*e*e*e},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return 1+--e*e*e*e*e},easeInOutQuint:function(e){return e<.5?16*e*e*e*e*e:1+16*--e*e*e*e*e}},l=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._obj=t,this._initialObj=r.Utils.clone(t),this._targetValues=n,this._options=r.Utils.defaults(i,{duration:1e3,easing:"easeOutQuad",onUpdate:function(){},onDone:function(){}}),this._startedAt=null,this._running=!1}return a(e,[{key:"start",value:function(){this._startedAt=+new Date,this._running=!0}},{key:"update",value:function(){if(this._running){var e=+new Date-this._startedAt,t=s[this._options.easing],n=Math.min(1,e/this._options.duration),i=t(n);for(var o in this._initialObj){var r=this._initialObj[o],a=this._targetValues[o];this._obj[o]=r+(a-r)*i}this._options.onUpdate(this._obj),n>=1&&(this._options.onDone(this._obj),this.stop())}}},{key:"stop",value:function(){this._running=!1}}]),e}();t.a=l},function(e,t,n){"use strict";var i=n(34),o=n.n(i),r=n(0),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(4)),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function _(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return o()(e)}var g=function(e){function t(e,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).call(this));return o._editor=e,o._sdk=n,o._mediator=i,o._undoItems=[],o._redoItems=[],o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["e"]),m(t,[{key:"hasInitialState",value:function(){return d.Utils.Array.flatten(this.getUndoItems()).length>0}},{key:"isUndoAvailable",value:function(){return d.Utils.Array.flatten(this.getUndoItems()).length>1}},{key:"isRedoAvailable",value:function(){return d.Utils.Array.flatten(this.getRedoItems()).length>0}},{key:"addSnapshot",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"global",t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,r={snapshot:this._editor.getSnapshot(),scope:e,identifier:n,controls:i,data:o},a=d.Utils.Array.last(this._undoItems);a&&t&&r.identifier===a.identifier&&this._undoItems.pop(),this._undoItems.push(r),this._mediator.emit(h.d.EVENTS.HISTORY_UPDATED,r.operation),this._redoItems=[]}},{key:"undo",value:function(){var e=this._undoItems,t=e.pop(),n=d.Utils.Array.last(e);n&&t&&(this._editor.restoreSnapshot(n.snapshot),this._mediator.emit(h.d.EVENTS.HISTORY_UNDO,n,t),this._redoItems.push(t),this.emit("undo"))}},{key:"redo",value:function(){var e=this._redoItems.pop();e&&(this._editor.restoreSnapshot(e.snapshot),this._mediator.emit(h.d.EVENTS.HISTORY_REDO,e),this._undoItems.push(e),this.emit("redo"))}},{key:"remove",value:function(e){var t=e.scope,n=e.identifier,i=e.controls,o=function(e,o,r){return!(t&&t!==e.scope||n&&n!==e.identifier||i&&i!==e.controls)};this._undoItems=d.Utils.Array.remove(this._undoItems,o),this._redoItems=d.Utils.Array.remove(this._redoItems,o)}},{key:"removeLocal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.remove({scope:"local",identifier:e,controls:t})}},{key:"removeGlobal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.remove({scope:"global",identifier:e,controls:t})}},{key:"removeControls",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.remove({scope:t,controls:e,identifier:n})}},{key:"reset",value:function(){this._undoItems=[],this._redoItems=[]}},{key:"getUndoItems",value:function(){return[].concat(_(this._undoItems))}},{key:"getItems",value:function(){return this.getUndoItems()}},{key:"getRedoItems",value:function(){return[].concat(_(this._redoItems))}}]),t}();t.a=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n.n(i),r=n(111),a=n(112),s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return s(e,[{key:"serialize",value:function(){var e=new r.a(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new a.a(this._editor,e).deserialize()}}]),e}();t.default=l,l.version="1.0.0"},function(e,t,n){var i=function(){return this}()||Function("return this")(),o=i.regeneratorRuntime&&Object.getOwnPropertyNames(i).indexOf("regeneratorRuntime")>=0,r=o&&i.regeneratorRuntime;if(i.regeneratorRuntime=void 0,e.exports=n(240),o)i.regeneratorRuntime=r;else try{delete i.regeneratorRuntime}catch(e){i.regeneratorRuntime=void 0}},function(e,t){!function(t){"use strict";var n,i=Object.prototype,o=i.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",s=r.asyncIterator||"@@asyncIterator",l=r.toStringTag||"@@toStringTag",c="object"==typeof e,u=t.regeneratorRuntime;if(u)c&&(e.exports=u);else{(u=t.regeneratorRuntime=c?e.exports:{}).wrap=b;var p="suspendedStart",f="suspendedYield",d="executing",h="completed",m={},_={};_[a]=function(){return this};var g=Object.getPrototypeOf,y=g&&g(g(D([])));y&&y!==i&&o.call(y,a)&&(_=y);var v=S.prototype=w.prototype=Object.create(_);x.prototype=v.constructor=S,S.constructor=x,S[l]=x.displayName="GeneratorFunction",u.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===x||"GeneratorFunction"===(t.displayName||t.name))},u.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,S):(e.__proto__=S,l in e||(e[l]="GeneratorFunction")),e.prototype=Object.create(v),e},u.awrap=function(e){return{__await:e}},C(E.prototype),E.prototype[s]=function(){return this},u.AsyncIterator=E,u.async=function(e,t,n,i){var o=new E(b(e,t,n,i));return u.isGeneratorFunction(t)?o:o.next().then(function(e){return e.done?e.value:o.next()})},C(v),v[l]="Generator",v[a]=function(){return this},v.toString=function(){return"[object Generator]"},u.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var i=t.pop();if(i in e)return n.value=i,n.done=!1,n}return n.done=!0,n}},u.values=D,I.prototype={constructor:I,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(R),!e)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function i(i,o){return s.type="throw",s.arg=e,t.next=i,o&&(t.method="next",t.arg=n),!!o}for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var l=o.call(a,"catchLoc"),c=o.call(a,"finallyLoc");if(l&&c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&o.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var r=i;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var a=r?r.completion:{};return a.type=e,a.arg=t,r?(this.method="next",this.next=r.finallyLoc,m):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),R(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var i=n.completion;if("throw"===i.type){var o=i.arg;R(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,i){return this.delegate={iterator:D(e),resultName:t,nextLoc:i},"next"===this.method&&(this.arg=n),m}}}function b(e,t,n,i){var o=t&&t.prototype instanceof w?t:w,r=Object.create(o.prototype),a=new I(i||[]);return r._invoke=function(e,t,n){var i=p;return function(o,r){if(i===d)throw new Error("Generator is already running");if(i===h){if("throw"===o)throw r;return P()}for(n.method=o,n.arg=r;;){var a=n.delegate;if(a){var s=T(a,n);if(s){if(s===m)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===p)throw i=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var l=k(e,t,n);if("normal"===l.type){if(i=n.done?h:f,l.arg===m)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(i=h,n.method="throw",n.arg=l.arg)}}}(e,n,a),r}function k(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function w(){}function x(){}function S(){}function C(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function E(e){var t;this._invoke=function(n,i){function r(){return new Promise(function(t,r){!function t(n,i,r,a){var s=k(e[n],e,i);if("throw"!==s.type){var l=s.arg,c=l.value;return c&&"object"==typeof c&&o.call(c,"__await")?Promise.resolve(c.__await).then(function(e){t("next",e,r,a)},function(e){t("throw",e,r,a)}):Promise.resolve(c).then(function(e){l.value=e,r(l)},a)}a(s.arg)}(n,i,t,r)})}return t=t?t.then(r,r):r()}}function T(e,t){var i=e.iterator[t.method];if(i===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,T(e,t),"throw"===t.method))return m;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var o=k(i,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,m;var r=o.arg;return r?r.done?(t[e.resultName]=r.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,m):r:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,m)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function I(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function D(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,r=function t(){for(;++i<e.length;)if(o.call(e,i))return t.value=e[i],t.done=!1,t;return t.value=n,t.done=!0,t};return r.next=r}}return{next:P}}function P(){return{value:n,done:!0}}}(function(){return this}()||Function("return this")())},function(e,t,n){"use strict";var i=n(2),o=n.n(i),r=n(3),a=n.n(r),s=n(1),l=n.n(s),c=n(7);n.n(c);var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||l()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=a()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o.a?o()(e,t):e.__proto__=t)}(t,c["Configurable"]),t}();t.a=u,u.prototype.availableOptions={fontFamily:{type:c.OptionType.STRING,required:!0},variations:{type:c.OptionType.ARRAY,required:!0}}},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(117),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m={italic:"i"},_=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["a"]),h(t,[{key:"load",value:function(){return this._fonts.length&&this._addStylesheetTag(),function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0}(t.prototype.__proto__||f()(t.prototype),"load",this).call(this)}},{key:"_addStylesheetTag",value:function(){var e=this._getFamiliesString(),t=document.createElement("link");t.rel="stylesheet",t.href="https://fonts.googleapis.com/css?family="+e,document.getElementsByTagName("head")[0].appendChild(t)}},{key:"_getFamiliesString",value:function(){var e={};this._fonts.forEach(function(t){var n=t.getFontFamily(),i=t.getFontStyle(),o=t.getFontWeight();e[n]=e[n]||[],void 0!==o?e[n].push(""+o+(m[i]||"")):e[n].push(400)});var t=[];for(var n in e){var i=e[n],o=i.length?":"+i.join(","):"",r=n.replace(" ","+")+o;t.push(r)}return t.join("|")}}]),t}();t.a=_},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(8),a=n.n(r),s=n(244),l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var c="undefined"!=typeof window&&window.performance&&window.performance.now?window.performance.now.bind(window.performance):n(109),u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._fontVariation=t,this._defaultFontRuler=new s.a,this._customFontRuler=new s.a(this._fontVariation)}return l(e,[{key:"observe",value:function(){var e=this,t=c();return new a.a(function(n,i){var o=window.setInterval(function(){if(e._defaultFontRuler.getWidth()!==e._customFontRuler.getWidth())return window.clearInterval(o),n();if(c()-t>=5e3){var r=new Error("Failed to load font "+e._fontVariation.getFontFamily()+".");return r.font=e._fontVariation,i(r)}},50)})}},{key:"dispose",value:function(){this._defaultFontRuler.dispose(),this._customFontRuler.dispose()}}]),e}();t.a=u},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(116),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._fontVariation=t||new r.a({fontFamily:"Times New Roman",fontWeight:"normal",fontStyle:"normal"}),this._createRuler()}return a(e,[{key:"_createRuler",value:function(){this._ruler=document.createElement("div"),this._ruler.innerText="abcdefghijklmnopqrstuvwxzy",document.body.appendChild(this._ruler),this._setRulerStyle()}},{key:"_setRulerStyle",value:function(){this._ruler.style.cssText="\n      position: absolute;\n      top: -9999px;\n      left: -9999px;\n      opacity: 0;\n      display: inline-block;\n      font: "+this._fontVariation.getFontStyle()+" "+this._fontVariation.getFontWeight()+" 30px "+this._fontVariation.getFontFamily()+";\n    "}},{key:"setFontVariation",value:function(e){this._fontVariation=e,this._setRulerStyle()}},{key:"getWidth",value:function(){return this._ruler?this._ruler.offsetWidth:-1}},{key:"dispose",value:function(){this._ruler&&(this._ruler.parentNode.removeChild(this._ruler),this._ruler=null)}}]),e}();t.a=s},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(117),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["a"]),m(t,[{key:"load",value:function(){var e=this,n=[];return this._fonts.forEach(function(t){var i=e._ui.getAssetPath(t.getFilePath(),!1,!0);n.push('@font-face {\n        font-family: "'+t.getFontFamily()+"\";\n        src: url('"+i+"') format('woff');\n        font-weight: "+t.getFontWeight()+";\n        font-style: "+t.getFontStyle()+";\n      }")}),d.w.global(n.join("\n"),!0),function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0}(t.prototype.__proto__||f()(t.prototype),"load",this).call(this)}}]),t}();t.a=_},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n.n(i),r=n(118),a=n(119),s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return s(e,[{key:"serialize",value:function(){var e=new r.a(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new a.a(this._editor,e).deserialize()}}]),e}();t.default=l,l.version="1.0.1"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n.n(i),r=n(75),a=n(76),s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return s(e,[{key:"serialize",value:function(){var e=new r.a(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new a.a(this._editor,e).deserialize()}}]),e}();t.default=l,l.version="2.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n.n(i),r=n(249),a=n(250),s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return s(e,[{key:"serialize",value:function(){var e=new r.a(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new a.a(this._editor,e).deserialize()}}]),e}();t.default=l,l.version="2.0.1"},function(e,t,n){"use strict";var i=n(2),o=n.n(i),r=n(3),a=n.n(r),s=n(1),l=n.n(s),c=n(75);var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||l()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=a()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o.a?o()(e,t):e.__proto__=t)}(t,c["a"]),t}();t.a=u,u.version="2.0.0"},function(e,t,n){"use strict";var i=n(2),o=n.n(i),r=n(3),a=n.n(r),s=n(1),l=n.n(s),c=n(76);var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||l()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=a()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o.a?o()(e,t):e.__proto__=t)}(t,c["a"]),t}();t.a=u,u.version="2.0.1"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n.n(i),r=n(124),a=n(125),s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return s(e,[{key:"serialize",value:function(){var e=new r.a(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new a.a(this._editor,e).deserialize()}}]),e}();t.default=l,l.version="3.0.0"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n.n(i),r=n(253),a=n(254),s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t}return s(e,[{key:"serialize",value:function(){var e=new r.a(this._editor);return e.serialize.apply(e,arguments)}},{key:"deserialize",value:function(e){return new a.a(this._editor,e).deserialize()}}]),e}();t.default=l,l.version="3.1.0"},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=(n(4),n(124)),f=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["a"]),f(t,[{key:"_serializeTextDesign",value:function(e,t){var n=t.serializeOptions(["position","rotation","flipHorizontally","flipVertically","text","color","width","seed","inverted"],!0);n.color={rgba:n.color};var i=t.getLayout();return i&&(n.identifier=i.constructor.identifier),{type:"textdesign",options:n}}}]),t}();t.a=d,d.version="3.1.0"},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(125),m=n(77),_=n(51),g=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var v=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["a"]),y(t,[{key:"_deserializeTextDesign",value:function(e,t){var n=this,i=t.options,o=i.position,r=i.rotation,a=i.flipHorizontally,s=i.flipVertically,l=i.text,c=i.color,u=i.width,p=i.seed,f=i.inverted,h=i.identifier,y=new m.a(this._ui,this._getOptions("textdesign")),v=new _.a(this._ui,{fonts:d.d.DEFAULTS.TEXT_DESIGN_FONTS,replaceFonts:!0}),b=e.constructor.TextDesignSprite.AssetManager,k=this._ui.getFontLoader(),w=new(y.getLayoutByIdentifier(h));return k.setFonts(v.getFonts()),b.setFonts(g({},b.getFonts(),v.getVariationsByIdentifier())),k.load().then(function(){var t=w.getImagePaths().map(function(e){return{path:e,fullPath:n._ui.getAssetPath(e),image:null}});return b.loadImages(t).then(function(){return w.onImagesLoaded(),e.createTextDesign({position:o,rotation:r,flipHorizontally:a,flipVertically:s,text:l,color:d.c.fromArray(c.rgba),width:u,seed:p,inverted:f,layout:w})})})}}]),t}();t.a=v,v.version="3.1.0"},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(256),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._needsStyleFixes=!0,r._bindAll("_onMouseEnter","_onMouseLeave"),r.state={isHovering:!1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),d(t,[{key:"shouldComponentUpdate",value:function(e,t){return e.currentControl!==this.props.currentControl||t.isHovering!==this.state.isHovering}},{key:"_onItemClick",value:function(e){this.props.disabled||(this._onMouseLeave(),this.props.onControlSwitch(e))}},{key:"_onMouseEnter",value:function(){this.props.disabled||this.setState({isHovering:!0})}},{key:"_onMouseLeave",value:function(){this.props.disabled||this.setState({isHovering:!1})}},{key:"fixStyles",value:function(){if(p.u.Browser.isIElte(10)){var e=this._navigation.offsetHeight;this._gradient.style.height=e+"px"}}},{key:"_getItemCount",value:function(e){var t=this;return e.reduce(function(e,n){return Array.isArray(n)?e+t._getItemCount(n):e+1},0)}},{key:"_renderListItems",value:function(){var e=this,t=this.context.editor,n=this.state.isHovering,i=function(i,o,r){var a=t.controls.get(i),s=i===e.props.currentControl;return p.l.createElement(f.a,{key:i,title:i,showTitle:n,iconPath:e._getAssetPath(a.iconPath,!0),activeIconPath:e._getAssetPath(a.activeIconPath,!0),selected:s,onClick:e._onItemClick.bind(e,i),animationDelay:.02*o,maxAnimationDelay:.02*r,disabled:e.props.disabled})},o=[],r=this.context.options.editor.controlsOrder,a=this._getItemCount(r)-1;return r.forEach(function(e,n){if(Array.isArray(e))e.forEach(function(e){t.controls.isEnabled(e)&&o.push(i(e,o.length,a))}),n!==r.length-1&&o.length&&o.push((s="separator-"+n,p.l.createElement(f.a,{key:s,isSeparator:!0})));else{if(!t.controls.isEnabled(e))return;o.push(i(e,o.length,a))}var s}),o}},{key:"render",value:function(){var e=this,t=this.state.isHovering,n={backgroundImage:"url("+this._getAssetPath("editor/navigation/nav-gradient.png",!0)+")"};return p.l.createElement(m,{onMouseLeave:this._onMouseLeave,innerRef:function(t){e._navigation=t}},p.l.createElement(_,{onMouseEnter:this._onMouseEnter,onMouseLeave:this._onMouseLeave,disabled:this.props.disabled},this._renderListItems()),p.l.createElement(g,{className:void 0,innerRef:function(t){e._gradient=t},style:n,visible:t}))}}]),t}();h.contextTypes=p.b.contextTypes,t.a=h;var m=p.w.div({zIndex:function(e){return e.zIndex("navigation")},position:"relative",display:"table-cell",width:"55px",height:"100%",background:function(e){return e.navigationBackgroundColor}},"NavigationContainer"),_=p.w.ul({position:"absolute",top:0,left:0,width:"100%",height:"100%",padding:"5px 0",listStyleType:"none",zIndex:function(e){return e.zIndex("controls")+1}},"Navigation"),g=p.w.div({transition:"opacity .4s, left .4s",position:"absolute",left:"-285px",top:0,margin:0,width:"285px",height:"100vh",padding:"17px 0",listStyle:"none",opacity:0,backgroundRepeat:"repeat-y",backgroundPosition:"left",backgroundSize:"100%"},{visible:{transitionDelay:"0s",left:0,opacity:1}},"NavigationOverlay")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),f(t,[{key:"shouldComponentUpdate",value:function(e,t){return e.showTitle!==this.props.showTitle||e.selected!==this.props.selected}},{key:"render",value:function(){if(this.props.isSeparator)return p.l.createElement(_,null);var e={transitionDelay:(this.props.showTitle?this.props.animationDelay:this.props.maxAnimationDelay-this.props.animationDelay)+"s"};return p.l.createElement(m,{onClick:this.props.onClick,selected:this.props.selected,className:void 0,"data-identifier":this.props.title,disabled:this.props.disabled},p.l.createElement(y,{src:this.props.iconPath,selected:this.props.selected}),p.l.createElement(v,{src:this.props.activeIconPath,selected:this.props.selected}),p.l.createElement(b,{style:e,withTitle:this.props.showTitle},p.l.createElement(k,null,this._t("pesdk."+this.props.title+".title.name"))))}}]),t}();d.contextTypes=p.b.contextTypes,t.a=d;var h=p.w.li({height:"48px",width:"100%",cursor:"pointer"},"BaseItem"),m=Object(p.w)(h)({zIndex:5,position:"relative",color:"black",":hover > img:first-child":{opacity:1},":hover > div > div":{marginLeft:"8px",opacity:1}},{selected:{color:"white"},disabled:{opacity:.5,":hover > img:first-child":{opacity:.5},":hover > div > div":{marginLeft:"8px",opacity:.5}}},"NavigationItem"),_=Object(p.w)(h)({height:"24px"},"SeparatorItem"),g=p.w.img({transition:"opacity 0.3s ease-out",width:"48px",height:"48px",marginLeft:"4px"},"Icon"),y=Object(p.w)(g)({opacity:.6,":hover":{opacity:1}},{selected:{opacity:0,":hover":{opacity:0}}},"InactiveIcon"),v=Object(p.w)(g)({position:"absolute",left:0,top:0,pointerEvents:"none",opacity:0},{selected:{opacity:1}},"ActiveIcon"),b=p.w.div({pointerEvents:"none",transition:"opacity 0.25s ease-in-out, left 0.25s ease-in-out, visibility 0.25s ease-in-out",opacity:0,position:"absolute",left:"35px",right:"-230px",bottom:0,top:0,height:"100%",visibility:"hidden"},{withTitle:{opacity:1,left:"55px",visibility:"visible"}},"TitleContainer"),k=p.w.div({transition:"margin-left 0.3s ease-in-out, opacity 0.3s ease-in-out",opacity:"0.5",color:"white",lineHeight:"48px",textAlign:"left",fontSize:"13px",textShadow:"0 0 4px rgba(0,0,0,0.50)",fontFamily:function(e){return e.regularFontFamily}},"Title")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),r=0;r<n;r++)i[r]=arguments[r];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return c._bindAll("_onEditorResize"),c._events=(a={},s=d.d.EVENTS.EDITOR_RESIZE,l=c._onEditorResize,s in a?o()(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["b"]),h(t,[{key:"_onEditorResize",value:function(e){var t=this.context.editor;t.getSDK().resizeTo(e),t.zoom.auto(!0,!0)}},{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this);var e=this.context,n=e.editor,i=e.options,o=this._canvas.offsetWidth,r=this._canvas.offsetHeight,s=n.getSDK().getRenderer();s.setCanvas(this._canvas),s.resizeTo(new d.v(o,r));var l=i.editor.image;n.setPadding([55,30,55,315]),n.setImage(l,!1)}},{key:"render",value:function(){var e=this;return d.l.createElement(_,{innerRef:function(t){e._canvas=t}})}}]),t}();m.contextTypes=d.b.contextTypes,t.a=m;var _=d.w.canvas({position:"absolute",top:0,left:0,width:"100%",height:"100%"},"Canvas")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(37),d=n(259),h=n(260),m=n(261),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function g(e,t,n){return t in e?o()(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,o=Array(i),r=0;r<i;r++)o[r]=arguments[r];var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(o)));return a._bindAll("_onUndoClick","_onExportClick","_onCloseClick","_onHistoryUpdated","_onFeaturesUpdated","_onRedoClick"),a._events=(g(n={},p.d.EVENTS.HISTORY_UPDATED,a._onHistoryUpdated),g(n,p.d.EVENTS.FEATURES_UPDATED,a._onFeaturesUpdated),n),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),_(t,[{key:"_onHistoryUpdated",value:function(){this.forceUpdate()}},{key:"_onFeaturesUpdated",value:function(){this.forceUpdate()}},{key:"_onUndoClick",value:function(){this.context.editor.history.undo(),this.forceUpdate()}},{key:"_onRedoClick",value:function(){this.context.editor.history.redo(),this.forceUpdate()}},{key:"_onCloseClick",value:function(){this.context.mediator.emit(p.d.EVENTS.CLOSE)}},{key:"_onExportClick",value:function(){var e=this,t=this.context,n=t.options,i=t.editor,o=t.screen,r=n.editor.export,a=f.a.instance.displayLoading(this._t("loading.exporting"));o.switchToControls("default",null,{},function(){setTimeout(function(){i.export(r.download).then(function(){a.close()}).catch(function(t){f.a.instance.displayError(e._t("errors.title"),t.message),a.close()})},100)})}},{key:"_renderItems",value:function(){var e=this.context.editor,t=e.history,n=e.features,i=e.getOptions().editor.displayCloseButton,o=p.l.createElement(h.a,{disabled:!t.isUndoAvailable(),src:this._getAssetPath("editor/canvas-header/undo.png",!0),onClick:this._onUndoClick,className:void 0}),r=p.l.createElement(h.a,{disabled:!t.isRedoAvailable(),src:this._getAssetPath("editor/canvas-header/redo.png",!0),onClick:this._onRedoClick,className:void 0});return[p.l.createElement(k,{key:"left",left:!0},o,r),p.l.createElement(b,{key:"center"},n.isEnabledByOptions("zoom")&&p.l.createElement(m.a,null)),p.l.createElement(k,{key:"right",right:!0},n.isEnabled("export")&&p.l.createElement(d.a,{title:this._t("pesdk.editor.button.export"),onClick:this._onExportClick,className:void 0}),i&&p.l.createElement(d.a,{title:this._t("pesdk.editor.button.close"),onClick:this._onCloseClick,className:void 0}))]}},{key:"render",value:function(){return p.l.createElement(v,{className:this.props.className},this._renderItems())}}]),t}();y.contextTypes=p.b.contextTypes,t.a=y;var v=p.w.div({position:"absolute",top:0,left:0,height:"48px",width:"100%",textAlign:"center",background:"linear-gradient(to bottom, rgba(20, 20, 21, 0.6) 0%, rgba(20, 20, 21, 0.17) 63%, rgba(20, 20, 21, 0) 100%)",zIndex:function(e){return e.zIndex("controlsOverlays")}},"CanvasHeaderControls"),b=p.w.div({position:"absolute",left:"50%",height:"100%"},"CenteredControlGroup"),k=p.w.ul({display:"table",tableLayout:"fixed",height:"100%",listStyleType:"none",padding:0,margin:0},{left:{float:"left"},right:{float:"right"}},"ControlGroup")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(128),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["a"]),d(t,[{key:"render",value:function(){return p.l.createElement(f.a,{onClick:this.props.onClick,className:this.props.className},p.l.createElement(m,{disabled:this.props.disabled},this.props.title))}}]),t}();h.contextTypes=f.a.contextTypes,t.a=h;var m=p.w.div({width:"100%",color:function(e){return e.textColor},textTransform:"uppercase",fontFamily:function(e){return e.uppercaseSemiBoldFontFamily},fontSize:"13px",padding:"0 17px",":focus":{outline:"none"}},{disabled:{opacity:.3}},"Button");h.Button=m},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(128),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["a"]),d(t,[{key:"render",value:function(){var e=this.props,t=e.onClick,n=e.className,i=e.disabled;return p.l.createElement(f.a,{disabled:i,onClick:i?void 0:t,className:n},p.l.createElement(m,{disabled:i,src:this.props.src}))}}]),t}();h.contextTypes=f.a.contextTypes,t.a=h;var m=p.w.img({width:"24px",height:"24px"},{disabled:{opacity:.25,cursor:"default"}},"Image")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function m(e,t,n){return t in e?o()(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var _=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,o=Array(i),r=0;r<i;r++)o[r]=arguments[r];var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(o)));return a._bindAll("_onZoomInClick","_onZoomOutClick","_onZoom","_onFeaturesUpdated"),a._events=(m(n={},d.d.EVENTS.ZOOM,a._onZoom),m(n,d.d.EVENTS.FEATURES_UPDATED,a._onFeaturesUpdated),n),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["b"]),h(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._renderZoomLevel&&this._renderZoomLevel!==this.context.editor.zoom.targetLevel&&this.forceUpdate()}},{key:"_onFeaturesUpdated",value:function(){this.forceUpdate()}},{key:"_onZoom",value:function(){this.forceUpdate()}},{key:"_onZoomInClick",value:function(){this._isZoomDisabled()||this.context.editor.zoom.in()}},{key:"_onZoomOutClick",value:function(){this._isZoomDisabled()||this.context.editor.zoom.out()}},{key:"_isZoomDisabled",value:function(){return!this.context.editor.features.isEnabled("zoom")}},{key:"render",value:function(){var e=this.context.editor,t=Math.round(100*e.zoom.targetLevel);return this._renderZoomLevel=e.zoom.targetLevel,d.l.createElement(g,{className:void 0},d.l.createElement(y,{disabled:this._isZoomDisabled(),"data-disabled":this._isZoomDisabled(),onClick:this._onZoomOutClick,className:void 0},"-"),d.l.createElement(v,null,t," %"),d.l.createElement(y,{disabled:this._isZoomDisabled(),"data-disabled":this._isZoomDisabled(),onClick:this._onZoomInClick,className:void 0},"+"))}}]),t}();_.contextTypes=d.b.contextTypes,t.a=_;var g=d.w.div({position:"relative",left:"-50%",height:"100%",color:function(e){return e.dimmedTextColor},fontSize:"13px",fontFamily:function(e){return e.regularFontFamily},display:"table",tableLayout:"fixed"},"ZoomControl"),y=d.w.div({display:"table-cell",verticalAlign:"middle",height:"100%",borderStyle:"none",background:"transparent",color:function(e){return e.dimmedTextColor},fontSize:"16px",padding:"0 10px",cursor:"pointer",opacity:1,":hover":{color:function(e){return e.textColor}},":focus":{outline:"none"}},{disabled:{opacity:.3,":hover":{color:function(e){return e.dimmedTextColor}}}},"Button"),v=d.w.div({display:"table-cell",verticalAlign:"middle"},"Label")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),m=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var _=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._bindAll(),r._canHideAfterLoaded=!1,r.state={startImageVisible:!0,idleImageVisible:!1,indicatorVisible:!0},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["b"]),h(t,[{key:"componentDidMount",value:function(){var e=this;m(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._imageSwitchTimeout=window.setTimeout(function(){e.setState({startImageVisible:!1,idleImageVisible:!0}),e._imageSwitchTimeout=null},1300)}},{key:"componentWillUnmount",value:function(){m(t.prototype.__proto__||f()(t.prototype),"componentWillUnmount",this).call(this),this._imageSwitchTimeout&&(window.clearTimeout(this._imageSwitchTimeout),this._imageSwitchTimeout=null)}},{key:"getChildContext",value:function(){return{ui:this.context.ui,options:this.context.options,mediator:this.context.mediator,appComponent:this.context.appComponent}}},{key:"render",value:function(){var e=this,t=this.state,n=t.startImageVisible,i=t.idleImageVisible,o=t.indicatorVisible;return d.l.createElement(g,{innerRef:function(t){e._container=t},className:void 0},d.l.createElement(y,{hidden:!o},d.l.createElement(b,{visible:n,src:this._getAssetPath("loading/start-solid.gif",!0)}),d.l.createElement(k,{visible:i,src:this._getAssetPath("loading/idle-solid.gif",!0)})))}}]),t}();_.contextTypes=d.b.contextTypes,_.childContextTypes={ui:d.k.object.isRequired,mediator:d.k.object.isRequired,options:d.k.object.isRequired,appComponent:d.k.object.isRequired};var g=d.w.div({width:"100%",height:"100%",position:"relative"},"Container"),y=d.w.div({transition:"opacity 0.3s ease-out",position:"absolute",top:"50%",left:"50%",marginLeft:"-52px",marginTop:"-52px",width:"104px",height:"104px",opacity:1},{hidden:{opacity:0}},"ImageContainer"),v=d.w.img({position:"absolute",top:0,left:0,width:"104px",height:"104px",opacity:0},{visible:{opacity:1}},"Image"),b=Object(d.w)(v)({},"StartImage"),k=Object(d.w)(v)({},"IdleImage");t.a=Object(d.A)(_)},function(e,t,n){"use strict";t.a=function(e,t){e.global(t+" html,"+t+" body,"+t+" div,"+t+" span,"+t+" applet,"+t+" object,"+t+" iframe,"+t+" h1,"+t+" h2,"+t+" h3,"+t+" h4,"+t+" h5,"+t+" h6,"+t+" p,"+t+" blockquote,"+t+" pre,"+t+" a,"+t+" abbr,"+t+" acronym,"+t+" address,"+t+" big,"+t+" cite,"+t+" code,"+t+" del,"+t+" dfn,"+t+" em,"+t+" img,"+t+" ins,"+t+" kbd,"+t+" q,"+t+" s,"+t+" samp,"+t+" small,"+t+" strike,"+t+" strong,"+t+" sub,"+t+" sup,"+t+" tt,"+t+" var,"+t+" b,"+t+" u,"+t+" i,"+t+" center,"+t+" dl,"+t+" dt,"+t+" dd,"+t+" ol,"+t+" ul,"+t+" li,"+t+" fieldset,"+t+" form,"+t+" label,"+t+" legend,"+t+" table,"+t+" caption,"+t+" tbody,"+t+" tfoot,"+t+" thead,"+t+" tr,"+t+" th,"+t+" td,"+t+" article,"+t+" aside,"+t+" canvas,"+t+" details,"+t+" embed,"+t+" figure,"+t+" figcaption,"+t+" footer,"+t+" header,"+t+" hgroup,"+t+" menu,"+t+" nav,"+t+" output,"+t+" ruby,"+t+" section,"+t+" summary,"+t+" time,"+t+" mark,"+t+" audio,"+t+" video{margin:0;padding:0;border:0;font:inherit;font-size:100%;vertical-align:baseline}"+t+" html{line-height:1}"+t+" ol,"+t+" ul{list-style:none}"+t+" table{border-collapse:collapse;border-spacing:0}"+t+" caption,"+t+" th,"+t+" td{text-align:left;font-weight:400;vertical-align:middle}"+t+" q,"+t+" blockquote{quotes:none}"+t+" q:before,"+t+" q:after,"+t+" blockquote:before,"+t+' blockquote:after{content:"";content:none}'+t+" a img{border:none}"+t+" article,"+t+" aside,"+t+" details,"+t+" figcaption,"+t+" figure,"+t+" footer,"+t+" header,"+t+" hgroup,"+t+" main,"+t+" menu,"+t+" nav,"+t+" section,"+t+" summary{display:block}@media only screen and (min-width: 768px){"+t+"{-webkit-border-radius:5px;-moz-border-radius:5px;-ms-border-radius:5px;-o-border-radius:5px;border-radius:5px}}"+t+","+t+" *{box-sizing:border-box}")}},function(e,t,n){"use strict";t.a=function(e,t){e.global("\n    @-webkit-keyframes bouncingLoadingIndicator {\n      0% {\n        transform: translateY(0);\n      }\n      40% {\n        transform: translateY(10px);\n      }\n      60% {\n        transform: translateY(-5px);\n      }\n      80%{\n        transform: translateY(0);\n      }\n    }\n  ")}},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(110),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(e,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).call(this));return o._ui=e,o._options=n,o._mediator=i,o._assets={},o._editor=new f.a(e,n,i,!0),o._assets=["editor/canvas-header/undo.png","editor/navigation/nav-gradient.png","editor/controls/shared/checkbox.png","editor/controls/shared/checkbox-active.png","editor/controls/shared/tiled-background.png"],o._appendControlsAssets(),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["e"]),d(t,[{key:"_appendControlsAssets",value:function(){var e=this._editor.controls.getAvailable();for(var t in e){var n=e[t];this._editor.controls.isEnabled(t)&&(this._assets=this._assets.concat(n.getPreloadAssets(this._editor)),this._assets.push(n.iconPath),this._assets.push(n.activeIconPath))}}},{key:"load",value:function(){var e=this,t=this._assets.slice(),n=t.length,i=0,o=function(){i++,e.emit("progress",i/n),i===n&&e.emit("done")},r=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"timed out";p.h.warn("Preloader",e+" "+t+"."),o()};t.forEach(function(t){var n=!0;Array.isArray(t)&&(n=t[1],t=t[0]);var i=!0;p.q.isArray(t)&&(i=t[1],t=t[0]);var a,s=e._ui.getAssetPath(t,n,!i),l=new window.Image,c=(a=s,window.setTimeout(function(){r(a)},5e3));l.addEventListener("load",function(){window.clearTimeout(c),e._assets[t]=l,o()}),l.addEventListener("error",function(){window.clearTimeout(c),r(s,"was not found")}),l.crossOrigin=p.q.getCrossOriginValue(e._options.crossOrigin),l.src=s})}},{key:"getAsset",value:function(e){return this._assets[e]}}]),t}();t.a=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(267),o=n(37),r=n(271),a=n(130),s=n(272),l=n(123),c=n(51),u=n(50),p=n(115),f=n(114),d=n(121),h=n(122),m=n(126),_=n(77),g=n(273),y=n(274),v=n(275),b=n(52),k=n(127),w=n(277),x=n(278),S=n(279),C=n(78),E=n(81),T=n(283),O=n(289),R=n(290),I=n(291),D=n(23),P=n(292),B=n(294),A=n(49),F=n(131);n.d(t,"Frame",function(){return l.a}),n.d(t,"SharedStateComponent",function(){return b.a}),n.d(t,"ControlsComponent",function(){return k.a}),n.d(t,"CollapseSectionComponent",function(){return w.a}),n.d(t,"ScrollableListComponent",function(){return x.a}),n.d(t,"SliderControlComponent",function(){return S.a}),n.d(t,"CanvasControlsComponent",function(){return C.a}),n.d(t,"ValueSelectionComponent",function(){return E.a}),n.d(t,"ColorSelectionComponent",function(){return T.a}),n.d(t,"ButtonComponent",function(){return O.a}),n.d(t,"DropdownComponent",function(){return R.a}),n.d(t,"TextInputComponent",function(){return I.a}),n.d(t,"DraggableComponent",function(){return D.a}),n.d(t,"InvisibleUploadComponent",function(){return P.a}),n.d(t,"CanvasOverlayControlsComponent",function(){return B.a}),n.d(t,"Transition",function(){return A.a}),n.d(t,"CheckboxComponent",function(){return F.a}),n.d(t,"Library",function(){return i}),n.d(t,"ModalManager",function(){return o.a}),n.d(t,"DelayedJobQueue",function(){return r.a}),n.d(t,"GroupedControlsStyles",function(){return a}),n.d(t,"ControlsStyles",function(){return s}),n.d(t,"FontManager",function(){return c.a}),n.d(t,"StickerManager",function(){return u.a}),n.d(t,"BrushManager",function(){return p.a}),n.d(t,"FilterManager",function(){return f.a}),n.d(t,"FrameManager",function(){return d.a}),n.d(t,"OverlayManager",function(){return h.a}),n.d(t,"TextDesignManager",function(){return _.a}),n.d(t,"TransformRatioManager",function(){return m.a}),n.d(t,"BaseControls",function(){return g.a}),n.d(t,"LoadingIndicatorComponent",function(){return y.a}),n.d(t,"SuffixedTextInputComponent",function(){return v.a})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(268);n.d(t,"Provider",function(){return i.a});var o=n(269);n.d(t,"Category",function(){return o.a});var r=n(270);n.d(t,"Image",function(){return r.a})},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(8),a=n.n(r),s=n(4),l=n(48),c=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return c(e,[{key:"_loadJSON",value:function(e){return new l.a(e).load()}},{key:"getCategories",value:function(){return s.h.warn(this.constructor.name,"`getCategories` is abstract and not implemented."),a.a.resolve([])}},{key:"searchImages",value:function(e){return s.h.warn(this.constructor.name,"`searchImages` is abstract and not implemented."),a.a.resolve([])}}]),e}();t.a=u},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._coverImage=null,r._coverImageLoaded=!1,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,d["p"].Configurable),h(t,[{key:"loadCoverImage",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"anonymous";return new u.a(function(n,i){var o=new window.Image;o.addEventListener("load",function(){e._coverImageLoaded=!0,n(o)}),o.addEventListener("error",function(){i(new Error("Failed to load image at "+e.getCoverImage()))}),o.crossOrigin=d.q.getCrossOriginValue(t),o.src=e.getCoverImage(),e._coverImage=o})}},{key:"isCoverImageLoaded",value:function(){return this._coverImage&&this._coverImageLoaded}}]),t}();t.a=m,m.prototype.availableOptions={name:{type:d.i.STRING,required:!0},coverImage:{type:d.i.STRING,required:!0}}},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._thumbImage=null,r._thumbImageLoaded=!1,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,d["p"].Configurable),h(t,[{key:"loadThumb",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"anonymous";return new u.a(function(n,i){var o=new window.Image;o.addEventListener("load",function(){e._thumbImageLoaded=!0,n(o)}),o.addEventListener("error",function(){i(new Error("Failed to load image at "+e.getThumbUrl()))}),o.crossOrigin=d.q.getCrossOriginValue(t),o.src=e.getThumbUrl(),e._thumbImage=o})}},{key:"isThumbLoaded",value:function(){return this._thumbImage&&this._thumbImageLoaded}},{key:"getThumbImage",value:function(){return this._thumbImage}}]),t}();t.a=m,m.prototype.availableOptions={category:{type:d.i.OBJECT,required:!0},title:{type:d.i.STRING},rawUrl:{type:d.i.STRING,required:!0},thumbUrl:{type:d.i.STRING},authorName:{type:d.i.STRING},authorAvatar:{type:d.i.STRING}}},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var d=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).call(this));return i._jobs=e,i._options=p.q.defaults(n,{minDelay:400}),i._running=!1,i._currentJob=null,i._currentJobIndex=0,i._tick=i._tick.bind(i),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["e"]),f(t,[{key:"start",value:function(){this._running=!0,this._lastJobFinished=Object(p.y)(),this._tick()}},{key:"_tick",value:function(){var e=this;if(this._running){if(!this._currentJob){if(this._currentJob=this._jobs[this._currentJobIndex],!this._currentJob)return this.emit("done"),void this.stop();this._currentJob.fn().then(function(){for(var t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];var o=function(){e.emit.apply(e,["job-done",e._currentJob].concat(n)),e._lastJobFinished=Object(p.y)(),e._currentJob=null};if(Object(p.y)()-e._lastJobFinished<e._options.minDelay){var r=e._options.minDelay-(Object(p.y)()-e._lastJobFinished);setTimeout(o,r)}else o()}).catch(function(t){e.emit("error",e._currentJob,t),e._currentJob=null}),this._currentJobIndex++}Object(p.z)(this._tick)}}},{key:"stop",value:function(){this._running=!1}},{key:"dispose",value:function(){this._jobs=[],this._running=!1}}]),t}();t.a=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n.d(t,"FullContainer",function(){return o}),n.d(t,"ControlItem",function(){return r}),n.d(t,"ControlItemTextStyles",function(){return a}),n.d(t,"ControlItemTitle",function(){return s}),n.d(t,"ControlItemActiveOverlay",function(){return l}),n.d(t,"ControlItemOverlay",function(){return c}),n.d(t,"Knob",function(){return u}),n.d(t,"PlainControlItem",function(){return p}),n.d(t,"PlainControlItemBackground",function(){return f});var i=n(4),o=i.w.css({position:"absolute",left:0,top:0,width:"100%",height:"100%"},"FullContainer"),r=i.w.css({transition:function(e){return"color "+e.transitionDuration+"s ease-out"},position:"relative",display:"block",height:"80px",width:"100%",marginBottom:"8px",color:function(e){return e.textColor},boxShadow:"0 2px 2px 0 rgba(0,0,0,0.10), 0 3px 4px 0 rgba(0,0,0,0.30), 0 4px 6px 0 rgba(0,0,0,0.30)",background:function(e){return e.secondaryControlsBackgroundColor},borderRadius:"2px",cursor:"pointer",":after":{transition:function(e){return"all "+e.transitionDuration+"s ease-out"},content:'""',display:"block",zIndex:"1",position:"absolute",left:"0",top:"0",right:"0",bottom:"0",border:"1px solid white",borderRadius:"2px",opacity:0},":hover:after":{transition:function(e){return"all "+e.transitionDuration+"s ease-in"},opacity:1}},{animated:{overflow:"hidden",opacity:0,transition:function(e){return"all "+e.transitionDuration+"s ease-out"},top:"100px"},selected:{boxShadow:"0 2px 2px 0 rgba(0,0,0,0.30), 0 4px 6px 0 rgba(0,0,0,0.30), 0 6px 8px 0 rgba(0,0,0,0.30), 0 8px 10px 0 rgba(0,0,0,0.30)",zIndex:2,":hover:after":{opacity:0}},visible:{transform:"translateY(-100px)",opacity:1}},"ControlItem"),a=i.w.css({lineHeight:"13px",fontSize:"13px",letterSpacing:"0.18px",textShadow:"0 1px 2px rgba(0,0,0,0.24)",textAlign:"center",fontFamily:function(e){return e.regularFontFamily}},"ControlItemTextStyles"),s=i.w.css({display:"block",zIndex:"2",position:"absolute",left:"0",right:"0",bottom:"10px",lineHeight:"13px",fontSize:"13px",letterSpacing:"0.18px",textShadow:"0 0 4px rgba(0, 0, 0, 0.5)",textAlign:"center",opacity:.8,fontFamily:function(e){return e.regularFontFamily},transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"}},{hovered:{opacity:1,transition:function(e){return"opacity "+e.transitionDuration+"s ease-in"}}},"ControlItemTitle"),l=i.w.css({zIndex:"1",position:"absolute",top:"0",right:"0",left:"0",bottom:"0",border:function(e){return"1px solid "+e.highlightColor},background:"rgba(0, 0, 0, 0.6)",boxShadow:"0 2px 2px 0 rgba(0, 0, 0, 0.15), 0 2px 10px 0 rgba(0, 0, 0, 0.60)",borderRadius:"2px",opacity:0,display:"none",transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"}},{visible:{opacity:1,transition:function(e){return"opacity "+e.transitionDuration+"s ease-in"}},rendered:{display:"block"}},"ControlItemActiveOverlay"),c=i.w.css({zIndex:"1",position:"absolute",width:"100%",height:"100%",backgroundImage:"linear-gradient(-180deg, rgba(0,0,0,0.00) 0%, rgba(0,0,0,0.69) 100%)",borderRadius:"2px"},"ControlItemOverlay"),u=i.w.css({borderRadius:"50%",background:function(e){return e.controlsKnobColor},boxShadow:"0 2px 2px 0 rgba(0, 0, 0, 0.24)",width:"16px",height:"16px",marginTop:"-8px",marginLeft:"-8px",cursor:"pointer",position:"absolute"},"Knob"),p=i.w.css({opacity:"1",textAlign:"center",cursor:"pointer",marginBottom:"8px",background:"rgba(255, 255, 255, 0.04)",border:"1px solid transparent",transition:function(e){return"all "+e.transitionDuration+"s ease-out"},"&:hover":{border:"1px solid rgba(255, 255, 255, 0.08)",transition:function(e){return"all "+e.transitionDuration+"s ease-in"}},color:function(e){return e.textColor}},{threeColumns:{width:"55px",height:"55px",marginLeft:"8px",marginBottom:"8px"},twoColumns:{width:"80px",height:"80px",marginLeft:"8px",marginBottom:"8px"},withText:{verticalAlign:"center",fontFamily:function(e){return e.regularFontFamily},color:"white",fontSize:"14px",paddingTop:"32px"},selected:{transition:function(e){return"all "+e.transitionDuration+"s ease-in"},border:function(e){return"1px solid "+e.primaryColor},background:function(e){return"rgba("+e.primaryColorRGB+", 0.14)"},"&:hover":{border:function(e){return"1px solid "+e.primaryColor},background:function(e){return"rgba("+e.primaryColorRGB+", 0.14)"}}}},"PlainControlItem"),f=i.w.css({padding:"10px",borderRadius:"1px",border:"1px solid rgba(255, 255, 255, 0.08)",":hover":{background:"rgba(255, 255, 255, 0.04)"}},{selected:{background:function(e){return"rgba("+e.highlightColorRGB+", .2)"},borderColor:function(e){return""+e.highlightColor},":hover":{background:function(e){return"rgba("+e.highlightColorRGB+", .2)"}}}},"PlainControlItemBackground")},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(8),l=n.n(s),c=n(4),u=n(7),p=(n.n(u),n(78)),f=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.context=t,this.sharedState=n,this._options=i,this._mediator=t.mediator,this.skipHistory=!1,this._initialOptions={},this._onOperationRemoved=this._onOperationRemoved.bind(this),this._onOperationUpdated=this._onOperationUpdated.bind(this)}return d(e,[{key:"_getAssetPath",value:function(){var e;return(e=this.context.ui).getAssetPath.apply(e,arguments)}},{key:"_t",value:function(e,t){return this.context.ui.translate(e,t)}},{key:"_onOperationRemoved",value:function(e){var t=e.constructor.identifier;this.constructor.updatableOperations.indexOf(t)>=0&&(this.constructor.switchToDefaultControlsOnRemoval?(this.skipHistory=!0,this.context.screen.switchToControls("default")):(this.onOperationRemoved(e),this.updateSharedState(!0),this.context.editor.render()))}},{key:"onOperationRemoved",value:function(e){}},{key:"_onOperationUpdated",value:function(e,t){var n=e.constructor.identifier;this.constructor.updatableOperations.indexOf(n)>=0&&this.onOperationUpdated(e,t)}},{key:"updateSharedState",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.context.editor,n=this.constructor.mapOperationsToSharedState(t.operations,e,f({},this.sharedState.getState()));this.sharedState.set(n)}},{key:"onOperationUpdated",value:function(e){var t=this.context.editor;this.updateSharedState(!1),t.render()}},{key:"onEnter",value:function(){var e=this.context.editor.history,t=this.sharedState.get("forceCrop");e.hasInitialState()||t||e.addSnapshot("global"),this._saveOperationsOptions(),this.updateSharedState(!0),this._onEnter(),this.updateSharedState(!1),this._mediator.on(c.d.EVENTS.OPERATION_REMOVED,this._onOperationRemoved),this._mediator.on(c.d.EVENTS.OPERATION_UPDATED,this._onOperationUpdated),this._mediator.on(c.d.EVENTS.OPERATION_CREATED,this._onOperationUpdated)}},{key:"_saveOperationsOptions",value:function(){var e=this,t=this.context.editor.operations;this._initialOptions={},this.constructor.updatableOperations.forEach(function(n){var i=t.get(n);i&&(e._initialOptions[n]=i.serializeOptions())})}},{key:"_shouldAddGlobalHistorySnapshot",value:function(){var e=this,t=this.context.editor,n=t.history,i=t.operations,o=u.Utils.Array.last(n.getItems().filter(function(e){return"global"===e.scope})),r=function(e,t){return!(!e&&!t)&&(!(!e||t||!e.hasChanges())||(!(e||!t)||!(!e||!t||e.optionsEqual(t))))};return this.constructor.updatableOperations.some(function(t){var n=e._initialOptions[t],a=o?o.snapshot.operations[t]:null,s=i.get(t);return r(s,n)&&r(s,a)})}},{key:"_onEnter",value:function(){}},{key:"onLeave",value:function(){var e=this;return this.onBeforeLeave().then(function(t){"boolean"==typeof t&&(t={leave:t});var n=t,i=n.leave,o=n.data;if(!i)return!1;e._mediator.off(c.d.EVENTS.OPERATION_REMOVED,e._onOperationRemoved),e._mediator.off(c.d.EVENTS.OPERATION_UPDATED,e._onOperationUpdated),e._mediator.off(c.d.EVENTS.OPERATION_CREATED,e._onOperationUpdated),e._onLeave(o||{});var r=e.context.options,a=e.context.editor,s=a.history,l=a.operations;if(e._shouldAddGlobalHistorySnapshot()){var u=e._getGlobalHistoryData?e._getGlobalHistoryData():null;e.addGlobalHistorySnapshot(void 0,!1,u)}return l.removeUnused(),"global"===r.editor.undoMode&&s.removeControls(e.constructor.identifier,"local"),"local"===r.editor.undoMode&&s.removeControls(e.constructor.identifier,"global"),!0})}},{key:"_getGlobalHistoryData",value:function(){}},{key:"_onLeave",value:function(){}},{key:"onBeforeLeave",value:function(){return this._onBeforeLeave()}},{key:"_onBeforeLeave",value:function(){return l.a.resolve(!0)}},{key:"addLocalHistorySnapshot",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.context.editor.history.addSnapshot("local",t,e,this.constructor.identifier,n)}},{key:"addGlobalHistorySnapshot",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.context.editor.history.addSnapshot("global",t,e,this.constructor.identifier,n)}},{key:"getGlobalToolState",value:function(){return this.context.globalState.get(this.constructor.identifier)}},{key:"setGlobalToolState",value:function(e){var t,n,i;this.context.globalState.set((t={},n=this.constructor.identifier,i=e,n in t?a()(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i,t))}}],[{key:"mapOperationsToSharedState",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1],arguments.length>2&&void 0!==arguments[2]&&arguments[2]}},{key:"getPreloadAssets",value:function(){return[]}},{key:"clickAtPosition",value:function(e){return!1}},{key:"isEnabled",value:function(e){var t=this.constructor.identifier;return e.isToolEnabled(t)&&e.isToolAllowed(t)}}]),e}();h.identifier=null,h.controlsComponent=null,h.canvasControlsComponent=p.a,h.defaultOptions={},h.requiredOperations=[],h.updatableOperations=[],h.switchToDefaultControlsOnRemoval=!0,t.a=h},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),f(t,[{key:"render",value:function(){var e=function(e){return{animationDelay:.1*e+"s"}};return p.l.createElement(h,{styles:this.props.styles},p.l.createElement(m,{style:e(0)}),p.l.createElement(m,{style:e(1)}),p.l.createElement(m,{style:e(2)}))}}]),t}();d.contextTypes=p.b.contextTypes,t.a=d;var h=p.w.div({width:"100%",height:"50px",textAlign:"center",marginTop:"24px"},"LoadingIndicatorContainer");d.RootElement=h;var m=p.w.div({animationName:"bouncingLoadingIndicator",animationDuration:"1.2s",animationIterationCount:"infinite",width:"2px",height:"2px",backgroundColor:"white",display:"inline-block",boxShadow:function(e){return e.defaultShadow},marginRight:"7px","&:last-child":{marginRight:0}},"Ball")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(276),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onClick"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),d(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.value!==e.value||this.props.disabled!==e.disabled}},{key:"_onClick",value:function(){this._input.focus()}},{key:"render",value:function(){var e=this;return p.l.createElement(m,{className:this.props.className,onClick:this._onClick},p.l.createElement(g,{value:this.props.value,onLiveChange:this.props.onLiveChange,onChange:this.props.onChange,disabled:this.props.disabled,innerRef:function(t){e._input=t},name:this.props.name}),p.l.createElement(_,null,this.props.suffix))}}]),t}();h.contextTypes=p.b.contextTypes,t.a=h;var m=p.w.div({display:"inline-block",borderBottom:"1px solid rgba(255, 255, 255, 0.1)",padding:"5px",cursor:"pointer"},"Container");h.RootElement=m;var _=p.w.div({display:"inline-block",color:function(e){return e.dimmedTextColor},fontFamily:function(e){return e.regularFontFamily},fontSize:"14px",marginLeft:"5px"},"Suffix"),g=Object(p.w)(f.a)({backgroundColor:"transparent",borderBottom:"none",paddingBottom:0,fontSize:"14px",color:function(e){return e.textColor},":focus":{outline:"none"}},"Input")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(53),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),_=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var g=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r.state.width=0,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["a"]),m(t,[{key:"_onInputChange",value:function(e){_(t.prototype.__proto__||f()(t.prototype),"_onInputChange",this).call(this,e),this._adjustWidth(e.target.value)}},{key:"shouldComponentUpdate",value:function(e,n){return _(t.prototype.__proto__||f()(t.prototype),"shouldComponentUpdate",this).call(this,e,n)||this.state.width!==n.width}},{key:"componentWillReceiveProps",value:function(e){this._adjustWidth(e.value)}},{key:"componentDidMount",value:function(){_(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._textRuler=document.createElement("div"),d.u.styleElement(this._textRuler,{position:"absolute",top:"0",left:"0",display:"inline-block",zIndex:10}),this._adjustWidth(this.props.value)}},{key:"_getInputStyle",value:function(){var e=this.state.width;return{width:e,minWidth:e}}},{key:"_adjustWidth",value:function(e){document.body.appendChild(this._textRuler);var t=d.u.getStyleObject(this._input);d.u.styleElement(this._textRuler,{font:t.font}),this._textRuler.innerText=e,this.setState({width:this._textRuler.offsetWidth}),this._textRuler.parentNode.removeChild(this._textRuler)}}]),t}();g.contextTypes=d.b.contextTypes,t.a=g,g.RootElement=Object(d.w)(h.a.RootElement)({boxSizing:"initial",height:"19px"},"AutoSizeNumericInputComponent")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(130),d=n(49),h=n(131),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r.state={expanded:r.props.expanded||r.props.alwaysExpanded||!1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),m(t,[{key:"_onClick",value:function(){var e=!this.state.expanded;this.props.alwaysExpanded||this.setState({expanded:e}),this.props.onToggle&&this.props.onToggle(e)}},{key:"componentWillReceiveProps",value:function(e){this.props.expanded!==e.expanded&&this.setState({expanded:e.expanded})}},{key:"render",value:function(){var e=this.props,t=e.alwaysExpanded,n=e.toggleable,i=e.className,o=this.state.expanded;return p.l.createElement(g,{styles:this.props.styles,className:i},p.l.createElement(v,{onClick:this._onClick.bind(this)},!t&&!n&&p.l.createElement(k,{turnUp:!o}),n&&p.l.createElement(w,{checked:o,className:void 0}),p.l.createElement(y,null,this.props.title)),p.l.createElement(d.a,{active:o,enterProp:"rendered",enterDuration:1e3*this.context.theme.transitionDuration,appearProp:"visible",appearDuration:1e3*this.context.theme.transitionDuration,leaveDuration:1e3*this.context.theme.transitionDuration},p.l.createElement(b,{"data-expanded":o,className:void 0},this.props.children)))}}]),t}();_.contextTypes=p.b.contextTypes,t.a=_;var g=Object(p.w)(f.ControlGroup).div({marginBottom:"10px",padding:"20px"},"Section");_.RootElement=g;var y=Object(p.w)(f.ControlGroupTitle).div({transition:"margin-bottom .2s 0s",marginBottom:"20px",padding:"0 5px"},"SectionTitle"),v=p.w.div({position:"relative",cursor:"pointer"},"SectionHeader"),b=p.w.div({transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"},padding:"5px",opacity:0,display:"none"},{rendered:{display:"block"},visible:{display:"block",opacity:1,transition:function(e){return"opacity "+e.transitionDuration+"s ease-in"}}},"SectionContent"),k=p.w.div({transition:"transform .5s",transform:"rotate(0deg)",float:"right",borderLeft:"6px solid transparent",borderRight:"6px solid transparent",borderTop:function(e){return"8px solid "+e.dimmedTextColor}},{turnUp:{transform:"rotate(-90deg)"}},"ArrowDown"),w=Object(p.w)(h.a)({float:"right",textAlign:"right"},"Checkbox")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(79),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["a"]),m(t,[{key:"_renderChild",value:function(e){return function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0}(t.prototype.__proto__||f()(t.prototype),"_renderChild",this).call(this,d.l.createElement(g,{innerRef:this.props.innerListRef},e))}}]),t}();_.RootElement=h.a.RootElement,_.contextTypes=h.a.contextTypes;var g=d.w.div({position:"absolute",top:0,left:0,width:"100%",height:"100%",overflow:"auto"},"ListWrapper"),y=Object(d.w)(_)({height:"100%",position:"relative",overflow:"hidden",display:"table-cell"},"ScrollableList");t.a=y},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(81),m=n(129),_=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},g=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var y=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["a"]),g(t,[{key:"_buildSliderProps",value:function(){var e=this.props,t=e.minValue,n=e.maxValue,i=e.middleDot,o=e.onSliderValueChange;return{minValue:t,maxValue:n,value:e.value,middleDot:i,onChange:o,disabled:e.disabled}}},{key:"_renderLeftPart",value:function(){var e=function(e,t){var n={};for(var i in e)t.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i]);return n}(this._buildSliderProps(),[]);return d.l.createElement(m.a,_({},e,{darkBackground:!0}))}}]),t}();y.contextTypes=h.a.contextTypes,t.a=y},function(e,t,n){e.exports={default:n(281),__esModule:!0}},function(e,t,n){n(282),e.exports=n(9).Number.isNaN},function(e,t,n){var i=n(12);i(i.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(284),d=n(49),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onDocumentClick","_onColorChange"),r.state={colorPickerVisible:!1,colors:r._getDefaultColors(r.props.value.clone()),selectedColorIndex:0},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),h(t,[{key:"componentWillReceiveProps",value:function(e){if(!this.state.colorPickerVisible&&!this.props.value.equals(e.value)){var t=-1;this.state.colors.forEach(function(n,i){n.equals(e.value)&&(t=i)}),-1===t?this.setState({selectedColorIndex:0,colors:this._getDefaultColors(e.value.clone())}):this.setState({selectedColorIndex:t})}}},{key:"componentDidMount",value:function(){document.addEventListener("mousedown",this._onDocumentClick)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("mousedown",this._onDocumentClick)}},{key:"_onDocumentClick",value:function(e){var t=this;if(this.state.colorPickerVisible){for(var n=e.target;n;n=n.parentNode)if(n===this._root)return;this.setState({colorPickerVisible:!1},function(){t.props.onColorPickerToggle&&t.props.onColorPickerToggle(!1)})}}},{key:"_onClick",value:function(e){var t=this,n={colorPickerVisible:this.state.colorPickerVisible,selectedColorIndex:e};e===this.state.selectedColorIndex?n.colorPickerVisible=!this.state.colorPickerVisible:n.colorPickerVisible=!1,this.props.onChange&&this.props.onChange(this.state.colors[e]),this.setState(n,function(){t.props.onColorPickerToggle&&t.props.onColorPickerToggle(n.colorPickerVisible)})}},{key:"_onColorChange",value:function(e){this.props.onChange&&this.props.onChange(e),this.state.colors[this.state.selectedColorIndex].copy(e),this.forceUpdate()}},{key:"_getDefaultColors",value:function(e){return[e,p.c.fromHex("6688FA"),p.c.fromHex("8767FA"),p.c.fromHex("DC67FA"),p.c.fromHex("FE68C9"),p.c.fromHex("FE6788"),p.c.fromHex("FE896B")]}},{key:"_renderColorBubbles",value:function(){var e=this,t=this._getAssetPath("editor/controls/shared/tiled-background.png",!0),n=[];return this.state.colors.forEach(function(i,o){var r=o===e.state.selectedColorIndex;n.push(p.l.createElement(g,{key:o,selected:r,className:void 0},p.l.createElement(y,null,p.l.createElement(v,{style:{backgroundImage:"url("+t+")"}}),p.l.createElement(b,{style:{backgroundColor:i.toRGBA()},onClick:e._onClick.bind(e,o),className:void 0},p.l.createElement(k,{selected:r}),p.l.createElement(k,{selected:r}),p.l.createElement(k,{selected:r}))),p.l.createElement(d.a,{active:r&&e.state.colorPickerVisible,enterProp:"rendered",enterDuration:1e3*e.context.theme.transitionDuration,appearProp:"visible",appearDuration:1e3*e.context.theme.transitionDuration,leaveDuration:1e3*e.context.theme.transitionDuration},p.l.createElement(f.a,{color:i,onChange:e._onColorChange}))))}),n}},{key:"render",value:function(){var e=this;return p.l.createElement(_,{className:void 0,styles:this.props.styles,innerRef:function(t){e._root=t}},this._renderColorBubbles())}}]),t}();m.contextTypes=p.b.contextTypes,m.propTypes={colors:p.k.array,value:p.k.object.isRequired},t.a=m;var _=p.w.div({textAlign:"left",width:"100%"},"ColorSelection");m.RootElement=_;var g=p.w.div({transition:"width .1s ease-in-out .1s",display:"inline-block",width:"20px",height:"20px",marginRight:"4px",borderRadius:"10px",cursor:"pointer",padding:"2px",backgroundColor:function(e){return e.controlsLightBackgroundColor},":last-child":{marginRight:0}},{selected:{backgroundColor:function(e){return e.highlightColor},":last-child":{marginRight:0},width:"36px"}},"ColorSelectionBubble"),y=p.w.div({position:"relative",width:"100%",height:"100%"},"ColorSelectionPreview"),v=p.w.div({position:"absolute",left:0,top:0,width:"100%",height:"100%",borderRadius:"8px",backgroundSize:"8px"},"ColorSelectionPreviewContent"),b=Object(p.w)(v)({textAlign:"center",cursor:"pointer",boxShadow:"0 1px 1px 0 rgba(0, 0, 0, 0.11), 0 1px 3px 0 rgba(0, 0, 0, 0.46)"},"ColorSelectionBubbleContent"),k=p.w.div({transition:"opacity .1s ease-in-out",opacity:0,display:"inline-block",width:"2px",height:"2px",borderRadius:"1px",marginRight:"3px",marginBottom:"3px",background:"white",boxShadow:"0 1px 2px 0 rgba(0, 0, 0, 0.60)",":last-child":{marginRight:0}},{selected:{transition:"opacity .1s ease-in-out .1s",opacity:1}},"Dot")},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(106),a=n.n(r),s=n(107),l=n.n(s),c=n(0),u=n.n(c),p=n(2),f=n.n(p),d=n(3),h=n.n(d),m=n(1),_=n.n(m),g=n(4),y=n(285),v=n(286),b=n(287),k=n(132),w=n(288),x=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},S=function(){return function(e,t){if(Array.isArray(e))return e;if(a()(Object(e)))return function(e,t){var n=[],i=!0,o=!1,r=void 0;try{for(var a,s=l()(e);!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){o=!0,r=e}finally{try{!i&&s.return&&s.return()}finally{if(o)throw r}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),C=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),u()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var E=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||_()(t)).call.apply(e,[this].concat(i)));r._bindAll("_onHexValueChange","_onAlphaChange","_onHueChange","_onSaturationBrightnessChange");var a=r.props.color.clone(),s=a.toHSV(),l=S(s,3),c=l[0],u=l[1],p=l[2];return r.state={color:a,hue:c,saturation:u,brightness:p},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=h()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(f.a?f()(e,t):e.__proto__=t)}(t,g["b"]),C(t,[{key:"_onHexValueChange",value:function(e){if(!e.match(/^([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i))return this.forceUpdate();3===e.length&&(e+=e);var t=g.c.fromHex(e),n=this.state.color;n.copy(t),this.props.onChange&&this.props.onChange(n.clone());var i=n.toHSV(),o=S(i,3),r=o[0],a=o[1],s=o[2];this.setState({hue:r,saturation:a,brightness:s})}},{key:"_onAlphaChange",value:function(e){var t=this.state.color;t.a=e,this.props.onChange&&this.props.onChange(t.clone()),this.forceUpdate()}},{key:"_onHueChange",value:function(e){var t=this.state.color,n=t.toHSV(),i=S(n,3),o=i[1],r=i[2],a=t.a;t.fromHSV(e,o,r),t.a=a,this.props.onChange&&this.props.onChange(t.clone()),this.setState({color:t,hue:e})}},{key:"_onSaturationBrightnessChange",value:function(e,t){var n=this.state.color,i=n.a;n.fromHSV(this.state.hue,e,t),n.a=i,this.props.onChange&&this.props.onChange(n.clone()),this.setState({color:n,saturation:e,brightness:t})}},{key:"_changeColorComponent",value:function(e,t){var n=this.state.color;n[e]=t/255,this.props.onChange&&this.props.onChange(n.clone());var i=n.toHSV(),o=S(i,3),r=o[0],a=o[1],s=o[2];this.setState({hue:r,saturation:a,brightness:s})}},{key:"_renderContent",value:function(){var e=this.state,t=e.hue,n=e.saturation,i=e.brightness,o=e.color,r={hue:t,saturation:n,brightness:i};return[g.l.createElement(O,{key:"arrow"}),g.l.createElement(R,{key:"colorPicker",className:void 0},g.l.createElement(I,x({},r,{onChange:this._onSaturationBrightnessChange})),g.l.createElement(D,x({},r,{onChange:this._onHueChange})),g.l.createElement(P,{value:o.a,color:o,onChange:this._onAlphaChange}),g.l.createElement(B,null,g.l.createElement(w.a,{inputLabel:"Hex",value:o.toHex().substr(1),inputClassName:void 0,onValueChange:this._onHexValueChange}),g.l.createElement(k.a,{inputLabel:"R",value:o.toRGB()[0],minValue:1,maxValue:255,inputClassName:void 0,onValueChange:this._changeColorComponent.bind(this,"r")}),g.l.createElement(k.a,{inputLabel:"G",value:o.toRGB()[1],minValue:1,maxValue:255,inputClassName:void 0,onValueChange:this._changeColorComponent.bind(this,"g")}),g.l.createElement(k.a,{inputLabel:"B",value:o.toRGB()[2],minValue:1,maxValue:255,inputClassName:void 0,onValueChange:this._changeColorComponent.bind(this,"b")})))]}},{key:"render",value:function(){var e=this.props,t=e.rendered,n=e.visible;return g.l.createElement(T,{rendered:t,visible:n},t&&this._renderContent())}}]),t}();E.contextTypes=g.b.contextTypes,t.a=E;var T=g.w.div({display:"none",opacity:0,transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"}},{rendered:{display:"block"},visible:{opacity:1,transition:function(e){return"opacity "+e.transitionDuration+"s ease-in"}}},"ColorPickerContainer"),O=g.w.div({height:"10px",width:"32px",position:"relative",":after":{position:"absolute",bottom:"0",left:"50%",border:"solid transparent",content:'""',height:0,width:0,borderBottomColor:function(e){return e.controlsLightBackgroundColor},borderWidth:"13px",marginLeft:"-13px",pointerEvents:"none"}},"TopArrow"),R=g.w.div({cursor:"auto",position:"absolute",left:0,padding:"25px",boxShadow:"0 2px 2px 0 rgba(0, 0, 0, 0.30), 0 4px 4px 0 rgba(0, 0, 0, 0.30), 0 8px 8px 0 rgba(0, 0, 0, 0.30), 0 16px 16px 0 rgba(0, 0, 0, 0.30)",background:function(e){return e.controlsLightBackgroundColor},width:"230px",zIndex:function(e){return e.zIndex("controlsOverlays")},overflowY:"auto"},"ColorPicker"),I=Object(g.w)(b.a)({},"SaturationValueSlider"),D=Object(g.w)(y.a)({marginTop:"16px"},"HueSlider"),P=Object(g.w)(v.a)({marginTop:"10px"},"OpacitySlider"),B=g.w.div({display:"table",tableLayout:"fixed",marginTop:"30px"},"ColorValueInputs")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(23),m=n(82),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onKnobDragStart","_onKnobDrag","_setValue"),r.state={value:r.props.hue},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["b"]),_(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._renderCanvas()}},{key:"componentWillReceiveProps",value:function(e){this.setState({value:e.hue})}},{key:"_onKnobDragStart",value:function(e,t,n){this._sliderWidth=this._slider.offsetWidth,n.target===this._knob?this._initialValue=this.state.value:(this._initialValue=e.x/this._sliderWidth,this._setValue(this._initialValue))}},{key:"_onKnobDrag",value:function(e){var t=this._initialValue+e.x/this._sliderWidth;this._setValue(t)}},{key:"_setValue",value:function(e){var t=Math.min(1,Math.max(0,e));this.setState({value:t}),this.props.onChange&&this.props.onChange(t),this.forceUpdate()}},{key:"_renderCanvas",value:function(){var e=this._canvas,t=e.getContext("2d");e.width=e.offsetWidth,e.height=e.offsetHeight;for(var n=0;n<e.width;n++){var i=n/e.width,o=d.c.fromHSV(i,1,1);t.strokeStyle=o.toRGBA(),t.beginPath(),t.moveTo(n,0),t.lineTo(n,e.height),t.stroke()}}},{key:"render",value:function(){var e=this;return d.l.createElement(h.a,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag},d.l.createElement(y,{styles:this.props.styles,innerRef:function(t){e._slider=t},className:void 0},d.l.createElement(b,{innerRef:function(t){e._canvas=t}}),d.l.createElement(v,{style:this._getKnobStyle(),innerRef:function(t){e._knob=t},className:void 0})))}},{key:"_getKnobStyle",value:function(){return{left:(100*this.props.hue).toFixed(2)+"%"}}}]),t}();g.contextTypes=d.b.contextTypes,t.a=g;var y=Object(d.w)(m.a).div({},"HueSlider");g.RootElement=y;var v=Object(d.w)(m.c).div({},"Knob"),b=Object(d.w)(m.b).canvas({marginTop:"1px",height:"8px"},"Background")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(23),d=n(82),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onKnobDragStart","_onKnobDrag","_updateBackgroundColors","_setValue"),r.state={color:r.props.color.clone(),value:r.props.value},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),h(t,[{key:"_updateBackgroundColors",value:function(){this._transparentColor=this.state.color.clone(),this._transparentColor.a=0,this._opaqueColor=this.state.color.clone(),this._opaqueColor.a=1}},{key:"componentWillReceiveProps",value:function(e){this.setState({color:e.color.clone(),value:e.value})}},{key:"_onKnobDragStart",value:function(e,t,n){this._sliderWidth=this._slider.offsetWidth,n.target===this._knob?this._initialValue=this.state.value:(this._initialValue=1-e.x/this._sliderWidth,this._setValue(this._initialValue))}},{key:"_onKnobDrag",value:function(e,t){var n=this._initialValue-e.x/this._sliderWidth;this._setValue(n)}},{key:"_setValue",value:function(e){var t=Math.min(1,Math.max(0,e));this.props.onChange&&this.props.onChange(t),this.setState({value:t}),this.forceUpdate()}},{key:"render",value:function(){var e=this;this._updateBackgroundColors();var t=this._getAssetPath("editor/controls/shared/tiled-background.png",!0);return p.l.createElement(f.a,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag},p.l.createElement(_,{styles:this.props.styles,innerRef:function(t){e._slider=t},className:void 0},p.l.createElement(v,{style:{backgroundImage:"url("+t+")"}}),p.l.createElement(y,{style:{backgroundImage:"linear-gradient(90deg, "+this._opaqueColor.toRGBA()+" 0%, "+this._transparentColor.toRGBA()+" 100%)"}}),p.l.createElement(g,{style:this._getKnobStyle(),innerRef:function(t){e._knob=t},className:void 0})))}},{key:"_getKnobStyle",value:function(){return{left:(100*(1-this.state.value)).toFixed(2)+"%"}}}]),t}();m.contextTypes=p.b.contextTypes,t.a=m;var _=Object(p.w)(d.a).div({},"OpacitySlider");m.RootElement=_;var g=Object(p.w)(d.c).div({},"Knob"),y=Object(p.w)(d.b).div({},"Background"),v=Object(p.w)(y)({backgroundRepeat:"y",backgroundSize:"contain",backgroundPosition:"right"},"TiledBackground")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(23),m=n(82),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onKnobDragStart","_onKnobDrag"),r._lastHue=null,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["b"]),_(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._renderCanvas()}},{key:"componentDidUpdate",value:function(){this.props.hue!==this._lastHue&&this._renderCanvas()}},{key:"_onKnobDragStart",value:function(e,t,n){n.target===this._knob?(this._initialBrightness=this.props.brightness,this._initialSaturation=this.props.saturation):(this._initialSaturation=e.x/this._canvas.offsetWidth,this._initialBrightness=1-e.y/this._canvas.offsetHeight,this.props.onChange&&this.props.onChange(this._initialSaturation,this._initialBrightness))}},{key:"_onKnobDrag",value:function(e){if(null!=this._canvas){var t=this._canvas.offsetWidth,n=this._canvas.offsetHeight,i=this._initialSaturation+e.x/t;i=Math.max(0,Math.min(1,i));var o=this._initialBrightness+e.y/n*-1;o=Math.max(0,Math.min(1,o)),this.props.onChange&&this.props.onChange(i,o)}}},{key:"_renderCanvas",value:function(){var e=this._canvas,t=e.getContext("2d");e.width=e.offsetWidth,e.height=e.offsetHeight;for(var n=t.getImageData(0,0,e.width,e.height),i=0;i<e.height;i++)for(var o=(e.height-i)/e.height,r=0;r<e.width;r++){var a=r/e.width,s=d.c.fromHSV(this.props.hue,a,o),l=s.r,c=s.g,u=s.b,p=s.a,f=4*(i*e.width+r);n.data[f]=255*l,n.data[f+1]=255*c,n.data[f+2]=255*u,n.data[f+3]=255*p}t.putImageData(n,0,0),this._lastHue=this.props.hue}},{key:"render",value:function(){var e=this;return d.l.createElement(h.a,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag},d.l.createElement(y,{styles:this.props.styles,innerRef:function(t){e._slider=t},className:void 0},d.l.createElement(b,{innerRef:function(t){e._canvas=t}}),d.l.createElement(v,{style:this._getKnobStyle(),innerRef:function(t){e._knob=t},className:void 0})))}},{key:"_getKnobStyle",value:function(){return{left:(100*this.props.saturation).toFixed(2)+"%",top:(100*(1-this.props.brightness)).toFixed(2)+"%"}}}]),t}();g.contextTypes=d.b.contextTypes,t.a=g;var y=Object(d.w)(m.a).div({height:"150px",cursor:"pointer"},"SaturationValueSlider");g.RootElement=y;var v=Object(d.w)(m.c).div({marginTop:"-6px",marginLeft:"-8px"},"Knob"),b=Object(d.w)(m.b).canvas({borderRadius:"2px",background:"white"},"Background")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(132),d=n(53),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["a"]),h(t,[{key:"_onInputChange",value:function(e){var t=e.target.value;if(t.match(/^#([A-Fa-f0-9]{6})$/))return this.setState({value:this.props.value});this.props.onValueChange&&this.props.onValueChange(t),this.setState({value:t})}},{key:"_renderRightPart",value:function(){var e=this,t=[];return this.props.inputClassName&&t.push(this.props.inputClassName),p.l.createElement(_,{value:this.state.value,onLiveChange:this._onInputLiveChange,onChange:this._onInputChange,className:t.join(" "),innerRef:function(t){e._input=t},disabled:this.props.disabled})}}]),t}();m.contextTypes=f.a.contextTypes,t.a=m;var _=Object(p.w)(d.a)({textAlign:"center",width:"62px",minWidth:"auto",textTransform:"uppercase"},"InputField")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),f(t,[{key:"render",value:function(){return p.l.createElement(h,{onClick:this.props.disabled?void 0:this.props.onClick,disabled:this.props.disabled,className:this.props.className},this.props.title)}}]),t}();d.contextTypes=p.b.contextTypes,t.a=d;var h=p.w.button({transition:"color 0.2s ease-out",width:"100%",height:"40px",background:function(e){return""+e.controlsLightBackgroundColor},boxShadow:"0 2px 2px 0 rgba(0, 0, 0, 0.10), 0 3px 4px 0 rgba(0, 0, 0, 0.30), 0 4px 6px 0 rgba(0, 0, 0, 0.30)",borderRadius:"2px",border:function(e){return"1px solid "+e.buttonBorderColor},fontSize:"13px",letterSpacing:"1.4px",textTransform:"uppercase",fontFamily:function(e){return e.uppercaseSemiBoldFontFamily},color:function(e){return e.dimmedTextColor},cursor:"pointer",":hover":{color:function(e){return e.textColor}},":focus":{outline:"none"}},{disabled:{opacity:.3,cursor:"default",":hover":{color:function(e){return e.dimmedTextColor}}}},"Button")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(4),h=n(80),m=n(79),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),g=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var y=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onDropdownClick","_onDocumentClick"),r.state={expanded:!1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["b"]),_(t,[{key:"componentDidMount",value:function(){g(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),document.addEventListener("click",this._onDocumentClick)}},{key:"componentWillUnmount",value:function(){g(t.prototype.__proto__||f()(t.prototype),"componentWillUnmount",this).call(this),document.removeEventListener("click",this._onDocumentClick)}},{key:"_onDocumentClick",value:function(e){if(this.state.expanded){for(var t=e.target;t;t=t.parentNode)if(t===this._root)return;this.setState({expanded:!1})}}},{key:"_onDropdownClick",value:function(){var e=this.state.expanded;this.setState({expanded:!e})}},{key:"_onItemClick",value:function(e){this.props.onChange&&this.props.onChange(e),this.setState({expanded:!1})}},{key:"_renderDropdownItems",value:function(){var e=this;return this.props.children.map(function(t){var n=d.q.extend({},t.props,{onClick:e._onItemClick.bind(e,t.props.value),selected:e.props.value===t.props.value,className:void 0});return d.l.cloneElement(t,n)})}},{key:"render",value:function(){var e=this,t=null;this.props.children.forEach(function(n){n.props.value===e.props.value&&(t=n.props.children)});var n=this.props.enableMenu;return d.l.createElement(v,{innerRef:function(t){e._root=t},className:this.props.className},d.l.createElement(b,{onClick:n?this._onDropdownClick:null,styles:this.props.styles,style:this.props.style},t,n?d.l.createElement(x,null):null),this.state.expanded&&d.l.createElement(k,{className:void 0},d.l.createElement(m.a,{direction:"vertical",noGradient:!0},d.l.createElement(w,null,this._renderDropdownItems()))))}}]),t}();y.contextTypes=d.b.contextTypes,y.propTypes={enableMenu:d.k.bool,styles:d.k.object,style:d.k.object,onChange:d.k.func},y.defaultProps={enableMenu:!0},t.a=y;var v=d.w.div({position:"relative"},"DropdownContainer"),b=Object(d.w)(h.a).div({position:"relative"},"Dropdown");y.RootElement=b;var k=d.w.div({position:"absolute",boxShadow:"0 2px 2px 0 rgba(0, 0, 0, 0.30), 0 4px 4px 0 rgba(0, 0, 0, 0.30), 0 8px 8px 0 rgba(0, 0, 0, 0.30), 0 16px 16px 0 rgba(0, 0, 0, 0.30)",background:function(e){return e.controlsLightBackgroundColor},width:"100%",overflow:"hidden",zIndex:function(e){return e.zIndex("controlsOverlays")}},"DropdownOverlay"),w=d.w.ul({listStyle:"none",padding:0,margin:0,overflowX:"hidden",overflowY:"auto",maxHeight:"200px"},"DropdownList"),x=d.w.div({transition:"transform .5s",transform:"rotate(0deg)",position:"absolute",right:"4px",bottom:"10px",borderLeft:"5px solid transparent",borderRight:"5px solid transparent",borderTop:function(e){return"5px solid "+e.dimmedTextColor}},{turnUp:{transform:"rotate(-90deg)"}},"ArrowDown"),S=d.w.li({position:"relative",color:function(e){return e.textColor},fontSize:"14px",lineHeight:"32px",padding:"0 16px",cursor:"default",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap","&:hover":{background:"rgba(255, 255, 255, 0.04)"}},{selected:{"&:before":{content:'""',display:"block",position:"absolute",left:0,top:0,height:"100%",width:"2px",backgroundColor:function(e){return e.highlightColor},boxShadow:"0 1px 2px 0 rgba(0, 0, 0, 0.65)"}}},"DropdownItem");y.Item=S,y.RootElement=Object(d.w)(h.a).input({},"DropdownComponent")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(80),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onKeyDown","_onInputBlur","_onInputChange"),r.state={value:""},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),d(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.value!==e.value||this.props.disabled!==e.disabled||this.state.value!==t.value}},{key:"componentWillReceiveProps",value:function(e){this.setState({value:e.value})}},{key:"_onInputChange",value:function(e){this.setState({value:e.target.value}),this.props.onLiveChange&&this.props.onLiveChange(e)}},{key:"_onInputBlur",value:function(e){this.props.onChange&&this.props.onChange(e)}},{key:"_onKeyDown",value:function(e){13!==e.keyCode&&27!==e.keyCode||this._input.blur(),this.props.onKeyDown&&this.props.onKeyDown()}},{key:"focus",value:function(){this._input.focus()}},{key:"_getInputStyle",value:function(){return{}}},{key:"render",value:function(){var e=this,t=this.constructor.RootElement;return p.l.createElement(t,{value:this.state.value,placeholder:this.props.placeholder,onChange:this._onInputChange,onBlur:this._onInputBlur,innerRef:function(t){e._input=t},onKeyDown:this._onKeyDown,name:this.props.name,styles:this.props.styles,className:this.props.className,style:this._getInputStyle(),disabled:this.props.disabled})}}]),t}();h.contextTypes=p.b.contextTypes,t.a=h,h.RootElement=Object(p.w)(f.a).input({},"TextInputComponent")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(293),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onNewFile"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),d(t,[{key:"componentDidMount",value:function(){this._fileLoader=new f.a(this._fileInput),this._fileLoader.on("file",this._onNewFile)}},{key:"componentWillUnmount",value:function(){this._fileLoader.off("file",this._onNewFile),this._fileLoader.dispose(),this._fileLoader=null}},{key:"_onNewFile",value:function(e){this.props.onNewFile&&this.props.onNewFile(e)}},{key:"open",value:function(){this._fileLoader.open()}},{key:"render",value:function(){var e=this;return p.l.createElement(m,{type:"file",accept:"image/*",innerRef:function(t){e._fileInput=t}})}}]),t}();h.contextTypes=p.b.contextTypes,t.a=h;var m=p.w.input({position:"absolute",top:0,left:0,visibility:"hidden",width:0,height:0},"HiddenFileInput")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=n(37),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).call(this));return n._input=e,n._onFileChange=n._onFileChange.bind(n),n._input.addEventListener("change",n._onFileChange),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["e"]),d(t,[{key:"open",value:function(){this._input.value=null,this._input.click()}},{key:"_handleFile",value:function(e){var t=this,n=new window.FileReader;n.onload=function(e){var n=e.target.result,i=new window.Image;i.addEventListener("load",function(){t.emit("file",i)}),i.addEventListener("error",function(e){return f.a.instance.displayError(t._t("errors.title"),t._t("errors.imageLoadingError.text"))}),i.src=n},n.readAsDataURL(e)}},{key:"_onFileChange",value:function(){var e=this._input.files;e.length&&this._handleFile(e[0])}},{key:"dispose",value:function(){this._input.removeEventListener("change",this._onFileChange)}}]),t}();t.a=h},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(4),f=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["b"]),f(t,[{key:"_cancelEvent",value:function(e){e.stopPropagation(),e.preventDefault()}},{key:"_onClick",value:function(e,t){t.stopPropagation(),t.preventDefault(),e(t)}},{key:"_renderControlItem",value:function(e,t){var n=this,i=this._getAssetPath("editor/controls/shared/canvas-overlay-controls/"+e+".png",!0),o=function(e){n._onClick(t,e)};return p.l.createElement(m,{style:{backgroundImage:"url("+i+")"},onClick:o,onTouchEnd:o,className:void 0,"data-identifier":e})}},{key:"render",value:function(){var e=this.props.position;return p.l.createElement(h,{style:{left:e.x,top:e.y},onMouseDown:this._cancelEvent,onTouchStart:this._cancelEvent,className:void 0},this.props.takeToFront&&this._renderControlItem("to-front",this.props.onTakeToFront),this.props.flipHorizontally&&this._renderControlItem("flip-horizontal",this.props.onFlipHorizontally),this.props.duplicate&&this._renderControlItem("duplicate",this.props.onDuplicate),this.props.delete&&this._renderControlItem("delete",this.props.onDelete))}}]),t}();d.contextTypes=p.b.contextTypes,t.a=d;var h=p.w.div({position:"absolute",transform:"translateX(-50%)",display:"block",background:function(e){return e.secondaryControlsBackgroundColor},padding:"8px",borderRadius:"2px",boxShadow:"0 2px 2px 0 rgba(0, 0, 0, 0.30), 0 4px 6px 0 rgba(0, 0, 0, 0.30), 0 6px 8px 0 rgba(0, 0, 0, 0.30), 0 8px 10px 0 rgba(0, 0, 0, 0.30)",whiteSpace:"nowrap",zIndex:function(e){return e.zIndex("controlsOverlays")+2}},"CanvasOverlayControl"),m=p.w.div({display:"inline-block",height:"24px",width:"24px",marginRight:"8px",cursor:"pointer",backgroundSize:"contain",":last-child":{marginRight:0}},"ControlItem")},function(e,t){e.exports={pesdk:{common:{title:{error:"Fehler"},text:{loading:"Lade..."},button:{cancel:"Abbrechen"}},editor:{button:{export:"Exportieren",newImageChangesLostWarningYes:"Ja",newImageChangesLostWarningNo:"Nein",discardChangesWarningKeep:"Ãnderungen beibehalten",discardChangesWarningDiscard:"Ãnderungen verwerfen"},title:{newImageChangesLostWarning:"Neues Bild",imageResizedWarning_maxMegaPixels:"Bild verkleinert",imageResizedWarning_maxDimensions:"Bild verkleinert",fontLoadingError:"Laden von Schriftarten ist fehlgeschlagen.",discardChangesWarning:"Ãnderungen verwerfen?"},text:{newImageChangesLostWarning:"Alle nicht gespeicherten Ãnderungen gehen verloren. Fortfahren?",imageResizedWarning_maxMegaPixels:"Da dein Bild die maximale GrÃ¶Ãe von ${maxMegaPixels} Megapixeln Ã¼berschreitet, wurde es auf ${width}x${height} Pixel verkleinert.",imageResizedWarning_maxDimensions:"Aufgrund von Hardware-BeschrÃ¤nkungen wurde das Bild auf ${width}x${height} Pixel verkleinert.",renderingError:"Beim Rendern des Bildes ist ein Fehler aufgetreten.",exporting:"Exportiere...",resizing:"Bild wird bearbeitet...",loadingFonts:"Lade Schriftarten...",fontLoadingError:"Die folgenden Schriftarten konnten nicht geladen werden: ${fonts}.",webcamUnavailableError:"Webcam-Bild kann nicht dargestellt werden. (Fehler: ${error})",invalidFileTypeError:"Der Dateityp ${fileType} wird nicht unterstÃ¼tzt.",imageLoadingError:"Laden des Bildes fehlgeschlagen. Dies kann verschiedene GrÃ¼nde haben, beispielsweise kann die Datei defekt sein oder der Dateityp wird nicht unterstÃ¼tzt.",discardChangesWarning:"Sind Sie sicher, dass Sie die Ãnderungen verwerfen wollen?"}},library:{title:{name:"Bibliothek"},button:{fileDropZone:"Datei hier hin ziehen oder klicken zum Durchsuchen.",fileDropZoneHovered:"Zum Hochladen loslassen."},placeholder:{search:"Bibliothek durchsuchen"},text:{noResults:"Keine Ergebnisse"}},transform:{title:{name:"Zuschneiden"},button:{reset:"ZurÃ¼cksetzen"},asset:{imgly_transforms_common:{name:"Standard",asset:{imgly_transform_common_custom:"Frei",imgly_transform_common_square:"Quadratisch","imgly_transform_common_4-3":"4:3","imgly_transform_common_16-9":"16:9"}},imgly_transforms_facebook:{name:"Facebook",asset:{imgly_transform_facebook_ad:"Ad",imgly_transform_facebook_post:"Post",imgly_transform_facebook_cover:"Cover",imgly_transform_facebook_profile:"Profile Pic"}}},placeholder:{width:"b",height:"h"}},filter:{asset:{identity:"Kein Filter",imgly_lut_celsius:"Celsius",imgly_lut_chest:"Chest",imgly_lut_fixie:"Fixie",imgly_lut_fridge:"Fridge",imgly_lut_front:"Front",imgly_lut_k2:"K2",imgly_lut_mellow:"Mellow",imgly_lut_sin:"Sin",imgly_lut_texas:"Texas",imgly_lut_ad1920:"1920 A.D.",imgly_lut_ancient:"Ancient",imgly_lut_bleached:"Bleached",imgly_lut_bleachedblue:"Bleached Blue",imgly_lut_blues:"Blues",imgly_lut_blueshadows:"Blue Shadows",imgly_lut_breeze:"Breeze",imgly_lut_bw:"B & W",imgly_lut_classic:"Classic",imgly_lut_colorful:"Colorful",imgly_lut_cool:"Cool",imgly_lut_cottoncandy:"Cotton Candy",imgly_lut_creamy:"Creamy",imgly_lut_eighties:"Eighties",imgly_lut_elder:"Elder",imgly_lut_evening:"Evening",imgly_lut_fall:"Fall",imgly_lut_food:"Food",imgly_lut_glam:"Glam",imgly_lut_gobblin:"Gobblin",imgly_lut_highcarb:"High Carb",imgly_lut_highcontrast:"High Contrast",imgly_lut_k1:"K1",imgly_lut_k6:"K6",imgly_lut_kdynamic:"KDynamic",imgly_lut_keen:"Keen",imgly_lut_lenin:"Lenin",imgly_lut_litho:"Litho",imgly_lut_lomo100:"Lomo 100",imgly_lut_lucid:"Lucid",imgly_lut_neat:"Neat",imgly_lut_nogreen:"No Green",imgly_lut_orchid:"Orchid",imgly_lut_pale:"Pale",imgly_lut_pitched:"Pitched",imgly_lut_plate:"Plate",imgly_lut_pola669:"Pola 669",imgly_lut_polasx:"Pola SX",imgly_lut_pro400:"Pro 400",imgly_lut_quozi:"Quozi",imgly_lut_sepiahigh:"Sepia High",imgly_lut_settled:"Settled",imgly_lut_seventies:"Seventies",imgly_lut_soft:"Soft",imgly_lut_steel:"Steel",imgly_lut_summer:"Summer",imgly_lut_sunset:"Sunset",imgly_lut_tender:"Tender",imgly_lut_twilight:"Twilight",imgly_lut_winter:"Winter",imgly_lut_x400:"X400"},title:{name:"Filters"}},adjustments:{button:{reset:"ZurÃ¼cksetzen"},title:{name:"Korrekturen",basics:"Grundlagen",refinements:"Feinheiten"},text:{brightness:"Helligkeit",saturation:"SÃ¤ttigung",contrast:"Kontrast",gamma:"Gamma",clarity:"Klarheit",exposure:"Belichtung",shadows:"Schatten",highlights:"Lichter"}},focus:{title:{name:"Weichzeichnen"},button:{none:"Original",radial:"KreisfÃ¶rmig",mirrored:"Gespiegelt",linear:"Linear",gaussian:"GauÃsch"}},text:{title:{name:"Text",font:"Schriftart",size:"GrÃ¶Ãe",spacing:"Abstand",line:"Zeile",background:"Hintergrund"},placeholder:{defaultText:"Doppelklick zum Bearbeiten!"},button:{new:"Neuer Text"}},textdesign:{title:{name:"Text Design"},button:{invert:"Text als Maske"}},sticker:{title:{name:"Sticker",opacity:"Transparenz"},text:{stickerLoadingError:"Laden des Stickers ${path} fehlgeschlagen."},button:{replace:"Ersetzen",new:"Neuer Sticker",fill:"EinfÃ¤rben"},asset:{imgly_sticker_emoticons:"Emoticons",imgly_sticker_emoticons_alien:"Alien",imgly_sticker_emoticons_angel:"Angel",imgly_sticker_emoticons_angry:"Angry",imgly_sticker_emoticons_anxious:"Anxious",imgly_sticker_emoticons_asleep:"Asleep",imgly_sticker_emoticons_attention:"Attention",imgly_sticker_emoticons_baby_chicken:"Baby Chicken",imgly_sticker_emoticons_batman:"Batman",imgly_sticker_emoticons_beer:"Beer",imgly_sticker_emoticons_black:"Black",imgly_sticker_emoticons_blue:"Blue",imgly_sticker_emoticons_blush:"Blush",imgly_sticker_emoticons_boxer:"Boxer",imgly_sticker_emoticons_business:"Business",imgly_sticker_emoticons_chicken:"Chicken",imgly_sticker_emoticons_cool:"Cool",imgly_sticker_emoticons_cry:"Cry",imgly_sticker_emoticons_deceased:"Deceased",imgly_sticker_emoticons_devil:"Devil",imgly_sticker_emoticons_duckface:"Duckface",imgly_sticker_emoticons_furious:"Furious",imgly_sticker_emoticons_grin:"Grin",imgly_sticker_emoticons_guitar:"Guitar",imgly_sticker_emoticons_harry_potter:"Harry Potter",imgly_sticker_emoticons_hippie:"Hippie",imgly_sticker_emoticons_hitman:"Hitman",imgly_sticker_emoticons_humourous:"Humourous",imgly_sticker_emoticons_idea:"Idea",imgly_sticker_emoticons_impatient:"Impatient",imgly_sticker_emoticons_kiss:"Kiss",imgly_sticker_emoticons_kisses:"Kisses",imgly_sticker_emoticons_laugh:"Laugh",imgly_sticker_emoticons_loud_cry:"Loud Cry",imgly_sticker_emoticons_loving:"Loving",imgly_sticker_emoticons_masked:"Masked",imgly_sticker_emoticons_music:"Music",imgly_sticker_emoticons_nerd:"Nerd",imgly_sticker_emoticons_ninja:"Ninja",imgly_sticker_emoticons_not_speaking_to_you:"Not speaking to you",imgly_sticker_emoticons_pig:"Pig",imgly_sticker_emoticons_pumpkin:"Pumpkin",imgly_sticker_emoticons_question:"Question",imgly_sticker_emoticons_rabbit:"Rabbit",imgly_sticker_emoticons_sad:"Sad",imgly_sticker_emoticons_sick:"Sick",imgly_sticker_emoticons_skateboard:"Skateboard",imgly_sticker_emoticons_skull:"Skull",imgly_sticker_emoticons_sleepy:"Sleepy",imgly_sticker_emoticons_smile:"Smile",imgly_sticker_emoticons_smoking:"Smoking",imgly_sticker_emoticons_sobbing:"Sobbing",imgly_sticker_emoticons_star:"Star",imgly_sticker_emoticons_steaming_furious:"Steaming Furious",imgly_sticker_emoticons_sunbathing:"Sunbathing",imgly_sticker_emoticons_tired:"Tired",imgly_sticker_emoticons_tongue_out_wink:"Tongue out wink",imgly_sticker_emoticons_wave:"Wave",imgly_sticker_emoticons_wide_grin:"Wide Grin",imgly_sticker_emoticons_wink:"Wink",imgly_sticker_emoticons_wrestler:"Wrestler",imgly_sticker_shapes:"Shapes",imgly_sticker_shapes_arrow_02:"Arrow 1",imgly_sticker_shapes_arrow_03:"Arrow 2",imgly_sticker_shapes_badge_01:"Badge 1",imgly_sticker_shapes_badge_11:"Badge 5",imgly_sticker_shapes_badge_12:"Badge 6",imgly_sticker_shapes_badge_13:"Badge 7",imgly_sticker_shapes_badge_15:"Badge 8",imgly_sticker_shapes_badge_18:"Badge 9",imgly_sticker_shapes_badge_19:"Badge 10",imgly_sticker_shapes_badge_20:"Badge 11",imgly_sticker_shapes_badge_28:"Badge 12",imgly_sticker_shapes_badge_32:"Badge 13",imgly_sticker_shapes_badge_35:"Badge 14",imgly_sticker_shapes_badge_36:"Badge 15",imgly_sticker_shapes_badge_04:"Badge 2",imgly_sticker_shapes_badge_06:"Badge 3",imgly_sticker_shapes_badge_08:"Badge 4",imgly_sticker_shapes_spray_01:"Spray 1",imgly_sticker_shapes_spray_03:"Spray 2",imgly_sticker_shapes_spray_04:"Spray 3"}},brush:{title:{name:"Malen",width:"Dicke",hardness:"HÃ¤rte",settings:"Pinseleinstellungen"}},frame:{title:{name:"Rahmen",opacity:"Transparenz",width:"Dicke"},button:{fill:"EinfÃ¤rben",replace:"Ersetzen",none:"Kein Rahmen"},asset:{imgly_frame_dia:"Dia",imgly_frame_art_decor:"Art Decor",imgly_frame_black_passepartout:"Black Passepartout",imgly_frame_lowpoly_shadow:"Low Poly",imgly_frame_wood_passepartout:"Wood Passepartout"}},overlay:{title:{name:"Overlay",blending:"Mischung",none:"Keine",normal:"Normal",overlay:"Overlay",hardLight:"Hard Light",softLight:"Soft Light",multiply:"Multiply",darken:"Darken",lighten:"Lighten",screen:"Screen",colorBurn:"Color Burn"},button:{none:"Kein Overlay"},asset:{imgly_overlay_bokeh:"Bokeh",imgly_overlay_chop:"Chop",imgly_overlay_clouds:"Clouds",imgly_overlay_golden:"Golden",imgly_overlay_grain:"Grain",imgly_overlay_hearts:"Hearts",imgly_overlay_lightleak1:"Light Leak 1",imgly_overlay_lightleak2:"Light Leak 2",imgly_overlay_metal:"Metal",imgly_overlay_mosaic:"Mosaic",imgly_overlay_painting:"Painting",imgly_overlay_paper:"Paper",imgly_overlay_rain:"Rain",imgly_overlay_vintage:"Vintage",imgly_overlay_wall1:"Wall",imgly_overlay_wall2:"Wall 2",imgly_overlay_wood:"Wood"}}}}},function(e,t){e.exports={pesdk:{common:{title:{error:"Error"},text:{loading:"Loading..."},button:{cancel:"Cancel"}},editor:{button:{export:"Export",close:"Close",newImageChangesLostWarningYes:"Yes",newImageChangesLostWarningNo:"No",discardChangesWarningKeep:"Keep changes",discardChangesWarningDiscard:"Discard changes"},title:{newImageChangesLostWarning:"New Image",imageResizedWarning_maxMegaPixels:"Image resized",imageResizedWarning_maxDimensions:"Image resized",fontLoadingError:"Failed to load font",discardChangesWarning:"Discard changes?"},text:{newImageChangesLostWarning:"Any unsaved changes will be lost. Continue?",imageResizedWarning_maxMegaPixels:"Your image exceeds the maximum size of ${maxMegaPixels} megapixels and has therefore been resized to ${width}x${height} pixels.",imageResizedWarning_maxDimensions:"Due to hardware limitations your image has been resized to ${width}x${height} pixels.",renderingError:"An error has occurred while rendering the image.",exporting:"Exporting...",resizing:"Resizing...",loadingFonts:"Loading fonts...",fontLoadingError:"The following fonts could not be loaded: ${fonts}.",webcamUnavailableError:"Unable to display webcam image (Error: ${error})",invalidFileTypeError:"The file type ${fileType} is not supported.",imageLoadingError:"Failed to load image. This can have multiple reasons, e.g. the file is corrupted or the file type is not supported.",discardChangesWarning:"You have unsaved changes. Are you sure you want to discard the changes?"}},library:{title:{name:"Library"},button:{fileDropZone:"Drag image here or click to browse for one.",fileDropZoneHovered:"Drop to upload."},placeholder:{search:"Search Library"},text:{noResults:"No results"}},transform:{title:{name:"Transform"},button:{reset:"Reset Default"},asset:{imgly_transforms_common:{name:"Common Crops",asset:{imgly_transform_common_custom:"Custom",imgly_transform_common_square:"Square","imgly_transform_common_4-3":"4:3","imgly_transform_common_16-9":"16:9"}},imgly_transforms_facebook:{name:"Facebook",asset:{imgly_transform_facebook_ad:"Ad",imgly_transform_facebook_post:"Post",imgly_transform_facebook_cover:"Cover",imgly_transform_facebook_profile:"Profile Pic"}}},placeholder:{width:"w",height:"h"}},filter:{asset:{identity:"None",imgly_lut_celsius:"Celsius",imgly_lut_chest:"Chest",imgly_lut_fixie:"Fixie",imgly_lut_fridge:"Fridge",imgly_lut_front:"Front",imgly_lut_k2:"K2",imgly_lut_mellow:"Mellow",imgly_lut_sin:"Sin",imgly_lut_texas:"Texas",imgly_lut_ad1920:"1920 A.D.",imgly_lut_ancient:"Ancient",imgly_lut_bleached:"Bleached",imgly_lut_bleachedblue:"Bleached Blue",imgly_lut_blues:"Blues",imgly_lut_blueshadows:"Blue Shadows",imgly_lut_breeze:"Breeze",imgly_lut_bw:"B & W",imgly_lut_classic:"Classic",imgly_lut_colorful:"Colorful",imgly_lut_cool:"Cool",imgly_lut_cottoncandy:"Cotton Candy",imgly_lut_creamy:"Creamy",imgly_lut_eighties:"Eighties",imgly_lut_elder:"Elder",imgly_lut_evening:"Evening",imgly_lut_fall:"Fall",imgly_lut_food:"Food",imgly_lut_glam:"Glam",imgly_lut_gobblin:"Gobblin",imgly_lut_highcarb:"High Carb",imgly_lut_highcontrast:"High Contrast",imgly_lut_k1:"K1",imgly_lut_k6:"K6",imgly_lut_kdynamic:"KDynamic",imgly_lut_keen:"Keen",imgly_lut_lenin:"Lenin",imgly_lut_litho:"Litho",imgly_lut_lomo100:"Lomo 100",imgly_lut_lucid:"Lucid",imgly_lut_neat:"Neat",imgly_lut_nogreen:"No Green",imgly_lut_orchid:"Orchid",imgly_lut_pale:"Pale",imgly_lut_pitched:"Pitched",imgly_lut_plate:"Plate",imgly_lut_pola669:"Pola 669",imgly_lut_polasx:"Pola SX",imgly_lut_pro400:"Pro 400",imgly_lut_quozi:"Quozi",imgly_lut_sepiahigh:"Sepia High",imgly_lut_settled:"Settled",imgly_lut_seventies:"Seventies",imgly_lut_soft:"Soft",imgly_lut_steel:"Steel",imgly_lut_summer:"Summer",imgly_lut_sunset:"Sunset",imgly_lut_tender:"Tender",imgly_lut_twilight:"Twilight",imgly_lut_winter:"Winter",imgly_lut_x400:"X400"},title:{name:"Filters"}},adjustments:{button:{reset:"Reset Default"},title:{name:"Adjust",basics:"Basics",refinements:"Refinements"},text:{brightness:"Brightness",saturation:"Saturation",contrast:"Contrast",gamma:"Gamma",clarity:"Clarity",exposure:"Exposure",shadows:"Shadows",highlights:"Highlights",whites:"Whites",blacks:"Blacks",temperature:"Temperature"}},focus:{title:{name:"Focus"},button:{none:"None",radial:"Radial",mirrored:"Mirrored",linear:"Linear",gaussian:"Gaussian"}},text:{title:{name:"Text",font:"Font",size:"Size",spacing:"Spacing",line:"Line",background:"Background"},placeholder:{defaultText:"Double-click to edit!"},button:{new:"New Text"}},textdesign:{title:{name:"Text Design"},button:{invert:"Text as mask"}},sticker:{title:{name:"Stickers",opacity:"Opacity"},text:{stickerLoadingError:"Failed to load sticker ${path}."},button:{replace:"Replace",new:"New Sticker",fill:"Fill"},asset:{imgly_sticker_emoticons:"Emoticons",imgly_sticker_emoticons_alien:"Alien",imgly_sticker_emoticons_angel:"Angel",imgly_sticker_emoticons_angry:"Angry",imgly_sticker_emoticons_anxious:"Anxious",imgly_sticker_emoticons_asleep:"Asleep",imgly_sticker_emoticons_attention:"Attention",imgly_sticker_emoticons_baby_chicken:"Baby Chicken",imgly_sticker_emoticons_batman:"Batman",imgly_sticker_emoticons_beer:"Beer",imgly_sticker_emoticons_black:"Black",imgly_sticker_emoticons_blue:"Blue",imgly_sticker_emoticons_blush:"Blush",imgly_sticker_emoticons_boxer:"Boxer",imgly_sticker_emoticons_business:"Business",imgly_sticker_emoticons_chicken:"Chicken",imgly_sticker_emoticons_cool:"Cool",imgly_sticker_emoticons_cry:"Cry",imgly_sticker_emoticons_deceased:"Deceased",imgly_sticker_emoticons_devil:"Devil",imgly_sticker_emoticons_duckface:"Duckface",imgly_sticker_emoticons_furious:"Furious",imgly_sticker_emoticons_grin:"Grin",imgly_sticker_emoticons_guitar:"Guitar",imgly_sticker_emoticons_harry_potter:"Harry Potter",imgly_sticker_emoticons_hippie:"Hippie",imgly_sticker_emoticons_hitman:"Hitman",imgly_sticker_emoticons_humourous:"Humourous",imgly_sticker_emoticons_idea:"Idea",imgly_sticker_emoticons_impatient:"Impatient",imgly_sticker_emoticons_kiss:"Kiss",imgly_sticker_emoticons_kisses:"Kisses",imgly_sticker_emoticons_laugh:"Laugh",imgly_sticker_emoticons_loud_cry:"Loud Cry",imgly_sticker_emoticons_loving:"Loving",imgly_sticker_emoticons_masked:"Masked",imgly_sticker_emoticons_music:"Music",imgly_sticker_emoticons_nerd:"Nerd",imgly_sticker_emoticons_ninja:"Ninja",imgly_sticker_emoticons_not_speaking_to_you:"Not speaking to you",imgly_sticker_emoticons_pig:"Pig",imgly_sticker_emoticons_pumpkin:"Pumpkin",imgly_sticker_emoticons_question:"Question",imgly_sticker_emoticons_rabbit:"Rabbit",imgly_sticker_emoticons_sad:"Sad",imgly_sticker_emoticons_sick:"Sick",imgly_sticker_emoticons_skateboard:"Skateboard",imgly_sticker_emoticons_skull:"Skull",imgly_sticker_emoticons_sleepy:"Sleepy",imgly_sticker_emoticons_smile:"Smile",imgly_sticker_emoticons_smoking:"Smoking",imgly_sticker_emoticons_sobbing:"Sobbing",imgly_sticker_emoticons_star:"Star",imgly_sticker_emoticons_steaming_furious:"Steaming Furious",imgly_sticker_emoticons_sunbathing:"Sunbathing",imgly_sticker_emoticons_tired:"Tired",imgly_sticker_emoticons_tongue_out_wink:"Tongue out wink",imgly_sticker_emoticons_wave:"Wave",imgly_sticker_emoticons_wide_grin:"Wide Grin",imgly_sticker_emoticons_wink:"Wink",imgly_sticker_emoticons_wrestler:"Wrestler",imgly_sticker_shapes:"Shapes",imgly_sticker_shapes_arrow_02:"Arrow 1",imgly_sticker_shapes_arrow_03:"Arrow 2",imgly_sticker_shapes_badge_01:"Badge 1",imgly_sticker_shapes_badge_11:"Badge 5",imgly_sticker_shapes_badge_12:"Badge 6",imgly_sticker_shapes_badge_13:"Badge 7",imgly_sticker_shapes_badge_15:"Badge 8",imgly_sticker_shapes_badge_18:"Badge 9",imgly_sticker_shapes_badge_19:"Badge 10",imgly_sticker_shapes_badge_20:"Badge 11",imgly_sticker_shapes_badge_28:"Badge 12",imgly_sticker_shapes_badge_32:"Badge 13",imgly_sticker_shapes_badge_35:"Badge 14",imgly_sticker_shapes_badge_36:"Badge 15",imgly_sticker_shapes_badge_04:"Badge 2",imgly_sticker_shapes_badge_06:"Badge 3",imgly_sticker_shapes_badge_08:"Badge 4",imgly_sticker_shapes_spray_01:"Spray 1",imgly_sticker_shapes_spray_03:"Spray 2",imgly_sticker_shapes_spray_04:"Spray 3"}},brush:{title:{name:"Brush",width:"Width",hardness:"Hardness",settings:"Brush Settings"}},frame:{title:{name:"Frames",opacity:"Opacity",width:"Width"},button:{fill:"Fill",replace:"Replace",none:"None"},asset:{imgly_frame_dia:"Dia",imgly_frame_art_decor:"Art Decor",imgly_frame_black_passepartout:"Black Passepartout",imgly_frame_lowpoly_shadow:"Low Poly",imgly_frame_wood_passepartout:"Wood Passepartout"}},overlay:{title:{name:"Overlays",blending:"Blending",none:"None",normal:"Normal",overlay:"Overlay",hardLight:"Hard Light",softLight:"Soft Light",multiply:"Multiply",darken:"Darken",lighten:"Lighten",screen:"Screen",colorBurn:"Color Burn"},button:{none:"None"},asset:{imgly_overlay_bokeh:"Bokeh",imgly_overlay_chop:"Chop",imgly_overlay_clouds:"Clouds",imgly_overlay_golden:"Golden",imgly_overlay_grain:"Grain",imgly_overlay_hearts:"Hearts",imgly_overlay_lightleak1:"Light Leak 1",imgly_overlay_lightleak2:"Light Leak 2",imgly_overlay_metal:"Metal",imgly_overlay_mosaic:"Mosaic",imgly_overlay_painting:"Painting",imgly_overlay_paper:"Paper",imgly_overlay_rain:"Rain",imgly_overlay_vintage:"Vintage",imgly_overlay_wall1:"Wall",imgly_overlay_wall2:"Wall 2",imgly_overlay_wood:"Wood"}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(5),o=n.n(i),r=n(298),a=n(309),s=n(312),l=n(320),c=n(135),u=n(330),p=n(335),f=n(339),d=n(346),h=n(352),m=n(358),_=[r.a,a.a,s.a,l.a,c.a,u.a,p.a,f.a,d.a,h.a,m.a];o.a.AllControls=_,t.default=_},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=n.n(d),m=n(299),_=n(305),g=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var y=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,d["BaseControls"]),g(t,[{key:"shouldKeepChanges",value:function(){var e=this,t=this.context,n=t.editor,i=t.ui;return void 0===this.keepChanges&&!n.isShallow&&n.history.isUndoAvailable()?new u.a(function(t,n){d.ModalManager.instance.displayWarning(i.translate("pesdk.editor.title.discardChangesWarning"),i.translate("pesdk.editor.text.discardChangesWarning"),[i.translate("pesdk.editor.button.discardChangesWarningKeep"),i.translate("pesdk.editor.button.discardChangesWarningDiscard")],!0).on("button",function(n){var i=0===n;e.keepChanges=i,t(i)})}):u.a.resolve(this.keepChanges)}},{key:"onImage",value:function(e){var t=this;this.shouldKeepChanges().then(function(n){t._options.switchScreenOnImage?(t.context.options.editor.image=e,t.context.appComponent.switchToScreen("editor")):t.context.editor.setImage(e,!n);t.sharedState.get("webcamEnabled")&&(t.sharedState.set({webcamEnabled:!1}),t.context.options.editor.forceCrop||t.context.screen.switchToControls("default"))})}},{key:"_onEnter",value:function(){this.sharedState.set({webcamEnabled:!1})}}],[{key:"hasLibraryProvider",value:function(e){var t=e.getOptions().editor.controlsOptions;if(void 0===t.library)return!0;var n=t.library;return!!(n.provider||n.enableWebcam||n.enableUpload)}},{key:"isEnabled",value:function(e){return t.hasLibraryProvider(e)&&e.isToolEnabled("library")}}]),t}();y.clickAtPosition=d.BaseControls.clickAtPosition,y.getPreloadAssets=d.BaseControls.getPreloadAssets,y.identifier="library",y.controlsComponent=m.a,y.canvasControlsComponent=_.a,y.iconPath="editor/controls/library/icon.png",y.activeIconPath="editor/controls/library/icon-active.png",y.defaultOptions={enableWebcam:!0,enableUpload:!0,displayUploadInCanvas:!1,switchScreenOnImage:!1},t.a=y,h.a.Controls.LibraryControls=y},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),n(300)),m=n(302),_=n(304),g=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var y={ROOT:0,SEARCH:1},v=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i))),a=r.props.options.provider;return a&&(r._library=new a),r._bindAll("_onCategorySelect","_onImageSelect","_onSearchQueryChange","_onWebcamActivated"),r.state.currentPanel=y.ROOT,r.state.searchQuery="",r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["ControlsComponent"]),g(t,[{key:"_onBackButtonClick",value:function(){this.setState({currentPanel:y.ROOT,searchQuery:"",backButton:!1})}},{key:"_onCategorySelect",value:function(e){this.setState({currentPanel:y.SEARCH,searchQuery:e.getName(),backButton:!0})}},{key:"_onImageSelect",value:function(e){var t=this;this.setSharedState({webcamEnabled:!1});var n=new window.Image,i=void 0,o=setTimeout(function(){i=d.ModalManager.instance.displayLoading(t._t("pesdk.common.text.loading"))},200);n.addEventListener("load",function(){i&&i.close(),o&&(clearTimeout(o),o=null),t.props.controls.onImage(n)}),n.addEventListener("error",function(){i&&i.close(),o&&(clearTimeout(o),o=null),d.ModalManager.instance.displayError(t._t("pesdk.common.title.error"),t._t("pesdk.editor.text.imageLoadingError"))}),n.crossOrigin=this.context.editor.getCrossOrigin(),n.src=e.getRawUrl()}},{key:"_onSearchQueryChange",value:function(e){this.setState({searchQuery:e,currentPanel:y.SEARCH})}},{key:"_onWebcamActivated",value:function(e){this.setSharedState({webcamEnabled:!0})}},{key:"fixStyles",value:function(){var e=this;if(this._list)return this._list.style.height="100%",function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0}(t.prototype.__proto__||f()(t.prototype),"fixStyles",this).call(this).then(function(){if(d.Utils.Browser.isIElte(10)){var t=e._container.offsetHeight;e._list.style.height=t+"px"}return e.refs.panel.fixStyles()})}},{key:"_renderCurrentPanel",value:function(){var e=this;switch(this.state.currentPanel){case y.ROOT:return d.React.createElement(h.a,{controls:this.props.controls,innerRef:function(t){e._list=t},library:this._library,onCategorySelect:this._onCategorySelect,onWebcamActivated:this._onWebcamActivated,options:this.props.options,key:"panel",ref:"panel"});case y.SEARCH:return d.React.createElement(m.a,{innerRef:function(t){e._list=t},library:this._library,onImageSelect:this._onImageSelect,searchQuery:this.state.searchQuery,key:"panel",ref:"panel"})}}},{key:"_getRootProps",value:function(){return{className:void 0,withBorderTop:!1}}},{key:"_renderContent",value:function(){var e=[];return this._library&&e.push(d.React.createElement(_.a,{key:"searchHeader",onChange:this._onSearchQueryChange,searchQuery:this.state.searchQuery})),e.push(this._renderCurrentPanel()),e}}]),t}();v.contextTypes=d.ControlsComponent.contextTypes,v.propTypes=d.ControlsComponent.propTypes,v.RootElement=d.ControlsComponent.RootElement,t.a=v},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(8),f=n.n(p),d=n(1),h=n.n(d),m=n(5),_=(n.n(m),n(301)),g=n(133),y=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),v=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var b=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||h()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onImage"),r.state={loading:!0,categories:[]},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,m["BaseComponent"]),y(t,[{key:"fixStyles",value:function(){var e=this;return f.a.resolve().then(function(){m.Utils.Browser.isIElte(10)?Object(m.requestAnimationFrame)(function(){e._scrollbar.update()}):e._scrollbar.update()})}},{key:"componentDidMount",value:function(){v(t.prototype.__proto__||h()(t.prototype),"componentDidMount",this).call(this),this._loadCategories()}},{key:"componentWillUnmount",value:function(){v(t.prototype.__proto__||h()(t.prototype),"componentWillUnmount",this).call(this),this._loadCoverImagesQueue&&this._loadCoverImagesQueue.dispose(),this._disposed=!0}},{key:"_onCategoryClick",value:function(e){this.props.onCategorySelect&&this.props.onCategorySelect(e)}},{key:"_onImage",value:function(e){this.props.controls.onImage(e)}},{key:"_loadCoverImages",value:function(e){var t=this,n=this.context,i=n.theme,o=n.options,r=e.map(function(e){return{fn:function(){return e.loadCoverImage(o.crossOrigin)},index:e}});this._loadCoverImagesQueue=new m.DelayedJobQueue(r,{minDelay:i.listItemSlideInDelay}),this._loadCoverImagesQueue.on("job-done",function(e){t._disposed||(t.forceUpdate(),t._scrollbar.update())}),this._loadCoverImagesQueue.start()}},{key:"_loadCategories",value:function(){var e=this;return this.props.library?this.props.library.getCategories().then(function(t){e._loadCoverImages(t),e.setState({loading:!1,categories:t})}):(this.setState({loading:!1,categories:[]}),f.a.resolve())}},{key:"_renderListItems",value:function(){var e=this;return this.state.categories.map(function(t){return m.React.createElement(_.a,{key:t.getName(),category:t,visible:t.isCoverImageLoaded(),onClick:e._onCategoryClick.bind(e,t)})})}},{key:"render",value:function(){var e=this;if(this.state.loading)return m.React.createElement(m.LoadingIndicatorComponent,null);var t=this.props.options,n=t.enableUpload,i=t.displayUploadInCanvas,o=this.props.innerRef;return m.React.createElement(k,{innerRef:function(t){o&&o(t),e._wrapper=t},className:void 0},m.React.createElement(m.ScrollableListComponent,{direction:"vertical",innerRef:function(t){e._scrollbar=t}},m.React.createElement(w,null,n&&!i&&m.React.createElement(g.a,{controls:this.props.controls,onImage:this._onImage,webcamEnabled:this.props.options.enableWebcam,onWebcamActivated:this.props.onWebcamActivated}),this._renderListItems())))}}]),t}();t.a=b;var k=m.adonis.div({display:"table",tableLayout:"fixed",width:"100%",height:"100%",borderTop:function(e){return"1px solid "+e.controlsSeparatorColor}},"RootPanelWrapper"),w=m.adonis.ul({listStyle:"none",margin:0,padding:"25px",paddingBottom:0},"CategoryList")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d=p.ControlsStyles.ControlItem,h=p.ControlsStyles.ControlItemTitle,m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseComponent"]),f(t,[{key:"render",value:function(){var e=this.props,t=e.category,n=e.onClick,i=e.visible,o={backgroundImage:"url('"+t.getCoverImage()+"')"};return p.React.createElement(_,{animated:!0,style:o,visible:i,className:void 0,onClick:n},p.React.createElement(g,null,t.getName()))}}]),t}();t.a=m;var _=Object(p.adonis)(d).li({backgroundColor:function(e){return e.focusItemBackgroundColor},backgroundRepeat:"no-repeat",backgroundSize:"cover",":last-child":{marginBottom:0}},"ListItem"),g=Object(p.adonis)(h).div({transitionProperty:"bottom, margin",transitionDuration:".2s",transitionTimingFunction:"ease-in-out",transitionDelay:".2s",bottom:"50%",marginBottom:"-7px",letterSpacing:"3px",textTransform:"uppercase",fontFamily:function(e){return e.uppercaseSemiBoldFontFamily},textShadow:"0 0 6px #000000"},"ListItemTitle")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(8),f=n.n(p),d=n(1),h=n.n(d),m=n(5),_=(n.n(m),n(303)),g=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),y=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var v=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||h()(t)).call.apply(e,[this].concat(i)));return r.state={loading:!0,images:[]},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,m["BaseComponent"]),g(t,[{key:"fixStyles",value:function(){var e=this;return f.a.resolve().then(function(){m.Utils.Browser.isIElte(10)?Object(m.requestAnimationFrame)(function(){e._scrollbar.update()}):e._scrollbar.update()})}},{key:"componentDidMount",value:function(){y(t.prototype.__proto__||h()(t.prototype),"componentDidMount",this).call(this),this._loadImages(this.props.searchQuery)}},{key:"componentWillReceiveProps",value:function(e){this.props.searchQuery!==e.searchQuery&&this._loadImages(e.searchQuery)}},{key:"componentWillUnmount",value:function(){y(t.prototype.__proto__||h()(t.prototype),"componentWillUnmount",this).call(this),this._loadThumbsQueue.stop(),this._loadThumbsQueue.dispose(),this._disposed=!0}},{key:"_onImageClick",value:function(e){this.props.onImageSelect&&this.props.onImageSelect(e)}},{key:"_loadThumbs",value:function(e){var t=this,n=this.context,i=n.theme,o=n.options,r=e.map(function(e){return{fn:function(){return e.loadThumb(o.crossOrigin)},index:e}});this._loadThumbsQueue=new m.DelayedJobQueue(r,{minDelay:i.listItemSlideInDelay}),this._loadThumbsQueue.on("job-done",function(e){t._disposed||(t.forceUpdate(),t._scrollbar&&t._scrollbar.update())}),this._loadThumbsQueue.start()}},{key:"_loadImages",value:function(e){var t=this;return e.trim()||this.setState({loading:!1,images:[]},function(){return t._scrollbar&&t._scrollbar.update()}),this.setState({loading:!0}),this.props.library.searchImages(e).then(function(e){t._loadThumbs(e),t.setState({loading:!1,images:e},function(){return t._scrollbar.update()})})}},{key:"_renderListItems",value:function(){var e=this,t=this.context.editor.getImage();return 0===this.state.images.length?m.React.createElement(w,null,this._t("pesdk.library.text.noResults")):this.state.images.map(function(n){return m.React.createElement(_.a,{key:n.getThumbUrl(),image:n,selected:n.getRawUrl()===(t&&t.src),visible:n.isThumbLoaded(),onClick:e._onImageClick.bind(e,n)})})}},{key:"render",value:function(){var e=this;if(this.state.loading)return m.React.createElement(m.LoadingIndicatorComponent,null);var t=this.props.innerRef;return m.React.createElement(b,{innerRef:function(n){t&&t(n),e._wrapper=n},className:void 0},m.React.createElement(m.ScrollableListComponent,{direction:"vertical",innerRef:function(t){e._scrollbar=t}},m.React.createElement(k,null,this._renderListItems())))}}]),t}();t.a=v;var b=m.adonis.div({display:"table",tableLayout:"fixed",width:"100%",height:"100%",borderTop:function(e){return"1px solid "+e.controlsSeparatorColor}},"RootPanelWrapper"),k=m.adonis.ul({listStyle:"none",margin:0,padding:"25px",paddingBottom:0},"ImageList"),w=m.adonis.div({textAlign:"center",color:function(e){return e.textColor},fontFamily:function(e){return e.regularFontFamily},fontSize:"14px"},"NoResultsText")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d=p.ControlsStyles.ControlItem,h=p.ControlsStyles.ControlItemActiveOverlay,m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r.state={isPortrait:!1,hovered:!1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseComponent"]),f(t,[{key:"componentWillReceiveProps",value:function(e){if(this.props.visible!==e.visible){var t=this.props.image.getThumbImage();t.height>t.width&&this.setState({isPortrait:!0})}}},{key:"render",value:function(){var e=this,t=this.props,n=t.image,i=t.onClick,o=t.selected,r=t.visible,a={backgroundImage:"url('"+n.getThumbUrl()+"')"},s=n.getAuthorAvatar(),l=this.context.theme.transitionDuration,c=[void 0,o&&"is-selected"].filter(function(e){return e});return p.React.createElement(_,{animated:!0,style:a,selected:o,visible:r,className:c.join(" "),onClick:i,portrait:this.state.isPortrait,onMouseEnter:function(){return e.setState({hovered:!0})},onMouseLeave:function(){return e.setState({hovered:!1})}},p.React.createElement(p.Transition,{active:this.state.hovered,enterProp:"rendered",enterDuration:1e3*l,appearProp:"visible",appearDuration:1e3*l,leaveDuration:1e3*l},p.React.createElement(b,{selected:o},s&&p.React.createElement(y,{src:s}),p.React.createElement(v,null,n.getAuthorName()))),p.React.createElement(p.Transition,{active:o,enterProp:"rendered",enterDuration:1e3*l,appearProp:"visible",appearDuration:1e3*l,leaveDuration:1e3*l},p.React.createElement(g,{selected:!0})))}}]),t}();t.a=m;var _=Object(p.adonis)(d).li({transition:"opacity 0.5s ease-out, transform 0.5s ease-out",backgroundColor:function(e){return e.focusItemBackgroundColor},backgroundRepeat:"no-repeat",backgroundSize:"cover",height:"112px",":last-child":{marginBottom:0}},{portrait:{height:"184px"}},"ListItem"),g=Object(p.adonis)(h).div({zIndex:function(e){return e.zIndex("controlsOverlays")}},"ListItemOverlay"),y=p.adonis.img({display:"inline-block",marginRight:"10px",borderRadius:"50%",width:"24px",height:"24px",verticalAlign:"top"},"AuthorAvatar"),v=p.adonis.div({display:"inline-block",lineHeight:"24px",fontFamily:function(e){return e.regularFontFamily},fontSize:"13px",opacity:1,maxWidth:"120px",whiteSpace:"nowrap",textShadow:"0 0 4px rgba(0, 0, 0, 0.5)"},"AuthorName"),b=p.adonis.div({position:"absolute",bottom:0,left:0,width:"100%",height:"50px",padding:"12px",zIndex:function(e){return e.zIndex("controlsOverlays")+1},display:"none",opacity:0,transition:"all 0.3s ease-out",marginBottom:"-10px",":before":{content:'""',position:"absolute",height:"30px",right:0,bottom:0,left:0,zIndex:2,opacity:.9,backgroundImage:"linear-gradient(-180deg, rgba(0, 0, 0, 0.00) 0%, rgba(0, 0, 0, 0.00) 54%, rgba(0, 0, 0, 0.45) 100%)"}},{rendered:{display:"block"},visible:{opacity:1,transition:"all 0.3s ease-in",marginBottom:0}},"Author")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d=250,h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onInputChange"),r._onDebouncedInputChange=p.Utils.debounce(r._onDebouncedInputChange,d),r.state={searchQueryInputValue:""},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseComponent"]),f(t,[{key:"componentWillReceiveProps",value:function(e){this.props.searchQuery!==e.searchQuery&&this.setState({searchQueryInputValue:e.searchQuery})}},{key:"componentWillUnmount",value:function(){this._disposed=!0}},{key:"_onDebouncedInputChange",value:function(e){this._disposed||this.props.onChange&&this.props.onChange(e)}},{key:"_onInputChange",value:function(e){var t=e.target.value;this.setState({searchQueryInputValue:t}),this._onDebouncedInputChange(t)}},{key:"render",value:function(){return p.React.createElement(m,{key:"header"},p.React.createElement(_,null,p.React.createElement(g,{placeholder:this._t("pesdk.library.placeholder.search"),onLiveChange:this._onInputChange,className:void 0,value:this.state.searchQueryInputValue})))}}]),t}();t.a=h;var m=p.adonis.div({display:"table-row",height:"48px",background:function(e){return e.controlsLightBackgroundColor}},"Header"),_=p.adonis.div({display:"table-cell",padding:"8px 24px"},"InputContainer"),g=Object(p.adonis)(p.TextInputComponent)({width:"100%"},"TextInput")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),n(306)),d=n(308),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onImage","_onWebcamBack","_onWebcamActivated"),r.state.displayHeader=!0,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["CanvasControlsComponent"]),h(t,[{key:"_onImage",value:function(e){this.props.controls.onImage(e)}},{key:"_onWebcamBack",value:function(){this.setSharedState({webcamEnabled:!1})}},{key:"_onWebcamActivated",value:function(e){this.setSharedState({webcamEnabled:!0})}},{key:"_renderControls",value:function(){var e=this.getSharedState("webcamEnabled"),t=this.props.options.displayUploadInCanvas;return e?p.React.createElement(f.a,{onImage:this._onImage,onBack:this._onWebcamBack}):t?p.React.createElement(_,null,p.React.createElement(d.a,{large:!0,controls:this.props.controls,webcamEnabled:this.props.options.enableWebcam,onWebcamActivated:this._onWebcamActivated,onImage:this._onImage})):void 0}}]),t}();m.contextTypes=p.CanvasControlsComponent.contextTypes,t.a=m;var _=p.adonis.div({position:"absolute",top:"100px",left:"50px",right:"50px",bottom:"100px"},"LibraryUploadContainer")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(7),f=(n.n(p),n(5)),d=(n.n(f),n(307)),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onWebcamReady","_onWebcamError","_onButtonClick","_onCancelClick"),r.state={webcamReady:!1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["BaseComponent"]),h(t,[{key:"_onWebcamReady",value:function(){this.props.onReady&&this.props.onReady(),this.setState({webcamReady:!0})}},{key:"_onWebcamError",value:function(e){var t=this;f.ModalManager.instance.displayError(this._t("pesdk.common.title.error"),this._t("pesdk.editor.text.webcamUnavailableError",{error:e})).on("close",function(){return t.props.onBack()})}},{key:"_onButtonClick",value:function(e){e.preventDefault(),this._takePhoto()}},{key:"_onCancelClick",value:function(e){e.preventDefault(),this.props.onBack&&this.props.onBack()}},{key:"_takePhoto",value:function(){var e=this;this.state.webcamReady&&this._webcam.capture().then(function(t){e.props.onImage&&e.props.onImage(t)})}},{key:"render",value:function(){var e=this;return f.React.createElement(_,null,f.React.createElement(g,null,f.React.createElement(y,{onClick:this._onCancelClick},this._t("pesdk.common.button.cancel"))),f.React.createElement(v,null,f.React.createElement(b,{innerRef:function(t){e._videoContainer=t}},f.React.createElement(d.a,{flashURL:this._getAssetPath("fallback/webcam.swf"),ref:function(t){e._webcam=t},onWebcamError:this._onWebcamError,onWebcamAvailable:this._onWebcamReady}),f.React.createElement(k,{onClick:this._onButtonClick}))))}}]),t}();t.a=m;var _=f.adonis.div({position:"absolute",display:"table",tableLayout:"fixed",top:0,left:0,width:"100%",height:"100%",color:"white",zIndex:function(e){return e.zIndex("controlsOverlays")},background:function(e){return e.backgroundColor}},"Container"),g=f.adonis.div({position:"absolute",top:0,left:0,width:"100%",height:"72px",backgroundImage:"linear-gradient(0deg, rgba(0,0,0,0.00) 2%, rgba(0,0,0,0.60) 59%, rgba(0,0,0,0.85) 100%)",textAlign:"center"},"Gradient"),y=f.adonis.div({position:"relative",zIndex:function(e){return e.zIndex("controlsOverlays")+2},fontFamily:function(e){return e.uppercaseSemiBoldFontFamily},color:function(e){return e.textColor},display:"inline-block",letterSpacing:"2px",textTransform:"uppercase",padding:"10px",marginTop:"6px",cursor:"pointer"},"CancelButton"),v=f.adonis.div({display:"table",tableLayout:"fixed",position:"absolute",top:0,left:0,width:"100%",height:"100%",padding:"70px 50px 50px 50px"},"OuterVideoContainer"),b=f.adonis.div({display:"table-cell",position:"relative",textAlign:"center"},"VideoContainer"),k=(f.adonis.video({visibility:"hidden",boxShadow:"0 2px 2px 0 rgba(0,0,0,0.30), 0 4px 4px 0 rgba(0,0,0,0.30), 0 8px 8px 0 rgba(0,0,0,0.30), 0 16px 16px 0 rgba(0,0,0,0.30)"},{visible:{visibility:"visible"}},"Video"),f.adonis.div({position:"absolute",bottom:"30px",left:"50%",marginLeft:"-30px",cursor:"pointer",borderRadius:"50%",width:"60px",height:"60px",border:"2px solid white",background:function(e){return e.primaryColor},boxShadow:"0 2px 2px 0 rgba(0,0,0,0.30), 0 4px 4px 0 rgba(0,0,0,0.30), 0 8px 8px 0 rgba(0,0,0,0.30), 0 16px 16px 0 rgba(0,0,0,0.30)"},"Button"))},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(42),h=n.n(d),m=n(32),_=n.n(m),g=n(5),y=(n.n(g),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var v=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).call(this,e));return n._bindAll("_onLoadedMetadata"),n.state={webcamAvailable:!1,useFlashFallback:!1},n._getUserMedia=null,n._webcamStream=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,g["BaseComponent"]),y(t,[{key:"componentDidMount",value:function(){var e=this;if(this._initGetUserMedia(),this._getUserMedia)this._getUserMedia({video:{optional:[{minWidth:320},{minWidth:640},{minWidth:1024},{minWidth:1280},{minWidth:1920},{minWidth:2560}]},audio:!1}).then(function(t){e._webcamStream=t;var n=e._videoElement;"srcObject"in n?n.srcObject=t:n.src=window.URL.createObjectURL(t)}).catch(function(t){e.props.onWebcamError&&e.props.onWebcamError(t)});else{var t=!1;window.Webcam||(window.Webcam={},t=!0),window.Webcam.flashNotify=function(n,i){switch(n){case"cameraLive":e.setState({webcamAvailable:!0},function(){e.props.onWebcamAvailable&&e.props.onWebcamAvailable()}),delete window.Webcam.flashNotify,t&&delete window.Webcam;break;case"error":e.props.onWebcamError&&e.props.onWebcamError(i),delete window.Webcam.flashNotify,t&&delete window.Webcam}}}}},{key:"componentWillUnmount",value:function(){this._disposeWebcam()}},{key:"_initGetUserMedia",value:function(){if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia&&(this._getUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices)),!this._getUserMedia){var e=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia;e&&(this._getUserMedia=function(t){return new u.a(function(n,i){return e.call(navigator,t,n,i)})})}this._getUserMedia||this.setState({useFlashFallback:!0})}},{key:"_disposeWebcam",value:function(){if(this._webcamStream){var e=this._webcamStream,t=e.getTracks()[0];t?t.stop():e.stop&&e.stop()}else this._flashWebcam&&this._flashWebcam._releaseCamera()}},{key:"capture",value:function(){var e=this;return this.state.webcamAvailable?this._videoElement&&!this._flashWebcam?new u.a(function(t,n){var i=e._videoElement;if(0===i.readyState)n(new Error("Webcam video not available"));else{var o=document.createElement("canvas");o.width=i.videoWidth,o.height=i.videoHeight,o.getContext("2d").drawImage(i,0,0);var r=new window.Image;r.addEventListener("load",function(){t(r)}),r.src=o.toDataURL("image/jpeg")}}):this._flashWebcam?new u.a(function(t,n){var i=e._flashWebcam._snap(),o=new Image;o.onload=function(){t(o)},o.src="data:image/jpeg;base64,"+i}):u.a.reject(new Error("Webcam video not available")):u.a.reject(new Error("Webcam video not available"))}},{key:"_getFlashFallbackComponent",value:function(){var e=this,t=this._container,n=t.offsetWidth,i=t.offsetHeight,o=640,r=480;i>n?(o=n||640,r=.75*n):(o=4/3*i,r=i||480);var a="width="+o+"&height="+r+"&dest_width=1024&dest_height=768&jpeg_quality=100&fps=24";return _.a.createElement("object",{classID:"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000",type:"application/x-shockwave-flash",width:o,height:r,ref:function(t){e._flashWebcam=t},align:"middle"},_.a.createElement("param",{name:"wmode",value:"transparent"}),_.a.createElement("param",{name:"allowScriptAccess",value:"always"}),_.a.createElement("param",{name:"allowFullScreen",value:"false"}),_.a.createElement("param",{name:"movie",value:this.props.flashURL}),_.a.createElement("param",{name:"loop",value:"false"}),_.a.createElement("param",{name:"menu",value:"false"}),_.a.createElement("param",{name:"quality",value:"best"}),_.a.createElement("param",{name:"bgcolor",value:"#ffffff"}),_.a.createElement("param",{name:"flashvars",value:a}))}},{key:"_onLoadedMetadata",value:function(){var e=this;this.setState({webcamAvailable:!0},function(){e.props.onWebcamAvailable&&e.props.onWebcamAvailable()})}},{key:"render",value:function(){var e=this,t=this.state.useFlashFallback?this._getFlashFallbackComponent():_.a.createElement(b,{autoPlay:!0,visible:this.state.webcamAvailable&&!this.state.useFlashFallback,innerRef:function(t){e._videoElement=t},onLoadedMetadata:this._onLoadedMetadata});return _.a.createElement("div",{style:{width:"100%",height:"100%",overflow:"hidden"},ref:function(t){e._container=t}},t)}}]),t}();v.propTypes={flashURL:h.a.string,onWebcamAvailable:h.a.func,onWebcamError:h.a.func},t.a=v;var b=g.adonis.video({visibility:"hidden",width:"100%",boxShadow:"0 2px 2px 0 rgba(0,0,0,0.30), 0 4px 4px 0 rgba(0,0,0,0.30), 0 8px 8px 0 rgba(0,0,0,0.30), 0 16px 16px 0 rgba(0,0,0,0.30)"},{visible:{visibility:"visible"}},"Video")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),n(133)),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=p.ControlsStyles.PlainControlItem,m=p.ControlsStyles.PlainControlItemBackground,_=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["a"]),d(t,[{key:"render",value:function(){var e={backgroundImage:"url('"+this._getAssetPath("editor/controls/library/webcam.png",!0)+"')"};return p.React.createElement(g,null,p.React.createElement(y,null,p.React.createElement(k,null,p.React.createElement(v,{onClick:this._onDropZoneClick,onDragEnter:this._onDropZoneDragEnter,onDragOver:this._onDropZoneDragOver,onDragLeave:this._onDropZoneDragLeave,onDrop:this._onDropZoneDrop,hovered:this.state.dropZoneHovered},p.React.createElement(p.InvisibleUploadComponent,{ref:"upload",onNewFile:this._onNewFile}),this.state.dropZoneHovered?this._t("pesdk.library.button.fileDropZoneHovered"):this._t("pesdk.library.button.fileDropZone"))),!this.state.dropZoneHovered&&this.props.webcamEnabled&&p.React.createElement(k,null,p.React.createElement(b,{style:e,className:void 0,onClick:this._onWebcamClick}))))}}]),t}();t.a=_;var g=Object(p.adonis)(h).div({marginBottom:"24px",position:"absolute",top:0,left:0,width:"100%",height:"100%",":hover *":{opacity:"1"}},"Container"),y=Object(p.adonis)(m).div({width:"100%",height:"100%",display:"table",tableLayout:"fixed",padding:"0"},"Background"),v=p.adonis.div({display:"table-cell",borderRight:"1px solid rgba(255, 255, 255, 0.08)",padding:"18px",fontFamily:function(e){return e.regularFontFamily},fontSize:"13px",textAlign:"center",verticalAlign:"middle",color:function(e){return e.dimmedTextColor}},{hovered:{background:"rgba(255, 255, 255, 0.05)",borderRight:"none"}},"DropZone"),b=p.adonis.div({display:"table-cell",height:"100px",background:"rgba(0, 0, 0, 0.06) no-repeat center center",backgroundSize:"48px 48px"},"WebcamButton"),k=p.adonis.div({display:"table-row"},"Row")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=n.n(p),d=n(310),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseControls"]),h(t,null,[{key:"mapOperationsToSharedState",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];var t=e.getOrCreate("adjustments");return{brightness:t.getBrightness(),saturation:t.getSaturation(),contrast:t.getContrast(),gamma:t.getGamma(),exposure:t.getExposure(),shadows:t.getShadows(),highlights:t.getHighlights(),clarity:t.getClarity(),whites:t.getWhites(),blacks:t.getBlacks(),temperature:t.getTemperature(),setBrightness:function(e){t.setBrightness(e)},setSaturation:function(e){t.setSaturation(e)},setContrast:function(e){t.setContrast(e)},setGamma:function(e){t.setGamma(e)},setExposure:function(e){t.setExposure(e)},setShadow:function(e){t.setShadow(e)},setHighlights:function(e){t.setHighlights(e)},setClarity:function(e){t.setClarity(e)},setWhites:function(e){t.setWhites(e)},setBlacks:function(e){t.setBlacks(e)},setTemperature:function(e){t.setTemperature(e)},reset:function(){t.resetOptions()},setOperationOptions:function(e){t.set(e)}}}},{key:"isEnabled",value:function(e){return e.isToolAllowed("adjustment")&&e.isToolEnabled("adjustments")}}]),t}();m.clickAtPosition=p.BaseControls.clickAtPosition,m.getPreloadAssets=p.BaseControls.getPreloadAssets,m.identifier="adjustments",m.controlsComponent=d.a,m.canvasControlsComponent=p.BaseControls.canvasControlsComponent,m.iconPath="editor/controls/adjustments/icon.png",m.activeIconPath="editor/controls/adjustments/icon-active.png",m.requiredOperations=["adjustments"],m.defaultOptions={availableAdjustments:null},m.updatableOperations=["adjustments"],m.switchToDefaultControlsOnRemoval=!1,m.SECTIONS=[{identifier:"basics",items:["brightness","saturation","contrast","gamma"]},{identifier:"refinements",items:["clarity","exposure","shadows","highlights","whites","blacks","temperature"]}],f.a.Controls.AdjustmentsControls=m,t.a=m},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),n(311)),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=p.GroupedControlsStyles.ControlGroupList,m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onResetDefaultClick"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["ControlsComponent"]),d(t,[{key:"_isAdjustmentAvailable",value:function(e){var t=this.props.options.availableAdjustments;return null===t||-1!==t.indexOf(e)}},{key:"_onResetDefaultClick",value:function(){this.sharedState.reset(),this.props.controls.addLocalHistorySnapshot("reset",!0)}},{key:"_onValueChange",value:function(e,t){this.sharedState.setOperationOptions(function(e,t,n){return t in e?o()(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},e,t)),this.props.controls.addLocalHistorySnapshot(e,!0)}},{key:"_renderAdjustmentsControls",value:function(){var e=this,t=function(t){return t.filter(function(t){return e._isAdjustmentAvailable(t)}).map(function(t){return e._makeItem(t)})};return this.props.controls.constructor.SECTIONS.filter(function(t){return t.items.filter(function(t){return e._isAdjustmentAvailable(t)}).length>0}).map(function(n){return p.React.createElement(p.CollapseSectionComponent,{key:n.identifier,title:e._t("pesdk.adjustments.title."+n.identifier),alwaysExpanded:!0},p.React.createElement(g,{className:void 0+n.identifier},t(n.items)))})}},{key:"_makeItem",value:function(e){var t=this.sharedState[e];return p.React.createElement(f.a,{item:e,value:t,onValueChange:this._onValueChange.bind(this,e),className:void 0,key:e})}},{key:"_getRootProps",value:function(){return{className:void 0,withBorderTop:!0}}},{key:"_renderContent",value:function(){var e=this;return p.React.createElement(p.ScrollableListComponent,{direction:"vertical",innerListRef:function(t){e._list=t},innerRef:function(t){e._scrollbar=t}},p.React.createElement(_,null,p.React.createElement(y,null,p.React.createElement(p.ButtonComponent,{title:this._t("pesdk.adjustments.button.reset"),className:void 0,onClick:this._onResetDefaultClick})),this._renderAdjustmentsControls()))}}]),t}();m.contextTypes=p.ControlsComponent.contextTypes,m.RootElement=p.ControlsComponent.RootElement,t.a=m;var _=Object(p.adonis)(h).ul({overflowX:"hidden",overflowY:"auto",width:"100%"},"SectionList"),g=p.adonis.ul({listStyle:"none",padding:"0"},"SectionItemList"),y=p.adonis.div({padding:"25px",paddingBottom:"10px"},"BottomSection")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(7),f=n.n(p),d=n(5),h=(n.n(d),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var m=f.a.Operations.AdjustmentsOperation,_=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onValueChange"),r._option=m.prototype.availableOptions[r.props.item],r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,d["SharedStateComponent"]),h(t,[{key:"shouldComponentUpdate",value:function(e){return e.value!==this.props.value}},{key:"_onValueChange",value:function(e){var t=this._option,n=t.minValue,i=t.midValue,o=t.maxValue;e=e<0?i+(i-n)*e/100:i+(o-i)*e/100,this.props.onBeforeValueChange&&this.props.onBeforeValueChange(e),this.context.editor.render(),this.setState({value:e}),this.props.onValueChange&&this.props.onValueChange(e)}},{key:"render",value:function(){var e=this._option,t=e.minValue,n=e.midValue,i=e.maxValue,o=this.props.value,r=100*(o<=n?(o-t)/(n-t)-1:(o-n)/(i-n));return o===t&&(r=-100),d.React.createElement(d.SliderControlComponent,{key:this.props.item,label:this._t("pesdk.adjustments.text."+this.props.item),minValue:-100,maxValue:100,value:parseInt(r),onSliderValueChange:this._onValueChange,onValueChange:this._onValueChange,className:this.props.className,middleDot:!0})}}]),t}();_.contextTypes=d.SharedStateComponent.contextTypes,t.a=_},function(e,t,n){"use strict";var i=n(34),o=n.n(i),r=n(10),a=n.n(r),s=n(0),l=n.n(s),c=n(2),u=n.n(c),p=n(3),f=n.n(p),d=n(1),h=n.n(d),m=n(7),_=(n.n(m),n(5)),g=n.n(_),y=n(313),v=n(315),b=a.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},k=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),l()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var w=(m.Operations.SpriteOperation?m.Operations.SpriteOperation:{}).BrushSprite,x=function(e){function t(e,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||h()(t)).call(this,e,n,i));return o._onOperationRemoved=o._onOperationRemoved.bind(o),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=f()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(u.a?u()(e,t):e.__proto__=t)}(t,_["BaseControls"]),k(t,[{key:"_onEnter",value:function(){var e=this,t=this.context.editor,n=t.operations.getOrCreate("sprite"),i=n.createBrush();n.addSprite(i);var o=this.getGlobalToolState(),r=o||{brushColor:m.Color.WHITE,brushSize:.1,brushHardness:50};t.zoom.auto(!1,!1,function(){t.features.disable("zoom","drag");var n=t.getOutputDimensions(),i=Math.max(.05*n.min(),1);e._options.widthPresets&&e._options.widthPresets.length>0&&(i=e._options.sizePresets[0]),e.sharedState.set({brushSize:o?o.brushSize:Math.round(i)})}),this.sharedState.set(b({},r,{operation:n,brushSprite:i}))}},{key:"_onLeave",value:function(){var e=this.context.editor,t=e.operations.get("sprite");t&&[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return o()(e)}(t.getSprites())).forEach(function(e){e instanceof w&&e.getPaths().length<=0&&t.removeSprite(e)});this.saveBrushSettings(),e.features.enable("zoom","drag"),e.render()}},{key:"_onOperationRemoved",value:function(e){if(e===this.sharedState.get("operation")){var t=this.context.editor.operations.getOrCreate("sprite"),n=t.createBrush();t.addSprite(n),this.sharedState.set({operation:t,brushSprite:n})}}},{key:"saveBrushSettings",value:function(){this.setGlobalToolState({brushColor:this.sharedState.get("brushColor"),brushSize:this.sharedState.get("brushSize"),brushHardness:this.sharedState.get("brushHardness")})}}],[{key:"mapOperationsToSharedState",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1],arguments.length>2&&void 0!==arguments[2]&&arguments[2];return{operation:e.getOrCreate("sprite")}}},{key:"isEnabled",value:function(e){return e.isToolAllowed("brush")&&e.isToolEnabled("brush")}}]),t}();x.clickAtPosition=_.BaseControls.clickAtPosition,x.getPreloadAssets=_.BaseControls.getPreloadAssets,x.identifier="brush",x.controlsComponent=y.a,x.canvasControlsComponent=v.a,x.iconPath="editor/controls/brush/icon.png",x.activeIconPath="editor/controls/brush/icon-active.png",x.requiredOperations=["sprite"],x.defaultOptions={brushes:[],replaceBrushes:!1,availableBrushes:null},x.updatableOperations=["sprite"],x.switchToDefaultControlsOnRemoval=!1,g.a.Controls.BrushControls=x,t.a=x},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(8),f=n.n(p),d=n(1),h=n.n(d),m=n(7),_=(n.n(m),n(5)),g=(n.n(_),n(314)),y=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function k(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}var w=void 0;m.Operations.SpriteOperation&&(w=m.Operations.SpriteOperation.BrushSprite.Brush);var x=_.GroupedControlsStyles.ControlGroupTitle,S=_.GroupedControlsStyles.ControlGroup,C=function(e){function t(){var e;v(this,t);for(var n=arguments.length,i=Array(n),r=0;r<n;r++)i[r]=arguments[r];var a,s,l,c=b(this,(e=t.__proto__||h()(t)).call.apply(e,[this].concat(i)));return c._bindAll("_onBrushColorChanged","_onBrushHardnessChanged","_onBrushWidthChanged","_onOperationUpdated"),c._events=(a={},s=_.Constants.EVENTS.OPERATION_UPDATED,l=c._onOperationUpdated,s in a?o()(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c._initBrushManager(),c}return k(t,_["ControlsComponent"]),y(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||h()(t.prototype),"componentDidMount",this).call(this),this._onBrushSelect(this._brushManager.getBrushes()[0])}},{key:"_initBrushManager",value:function(){this._brushManager=new _.BrushManager(this.context.ui,this.props.options)}},{key:"_onBrushColorChanged",value:function(e){var t=this.getSharedState("brushInstance").clone();t.setColor(e.clone()),this.setSharedState({brushInstance:t,brushColor:e.clone()})}},{key:"_onBrushHardnessChanged",value:function(e){var t=this.getSharedState("brushInstance").clone();t.setHardness(e/100),this.setSharedState({brushInstance:t,brushHardness:Math.round(e)})}},{key:"sharedStateDidChange",value:function(e,t){e.brushSize!==t.brushSize&&this._onBrushWidthChanged(t.brushSize)}},{key:"_onBrushWidthChanged",value:function(e){var t=this.context.editor.getOutputDimensions(),n=this.getSharedState("brushInstance").clone();n.setSize(e/t.min()),this.setSharedState({brushInstance:n,brushSize:Math.round(e)})}},{key:"_onOperationUpdated",value:function(e){var t=this.context.editor;if(e===this.getSharedState("operation")){var n=this.getSharedState("brushSprite");if(n){var i=e.getSprites().filter(function(e){return e.getId()===n.getId()})[0];this.setSharedState({brushSprite:i})}t.render()}}},{key:"_onBrushSelect",value:function(e){var t=this,n=this.context.editor.getOutputDimensions(),i=this.getSharedState("brushSize")/n.min(),o=this.getSharedState("brushHardness")/100,r={size:i,color:this.getSharedState("brushColor")},a=void 0;if(e.prototype&&e.prototype instanceof w){a=new e(r)}else{var s=m.Utils.extend({},e);delete s.image;var l=function(e){function t(){return v(this,t),b(this,(t.__proto__||h()(t)).apply(this,arguments))}return k(t,w),t}();l.identifier=e.identifier,a=new l(m.Utils.extend({},s,r))}a.hasOption("hardness")&&a.setHardness(o),this._loadBrush(e,a).then(function(){t.setSharedState({brushInstance:a,brush:e})})}},{key:"_loadBrush",value:function(e,t){var n=this;return new f.a(function(i,o){if(e.constructor===Object){var r=new window.Image;r.addEventListener("load",function(){t.setImage(r),i()}),r.addEventListener("error",function(){o(new Error("Failed to load image at "+r.src))}),r.crossOrigin=n.context.editor.getCrossOrigin(),r.src=n._getAssetPath(e.image)}else i()})}},{key:"_getRootProps",value:function(){return{className:void 0,withBorderTop:!0}}},{key:"_renderBrushItems",value:function(){var e=this,t=this._brushManager.getBrushes();return t.length<=1?null:t.map(function(t){return _.React.createElement(g.a,{key:t.identifier,brush:t,selected:e.getSharedState("brush")===t,onClick:e._onBrushSelect.bind(e,t)})})}},{key:"_renderContent",value:function(){var e=this,t=this.getSharedState("brushInstance");return _.React.createElement(_.ScrollableListComponent,{direction:"vertical",innerListRef:function(t){e._list=t},innerRef:function(t){e._scrollbar=t}},_.React.createElement(T,null,_.React.createElement(O,null,this._t("pesdk.brush.title.settings")),_.React.createElement(R,null,_.React.createElement(_.ColorSelectionComponent,{value:this.getSharedState("brushColor"),onChange:this._onBrushColorChanged})),_.React.createElement(E,{label:this._t("pesdk.brush.title.width"),minValue:1,maxValue:100,value:this.getSharedState("brushSize"),onSliderValueChange:this._onBrushWidthChanged,onValueChange:this._onBrushWidthChanged,className:void 0}),_.React.createElement(E,{label:this._t("pesdk.brush.title.hardness"),minValue:0,maxValue:100,disabled:!(t&&t.hasOption("hardness")),value:this.getSharedState("brushHardness"),onSliderValueChange:this._onBrushHardnessChanged,onValueChange:this._onBrushHardnessChanged})),_.React.createElement(I,null,_.React.createElement(_.ScrollbarComponent,{direction:"vertical"},_.React.createElement(D,null,this._renderBrushItems()))))}}]),t}();C.contextTypes=_.ControlsComponent.contextTypes,C.RootElement=_.ControlsComponent.RootElement,t.a=C;var E=Object(_.adonis)(_.SliderControlComponent)({"&:last-child":{marginBottom:0}},"SliderControl"),T=Object(_.adonis)(S).div({padding:"25px",paddingBottom:"25px",borderBottom:function(e){return"1px solid "+e.darkSliderBackgroundColor}},"Settings"),O=Object(_.adonis)(x).div({},"SettingsTitle"),R=_.adonis.div({marginBottom:"16px"},"ColorSelection"),I=_.adonis.div({position:"absolute",top:"211px",bottom:0,left:0,width:"100%",background:"rgba(0, 0, 0, 0.12)"},"Brushes"),D=_.adonis.ul({position:"absolute",top:0,left:0,bottom:0,width:"100%",overflowX:"hidden",overflowY:"auto",listStyle:"none",margin:0,padding:0},"BrushList")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(8),f=n.n(p),d=n(1),h=n.n(d),m=n(7),_=(n.n(m),n(5)),g=(n.n(_),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function b(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}var k=_.ControlsStyles.PlainControlItemBackground,w=m.Operations.SpriteOperation,x=void 0,S=void 0;w&&(x=w.BrushSprite.Brush,S=w.BrushSprite.Path);var C=m.Math.Vector2,E=function(e){function t(){return y(this,t),v(this,(t.__proto__||h()(t)).apply(this,arguments))}return b(t,_["BaseComponent"]),g(t,[{key:"_loadBrush",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props.brush;return new f.a(function(n,i){if(t.constructor===Object){var o=new window.Image;o.addEventListener("load",function(){e._brush.setImage(o),n()}),o.addEventListener("error",function(){i(new Error("Failed to load image at "+o.src))}),o.crossOrigin=e.context.editor.getCrossOrigin(),o.src=e._getAssetPath(t.image)}else n()})}},{key:"_drawBrush",value:function(){var e=new S(null,{brush:this._brush},this._canvas);e.addControlPoint(new C(.1,.5)),e.addControlPoint(new C(.9,.5)),e.render(new C(this._canvas.width,this._canvas.height))}},{key:"_instantiateBrush",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props.brush,t={color:m.Color.WHITE,size:.25};if(e.prototype&&e.prototype instanceof x){var n=e;this._brush=new n(t)}else{var i=m.Utils.extend({},e);delete i.image;var o=function(e){function t(){return y(this,t),v(this,(t.__proto__||h()(t)).apply(this,arguments))}return b(t,x),t}();o.identifier=e.identifier,this._brush=new o(m.Utils.extend({},i,t))}}},{key:"componentDidMount",value:function(){var e=this;(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||h()(t.prototype),"componentDidMount",this).call(this),this._instantiateBrush();var n=this._canvas,i=n.offsetWidth,o=n.offsetHeight;this._canvas.width=i,this._canvas.height=o,this._loadBrush().then(function(t){e._drawBrush()})}},{key:"render",value:function(){var e=this;return _.React.createElement(T,{onClick:this.props.onClick,selected:this.props.selected,className:void 0,"data-selected":this.props.selected},_.React.createElement(O,{innerRef:function(t){e._canvas=t}}))}}]),t}();t.a=E;var T=Object(_.adonis)(k).li({height:"65px",padding:0,borderRadius:0,borderWidth:0,borderBottomWidth:"1px",borderTop:"1px solid transparent","&:hover":{background:"rgba(255, 255, 255, 0.04)",border:"1px solid rgba(255, 255, 255, 0.08)"}},{selected:{background:function(e){return"rgba("+e.highlightColorRGB+", .2)"},border:function(e){return"1px solid "+e.highlightColor}}},"BrushListItem"),O=_.adonis.canvas({width:"100%",height:"100%"},"Canvas")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(5)),m=(n.n(h),n(54)),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=(d.Operations.SpriteOperation?d.Operations.SpriteOperation:{}).BrushSprite,y=d.Math.Vector2,v=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onMouseEnter","_onMouseLeave","_onMouseMove","_onDrawStart","_onDraw","_onDrawStop"),r.state=d.Utils.extend(r.state,{cursorPosition:new y(0,0),canvasClickDisabled:!0}),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,m["a"]),_(t,[{key:"_selectNextSprite",value:function(){}},{key:"_onDrawStart",value:function(e){var t=this.context.editor.getOutputDimensions();this._initialDrawPosition=e.clone();var n=this.getSharedState("brushSprite"),i=this.getSharedState("brushInstance"),o=this.getSharedState("operation");n||(n=o.createBrush(),o.addSprite(n),this.setSharedState({brushSprite:n})),this._currentPath=n.createPath(i),this._currentPath.addControlPoint(e.clone().divide(t)),this._lastDrawPosition=this._initialDrawPosition.clone(),this._lastCursorPosition=this._initialDrawPosition.clone()}},{key:"_onDraw",value:function(e,t,n){var i=this.context.editor,o=i.getOutputDimensions(),r=i.getOutputTextureDimensions(),a=this._lastCursorPosition.clone().add(n),s=i.zoom.level,l=this.getSharedState("brushSize");a.clone().subtract(this._lastDrawPosition).abs().len()/s>=l/10&&(this._currentPath.addControlPoint(a.clone().divide(o)),this.getSharedState("brushSprite").render(r),this._lastDrawPosition.copy(a)),this._lastCursorPosition.copy(a)}},{key:"_onDrawStop",value:function(){this._currentPath.setClosed(!0);var e=this.context.editor.getOutputTextureDimensions();this.getSharedState("brushSprite").render(e),this.props.controls.addLocalHistorySnapshot(),this._currentPath=null}},{key:"_onMouseEnter",value:function(){this.setState({cursorVisible:!0})}},{key:"_onMouseLeave",value:function(){this.setState({cursorVisible:!1})}},{key:"_onMouseMove",value:function(e){var t=h.Utils.getEventPosition(e),n=this._innerContainer.getBoundingClientRect();t.subtract(n.left,n.top),this.setState({cursorPosition:t})}},{key:"_getPropsForSprite",value:function(e){var n=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0}(t.prototype.__proto__||f()(t.prototype),"_getPropsForSprite",this).call(this,e);return e instanceof g&&(n.hideContent=!1),n}},{key:"_getCursorStyle",value:function(){return{width:this.getSharedState("brushSize")+8,height:this.getSharedState("brushSize")+8,left:this.state.cursorPosition.x,top:this.state.cursorPosition.y,marginLeft:-.5*(this.getSharedState("brushSize")+8),marginTop:-.5*(this.getSharedState("brushSize")+8)}}},{key:"_renderOverlayControls",value:function(){return h.React.createElement(h.DraggableComponent,{onStart:this._onDrawStart,onDrag:this._onDraw,onStop:this._onDrawStop},h.React.createElement(b,{onMouseEnter:this._onMouseEnter,onMouseLeave:this._onMouseLeave,onMouseMove:this._onMouseMove,className:void 0},h.React.createElement(k,{style:this._getCursorStyle(),visible:this.state.cursorVisible})))}}]),t}();v.contextTypes=m.a.contextTypes,t.a=v;var b=h.adonis.div({position:"absolute",top:0,left:0,overflow:"hidden",cursor:"none",width:"100%",height:"100%"},"BrushCanvasControls"),k=h.adonis.div({position:"absolute",display:"none",border:function(e){return"2px solid "+e.controlsKnobColor},boxShadow:"0 2px 6px 0 rgba(0, 0, 0, 0.20), inset 0 2px 6px 0 rgba(0, 0, 0, 0.20)",borderRadius:"50%"},{visible:{display:"block"}},"Cursor")},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(6),l=n.n(s),c=n(2),u=n.n(c),p=n(3),f=n.n(p),d=n(1),h=n.n(d),m=n(5),_=(n.n(m),n(55)),g=n(22),y=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},v=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var b=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||h()(t)).call.apply(e,[this].concat(i)));return r.state={renderAsSVG:!1,svgAttributes:{}},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=f()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(u.a?u()(e,t):e.__proto__=t)}(t,_["a"]),v(t,[{key:"componentDidMount",value:function(){var e=this;if(function e(t,n,i){null===t&&(t=Function.prototype);var o=l()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(i):void 0}(t.prototype.__proto__||h()(t.prototype),"componentDidMount",this).call(this),this.props.hideContent)return null;var n=this.props.sprite;n.getImage().src.match(/\w+\.svg(?=\?|$)/i)&&"none"!==n.getTintMode()&&g.a.loadXHR(n.getImage().src,"image/svg+xml").then(function(t){for(var n=t.responseXML.documentElement.attributes,i={},o=0;o<n.length;o++){var r=n[o],a=r.name,s=r.value;"xmlns:xlink"===a&&(a="xmlnsXlink"),i[a]=s}var l=t.responseText.match(/<svg\b[^>]*>([\s\S]*?)<\/svg>/im)[1];l=l.replace(/\s+?fill=["'].*?["']/gi,""),e.setState({renderAsSVG:!0,svgContent:l,svgAttributes:i})})}},{key:"_onBeforeScale",value:function(){var e=this.props.sprite;this._initialOptions={dimensions:e.getDimensions().clone()}}},{key:"_onScale",value:function(e){var t=this.context.editor,n=this._initialOptions.dimensions;this.props.sprite.set({dimensions:n.clone().multiply(e/t.zoom.level)}),this.forceUpdate(),t.render()}},{key:"_getSpriteDimensions",value:function(){var e=this.context.editor;return this.props.sprite.getDimensions().clone().multiply(e.zoom.level)}},{key:"_getContainerStyle",value:function(){var e=this.context.editor,t=e.getOutputDimensions(),n=this.props.sprite,i=n.getPosition().clone().multiply(t),o="rotateZ("+(180*n.getRotation()/Math.PI).toFixed(2)+"deg)",r=n.getDimensions().clone().multiply(e.zoom.level);return{width:r.x,height:r.y,left:i.x,top:i.y,marginLeft:-.5*r.x,marginTop:-.5*r.y,transform:o,MozTransform:o,msTransform:o,WebkitTransform:o,transformOrigin:"50% 50%",MozTransformOrigin:"50% 50%",msTransformOrigin:"50% 50%",WebkitTransformOrigin:"50% 50%"}}},{key:"_getContentStyle",value:function(){var e=this.props.sprite,t="rotateY("+(e.getFlipHorizontally()?180:0)+"deg) rotateX("+(e.getFlipVertically()?180:0)+"deg)",n={opacity:e.getAlpha(),transform:t,MozTransform:t,msTransform:t,WebkitTransform:t};return this.state.renderAsSVG&&(n.fill=e.getTintColor().toRGBA()),n}},{key:"_renderContent",value:function(){if(this.props.hideContent)return null;var e=this.props.sprite,t=this.state.svgAttributes;return this.state.renderAsSVG?React.createElement(w,y({style:this._getContentStyle(),dangerouslySetInnerHTML:{__html:this.state.svgContent}},t)):React.createElement(k,{src:e.getImage().src,style:this._getContentStyle()})}}]),t}();b.contextTypes=_.a.contextTypes,b.MIN_WIDTH=_.a.MIN_WIDTH,t.a=b;var k=m.adonis.img({width:"100%",height:"100%"},"Image"),w=m.adonis.svg({width:"100%",height:"100%"},"SVGImage")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(5)),m=(n.n(h),n(55)),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),g=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var y=d.Math.Vector2,v=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._onItemTouchStart=function(){r._hasTouchStarted||(r._hasTouchStarted||(r._hasTouchStarted=!0,r._touchCount=0),r._touchTimeout=setTimeout(function(){r._hasTouchStarted=!1,r._touchCount=0},300))},r._onItemTouchEnd=function(){r._hasTouchStarted&&(r._touchCount++,r._touchCount>=2&&(clearTimeout(r._touchTimeout),r._hasTouchStarted=!1,r._touchCount=0,r.props.selected&&r.enterEditMode()))},r._bindAll("_onTextChange","_onBlur","_onItemDoubleClick","_onWidthDrag","_onWidthDragStop"),r.state={editing:!1,updateBecauseIESucks:!1},r._hasTouchStarted=!1,r._touchCount=0,r._touchTimeout=null,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,m["a"]),_(t,[{key:"_isDraggingDisabled",value:function(){return g(t.prototype.__proto__||f()(t.prototype),"_isDraggingDisabled",this).call(this)||this.state.editing}},{key:"enterEditMode",value:function(){var e=this,t=this.context.editor,n=this.props.sprite;n.setVisible(!1),t.render(),this.setState({editing:!0},function(){n._edited||(n.setText(""),e._textField.value="",n._edited=!0,e.forceUpdate()),e._textField.focus(),e._textField.select()})}},{key:"leaveEditMode",value:function(){var e=this.context.editor;this.props.sprite.setVisible(!0),e.render(),this.setState({editing:!1})}},{key:"shouldComponentUpdate",value:function(){return!0}},{key:"_onTakeToFront",value:function(){var e;this.leaveEditMode();for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];(e=g(t.prototype.__proto__||f()(t.prototype),"_onTakeToFront",this)).call.apply(e,[this].concat(i))}},{key:"_onFlipHorizontally",value:function(){var e;this.leaveEditMode();for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];(e=g(t.prototype.__proto__||f()(t.prototype),"_onFlipHorizontally",this)).call.apply(e,[this].concat(i))}},{key:"_onDuplicate",value:function(){var e;this.leaveEditMode();for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];(e=g(t.prototype.__proto__||f()(t.prototype),"_onDuplicate",this)).call.apply(e,[this].concat(i))}},{key:"_onSpriteUpdate",value:function(e,n){var i=this;h.Utils.Browser.isIElte(10)&&n.alignment&&e.getAlignment()!==n.alignment&&this.setState({updateBecauseIESucks:!0},function(){Object(h.requestAnimationFrame)(function(){i.setState({updateBecauseIESucks:!1})})}),g(t.prototype.__proto__||f()(t.prototype),"_onSpriteUpdate",this).call(this)}},{key:"_onWidthDragStart",value:function(e,t,n){var i=this.context.editor,o=this.props.sprite,r=o.getAnchor();this._imageBoundingBox=this.props.canvasControls.getImageBoundingRect(),this._containerOffset=this.props.canvasControls.getContainerOffset();var a=this._getAbsoluteSpritePosition().add(this._imageBoundingBox.x,this._imageBoundingBox.y),s=o.getDimensions(i.getSDK(),i.getOutputDimensions()),l=new y(s.width,s.height),c=a.clone().subtract(l.clone().multiply(r)).add(l.clone().multiply(.5)).round(),u=n.clone().subtract(this._containerOffset).subtract(c);this._initialScaleSettings={maxWidth:o.getMaxWidth(),mouseDistanceFromCenter:u},this.props.onBeforeChange&&this.props.onBeforeChange(),this.props.onCanvasClickDisabled&&this.props.onCanvasClickDisabled()}},{key:"_onWidthDrag",value:function(e){var t=this.props.sprite,n=t.getRotation(),i=this._initialScaleSettings.mouseDistanceFromCenter.clone().add(e),o=Math.cos(n),r=Math.sin(n),a=Math.max(Math.abs(2*(i.x*o+i.y*r)),50)/this._imageBoundingBox.width;t.setMaxWidth(a),this.context.editor.render()}},{key:"_onWidthDragStop",value:function(){this.props.onAfterChange&&this.props.onAfterChange(),this.props.onCanvasClickEnabled&&this.props.onCanvasClickEnabled()}},{key:"_onBlur",value:function(){this.leaveEditMode();var e=this.props.sprite;e&&""===e.getText()&&(e.setText(this._t("pesdk.text.placeholder.defaultText")),e._edited=!1)}},{key:"_onTextChange",value:function(e){this.props.sprite.setText(e.target.value),this.forceUpdate()}},{key:"_onItemDoubleClick",value:function(){this.props.selected&&this.enterEditMode()}},{key:"_onBeforeScale",value:function(){var e=this.props.sprite;this._initialOptions={maxWidth:e.getMaxWidth(),fontSize:e.getFontSize()}}},{key:"_onScale",value:function(e){var t=this._initialOptions,n=t.maxWidth,i=t.fontSize,o=this.props.sprite;o.set({maxWidth:n*e,fontSize:i*e}),this.context.mediator.emit(h.Constants.EVENTS.TEXT_SCALED,o),this.forceUpdate()}},{key:"_getContainerStyle",value:function(){var e=this.context.editor,t=e.getOutputDimensions(),n=this.props.sprite,i=n.getPosition().clone().multiply(t),o="rotateZ("+(180*n.getRotation()/Math.PI).toFixed(2)+"deg)",r=n.getMaxWidth()*t.x,a=n.getDimensions(e.getSDK(),t).y;return{width:r,height:a,left:i.x,top:i.y,marginLeft:-.5*r,marginTop:-.5*a,transform:o,MozTransform:o,msTransform:o,WebkitTransform:o,transformOrigin:"50% 50%",MozTransformOrigin:"50% 50%",msTransformOrigin:"50% 50%",WebkitTransformOrigin:"50% 50%"}}},{key:"_getTextStyle",value:function(){var e=this.context.editor,t=this.props.sprite,n=e.getSDK(),i=e.getOutputDimensions(),o=t.getDOMStyle(n,i),r=this._getAbsoluteSpritePosition(),a=t.getDimensions(n,i);return o.height=Math.min(a.y,i.y-r.y+a.y/2),o}},{key:"_renderKnobs",value:function(){var e=this,n=g(t.prototype.__proto__||f()(t.prototype),"_renderKnobs",this).call(this);return["left","right"].forEach(function(t){var i="width-"+t,r=function(e,t,n){return t in e?o()(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},t,!0);n.push(h.React.createElement(h.DraggableComponent,{key:i,onStart:e._onWidthDragStart.bind(e,t),onDrag:e._onWidthDrag,onStop:e._onWidthDragStop},h.React.createElement(w,r)))}),n}},{key:"_getItemControlsProps",value:function(){return{onDoubleClick:this._onItemDoubleClick,onTouchStart:this._onItemTouchStart,onTouchEnd:this._onItemTouchEnd}}},{key:"_renderContent",value:function(){var e=this,t=this.props,n=t.sprite,i=t.selected,o=this.state,r=o.editing,a=o.updateBecauseIESucks,s=[];return this.props.hideContent&&!this.state.editing||s.push(h.React.createElement(b,{key:"text-field",editing:r,innerRef:function(t){e._textField=t},style:this._getTextStyle(),defaultValue:n.getText(),onBlur:this._onBlur,onChange:this._onTextChange,updateBecauseIESucks:a})),this.state.editing||s.push(h.React.createElement(k,{key:"disabled-overlay",className:void 0,selected:i})),s}}]),t}();v.contextTypes=m.a.contextTypes,v.MIN_WIDTH=100,t.a=v;var b=h.adonis.textarea({overflow:"hidden",border:"none",width:"100%",resize:"none",padding:0,":focus":{outline:"none"}},{updateBecauseIESucks:{width:"0px"},editing:{position:"absolute",zIndex:function(e){return e.zIndex("controlsOverlays")+1}}},"TextField"),k=h.adonis.div({position:"absolute",top:0,left:0,width:"100%",height:"100%"},"DisabledOverlay"),w=h.adonis.div({position:"absolute",width:"8px",height:"20px",marginTop:"-10px",cursor:"ew-resize",":before":{display:"block",position:"absolute",content:'""',background:"white",width:"4px",height:"12px",marginLeft:"-2px",marginTop:"-6px",top:"50%",left:"50%",boxShadow:function(e){return e.defaultShadow}}},{left:{left:"-5px",top:"50%"},right:{right:"-5px",top:"50%"}},"WidthControl")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),n(55)),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["a"]),m(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this);var e=this.props.sprite.getCanvas();this._brush&&this._appendCanvas(e)}},{key:"componentWillReceiveProps",value:function(e){if(e.sprite!==this.props.sprite){var t=this.props.sprite.getCanvas();if(t.parentNode.removeChild(t),this._brush){var n=e.sprite.getCanvas();this._appendCanvas(n)}}}},{key:"_appendCanvas",value:function(e){e.style.width="100%",e.style.height="100%",this._brush.appendChild(e)}},{key:"_renderOverlayControls",value:function(){return null}},{key:"render",value:function(){var e=this;return this.props.hideContent?null:d.React.createElement(g,{innerRef:function(t){e._brush=t}})}}]),t}();t.a=_;var g=d.adonis.div({position:"absolute",top:0,left:0,width:"100%",height:"100%"},"BrushItem")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),n(55)),d=(n(22),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._onItemDoubleClick=function(){return r.props.canvasControls.props.controls.editText()},r._onItemTouchStart=function(){r._hasTouchStarted||(r._hasTouchStarted||(r._hasTouchStarted=!0,r._touchCount=0),r._touchTimeout=setTimeout(function(){r._hasTouchStarted=!1,r._touchCount=0},300))},r._onItemTouchEnd=function(){if(r._hasTouchStarted){var e=r.props.canvasControls.props.controls;r._touchCount++,r._touchCount>=2&&(clearTimeout(r._touchTimeout),r._hasTouchStarted=!1,r._touchCount=0,e.editText())}},r.state={},r._hasTouchStarted=!1,r._touchCount=0,r._touchTimeout=null,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["a"]),d(t,[{key:"_onBeforeScale",value:function(){var e=this.props.sprite;this._initialOptions={width:e.getWidth()}}},{key:"_onScale",value:function(e){var t=this.context.editor,n=this._initialOptions.width;this.props.sprite.set({width:n*(e/t.zoom.level)}),this.forceUpdate(),t.render()}},{key:"_getSpriteDimensions",value:function(){var e=this.context.editor;return this.props.sprite.getDimensions().clone().multiply(e.zoom.level)}},{key:"_getContainerStyle",value:function(){var e=this.context.editor,t=e.getOutputDimensions(),n=this.props.sprite,i=n.getPosition().clone().multiply(t),o="rotateZ("+(180*n.getRotation()/Math.PI).toFixed(2)+"deg)",r=n.getDimensions().clone().multiply(e.zoom.level);return{width:r.x,height:r.y,left:i.x,top:i.y,marginLeft:-.5*r.x,marginTop:-.5*r.y,transform:o,MozTransform:o,msTransform:o,WebkitTransform:o,transformOrigin:"50% 50%",MozTransformOrigin:"50% 50%",msTransformOrigin:"50% 50%",WebkitTransformOrigin:"50% 50%"}}},{key:"_getContentStyle",value:function(){}},{key:"_getItemControlsProps",value:function(){return{onDoubleClick:this._onItemDoubleClick,onTouchStart:this._onItemTouchStart,onTouchEnd:this._onItemTouchEnd}}},{key:"_renderContent",value:function(){return null}}]),t}();h.contextTypes=f.a.contextTypes,h.MIN_WIDTH=f.a.MIN_WIDTH,t.a=h;p.adonis.img({width:"100%",height:"100%"},"Image"),p.adonis.svg({width:"100%",height:"100%"},"SVGImage")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(7),f=(n.n(p),n(5)),d=n.n(f),h=n(321),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["BaseControls"]),m(t,null,[{key:"mapOperationsToSharedState",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];var t=e.getOrCreate("filter");return{intensity:t?100*t.getIntensity():100,identifier:t?t.getIdentifier():null,filter:t?t.filter:null,setIntensity:function(e){t&&t.setIntensity(e/100)},setFilter:function(e){t&&t.setFilter(e)},setIdentifier:function(e){t&&t.setIdentifier(e)},setOperationOptions:function(e){t.set(e)}}}},{key:"isEnabled",value:function(e){return e.isToolEnabled("filter")&&e.isToolAllowed("filter")}},{key:"getPreloadAssets",value:function(e){var t=[],n=e.getOptions(),i=p.Utils.defaults(n.editor.controlsOptions.filter,this.defaultOptions);return new f.FilterManager(e.getUI(),i).getFiltersForCategory("all").forEach(function(e){void 0!==e.lutImage&&t.push([e.lutImage,!1])}),t}}]),t}();_.clickAtPosition=f.BaseControls.clickAtPosition,_.identifier="filter",_.controlsComponent=h.a,_.canvasControlsComponent=f.BaseControls.canvasControlsComponent,_.iconPath="editor/controls/filter/icon.png",_.activeIconPath="editor/controls/filter/icon-active.png",_.requiredOperations=["filter","transform"],_.updatableOperations=["filter"],_.switchToDefaultControlsOnRemoval=!1,_.defaultOptions={categories:[],replaceCategories:!1,availableFilters:null},d.a.Controls.FilterControls=_,t.a=_},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(8),f=n.n(p),d=n(1),h=n.n(d),m=n(7),_=n.n(m),g=n(5),y=(n.n(g),n(134)),v=n(15),b=n(322),k=n(323),w=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),x=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var S=void 0;m.Operations.FilterOperation&&(S=m.Operations.FilterOperation.Filters.IdentityFilter);var C=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||h()(t)).call.apply(e,[this].concat(i)));r._bindAll("_onIntensityChanged","_onListScroll");var a=r.context,s=a.ui,l=a.editor,c=a.theme;return r._loadedFilters=[],r._filterPreviewRenderer=new k.a(l),r._renderQueue=new y.a(1,1/0,c.listItemSlideInDelay),r._filterManager=new g.FilterManager(s,r.props.options),r._filterPreviewQueue=[],r._filterPreviews=[],r._category="all",r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,g["ControlsComponent"]),w(t,[{key:"fixStyles",value:function(){var e=this;return x(t.prototype.__proto__||h()(t.prototype),"fixStyles",this).call(this).then(function(){e._onListScroll()})}},{key:"componentDidMount",value:function(){var e=this;x(t.prototype.__proto__||h()(t.prototype),"componentDidMount",this).call(this),this._filterPreviewRenderer.init(),this._renderPreviewsAnimationFrame=Object(v.b)(function(){e._renderPreviews()})}},{key:"componentWillUnmount",value:function(){x(t.prototype.__proto__||h()(t.prototype),"componentWillUnmount",this).call(this),this._renderPreviewsAnimationFrame&&Object(v.a)(this._renderPreviewsAnimationFrame),this._renderQueue.dispose(),this._filterPreviewRenderer.dispose(),this._disposed=!0,window.clearInterval(this._interval)}},{key:"_renderPreviews",value:function(){var e=this,t=this.context.editor.getSDK().getRenderer(),n=this._getVisibleFilters().filter(function(t){return-1===e._loadedFilters.indexOf(t)});t.isOfType(_.a.RendererType.WEBGL)?n.forEach(function(t){e._loadedFilters.push(t),e._renderQueue.add(function(){return e._filterManager.instantiateFilterWithIdentifier(t.identifier).then(function(n){if(!e._disposed)return e._filterPreviewRenderer.render(n).then(function(n){e._filterPreviews[t.identifier]=n,e.forceUpdate()})})})}):(this._loadedFilters=this._loadedFilters.concat(n),n.forEach(function(t){e._renderQueue.add(function(){return new f.a(function(n){e._filterPreviews[t.identifier]=e._getAssetPath("editor/controls/filter/filters/"+t.identifier+".png",!0),e.forceUpdate(),n()})})}))}},{key:"_getVisibleFilters",value:function(){for(var e=[S].concat(this._filterManager.getFiltersForCategory(this._category)),t=[],n=this._container.getBoundingClientRect(),i=0,o=e.length;i<o;i++){var r=e[i],a=this.refs["filter-"+r.identifier].container.getBoundingClientRect();if(!(a.top>n.bottom+n.height||a.bottom<n.top))t.push(r);else if(t.length)break}return t}},{key:"_onListScroll",value:function(e){this._renderPreviews()}},{key:"_onItemClick",value:function(e){var t=this;this.sharedState.identifier!==e&&this._filterManager.instantiateFilterWithIdentifier(e).then(function(n){t.sharedState.setOperationOptions({filter:n,identifier:e,intensity:1}),t.context.editor.render()})}},{key:"_onIntensityChanged",value:function(e){this.sharedState.setIntensity(e)}},{key:"_renderListItems",value:function(){var e=this,t=this._filterManager.getFiltersForCategory(this._category),n=this.sharedState.identifier,i=this.sharedState.intensity,o=this._filterPreviews;return[S].concat(t).map(function(r,a){var s=r.identifier,l=!o[s]&&a===e._loadedFilters.length,c=s===n;return g.React.createElement(T,{key:s,"data-selected":c,"data-identifier":s,className:void 0},g.React.createElement(b.a,{ref:"filter-"+s,filter:r,identifier:s,lastChild:r===t[t.length-1],onClick:e._onItemClick.bind(e,s),selected:c,intensity:i,displaySlider:r!==S,onIntensityChanged:e._onIntensityChanged,visible:!!o[s],previewUrl:o[s]}),l&&g.React.createElement(O,null))})}},{key:"_getRootProps",value:function(){return{className:void 0,withBorderTop:!0}}},{key:"_renderContent",value:function(){var e=this;return g.React.createElement(g.ScrollableListComponent,{direction:"vertical",onScroll:this._onListScroll,innerRef:function(t){e._scrollbar=t}},g.React.createElement(E,null,this._renderListItems()))}}]),t}();C.contextTypes=g.ControlsComponent.contextTypes,C.propTypes=g.ControlsComponent.propTypes,C.RootElement=g.ControlsComponent.RootElement,t.a=C;var E=g.adonis.ul({listStyle:"none",margin:"0",padding:"25px"},"List"),T=g.adonis.li({position:"relative"},"ListItemContainer"),O=Object(g.adonis)(g.LoadingIndicatorComponent)({position:"absolute",top:0,left:0,marginTop:0},"LoadingIndicator")},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=d.ControlsStyles.ControlItem,g=d.ControlsStyles.ControlItemActiveOverlay,y=d.ControlsStyles.ControlItemTitle,v=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r.state={hovered:!1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["BaseComponent"]),m(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.previewUrl!==e.previewUrl||this.props.selected!==e.selected||this.props.visible!==e.visible||this.state.hovered!==t.hovered||this.props.filter!==e.filter||!(this.props.intensity===e.intensity||!e.selected)}},{key:"render",value:function(){var e=this,t=this.props,n=t.lastChild,i=t.onClick,o=t.onIntensityChanged,r=t.selected,a=t.intensity,s=t.displaySlider,l=t.visible,c=t.filter,u=null;this.props.previewUrl&&(u=d.React.createElement(S,{src:this.props.previewUrl}));var p=this.context.theme.transitionDuration,f={lastChild:n,onClick:i,visible:l};return d.React.createElement(b,h({},f,{animated:!0,innerRef:function(t){e._container=t},onMouseEnter:function(){return e.setState({hovered:!0})},onMouseLeave:function(){return e.setState({hovered:!1})}}),d.React.createElement(w,{selected:r},u,d.React.createElement(d.Transition,{active:r&&s,enterProp:"rendered",enterDuration:1e3*p,appearProp:"visible",appearDuration:1e3*p,leaveDuration:1e3*p},r&&s&&d.React.createElement(k,null,d.React.createElement(d.SliderComponent,{minValue:0,maxValue:100,valueUnit:"",middleDot:!1,value:a,onChange:o}))),d.React.createElement(x,{hovered:this.state.hovered},this._t("pesdk.filter.asset."+c.identifier)||c.defaultName),d.React.createElement(d.Transition,{active:r,enterProp:"rendered",enterDuration:1e3*p,appearProp:"visible",appearDuration:1e3*p,leaveDuration:1e3*p},d.React.createElement(C,{selected:r}))))}},{key:"container",get:function(){return this._container}}]),t}();v.contextTypes=d.BaseComponent.contextTypes,t.a=v;var b=Object(d.adonis)(_).div({background:function(e){return e.filterItemBackgroundColor}},{lastChild:{marginBottom:0}},"Item"),k=d.adonis.div({position:"absolute",zIndex:2,height:"15px",top:"50%",marginTop:"-8px",left:"15px",right:"15px",opacity:0,display:"none",transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"}},{visible:{opacity:1},rendered:{display:"block"}},"Slider"),w=d.adonis.div({height:"100%",":before":{content:'""',position:"absolute",height:"30px",right:0,bottom:0,left:0,zIndex:2,opacity:.9,backgroundImage:"linear-gradient(-180deg, rgba(0, 0, 0, 0.00) 0%, rgba(0, 0, 0, 0.00) 54%, rgba(0, 0, 0, 0.45) 100%)"}},"ItemContainer"),x=Object(d.adonis)(y).span({textShadow:"0 0 4px rgba(0, 0, 0, 0.5)"},"ItemTitle"),S=d.adonis.img({position:"absolute",top:"0",left:"0",width:"100%",zIndex:"1",opacity:"1"},"Preview"),C=Object(d.adonis)(g).div({},"Overlay")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(7),a=n.n(r),s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var l=r.Math.Vector2,c=new l(180,80),u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._editor=t,this._disposed=!1}return s(e,[{key:"init",value:function(){this._initSDK()}},{key:"render",value:function(e){var t=this;return this._filterOperation.setFilter(e),this._sdk.render().then(function(){return t._sdk.getCanvas().toDataURL("image/png")})}},{key:"_initSDK",value:function(){var e=this._editor.getOptions(),t=e.logLevel,n=e.debug,i=e.license,o=e.editor,r=o.smoothDownscaling,s=o.smoothUpscaling,l=o.preferredRenderer,u=this._editor.getSDK().getOperationsStack().getByIdentifier("exif-orientation"),p={logLevel:t,debug:n,pixelRatio:1,smoothDownscaling:r,smoothUpscaling:s,transparent:!0,license:i,image:this._editor.getSDK().getImage(),renderMode:"export",versionCheck:!1,displayWelcomeMessage:!1};this._sdk=new a.a(l,p),this._sdk.resizeTo(c),this._filterOperation=this._sdk.createOperation("filter"),u&&this._sdk.createOperation("exif-orientation",u.serializeOptions()),this._transformOperation=this._sdk.createOperation("transform");var f=this._calculateTransformOptions(),d=f.start,h=f.end,m=f.textureScale;this._transformOperation.set({start:d,end:h,textureScale:m}),this._sdk.render()}},{key:"_calculateTransformOptions",value:function(){var e=this._transformOperation.getInputDimensions(),t=e.x/e.y,n=new l,i=new l,o=c.x/c.y;if(t<=o){var r=1/e.y*(e.x/o);n.set(0,(1-r)/2),i.set(1,1-n.y)}else{var a=1/e.x*(o*e.y);n.set((1-a)/2,0),i.set(1-n.x,1)}var s=i.clone().subtract(n),u=e.clone().multiply(s),p=c.x/u.x;return{dimensions:c,start:n,end:i,textureScale:p}}},{key:"dispose",value:function(){this._sdk&&this._sdk.dispose()}},{key:"isDisposed",value:function(){return this._disposed}}]),e}();t.a=u},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),n(325)),d=(n(135),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onBlurRadiusChanged"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["ControlsComponent"]),d(t,[{key:"_isModeAvailable",value:function(e){var t=this.props.options.availableModes;return"none"===e||null===t||-1!==t.indexOf(e)}},{key:"_onItemClick",value:function(e){!(arguments.length>1&&void 0!==arguments[1])||arguments[1],arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.sharedState.setSelectedFocus(e)}},{key:"_onBlurRadiusChanged",value:function(e){this.sharedState.setBlurRadius(e)}},{key:"_renderListItems",value:function(){var e=this,t=this.props.controls,n=this.sharedState.operationIdentifier,i=this.sharedState.selectedFocus,o=this.sharedState.blurRadius;return t.constructor.ITEMS.filter(function(t){return e._isModeAvailable(t.identifier)}).map(function(t){var r=e._getAssetPath(t.backgroundImagePath,!0),a=e._getAssetPath(t.activeBackgroundImagePath,!0),s=t.identifier===i;return p.React.createElement(f.a,{key:t.identifier,title:e._t("pesdk.focus.button."+t.identifier),selected:s,showSlider:!!n,blurRadius:o,onBlurRadiusChanged:e._onBlurRadiusChanged,backgroundImagePath:r,activeBackgroundImagePath:a,onClick:e._onItemClick.bind(e,t,!0,!1)})},this)}},{key:"_getRootProps",value:function(){return{className:void 0,withBorderTop:!0}}},{key:"_renderContent",value:function(){var e=this;return p.React.createElement(p.ScrollableListComponent,{direction:"vertical",innerListRef:function(t){e._list=t},innerRef:function(t){e._scrollbar=t}},p.React.createElement(m,null,this._renderListItems()))}}]),t}();h.contextTypes=p.ControlsComponent.contextTypes,h.propTypes=p.ControlsComponent.propTypes,h.RootElement=p.ControlsComponent.RootElement,t.a=h;var m=p.adonis.ul({listStyle:"none",margin:0,padding:"25px"},"List")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d=p.ControlsStyles.ControlItem,h=p.ControlsStyles.ControlItemTitle,m=p.ControlsStyles.ControlItemActiveOverlay,_=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onSliderValueChanged"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["SharedStateComponent"]),f(t,[{key:"_onSliderValueChanged",value:function(e){var t=this.props.onBlurRadiusChanged,n=this.sharedState.inputDimensions.min();t&&t(e/n)}},{key:"_renderSlider",value:function(){var e=this.props,t=e.selected,n=e.showSlider,i=e.blurRadius;if(!t||!n)return null;var o=this.sharedState.inputDimensions,r=Math.min(180,Math.round(.1*o.min())),a=o.min();return p.React.createElement(p.SliderComponent,{minValue:0,maxValue:r,valueUnit:"",middleDot:!1,value:i*a,onChange:this._onSliderValueChanged})}},{key:"render",value:function(){var e=this.props,t=e.title,n=e.backgroundImagePath,i=e.activeBackgroundImagePath,o=e.selected,r=e.onClick,a=e.showSlider,s={backgroundImage:"url('"+(o?i:n)+"')"},l=this.context.theme.transitionDuration;return p.React.createElement(g,{selected:o,"data-selected":o,className:void 0,onClick:r,style:s},p.React.createElement(y,{selected:o,withSlider:o&&a},t),p.React.createElement(b,{visible:o&&a},this._renderSlider()),p.React.createElement(p.Transition,{active:o,enterProp:"rendered",enterDuration:1e3*l,appearProp:"visible",appearDuration:1e3*l,leaveDuration:1e3*l},p.React.createElement(v,{selected:!0})))}}]),t}();_.contextTypes=p.SharedStateComponent.contextTypes,t.a=_;var g=Object(p.adonis)(d).li({transition:"background-image .4s ease-in-out",marginBottom:"8px",backgroundColor:function(e){return e.focusItemBackgroundColor},backgroundRepeat:"no-repeat",backgroundSize:"cover",":last-child":{marginBottom:0}},"ListItem"),y=Object(p.adonis)(h).div({transitionProperty:"bottom, margin",transitionDuration:".2s",transitionTimingFunction:"ease-out",bottom:"50%",marginBottom:"-7px",letterSpacing:"3px",textTransform:"uppercase",fontFamily:function(e){return e.uppercaseSemiBoldFontFamily},textShadow:"0 0 6px #000000"},{selected:{transitionDelay:0,transitionTimingFunction:"ease-in"},withSlider:{bottom:"8px",marginBottom:0}},"ListItemTitle"),v=Object(p.adonis)(m).div({backgroundImage:"linear-gradient(-180deg, rgba(20,45,87,0.12) 0%, rgba(0,0,0,0.14) 100%)",backgroundRepeat:"no-repeat"},"ListItemOverlay"),b=p.adonis.div({transition:"opacity .2s ease-out, visibility .2s ease-out",position:"absolute",zIndex:2,height:"15px",top:"50%",marginTop:"-8px",left:"15px",right:"15px",opacity:0,visibility:"hidden"},{visible:{transition:"opacity .2s ease-in, visibility .2s ease-in",opacity:1,visibility:"visible"}},"Slider")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(7),f=(n.n(p),n(5)),d=(n.n(f),n(327)),h=n(328),m=n(329),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),r=0;r<n;r++)i[r]=arguments[r];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return c._bindAll("_onZoomDone"),c._events=(a={},s=f.Constants.EVENTS.ZOOM_DONE,l=c._onZoomDone,s in a?o()(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c.state=p.Utils.extend(c.state,{zoomDone:!1}),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["CanvasControlsComponent"]),_(t,[{key:"_onZoomDone",value:function(){this.setState({zoomDone:!0})}},{key:"_renderControls",value:function(){var e=void 0;switch(this.sharedState.selectedFocus){case"radial":e=d.a;break;case"linear":e=h.a;break;case"mirrored":e=m.a;break;default:return f.React.createElement("div",null)}return f.React.createElement(e,{zoomDone:this.state.zoomDone})}}]),t}();g.contextTypes=f.CanvasControlsComponent.contextTypes,t.a=g},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(5)),m=(n.n(h),n(15)),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=h.ControlsStyles.Knob,y=h.ControlsStyles.FullContainer,v=d.Math.Vector2,b=d.Math.Rectangle,k=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),r=0;r<n;r++)i[r]=arguments[r];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return c._bindAll("_onCircleDragStart","_onCircleDrag","_onKnobDragStart","_onKnobDrag","_onZoomDone"),c.state=d.Utils.extend(c.state,{circlePosition:new v,circleDimensions:new v,knobPosition:new v,visible:!1}),c._knobChangedManually=!1,c._events=(a={},s=h.Constants.EVENTS.ZOOM_DONE,l=c._onZoomDone,s in a?o()(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c.props.zoomDone&&Object(m.b)(function(){c._onZoomDone()}),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["SharedStateComponent"]),_(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._updateOnCanvasControls(),this._updatePositionsAndDimensions()}},{key:"sharedStateDidChange",value:function(e,t){this._operation&&t.operation&&this._operation!==t.operation&&this._operation.constructor===t.operation.constructor&&(t.operation.set(this._operation.serializeOptions()),this._operation=t.operation)}},{key:"_onZoomDone",value:function(){this.state.visible||(this.state.visible=!0),this._updateOnCanvasControls(),this._updatePositionsAndDimensions()}},{key:"_onCircleDragStart",value:function(){this._initialPosition=this.sharedState.radialFocus.position.clone(),this._initialKnobPosition=this.state.knobPosition.clone()}},{key:"_onCircleDrag",value:function(e){var t=this.context.editor,n=t.getOutputDimensions(),i=e.clone().divide(n),o=this._initialPosition.clone().add(i),r=this._initialKnobPosition.clone().add(e);this.sharedState.setPosition(o),this.state.knobPosition=r,t.render(),this._updatePositionsAndDimensions()}},{key:"_onKnobDragStart",value:function(e){this._knobChangedManually=!0,this._initialKnobPosition=this.state.knobPosition.clone()}},{key:"_onKnobDrag",value:function(e){var t=this.context.editor,n=t.getOutputDimensions(),i=this._initialKnobPosition.clone().add(e).clamp(new v(0,0),n),o=this.sharedState.radialFocus.position.clone().multiply(n),r=i.clone().subtract(o).abs().len(),a=r/2;this.setState({knobPosition:i,circleDimensions:new v(2*r,2*r)}),this.sharedState.setOperationOptions({radius:r/n.min(),gradientRadius:a/n.min()}),t.render()}},{key:"_updatePositionsAndDimensions",value:function(){var e=this.context.editor.getOutputDimensions(),t=this.sharedState.radialFocus.position.clone().multiply(e),n=this.sharedState.radialFocus.radius*e.min(),i=2*n,o={circleDimensions:new v(i,i),circlePosition:t};this._knobChangedManually||(o.knobPosition=t.clone().add(n,0)),this.setState(o)}},{key:"_updateOnCanvasControls",value:function(){var e=this.context.editor.getSDK().getSprite().getBounds(),t=this._container.getBoundingClientRect(),n=this.context.appComponent.getBounds(),i=new b(Math.floor(e.x-(t.left-n.left)),Math.floor(e.y-(t.top-n.top)),Math.ceil(e.width)+1,Math.ceil(e.height)+1);h.Utils.styleElement(this._onCanvasControls,{left:i.x+"px",top:i.y+"px",width:i.width+"px",height:i.height+"px"}),this.forceUpdate()}},{key:"_getCircleStyles",value:function(){return{width:this.state.circleDimensions.x,height:this.state.circleDimensions.y,left:this.state.circlePosition.x,top:this.state.circlePosition.y,marginLeft:-.5*this.state.circleDimensions.x,marginTop:-.5*this.state.circleDimensions.y}}},{key:"_getKnobStyle",value:function(){return{left:this.state.knobPosition.x,top:this.state.knobPosition.y}}},{key:"render",value:function(){var e=this;return h.React.createElement(w,{innerRef:function(t){e._container=t}},h.React.createElement(h.Transition,{active:this.state.visible,enterProp:"rendered",enterDuration:1e3*this.context.theme.transitionDuration,appearProp:"visible",appearDuration:1e3*this.context.theme.transitionDuration,leaveDuration:1e3*this.context.theme.transitionDuration},h.React.createElement(x,{innerRef:function(t){e._onCanvasControls=t}},h.React.createElement(h.DraggableComponent,{onStart:this._onCircleDragStart,onDrag:this._onCircleDrag},h.React.createElement(C,{className:void 0,style:this._getCircleStyles()})),h.React.createElement(h.DraggableComponent,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag},h.React.createElement(S,{className:void 0,style:this._getKnobStyle()})))))}}]),t}();k.contextTypes=h.SharedStateComponent.contextTypes,t.a=k;var w=Object(h.adonis)(y).div({overflow:"hidden"},"CanvasControls"),x=h.adonis.div({transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"},position:"relative",display:"none",opacity:0},{rendered:{display:"block"},visible:{opacity:1}},"OnCanvasControls"),S=Object(h.adonis)(g).div({},"Knob"),C=h.adonis.div({position:"absolute",borderRadius:"50%",border:function(e){return"2px solid "+e.controlsOutlineColor},boxShadow:"0 2px 6px 0 rgba(0, 0, 0, 0.20), inset 0 2px 6px 0 rgba(0, 0, 0, 0.20)",cursor:"move"},"Circle")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(5)),m=(n.n(h),n(15)),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=h.ControlsStyles.Knob,y=h.ControlsStyles.FullContainer,v=d.Math.Vector2,b=d.Math.Rectangle,k=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),r=0;r<n;r++)i[r]=arguments[r];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return c._bindAll("_onKnobDragStart","_onKnobDrag","_onZoomDone"),c.state=d.Utils.extend(c.state,{visible:!1}),c._events=(a={},s=h.Constants.EVENTS.ZOOM_DONE,l=c._onZoomDone,s in a?o()(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c.props.zoomDone&&Object(m.b)(function(){c._onZoomDone()}),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["SharedStateComponent"]),_(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._updateOnCanvasControls()}},{key:"sharedStateDidChange",value:function(e,t){this._operation&&t.operation&&this._operation!==t.operation&&this._operation.constructor===t.operation.constructor&&(t.operation.set(this._operation.serializeOptions()),this._operation=t.operation)}},{key:"_onZoomDone",value:function(){this.state.visible||(this.state.visible=!0),this._updateOnCanvasControls()}},{key:"_onKnobDragStart",value:function(e,t){this._initialPosition=this.sharedState.linearFocus["controlPoint"+e]}},{key:"_onKnobDrag",value:function(e,t){var n=this.context.editor.getSDK().getSprite().getBounds(),i=this._container.getBoundingClientRect(),o=this.context.appComponent.getBounds(),r=this._initialPosition.clone().multiply(n.width,n.height).add(t).clamp(new v(i.left-o.left-n.x,i.top-o.top-n.y),new v(i.width-(n.x-(i.left-o.left)),i.height-(n.y-(i.top-o.top)))).divide(n.width,n.height);this.sharedState["setControlPoint"+e](r)}},{key:"_updateOnCanvasControls",value:function(){var e=this.context.editor.getSDK().getSprite().getBounds(),t=this._container.getBoundingClientRect(),n=this.context.appComponent.getBounds(),i=new b(Math.floor(e.x-(t.left-n.left)),Math.floor(e.y-(t.top-n.top)),Math.ceil(e.width)+1,Math.ceil(e.height)+1);h.Utils.styleElement(this._onCanvasControls,{left:i.x+"px",top:i.y+"px",width:i.width+"px",height:i.height+"px"}),this.forceUpdate()}},{key:"_getKnobStyle",value:function(e){var t=this.context.editor,n=this.sharedState.linearFocus["controlPoint"+e],i=t.getSDK().getSprite().getBounds(),o=n.clone().multiply(i.width,i.height);return{left:o.x,top:o.y}}},{key:"_getLineStyle",value:function(){var e=this.context.editor.getSDK().getSprite().getBounds(),t=this.sharedState.linearFocus.controlPoint1.clone(),n=this.sharedState.linearFocus.controlPoint2.clone(),i={1:t.multiply(e.width,e.height),2:n.multiply(e.width,e.height)},o=i[2].clone().subtract(i[1]),r=o.len(),a=Math.atan2(o.y,o.x);return{width:r+"px",left:i[1].x+"px",top:i[1].y+"px",transform:"rotate("+a+"rad) translateY(-50%)"}}},{key:"_renderKnobs",value:function(){for(var e=[],t=1;t<=2;t++)e.push(h.React.createElement(h.DraggableComponent,{onStart:this._onKnobDragStart.bind(this,t),onDrag:this._onKnobDrag.bind(this,t),key:t},h.React.createElement(S,{style:this._getKnobStyle(t),className:void 0})));return e}},{key:"render",value:function(){var e=this;return h.React.createElement(w,{innerRef:function(t){e._container=t}},h.React.createElement(h.Transition,{active:this.state.visible,enterProp:"rendered",enterDuration:1e3*this.context.theme.transitionDuration,appearProp:"visible",appearDuration:1e3*this.context.theme.transitionDuration,leaveDuration:1e3*this.context.theme.transitionDuration},h.React.createElement(x,{innerRef:function(t){e._onCanvasControls=t}},this._renderKnobs(),h.React.createElement(C,{style:this._getLineStyle()}))))}}]),t}();k.contextTypes=h.SharedStateComponent.contextTypes,t.a=k;var w=Object(h.adonis)(y).div({overflow:"hidden"},"CanvasControls"),x=h.adonis.div({transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"},position:"relative",display:"none",opacity:0},{rendered:{display:"block"},visible:{opacity:1}},"OnCanvasControls"),S=Object(h.adonis)(g).div({zIndex:function(e){return e.zIndex("controlsOverlays")+1}},"Knob"),C=h.adonis.div({position:"absolute",height:"2px",boxShadow:"0 2px 6px 0 rgba(0, 0, 0, 0.20)",background:function(e){return e.controlsOutlineColor},transform:"translateY(-50%)",transformOrigin:"0 0"},"Line")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(5)),m=(n.n(h),n(15)),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=h.ControlsStyles.Knob,y=h.ControlsStyles.FullContainer,v=d.Math.Vector2,b=d.Math.Rectangle,k=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),r=0;r<n;r++)i[r]=arguments[r];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return c._bindAll("_onCenterDragStart","_onCenterDrag","_onKnobDragStart","_onKnobDrag","_onZoomDone"),c.state=d.Utils.extend(c.state,{areaPosition:new v,areaDimensions:new v,knobPosition:new v,visible:!1}),c._events=(a={},s=h.Constants.EVENTS.ZOOM_DONE,l=c._onZoomDone,s in a?o()(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c.props.zoomDone&&Object(m.b)(function(){c._onZoomDone()}),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["SharedStateComponent"]),_(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._updateOnCanvasControls(),this._updatePositionsAndDimensions()}},{key:"sharedStateDidChange",value:function(e,t){this._operation&&t.operation&&this._operation!==t.operation&&this._operation.constructor===t.operation.constructor&&(t.operation.set(this._operation.serializeOptions()),this._operation=t.operation)}},{key:"_onZoomDone",value:function(){this.state.visible||(this.state.visible=!0),this._updateOnCanvasControls(),this._updatePositionsAndDimensions()}},{key:"_onCenterDragStart",value:function(){this._initialStart=this.sharedState.mirroredFocus.start,this._initialEnd=this.sharedState.mirroredFocus.end,this._initialDist=this._initialEnd.clone().subtract(this._initialStart)}},{key:"_onCenterDrag",value:function(e){var t=this.context.editor.getOutputDimensions(),n=e.clone().divide(t),i=this._initialStart.clone().add(n).clamp(new v(0,0),new v(1,1).subtract(this._initialDist)),o=i.clone().add(this._initialDist);this.sharedState.setOperationOptions({start:i,end:o}),this._updatePositionsAndDimensions()}},{key:"_onKnobDragStart",value:function(e){this._initialKnobPosition=this.state.knobPosition.clone()}},{key:"_onKnobDrag",value:function(e){var t=this.context.editor.getOutputDimensions(),n=this._initialKnobPosition.clone().add(e).clamp(new v(0,0),t),i=n.clone().subtract(this.state.areaPosition),o=this.state.areaPosition.clone().add(-i.y,i.x).divide(t),r=this.state.areaPosition.clone().add(i.y,-i.x).divide(t),a=2*i.len();this.sharedState.setOperationOptions({start:o,end:r,size:a/t.min(),gradientSize:a/t.min()}),this.setState({knobPosition:n,areaDimensions:new v(this.state.areaDimensions.x,a)})}},{key:"_getAreaStyle",value:function(){var e=this.state.knobPosition.clone().subtract(this.state.areaPosition),t="rotate("+(-(Math.atan2(e.x,e.y)*(180/Math.PI))).toFixed(2)+"deg)";return{width:this.state.areaDimensions.x,height:this.state.areaDimensions.y,left:this.state.areaPosition.x,top:this.state.areaPosition.y,marginLeft:-.5*this.state.areaDimensions.x,marginTop:-.5*this.state.areaDimensions.y,transform:t,MozTransform:t,msTransform:t,WebkitTransform:t}}},{key:"_getKnobStyle",value:function(){return{left:this.state.knobPosition.x,top:this.state.knobPosition.y}}},{key:"_updatePositionsAndDimensions",value:function(){var e=this.context.editor.getOutputDimensions(),t=this.sharedState.mirroredFocus,n=t.start,i=t.end,o=t.size;n=n.clone().multiply(e),i=i.clone().multiply(e),o*=e.min();var r=i.clone().subtract(n),a=n.clone().add(r.clone().divide(2)),s=new v(2*e.len(),o),l=r.len(),c=r.clone().divide(l).divide(2);this.setState({areaDimensions:s,areaPosition:a.clone(),knobPosition:a.clone().add(-o*c.y,o*c.x)})}},{key:"_updateOnCanvasControls",value:function(){var e=this.context.editor.getSDK().getSprite().getBounds(),t=this._container.getBoundingClientRect(),n=this.context.appComponent.getBounds(),i=new b(Math.floor(e.x-(t.left-n.left)),Math.floor(e.y-(t.top-n.top)),Math.ceil(e.width)+1,Math.ceil(e.height)+1);h.Utils.styleElement(this._onCanvasControls,{left:i.x+"px",top:i.y+"px",width:i.width+"px",height:i.height+"px"}),this.forceUpdate()}},{key:"render",value:function(){var e=this;return h.React.createElement(w,{innerRef:function(t){e._container=t}},h.React.createElement(h.Transition,{active:this.state.visible,enterProp:"rendered",enterDuration:1e3*this.context.theme.transitionDuration,appearProp:"visible",appearDuration:1e3*this.context.theme.transitionDuration,leaveDuration:1e3*this.context.theme.transitionDuration},h.React.createElement(x,{innerRef:function(t){e._onCanvasControls=t}},h.React.createElement(h.DraggableComponent,{onStart:this._onCenterDragStart,onDrag:this._onCenterDrag},h.React.createElement(C,{className:void 0,style:this._getAreaStyle()})),h.React.createElement(h.DraggableComponent,{onStart:this._onKnobDragStart,onDrag:this._onKnobDrag},h.React.createElement(S,{className:void 0,style:this._getKnobStyle()})))))}}]),t}();k.contextTypes=h.SharedStateComponent.contextTypes,t.a=k;var w=Object(h.adonis)(y).div({overflow:"hidden"},"CanvasControls"),x=h.adonis.div({transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"},position:"relative",display:"none",opacity:0,overflow:"hidden"},{rendered:{display:"block"},visible:{opacity:1}},"OnCanvasControls"),S=Object(h.adonis)(g).div({zIndex:function(e){return e.zIndex("controlsOverlays")+1}},"Knob"),C=h.adonis.div({position:"absolute",border:function(e){return"2px solid "+e.controlsOutlineColor},boxShadow:"0 2px 6px 0 rgba(0, 0, 0, 0.20), inset 0 2px 6px 0 rgba(0, 0, 0, 0.20)",cursor:"move"},"Area")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=n.n(p),d=n(331),h=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseControls"]),h(t,[{key:"loadFrame",value:function(e){var t=this,n=this.context.editor,i=new p.Frame(this.context.ui,e),o=n.operations.getOrCreate("frame"),r=void 0,a=setTimeout(function(){r=p.ModalManager.instance.displayLoading(t._t("pesdk.common.text.loading"))},100);return i.load().then(function(){r&&r.close(),a&&(clearTimeout(a),a=null),o.setFrame(i.getFrame())})}}],[{key:"mapOperationsToSharedState",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1],arguments.length>2&&void 0!==arguments[2]&&arguments[2];var t=e.get("frame")||null,n=null;return t&&(n=t.getFrame()),{operation:t,frame:n,frameIdentifier:n?n.identifier:null,tintColor:t?t.getTintColor():null,removeFrame:function(){t&&e.remove(t)},setTintColor:function(e){t&&t.setTintColor(e.clone())}}}},{key:"isEnabled",value:function(e){return e.isToolAllowed("frame")&&e.isToolEnabled("frame")}}]),t}();m.clickAtPosition=p.BaseControls.clickAtPosition,m.getPreloadAssets=p.BaseControls.getPreloadAssets,m.identifier="frame",m.controlsComponent=d.a,m.canvasControlsComponent=p.BaseControls.canvasControlsComponent,m.iconPath="editor/controls/frame/icon.png",m.activeIconPath="editor/controls/frame/icon-active.png",m.requiredOperations=["frame"],m.defaultOptions={categories:[],replaceCategories:!1,availableFrames:null},m.updatableOperations=["frame"],m.switchToDefaultControlsOnRemoval=!1,f.a.Controls.FrameControls=m,t.a=m},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),n(332)),m=n(334),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g={ROOT:1,CATEGORY:2,OPTIONS:3},y=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));r._bindAll("_onFrameClick","_onReplaceClick"),r._initFrameManager(),r._needsStyleFixes=!0;var a=g.ROOT,s=r.getSharedState("operation");return s&&s.getFrame()&&(a=g.OPTIONS),r.state={currentPanel:a},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["ControlsComponent"]),_(t,[{key:"fixStyles",value:function(){var e=this;return this._list.style.height="100%",function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0}(t.prototype.__proto__||f()(t.prototype),"fixStyles",this).call(this).then(function(){if(d.Utils.Browser.isIElte(10)){var t=e._container.offsetHeight;e._list.style.height=t+"px"}return e.refs.panel.fixStyles()})}},{key:"componentDidUpdate",value:function(e,t){this.state.currentPanel!==t.currentPanel&&this.fixStyles()}},{key:"_initFrameManager",value:function(){this._frameManager=new d.FrameManager(this.context.ui,this.props.options)}},{key:"sharedStateDidChange",value:function(e,t){var n=this.context.editor.operations.get("frame");return!n||n&&!n.getFrame()?this.setState({currentPanel:g.ROOT}):this.setState({currentPanel:g.OPTIONS})}},{key:"_onReplaceClick",value:function(){this.setState({currentPanel:g.ROOT})}},{key:"_onCategoryClick",value:function(e){this.setState({currentPanel:g.CATEGORY,category:e})}},{key:"_onFrameClick",value:function(e){var t=this;if(!e)return this.sharedState.removeFrame(),void this.props.controls.addLocalHistorySnapshot("frame-image",!0);this.props.controls.loadFrame(e).then(function(){t.props.controls.addLocalHistorySnapshot("frame-image",!1),t.setState({currentPanel:g.OPTIONS})})}},{key:"_renderCurrentPanel",value:function(){var e=this,t=this.props.controls;switch(this.state.currentPanel){case g.ROOT:return d.React.createElement(h.a,{innerRef:function(t){e._list=t},frameManager:this._frameManager,onFrameClick:this._onFrameClick,controls:t,ref:"panel"});case g.OPTIONS:return d.React.createElement(m.a,{innerRef:function(t){e._list=t},frameManager:this._frameManager,onReplaceClick:this._onReplaceClick,onNewFrameClick:this._onNewFrameClick,controls:t,ref:"panel"})}}},{key:"_getRootProps",value:function(){return{className:void 0,withBorderTop:!0}}},{key:"_renderContent",value:function(){return this._renderCurrentPanel()}}]),t}();y.contextTypes=d.ControlsComponent.contextTypes,y.RootElement=d.ControlsComponent.RootElement,t.a=y},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),n(15)),m=n(333),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,d["BaseComponent"]),_(t,[{key:"fixStyles",value:function(){var e=this;return u.a.resolve().then(function(){d.Utils.Browser.isIElte(10)?Object(h.b)(function(){e._scrollbar.update()}):e._scrollbar.update()})}},{key:"render",value:function(){var e=this,t=this.props,n=t.frameManager,i=t.innerRef;return d.React.createElement(y,{innerRef:function(t){i&&i(t),e._wrapper=t},className:void 0},d.React.createElement(d.ScrollableListComponent,{direction:"vertical",innerRef:function(t){e._scrollbar=t}},d.React.createElement(m.a,{frames:n.getFramesForCategory("all"),onFrameClick:this.props.onFrameClick})))}}]),t}();g.contextTypes=d.BaseComponent.contextTypes,t.a=g;var y=d.adonis.div({display:"table",tableLayout:"fixed",width:"100%",height:"100%"},"Wrapper")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d=p.ControlsStyles.PlainControlItem,h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["SharedStateComponent"]),f(t,[{key:"_onFrameClick",value:function(e){this.props.onFrameClick&&this.props.onFrameClick(e)}},{key:"_renderListItems",value:function(){var e=this,t=this.props.frames,n=this.getSharedState.frameIdentifier,i=this.getSharedState("selectedSprite");return i&&(n=i.getIdentifier()),t.map(function(t){var i={background:"url('"+e._getAssetPath(t.thumbnail)+"') no-repeat center center",backgroundSize:"contain"};return p.React.createElement(_,{selected:t.identifier===n,key:t.identifier,onClick:e._onFrameClick.bind(e,t),className:void 0,twoColumns:!0},p.React.createElement(g,{style:i}))})}},{key:"render",value:function(){var e=this.sharedState.frame;return p.React.createElement(m,null,p.React.createElement(_,{selected:!e,onClick:this._onFrameClick.bind(this,null),className:void 0,withText:!0,twoColumns:!0},this._t("pesdk.frame.button.none")),this._renderListItems())}}]),t}();h.contextTypes=p.SharedStateComponent.contextTypes,t.a=h;var m=p.adonis.ul({listStyle:"none",margin:0,padding:0,paddingTop:"25px",paddingLeft:"17px",textAlign:"left"},"FrameList"),_=Object(p.adonis)(d).li({display:"inline-block",verticalAlign:"top",position:"relative",cursor:"pointer",":last-child":{marginBottom:"25px"}},"FrameListItem"),g=p.adonis.div({position:"absolute",top:"5px",right:"5px",bottom:"5px",left:"5px"},"FrameImage")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),n(15)),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=d.ControlsStyles.PlainControlItemBackground,g=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));r._bindAll("_onTintToggle","_onTintColorChange","_onOpacityChange","_onWidthChange");var a=r.sharedState.tintColor;return r.state={tintEnabled:!!a&&a.a>0,tintColor:a},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,d["SharedStateComponent"]),m(t,[{key:"_onTintToggle",value:function(e){var t=this.state.tintEnabled,n=this.sharedState.tintColor.clone();n.a=t?0:1,this.sharedState.setTintColor(n),this.props.controls.addLocalHistorySnapshot("frame-tint-enabled"),this.context.editor.render(),this.setState({tintEnabled:!t})}},{key:"_onTintColorChange",value:function(e){this.sharedState.setTintColor(e.clone()),this.props.controls.addLocalHistorySnapshot("frame-tint-color",!0),this.context.editor.render()}},{key:"sharedStateDidChange",value:function(){var e=this.sharedState.tintColor;this.setState({tintEnabled:!!e&&e.a>0,tintColor:e?e.clone():null})}},{key:"_onOpacityChange",value:function(e){this.getSharedState("operation").setAlpha(e/100),this.props.controls.addLocalHistorySnapshot("frame-opacity",!0),this.context.editor.render(),this.forceUpdate()}},{key:"_onWidthChange",value:function(e){var t=this.context.editor,n=this.getSharedState("operation"),i=n.getInputDimensions().min();n.setScale(e/i),this.props.controls.addLocalHistorySnapshot("frame-width",!0),t.render(),this.forceUpdate()}},{key:"fixStyles",value:function(){var e=this;return u.a.resolve().then(function(){d.Utils.Browser.isIElte(10)?Object(h.b)(function(){e._scrollbar.update()}):e._scrollbar.update()})}},{key:"render",value:function(){var e=this,t=this.props,n=t.innerRef,i=t.onReplaceClick,o=this.getSharedState("operation"),r=o.getFrame(),a=o.getInputDimensions().min(),s=r.tintable,l={background:"url('"+this._getAssetPath(r.thumbnail,!1)+"') center center / contain no-repeat"};return d.React.createElement(y,{innerRef:function(t){n&&n(t),e._wrapper=t},className:void 0},d.React.createElement(d.ScrollableListComponent,{direction:"vertical",innerRef:function(t){e._scrollbar=t}},d.React.createElement("div",null,d.React.createElement(v,null,d.React.createElement(b,null,d.React.createElement(k,null,d.React.createElement(w,{style:l,onClick:i})),d.React.createElement(x,null,d.React.createElement(S,null,this._t("pesdk.frame.asset."+r.identifier)||r.defaultName),d.React.createElement(C,{onClick:i,className:void 0},this._t("pesdk.frame.button.replace")))),d.React.createElement(d.SliderControlComponent,{minValue:0,value:Math.round(100*o.getAlpha()),maxValue:100,label:this._t("pesdk.frame.title.opacity"),onSliderValueChange:this._onOpacityChange,onValueChange:this._onOpacityChange,middleDot:!1,className:void 0}),d.React.createElement(d.SliderControlComponent,{minValue:.05*a,value:Math.round(o.getScale()*a),maxValue:.3*a,label:this._t("pesdk.frame.title.width"),onSliderValueChange:this._onWidthChange,onValueChange:this._onWidthChange,middleDot:!1,className:void 0})),s&&d.React.createElement(d.CollapseSectionComponent,{toggleable:!0,title:this._t("pesdk.frame.button.fill"),expanded:this.state.tintEnabled,className:void 0,onToggle:this._onTintToggle},d.React.createElement(E,{value:this.state.tintColor,onColorPickerToggle:this.fixStyles,onChange:this._onTintColorChange})))))}}]),t}();g.contextTypes=d.SharedStateComponent.contextTypes,t.a=g;var y=d.adonis.div({display:"table",tableLayout:"fixed",width:"100%",height:"100%"},"Wrapper"),v=d.adonis.div({padding:"25px",borderBottom:"1px solid #1B1B1E"},"TopSection"),b=d.adonis.div({position:"relative",marginBottom:"25px",textAlign:"left",height:"72px"},"Details"),k=Object(d.adonis)(_).div({position:"absolute",left:0,top:0,height:"72px",width:"72px",padding:0,cursor:"pointer"},"Thumbnail"),w=d.adonis.div({position:"absolute",top:"5px",right:"5px",bottom:"5px",left:"5px"},"ThumbnailImage"),x=d.adonis.div({position:"absolute",right:0,left:"87px",top:0,fontSize:"13px"},"DetailsContainer"),S=d.adonis.div({height:"auto",width:"100%",marginTop:"12px",marginBottom:"8px",color:function(e){return e.dimmedTextColor},overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap",fontFamily:function(e){return e.regularFontFamily}},"Title"),C=d.adonis.div({width:"100%",color:function(e){return e.textColor},textTransform:"uppercase",letterSpacing:"2px",fontFamily:function(e){return e.uppercaseSemiBoldFontFamily},cursor:"pointer"},"ReplaceButton"),E=Object(d.adonis)(d.ColorSelectionComponent)({paddingTop:0},"ColorSelection")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=n.n(p),d=n(336),h=n(22),m=n(83),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseControls"]),_(t,[{key:"loadOverlay",value:function(e){var t=this,n=this._getAssetPath(e.image),i=m.a[e.blendMode],o=void 0,r=setTimeout(function(){o=p.ModalManager.instance.displayLoading(t._t("pesdk.common.text.loading"))},100);return h.a.load(n).then(function(t){return o&&o.close(),r&&(clearTimeout(r),r=null),{identifier:e.identifier,image:t,blendMode:i,alpha:void 0===e.intensity?1:e.intensity}})}}],[{key:"mapOperationsToSharedState",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1],arguments.length>2&&void 0!==arguments[2]&&arguments[2];var t=e.getOrCreate("overlay");return{operation:t,identifier:t?t.getIdentifier():null,alpha:t?t.getAlpha():1,blendMode:t?t.getBlendMode():m.a.normal,removeOverlay:function(){t&&t.set({image:null,identifier:null,alpha:1})},setOverlayOptions:function(e){t&&t.set(e)},setAlpha:function(e){t&&t.setAlpha(e)},setBlendMode:function(e){t&&t.setBlendMode(e)}}}},{key:"isEnabled",value:function(e){return e.isToolAllowed("overlay")&&e.isToolEnabled("overlay")}}]),t}();g.clickAtPosition=p.BaseControls.clickAtPosition,g.getPreloadAssets=p.BaseControls.getPreloadAssets,g.identifier="overlay",g.controlsComponent=d.a,g.canvasControlsComponent=p.BaseControls.canvasControlsComponent,g.iconPath="editor/controls/overlay/icon.png",g.activeIconPath="editor/controls/overlay/icon-active.png",g.requiredOperations=["overlay"],g.defaultOptions={overlays:[],replaceOverlays:!1,availableOverlays:null},g.updatableOperations=["overlay"],g.switchToDefaultControlsOnRemoval=!1,f.a.Controls.OverlayControls=g,t.a=g},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),n(22)),m=n(134),_=n(337),g=(n(83),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}()),y=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};var v=d.ControlsStyles.PlainControlItem,b=d.ControlsStyles.PlainControlItemBackground,k=d.ControlsStyles.ControlItemTitle,w=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i))),a=r.context,s=a.ui,l=a.theme;return r._thumbnailLoadQueue=new m.a(1,1/0,l.listItemSlideInDelay),r._thumbnailsLoaded={},r._overlayManager=new d.OverlayManager(s,r.props.options),r.state={},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["ControlsComponent"]),g(t,[{key:"componentDidMount",value:function(){y(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._loadThumbnails()}},{key:"componentWillUnmount",value:function(){y(t.prototype.__proto__||f()(t.prototype),"componentWillUnmount",this).call(this),this._thumbnailLoadQueue.dispose()}},{key:"_loadThumbnails",value:function(){var e=this;this._overlayManager.getOverlays().forEach(function(t){e._thumbnailLoadQueue.add(function(){return h.a.load(e._getAssetPath(t.thumbnail)).then(function(n){e._thumbnailsLoaded[t.identifier]=n,e.forceUpdate()})})})}},{key:"_onBlendModeChange",value:function(){this.props.controls.addLocalHistorySnapshot("overlay-blend-mode",!1)}},{key:"_onAlphaChange",value:function(){this.props.controls.addLocalHistorySnapshot("overlay-alpha",!0)}},{key:"_onItemClick",value:function(e){var t=this;if(!e)return this.sharedState.removeOverlay(),this.forceUpdate();e.identifier!==this.sharedState.identifier&&this.props.controls.loadOverlay(e).then(function(e){t.sharedState.setOverlayOptions(e),t.props.controls.addLocalHistorySnapshot("overlay-image",!1)})}},{key:"_renderListItems",value:function(){var e=this,t=this.sharedState.identifier;return this._overlayManager.getOverlays().map(function(n){return d.React.createElement(_.a,{key:n.identifier,overlay:n,selected:n.identifier===t,visible:!!e._thumbnailsLoaded[n.identifier],onClick:e._onItemClick.bind(e,n),onBlendModeChange:e._onBlendModeChange.bind(e),onAlphaChange:e._onAlphaChange.bind(e)})})}},{key:"_getRootProps",value:function(){return{className:void 0,withBorderTop:!0}}},{key:"_renderContent",value:function(){var e=this,t=!this.getSharedState("operation").getIdentifier();return d.React.createElement(d.ScrollableListComponent,{direction:"vertical",innerRef:function(t){e._scrollbar=t}},d.React.createElement(x,null,d.React.createElement(S,{onClick:this._onItemClick.bind(this,null)},d.React.createElement(C,{selected:t},d.React.createElement(E,null,this._t("pesdk.overlay.button.none")))),this._renderListItems()))}}]),t}();w.contextTypes=d.ControlsComponent.contextTypes,w.propTypes=d.ControlsComponent.propTypes,w.RootElement=d.ControlsComponent.RootElement,t.a=w;var x=d.adonis.ul({listStyle:"none",margin:"0",padding:"25px"},"List"),S=Object(d.adonis)(v).div({width:"100%",height:"96px",display:"table"},"NoneItem"),C=Object(d.adonis)(b).div({width:"100%",height:"96px",position:"relative",display:"table-cell",verticalAlign:"middle"},"NoneItemBackground"),E=Object(d.adonis)(k).span({position:"static"},"ItemTitle")},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),n(338)),m=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=d.ControlsStyles.ControlItem,y=d.ControlsStyles.ControlItemActiveOverlay,v=d.ControlsStyles.ControlItemTitle,b=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r.state={hovered:!1},r._bindAll("_onBlendModeChange","_onAlphaChange"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["SharedStateComponent"]),_(t,[{key:"_onBlendModeChange",value:function(e){this.props.onBeforeBlendModeChange&&this.props.onBeforeBlendModeChange(),this.sharedState.setBlendMode(e),this.props.onBlendModeChange&&this.props.onBlendModeChange()}},{key:"_onAlphaChange",value:function(e){this.props.onBeforeAlphaChange&&this.props.onBeforeAlphaChange(),this.sharedState.setAlpha(e),this.props.onAlphaChange&&this.props.onAlphaChange()}},{key:"shouldComponentUpdate",value:function(e,t){return this.props.selected!==e.selected||this.props.visible!==e.visible||this.state.hovered!==t.hovered||this.props.overlay!==e.overlay||!(this.props.intensity===e.intensity||!e.selected)}},{key:"render",value:function(){var e=this,t=this.props,n=t.lastChild,i=t.onClick,o=t.selected,r=t.visible,a=t.overlay,s=this.sharedState.alpha,l=this.sharedState.blendMode,c={lastChild:n,onClick:i,visible:r};return c.style={backgroundImage:"url('"+this._getAssetPath(a.thumbnail)+"')"},d.React.createElement(k,m({},c,{className:void 0,animated:!0,innerRef:function(t){e._container=t},onMouseEnter:function(){return e.setState({hovered:!0})},onMouseLeave:function(){return e.setState({hovered:!1})}}),d.React.createElement(x,{selected:o},d.React.createElement(d.Transition,{active:!o},d.React.createElement(E,null,d.React.createElement(S,{hovered:this.state.hovered},this._t("pesdk.overlay.asset."+a.identifier)||a.defaultName))),d.React.createElement(d.Transition,{active:o},d.React.createElement(E,null,d.React.createElement(C,null,this._t("pesdk.overlay.title.blending")),d.React.createElement(O,{value:l,onChange:this._onBlendModeChange}),o&&d.React.createElement(w,null,d.React.createElement(d.SliderComponent,{minValue:0,maxValue:1,valueUnit:"",middleDot:!1,value:s,onChange:this._onAlphaChange})),d.React.createElement(T,{rendered:!0,visible:!0})))))}},{key:"container",get:function(){return this._container}}]),t}();b.contextTypes=d.SharedStateComponent.contextTypes,t.a=b;var k=Object(d.adonis)(g).div({background:function(e){return e.filterItemBackgroundColor},backgroundSize:"cover",height:"96px"},{lastChild:{marginBottom:0}},"Item"),w=d.adonis.div({position:"absolute",zIndex:function(e){return e.zIndex("controls")},height:"15px",bottom:"16px",left:"25px",right:"25px"},"Slider"),x=d.adonis.div({height:"100%",position:"relative",":before":{content:'""',position:"absolute",height:"30px",right:0,bottom:0,left:0,zIndex:function(e){return e.zIndex("controls")},opacity:.9,backgroundImage:"linear-gradient(-180deg, rgba(0, 0, 0, 0.00) 0%, rgba(0, 0, 0, 0.00) 54%, rgba(0, 0, 0, 0.45) 100%)"}},"ItemContainer"),S=Object(d.adonis)(v).span({},"ItemTitle"),C=Object(d.adonis)(S)({opacity:.45,top:"17px",bottom:"auto",textShadow:"none"},"BlendingLabel"),E=d.adonis.div({position:"absolute",width:"100%",height:"100%",top:0,left:0,display:"none",transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"}},{rendered:{display:"block",opacity:0},visible:{display:"block",opacity:1,transition:function(e){return"opacity "+e.transitionDuration+"s ease-in"}}},"ItemContent"),T=Object(d.adonis)(y).div({},"Overlay"),O=Object(d.adonis)(h.a)({position:"absolute",top:"34px",zIndex:function(e){return e.zIndex("controls")}},"BlendingControl")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(47),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(5)),m=(n.n(h),n(83)),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=h.ControlsStyles.ControlItemTitle,y=d.Utils.flipObject(m.a),v=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onPreviousClick","_onNextClick"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,h["BaseComponent"]),_(t,[{key:"_onPreviousClick",value:function(e){e.preventDefault(),e.stopPropagation();var t=u()(y),n=(t.indexOf(this.props.value.toString())+t.length-1)%t.length,i=parseInt(t[n],10);this.props.onChange&&this.props.onChange(i)}},{key:"_onNextClick",value:function(e){e.preventDefault(),e.stopPropagation();var t=u()(y),n=(t.indexOf(this.props.value.toString())+t.length+1)%t.length,i=parseInt(t[n],10);this.props.onChange&&this.props.onChange(i)}},{key:"render",value:function(){var e={backgroundImage:"url('"+this._getAssetPath("editor/controls/overlay/arrow-left.png",!0)+"')"},t={backgroundImage:"url('"+this._getAssetPath("editor/controls/overlay/arrow-right.png",!0)+"')"},n=this.props.value;return h.React.createElement(b,{styles:this.props.styles},h.React.createElement(w,{onClick:this._onPreviousClick,style:e}),h.React.createElement(k,null,this._t("pesdk.overlay.title."+y[n])),h.React.createElement(w,{onClick:this._onNextClick,style:t}))}}]),t}();v.contextTypes=h.BaseComponent.contextTypes,t.a=v;var b=h.adonis.div({display:"table",tableLayout:"fixed",width:"100%",padding:"0 15px"},"BlendingControlContainer");v.RootElement=b;var k=Object(h.adonis)(g).div({display:"table-cell",textShadow:"none",position:"static",verticalAlign:"middle"},"Label"),w=h.adonis.div({display:"table-cell",width:"24px",height:"24px",backgroundSize:"contain",backgroundPosition:"center center",backgroundRepeat:"no-repeat",opacity:.8,transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"},"&:hover":{opacity:1,transition:function(e){return"opacity "+e.transitionDuration+"s ease-in"}}},"Arrow")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(5)),m=n.n(h),_=n(340),g=n(345),y=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var v=d.Math.Vector2,b=void 0;d.Operations.SpriteOperation&&(b=d.Operations.SpriteOperation.StickerSprite);var k=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._updateStickerCategories=r._updateStickerCategories.bind(r),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,h["BaseControls"]),y(t,[{key:"createSticker",value:function(e){var t=this;return this.loadStickerImage(e).then(function(n){var i=t.context.editor.operations.getOrCreate("sprite"),o=i.getInputDimensions(!1),r=new v(n.width,n.height),a=new v(.5*o.min(),.5*o.min()),s=i.createSticker({identifier:e.identifier,image:n,position:new v(.5,.5),dimensions:d.Utils.resizeVectorToFit(r,a),rotation:0,smoothDownscaling:t._options.smoothDownscaling});return t.sharedState.set({selectedSprite:s}),i.addSprite(s),t.addLocalHistorySnapshot("sticker-creation",!1),s})}},{key:"loadStickerImage",value:function(e){var t=this;return new u.a(function(n,i){var o=e.images.mediaBase,r=h.StickerManager.getURLForSticker(e,"base"),a=t._getAssetPath(r),s=new window.Image,l=void 0,c=setTimeout(function(){l=h.ModalManager.instance.displayLoading(t._t("pesdk.common.text.loading"))},100);s.addEventListener("load",function(){l&&l.close(),c&&(clearTimeout(c),c=null),void 0!==o.width&&void 0!==o.height&&(s.width=o.width,s.height=o.height),n(s)}),s.addEventListener("error",function(){l&&l.close(),c&&(clearTimeout(c),c=null),h.ModalManager.instance.displayError(t._t("pesdk.common.title.error"),t._t("pesdk.sticker.text.stickerLoadingError",{path:s.src})),i(new Error("Loading sticker failed"))}),s.crossOrigin=t.context.editor.getCrossOrigin(),s.src=a})}},{key:"_updateStickerCategories",value:function(e){var t=this._options,n=t.categories,i=t.replaceCategories,o=t.availableStickers;e||(e=n);var r=new h.StickerManager(this.context.ui,{categories:e,replaceCategories:i,availableStickers:o});this.sharedState.set({stickerManager:r})}},{key:"_onEnter",value:function(){var e=this.context.editor;this._updateStickerCategories(),this._mediator.on(h.Constants.EVENTS.ADDED_STICKER,this._updateStickerCategories),e.zoom.auto(),e.features.disable("zoom","drag")}},{key:"_onLeave",value:function(){var e=this.context.editor;this._mediator.off(h.Constants.EVENTS.ADDED_STICKER,this._updateStickerCategories),e.features.enable("zoom","drag"),e.render()}}],[{key:"mapOperationsToSharedState",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=e.getOrCreate("sprite"),i=n.getInputDimensions(!1),o=t.selectedSprite,r=t.stickerManager;if(o&&n.getSprites().indexOf(o)<0){var a=n.getSprites().filter(function(e){return e.getId()===o.getId()})[0];a&&(o=a)}return{operation:n,inputDimensions:i,stickerManager:r,selectedSprite:o,stickerObject:o&&r?r.getStickerByIdentifier(o.getIdentifier()):null,image:o?o.getImage():null,alpha:o?100*o.getAlpha():0,tintMode:o?o.getTintMode():"",tintColor:o?o.getTintColor():null,setStickerOptions:function(e){o&&o.set(e)},setStickerImage:function(e){o&&o.setImage(e)},setAlpha:function(e){o&&o.setAlpha(e/100)},setTintMode:function(e){o&&o.setTintMode(e)},setTintColor:function(e){o&&o.setTintColor(e)}}}},{key:"clickAtPosition",value:function(e,t){var n=t.operations.get("sprite");if(!n)return!1;var i=n.getSpritesAtPosition(e,t.getOutputTextureDimensions()).filter(function(e){return e instanceof b});return!!i[0]&&{selectedSprite:i[0]}}},{key:"getPreloadAssets",value:function(e){return["editor/controls/shared/canvas-overlay-controls/to-front.png","editor/controls/shared/canvas-overlay-controls/duplicate.png","editor/controls/shared/canvas-overlay-controls/delete.png"]}},{key:"isEnabled",value:function(e){return e.isToolAllowed("sticker")&&e.isToolEnabled("sticker")}}]),t}();k.identifier="sticker",k.controlsComponent=_.a,k.canvasControlsComponent=g.a,k.iconPath="editor/controls/sticker/icon.png",k.activeIconPath="editor/controls/sticker/icon-active.png",k.requiredOperations=["sprite"],k.defaultOptions={categories:[],replaceCategories:!1,availableStickers:null,snapRotation:90,snapRotationTolerance:5},k.updatableOperations=["sprite"],k.switchToDefaultControlsOnRemoval=!0,m.a.Controls.StickerControls=k,t.a=k},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(5)),m=(n.n(h),n(341)),_=n(343),g=n(344),y=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var v=d.Math.Vector2,b={ROOT:1,CATEGORY:2,OPTIONS:3},k=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));r._bindAll("_onCategoryClick","_onStickerClick","_onBackClick","_onNewStickerClick","_onReplaceClick"),r._needsStyleFixes=!0;var a=b.ROOT;return r.sharedState.selectedSprite&&(a=b.OPTIONS),r.state.currentPanel=a,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["ControlsComponent"]),y(t,[{key:"fixStyles",value:function(){var e=this;return this._list.style.height="100%",function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0}(t.prototype.__proto__||f()(t.prototype),"fixStyles",this).call(this).then(function(){if(h.Utils.Browser.isIElte(10)){var t=e._container.offsetHeight;e._list.style.height=t+"px"}return e.refs.panel.fixStyles()})}},{key:"componentDidUpdate",value:function(e,t){this.state.currentPanel!==t.currentPanel&&this.fixStyles()}},{key:"sharedStateDidChange",value:function(e,t){e.stickerObject!==t.stickerObject&&t.selectedSprite&&t.stickerObject&&this.setState({currentPanel:b.OPTIONS})}},{key:"_onReplaceClick",value:function(){this.setState({currentPanel:b.ROOT})}},{key:"_onNewStickerClick",value:function(){this.state.currentPanel=b.ROOT,this.setSharedState({selectedSprite:null})}},{key:"_onCategoryClick",value:function(e){this.setState({currentPanel:b.CATEGORY,category:e})}},{key:"_onBackClick",value:function(){this.setState({currentPanel:b.ROOT})}},{key:"_onStickerClick",value:function(e){var t=this,n=this.sharedState.selectedSprite,i=function(){t.setState({currentPanel:b.OPTIONS})},o=this.context.editor;n?this.props.controls.loadStickerImage(e).then(function(r){var a=n.getDimensions().clone().max(),s=new v(a,a),l=new v(r.width,r.height),c={image:r,identifier:e.identifier,dimensions:d.Utils.resizeVectorToFit(l,s)};"none"!==n.getTintMode()&&n.setTintMode(e.tintMode||"none"),t.sharedState.setStickerOptions(c),t.sharedState.setStickerImage(r),t.props.controls.addLocalHistorySnapshot("sticker-image",!0),o.render(),i()}):this.props.controls.createSticker(e).then(function(e){i()})}},{key:"_renderCurrentPanel",value:function(){var e=this,t=this.props.controls,n=this.sharedState.stickerManager;switch(this.state.currentPanel){case b.ROOT:return h.React.createElement(m.a,{innerRef:function(t){e._list=t},stickerManager:n,onCategoryClick:this._onCategoryClick,onStickerClick:this._onStickerClick,controls:t,ref:"panel"});case b.CATEGORY:return h.React.createElement(_.a,{innerRef:function(t){e._list=t},category:this.state.category,stickerManager:n,onBackClick:this._onBackClick,onStickerClick:this._onStickerClick,controls:t,ref:"panel"});case b.OPTIONS:return h.React.createElement(g.a,{innerRef:function(t){e._list=t},stickerManager:n,onReplaceClick:this._onReplaceClick,onNewStickerClick:this._onNewStickerClick,controls:t,ref:"panel"})}}},{key:"_getRootProps",value:function(){return{className:void 0,withBorderTop:!0}}},{key:"_renderContent",value:function(){return this._renderCurrentPanel()}}]),t}();k.contextTypes=h.ControlsComponent.contextTypes,k.RootElement=h.ControlsComponent.RootElement,t.a=k},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),n(342)),m=n(136),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r.state={category:"all"},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,d["BaseComponent"]),_(t,[{key:"_onCategoryClick",value:function(e,t){this.props.onCategoryClick&&this.props.onCategoryClick(e)}},{key:"fixStyles",value:function(){var e=this;return u.a.resolve().then(function(){d.Utils.Browser.isIElte(10)?Object(d.requestAnimationFrame)(function(){e._scrollbar.update()}):e._scrollbar.update()})}},{key:"_renderListItems",value:function(){var e=this;return this.props.stickerManager.getCategories().map(function(t){return d.React.createElement(h.a,{key:t.identifier,category:t,onClick:e._onCategoryClick.bind(e,t)})})}},{key:"render",value:function(){var e=this,t=this.props,n=t.stickerManager,i=t.innerRef;return d.React.createElement(y,{innerRef:function(t){i&&i(t),e._wrapper=t},className:void 0},d.React.createElement(d.ScrollableListComponent,{direction:"vertical",innerRef:function(t){e._scrollbar=t}},d.React.createElement(v,null,this._renderListItems()),d.React.createElement(m.a,{stickers:n.getStickersForCategory("all"),onStickerClick:this.props.onStickerClick})))}}]),t}();g.contextTypes=d.BaseComponent.contextTypes,t.a=g;var y=d.adonis.div({display:"table",tableLayout:"fixed",width:"100%",height:"100%"},"Wrapper"),v=d.adonis.ul({listStyle:"none",margin:0,padding:"25px",paddingBottom:0},"CategoryList")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d=p.ControlsStyles.ControlItem,h=p.ControlsStyles.ControlItemTitle,m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseComponent"]),f(t,[{key:"render",value:function(){var e=this.props.category,t={backgroundImage:"url('"+this._getAssetPath(e.metaData.backgroundImage)+"')"};return p.React.createElement(_,{onClick:this.props.onClick,style:t,className:void 0},p.React.createElement(y,null,this._t("pesdk.sticker.asset."+e.identifier)||e.defaultName),p.React.createElement(g,null))}}]),t}();m.contextTypes=p.BaseComponent.contextTypes,t.a=m;var _=Object(p.adonis)(d).li({backgroundColor:function(e){return e.filterItemBackgroundColor},backgroundRepeat:"no-repeat",backgroundSize:"cover"},"StickerCategoryItem"),g=p.adonis.div({position:"absolute",height:"30px",right:0,bottom:0,left:0,backgroundImage:"linear-gradient(180deg, rgba(0,0,0,0.00) 0%, rgba(0,0,0,0.5) 100%)"},"Gradient"),y=Object(p.adonis)(h).div({},"Title")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),n(136)),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=d.ControlsStyles.ControlItemTextStyles,g=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,d["BaseComponent"]),m(t,[{key:"fixStyles",value:function(){var e=this;return u.a.resolve().then(function(){d.Utils.Browser.isIElte(10)?Object(d.requestAnimationFrame)(function(){e._scrollbar.update()}):e._scrollbar.update()})}},{key:"render",value:function(){var e=this,t=this.props,n=t.stickerManager,i=t.category,o=t.onBackClick,r=t.onStickerClick,a=t.innerRef,s={backgroundImage:"url('"+this._getAssetPath(i.metaData.backgroundImage)+"')",backgroundSize:"cover"},l={backgroundImage:"url('"+this._getAssetPath("editor/controls/shared/back.png",!0)+"')"},c=n.getStickersForCategory(i.identifier);return d.React.createElement(y,{innerRef:function(e){return a&&a(e)},className:void 0},d.React.createElement(v,{style:s},d.React.createElement(b,null,d.React.createElement(w,null,this._t("pesdk.sticker.asset."+i.identifier)||i.defaultName),i.metaData.author&&d.React.createElement(x,null,d.React.createElement("span",null,"by "),i.metaData.author),d.React.createElement(S,{style:l,onClick:o.bind(this),className:void 0}))),d.React.createElement(k,{innerRef:function(t){e._wrapper=t}},d.React.createElement(d.ScrollableListComponent,{direction:"vertical",innerRef:function(t){e._scrollbar=t}},d.React.createElement(h.a,{stickers:c,onStickerClick:r}))))}}]),t}();g.contextTypes=d.BaseComponent.contextTypes,t.a=g;var y=d.adonis.div({display:"table",tableLayout:"fixed",width:"100%",height:"100%",paddingTop:"0"},"StickerCategoryPanel"),v=d.adonis.div({display:"table-row",zIndex:2,background:"green",height:"70px",width:"100%",color:function(e){return e.textColor},boxShadow:"0 2px 8px 0 rgba(0,0,0,0.50)"},"Header"),b=d.adonis.div({display:"table-cell",paddingTop:"20px"},"HeaderContent"),k=d.adonis.div({display:"table-row",left:0},"Content"),w=Object(d.adonis)(_).div({marginBottom:"4px"},"Title"),x=Object(d.adonis)(_).div({fontStyle:"italic",opacity:.75,"> *":{fontStyle:"normal",opacity:.5}},"Subtitle"),S=d.adonis.button({height:"14px",width:"14px",position:"absolute",left:"16px",top:"20px",opacity:.7,border:"none",background:"no-repeat center",backgroundSize:"contain",cursor:"pointer",":focus":{outline:"none"}},"BackButton")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(8),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var m=d.ControlsStyles.PlainControlItemBackground,_=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onTintToggle","_onTintColorChange","_onOpacityChange"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,d["SharedStateComponent"]),h(t,[{key:"_getStickerObject",value:function(){return this.sharedState.stickerObject}},{key:"_onChangedOption",value:function(e,t){e&&this.props.controls.addLocalHistorySnapshot(e,t),this.context.editor.render()}},{key:"_onOpacityChange",value:function(e){this.sharedState.setAlpha(e),this._onChangedOption("sticker-opacity",!0)}},{key:"_onTintToggle",value:function(e){var t=this._getStickerObject();this.sharedState.setTintMode(e?t.tintMode:"none"),this._onChangedOption("sticker-tint-toggle",!0)}},{key:"_onTintColorChange",value:function(e){this.sharedState.setTintColor(e.clone()),this._onChangedOption("sticker-tint",!0)}},{key:"fixStyles",value:function(){var e=this;return u.a.resolve().then(function(){d.Utils.Browser.isIElte(10)?Object(d.requestAnimationFrame)(function(){e._scrollbar.update()}):e._scrollbar.update()})}},{key:"render",value:function(){var e=this,t=this.props,n=t.innerRef,i=t.onNewStickerClick,o=t.onReplaceClick,r=this.sharedState,a=r.alpha,s=r.tintMode,l=r.tintColor,c=r.selectedSprite;if(!c)return null;var u=this._getStickerObject(),p=this.context.editor.getCrossOrigin(),f=!!u.tintMode&&"none"!==u.tintMode;return d.React.createElement(g,{innerRef:function(t){n&&n(t),e._wrapper=t},className:void 0},d.React.createElement(d.ScrollableListComponent,{direction:"vertical",innerRef:function(t){e._scrollbar=t}},d.React.createElement("div",null,d.React.createElement(y,null,d.React.createElement(d.ButtonComponent,{title:this._t("pesdk.sticker.button.new"),className:void 0,onClick:i}),d.React.createElement(v,null,d.React.createElement(b,null,d.React.createElement(k,{crossOrigin:p,onClick:o,src:c.getImage().src})),d.React.createElement(w,null,d.React.createElement(x,null,this._t("pesdk.sticker.asset."+u.identifier)||u.defaultName),d.React.createElement(S,{onClick:o,className:void 0},this._t("pesdk.sticker.button.replace")))),d.React.createElement(d.SliderControlComponent,{minValue:0,value:Math.round(a),maxValue:100,label:this._t("pesdk.sticker.title.opacity"),onSliderValueChange:this._onOpacityChange,onValueChange:this._onOpacityChange,middleDot:!1,className:void 0})),f&&d.React.createElement(d.CollapseSectionComponent,{toggleable:!0,title:this._t("pesdk.sticker.button.fill"),expanded:"none"!==s,className:void 0,onToggle:this._onTintToggle},d.React.createElement(C,{value:l,onColorPickerToggle:this.fixStyles,onChange:this._onTintColorChange})))))}}]),t}();_.contextTypes=d.SharedStateComponent.contextTypes,t.a=_;var g=d.adonis.div({display:"table",tableLayout:"fixed",width:"100%",height:"100%"},"Wrapper"),y=d.adonis.div({padding:"25px",borderBottom:"1px solid #1B1B1E"},"TopSection"),v=d.adonis.div({position:"relative",margin:"25px 0",textAlign:"left",height:"72px"},"Details"),b=Object(d.adonis)(m).div({position:"absolute",left:0,top:0,height:"72px",width:"72px",padding:0,cursor:"pointer"},"Thumbnail"),k=d.adonis.img({position:"relative",padding:"5px",width:"100%",height:"100%"},"ThumbnailImage"),w=d.adonis.div({position:"absolute",right:0,left:"87px",top:0,fontSize:"13px"},"DetailsContainer"),x=d.adonis.div({height:"auto",width:"100%",marginTop:"12px",marginBottom:"8px",color:function(e){return e.dimmedTextColor},overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap",fontFamily:function(e){return e.regularFontFamily}},"Title"),S=d.adonis.div({width:"100%",color:function(e){return e.textColor},textTransform:"uppercase",letterSpacing:"2px",fontFamily:function(e){return e.uppercaseSemiBoldFontFamily},cursor:"pointer"},"ReplaceButton"),C=Object(d.adonis)(d.ColorSelectionComponent)({paddingTop:0},"ColorSelection")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(54)),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var _=void 0;d.Operations.SpriteOperation&&(_=d.Operations.SpriteOperation.StickerSprite);var g=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["a"]),m(t,[{key:"_renderSpriteItems",value:function(e){return function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0}(t.prototype.__proto__||f()(t.prototype),"_renderSpriteItems",this).call(this,e.filter(function(e){return e instanceof _}))}},{key:"_selectNextSprite",value:function(){for(var e=this.getSharedState("operation").getSprites().slice(0).reverse(),t=void 0,n=void 0,i=0;i<e.length;i++)if((t=e[i])instanceof _){n=t;break}n||(this.props.controls.skipHistory=!0,this.context.screen.switchToControls("default")),this.setSharedState({selectedSprite:n})}},{key:"_createSprite",value:function(e){return this.getSharedState("operation").createSticker(e)}}]),t}();g.contextTypes=h.a.contextTypes,t.a=g},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(5)),m=n.n(h),_=n(347),g=n(351),y=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},v=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var b=d.Math.Vector2,k=void 0,w=void 0;d.Operations.SpriteOperation&&(k=d.Operations.SpriteOperation.TextSprite,w=d.Operations.SpriteOperation.BrushSprite);var x=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||f()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["BaseControls"]),v(t,[{key:"createText",value:function(){var e=this.context.editor;this.saveTextSettings();var t=this.sharedState.get("operation"),n=this.sharedState.get("fontManager"),i=e.getOutputDimensions(),o=e.getSDK().getRenderer().getMaxTextureSize(),r=this.getGlobalToolState(),a=r?n.getVariationByIdentifier(r.fontIdentifier):n.getDefaultVariation(),s=t.createText(y({text:this.context.ui.translate("pesdk.text.placeholder.defaultText"),position:new b(.5,.5),maxWidth:.5,maxHeight:o?o/i.y:3,textMetrics:a.getTextMetrics(),fontIdentifier:a.getIdentifier(),fontSize:.08,fontFamily:a.getFontFamily(),fontWeight:a.getFontWeight(),fontStyle:a.getFontStyle(),color:d.Color.WHITE,alignment:"center"},r||{}));return this.sharedState.set({selectedSprite:s}),t.addSprite(s),this.addLocalHistorySnapshot(),s}},{key:"saveTextSettings",value:function(){var e=this.sharedState.get("selectedSprite");e&&this.setGlobalToolState(e.serializeOptions(["color","backgroundColor","characterSpacing","lineHeight","alignment","fontIdentifier","fontFamily","fontWeight","fontStyle"]))}},{key:"_onEnter",value:function(){var e=this.context.editor,t=this._options,n=t.fonts,i=t.replaceFonts,o=t.availableVariations,r=new h.FontManager(this.context.ui,{fonts:n,replaceFonts:i,availableVariations:o});this.sharedState.set({fontManager:r}),e.features.disable("zoom","drag"),e.zoom.auto(),this.sharedState.get("selectedSprite")||this.createText(),e.render()}},{key:"_onLeave",value:function(){var e=this.context.editor;this.saveTextSettings(),e.features.enable("zoom","drag"),e.render()}}],[{key:"mapOperationsToSharedState",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=e.getOrCreate("sprite"),i=n.getInputDimensions(),o=t.selectedSprite;if(o&&n.getSprites().indexOf(o)<0){var r=n.getSprites().filter(function(e){return e.getId()===o.getId()})[0];r&&(o=r)}return{operation:n,selectedSprite:o,inputDimensions:i,color:o?o.getColor().clone():null,backgroundColor:o?o.getBackgroundColor().clone():null,alignment:o?o.getAlignment():null,lineHeight:o?o.getLineHeight():0,fontFamily:o?o.getFontFamily():null,setFontSize:function(e){o&&o.setFontSize(e/i.min())},setColor:function(e){o&&o.setColor(e.clone())},setBackgroundColor:function(e){o&&o.setBackgroundColor(e.clone())},setCharacterSpacing:function(e){o&&o.setCharacterSpacing(e)},setLineHeight:function(e){o&&o.setLineHeight(e)},setAlignment:function(e){o&&o.setAlignment(e)},setTextOptions:function(e){o&&o.set(e)},setVariation:function(e){o&&o.set({fontIdentifier:e.getIdentifier(),fontFamily:e.getFontFamily(),fontWeight:e.getFontWeight(),fontStyle:e.getFontStyle(),textMetrics:e.getTextMetrics()})}}}},{key:"clickAtPosition",value:function(e,t){if(!t.operations.exists("sprite"))return!1;var n=t.operations.getOrCreate("sprite").getSpritesAtPosition(e,t.getOutputTextureDimensions()).filter(function(e){return!(e instanceof w)});return!!(n.length&&n[0]instanceof k)&&{selectedSprite:n[0]}}},{key:"getPreloadAssets",value:function(e){return["editor/controls/shared/canvas-overlay-controls/to-front.png","editor/controls/shared/canvas-overlay-controls/duplicate.png","editor/controls/shared/canvas-overlay-controls/delete.png"]}},{key:"isEnabled",value:function(e){return e.isToolAllowed("text")&&e.isToolEnabled("text")}}]),t}();x.identifier="text",x.controlsComponent=_.a,x.canvasControlsComponent=g.a,x.iconPath="editor/controls/text/icon.png",x.activeIconPath="editor/controls/text/icon-active.png",x.requiredOperations=["sprite"],x.defaultOptions={fonts:[],replaceFonts:!1,availableVariations:null,snapRotation:90,snapRotationTolerance:5},x.updatableOperations=["sprite"],x.switchToDefaultControlsOnRemoval=!0,m.a.Controls.TextControls=x,t.a=x},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),n(348)),m=n(349),_=(n(350),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var g=d.GroupedControlsStyles.ControlGroupList,y=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),r=0;r<n;r++)i[r]=arguments[r];var a,s,l,c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return c._bindAll("_onNewTextClick","_onFontChanged","_onFontSizeChanged","_onCharacterSpacingChanged","_onLineSpacingChanged","_onColorChanged","_onBackgroundColorChanged","_onAlignmentChanged","_onVariationChanged","_onTextScaled"),c._events=(a={},s=d.Constants.EVENTS.TEXT_SCALED,l=c._onTextScaled,s in a?o()(a,s,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[s]=l,a),c._unavailableFontFamilies=[],c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["ControlsComponent"]),_(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._loadFonts()}},{key:"_loadFonts",value:function(){var e=this,t=this.sharedState.fontManager,n=this.context.ui.getFontLoader();n.setFonts(t.getFonts());var i=void 0,o=window.setTimeout(function(){i=d.ModalManager.instance.displayLoading(e._t("pesdk.editor.text.loadingFonts"),!0)},200),r=this.sharedState.selectedSprite;return this._unavailableFontFamilies=[],n.load().then(function(){window.clearTimeout(o),i&&i.close(),r.emit("update"),e.context.editor.render()}).catch(function(t){window.clearTimeout(o),i&&i.close(),t.forEach(function(t){e._unavailableFontFamilies.push(t.font.getFontFamily())});var n=e._unavailableFontFamilies.join(", ");r.emit("update"),e.context.editor.render(),e.forceUpdate(),d.ModalManager.instance.displayError(e._t("pesdk.editor.title.fontLoadingError"),e._t("pesdk.editor.text.fontLoadingError",{fonts:n}))})}},{key:"_onChangedOption",value:function(e,t){e&&this.props.controls.addLocalHistorySnapshot(e,t),this.context.editor.render()}},{key:"_onNewTextClick",value:function(){this.props.controls.createText()}},{key:"_onAlignmentChanged",value:function(e){this.sharedState.setAlignment(e),this._onChangedOption("text-alignment",!0)}},{key:"_onVariationChanged",value:function(e){this.sharedState.setVariation(e),this._onChangedOption("font-family",!0)}},{key:"_onFontChanged",value:function(e){var t=e.getVariations()[0];this._onVariationChanged(t)}},{key:"_onFontSizeChanged",value:function(e){this.sharedState.setFontSize(e),this._onChangedOption("font-size",!1)}},{key:"_onColorChanged",value:function(e){this.sharedState.setColor(e),this._onChangedOption("color",!0)}},{key:"_onBackgroundColorChanged",value:function(e){this.sharedState.setBackgroundColor(e),this._onChangedOption("background-color",!0)}},{key:"_onCharacterSpacingChanged",value:function(e){this.sharedState.setCharacterSpacing(e),this._onChangedOption()}},{key:"_onLineSpacingChanged",value:function(e){this.sharedState.setLineHeight(e),this._onChangedOption("line-spacing",!0)}},{key:"_onTextScaled",value:function(){this.forceUpdate()}},{key:"_renderFontFamilyAndSizeComponent",value:function(){var e=this,t=this.sharedState,n=t.selectedSprite,i=t.inputDimensions,o=t.fontManager,r=d.Utils.toFixed(n.getFontSize()*i.min(),1),a=Math.round(i.y),s=o.getFonts().filter(function(t){return e._unavailableFontFamilies.indexOf(t.getFontFamily())<0});return d.React.createElement(h.a,{onValueChange:this._onFontSizeChanged,onFontChange:this._onFontChanged,fonts:s,dropdownValue:n.getFontFamily(),label:this._t("pesdk.text.title.font"),inputLabel:this._t("pesdk.text.title.size"),className:void 0,value:r,minValue:10,maxValue:a})}},{key:"_getRootProps",value:function(){return{className:void 0,withBorderTop:!0}}},{key:"_renderContent",value:function(){var e=this,t=this.sharedState,n=t.selectedSprite,i=t.fontManager;if(!n)return null;var o=i.getFontByFontFamily(n.getFontFamily()),r=i.getVariationByIdentifier(n.getFontIdentifier()),a=this.sharedState,s=a.color,l=a.backgroundColor,c=a.alignment,u=a.lineHeight;return d.React.createElement(d.ScrollableListComponent,{direction:"vertical",innerListRef:function(t){e._list=t},innerRef:function(t){e._scrollbar=t}},d.React.createElement(v,{className:void 0},d.React.createElement(d.ButtonComponent,{title:this._t("pesdk.text.button.new"),onClick:this._onNewTextClick,className:void 0}),d.React.createElement(k,null,this._renderFontFamilyAndSizeComponent(),d.React.createElement(m.a,{alignment:c,variations:o.getVariations(),selectedVariation:r,onAlignmentChange:this._onAlignmentChanged,onVariationChange:this._onVariationChanged})),d.React.createElement(d.ColorSelectionComponent,{value:s,onColorPickerToggle:this.fixStyles,onChange:this._onColorChanged})),d.React.createElement(b,null,d.React.createElement(d.CollapseSectionComponent,{key:"background",title:this._t("pesdk.text.title.background"),alwaysExpanded:!0,className:void 0},d.React.createElement(d.ColorSelectionComponent,{value:l,onColorPickerToggle:this.fixStyles,onChange:this._onBackgroundColorChanged})),d.React.createElement(d.CollapseSectionComponent,{key:"spacing",title:this._t("pesdk.text.title.spacing"),alwaysExpanded:!0},d.React.createElement(d.SliderControlComponent,{label:this._t("pesdk.text.title.line"),minValue:.5,maxValue:3,className:void 0,value:d.Utils.toFixed(u,1),onSliderValueChange:this._onLineSpacingChanged,onValueChange:this._onLineSpacingChanged}))))}}]),t}();y.contextTypes=d.ControlsComponent.contextTypes,y.RootElement=d.ControlsComponent.RootElement,t.a=y;var v=d.adonis.div({padding:"25px",borderBottom:"1px solid #1B1B1E"},"TopSection"),b=Object(d.adonis)(g).ul({overflowX:"visible",overflowY:"visible",width:"100%"},"SectionList"),k=d.adonis.div({"margin-top":"25px"},"Details")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._updateFontsMap(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["ValueSelectionComponent"]),h(t,[{key:"componentWillReceiveProps",value:function(e){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentWillReceiveProps",this).call(this,e),e.fonts!==this.props.fonts&&this._updateFontsMap()}},{key:"_updateFontsMap",value:function(){var e=this;this._fontsMap={},this.props.fonts.forEach(function(t){e._fontsMap[t.getFontFamily()]=t})}},{key:"_renderLeftPart",value:function(){var e=this.sharedState.fontFamily,t=this._fontsMap[e];return d.React.createElement("div",{ref:"root",className:void 0},d.React.createElement(d.DropdownComponent,{value:t,style:{fontFamily:e},className:void 0,onChange:this.props.onFontChange},this.props.fonts.map(function(e){return d.React.createElement(d.DropdownComponent.Item,{value:e,key:e.getFontFamily(),style:{fontFamily:e.getFontFamily()}},e.getFontFamily())})))}}]),t}();m.contextTypes=d.ValueSelectionComponent.contextTypes,t.a=m},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseComponent"]),f(t,[{key:"_onAlignmentItemClick",value:function(e){this.props.onAlignmentChange&&this.props.onAlignmentChange(e.title)}},{key:"_onStyleItemClick",value:function(e){switch(e.title){case"bold":this.props.onStyleChange&&this.props.onStyleChange("fontWeight",this.props.bold?"normal":"bold");break;case"italic":this.props.onStyleChange&&this.props.onStyleChange("fontStyle",this.props.italic?"normal":"italic")}}},{key:"_renderAligmentItems",value:function(){var e=this,t=this.props.alignment;return[{title:"left",selected:"left"===t,iconPath:"editor/controls/text/align-left.png",selectedIconPath:"editor/controls/text/align-left-selected.png"},{title:"center",selected:"center"===t,iconPath:"editor/controls/text/align-center.png",selectedIconPath:"editor/controls/text/align-center-selected.png"},{title:"right",selected:"right"===t,iconPath:"editor/controls/text/align-right.png",selectedIconPath:"editor/controls/text/align-right-selected.png"}].map(function(t){var n=e._getAssetPath(t.iconPath,!0),i=e._getAssetPath(t.selectedIconPath,!0);return p.React.createElement(_,{key:t.title,className:void 0,"data-alignment":t.title,"data-selected":t.selected,onClick:e._onAlignmentItemClick.bind(e,t)},p.React.createElement(g,{visible:!0,src:n}),p.React.createElement(g,{visible:t.selected,src:i}))},this)}},{key:"_renderStylesDropdown",value:function(){var e=this.props,t=e.variations,n=e.selectedVariation;return p.React.createElement(p.DropdownComponent,{value:n,onChange:this.props.onVariationChange,className:void 0,enableMenu:t.length>1},t.map(function(e){return p.React.createElement(p.DropdownComponent.Item,{value:e,key:e.getIdentifier(),style:{fontFamily:e.getFontFamily(),fontStyle:e.getFontStyle(),fontWeight:e.getFontWeight()}},e.getLabel())}))}},{key:"render",value:function(){return p.React.createElement(h,{className:void 0},p.React.createElement(m,null,this._renderStylesDropdown()),p.React.createElement(m,{right:!0},this._renderAligmentItems()))}}]),t}();d.contextTypes=p.BaseComponent.contextTypes,t.a=d;var h=p.adonis.div({width:"100%",height:"24px",display:"table",tableLayout:"fixed","margin-bottom":"16px"},"TextControlsStyling"),m=p.adonis.div({display:"table-cell",verticalAlign:"middle"},{right:{textAlign:"right"}},"Group"),_=p.adonis.div({position:"relative",width:"24px",height:"24px",display:"inline-block",marginRight:"2px",opacity:.8,transition:function(e){return"opacity "+e.transitionDuration+" ease-out"},"&:last-child":{marginRight:0},":hover":{opacity:1}},{selected:{transition:function(e){return"opacity "+e.transitionDuration+" ease-in"},opacity:1}},"ItemContainer"),g=p.adonis.img({position:"absolute",top:0,left:0,transition:"opacity .2s ease-out",height:"24px",width:"24px",cursor:"pointer",border:"none",opacity:0},{visible:{opacity:1}},"ItemImage")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d=p.ControlsStyles.ControlItem,h=p.ControlsStyles.ControlItemTitle,m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onClick","_onMouseEnter","_onMouseLeave","_onIntensityChanged"),r.state={selected:!1,hovering:!1,intensity:50},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseComponent"]),f(t,[{key:"_onClick",value:function(){this.setState({selected:!0})}},{key:"_onMouseEnter",value:function(){this.setState({hovering:!0})}},{key:"_onMouseLeave",value:function(){this.setState({hovering:!1})}},{key:"_onIntensityChanged",value:function(e){this.setState({intensity:e})}},{key:"render",value:function(){var e=this.state,t=e.selected,n=e.hovering,i=e.intensity;return p.React.createElement(_,{onMouseEnter:this._onMouseEnter,onMouseLeave:this._onMouseLeave,onClick:this._onClick,selected:t},!(t&&n)&&p.React.createElement(g,{selected:t},this.props.title),t&&n&&p.React.createElement(y,null,p.React.createElement(p.SliderComponent,{minValue:0,maxValue:100,valueUnit:"",middleDot:!1,value:i,onChange:this._onIntensityChanged})))}}]),t}();m.contextTypes=p.BaseComponent.contextTypes;var _=Object(p.adonis)(d).div({position:"relative",height:"40px",marginBottom:"8px",cursor:"pointer",":last-child":{marginBottom:0},":hover":{background:function(e){return"rgba("+e.highlightColorRGB+", 0.5)"}}},{selected:{background:function(e){return"rgba("+e.highlightColorRGB+", 0.5)"}}},"LegibilityPresetItem"),g=Object(p.adonis)(h).div({position:"static",lineHeight:"40px",color:function(e){return e.textColor},fontSize:"12px",letterSpacing:"4px",textTransform:"uppercase"},{selected:{textShadow:"0 0 8px rgba(0,0,0,0.80)"}},"Title"),y=p.adonis.div({position:"absolute",zIndex:2,height:"15px",top:"50%",marginTop:"-6px",left:"15px",right:"15px"},"Slider")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(7),f=(n.n(p),n(54)),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var h=void 0;p.Operations.SpriteOperation&&(h=p.Operations.SpriteOperation.TextSprite);var m=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["a"]),d(t,[{key:"_selectNextSprite",value:function(){for(var e=this.getSharedState("operation").getSprites().slice(0).reverse(),t=void 0,n=void 0,i=0;i<e.length;i++)if((t=e[i])instanceof h){n=t;break}n||(this.props.controls.skipHistory=!0,this.context.screen.switchToControls("default")),this.setSharedState({selectedSprite:n})}},{key:"_createSprite",value:function(e){return this.getSharedState("operation").createText(e)}}]),t}();m.contextTypes=f.a.contextTypes,t.a=m},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(7),f=(n.n(p),n(5)),d=n.n(f),h=n(353),m=n(355),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var g=p.Math.Vector2,y=new g(50,50),v=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||u()(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["BaseControls"]),_(t,[{key:"convertOperationOptionsToUI",value:function(e){var t=e.start,n=e.end,i=e.rotation,o=e.textureScale,r=this.sharedState.get("transformOperation"),a=r.calculateScale(i),s=r.getInputDimensions(!1),l=Math.cos(i),c=Math.sin(i),u=n.clone().subtract(t).divide(2),p=t.clone().add(u).multiply(s).subtract(s.clone().multiply(.5)),f=new g(p.x*l-p.y*c,p.x*c+p.y*l).multiply(a),d=s.clone().multiply(.5).add(f).clone().divide(s);return{start:d.clone().subtract(u.clone().multiply(a)),end:d.clone().add(u.clone().multiply(a)),rotation:i,textureScale:o}}},{key:"_onEnter",value:function(){var e=this.context.editor,t=this.sharedState.get("forceCrop"),n=e.operations.exists("transform"),i=e.operations.getOrCreate("transform");i.setEnabled(!1,!1);var o=e.operations.exists("orientation"),r=e.operations.getOrCreate("orientation"),a={end:new g(1,1),rotation:0,start:new g(0,0),textureScale:1},s=i.getInputDimensions(!1),l=i.getNewDimensions(s),c=a,u=c,f=u.start,d=u.end,h=u.textureScale,m=u.rotation;if(n){f=(c=i.serializeOptions()).start,d=c.end,m=c.rotation,h=c.textureScale,delete c.enabled;var _=this.convertOperationOptionsToUI({start:f,end:d,textureScale:h,rotation:m});f=_.start,d=_.end}e.broadcastTransform(i,a);var y=r.serializeOptions();e.setSpriteScale(i.calculateScale()),e.setRotation(m),i.set(a,n);e.getOptions();e.zoom.auto(!0,!1,function(){e.features.disable("zoom","drag",t?"export":void 0)},!1),this.sharedState.set({transformOperation:i,initialTransformOptions:c,newTransformOptions:{start:f,end:d,rotation:m,textureScale:h},transformOperationExistedBeforeEntering:n,orientationOperation:r,initialOrientationOptions:y,newOrientationOptions:p.Utils.cloneOptions(y),orientationOperationExistedBeforeEntering:o,start:g.fromObject(f),end:g.fromObject(d),rotation:m,orientationRotation:r.getRotation(),flipVertically:r.getFlipVertically(),flipHorizontally:r.getFlipHorizontally(),initialDimensions:l,initialRatio:i._ratio||null})}},{key:"_onLeave",value:function(){var e=this.context.editor,t=this.sharedState.get("transformOperation"),n=this.sharedState.get("orientationOperation"),i=this.sharedState.get("forceCrop");this.sharedState.get("transformOperationExistedBeforeEntering");n.optionsEqual({rotation:0,flipVertically:!1,flipHorizontally:!1})&&e.operations.remove(n,!1);var o=this.sharedState.get("newTransformOptions"),r=o.start,a=o.end,s=o.textureScale,l=o.rotation;s=this._calculateTextureScale(),r=r.clone(),a=a.clone();var c=t.calculateScale(l),u=t.getInputDimensions(!1),p=Math.cos(-l),f=Math.sin(-l),d=a.clone().subtract(r).divide(2),h=r.clone().add(d).multiply(u).subtract(u.clone().multiply(.5)),m=new g(h.x*p-h.y*f,h.x*f+h.y*p).divide(c),_=u.clone().multiply(.5).add(m).clone().divide(u),y=_.clone().subtract(d.clone().divide(c)),v=_.clone().add(d.clone().divide(c)),b={start:new g(0,0),end:new g(1,1),rotation:0,textureScale:1},k={start:y,end:v,textureScale:s,rotation:l};k.start.equals(b.start)&&k.end.equals(b.end)&&k.rotation===b.rotation&&k.textureScale===b.textureScale?e.operations.remove(t,!1):(t.set(b),e.broadcastTransform(t,k),t.set(k),t.setTextureScale(this._calculateTextureScale()),t.setEnabled(!0)),e.setRotation(0),e.setSpriteScale(1),e.features.enable("zoom","drag",i?"export":void 0),e.zoom.auto(!0)}},{key:"_getGlobalHistoryData",value:function(){return{ratio:this.sharedState.get("ratio")}}},{key:"_onOperationRemoved",value:function(e){}},{key:"_calculateTextureScale",value:function(){var e=this.sharedState.get("transformOperation"),t=this.sharedState.get("ratio");if(!t||!t.dimensions)return 1;var n=this.sharedState.get("start"),i=this.sharedState.get("end").clone().subtract(n),o=e.getInputDimensions(!1).multiply(i);return t.dimensions.x/o.x}},{key:"fixTransform",value:function(e,t,n,i){var o=this.context.editor,r=this.sharedState.get("transformOperation").getInputDimensions(!1),a=this.sharedState.get("ratio"),s=a.ratio,l=a.dimensions;l&&!s&&(s=l.x/l.y);var c=new g;c.x="left"===n?t.x:1-e.x,c.y="top"===i?t.y:1-e.y;var u=r.clone().multiply(c),p=t.clone().subtract(e).clone().multiply(r),f=y.clone().divide(o.zoom.targetLevel),d=new g(Math.min(f.x,.1*r.x),Math.min(f.y,.1*r.y));p.x=Math.min(Math.max(d.x,p.x),u.x),"*"!==s&&(p.y=p.x/s),p.y=Math.min(Math.max(d.y,p.y),u.y),"*"!==s&&(p.x=p.y*s);var h=p.divide(r);return"top"===i?e.y=t.y-h.y:t.y=e.y+h.y,"left"===n?e.x=t.x-h.x:t.x=e.x+h.x,"*"===s&&(e.multiply(r).round().divide(r),t.multiply(r).round().divide(r)),{start:e,end:t}}}],[{key:"mapOperationsToSharedState",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1],arguments.length>2&&void 0!==arguments[2]&&arguments[2];return{transformOperation:e.get("transform"),orientationOperation:e.get("orientation")}}},{key:"getPreloadAssets",value:function(e){var t=e.getOptions(),n=p.Utils.defaults(t.editor.controlsOptions.transform,this.defaultOptions),i=["editor/controls/transform/dimensions-cross.png","editor/controls/transform/degree-slider.png","editor/controls/transform/flip.png","editor/controls/transform/lock.png","editor/controls/transform/rotate.png"];return new f.TransformRatioManager(n).getCategories().forEach(function(e){e.ratios.forEach(function(e){var t=e.identifier;i.push("editor/controls/transform/ratios/"+t+"-default.png","editor/controls/transform/ratios/"+t+"-hover.png","editor/controls/transform/ratios/"+t+"-active.png")})}),i}},{key:"isEnabled",value:function(e){return e.isToolAllowed("transform")&&e.isToolEnabled("transform")}}]),t}();v.clickAtPosition=f.BaseControls.clickAtPosition,v.identifier="transform",v.controlsComponent=m.a,v.canvasControlsComponent=h.a,v.iconPath="editor/controls/transform/icon.png",v.activeIconPath="editor/controls/transform/icon-active.png",v.requiredOperations=["transform","orientation"],v.defaultOptions={categories:[],replaceCategories:!1,availableRatios:null,enableRotation:!0,enableStraighten:!0,enableFlip:!0},v.updatableOperations=["transform","orientation"],v.switchToDefaultControlsOnRemoval=!1,d.a.Controls.TransformControls=v,t.a=v},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(7),h=(n.n(d),n(5)),m=(n.n(h),n(15)),_=n(354),g=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),y=function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0};function v(e,t,n){return t in e?o()(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=d.Math.Vector2,k=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,o=Array(i),r=0;r<i;r++)o[r]=arguments[r];var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(o)));return a._bindAll("_onZoomDone","_onCornerDrag","_onCenterDragStart","_onCenterDrag","_onRotationChange","_onOperationUpdated","_onOperationRemoved","_onAcceptClick","_onAcceptMouseDown"),a._events=(v(n={},h.Constants.EVENTS.OPERATION_UPDATED,a._onOperationUpdated),v(n,h.Constants.EVENTS.OPERATION_REMOVED,a._onOperationRemoved),v(n,h.Constants.EVENTS.ZOOM_DONE,a._onZoomDone),n),a.state=d.Utils.extend(a.state,{visible:!1}),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,h["CanvasControlsComponent"]),g(t,[{key:"shouldSharedComponentUpdate",value:function(e,t){return!e.start.equals(t.start)||!e.end.equals(t.end)||e.orientationRotation!==t.orientationRotation||e.ratio!==t.ratio||e.changesDone!==t.changesDone}},{key:"sharedStateDidChange",value:function(e,t){(e.ratio&&e.ratio.ratio)!==(t.ratio&&t.ratio.ratio)&&this._calculateRatioFraction()}},{key:"sharedComponentWillUpdate",value:function(e,t){e.orientationRotation!==t.orientationRotation&&this._updateTransformAreaStyles()}},{key:"componentDidMount",value:function(){y(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._updateTransformAreaStyles(),this._calculateRatioFraction(),this.forceUpdate()}},{key:"componentWillUpdate",value:function(){this._updateTransformAreaStyles()}},{key:"componentDidUpdate",value:function(){!this._transformContainerRect&&this.getSharedState("ratio")&&(this._updateTransformAreaStyles(),this.forceUpdate())}},{key:"componentWillUnmount",value:function(){y(t.prototype.__proto__||f()(t.prototype),"componentWillUnmount",this).call(this),this._zoomAFRequest&&(Object(m.a)(this._zoomAFRequest),this._zoomAFRequest=null)}},{key:"_calculateRatioFraction",value:function(){var e=this.getSharedState("ratio");e&&"*"!==e.ratio&&(this._ratioFraction=h.Utils.findIntegerFraction(e.ratio))}},{key:"_onCenterDragStart",value:function(e){var t=this.getSharedState("transformOperation");this._dragOptions={initialStart:this.getSharedState("start").clone(),initialEnd:this.getSharedState("end").clone(),areaDimensions:this._transformContainerRect.getSize(),imageDimensions:t.getInputDimensions(!1)}}},{key:"_onCenterDrag",value:function(e){var t=this._dragOptions,n=t.initialStart,i=t.initialEnd,o=t.areaDimensions,r=t.imageDimensions,a=e.clone().divide(o),s=i.clone().subtract(n),l=new b(0,0),c=new b(1,1).subtract(s),u=n.clone().add(a).clamp(l,c),p=u.clone().add(s);u.multiply(r).floor().divide(r),p.multiply(r).floor().divide(r),this.props.controls.fixTransform(u,p,"right","bottom");var f=this.getSharedState("newTransformOptions");f.start=u,f.end=p,this.setSharedState({start:u,end:p,changesDone:this.getSharedState("changesDone")||!(n.equals(u)&&i.equals(p))})}},{key:"_onCornerDragStart",value:function(e,t,n){var i=this.getSharedState("transformOperation");this._dragOptions={initialStart:this.getSharedState("start").clone(),initialEnd:this.getSharedState("end").clone(),verticalSide:e,horizontalSide:t,areaDimensions:this._transformContainerRect.getSize(),imageDimensions:i.getInputDimensions(!1)},this._currentCorner={vertical:e,horizontal:t}}},{key:"_onCornerDrag",value:function(e){var t=this._dragOptions,n=t.initialStart,i=t.initialEnd,o=t.verticalSide,r=t.horizontalSide,a=t.areaDimensions,s=e.clone().divide(a),l=n.clone(),c=i.clone();("top"===o?l:c).y+=s.y,("left"===r?l:c).x+=s.x,this.props.controls.fixTransform(l,c,r,o);var u=this.getSharedState("newTransformOptions");u.start=l,u.end=c,this.setSharedState({start:l,end:c,changesDone:!0}),this._emitEvent(h.Constants.EVENTS.TRANSFORM_RESIZE)}},{key:"_onRotationChange",value:function(e){var t=this.getSharedState("transformOperation"),n=this.context.editor;n.setRotation(e),n.setSpriteScale(t.calculateScale(e)),this.getSharedState("newTransformOptions").rotation=e,n.render(),this.setSharedState({rotation:e,changesDone:!0})}},{key:"_onZoomDone",value:function(){var e=this;this._zoomAFRequest=Object(m.b)(function(){e._updateTransformAreaStyles(),e.state.visible=!0,e.forceUpdate(),e._zoomAFRequest=null})}},{key:"_onOperationUpdated",value:function(e){if(e===this.getSharedState("transformOperation")){var t=this.context.editor,n=t.getSDK();n.setRotation(e.getRotation()),n.setSpriteScale(e.calculateScale()),t.render(),this.setSharedState({rotation:e.getRotation()}),this.forceUpdate()}}},{key:"_onOperationRemoved",value:function(e){"transform"!==e.constructor.identifier&&"orientation"!==e.constructor.identifier||this.forceUpdate()}},{key:"_onFlipClick",value:function(e){var t=this.context.editor,n=this.getSharedState("orientationOperation"),i=e.charAt(0).toUpperCase()+e.slice(1)+"ly",o=!this.getSharedState("flip"+i);this.setSharedState(v({},"flip"+i,o)),n.flip(e);var r=this.getSharedState("newTransformOptions"),a=-1*this.getSharedState("rotation");t.setRotation(a);var s=this.getSharedState("start").clone(),l=this.getSharedState("end").clone(),c=s.clone();"horizontal"===e?(s.set(1-l.x,s.y),l.set(1-c.x,l.y)):"vertical"===e&&(s.set(s.x,1-l.y),l.set(l.x,1-c.y)),r.start=s,r.end=l,r.rotation=a,this.setSharedState({start:s,end:l,rotation:a,changesDone:!0,newTransformOptions:r}),this.forceUpdate(),t.broadcastFlip(e),t.render()}},{key:"_onAcceptClick",value:function(e){e.preventDefault(),e.stopPropagation(),this.context.screen.switchToControls("default")}},{key:"_onAcceptMouseDown",value:function(e){e.stopPropagation()}},{key:"_onRotateClick",value:function(e){var t=this,n="cw"===e?90:-90,i=this.context.editor,o=this.getSharedState("orientationOperation"),r=(o.getRotation()+n)%360;o.set({rotation:r});var a={orientationRotation:r},s=this.getSharedState("newTransformOptions"),l=this.getSharedState("ratio");if(l)if(l.dimensions||"*"!==l.ratio)this._emitEvent(h.Constants.EVENTS.TRANSFORM_REAPPLY_RATIO),this._emitEvent(h.Constants.EVENTS.TRANSFORM_RESIZE);else{var c=this.getSharedState("start").clone(),u=this.getSharedState("end").clone(),p=c.clone();"cw"===e?(c.set(1-u.y,p.x),u.set(1-p.y,u.x)):"ccw"===e&&(c.set(p.y,1-u.x),u.set(u.y,1-p.x)),a.start=c,a.end=u,s.start=c,s.end=u}this.setSharedState({changesDone:!0,newTransformOptions:s}),i.broadcastRotate(n),i.zoom.auto(!0,!0,function(){t.setSharedState(a)})}},{key:"_updateTransformAreaStyles",value:function(){this._transformContainerRect=this.getImageBoundingRect(),this._imageContainer&&h.Utils.styleElement(this._imageContainer,{left:this._transformContainerRect.x+"px",top:this._transformContainerRect.y+"px",width:this._transformContainerRect.width+"px",height:this._transformContainerRect.height+"px"})}},{key:"_getAreaStyles",value:function(){var e=void 0,t=void 0,n=void 0,i=void 0;this._transformContainer?(e=this._transformContainerRect.getSize(),i=this._transformContainerRect.getPosition(),t=this.getSharedState("start").clone().multiply(e),n=this.getSharedState("end").clone().multiply(e).clone().subtract(t)):(e=new b(0,0),t=new b(0,0),n=new b(0,0),i=new b(0,0));var o=this._getDimensionsStyles(n.x,n.y);return{topLeft:this._getDimensionsStyles(t.x+i.x,t.y+i.y),topCenter:this._getDimensionsStyles(n.x,t.y+i.y),centerLeft:this._getDimensionsStyles(t.x+i.x,n.y),center:{width:o.width},innerTransformContainer:o}}},{key:"_getDimensionsStyles",value:function(e,t){return{width:Math.max(1,e),height:Math.max(1,t)}}},{key:"_renderOnCanvasControls",value:function(){var e=this,t=this._getAreaStyles(),n=!this.getSharedState("ratio"),i=this.getSharedState("forceCrop"),o={backgroundImage:"url('"+this._getAssetPath("editor/controls/transform/accept.png",!0)+"')"},r=h.React.createElement(N,{className:void 0,enabled:this.getSharedState("changesDone"),onClick:this._onAcceptClick,onMouseDown:this._onAcceptMouseDown,style:o});return h.React.createElement(x,{innerRef:function(t){e._container=t}},h.React.createElement(T,{className:"js-imageContainer",innerRef:function(t){e._imageContainer=t}},i?r:null),h.React.createElement(O,{className:void 0,visible:this.state.visible,innerRef:function(t){e._transformContainer=t}},h.React.createElement(I,null,h.React.createElement(A,{style:t.topLeft}),h.React.createElement(A,{style:t.topCenter}),h.React.createElement(A,null)),h.React.createElement(I,null,h.React.createElement(A,{style:t.centerLeft}),h.React.createElement(h.DraggableComponent,{onStart:this._onCenterDragStart,onDrag:this._onCenterDrag,disabled:n},h.React.createElement(B,{style:t.center,className:void 0,undraggable:n},!n&&[h.React.createElement(h.DraggableComponent,{onStart:this._onCornerDragStart.bind(this,"top","left"),onDrag:this._onCornerDrag,key:"topLeft"},h.React.createElement(F,{top:!0,left:!0,className:void 0})),h.React.createElement(h.DraggableComponent,{onStart:this._onCornerDragStart.bind(this,"top","right"),onDrag:this._onCornerDrag,key:"topRight"},h.React.createElement(F,{top:!0,right:!0,className:void 0})),h.React.createElement(h.DraggableComponent,{onStart:this._onCornerDragStart.bind(this,"bottom","left"),onDrag:this._onCornerDrag,key:"bottomLeft"},h.React.createElement(F,{bottom:!0,left:!0,className:void 0})),h.React.createElement(h.DraggableComponent,{onStart:this._onCornerDragStart.bind(this,"bottom","right"),onDrag:this._onCornerDrag,key:"bottomRight"},h.React.createElement(F,{bottom:!0,right:!0,className:void 0})),h.React.createElement(R,{style:t.innerTransformContainer,className:void 0,key:"inner"},h.React.createElement(I,null,h.React.createElement(P,{right:!0,bottom:!0}),h.React.createElement(P,{right:!0,bottom:!0}),h.React.createElement(P,{bottom:!0})),h.React.createElement(I,null,h.React.createElement(P,{right:!0,bottom:!0}),h.React.createElement(P,{right:!0,bottom:!0}),h.React.createElement(P,{bottom:!0})),h.React.createElement(I,null,h.React.createElement(P,{right:!0}),h.React.createElement(P,{right:!0}),h.React.createElement(P,null)))])),h.React.createElement(A,null)),h.React.createElement(I,null,h.React.createElement(A,null),h.React.createElement(A,null),h.React.createElement(A,null))))}},{key:"_renderControls",value:function(){var e={backgroundImage:"url('"+this._getAssetPath("editor/controls/transform/flip.png",!0)+"')"},t={backgroundImage:"url('"+this._getAssetPath("editor/controls/transform/rotate.png",!0)+"')"},n=this.props.options,i=n.enableRotation,o=n.enableFlip,r=n.enableStraighten;return h.React.createElement(w,{className:void 0},this._renderOnCanvasControls(),h.React.createElement(S,null,h.React.createElement(C,{className:void 0},o&&[h.React.createElement(M,{style:e,key:"flip-h",onClick:this._onFlipClick.bind(this,"horizontal"),className:void 0}),h.React.createElement(M,{vertical:!0,style:e,key:"flip-v",onClick:this._onFlipClick.bind(this,"vertical"),className:void 0})],r&&h.React.createElement(_.a,{value:this.getSharedState("rotation"),onChange:this._onRotationChange}),i&&[h.React.createElement(L,{style:t,key:"rotate-ccw",onClick:this._onRotateClick.bind(this,"ccw"),className:void 0}),h.React.createElement(L,{clockwise:!0,style:t,key:"rotate-cw",onClick:this._onRotateClick.bind(this,"cw"),className:void 0})])))}}]),t}();k.contextTypes=h.CanvasControlsComponent.contextTypes,t.a=k;var w=h.adonis.div({},"CanvasControls"),x=h.adonis.div({position:"absolute",top:0,left:0,width:"100%",height:"100%"},{draggable:{cursor:"move"}},"OnCanvasControls"),S=h.adonis.div({position:"absolute",left:0,right:0,bottom:0,top:"auto",height:"48px",textAlign:"center"},"BottomControlsContainer"),C=h.adonis.div({margin:"0 auto",height:"24px",marginTop:"12px",verticalAlign:"top"},"BottomControls"),E=h.adonis.div({position:"absolute",display:"table",top:0,left:0},"TransformContainer"),T=h.adonis.div({position:"absolute"},"ImageContainer"),O=Object(h.adonis)(E)({transition:"opacity 0.3s ease-out",opacity:0,width:"100%",height:"100%"},{visible:{opacity:1}},"OuterTransformContainer"),R=Object(h.adonis)(E)({},"InnerTransformContainer"),I=h.adonis.div({display:"table-row"},"TransformRow"),D=h.adonis.div({display:"table-cell"},"TransformCell"),P=Object(h.adonis)(D)({position:"relative",width:"33.3%",height:"33.3%"},{top:{borderTop:"1px solid rgba(255, 255, 255, 0.5)"},right:{borderRight:"1px solid rgba(255, 255, 255, 0.5)"},bottom:{borderBottom:"1px solid rgba(255, 255, 255, 0.5)"},left:{borderLeft:"1px solid rgba(255, 255, 255, 0.5)"}},"BorderedTransformCell"),B=Object(h.adonis)(D)({position:"relative",boxShadow:"inset 0 0 0 2px rgba(255, 255, 255, 0.5)",cursor:"move"},{undraggable:{cursor:"default"}},"CenterTransformCell"),A=Object(h.adonis)(D)({background:"rgba(0, 0, 0, 0.7)"},"DarkTransformCell"),F=h.adonis.div({position:"absolute",width:"14px",height:"14px",cursor:"pointer",zIndex:"2"},{top:{borderTop:"2px solid white",top:0},right:{borderRight:"2px solid white",right:0},bottom:{borderBottom:"2px solid white",bottom:0},left:{borderLeft:"2px solid white",left:0}},"Dragger"),j=h.adonis.button({display:"inline-block",width:"24px",height:"24px",margin:"0 8px",cursor:"pointer",padding:0,border:"none",background:"no-repeat center",backgroundSize:"contain",":focus":{outline:"none"}},"Button"),M=Object(h.adonis)(j)({},{vertical:{transform:"rotate(90deg)"}},"FlipButton"),L=Object(h.adonis)(j)({},{clockwise:{transform:"rotateY(180deg)"}},"RotateButton"),N=h.adonis.div({transition:function(e){return"backgroundColor "+e.transitionDuration+"s ease-out"},background:"no-repeat center center",backgroundColor:function(e){return e.dimmedTextColor},backgroundSize:"18px 17px",boxShadow:"0 2px 2px 0 rgba(0, 0, 0, 0.30), 0 4px 6px 0 rgba(0, 0, 0, 0.30), 0 6px 8px 0 rgba(0, 0, 0, 0.30), 0 8px 10px 0 rgba(0, 0, 0, 0.30)",borderRadius:"50%",width:"48px",height:"48px",position:"absolute",bottom:"5px",left:"50%",marginLeft:"-24px",zIndex:function(e){return e.zIndex("controlsOverlays")}},{enabled:{transition:function(e){return"backgroundColor "+e.transitionDuration+"s ease-in"},backgroundColor:function(e){return e.primaryColor},cursor:"pointer"}},"AcceptButton")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var m=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._bindAll("_onDragStart","_onDrag"),r._width=0,r.state={value:r.props.value||0},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["BaseComponent"]),h(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this._degreesPerPixel=90/217}},{key:"componentWillReceiveProps",value:function(e){this.state.value!==e.value&&this.setState({value:e.value})}},{key:"_onDragStart",value:function(){this._initialDegrees=180*this.state.value/Math.PI}},{key:"_onDrag",value:function(e){var t=this._initialDegrees+e.x*this._degreesPerPixel,n=(t=Math.min(45,Math.max(t,-45)))*Math.PI/180;this.setState({value:n}),this.props.onChange&&this.props.onChange(n)}},{key:"_getValue",value:function(){return Math.round(180*this.state.value/Math.PI)+"Â°"}},{key:"_getIndicatorPosition",value:function(){var e=45*Math.PI/180;return this._width/2+this.state.value/e*(this._width/2)}},{key:"_getIndicatorStyles",value:function(){var e=45*Math.PI/180;return{left:{left:108.5+this.state.value/e*108.5},right:{right:108.5-this.state.value/e*108.5}}}},{key:"render",value:function(){var e=this._getIndicatorStyles(),t={backgroundImage:"url('"+this._getAssetPath("editor/controls/transform/degree-slider.png",!0)+"')",backgroundPosition:e.left.left-4},n={backgroundImage:"url('"+this._getAssetPath("editor/controls/transform/degree-slider.png",!0)+"')",backgroundPosition:e.left.left+35};return d.React.createElement(d.DraggableComponent,{onStart:this._onDragStart,onDrag:this._onDrag},d.React.createElement(_,{className:void 0},d.React.createElement(g,{style:t},d.React.createElement(y,{style:e.left})),d.React.createElement(v,{className:void 0},this._getValue()),d.React.createElement(g,{style:n},d.React.createElement(y,{style:e.right}))))}}]),t}();m.contextTypes=d.BaseComponent.contextTypes,t.a=m;var _=d.adonis.div({display:"inline-block",cursor:"pointer",width:"217px",margin:"0 8px",verticalAlign:"top"},"Wrapper"),g=d.adonis.div({display:"inline-block",position:"relative",width:"92px",height:"24px",verticalAlign:"top",background:"repeat-x left center",backgroundSize:"55px 3px",overflow:"hidden"},"RotationSlider"),y=d.adonis.div({position:"absolute",top:"9px",width:"2px",height:"6px",background:function(e){return e.textColor},zIndex:1},"Indicator"),v=d.adonis.div({display:"inline-block",width:"33px",textAlign:"center",lineHeight:"24px",fontSize:"15px",color:function(e){return e.textColor},zIndex:2,fontFamily:function(e){return e.mediumFontFamily}},"Value")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(7),f=(n.n(p),n(5)),d=(n.n(f),n(356)),h=n(357),m=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function _(e,t,n){return t in e?o()(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var g=f.GroupedControlsStyles.ControlGroupList,y=f.GroupedControlsStyles.ControlGroup,v=f.GroupedControlsStyles.ControlGroupTitle,b=p.Math.Vector2,k=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,o=Array(i),r=0;r<i;r++)o[r]=arguments[r];var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(o)));return a._bindAll("_reapplyRatio","_onHistoryChange","_onResetDefaultClick","_onOperationRemoved","_onOperationUpdated"),a._events=(_(n={},f.Constants.EVENTS.TRANSFORM_REAPPLY_RATIO,a._reapplyRatio),_(n,f.Constants.EVENTS.OPERATION_REMOVED,a._onOperationRemoved),_(n,f.Constants.EVENTS.OPERATION_UPDATED,a._onOperationUpdated),_(n,f.Constants.EVENTS.HISTORY_UNDO,a._onHistoryChange),_(n,f.Constants.EVENTS.HISTORY_REDO,a._onHistoryChange),n),a._transformRatioManager=new f.TransformRatioManager(a.props.options),a.state.ratio=null,a._selectInitialRatio(!a.getSharedState("transformOperationExistedBeforeEntering")),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["ControlsComponent"]),m(t,[{key:"shouldSharedComponentUpdate",value:function(e,t){return e.ratio!==t.ratio}},{key:"_onHistoryChange",value:function(e){var t=this.context.editor,n={},i=t.operations.get("transform");if(i){var o=this.getSharedState("newTransformOptions"),r=this.props.controls.convertOperationOptionsToUI(i.serializeOptions());o.start=r.start,o.end=r.end,o.rotation=r.rotation,o.textureScale=r.textureScale,n.newTransformOptions=o,n.changesDone=!0,e.data&&e.data.ratio&&(n.ratio=e.data.ratio);var a={end:new b(1,1),rotation:0,start:new b(0,0),textureScale:1};t.broadcastTransform(i,a),this.setSharedState(n),t.zoom.auto(!0,!0)}}},{key:"_onOperationUpdated",value:function(e){var t=this.context.editor;if(this.getSharedState("transformOperation")===e){var n=this.props.controls.convertOperationOptionsToUI(e.serializeOptions());this.setSharedState({rotation:n.rotation,start:n.start,end:n.end}),t.zoom.auto(!0,!0)}}},{key:"_onOperationRemoved",value:function(e){var t=this.context.editor;if(this.getSharedState("transformOperation")===e){var n=t.operations.getOrCreate("transform",{enabled:!1}),i=t.getSDK();i.setRotation(0),i.setSpriteScale(1),this.setSharedState({transformOperation:n,rotation:0,initialTransformOptions:n.serializeOptions(),transformOperationExistedBeforeEntering:!1}),n._ratio=null,this._selectInitialRatio(!0,!0)}if(this.getSharedState("orientationOperation")===e){var o=t.operations.getOrCreate("orientation");this.setSharedState({orientationOperation:o,rotation:0,flipVertically:!1,flipHorizontally:!1})}}},{key:"_onResetDefaultClick",value:function(){var e=this.context.editor,t=this.getSharedState("orientationOperation"),n=this.getSharedState("transformOperation");t.set({flipHorizontally:!1,flipVertically:!1,rotation:0});var i=this.getSharedState("newTransformOptions");i.start=new b(0,0),i.end=new b(1,1),i.rotation=0,this.setSharedState({ratio:null,start:new b(0,0),end:new b(1,1),orientationRotation:0,rotation:0,flipVertically:!1,flipHorizontally:!1,changesDone:!0}),n._ratio=null,this._selectInitialRatio(!0,!0),this._emitEvent(f.Constants.EVENTS.TRANSFORM_RESIZE),e.setRotation(0),e.setSpriteScale(1),e.zoom.auto(!0,!0)}},{key:"_reapplyRatio",value:function(){var e=this.getSharedState("ratio");this._selectRatio(e)}},{key:"_selectRatio",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=this.getSharedState("transformOperation");t&&e&&this._setDefaultOptionsForRatio(e,n),i._ratio=e,this.setSharedState({ratio:e},n),n&&this.setSharedState({changesDone:!0}),this._emitEvent(f.Constants.EVENTS.TRANSFORM_RESIZE)}},{key:"_setDefaultOptionsForRatio",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e||{},i=n.ratio,o=n.dimensions,r=new b,a=new b;if(o&&!i&&(i=o.x/o.y),i&&"*"!==i){var s=this.getSharedState("transformOperation").getInputDimensions(!1),l=void 0,c=void 0;s.x/s.y<=i?(l=(c=s.x/i)*i,r.set((s.x-l)/2,(s.y-c)/2)):(c=(l=s.y*i)/i,r.set((s.x-l)/2,(s.y-c)/2)),a.copy(r).add(l,c),r.divide(s),a.divide(s)}else r=new b(0,0),a=new b(1,1);var u=this.getSharedState("newTransformOptions");u.start=r,u.end=a,this.setSharedState({start:r,end:a},t)}},{key:"_selectInitialRatio",value:function(){var e=this,t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=this.getSharedState("transformOperation"),o=null,r=this._transformRatioManager.getCategories().map(function(t){return e._transformRatioManager.getRatiosForCategory(t)}).reduce(function(e,t){return e.concat(t)}),a=i._ratio;a&&(o=r.filter(function(e){return e===a})[0]);o||(o=r.filter(function(e){return e.selected}).pop());return o||"*"!==(o=r[0]).ratio&&this.setSharedState({changesDone:!0}),this._selectRatio(o,t,n)}},{key:"_renderSections",value:function(){var e=this,t=function(t){return e._transformRatioManager.getRatiosForCategory(t).map(function(n){var i=e.getSharedState("ratio")===n;return f.React.createElement(d.a,{key:n.identifier,defaultIconPath:"editor/controls/transform/ratios/"+n.identifier+"-default.png",hoverIconPath:"editor/controls/transform/ratios/"+n.identifier+"-hover.png",activeIconPath:"editor/controls/transform/ratios/"+n.identifier+"-active.png",onClick:e._selectRatio.bind(e,n),title:e._t("pesdk.transform.asset."+t.identifier+".asset."+n.identifier)||n.defaultName,identifier:n.identifier,selected:i})})};return this._transformRatioManager.getCategories().map(function(n){return e._transformRatioManager.getRatiosForCategory(n).length>0?function(n){return f.React.createElement(S,{key:n.identifier},f.React.createElement(C,null,e._t("pesdk.transform.asset."+n.identifier+".name")||n.defaultName),f.React.createElement(E,null,t(n)))}(n):null})}},{key:"_getRootProps",value:function(){return{className:void 0,withBorderTop:!0}}},{key:"_renderContent",value:function(){var e=this,t=this.context.options.editor.forceCrop,n=this.getSharedState("ratio");return[f.React.createElement(f.ScrollableListComponent,{key:"list",direction:"vertical",innerRef:function(t){e._scrollbar=t}},f.React.createElement(x,null,f.React.createElement(w,null,f.React.createElement(f.ButtonComponent,{disabled:t,title:this._t("pesdk.transform.button.reset"),className:void 0,onClick:this._onResetDefaultClick})),this._renderSections())),f.React.createElement(h.a,{key:"transformDimensions",controls:this.props.controls,disabled:!n||!!n.dimensions})]}}]),t}();k.contextTypes=f.ControlsComponent.contextTypes,k.RootElement=f.ControlsComponent.RootElement,t.a=k;var w=f.adonis.li({padding:"25px",paddingBottom:"10px"},"SectionListHeader"),x=Object(f.adonis)(g).ul({overflowX:"hidden",overflowY:"auto",width:"100%"},"SectionList"),S=Object(f.adonis)(y).li({padding:"25px 17px"},"Section"),C=Object(f.adonis)(v).div({margin:"0 8px 16px 8px"},"SectionTitle"),E=f.adonis.ul({width:"100%",listStyle:"none",padding:0,margin:0,textAlign:"left"},"SectionGrid")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(5),f=(n.n(p),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var d=p.ControlsStyles.PlainControlItem,h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i)));return r.state={hovered:!1},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,p["BaseComponent"]),f(t,[{key:"render",value:function(){var e=this,t={backgroundImage:"url('"+this._getAssetPath(this.props.defaultIconPath,!0)+"')"},n={backgroundImage:"url('"+this._getAssetPath(this.props.hoverIconPath,!0)+"')"},i={backgroundImage:"url('"+this._getAssetPath(this.props.activeIconPath,!0)+"')"},o=this.props,r=o.selected,a=o.onClick,s=o.identifier,l=o.title,c=this.state.hovered;return p.React.createElement(m,{selected:r,onClick:a,"data-identifier":s,"data-selected":r,onMouseEnter:function(){return e.setState({hovered:!0})},onMouseLeave:function(){return e.setState({hovered:!1})},className:void 0},p.React.createElement(p.Transition,{active:!r},p.React.createElement(_,{style:t})),p.React.createElement(p.Transition,{active:!r&&c},p.React.createElement(_,{style:n})),p.React.createElement(p.Transition,{active:r},p.React.createElement(_,{style:i})),p.React.createElement(g,{selected:r},l))}}]),t}();h.contextTypes=p.BaseComponent.contextTypes,t.a=h;var m=Object(p.adonis)(d).li({position:"relative",display:"inline-block",width:"94px",height:"104px",marginRight:"0px",listStyle:"none","&:nth-child(odd)":{marginRight:"8px"}},"TransformListItem"),_=p.adonis.div({transition:function(e){return"opacity "+e.transitionDuration+"s ease-out"},position:"absolute",top:0,left:0,background:"no-repeat center center",backgroundSize:"contain",zIndex:2,width:"100%",height:"104px",display:"none",opacity:0},{rendered:{display:"block",transition:function(e){return"opacity "+e.transitionDuration+"s ease-in"}},visible:{display:"block",opacity:1}},"Icon"),g=p.adonis.div({zIndex:function(e){return e.zIndex("controls")},position:"absolute",left:0,right:0,bottom:"8px",color:"white",opacity:.4,fontSize:"13px",fontFamily:function(e){return e.regularFontFamily}},{selected:{opacity:1,fontFamily:function(e){return e.mediumFontFamily}}},"Title")},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(2),a=n.n(r),s=n(3),l=n.n(s),c=n(1),u=n.n(c),p=n(7),f=(n.n(p),n(5)),d=(n.n(f),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var h=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||u()(t)).call.apply(e,[this].concat(i))),a=r._getTransformDimensions();return r.state={dimensions:a,x:a.x,y:a.y},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=l()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(a.a?a()(e,t):e.__proto__=t)}(t,f["SharedStateComponent"]),d(t,[{key:"shouldSharedComponentUpdate",value:function(e,t){return!e.start.equals(t.start)||!e.end.equals(t.end)||e.ratio!==t.ratio}},{key:"sharedComponentWillUpdate",value:function(e,t){if(t.transformOperation){var n=this._getTransformDimensions(),i=n.x,o=n.y;this.state.dimensions=n,this.state.x=i,this.state.y=o}}},{key:"_onInputLiveChange",value:function(e,t){var n=t.target.value;n.length&&!n.match(/\d+?/i)||(this.state[e]=n&&parseInt(n,10)||"",this.forceUpdate())}},{key:"_onInputChange",value:function(e,t){var n=this.state[e]||0,i=this.getSharedState("transformOperation").getInputDimensions(!1),o=this.getSharedState("ratio").ratio,r=this.getSharedState("start"),a=this.getSharedState("end").clone().subtract(r).clone().multiply(i);a[e]=Math.min(i[e],n),"*"!==o&&("x"===e?a.y=a.x/o:a.x=a.y*o);var s=a.clone();(a.x>i.x||a.y>i.y)&&(s=p.Utils.resizeVectorToFit(a,i));var l=this._getTransformDimensions(),c=l.x,u=l.y;this.state.dimensions=l,this.state.x=c,this.state.y=u,this._resizeTransformTo(s),this.forceUpdate()}},{key:"_getTransformDimensions",value:function(){var e=this.getSharedState("transformOperation"),t=this.getSharedState("ratio")||{ratio:"*"},n=void 0;if(t.dimensions)n=t.dimensions.clone();else{var i=e.getInputDimensions(!1),o=this.getSharedState("start");n=this.getSharedState("end").clone().subtract(o).multiply(i).round()}return n}},{key:"_resizeTransformTo",value:function(e){var t=this.getSharedState("transformOperation").getInputDimensions(!1),n=this.getSharedState("start").clone(),i=this.getSharedState("end").clone(),o=e.divide(t);i.copy(n).add(o),i.x>1&&(n.x-=i.x-1,i.x=1),i.y>1&&(n.y-=i.y-1,i.y=1);var r=this.props.controls.fixTransform(n,i,"right","bottom"),a=r.start,s=r.end,l=this.getSharedState("newTransformOptions");l.start=a,l.end=s,this.setSharedState({start:a,end:s}),this._emitEvent(f.Constants.EVENTS.TRANSFORM_RESIZE)}},{key:"render",value:function(){return f.React.createElement(g,{className:void 0},f.React.createElement(y,null,f.React.createElement(v,null,f.React.createElement(b,null,f.React.createElement(m,{suffix:this._t("pesdk.transform.placeholder.width"),name:"width",disabled:this.props.disabled,value:this.state.x,onLiveChange:this._onInputLiveChange.bind(this,"x"),onChange:this._onInputChange.bind(this,"x")})),f.React.createElement(k,null,f.React.createElement(_,{src:this._getAssetPath("editor/controls/transform/dimensions-cross.png",!0)})),f.React.createElement(b,null,f.React.createElement(m,{suffix:this._t("pesdk.transform.placeholder.height"),name:"height",disabled:this.props.disabled,value:this.state.y,onLiveChange:this._onInputLiveChange.bind(this,"y"),onChange:this._onInputChange.bind(this,"y")}))),f.React.createElement(f.Transition,{active:this.props.disabled,enterProp:"rendered",enterDuration:300,appearProp:"visible",appearDuration:300,leaveDuration:300},f.React.createElement(w,{className:void 0},f.React.createElement(x,{src:this._getAssetPath("editor/controls/transform/lock.png",!0)})))))}}]),t}();h.contextTypes=f.SharedStateComponent.contextTypes,t.a=h;var m=Object(f.adonis)(f.SuffixedTextInputComponent)({display:"block"},"DimensionInput"),_=f.adonis.img({width:"8px",height:"8px"},"Cross"),g=f.adonis.div({display:"table-row",width:"100%",height:"56px",background:function(e){return e.secondaryControlsBackgroundColor},borderTop:function(e){return"1px solid "+e.backgroundColor},zIndex:function(e){return e.zIndex("controlsOverlays")},textAlign:"center"},"TransformDimensions"),y=f.adonis.div({display:"table-cell",padding:"12px 25px",position:"relative"},"TransformDimensionsWrapper"),v=f.adonis.div({display:"table",tableLayout:"fixed",width:"100%"},"Table"),b=f.adonis.div({display:"table-cell"},"Cell"),k=Object(f.adonis)(b)({textAlign:"center",width:"24px"},"CrossCell"),w=f.adonis.div({transition:"opacity 0.3s ease-out",position:"absolute",top:0,left:0,width:"100%",height:"100%",background:function(e){return e.controlsLightBackgroundColor},opacity:0,display:"none"},{rendered:{display:"block"},visible:{opacity:.8}},"LockOverlay"),x=f.adonis.img({width:"24px",marginTop:"18px"},"Lock")},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(113),f=n.n(p),d=n(8),h=n.n(d),m=n(1),_=n.n(m),g=n(7),y=(n.n(g),n(5)),v=n.n(y),b=n(359),k=n(360),w=n(46),x=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},S=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function C(e){return function(){var t=e.apply(this,arguments);return new h.a(function(e,n){return function i(o,r){try{var a=t[o](r),s=a.value}catch(e){return void n(e)}if(!a.done)return h.a.resolve(s).then(function(e){i("next",e)},function(e){i("throw",e)});e(s)}("next")})}}function E(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var T=void 0,O=void 0;g.Operations.SpriteOperation&&(T=g.Operations.SpriteOperation.TextDesignSprite,O=T.AssetManager);var R=function(e){function t(){var e,n,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,r=Array(o),a=0;a<o;a++)r[a]=arguments[a];return n=i=E(this,(e=t.__proto__||_()(t)).call.apply(e,[this].concat(r))),i.toggleTextAsMask=function(){var e=i.context.editor,t=i.sharedState.get("selectedSprite");t?(t.setInverted(!t.getInverted()),i.addLocalHistorySnapshot("inverted-layout"),e.render()):i.sharedState.set({textAsMask:!i.sharedState.get("textAsMask")})},i.setColor=function(e){var t=i.context.editor,n=i.sharedState.get("selectedSprite");i.sharedState.set("color",e.clone()),n?(n.setColor(e.clone()),i.addLocalHistorySnapshot("layout-color"),t.render()):i.sharedState.set({color:e.clone()})},E(i,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,y["BaseControls"]),S(t,[{key:"_onEnter",value:function(){var e=this.context.editor,t=new y.TextDesignManager(this.context.ui,this._options),n=new y.FontManager(this.context.ui,{fonts:y.Constants.DEFAULTS.TEXT_DESIGN_FONTS,replaceFonts:!0}),i=e.operations.getOrCreate("sprite"),o=g.Utils.Array.find(i.getSprites(),function(e){return e instanceof T});this.sharedState.set({textDesignManager:t,fontManager:n,operation:i,selectedSprite:o,color:g.Color.WHITE})}},{key:"getLayoutItems",value:function(){var e=this.sharedState.get("textDesignManager");return this.constructor.TextDesignItems.filter(function(t){return e.getLayoutByIdentifier(t.identifier)})}},{key:"getText",value:function(){var e=C(f.a.mark(function e(){var t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return f.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=y.ModalManager.instance.displayInput("Text",n),e.abrupt("return",new h.a(function(e){t.on("input",e),t.on("close",function(t){return e(n)})}));case 2:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"editText",value:function(){var e=C(f.a.mark(function e(){var t,n,i,o,r;return f.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=this.sharedState.get("selectedSprite"),n=this.sharedState.get("operation"),i=this.context.editor,t){e.next=5;break}return e.abrupt("return");case 5:return o=t.getText(),e.next=8,this.getText(o);case 8:if((r=e.sent)&&""!==r.trim()){e.next=15;break}return n.removeSprite(t),t.dispose(),this.sharedState.set({selectedLayout:null,selectedSprite:null}),i.render(),e.abrupt("return");case 15:t.setText(r),this.addLocalHistorySnapshot("layout-text");case 17:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"selectLayout",value:function(){var e=C(f.a.mark(function e(t){var n,i,o,r,a,s,l,c,u,p=this;return f.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=this.sharedState.get(),i=n.textDesignManager,o=n.selectedSprite,r=n.operation,a=i.getLayoutByIdentifier(t),s=this.context.editor,a){e.next=5;break}return e.abrupt("return",null);case 5:if(o){e.next=16;break}return e.next=8,this.getText();case 8:if((l=e.sent)&&""!==l.trim()){e.next=11;break}return e.abrupt("return");case 11:o=new T(r,{text:l,color:this.sharedState.get("color"),inverted:this.sharedState.get("textAsMask"),width:.8}),r.addSprite(o),this.sharedState.set({selectedSprite:o}),e.next=17;break;case 16:o.seed();case 17:return c=new a,e.prev=18,u=c.getImagePaths().map(function(e){return{path:e,fullPath:p._getAssetPath(e),image:null}}),e.next=22,O.loadImages(u);case 22:c.onImagesLoaded(),e.next=29;break;case 25:return e.prev=25,e.t0=e.catch(18),w.a.error(e.t0),e.abrupt("return");case 29:return o.setLayout(c),this.addLocalHistorySnapshot("layout"),s.render(),e.abrupt("return",o);case 33:case"end":return e.stop()}},e,this,[[18,25]])}));return function(t){return e.apply(this,arguments)}}()},{key:"_loadFonts",value:function(){var e=C(f.a.mark(function e(){var t,n;return f.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=this.sharedState.get("fontManager"),(n=this.context.ui.getFontLoader()).setFonts(t.getFonts()),O.setFonts(x({},O.getFonts(),t.getVariationsByIdentifier())),e.abrupt("return",n.load().catch(function(e){return e.map(function(e){return e.font.getFontFamily()})}));case 5:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"loadFonts",value:function(){var e=this,t=void 0,n=window.setTimeout(function(){t=y.ModalManager.instance.displayLoading(e._t("pesdk.editor.text.loadingFonts"),!0)},600);return this._loadFonts().then(function(){window.clearTimeout(n),t&&t.close()}).catch(function(i){window.clearTimeout(n),t&&t.close();var o=e._unavailableFontFamilies.join(", ");y.ModalManager.instance.displayError(e._t("pesdk.editor.title.fontLoadingError"),e._t("pesdk.editor.text.fontLoadingError",{fonts:o}))})}}],[{key:"mapOperationsToSharedState",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1],arguments.length>2&&void 0!==arguments[2]&&arguments[2];var t=e.getOrCreate("sprite").getSprites().filter(function(e){return e instanceof T})[0]||null,n=t?t.getLayout():null;return{color:t?t.getColor():g.Color.WHITE,textAsMask:!!t&&t.getInverted(),selectedLayout:n?n.constructor.identifier:null}}},{key:"clickAtPosition",value:function(e,t){var n=t.operations.get("sprite");if(!n)return!1;var i=n.getSpritesAtPosition(e,t.getOutputTextureDimensions()).filter(function(e){return e instanceof T});return!!i[0]&&{selectedSprite:i[0]}}},{key:"isEnabled",value:function(e){return e.isToolEnabled("textdesign")&&e.isToolAllowed("textdesign")}},{key:"getPreloadAssets",value:function(e){var t=[];return this.TextDesignItems.forEach(function(e){t.push(e.backgroundImagePath)}),t}}]),t}();R.identifier="textdesign",R.controlsComponent=b.a,R.canvasControlsComponent=k.a,R.iconPath="editor/controls/text-design/icon.png",R.activeIconPath="editor/controls/text-design/icon-active.png",R.requiredOperations=["sprite"],R.updatableOperations=["sprite"],R.switchToDefaultControlsOnRemoval=!0,R.defaultOptions={availableLayouts:null},R.TextDesignItems=[{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_thislayoutisgreat.png",identifier:"imgly_text_design_blocks"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_fatandfast.png",identifier:"imgly_text_design_rotated"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_summerfeeling.png",identifier:"imgly_text_design_blocks_light"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_typewithstyle.png",identifier:"imgly_text_design_equal_width"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_inthebox.png",identifier:"imgly_text_design_masked"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_bluefriday.png",identifier:"imgly_text_design_celebrate"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_decorative.png",identifier:"imgly_text_design_sunshine"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_specialdeals.png",identifier:"imgly_text_design_masked_badge"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_doublelines.png",identifier:"imgly_text_design_blocks_condensed"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_celebrate.png",identifier:"imgly_text_design_celebrate_simple"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_beerandburger.png",identifier:"imgly_text_design_equal_width_fat"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_watercolor.png",identifier:"imgly_text_design_watercolor"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_particle.png",identifier:"imgly_text_design_particles"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_yeah.png",identifier:"imgly_text_design_masked_speech_bubble"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_thisisadream.png",identifier:"imgly_text_design_masked_speech_bubble_comic"},{backgroundImagePath:"editor/controls/text-design/icons/imgly_text_design_icon_fat_face.png",identifier:"imgly_text_design_multiline"}],v.a.Controls.TextDesignControls=R,t.a=R},function(e,t,n){"use strict";var i=n(0),o=n.n(i),r=n(6),a=n.n(r),s=n(2),l=n.n(s),c=n(3),u=n.n(c),p=n(1),f=n.n(p),d=n(5),h=(n.n(d),function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),o()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}());var m=d.GroupedControlsStyles.ControlGroupTitle,_=d.GroupedControlsStyles.ControlGroup,g=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||f()(t)).call.apply(e,[this].concat(i)));return r._events={},r._unavailableFontFamilies=[],r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=u()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(l.a?l()(e,t):e.__proto__=t)}(t,d["ControlsComponent"]),h(t,[{key:"componentDidMount",value:function(){(function e(t,n,i){null===t&&(t=Function.prototype);var o=a()(t,n);if(void 0===o){var r=f()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(i):void 0})(t.prototype.__proto__||f()(t.prototype),"componentDidMount",this).call(this),this.props.controls.loadFonts()}},{key:"shouldSharedComponentUpdate",value:function(e,t){return!0}},{key:"_getRootProps",value:function(){return{className:void 0,withBorderTop:!0}}},{key:"onSelectLayout",value:function(e){var t=this;this.props.controls.selectLayout(e).then(function(){t.forceUpdate(),t.context.editor.render()})}},{key:"_renderContent",value:function(){var e=this,t=this.sharedState,n=t.color,i=t.textAsMask,o=t.selectedLayout,r=this.props.controls,a=r.getLayoutItems();return d.React.createElement(y,null,d.React.createElement(C,null,d.React.createElement(T,null,d.React.createElement(d.ColorSelectionComponent,{value:n,onChange:r.setColor})),d.React.createElement(x,null,d.React.createElement(S,{className:void 0,onClick:r.toggleTextAsMask,checked:i}),d.React.createElement(w,null,this._t("pesdk.textdesign.button.invert")))),d.React.createElement(E,null,d.React.createElement(d.ScrollbarComponent,{direction:"vertical"},d.React.createElement(b,null,a.map(function(t){return d.React.createElement(k,{key:t.identifier,className:void 0,selected:t.identifier===o,onClick:function(){return e.onSelectLayout(t.identifier)}},d.React.createElement(v,{src:t.identifier===o?e._getAssetPath("editor/controls/text-design/icons/imgly_icon_next_48pt.png",!0):e._getAssetPath(t.backgroundImagePath,!0)}))})))))}}]),t}();g.contextTypes=d.ControlsComponent.contextTypes,g.RootElement=d.ControlsComponent.RootElement,t.a=g;var y=d.adonis.div({position:"relative",height:"100%",width:"100%",display:"table"},"Container"),v=d.adonis.img({width:"80px",position:"absolute",top:0,left:0,right:0,bottom:0,margin:"auto"},"Image"),b=d.adonis.ul({position:"absolute",top:0,left:"25px",bottom:0,width:"100%",overflowX:"hidden",overflowY:"auto",listStyle:"none",margin:0,padding:0,lineHeight:0},"List"),k=d.adonis.li({position:"relative",display:"inline-block",width:"88px",height:"88px",marginRight:"0px",marginBottom:"8px",marginTop:"0px",listStyle:"none",background:"rgba(255, 255, 255, 0.015)",borderRadius:"1px",cursor:"pointer","&:nth-child(odd)":{marginRight:"8px"},border:"1px solid transparent",transition:function(e){return"all "+e.transitionDuration+"s ease-out"},"&:hover":{border:"1px solid rgba(255, 255, 255, 0.08)",transition:function(e){return"all "+e.transitionDuration+"s ease-in"}}},{selected:{background:"rgba(27,112,255,0.14)",border:"1px solid #1B77FF"}},"ListItem"),w=Object(d.adonis)(m).div({transition:"margin-bottom .2s 0s",marginBottom:"20px",padding:"0 5px"},"SectionTitle"),x=d.adonis.div({position:"relative",cursor:"pointer"},"SectionHeader"),S=Object(d.adonis)(d.CheckboxComponent)({float:"right",textAlign:"right"},"Checkbox"),C=Object(d.adonis)(_).div({padding:"21px",paddingBottom:"25px",borderBottom:function(e){return"1px solid "+e.darkSliderBackgroundColor}},"Settings"),E=Object(d.adonis)(_).div({padding:"21px",position:"absolute",top:"148px",bottom:0,left:0,width:"100%"},"SettingsBottom"),T=d.adonis.div({marginBottom:"16px"},"ColorSelection")},function(e,t,n){"use strict";var i=n(10),o=n.n(i),r=n(0),a=n.n(r),s=n(6),l=n.n(s),c=n(2),u=n.n(c),p=n(3),f=n.n(p),d=n(1),h=n.n(d),m=n(7),_=(n.n(m),n(54)),g=o.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),a()(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var v=void 0;m.Operations.SpriteOperation&&(v=m.Operations.SpriteOperation.TextDesignSprite);var b=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||h()(t)).call.apply(e,[this].concat(i)));return r.state=g({},r.state,{visible:!0}),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=f()(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(u.a?u()(e,t):e.__proto__=t)}(t,_["a"]),y(t,[{key:"_renderSpriteItems",value:function(e){return function e(t,n,i){null===t&&(t=Function.prototype);var o=l()(t,n);if(void 0===o){var r=h()(t);return null===r?void 0:e(r,n,i)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(i):void 0}(t.prototype.__proto__||h()(t.prototype),"_renderSpriteItems",this).call(this,e.filter(function(e){return e instanceof v}))}},{key:"_selectNextSprite",value:function(){for(var e=this.getSharedState("operation").getSprites().slice(0).reverse(),t=void 0,n=void 0,i=0;i<e.length;i++)if((t=e[i])instanceof v){n=t;break}this.setSharedState({selectedSprite:n||null})}},{key:"_createSprite",value:function(e){}}]),t}();b.contextTypes=_.a.contextTypes,t.a=b}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA1YmVmZjliOTVhNWZhNGVmNzI0MyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9nbG9iYWxzLmpzIiwid2VicGFjazovLy8uL2NvcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcInBob3RvZWRpdG9yc2RrL2pzL1Bob3RvRWRpdG9yU0RLXCIsXCJjb21tb25qczJcIjpcInBob3RvZWRpdG9yc2RrL2pzL1Bob3RvRWRpdG9yU0RLXCIsXCJhbWRcIjpcInBob3RvZWRpdG9yc2RrXCIsXCJyb290XCI6XCJQaG90b0VkaXRvclNES1wifSIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbi5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvYXN5bmMvYW5pbWF0aW9uLWZyYW1lLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9sb2FkZXJzL2ltYWdlLWxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvZHJhZ2dhYmxlLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wicm9vdFwiOlwiUmVhY3RcIixcImNvbW1vbmpzMlwiOlwicmVhY3RcIixcImNvbW1vbmpzXCI6XCJyZWFjdFwiLFwiYW1kXCI6XCJyZWFjdFwifSIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL21hbmFnZXJzL21vZGFsLW1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL21vZGFscy9tb2RhbC1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL2xvZy5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cy5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9sb2FkZXJzL2pzb24tbG9hZGVyLmpzIiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy90cmFuc2l0aW9uLmpzeCIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9tYW5hZ2Vycy9zdGlja2VyLW1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvbWFuYWdlcnMvZm9udC1tYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQtc3RhdGUtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvc2hhcmVkL2Zvcm1zL251bWVyaWMtaW5wdXQtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9zaGFyZWQvc3ByaXRlcy9zcHJpdGVzLWNhbnZhcy1jb250cm9scy1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL3NoYXJlZC9zcHJpdGVzL3Nwcml0ZXMvaXRlbS1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL2ZvbnQtbG9hZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL3NlcmlhbGl6YXRpb24vMi4wLjAvc2VyaWFsaXplci5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzIuMC4wL2Rlc2VyaWFsaXplci5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9tYW5hZ2Vycy90ZXh0LWRlc2lnbi1tYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvc2Nyb2xsYmFyLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NoYXJlZC9zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC92YWx1ZS1zZWxlY3Rpb24tY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2NvbG9yLXBpY2tlci9jaXJjbGUtc2xpZGVyLXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9vdmVybGF5L2JsZW5kLW1vZGVzLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2ZianMvbGliL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL3RoZW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvYmFzZS1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvaXMtaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL2NvbnN0YW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL3BlcmZvcm1hbmNlLW5vdy9saWIvcGVyZm9ybWFuY2Utbm93LmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL2VkaXRvci5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzEuMC4wL3NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8xLjAuMC9kZXNlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL21hbmFnZXJzL2ZpbHRlci1tYW5hZ2VyLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL21hbmFnZXJzL2JydXNoLW1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvYXNzZXRzL2ZvbnQtdmFyaWF0aW9uLmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL2ZvbnQtbG9hZGVyL2xvYWRlcnMvYmFzZS1mb250LWxvYWRlci5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzEuMC4xL3NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8xLjAuMS9kZXNlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8yLjAuMC9ibGVuZC1tb2Rlcy5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9tYW5hZ2Vycy9mcmFtZS1tYW5hZ2VyLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL21hbmFnZXJzL292ZXJsYXktbWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2xpYi9mcmFtZS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzMuMC4wL3NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8zLjAuMC9kZXNlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvbWFuYWdlcnMvdHJhbnNmb3JtLXJhdGlvLW1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2NvbnRyb2xzLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2hlYWRlci9jYW52YXMtaGVhZGVyLWJ1dHRvbi1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zbGlkZXItY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvZ3JvdXBlZC1jb250cm9sLXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2NoZWNrYm94LWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jb2xvci1waWNrZXIvY29sb3ItY29tcG9uZW50LWlucHV0LWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvbGlicmFyeS9saWJyYXJ5LXVwbG9hZC1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL2FzeW5jL3Byb21pc2UtcXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvZm9jdXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvc3RpY2tlci9zdGlja2VyLWxpc3QtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL3VpLmpzeCIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy9leHRlcm5hbCB7XCJyb290XCI6XCJSZWFjdERPTVwiLFwiY29tbW9uanMyXCI6XCJyZWFjdC1kb21cIixcImNvbW1vbmpzXCI6XCJyZWFjdC1kb21cIixcImFtZFwiOlwicmVhY3QtZG9tXCJ9Iiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL2NvcmUvdGhlbWVzL2RhcmstdGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9hZG9uaXMvYnVpbGQvYWRvbmlzLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zZGsvY29yZS9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnbi5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3Nkay9jb3JlL2xpYi9iYXNlNjQuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zZGsvY29yZS9saWIvYXJyYXktdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvdXRpbHMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC92ZW5kb3IvcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXQtaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3NldC1pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvdXJsL3VybC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL3B1bnljb2RlL3B1bnljb2RlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy91cmwvdXRpbC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9kZWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZW5jb2RlLmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL25ldy10by1vbGQtbG9jYWxpemF0aW9uLWtleS1tYXAuanNvbiIsIndlYnBhY2s6Ly8vLi9jb3JlL2xpYi9jb25zdGFudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvY29uc3RhbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2xpYi9jb25zdGFudHMvZGVmYXVsdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvY29uc3RhbnRzL2RlZmF1bHRzL2ZvbnRzLmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL2NvbnN0YW50cy9kZWZhdWx0cy90ZXh0LWRlc2lnbi1mb250cy5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2xpYi9jb25zdGFudHMvZGVmYXVsdHMvdHJhbnNmb3JtLXJhdGlvLWNhdGVnb3JpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvc2hhcmVkLXN0YXRlLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2lzLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5pcy1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvYXBwLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9tb2RhbC1jb250YWluZXItY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvbW9kYWxzL2xvYWRpbmctbW9kYWwtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvbW9kYWxzL3dhcm5pbmctbW9kYWwtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvbW9kYWxzL2Vycm9yLW1vZGFsLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL21vZGFscy9wcm9ncmVzcy1tb2RhbC1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9tb2RhbHMvaW5wdXQtbW9kYWwtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3Itc2NyZWVuLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvZXhwb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvZG93bmxvYWRlci9maWxlLWRvd25sb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvaW1hZ2UtcmVzaXplci5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2xpYi9lZGl0b3Ivb3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2xpYi9lZGl0b3IvY29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvZWRpdG9yL2ZlYXR1cmVzLmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL2VkaXRvci96b29tLmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvZWRpdG9yL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8xLjAuMC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvYXNzZXRzL2ZvbnQuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvZm9udC1sb2FkZXIvbG9hZGVycy9nb29nbGUtZm9udC1sb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvZm9udC1sb2FkZXIvZm9udC1vYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2xpYi9mb250LWxvYWRlci9mb250LXJ1bGVyLmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL2ZvbnQtbG9hZGVyL2xvYWRlcnMvZmlsZS1mb250LWxvYWRlci5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzEuMC4xL2luZGV4LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL3NlcmlhbGl6YXRpb24vMi4wLjAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8yLjAuMS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzIuMC4xL3NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8yLjAuMS9kZXNlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8zLjAuMC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzMuMS4wL2luZGV4LmpzIiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL3NlcmlhbGl6YXRpb24vMy4xLjAvc2VyaWFsaXplci5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzMuMS4wL2Rlc2VyaWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL25hdmlnYXRpb24vbmF2aWdhdGlvbi1pdGVtLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NhbnZhcy1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9jYW52YXMtaGVhZGVyLWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2hlYWRlci9jYW52YXMtaGVhZGVyLXRleHQtYnV0dG9uLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2hlYWRlci9jYW52YXMtaGVhZGVyLWljb24tYnV0dG9uLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2hlYWRlci9jYW52YXMtaGVhZGVyLXpvb20tY29udHJvbC1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2xvYWRpbmctc2NyZWVuLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvY3NzLXJlc2V0LmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL2dsb2JhbC1jc3MuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvcHJlbG9hZGVyLmpzIiwid2VicGFjazovLy8uL2NvcmUvZXhwb3J0cy5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2xpYi9saWJyYXJ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL2xpYnJhcnkvcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9saWIvbGlicmFyeS9jYXRlZ29yeS5qcyIsIndlYnBhY2s6Ly8vLi9jb3JlL2xpYi9saWJyYXJ5L2ltYWdlLmpzIiwid2VicGFjazovLy8uL2NvcmUvbGliL2RlbGF5ZWQtam9iLXF1ZXVlLmpzIiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9jb250cm9scy1zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2Jhc2UtY29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9sb2FkaW5nLWluZGljYXRvci1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zdWZmaXhlZC10ZXh0LWlucHV0LWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NoYXJlZC9mb3Jtcy9hdXRvLXNpemUtbnVtZXJpYy1pbnB1dC1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvY29sbGFwc2Utc2VjdGlvbi1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvc2Nyb2xsYWJsZS1saXN0LWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9zbGlkZXItY29udHJvbC1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8vbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL251bWJlci9pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vbnVtYmVyL2lzLW5hbi5qcyIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvY29sb3Itc2VsZWN0aW9uLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jb2xvci1waWNrZXIvY29sb3ItcGlja2VyLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jb2xvci1waWNrZXIvaHVlLXNsaWRlci1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvY29sb3ItcGlja2VyL29wYWNpdHktc2xpZGVyLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jb2xvci1waWNrZXIvc2F0dXJhdGlvbi12YWx1ZS1zbGlkZXItY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2NvbG9yLXBpY2tlci9oZXgtaW5wdXQtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2J1dHRvbi1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zaGFyZWQvZm9ybXMvZHJvcGRvd24tY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvc2hhcmVkL2Zvcm1zL3RleHQtaW5wdXQtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2NvbXBvbmVudHMvc2hhcmVkL2ludmlzaWJsZS11cGxvYWQtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9sb2FkZXJzL2ZpbGUtbG9hZGVyLmpzIiwid2VicGFjazovLy8uL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvY2FudmFzLW92ZXJsYXktY29udHJvbHMtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb3JlL2xhbmcvZGUuanNvbiIsIndlYnBhY2s6Ly8vLi9jb3JlL2xhbmcvZW4uanNvbiIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9saWJyYXJ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL2NvbnRyb2xzL2xpYnJhcnkvbGlicmFyeS1jb250cm9scy1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL2xpYnJhcnkvbGlicmFyeS1yb290LXBhbmVsLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvbGlicmFyeS9jYXRlZ29yeS1saXN0LWl0ZW0tY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9saWJyYXJ5L2xpYnJhcnktc2VhcmNoLXBhbmVsLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvbGlicmFyeS9pbWFnZS1saXN0LWl0ZW0tY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9saWJyYXJ5L2xpYnJhcnktc2VhcmNoLWhlYWRlci1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL2xpYnJhcnkvbGlicmFyeS1jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9saWJyYXJ5L3dlYmNhbS1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL2xpYnJhcnkvd2ViY2FtLXZpZGVvLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvbGlicmFyeS9sYXJnZS1saWJyYXJ5LXVwbG9hZC1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL2FkanVzdG1lbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL2NvbnRyb2xzL2FkanVzdG1lbnRzL2FkanVzdG1lbnRzLWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvYWRqdXN0bWVudHMvYWRqdXN0bWVudHMtbGlzdC1pdGVtLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvYnJ1c2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvYnJ1c2gvYnJ1c2gtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9icnVzaC9icnVzaC1saXN0LWl0ZW0tY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9icnVzaC9icnVzaC1jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9zaGFyZWQvc3ByaXRlcy9zcHJpdGVzL3N0aWNrZXItaXRlbS1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL3NoYXJlZC9zcHJpdGVzL3Nwcml0ZXMvdGV4dC1pdGVtLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvc2hhcmVkL3Nwcml0ZXMvc3ByaXRlcy9icnVzaC1pdGVtLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvc2hhcmVkL3Nwcml0ZXMvc3ByaXRlcy90ZXh0LWRlc2lnbi1pdGVtLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvZmlsdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL2NvbnRyb2xzL2ZpbHRlci9maWx0ZXItY29udHJvbHMtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9maWx0ZXIvZmlsdGVyLWxpc3QtaXRlbS1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL2ZpbHRlci9maWx0ZXItcHJldmlldy1yZW5kZXJlci5qcyIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9mb2N1cy9mb2N1cy1jb250cm9scy1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL2ZvY3VzL2ZvY3VzLWxpc3QtaXRlbS1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL2ZvY3VzL2ZvY3VzLWNhbnZhcy1jb250cm9scy1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL2ZvY3VzL3JhZGlhbC1mb2N1cy1jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9mb2N1cy9saW5lYXItZm9jdXMtY2FudmFzLWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvZm9jdXMvbWlycm9yZWQtZm9jdXMtY2FudmFzLWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvZnJhbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvZnJhbWUvZnJhbWUtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9mcmFtZS9mcmFtZS1yb290LXBhbmVsLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvZnJhbWUvZnJhbWUtbGlzdC1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL2ZyYW1lL2ZyYW1lLW9wdGlvbnMtcGFuZWwtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9vdmVybGF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL2NvbnRyb2xzL292ZXJsYXkvb3ZlcmxheS1jb250cm9scy1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL292ZXJsYXkvb3ZlcmxheS1saXN0LWl0ZW0tY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9vdmVybGF5L292ZXJsYXktYmxlbmRpbmctY29udHJvbC1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL3N0aWNrZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvc3RpY2tlci9zdGlja2VyLWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvc3RpY2tlci9zdGlja2VyLXJvb3QtcGFuZWwtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy9zdGlja2VyL3N0aWNrZXItY2F0ZWdvcnktaXRlbS1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL3N0aWNrZXIvc3RpY2tlci1jYXRlZ29yeS1wYW5lbC1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL3N0aWNrZXIvc3RpY2tlci1vcHRpb25zLXBhbmVsLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvc3RpY2tlci9zdGlja2VyLWNhbnZhcy1jb250cm9scy1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL3RleHQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvdGV4dC90ZXh0LWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvdGV4dC9mb250LWZhbWlseS1hbmQtc2l6ZS1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL3RleHQvdGV4dC1jb250cm9scy1zdHlsaW5nLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvdGV4dC90ZXh0LWxlZ2liaWxpdHktcHJlc2V0LWl0ZW0tY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy90ZXh0L3RleHQtY2FudmFzLWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvdHJhbnNmb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL2NvbnRyb2xzL3RyYW5zZm9ybS90cmFuc2Zvcm0tY2FudmFzLWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvdHJhbnNmb3JtL3RyYW5zZm9ybS1yb3RhdGlvbi1zbGlkZXItY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy90cmFuc2Zvcm0vdHJhbnNmb3JtLWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udHJvbHMvdHJhbnNmb3JtL3RyYW5zZm9ybS1saXN0LWl0ZW0tY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy90cmFuc2Zvcm0vdHJhbnNmb3JtLWRpbWVuc2lvbnMtY29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250cm9scy90ZXh0LWRlc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jb250cm9scy90ZXh0LWRlc2lnbi90ZXh0LWRlc2lnbi1jb250cm9scy1jb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRyb2xzL3RleHQtZGVzaWduL3RleHQtZGVzaWduLWNhbnZhcy1jb250cm9scy1jb21wb25lbnQuanN4Il0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwidGhpcyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfN19fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8zMl9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8xNTFfXyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImRlZmF1bHQiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19zaGFyZWRfY29uc3RhbnRzX18iLCJhZG9uaXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYWRvbmlzX19fZGVmYXVsdCIsImEiLCJnbG9iYWwiLCJhZG9uaXNPcHRpb25zIiwiaW5qZWN0aW9uIiwidGhlbWUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX3RoZW1lc19fIiwibWluaWZpZWQiLCJlbnYiLCJjc3NTZWxlY3RvclByZWZpeCIsImNsYXNzTmFtZVByZWZpeCIsImhhc2hlZFN0eWxlcyIsIkJhc2U2NCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9waG90b2VkaXRvcnNka19fX2RlZmF1bHQiLCJDb2xvciIsIkV2ZW50RW1pdHRlciIsIk1hdGgiLCJDb2xvck1hdHJpeCIsIk9wdGlvblR5cGUiLCJFWElGIiwiUHJvbWlzZSIsIlNES1V0aWxzIiwiVXRpbHMiLCJSZW5kZXJUeXBlIiwiSW1hZ2VGb3JtYXQiLCJTREsiLCJWZWN0b3IyIiwiVW5pZm9ybVR5cGUiLCJSZWN0YW5nbGUiLCJub3ciLCJ3aW5kb3ciLCJwZXJmb3JtYW5jZSIsImJpbmQiLCJjb3JlIiwidmVyc2lvbiIsIl9fZSIsInN0b3JlIiwidWlkIiwiU3ltYm9sIiwiVVNFX1NZTUJPTCIsImN0eCIsImhpZGUiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsImtleSIsIm93biIsIm91dCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwiSVNfV1JBUCIsIlciLCJleHBQcm90byIsInRhcmdldCIsInVuZGVmaW5lZCIsIkMiLCJiIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJGdW5jdGlvbiIsInZpcnR1YWwiLCJSIiwiVSIsIl9fZyIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJjQUYiLCJyQUYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImxhc3RUaW1lIiwidmVuZG9ycyIsIngiLCJjYWxsYmFjayIsImVsZW1lbnQiLCJjdXJyVGltZSIsIkRhdGUiLCJnZXRUaW1lIiwidGltZVRvQ2FsbCIsIm1heCIsImlkIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiZSIsInZhbHVlIiwiY3JlYXRlRGVzYyIsIklPYmplY3QiLCJkZWZpbmVkIiwibG9hZCIsInVybCIsIl90aGlzIiwiY3Jvc3NPcmlnaW4iLCJjb3JzIiwic3Vic3RyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2JhYmVsX3J1bnRpbWVfY29yZV9qc19wcm9taXNlX19fZGVmYXVsdCIsInJlc29sdmUiLCJ0aGVuIiwiX3JlZiIsIl9yZWYyIiwiX3NsaWNlZFRvQXJyYXkiLCJvcmlnaW5hbFNyYyIsInNyYyIsIl9jcmVhdGVBbmRMb2FkSW1hZ2UiLCJyZWplY3QiLCJpbWFnZSIsIkltYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkVycm9yIiwibG9hZFhIUiIsIm1pbWUiLCJ4aHIiLCJYRG9tYWluUmVxdWVzdCIsIm92ZXJyaWRlTWltZVR5cGUiLCJvbmxvYWQiLCJvbmVycm9yIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvRXZlbnQiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwib3BlbiIsInNlbmQiLCJEcmFnZ2FibGVDb21wb25lbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX19wcm90b19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JhYmVsX3J1bnRpbWVfY29yZV9qc19vYmplY3RfZ2V0X3Byb3RvdHlwZV9vZl9fX2RlZmF1bHQiLCJjb25jYXQiLCJfYmluZEFsbCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9nbG9iYWxzX18iLCJfZ2V0IiwicmVmcyIsIl9lbGVtZW50IiwicHJvcHMiLCJkaXNhYmxlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiX2luaXRpYWxNb3VzZVBvc2l0aW9uIiwiZ2V0RXZlbnRQb3NpdGlvbiIsImRvY3VtZW50IiwiX29uRHJhZ01vdmUiLCJwYXNzaXZlIiwiX29uRHJhZ0VuZCIsImJvdW5kaW5nUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImVsZW1lbnRPZmZzZXQiLCJsZWZ0IiwidG9wIiwiX2xhc3RNb3VzZVBvc2l0aW9uIiwiY2xvbmUiLCJyZWxhdGl2ZVBvc2l0aW9uIiwic3VidHJhY3QiLCJvblN0YXJ0IiwibW91c2VQb3NpdGlvbiIsIm1vdXNlRGlmZiIsImxhc3RNb3VzZURpZmYiLCJvbkRyYWciLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25TdG9wIiwiX3RoaXMyIiwiY2hpbGRyZW4iLCJvbk1vdXNlRG93biIsIl9vbkRyYWdTdGFydCIsIm9uVG91Y2hTdGFydCIsInN0eWxlIiwidG91Y2hBY3Rpb24iLCJvbkNsaWNrIiwicmVmIiwib3JpZ2luYWxJbm5lclJlZiIsImlubmVyUmVmIiwiZWwiLCJjbG9uZUVsZW1lbnQiLCJjb250ZXh0VHlwZXMiLCJwcm9wVHlwZXMiLCJmdW5jIiwiYm9vbCIsImFGdW5jdGlvbiIsImZuIiwidGhhdCIsImV4ZWMiLCJnIiwiZXZhbCIsImJpdG1hcCIsIndyaXRhYmxlIiwidG9TdHJpbmciLCJzbGljZSIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJrZXlzIiwiJGF0IiwiU3RyaW5nIiwiaXRlcmF0ZWQiLCJfdCIsIl9pIiwicG9pbnQiLCJpbmRleCIsImRvbmUiLCJNb2RhbCIsInRpdGxlIiwidGV4dCIsIm92ZXJsYXkiLCJjbG9zZU9uT3ZlcmxheUNsaWNrIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JhYmVsX3J1bnRpbWVfY29yZV9qc19vYmplY3RfZ2V0X3Byb3RvdHlwZV9vZl9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfZ2xvYmFsc19fIiwiZ2V0VVVJRCIsInZpc2libGUiLCJkYXRhIiwiZW1pdCIsIk1vZGFsTWFuYWdlciIsIl9tb2RhbHMiLCJtb2RhbCIsImFkZE1vZGFsIiwicHJvZ3Jlc3MiLCJzZXREYXRhIiwiYnV0dG9ucyIsIl90aGlzMyIsInB1c2giLCJvbiIsInJlbW92ZU1vZGFsIiwiaW5kZXhPZiIsInNwbGljZSIsIl9pbnN0YW5jZSIsIk1vZGFsQ29tcG9uZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JhYmVsX3J1bnRpbWVfY29yZV9qc19vYmplY3RfZ2V0X3Byb3RvdHlwZV9vZl9fX2RlZmF1bHQiLCJfYnV0dG9ucyIsInN0YXRlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19nbG9iYWxzX18iLCJfZ2V0MiIsIl9sZW4yIiwiX2tleTIiLCJzZXRTdGF0ZSIsInJlbW92ZSIsImNvbnRleHQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJidXR0b25JbmRleCIsIm1hcCIsImJ1dHRvbiIsImNyZWF0ZUVsZW1lbnQiLCJCdXR0b24iLCJfb25CdXR0b25DbGljayIsInRvcFByb3BzIiwiQnV0dG9ucyIsIl9yZW5kZXJCdXR0b25zIiwiY29udGVudCIsIl9yZW5kZXJDb250ZW50IiwibGFyZ2UiLCJCbG9ja2luZ092ZXJsYXkiLCJfb25DbGlja092ZXJsYXkiLCJUb3AiLCJJY29uQ29udGFpbmVyIiwiSWNvbiIsIl9nZXRBc3NldFBhdGgiLCJUZXh0Q29udGFpbmVyIiwiVGl0bGUiLCJUZXh0IiwiZGl2IiwidHJhbnNmb3JtIiwidHJhbnNmb3JtT3JpZ2luIiwidHJhbnNpdGlvbiIsInBvc2l0aW9uIiwid2lkdGgiLCJiYWNrZ3JvdW5kIiwic2Vjb25kYXJ5Q29udHJvbHNCYWNrZ3JvdW5kQ29sb3JSR0IiLCJ6SW5kZXgiLCJib3hTaGFkb3ciLCJvcGFjaXR5IiwiYm9yZGVyUmFkaXVzIiwiZGlzcGxheSIsInRhYmxlTGF5b3V0IiwicGFkZGluZyIsImVycm9yIiwiYm9yZGVyQm90dG9tIiwibW9kYWxFcnJvckNvbG9yIiwid2FybmluZyIsIm1vZGFsV2FybmluZ0NvbG9yIiwibG9hZGluZyIsIm1vZGFsTG9hZGluZ0NvbG9yIiwidGV4dEFsaWduIiwidmVydGljYWxBbGlnbiIsImhlaWdodCIsInRleHRUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udEZhbWlseSIsInVwcGVyY2FzZVNlbWlCb2xkRm9udEZhbWlseSIsImNvbG9yIiwidGV4dENvbG9yIiwiY3Vyc29yIiwiOmhvdmVyIiwic2Vjb25kYXJ5Q29udHJvbHNCYWNrZ3JvdW5kQ29sb3IiLCJpbWciLCJkaW1tZWRUZXh0Q29sb3IiLCJmb250U2l6ZSIsInJlZ3VsYXJGb250RmFtaWx5IiwidGV4dE92ZXJmbG93Iiwib3ZlcmZsb3dYIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJweCIsInJhbmRvbSIsIlJFQUNUX0VMRU1FTlRfVFlQRSIsImZvciIsIiQkdHlwZW9mIiwiZGVmIiwiaGFzIiwiVEFHIiwidGFnIiwic3RhdCIsIkl0ZXJhdG9ycyIsIlRPX1NUUklOR19UQUciLCJET01JdGVyYWJsZXMiLCJzcGxpdCIsIk5BTUUiLCJDb2xsZWN0aW9uIiwicHJvdG8iLCJkZWZhdWx0TGV2ZWxzIiwiaGFzQ29uc29sZUdyb3VwcyIsImNvbnNvbGUiLCJncm91cCIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJMb2ciLCJMb2dnZXIiLCJtYXhMZXZlbCIsImxldmVscyIsIl9sZXZlbHMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfbWF4TGV2ZWwiLCJnZXRMZXZlbEluZGV4QnlOYW1lIiwiX2NvbnNvbGVGdW5jcyIsInRyYWNlIiwiX2NvbnNvbGUiLCJfY29uc29sZTIiLCJmb3JFYWNoIiwiX2xvZyIsImxldmVsTmFtZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fc2RrX2NvcmVfbGliX3V0aWxzX18iLCJmaW5kSW5kZXgiLCJmaW5kIiwibGV2ZWwiLCJnZXRMZXZlbE9iamVjdEJ5TmFtZSIsImNhbkxvZyIsIl9jb25zb2xlNSIsIm91dHB1dHMiLCJmaWx0ZXIiLCJhcmciLCJ0b09iamVjdCIsIkpTT04iLCJwYXJzZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9iYWJlbF9ydW50aW1lX2NvcmVfanNfanNvbl9zdHJpbmdpZnlfX19kZWZhdWx0IiwiY29uc29sZUZ1bmMiLCJfY29uc29sZTMiLCJfY29uc29sZTQiLCJsb2ciLCJvdXRwdXRzTGVuIiwic3R5bGVzIiwiZ2V0TG9nU3R5bGVzIiwicHJvY2VzcyIsImJyb3dzZXIiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtYXRjaCIsImluaXQiLCJmbG9vciIsIkhUTUxDYW52YXNFbGVtZW50IiwidG9EYXRhVVJMIiwidGV4dHVyZSIsImJhc2VUZXh0dXJlIiwiZ2V0QmFzZVRleHR1cmUiLCJyZW5kZXJlcnMiLCJnZXRSZW5kZXJlcnMiLCJnbFJlbmRlcmVyIiwiciIsImNvbnN0cnVjdG9yIiwiX2Jhc2VUZXh0dXJlJGdldEZyYW1lIiwiZ2V0RnJhbWUiLCJnbCIsImdldENvbnRleHQiLCJnbFRleHR1cmUiLCJnZXRHTFRleHR1cmVGb3JSZW5kZXJlciIsImxvZ0dsVGV4dHVyZSIsImdldFNvdXJjZSIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsImZyYW1lYnVmZmVyIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJVaW50OEFycmF5IiwicmVhZFBpeGVscyIsIlJHQkEiLCJVTlNJR05FRF9CWVRFIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJjYW52YXMiLCJpbWFnZURhdGEiLCJjcmVhdGVJbWFnZURhdGEiLCJzZXQiLCJwdXRJbWFnZURhdGEiLCJKU09OTG9hZGVyIiwiX3VybCIsIl9wYXJzZWRVcmwiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfdXJsX19fZGVmYXVsdCIsInF1ZXJ5IiwiX2lzSlNPTlBSZXF1ZXN0IiwiX2xvYWRKU09OUCIsIl9sb2FkSlNPTiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fdmVuZG9yX3Byb21pc2VfXyIsImpzb24iLCJyZXNwb25zZVRleHQiLCJmYWlsZWQiLCJzdWNjZWVkZWQiLCJmbk5hbWUiLCJyb3VuZCIsIm5vZGUiLCJfY3JlYXRlSlNPTlBOb2RlIiwicmVzdWx0IiwiX3JlbW92ZUpTT05QTm9kZSIsIkpTT05QVXJsIiwiX2J1aWxkSlNPTlBVcmwiLCJoZWFkTm9kZSIsInF1ZXJ5U2VsZWN0b3IiLCJzY3JpcHROb2RlIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJwYXJhbWV0ZXIiLCJwYXJhbSIsInNlYXJjaCIsImZvcm1hdCIsIlRyYW5zaXRpb24iLCJfdGltZW91dCIsImVudGVyIiwiYXBwZWFyIiwibGVhdmUiLCJhY3RpdmUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfcmVhY3RfXyIsIm5leHRQcm9wcyIsIl9sZWF2ZSIsIl9lbnRlciIsIl9hcHBlYXIiLCJfY2FuY2VsVGltZW91dCIsImxlYXZlRHVyYXRpb24iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX3NoYXJlZF9hc3luY19hbmltYXRpb25fZnJhbWVfanNfXyIsImFwcGVhckR1cmF0aW9uIiwiX3Byb3BzIiwiZW50ZXJQcm9wIiwiYXBwZWFyUHJvcCIsImxlYXZlUHJvcCIsInN0YXRlUHJvcHMiLCJfYnVpbGRTdGF0ZVByb3BzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X3JlYWN0X19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9wcm9wX3R5cGVzX19fZGVmYXVsdCIsInN0cmluZyIsImVudGVyRHVyYXRpb24iLCJudW1iZXIiLCJkZWZhdWx0UHJvcHMiLCJTdGlja2VyTWFuYWdlciIsInVpIiwib3B0aW9ucyIsIl91aSIsIl9vcHRpb25zIiwiX2NhdGVnb3JpZXNCeUlkIiwiX2NhdGVnb3JpZXMiLCJfc3RpY2tlcnNCeUlkIiwiX2FkZENhdGVnb3JpZXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfc2hhcmVkX2NvbnN0YW50c19fIiwiREVGQVVMVFMiLCJTVElDS0VSX0NBVEVHT1JJRVMiLCJjYXRlZ29yaWVzIiwicmVwbGFjZUNhdGVnb3JpZXMiLCJfdXBkYXRlQ2F0ZWdvcmllc01hcCIsIl91cGRhdGVBbGxDYXRlZ29yeSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19zaGFyZWRfbG9hZGVyc19qc29uX2xvYWRlcl9fIiwicmVwbGFjZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9nbG9iYWxzX18iLCJtZXJnZUNhdGVnb3JpZXMiLCJpZGVudGlmaWVyIiwic3RpY2tlcnMiLCJhdmFpbGFibGVTdGlja2VycyIsImNhdGVnb3J5Iiwic3RpY2tlciIsIl9hbGxDYXRlZ29yeSIsImRlZmF1bHROYW1lIiwicmVkdWNlIiwiYWxsIiwiY2F0ZWdvcnlOYW1lIiwic2l6ZSIsImltYWdlcyIsIm1lZGlhIiwibWVkaWFCYXNlIiwibWVkaWFUaHVtYiIsInVyaXMiLCJ1cmkiLCJCcm93c2VyIiwiZ2V0SUVWZXJzaW9uIiwibm90U3ZncyIsInRlc3QiLCJzdmdzIiwiRm9udE1hbmFnZXIiLCJfZm9udHMiLCJfdmFyaWF0aW9uc0J5SWRlbnRpZmllciIsIl9mb250c0J5Rm9udEZhbWlseSIsIl9pbml0Rm9udHMiLCJhZGRpdGlvbmFsRm9udHMiLCJmb250cyIsInJlcGxhY2VGb250cyIsImF2YWlsYWJsZVZhcmlhdGlvbnMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfZ2xvYmFsc19fIiwiRk9OVFMiLCJkZWZhdWx0VmFyaWF0aW9uIiwiZm9udCIsInZhcmlhdGlvbnMiLCJ2YXJpYXRpb24iLCJmb250SW5zdGFuY2UiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2Fzc2V0c19mb250X18iLCJ2YXJpYXRpb25JbnN0YW5jZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fYXNzZXRzX2ZvbnRfdmFyaWF0aW9uX18iLCJzZXRGb250RmFtaWx5Iiwic2V0Rm9udCIsImdldFRleHRNZXRyaWNzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19sb2dfXyIsIndhcm4iLCJnZXRJZGVudGlmaWVyIiwic2V0VmFyaWF0aW9ucyIsImdldFZhcmlhdGlvbnMiLCJfZGVmYXVsdFZhcmlhdGlvbiIsIl9leHRlbmRzIiwiU2hhcmVkU3RhdGVDb21wb25lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfZ2xvYmFsc19fIiwic2hhcmVkU3RhdGUiLCJfb25TaGFyZWRTdGF0ZVVwZGF0ZSIsIm9mZiIsIm9sZFN0YXRlIiwibmV3U3RhdGUiLCJzaG91bGRTaGFyZWRDb21wb25lbnRVcGRhdGUiLCJzaGFyZWRDb21wb25lbnRXaWxsVXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJzaGFyZWRTdGF0ZURpZENoYW5nZSIsInVwZGF0ZSIsInByb3AiLCJicm9hZGNhc3RVcGRhdGUiLCJlZGl0b3IiLCJtZWRpYXRvciIsInNjcmVlbiIsImFwcENvbXBvbmVudCIsImdsb2JhbFN0YXRlIiwiYW55IiwiTnVtZXJpY0lucHV0Q29tcG9uZW50IiwibmV4dFN0YXRlIiwib25MaXZlQ2hhbmdlIiwib25DaGFuZ2UiLCJldmVudCIsImtleUNvZGUiLCJfaW5wdXQiLCJibHVyIiwib25LZXlEb3duIiwiZm9jdXMiLCJSb290RWxlbWVudCIsIl9vbklucHV0Q2hhbmdlIiwib25CbHVyIiwiX29uSW5wdXRCbHVyIiwiX29uS2V5RG93biIsImNsYXNzTmFtZSIsIl9nZXRJbnB1dFN0eWxlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19zdHlsZXNfXyIsImlucHV0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X3Bob3RvZWRpdG9yc2RrX18iLCJTcHJpdGVzQ2FudmFzQ29udHJvbHNDb21wb25lbnQiLCJfdGhpcyRfZXZlbnRzIiwiX2V2ZW50cyIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19waG90b2VkaXRvcnNka19kZXNrdG9wX3VpX2NvcmVfXyIsIkVWRU5UUyIsIlpPT01fRE9ORSIsIl9vblpvb21Eb25lIiwiV0lORE9XX1JFU0laRSIsIl9vbldpbmRvd1Jlc2l6ZSIsIkhJU1RPUllfVU5ETyIsIl9vbkhpc3RvcnlDaGFuZ2UiLCJISVNUT1JZX1JFRE8iLCJleHRlbmQiLCJjYW52YXNDbGlja0Rpc2FibGVkIiwic3ByaXRlIiwiZ2V0SWQiLCJjb250cm9scyIsImFkZExvY2FsSGlzdG9yeVNuYXBzaG90Iiwib3BlcmF0aW9uIiwiZ2V0U2hhcmVkU3RhdGUiLCJzZWxlY3RlZFNwcml0ZSIsImdldFNwcml0ZXMiLCJfc2VsZWN0TmV4dFNwcml0ZSIsIm9uY2UiLCJyZW5kZXIiLCJfcGVyZm9ybUhpdFRlc3QiLCJfb25JdGVtQmx1ciIsInN3aXRjaFRvQ29udHJvbHMiLCJyZW1vdmVTcHJpdGUiLCJkaXNwb3NlIiwidGFrZVNwcml0ZVRvRnJvbnQiLCJzZXRGbGlwSG9yaXpvbnRhbGx5IiwiZ2V0RmxpcEhvcml6b250YWxseSIsInNlcmlhbGl6ZU9wdGlvbnMiLCJoYXNPcHRpb24iLCJnZXRJbWFnZSIsImlucHV0RGltZW5zaW9ucyIsImdldElucHV0RGltZW5zaW9ucyIsImFkZCIsImRpdmlkZSIsIm5ld1Nwcml0ZSIsIl9jcmVhdGVTcHJpdGUiLCJzZXRTaGFyZWRTdGF0ZSIsImFkZFNwcml0ZSIsInNwcml0ZXMiLCJuZXh0U3ByaXRlIiwic2tpcEhpc3RvcnkiLCJTcHJpdGVPcGVyYXRpb24iLCJTdGlja2VyU3ByaXRlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19zcHJpdGVzX3N0aWNrZXJfaXRlbV9jb21wb25lbnRfXyIsIlRleHRTcHJpdGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfX3Nwcml0ZXNfdGV4dF9pdGVtX2NvbXBvbmVudF9fIiwiQnJ1c2hTcHJpdGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX19zcHJpdGVzX2JydXNoX2l0ZW1fY29tcG9uZW50X18iLCJUZXh0RGVzaWduU3ByaXRlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fc3ByaXRlc190ZXh0X2Rlc2lnbl9pdGVtX2NvbXBvbmVudF9fIiwiU3ByaXRlQ29tcG9uZW50IiwiX2dldENvbXBvbmVudFR5cGVGb3JTcHJpdGUiLCJzcHJpdGVQcm9wcyIsIl9nZXRQcm9wc0ZvclNwcml0ZSIsInNlbGVjdGVkIiwiX29uQ2FudmFzQ2xpY2siLCJvbkFmdGVyQ2hhbmdlIiwiX29uQWZ0ZXJUcmFuc2Zvcm0iLCJvbkNhbnZhc0NsaWNrRGlzYWJsZWQiLCJfb25DYW52YXNDbGlja0Rpc2FibGVkIiwib25DYW52YXNDbGlja0VuYWJsZWQiLCJfb25DYW52YXNDbGlja0VuYWJsZWQiLCJvbkRlbGV0ZSIsIl9vblNwcml0ZURlbGV0ZSIsIm9uVGFrZVRvRnJvbnQiLCJfb25TcHJpdGVUYWtlVG9Gcm9udCIsIm9uRmxpcEhvcml6b250YWxseSIsIl9vblNwcml0ZUZsaXBIb3Jpem9udGFsbHkiLCJvbkR1cGxpY2F0ZSIsIl9vblNwcml0ZUR1cGxpY2F0ZSIsInNuYXBSb3RhdGlvbiIsInNuYXBSb3RhdGlvblRvbGVyYW5jZSIsImNhbnZhc0NvbnRyb2xzIiwiX3RoaXM0IiwiY29udGFpbmVyU3R5bGUiLCJfY29udGFpbmVyIiwiX2dldENvbnRhaW5lclN0eWxlIiwiQ2FudmFzQ29udHJvbHMiLCJDb250YWluZXIiLCJfaW5uZXJDb250YWluZXIiLCJDbGlja0hhbmRsZXJGb3JJbnRlcm5ldEV4cGxvcmVyIiwiX3JlbmRlclNwcml0ZUl0ZW1zIiwiX3JlbmRlck92ZXJsYXlDb250cm9scyIsIm92ZXJmbG93IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X3Bob3RvZWRpdG9yc2RrX18iLCJJdGVtQ29tcG9uZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X3Bob3RvZWRpdG9yc2RrX2Rlc2t0b3BfdWlfY29yZV9fIiwiX29uU3ByaXRlVXBkYXRlIiwic2NhbGUiLCJfaW1hZ2VCb3VuZGluZ0JveCIsImdldEltYWdlQm91bmRpbmdSZWN0IiwiX2NvbnRhaW5lck9mZnNldCIsImdldENvbnRhaW5lck9mZnNldCIsIm9uQmVmb3JlQ2hhbmdlIiwiZGlzdGFuY2UiLCJzcHJpdGVQaXZvdFBvc2l0aW9uIiwiX2dldEFic29sdXRlU3ByaXRlUG9zaXRpb24iLCJ5IiwibW91c2VEaXN0YW5jZUZyb21QaXZvdCIsInJhZGlhbnMiLCJhdGFuMiIsIlBJIiwiZGVncmVlcyIsIm5leHRTbmFwIiwicmVtYWluZGVyIiwiYWJzIiwic2V0Um90YXRpb24iLCJ2ZXJ0aWNhbFNpZGUiLCJob3Jpem9udGFsU2lkZSIsImFic29sdXRlUG9zaXRpb24iLCJnZXREaW1lbnNpb25zIiwiZ2V0U0RLIiwiZ2V0T3V0cHV0RGltZW5zaW9ucyIsInBpdm90IiwiZ2V0UGl2b3QiLCJhbmNob3IiLCJnZXRBbmNob3IiLCJzcHJpdGVQb3NpdGlvbiIsInNwcml0ZUJvdW5kaW5nQm94Iiwic3ByaXRlRGltZW5zaW9ucyIsIm11bHRpcGx5IiwiX2luaXRpYWxTY2FsZVNldHRpbmdzIiwiX29uQmVmb3JlU2NhbGUiLCJ0ZXh0Um90YXRpb24iLCJnZXRSb3RhdGlvbiIsIm5ld01vdXNlRGlzdGFuY2VGcm9tUGl2b3QiLCJjb3MiLCJzaW4iLCJuZXdTY2FsZSIsIk1JTl9XSURUSCIsIl9vblNjYWxlIiwiX2luaXRpYWxQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwib3V0cHV0RGltZW5zaW9ucyIsIm5ld1Bvc2l0aW9uIiwiX2RyYWdFbmRQb3NpdGlvbiIsInNldFBvc2l0aW9uIiwibGVuIiwia25vYnMiLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJrbm9iUHJvcHMiLCJfb25Db3JuZXJEcmFnU3RhcnQiLCJfb25Db3JuZXJEcmFnIiwiX29uQ29ybmVyRHJhZ1N0b3AiLCJDb3JuZXJLbm9iIiwiX2dldFNwcml0ZURpbWVuc2lvbnMiLCJyb3RhdGlvbiIsInNpblJvdGF0aW9uIiwiY29zUm90YXRpb24iLCJib3VuZHMiLCJjbGFtcCIsInRha2VUb0Zyb250IiwiZmxpcEhvcml6b250YWxseSIsImR1cGxpY2F0ZSIsImRlbGV0ZSIsIl9nZXRPdmVybGF5UG9zaXRpb24iLCJfb25UYWtlVG9Gcm9udCIsIl9vbkZsaXBIb3Jpem9udGFsbHkiLCJfb25EdXBsaWNhdGUiLCJfb25EZWxldGUiLCJfcHJvcHMyIiwiZWRpdGluZyIsImNvbnRyb2xzQXNPdmVybGF5IiwiY29udHJvbHNDb250ZW50IiwiX3JlbmRlcktub2JzIiwiUm90YXRlQ29udHJvbCIsIl9vblJvdGF0ZURyYWdTdGFydCIsIl9vblJvdGF0ZURyYWciLCJfb25Sb3RhdGVEcmFnU3RvcCIsIlJvdGF0ZUtub2IiLCJpdGVtQ29udHJvbHNQcm9wcyIsIl9nZXRJdGVtQ29udHJvbHNQcm9wcyIsIml0ZW1Db250cm9scyIsIkl0ZW1Db250cm9scyIsIl9vbkRyYWdTdG9wIiwiX29uRHJhZyIsIl9pc0RyYWdnaW5nRGlzYWJsZWQiLCJPdXRlckNvbnRhaW5lciIsImRhdGEtdHlwZSIsImRhdGEtc2VsZWN0ZWQiLCJDb250ZW50IiwiYm94U2l6aW5nIiwiYm9yZGVyIiwiY29udHJvbHNPdXRsaW5lQ29sb3IiLCJib3R0b20iLCJtYXJnaW5MZWZ0IiwiYmFja2dyb3VuZENvbG9yIiwiS25vYiIsIjpiZWZvcmUiLCJtYXJnaW5Ub3AiLCJkZWZhdWx0U2hhZG93IiwidG9wLWxlZnQiLCJ0b3AtcmlnaHQiLCJtYXJnaW5SaWdodCIsInJpZ2h0IiwiYm90dG9tLWxlZnQiLCJtYXJnaW5Cb3R0b20iLCJib3R0b20tcmlnaHQiLCJpcyIsInZhbCIsInZhbHVlT2YiLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImNvbnRlbnRXaW5kb3ciLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJjcmVhdGUiLCJQcm9wZXJ0aWVzIiwidG9JbnRlZ2VyIiwibWluIiwiY2VpbCIsImlzTmFOIiwic2hhcmVkIiwiZmFpbHMiLCJLRVkiLCJleHAiLCJjb2YiLCJBUkciLCJUIiwidHJ5R2V0IiwiY2FsbGVlIiwiY2xhc3NvZiIsIklURVJBVE9SIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJsaXN0ZW5lciIsIm5leHRUaWNrIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsImNsZWFyIiwicHJvbWlzZSIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiTElCUkFSWSIsIndrc0V4dCIsIiRTeW1ib2wiLCJjaGFyQXQiLCJGb250TG9hZGVyIiwiX2xvYWRlZEZvbnRzIiwiX2xvb3AiLCJwcm92aWRlciIsImdldFByb3ZpZGVyIiwidiIsIl9yZXQiLCJfdHlwZW9mIiwiZ2V0Rm9udEZhbWlseSIsImZvbnRMb2FkZWQiLCJsb2FkZXJzIiwiZ29vZ2xlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19sb2FkZXJzX2dvb2dsZV9mb250X2xvYWRlcl9fIiwiZmlsZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fbG9hZGVyc19maWxlX2ZvbnRfbG9hZGVyX18iLCJkaXNwb3NlTG9hZGVycyIsInByb21pc2VzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JhYmVsX3J1bnRpbWVfY29yZV9qc19wcm9taXNlX19fZGVmYXVsdCIsInNldEZvbnRMb2FkZWQiLCJjYXRjaCIsInYyMDBTZXJpYWxpemVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18xXzBfMV9zZXJpYWxpemVyX18iLCJyZXNwb25zZSIsImdldFRpbnRNb2RlIiwidGludENvbG9yIiwic2VyaWFsaXplT3B0aW9uIiwiZGltZW5zaW9ucyIsInBhdGgiLCJicnVzaCIsImdldEJydXNoIiwiaGFyZG5lc3MiLCJnZXRPcHRpb24iLCJvcGVyYXRpb25zIiwiX3NlcmlhbGl6ZUZyYW1lT3BlcmF0aW9uIiwiX3NlcmlhbGl6ZU92ZXJsYXlPcGVyYXRpb24iLCJzcHJpdGVPcGVyYXRpb25zIiwic3ByaXRlT3BlcmF0aW9uIiwicG9wIiwiX2dldEZyYW1lT3B0aW9ucyIsImludGVuc2l0eSIsImdldEFscGhhIiwiYmxlbmRNb2RlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19ibGVuZF9tb2Rlc19fIiwiZ2V0QmxlbmRNb2RlIiwiZmxpcFZlcnRpY2FsbHkiLCJfZWRpdG9yIiwiZXhpc3RzIiwib3JpZW50YXRpb25PcGVyYXRpb24iLCJyb3RhdGUiLCJnZXRGbGlwVmVydGljYWxseSIsImZsaXAiLCJmb250SWRlbnRpZmllciIsImdldEZvbnRJZGVudGlmaWVyIiwibWF4V2lkdGgiLCJmb2N1c09wdGlvbnMiLCJzdGFydCIsImVuZCIsInJhZGl1cyIsImJsZW5kTW9kZUJ5TmFtZSIsImZsaXBPYmplY3QiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X19ibGVuZF9tb2Rlc19fIiwidjIwMERlc2VyaWFsaXplciIsIl9mcmFtZU1hbmFnZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfc2hhcmVkX21hbmFnZXJzX2ZyYW1lX21hbmFnZXJfXyIsIl9nZXRPcHRpb25zIiwib3ZlcmxheU9wdGlvbnMiLCJfb3ZlcmxheU1hbmFnZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfc2hhcmVkX21hbmFnZXJzX292ZXJsYXlfbWFuYWdlcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18xXzBfMV9kZXNlcmlhbGl6ZXJfXyIsIl9kZXNlcmlhbGl6ZUZyYW1lIiwiX2Rlc2VyaWFsaXplT3ZlcmxheSIsIl9kZXNlcmlhbGl6ZVRyYW5zZm9ybU9wZXJhdGlvbiIsIm9wZXJhdGlvbkRhdGEiLCJvcmllbnRhdGlvbkRhdGEiLCJfZGF0YSIsIm9wIiwiZnJhbWUiLCJmcmFtZURhdGEiLCJnZXRGcmFtZUJ5SWRlbnRpZmllciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9iYWJlbF9ydW50aW1lX2NvcmVfanNfcHJvbWlzZV9fX2RlZmF1bHQiLCJmcmFtZUluc3RhbmNlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9saWJfZnJhbWVfXyIsImdldE9yQ3JlYXRlIiwiX292ZXJsYXkkb3B0aW9ucyIsIm92ZXJsYXlEYXRhIiwiZ2V0T3ZlcmxheUJ5SWRlbnRpZmllciIsIm92ZXJsYXlQYXRoIiwiZ2V0VUkiLCJnZXRBc3NldFBhdGgiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX3NoYXJlZF9sb2FkZXJzX2ltYWdlX2xvYWRlcl9fIiwiYWxwaGEiLCJwYXJzZUludCIsInNldEhhcmRuZXNzIiwiX3RoaXM1IiwiT3BlcmF0aW9ucyIsIl9zdGlja2VyTWFuYWdlciIsImdldFN0aWNrZXJCeUlkZW50aWZpZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX3NoYXJlZF9tYW5hZ2Vyc19zdGlja2VyX21hbmFnZXJfXyIsImdldFVSTEZvclN0aWNrZXIiLCJhZGp1c3RtZW50cyIsImF2YWlsYWJsZU9wdGlvbnMiLCJzdHJ1Y3R1cmUiLCJzdGlja2VyT3B0aW9ucyIsImZyb21PYmplY3QiLCJvcHRpb24iLCJ0aW50TW9kZSIsImZyb21BcnJheSIsImNyZWF0ZVN0aWNrZXIiLCJnZXRDcm9zc09yaWdpbiIsIl90aGlzNiIsIl9maWx0ZXJNYW5hZ2VyIiwiZ2V0RmlsdGVyQnlJZGVudGlmaWVyIiwiaW5zdGFudGlhdGVGaWx0ZXJXaXRoSWRlbnRpZmllciIsImZpbHRlck9wZXJhdGlvbiIsIl9vcGVyYXRpb24kb3B0aW9ucyIsImdyYWRpZW50UmFkaXVzIiwiYmx1clJhZGl1cyIsImxpbmVIZWlnaHQiLCJhbGlnbm1lbnQiLCJmb250TG9hZGVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9saWJfZm9udF9sb2FkZXJfXyIsIl9mb250TWFuYWdlciIsImdldFZhcmlhdGlvbkJ5SWRlbnRpZmllciIsInNldEZvbnRzIiwiZ2V0Rm9udCIsImdldERlZmF1bHRGb250IiwiZml4ZWRNYXhXaWR0aCIsImNyZWF0ZVRleHQiLCJmb250V2VpZ2h0IiwiZ2V0Rm9udFdlaWdodCIsIlRleHREZXNpZ25NYW5hZ2VyIiwiX2RlZmF1bHRMYXlvdXRzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2dsb2JhbHNfXyIsIkxheW91dHMiLCJfbGF5b3V0cyIsIl9pbml0IiwiYXZhaWxhYmxlTGF5b3V0cyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9iYWJlbF9ydW50aW1lX2NvcmVfanNfb2JqZWN0X2tleXNfX19kZWZhdWx0IiwiayIsImxheW91dCIsIml0ZW0iLCJDYW52YXNDb250cm9sc0NvbXBvbmVudCIsIl9uZWVkc1N0eWxlRml4ZXMiLCJfaW5pdGlhbFJlcmVuZGVyIiwiWk9PTSIsIl9vblpvb20iLCJkaXNwbGF5SGVhZGVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19zaGFyZWRfc3RhdGVfY29tcG9uZW50X18iLCJzaGFyZWRTdGF0ZVVwZGF0ZSIsInVwZGF0ZVNoYXJlZFN0YXRlIiwiaXNJRWx0ZSIsIm91dGVyQ29udGFpbmVySGVpZ2h0IiwiX291dGVyQ29udGFpbmVyIiwib2Zmc2V0SGVpZ2h0IiwiY2xpY2tQb3NpdGlvbiIsImNvbnRhaW5lckJvdW5kaW5nUmVjdCIsImdldEJvdW5kcyIsInJlbGF0aXZlQ2xpY2tQb3NpdGlvbiIsImdldEF2YWlsYWJsZSIsImNsaWNrUmVzcG9uc2UiLCJjbGlja0F0UG9zaXRpb24iLCJfZ2V0VG9wU3ByaXRlQXRQb3NpdGlvbiIsImNvbnRyb2wiLCJnZXRTcHJpdGVzQXRQb3NpdGlvbiIsImdldE91dHB1dFRleHR1cmVEaW1lbnNpb25zIiwiX2luaXRpYWxPZmZzZXQiLCJvZmZzZXQiLCJkcmFnT2Zmc2V0IiwiY29weSIsInNkayIsImNvbnRhaW5lciIsImdldENvbnRhaW5lciIsImdldFNwcml0ZSIsImdldFRleHR1cmUiLCJnZXRUZXh0dXJlU2NhbGUiLCJpbWFnZURpbWVuc2lvbnMiLCJvdXRlckNvbnRhaW5lckJvdW5kcyIsImVkaXRvckJvdW5kcyIsInJlY3QiLCJfaW1hZ2VDb250YWluZXIiLCJkcmFnZ2FibGUiLCJpc1NoYWxsb3ciLCJpc0RyYWdnYWJsZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9jb21wb25lbnRzX2RyYWdnYWJsZV9jb21wb25lbnRfXyIsIl9vbkNhbnZhc0RyYWdTdGFydCIsIl9vbkNhbnZhc0RyYWciLCJfb25DYW52YXNEcmFnU3RvcCIsIkNhbnZhc0NvbnRyb2xzQ29udGFpbmVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19jYW52YXNfaGVhZGVyX2NvbnRyb2xzX2NvbXBvbmVudF9fIiwiX3JlbmRlckNvbnRyb2xzIiwiU2Nyb2xsYmFyQ29tcG9uZW50IiwiTkFUSVZFX1NDUk9MTEJBUl9XSURUSCIsImdldFNjcm9sbGJhcldpZHRoIiwiX2lzRHJhZ2dpbmciLCJidXR0b25TaXplIiwiYnV0dG9uUG9zaXRpb24iLCJidXR0b25WaXNpYmxlIiwiZGlyZWN0aW9uIiwiX2dldERpcmVjdGlvbiIsImxpc3RTY3JvbGxTaXplIiwibGlzdFNjcm9sbFBvc2l0aW9uIiwiYmFja2dyb3VuZFNjcm9sbFNpemUiLCJIT1JJWk9OVEFMIiwiX2xpc3QiLCJzY3JvbGxXaWR0aCIsIm9mZnNldFdpZHRoIiwic2Nyb2xsTGVmdCIsIl9yb290IiwiVkVSVElDQUwiLCJzY3JvbGxIZWlnaHQiLCJzY3JvbGxUb3AiLCJvblNjcm9sbCIsIl9pbml0aWFsQnV0dG9uUG9zaXRpb24iLCJkaWZmIiwiX3NldEJ1dHRvblBvc2l0aW9uIiwiX29uQmFyRHJhZyIsIl9vbkJhckRyYWdTdG9wIiwic2Nyb2xsYWJsZUJ1dHRvblNpemUiLCJzY3JvbGxhYmxlTGlzdFNpemUiLCJzY3JvbGxQb3NpdGlvbiIsImNiIiwicGFyZW50U2l6ZSIsInBhcmVudFNjcm9sbFNpemUiLCJjbGllbnRXaWR0aCIsImZ1bGxEaW1lbnNpb25zIiwiX2dldEZ1bGxMaXN0RGltZW5zaW9ucyIsIl9saXN0U2l6ZSIsImlzTW9iaWxlIiwiY29udGFpbmVySGVpZ2h0IiwiX3VwZGF0ZUJ1dHRvblNpemUiLCJfdXBkYXRlTGlzdFNpemUiLCJuZXdMaXN0U2l6ZSIsIl9vbkxpc3RTY3JvbGwiLCJwaXhlbHNMZWZ0VG9TY3JvbGwiLCJsaXN0IiwiYnV0dG9uU3R5bGUiLCJfZ2V0QnV0dG9uU3R5bGUiLCJjaGlsZCIsIl9yZW5kZXJDaGlsZCIsImdyYWRpZW50T3BhY2l0eSIsIl9nZXRHcmFkaWVudE9wYWNpdHkiLCJTY3JvbGxiYXJDb250YWluZXIiLCJub0dyYWRpZW50IiwiR3JhZGllbnQiLCJTY3JvbGxiYXIiLCJfb25CYXJEcmFnU3RhcnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX2RyYWdnYWJsZV9jb21wb25lbnRfXyIsIl9vbkJ1dHRvbkRyYWdTdGFydCIsIl9vbkJ1dHRvbkRyYWciLCJfb25CdXR0b25EcmFnU3RvcCIsIlNjcm9sbGJhckJ1dHRvbiIsIl9vbkJ1dHRvbkRvd24iLCJwb2ludGVyRXZlbnRzIiwic2Nyb2xsYmFyR3JhZGllbnRTaXplIiwiYmFja2dyb3VuZEltYWdlIiwiSW5wdXQiLCJjc3MiLCJtaW5XaWR0aCIsInBhZGRpbmdCb3R0b20iLCI6Zm9jdXMiLCJvdXRsaW5lIiwiVmFsdWVTZWxlY3Rpb25Db21wb25lbnQiLCJwYXJzZUZsb2F0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JhYmVsX3J1bnRpbWVfY29yZV9qc19udW1iZXJfaXNfbmFuX19fZGVmYXVsdCIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJ0b0ZpeGVkIiwib25WYWx1ZUNoYW5nZSIsIklucHV0RmllbGQiLCJfb25JbnB1dExpdmVDaGFuZ2UiLCJsYWJlbCIsImlucHV0TGFiZWwiLCJoYXNMZWZ0UGFydCIsIl9yZW5kZXJMZWZ0UGFydCIsIlZhbHVlU2VsZWN0aW9uIiwiUm93IiwiQ29sdW1uIiwiX3JlbmRlclJpZ2h0UGFydCIsInBhZGRpbmdSaWdodCIsIjpsYXN0LWNoaWxkIiwiYm90dG9tQWxpZ25lZCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19jb21wb25lbnRzX3NoYXJlZF9mb3Jtc19udW1lcmljX2lucHV0X2NvbXBvbmVudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2dsb2JhbHNfXyIsIkNpcmNsZVNsaWRlciIsIkNpcmNsZVNsaWRlckJhY2tncm91bmQiLCJDaXJjbGVTbGlkZXJLbm9iIiwic2xpZGVyQ2lyY2xlS25vYkNvbG9yIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Bob3RvZWRpdG9yc2RrX18iLCJPdmVybGF5RmlsdGVyIiwiRmlsdGVycyIsIm5vcm1hbCIsIkJMRU5EX01PREVTIiwiTk9STUFMIiwiT1ZFUkxBWSIsImhhcmRMaWdodCIsIkhBUkRfTElHSFQiLCJzb2Z0TGlnaHQiLCJTT0ZUX0xJR0hUIiwiTVVMVElQTFkiLCJkYXJrZW4iLCJEQVJLRU4iLCJsaWdodGVuIiwiTElHSFRFTiIsIlNDUkVFTiIsImNvbG9yQnVybiIsIkNPTE9SX0JVUk4iLCJhcnJheUluZGV4T2YiLCJuYW1lcyIsImRvY3VtZW50RWxlbWVudCIsIk9iamVjdFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwidmFsaWRhdGVGb3JtYXQiLCJjb25kaXRpb24iLCJhcmdJbmRleCIsImZyYW1lc1RvUG9wIiwibWVzc2FnZSIsIkRlZmF1bHRUaGVtZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZGFya190aGVtZV9fX2RlZmF1bHQiLCJCYXNlQ29tcG9uZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X3JlYWN0X19fZGVmYXVsdCIsIkNvbXBvbmVudCIsIl9iaW5kRXZlbnRzIiwiZml4U3R5bGVzIiwicmVzcG9uc2l2ZSIsIl91bmJpbmRFdmVudHMiLCJmbk5hbWVzIiwiaW50ZXJwb2xhdGlvbk9wdGlvbnMiLCJ0cmFuc2xhdGUiLCJfY29udGV4dCR1aSIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJfY29udGV4dCRtZWRpYXRvciIsIl9sZW4zIiwiX2tleTMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfcHJvcF90eXBlc19fX2RlZmF1bHQiLCJyZWRlZmluZSIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJCVUdHWSIsInJldHVyblRoaXMiLCJCYXNlIiwiQ29uc3RydWN0b3IiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsImtpbmQiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImVudHJpZXMiLCJ2YWx1ZXMiLCJpdGVyYXRvciIsInJldCIsIkFycmF5UHJvdG8iLCJTUEVDSUVTIiwiRCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsImZyb20iLCJza2lwQ2xvc2luZyIsInNhZmUiLCJhcnIiLCJpdGVyIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkZJTFRFUlMiLCJmaWx0ZXJzIiwibHV0SW1hZ2UiLCJyZXNvbHV0aW9uIiwiaG9yaXpvbnRhbFRpbGVDb3VudCIsInZlcnRpY2FsVGlsZUNvdW50IiwiT1ZFUkxBWVMiLCJ0aHVtYm5haWwiLCJGUkFNRV9DQVRFR09SSUVTIiwibWV0YURhdGEiLCJmcmFtZXMiLCJsYXlvdXRNb2RlIiwiaW1hZ2VHcm91cHMiLCJtaWQiLCJtb2RlIiwidGludGFibGUiLCJnZXROYW5vU2Vjb25kcyIsImhydGltZSIsImxvYWRUaW1lIiwiaHIiLCJFZGl0b3IiLCJzaGFsbG93IiwiX21lZGlhdG9yIiwiX3JlYWR5IiwiX3BhZGRpbmciLCJfb2Zmc2V0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19nbG9iYWxzX18iLCJfc2hhbGxvdyIsIl9pbml0U0RLIiwiX29uVW5kbyIsIl9vblJlZG8iLCJoaXN0b3J5IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fZWRpdG9yX2hpc3RvcnlfXyIsIl9zZGsiLCJ6b29tIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fZWRpdG9yX3pvb21fXyIsIl9pbml0U2VyaWFsaXplcnMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX2VkaXRvcl9vcGVyYXRpb25zX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX2VkaXRvcl9jb250cm9sc19fIiwiZmVhdHVyZXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfX2VkaXRvcl9mZWF0dXJlc19fIiwib3BlcmF0aW9uc0FycmF5IiwiX29wZXJhdGlvbnMiLCJyZWdpc3Rlck9wZXJhdGlvbnMiLCJfcnVubmluZyIsIl9yZW5kZXJSZXF1ZXN0ZWQiLCJfcmVuZGVyQ2FsbGJhY2tzIiwiX2FuaW1hdGlvbkZyYW1lUmVxdWVzdCIsIl90aWNrIiwicmVzZXRFZGl0b3IiLCJyZW5kZXJlciIsImdldFJlbmRlcmVyIiwiaW5pdGlhbERpbWVuc2lvbnMiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwibWF4UGl4ZWxzIiwiZ2V0TWF4TWVnYXBpeGVscyIsIm1heERpbWVuc2lvbnMiLCJnZXRNYXhEaW1lbnNpb25zIiwicmVzZXQiLCJpbWFnZVJlc2l6ZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX2ltYWdlX3Jlc2l6ZXJfXyIsImV4aWYiLCJwcmV2aW91c0RpbWVuc2lvbnMiLCJfc2V0SW1hZ2UiLCJicm9hZGNhc3RTY2FsZSIsIl9pbml0V2F0ZXJtYXJrIiwibmVlZHNSZXNpemUiLCJwYXJzZUV4aWYiLCJyZXNpemUiLCJyZWFzb24iLCJ3YXRlcm1hcmtJbWFnZSIsIl93YXRlcm1hcmtPcGVyYXRpb24iLCJsb2dMZXZlbCIsImRpc3BsYXlXZWxjb21lTWVzc2FnZSIsImRlYnVnIiwibGljZW5zZSIsIl9vcHRpb25zJGVkaXRvciIsInNtb290aERvd25zY2FsaW5nIiwic21vb3RoVXBzY2FsaW5nIiwicHJlZmVycmVkUmVuZGVyZXIiLCJwaXhlbFJhdGlvIiwidHJhbnNwYXJlbnQiLCJjbGVhckNvbG9yIiwiY2xlYXJDb2xvckluc3RhbmNlIiwiaXNBcnJheSIsImZyb21IZXgiLCJyZW5kZXJlck9wdGlvbnMiLCJmaXhPZmZzZXQiLCJfY2xhbXBPZmZzZXQiLCJnZXRTcHJpdGVTY2FsZSIsInNwcml0ZVNjYWxlIiwic2V0U3ByaXRlU2NhbGUiLCJnZXRDcm9zc09yaWdpblZhbHVlIiwiX2wiLCJpc1Rvb2xBbGxvd2VkIiwidG9vbHMiLCJtYXhNZWdhUGl4ZWxzIiwibW9iaWxlIiwiZGVza3RvcCIsImluY29ycG9yYXRlU3ByaXRlU2NhbGUiLCJnZXRGaW5hbERpbWVuc2lvbnMiLCJzdWJ0cmFjdFBhZGRpbmciLCJnZXRDYW52YXMiLCJzZXRBbGxPcGVyYXRpb25zVG9EaXJ0eSIsInNldEltYWdlIiwiYXV0byIsImRvd25sb2FkIiwic2V0RW5hYmxlZCIsImV4cG9ydCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9zaGFyZWRfZXhwb3J0ZXJfXyIsIm91dHB1dCIsIkVYUE9SVCIsIl9zZXJpYWxpemVycyIsIjEuMC4wIiwiMS4wLjEiLCIyLjAuMCIsIjIuMC4xIiwiMy4wLjAiLCIzLjEuMCIsIlNlcmlhbGl6ZXIiLCJzZXJpYWxpemUiLCJkZXNlcmlhbGl6ZSIsInNldE9mZnNldCIsInRpY2siLCJjYWxsYmFja3MiLCJfcmVuZGVyIiwiX2FwcGx5T2Zmc2V0IiwiX2xhc3RPdXRwdXRCb3VuZHMiLCJzdG9wIiwiX3RoaXM3IiwidHJhbnNmb3JtT3BlcmF0aW9uIiwiX3RoaXM4IiwidHJhbnNmb3JtQ2hhbmdlIiwiVHJhbnNmb3JtT3BlcmF0aW9uIiwiVHJhbnNmb3JtQ2hhbmdlIiwiX3RoaXM5IiwiX3RoaXMxMCIsImNhbnZhc0RpbWVuc2lvbnMiLCJnZXRDYW52YXNEaW1lbnNpb25zIiwibWluT2Zmc2V0IiwibWF4T2Zmc2V0IiwiZ2V0U25hcHNob3QiLCJzbmFwc2hvdCIsInJlc3RvcmVTbmFwc2hvdCIsImVxdWFscyIsImNhdGVnb3J5SWRlbnRpZmllciIsInN0aWNrZXJPYmplY3QiLCJlZGl0b3JPcHRpb25zIiwiZ2V0RGVlcFByb3BlcnR5IiwiQURERURfU1RJQ0tFUiIsInpvb21BbGxvd3NEcmFnIiwidGFyZ2V0TGV2ZWwiLCJkZWZhdWx0TGV2ZWwiLCJpc0VuYWJsZWQiLCJUV0lDRV9QSSIsInYxMDBTZXJpYWxpemVyIiwiX3NlcmlhbGl6ZU9wZXJhdGlvbnMiLCJkZWZhdWx0cyIsIl9zZXJpYWxpemVJbnB1dEltYWdlIiwiaW5wdXRJbWFnZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9iYWJlbF9ydW50aW1lX2NvcmVfanNfcHJvbWlzZV9fX2RlZmF1bHQiLCJjcmVhdGVDYW52YXMiLCJkcmF3SW1hZ2UiLCJkYXRhVXJsIiwiUE5HIiwiZ2V0U3RhY2siLCJfc2VyaWFsaXplT3BlcmF0aW9uIiwiX3NlcmlhbGl6ZVRyYW5zZm9ybU9wZXJhdGlvbiIsIl9zZXJpYWxpemVPcmllbnRhdGlvbk9wZXJhdGlvbiIsIl9zZXJpYWxpemVGaWx0ZXJPcGVyYXRpb24iLCJfc2VyaWFsaXplQWRqdXN0bWVudHNPcGVyYXRpb24iLCJfc2VyaWFsaXplU3ByaXRlT3BlcmF0aW9uIiwiX3NlcmlhbGl6ZVJhZGlhbEZvY3VzT3BlcmF0aW9uIiwiX3NlcmlhbGl6ZUxpbmVhckZvY3VzT3BlcmF0aW9uIiwiZ2V0SW50ZW5zaXR5Iiwib3B0aW9uTmFtZSIsIm1pZFZhbHVlIiwicmV0dXJuT3BlcmF0aW9uIiwic3ByaXRlSXRlbSIsIl9zZXJpYWxpemVTdGlja2VyIiwiX3NlcmlhbGl6ZVRleHQiLCJfc2VyaWFsaXplQnJ1c2giLCJfc2VyaWFsaXplVGV4dERlc2lnbiIsImdldEFkanVzdG1lbnRzIiwiYWRqdXN0bWVudHNPcHRpb25zIiwiYnJpZ2h0bmVzcyIsImdldEJyaWdodG5lc3MiLCJzYXR1cmF0aW9uIiwiZ2V0U2F0dXJhdGlvbiIsImNvbnRyYXN0IiwiZ2V0Q29udHJhc3QiLCJwYXRocyIsImdldFBhdGhzIiwiX3NlcmlhbGl6ZVBhdGgiLCJwb2ludHMiLCJnZXRDb250cm9sUG9pbnRzIiwib3BlcmF0aW9uRm91bmQiLCJnZXROZXdEaW1lbnNpb25zIiwiQnJ1c2giLCJ2MTAwRGVzZXJpYWxpemVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X3NoYXJlZF9tYW5hZ2Vyc19maWx0ZXJfbWFuYWdlcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X3NoYXJlZF9tYW5hZ2Vyc19zdGlja2VyX21hbmFnZXJfXyIsIl9icnVzaE1hbmFnZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfc2hhcmVkX21hbmFnZXJzX2JydXNoX21hbmFnZXJfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfc2hhcmVkX21hbmFnZXJzX2ZvbnRfbWFuYWdlcl9fIiwiZGVmYXVsdE9wdGlvbnMiLCJnZXRPcHRpb25zIiwiZGVlcERlZmF1bHRzIiwiY29udHJvbHNPcHRpb25zIiwiX3ZhbGlkYXRlVmVyc2lvbiIsIl9kZXNlcmlhbGl6ZUlucHV0SW1hZ2UiLCJfZGVzZXJpYWxpemVPcGVyYXRpb25zIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JhYmVsX3J1bnRpbWVfY29yZV9qc19wcm9taXNlX19fZGVmYXVsdCIsIl9kYXRhJGlucHV0SW1hZ2UiLCJpbnN0YW5jZXMiLCJfZGVzZXJpYWxpemVPcGVyYXRpb24iLCJpbnN0YW5jZSIsIl9kZXNlcmlhbGl6ZUNyb3BPcGVyYXRpb24iLCJfZGVzZXJpYWxpemVPcmllbnRhdGlvbk9wZXJhdGlvbiIsIl9kZXNlcmlhbGl6ZUZpbHRlck9wZXJhdGlvbiIsIl9kZXNlcmlhbGl6ZUFkanVzdG1lbnRzT3BlcmF0aW9uIiwiX2Rlc2VyaWFsaXplU3ByaXRlT3BlcmF0aW9uIiwiX2Rlc2VyaWFsaXplRm9jdXNPcGVyYXRpb24iLCJjcm9wT3B0aW9ucyIsImJyb2FkY2FzdFRyYW5zZm9ybSIsIkFkanVzdG1lbnRzT3BlcmF0aW9uIiwib3BlcmF0aW9uT3B0aW9ucyIsIl9BZGp1c3RtZW50c09wZXJhdGlvbiIsIl9kZXNlcmlhbGl6ZVNwcml0ZSIsInNldFNwcml0ZXMiLCJfZGVzZXJpYWxpemVTdGlja2VyIiwiX2Rlc2VyaWFsaXplVGV4dCIsIl9kZXNlcmlhbGl6ZUJydXNoIiwiX2Rlc2VyaWFsaXplVGV4dERlc2lnbiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfbGliX2ZvbnRfbG9hZGVyX18iLCJnZXRGb250QnlGb250RmFtaWx5IiwiYnJ1c2hTcHJpdGUiLCJjcmVhdGVCcnVzaCIsIl9kZXNlcmlhbGl6ZUJydXNoUGF0aCIsImJydXNoSW5zdGFuY2UiLCJfY3JlYXRlQnJ1c2hGb3JQYXRoIiwicGF0aE9iamVjdCIsImNyZWF0ZVBhdGgiLCJzZXRDbG9zZWQiLCJhZGRDb250cm9sUG9pbnQiLCJicnVzaE9wdGlvbnMiLCJyYXdCcnVzaCIsImdldEZpcnN0QnJ1c2giLCJfYnJ1c2giLCJCcnVzaENsYXNzIiwiX0JydXNoIiwiX0JydXNoQ2xhc3MiLCJfaW5oZXJpdHMiLCJncmFkaWVudFNpemUiLCJGaWx0ZXJNYW5hZ2VyIiwiX2ZpbHRlcnNCeUlkZW50aWZpZXIiLCJpZGVudGl0eSIsIkZpbHRlck9wZXJhdGlvbiIsIklkZW50aXR5RmlsdGVyIiwiX2luaXRDYXRlZ29yaWVzIiwiRmlsdGVyIiwicHJlbG9hZGVkSW1hZ2UiLCJnZXRQcmVsb2FkZXIiLCJnZXRBc3NldCIsIlRocmVlRExVVEZpbHRlciIsImF2YWlsYWJsZUZpbHRlcnMiLCJuZXdDYXRlZ29yaWVzIiwiYWxsQ2F0ZWdvcnkiLCJ1bnNoaWZ0IiwiQnJ1c2hNYW5hZ2VyIiwiX2JydXNoZXMiLCJfYnJ1c2hlc0J5SWQiLCJfYWRkQnJ1c2hlcyIsIkJSVVNIRVMiLCJicnVzaGVzIiwicmVwbGFjZUJydXNoZXMiLCJhdmFpbGFibGVCcnVzaGVzIiwiRk9OVF9XRUlHSFRTIiwiMTAwIiwiMjAwIiwiMzAwIiwiNDAwIiwiNTAwIiwiNjAwIiwiNzAwIiwiODAwIiwiOTAwIiwiYm9sZCIsIkZvbnRWYXJpYXRpb24iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfcGhvdG9lZGl0b3JzZGtfXyIsImZvbnRTdHlsZSIsIlNUUklORyIsInJlcXVpcmVkIiwiQUxMIiwidGV4dE1ldHJpY3MiLCJPQkpFQ1QiLCJhdmFpbGFibGUiLCJmaWxlUGF0aCIsIkJPT0xFQU4iLCJCYXNlRm9udExvYWRlciIsIl9vYnNlcnZlcnMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvbnRfb2JzZXJ2ZXJfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19waG90b2VkaXRvcnNka19fIiwiZXhlY3V0ZVByb21pc2VzIiwib2JzZXJ2ZXIiLCJvYnNlcnZlIiwidjEwMVNlcmlhbGl6ZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXzFfMF8wX3NlcmlhbGl6ZXJfXyIsInRleHR1cmVTY2FsZSIsInYxMDFEZXNlcmlhbGl6ZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXzFfMF8wX2Rlc2VyaWFsaXplcl9fIiwiX2Rlc2VyaWFsaXplU2VsZWN0aXZlQmx1ck9wZXJhdGlvbiIsInRyYW5zZm9ybURpbWVuc2lvbnMiLCJzZXRUZXh0dXJlU2NhbGUiLCJFbmdpbmUiLCJfT3ZlcmxheUZpbHRlciRCTEVORF8iLCJGcmFtZU1hbmFnZXIiLCJfZnJhbWVzQnlJZCIsImF2YWlsYWJsZUZyYW1lcyIsIk92ZXJsYXlNYW5hZ2VyIiwiX292ZXJsYXlzIiwiX292ZXJsYXlzQnlJZGVudGlmaWVyIiwib3ZlcmxheXMiLCJyZXBsYWNlT3ZlcmxheXMiLCJhdmFpbGFibGVPdmVybGF5cyIsIkZyYW1lIiwiX2xvYWRlZCIsIl9sb2FkaW5nIiwiX2ZyYW1lIiwiZGVlcENsb25lIiwiQ29uZmlndXJhYmxlIiwiZ3JvdXBOYW1lIiwicGFydE5hbWUiLCJfbG9hZFBhcnQiLCJwYXJ0IiwiaW1hZ2VVcmwiLCJnZXRFZGl0b3IiLCJ2MzAwU2VyaWFsaXplciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fMl8wXzBfc2VyaWFsaXplcl9fIiwibWV0YSIsInBsYXRmb3JtIiwiY3JlYXRlZEF0IiwiSVNPRGF0ZVN0cmluZyIsInJnYmEiLCJnZXRUaW50Q29sb3IiLCJfcmF0aW8iLCJfc2VyaWFsaXplTWlycm9yZWRGb2N1c09wZXJhdGlvbiIsIl9zZXJpYWxpemVCbHVyT3BlcmF0aW9uIiwiY29udHJvbFBvaW50MSIsImNvbnRyb2xQb2ludDIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfZ2xvYmFsc19fIiwidjMwMERlc2VyaWFsaXplciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fMl8wXzBfZGVzZXJpYWxpemVyX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfc2hhcmVkX21hbmFnZXJzX3N0aWNrZXJfbWFuYWdlcl9fIiwicmVzb2x2ZWRVcmwiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX3NoYXJlZF9sb2FkZXJzX2ltYWdlX2xvYWRlcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X2JhYmVsX3J1bnRpbWVfY29yZV9qc19vYmplY3RfZ2V0X3Byb3RvdHlwZV9vZl9fX2RlZmF1bHQiLCJfZGF0YSRpbWFnZSIsImdldEZvbnRMb2FkZXIiLCJnZXREZWZhdWx0VmFyaWF0aW9uIiwiX3BhdGgkYnJ1c2giLCJnZXRCcnVzaEJ5SWRlbnRpZmllciIsImZyYW1lT3BlcmF0aW9uIiwiX2ZyYW1lJG9wdGlvbnMiLCJzZWVkIiwiaW52ZXJ0ZWQiLCJ0ZXh0RGVzaWduTWFuYWdlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfc2hhcmVkX21hbmFnZXJzX3RleHRfZGVzaWduX21hbmFnZXJfXyIsImZvbnRNYW5hZ2VyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9zaGFyZWRfbWFuYWdlcnNfZm9udF9tYW5hZ2VyX18iLCJURVhUX0RFU0lHTl9GT05UUyIsIkFzc2V0TWFuYWdlciIsImdldExheW91dEJ5SWRlbnRpZmllciIsImdldEZvbnRzIiwiZ2V0VmFyaWF0aW9uc0J5SWRlbnRpZmllciIsImdldEltYWdlUGF0aHMiLCJmdWxsUGF0aCIsImxvYWRJbWFnZXMiLCJvbkltYWdlc0xvYWRlZCIsImNyZWF0ZVRleHREZXNpZ24iLCJUcmFuc2Zvcm1SYXRpb01hbmFnZXIiLCJkZWZhdWx0Q2F0ZWdvcmllcyIsIlRSQU5TRk9STV9SQVRJT19DQVRFR09SSUVTIiwiY2xvbmVDYXRlZ29yaWVzIiwiaW5jbHVkZUFsbENhdGVnb3J5IiwicmF0aW9zIiwiYXZhaWxhYmxlUmF0aW9zIiwicmF0aW8iLCJnZXRSYXRpb3NGb3JDYXRlZ29yeSIsImRpbWVuc2lvbiIsIkNvbnRyb2xzQ29tcG9uZW50IiwiYmFja0J1dHRvbiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fc2hhcmVkX3N0YXRlX2NvbXBvbmVudF9fIiwiX3RhYmxlIiwicm9vdEhlaWdodCIsIl9oZWFkZXIiLCJoZWFkZXJIZWlnaHQiLCJfc2Nyb2xsYmFyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2dldFJvb3RQcm9wcyIsImN1cnJlbnRDb250cm9sIiwiaXNPdmVydmlld0NvbnRyb2wiLCJiYWNrQnV0dG9uU3R5bGUiLCJDb250cm9sc0NvbXBvbmVudFJvb3QiLCJDb250cm9sc0NvbXBvbmVudFRhYmxlIiwiQ29udHJvbHNDb21wb25lbnRIZWFkZXIiLCJCYWNrQnV0dG9uIiwiX29uQmFja0J1dHRvbkNsaWNrIiwiQ29udHJvbHNDb21wb25lbnRUaXRsZSIsIlJvb3RFbGVtZW50Q29udGFpbmVyIiwibWF4SGVpZ2h0IiwiY29udHJvbHNMaWdodEJhY2tncm91bmRDb2xvciIsImNvbnRyb2xzQmFja2dyb3VuZENvbG9yIiwid2l0aEJvcmRlclRvcCIsImJvcmRlclRvcCIsImNvbnRyb2xzU2VwYXJhdG9yQ29sb3IiLCJiYWNrZ3JvdW5kU2l6ZSIsIkNhbnZhc0hlYWRlckJ1dHRvbkNvbXBvbmVudCIsImxpIiwidXNlclNlbGVjdCIsIlNsaWRlckNvbXBvbmVudCIsInNsaWRlclBvc2l0aW9uIiwiZm9yZWdyb3VuZExlZnQiLCJmb3JlZ3JvdW5kV2lkdGgiLCJfc2V0VmFsdWUiLCJfcHJldmlvdXNWYWx1ZSIsIl9pbml0aWFsU2xpZGVyUG9zaXRpb24iLCJiYXJXaWR0aCIsIl9iYXIiLCJuZXdTbGlkZXJQb3NpdGlvbiIsIm5ld1ZhbHVlIiwiZW1pdENoYW5nZSIsImVtaXRSZWxlYXNlIiwibWlkZGxlRG90IiwicG9zaXRpdmVWYWx1ZVByZWZpeCIsInZhbHVlVW5pdCIsImZvcmVncm91bmRQcm9wcyIsIl9nZXRGb3JlZ3JvdW5kU3R5bGUiLCJTbGlkZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2RyYWdnYWJsZV9jb21wb25lbnRfXyIsIkJhckNvbnRhaW5lciIsIkJhciIsIkJhckJhY2tncm91bmRTZWN0aW9uIiwiZGFya0JhY2tncm91bmQiLCJCYXJGb3JlZ3JvdW5kU2VjdGlvbiIsIl9vbktub2JEcmFnU3RhcnQiLCJfb25Lbm9iRHJhZyIsIl9vbktub2JEcmFnU3RvcCIsIktub2JUb3VjaFRhcmdldCIsIl9nZXRLbm9iU3R5bGUiLCJpZGxlIiwiaXNSZXF1aXJlZCIsIkJhclNlY3Rpb24iLCJzbGlkZXJCYWNrZ3JvdW5kQ29sb3IiLCJkYXJrU2xpZGVyQmFja2dyb3VuZENvbG9yIiwiaGlnaGxpZ2h0Q29sb3IiLCJzbGlkZXJLbm9iQ29sb3IiLCI6YWN0aXZlIiwiQ29udHJvbEdyb3VwTGlzdCIsImxpc3RTdHlsZSIsIm1hcmdpbiIsIkNvbnRyb2xHcm91cCIsIkNvbnRyb2xHcm91cFRpdGxlIiwiQ2hlY2tib3hDb21wb25lbnQiLCJpY29uUGF0aCIsImFjdGl2ZUljb25QYXRoIiwiY2hlY2tlZCIsIkNoZWNrYm94IiwiQ29sb3JDb21wb25lbnRJbnB1dENvbXBvbmVudCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fdmFsdWVfc2VsZWN0aW9uX2NvbXBvbmVudF9fIiwiY2xhc3NOYW1lcyIsImlucHV0Q2xhc3NOYW1lIiwiam9pbiIsIkNvbG9yQ29tcG9uZW50SW5wdXQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfY29tcG9uZW50c19zaGFyZWRfZm9ybXNfbnVtZXJpY19pbnB1dF9jb21wb25lbnRfXyIsInBhZGRpbmdMZWZ0IiwiUGxhaW5Db250cm9sSXRlbSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9waG90b2VkaXRvcnNka19kZXNrdG9wX3VpX2NvcmVfXyIsIlBsYWluQ29udHJvbEl0ZW1CYWNrZ3JvdW5kIiwiTGlicmFyeVVwbG9hZENvbXBvbmVudCIsIl9kcmFnQ291bnRlciIsImRyb3Bab25lSG92ZXJlZCIsIm9uV2ViY2FtQWN0aXZhdGVkIiwib25JbWFnZSIsInVwbG9hZCIsIm5hdGl2ZUV2ZW50IiwicmV0dXJuVmFsdWUiLCJkYXRhVHJhbnNmZXIiLCJmaWxlcyIsIl9oYW5kbGVGaWxlIiwiZGlzcGxheUVycm9yIiwiZmlsZVR5cGUiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwiX29uSW1hZ2UiLCJyZWFkQXNEYXRhVVJMIiwid2ViY2FtQnV0dG9uU3R5bGUiLCJvbk5ld0ZpbGUiLCJCYWNrZ3JvdW5kIiwiRHJvcFpvbmUiLCJfb25Ecm9wWm9uZUNsaWNrIiwib25EcmFnRW50ZXIiLCJfb25Ecm9wWm9uZURyYWdFbnRlciIsIm9uRHJhZ092ZXIiLCJfb25Ecm9wWm9uZURyYWdPdmVyIiwib25EcmFnTGVhdmUiLCJfb25Ecm9wWm9uZURyYWdMZWF2ZSIsIm9uRHJvcCIsIl9vbkRyb3Bab25lRHJvcCIsImhvdmVyZWQiLCJ3ZWJjYW1FbmFibGVkIiwiV2ViY2FtQnV0dG9uIiwiX29uV2ViY2FtQ2xpY2siLCI6aG92ZXIgKiIsImJvcmRlclJpZ2h0IiwiUHJvbWlzZVF1ZXVlIiwibWF4Q29uY3VycmVuY3kiLCJJbmZpbml0eSIsIm1heFF1ZXVlTGVuZ3RoIiwibWluRGVsYXkiLCJfcXVldWUiLCJfcGVuZGluZ1Byb21pc2VzIiwiX21heENvbmN1cnJlbmN5IiwiX21heFF1ZXVlTGVuZ3RoIiwiX21pbkRlbGF5IiwiX2xhc3RQcm9taXNlRG9uZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fYW5pbWF0aW9uX2ZyYW1lX2pzX18iLCJfZGVxdWV1ZSIsInNoaWZ0IiwiX3Byb21pc2lmeSIsIkZvY3VzQ29udHJvbHMiLCJkaXNhYmxlIiwiZW5hYmxlIiwiRk9DVVNfT1BFUkFUSU9OUyIsInByZXYiLCJjdXIiLCJvcGVyYXRpb25JZGVudGlmaWVyIiwic2VsZWN0ZWRGb2N1c0l0ZW0iLCJnZXRJdGVtQnlPcGVyYXRpb25JZGVudGlmaWVyIiwic2VsZWN0ZWRGb2N1cyIsImdldEJsdXJSYWRpdXMiLCJsaW5lYXJGb2N1cyIsImdldENvbnRyb2xQb2ludDEiLCJnZXRDb250cm9sUG9pbnQyIiwibWlycm9yZWRGb2N1cyIsImdldFN0YXJ0IiwiZ2V0RW5kIiwiZ2V0U2l6ZSIsImdldEdyYWRpZW50U2l6ZSIsInJhZGlhbEZvY3VzIiwiZ2V0UmFkaXVzIiwiZ2V0R3JhZGllbnRSYWRpdXMiLCJzZXRTZWxlY3RlZEZvY3VzIiwiZm9jdXNJdGVtIiwic2V0Qmx1clJhZGl1cyIsInNldENvbnRyb2xQb2ludDEiLCJzZXRDb250cm9sUG9pbnQyIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJzZXRSYWRpdXMiLCJzZXRPcGVyYXRpb25PcHRpb25zIiwib3B0cyIsImFzc2V0cyIsIklURU1TIiwiYmFja2dyb3VuZEltYWdlUGF0aCIsImFjdGl2ZUJhY2tncm91bmRJbWFnZVBhdGgiLCJpc1Rvb2xFbmFibGVkIiwiY29udHJvbHNDb21wb25lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvY3VzX2NvbnRyb2xzX2NvbXBvbmVudF9fIiwiY2FudmFzQ29udHJvbHNDb21wb25lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX2ZvY3VzX2NhbnZhc19jb250cm9sc19jb21wb25lbnRfXyIsImF2YWlsYWJsZU1vZGVzIiwicmVxdWlyZWRPcGVyYXRpb25zIiwidXBkYXRhYmxlT3BlcmF0aW9ucyIsInN3aXRjaFRvRGVmYXVsdENvbnRyb2xzT25SZW1vdmFsIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X3Bob3RvZWRpdG9yc2RrX2Rlc2t0b3BfdWlfY29yZV9fX2RlZmF1bHQiLCJDb250cm9scyIsIlN0aWNrZXJMaXN0Q29tcG9uZW50Iiwib25TdGlja2VyQ2xpY2siLCJjdXJyZW50U3RpY2tlcklkZW50aWZpZXIiLCJ0aHVtYlVSTCIsIlN0aWNrZXJMaXN0SXRlbSIsIl9vblN0aWNrZXJDbGljayIsInRocmVlQ29sdW1ucyIsIlN0aWNrZXJJbWFnZSIsIlN0aWNrZXJMaXN0IiwiX3JlbmRlckxpc3RJdGVtcyIsInVsIiwicGFkZGluZ1RvcCIsIlBob3RvRWRpdG9yU0RLIiwiRGVza3RvcFVJIiwiVUkiLCJiZCIsInN0ciIsImJ5dGVBcnJheVRvU3RyaW5nIiwiZGVjb2RlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fbGliX2Nzc19yZXNldF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fbGliX2dsb2JhbF9jc3NfXyIsIl9mb250TG9hZGVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fbGliX2ZvbnRfbG9hZGVyX18iLCJfaW5pdE9wdGlvbnMiLCJfaW5pdExhbmd1YWdlIiwiX2luaXRFdmVudHMiLCJfZGlzcG9zZWQiLCJfcHJlbG9hZGVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fbGliX3ByZWxvYWRlcl9fIiwiX2dsb2JhbFN0YXRlIiwiX2lzUmVhZHkiLCJFRElUT1JfUkVBRFkiLCJzZXRMZXZlbCIsIl92IiwiX3RoZW1lIiwiX2luamVjdFdlYkZvbnRzIiwiY29tcG9uZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19jb21wb25lbnRzX2FwcF9jb21wb25lbnRfXyIsIl9jb21wb25lbnQiLCJyZW5kZXJSZXR1cm5zQ29tcG9uZW50IiwiX2dldEVkaXRvciIsImxhbmd1YWdlIiwicHJlbG9hZGVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X190aGVtZXNfXyIsImRldmljZVBpeGVsUmF0aW8iLCJkaXNwbGF5UmVzaXplTWVzc2FnZSIsImVuYWJsZURyYWciLCJlbmFibGVab29tIiwiZGlzcGxheUNsb3NlQnV0dG9uIiwidW5kb01vZGUiLCJkZWZhdWx0Q29udHJvbCIsImZvcmNlQ3JvcCIsImNvbnRyb2xzT3JkZXIiLCJvcGVyYXRpb25zT3JkZXIiLCJJTUFHRSIsImZpbGVCYXNlbmFtZSIsInF1YWxpdHkiLCJleHRlbnNpb25zIiwibGFuZ3VhZ2VzIiwiYmFzZVVybCIsInJlc29sdmVyIiwiZm9udEZhY2VzIiwiZm9udE5hbWUiLCJmb250UGF0aCIsInBpcGVFdmVudHMiLCJ1bnBpcGVFdmVudHMiLCJfbGFuZ3VhZ2VzIiwiZGUiLCJlbiIsIl9sYW5ndWFnZSIsImFzc2V0IiwidWlBc3NldCIsImRpc2FibGVSZXRpbmEiLCJfb3B0aW9ucyRhc3NldHMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwiX2Rpc3Bvc2VFdmVudHMiLCJSZWFjdCIsIlNoYXJlZFN0YXRlIiwiQ29uc3RhbnRzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19jb21wb25lbnRzX3Njcm9sbGJhcl9jb21wb25lbnRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19zaGFyZWRfbG9hZGVyc19qc29uX2xvYWRlcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19jb21wb25lbnRzX3NsaWRlcl9jb21wb25lbnRfXyIsIlJlYWN0Q29tcG9uZW50Iiwib25FZGl0b3JSZWFkeSIsIm9uUmVhZHkiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X19leHBvcnRzX18iLCIkT2JqZWN0IiwiZGVzYyIsInNldFByb3RvdHlwZU9mIiwiY2hlY2siLCJidWdneSIsImdldEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidG9MZW5ndGgiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZnJvbUluZGV4IiwiJGdldFByb3RvdHlwZU9mIiwiaW52YXJpYW50IiwiYXNzaWduIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJjaGVja1Byb3BUeXBlcyIsImlzVmFsaWRFbGVtZW50IiwidGhyb3dPbkRpcmVjdEFjY2VzcyIsIklURVJBVE9SX1NZTUJPTCIsIkZBVVhfSVRFUkFUT1JfU1lNQk9MIiwiQU5PTllNT1VTIiwiUmVhY3RQcm9wVHlwZXMiLCJjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlciIsInN5bWJvbCIsImNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyIiwiYXJyYXlPZiIsInR5cGVDaGVja2VyIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJQcm9wVHlwZUVycm9yIiwicHJvcFZhbHVlIiwicHJvcFR5cGUiLCJnZXRQcm9wVHlwZSIsImNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlciIsImluc3RhbmNlT2YiLCJleHBlY3RlZENsYXNzIiwiZXhwZWN0ZWRDbGFzc05hbWUiLCJhY3R1YWxDbGFzc05hbWUiLCJnZXRDbGFzc05hbWUiLCJpc05vZGUiLCJjcmVhdGVOb2RlQ2hlY2tlciIsIm9iamVjdE9mIiwib25lT2YiLCJleHBlY3RlZFZhbHVlcyIsInZhbHVlc1N0cmluZyIsInN0cmluZ2lmeSIsIm9uZU9mVHlwZSIsImFycmF5T2ZUeXBlQ2hlY2tlcnMiLCJjaGVja2VyIiwiZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nIiwic2hhcGUiLCJzaGFwZVR5cGVzIiwiZXhhY3QiLCJhbGxLZXlzIiwic3RhY2siLCJ2YWxpZGF0ZSIsIm1hbnVhbFByb3BUeXBlQ2FsbENhY2hlIiwibWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQiLCJjaGVja1R5cGUiLCJzZWNyZXQiLCJjYWNoZUtleSIsImNoYWluZWRDaGVja1R5cGUiLCJleHBlY3RlZFR5cGUiLCJnZXRQcmVjaXNlVHlwZSIsImV2ZXJ5IiwiaXRlcmF0b3JGbiIsIm1heWJlSXRlcmFibGUiLCJnZXRJdGVyYXRvckZuIiwic3RlcCIsImVudHJ5IiwiUmVnRXhwIiwiaXNTeW1ib2wiLCJQcm9wVHlwZXMiLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInRvIiwibG9nZ2VkVHlwZUZhaWx1cmVzIiwidHlwZVNwZWNzIiwidHlwZVNwZWNOYW1lIiwiZXgiLCJwcmltYXJ5Q29sb3IiLCJwcmltYXJ5Q29sb3JSR0IiLCJiYWNrZ3JvdW5kQ29sb3JSR0IiLCJjb250cm9sc0tub2JDb2xvciIsImNvbnRyb2xzQmFja2dyb3VuZENvbG9yUkdCIiwibmF2aWdhdGlvbkJhY2tncm91bmRDb2xvciIsIm5hdmlnYXRpb25CYWNrZ3JvdW5kQ29sb3JSR0IiLCJkaW1tZWRUZXh0Q29sb3JSR0IiLCJmaWx0ZXJJdGVtQmFja2dyb3VuZENvbG9yIiwiZm9jdXNJdGVtQmFja2dyb3VuZENvbG9yIiwiaGlnaGxpZ2h0Q29sb3JSR0IiLCJkYXJrSGlnaGxpZ2h0Q29sb3JSR0IiLCJidXR0b25Cb3JkZXJDb2xvciIsImlucHV0TW9kYWxCdXR0b25CYXJDb2xvciIsImxheWVyIiwibGlzdEl0ZW1TbGlkZUluRGVsYXkiLCJ1cHBlcmNhc2VCb2xkRm9udEZhbWlseSIsIm1lZGl1bUZvbnRGYW1pbHkiLCJmaXJhc2Fuc21lZGl1bSIsImZpcmFzYW5zcmVndWxhciIsInNvdXJjZXNhbnNwcm9ib2xkIiwic291cmNlc2Fuc3Byb3NlbWlib2xkIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV82X18iLCJsb2FkZWQiLCJUaGVtZVByb3ZpZGVyIiwid2l0aFRoZW1lIiwiX2Fkb25pczIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2RvbUVsZW1lbnRzMiIsIl9iYXNlU3R5bGVzMiIsIl93aXRoVGhlbWUyIiwiX3RoZW1lUHJvdmlkZXIyIiwib2JqIiwiYmFzZVN0eWxlcyIsIl9mYWN0b3J5IiwiZG9tRWxlbWVudCIsImNyZWF0ZUNvbXBvbmVudCIsImZvcmNlIiwiX2Fkb25pcyRnZXRPcHRpb25zIiwic3R5bGVzQnVmZmVyIiwiZ2V0U3R5bGVzQnVmZmVyIiwiYnVmZmVyQ1NTIiwiZmx1c2hUb1N0eWxlVGFnIiwiX2NyZWF0ZUNsYXNzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9zdHlsZXNCdWZmZXIyIiwiX2NvbXBvbmVudEZhY3RvcnkyIiwiX3V0aWxzIiwicHJvZHVjdGlvbiIsIk5PREVfRU5WIiwiQWRvbmlzIiwiYmF0Y2hJbmplY3Rpb24iLCJhdXRvUHJlZml4IiwiaGFzaFNlcGFyYXRvciIsIm5hbWVTZXBhcmF0b3IiLCJ2YXJpYXRpb25TZXBhcmF0b3IiLCJzdHlsZU5vZGUiLCJpbmplY3Rpb25Nb2RlIiwiX3N0eWxlc0J1ZmZlciIsIl9jb21wb25lbnRGYWN0b3J5IiwicmVuZGVyRm4iLCJkaXNhYmxlSW5qZWN0aW9uIiwiZmx1c2hUb1N0cmluZyIsImVuYWJsZUluamVjdGlvbiIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsInNsaWNlSXRlcmF0b3IiLCJTdHlsZXNCdWZmZXIiLCJfYWRvbmlzIiwiX2luamVjdGlvbkVuYWJsZWQiLCJfYnVmZmVyZWRTZWxlY3RvcnMiLCJfYnVmZmVyIiwiX3N0eWxlTm9kZSIsIl9maW5kU3R5bGVOb2RlIiwiX3NoZWV0IiwiX2ZpbmRTaGVldCIsInNoZWV0Iiwic3R5bGVTaGVldHMiLCJzdHlsZVNoZWV0Iiwib3duZXJOb2RlIiwic2V0QXR0cmlidXRlIiwiaGVhZCIsInJ1bGVzZXRzIiwic2VsZWN0b3IiLCJfcmVmMyIsImNsZWFyQnVmZmVyZWRTZWxlY3RvcnMiLCJydWxlIiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiaGFzQ29udGVudCIsImlubmVySFRNTCIsImNyZWF0ZVRleHROb2RlIiwiX2luamVjdEZhc3QiLCJfaW5qZWN0RGVidWciLCJfbmV4dFRpY2siLCJfZmx1c2hUb1N0eWxlVGFnIiwiZGVlcE1lcmdlIiwic291cmNlcyIsIm5ld09iamVjdCIsImhhc2hPYmplY3QiLCJoIiwiY2hhckNvZGVBdCIsImZsYXR0ZW4iLCJhY2MiLCJ0b1N0YXRpY1N0eWxlcyIsImRlc3RpbmF0aW9uIiwiZGVlcE1lcmdlQWxsIiwicmVzb2x2ZVN0eWxlc09iamVjdCIsInJlc29sdmVkIiwiZmluZEFsbENvbWJpbmF0aW9ucyIsInhzIiwibGFzdEFGIiwiX3JlYWN0IiwiX3JlYWN0MiIsIl9iYXNlQWRvbmlzQ29tcG9uZW50MiIsIl9zdHlsZXMyIiwiX3N0eWxlc01hbmFnZXIyIiwiX3ByZWluamVjdGlvblN0eWxlc01hbmFnZXIyIiwiQ29tcG9uZW50RmFjdG9yeSIsImFkb25pc0Jhc2VTdHlsZXMiLCJhZG9uaXNTdHlsZXMiLCJhZG9uaXNUYXJnZXQiLCJfZ2V0VGFyZ2V0U3R5bGVzIiwiX2dldE5hbWUiLCJpc1RhZyIsImlzQWRvbmlzQ29tcG9uZW50IiwiaXNDb21wb25lbnQiLCJzdHlsZXNPYmplY3QiLCJhbGxTdHlsZXMiLCJidWZmZXJSdWxlc2V0cyIsIkFkb25pc0NvbXBvbmVudCIsIl9CYXNlQWRvbmlzQ29tcG9uZW50IiwiUmVmZXJlbmNlRXJyb3IiLCJfdXBkYXRlU3R5bGVzTWFuYWdlciIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9hbGxTdHlsZXMiLCJhY3RpdmVWYXJpYXRpb25zIiwiX2dldEFjdGl2ZVZhcmlhdGlvbnNGcm9tUHJvcHMiLCJfc3R5bGVzTWFuYWdlciIsInN0eWxlc0NoYW5nZWQiLCJ2YXJpYXRpb25zQ2hhbmdlZCIsImVsZW1lbnRQcm9wcyIsInZhcmlhdGlvbnNTZXQiLCJzb3J0IiwicGFzc2VkQ2xhc3NOYW1lIiwiZ2VuZXJhdGVkQ2xhc3NOYW1lIiwiX2Nsb25lUHJvcHMiLCJfYnVpbGRDbGFzc05hbWUiLCJfc2hvdWxkSW5qZWN0Q1NTIiwiX3ZhcmlhdGlvbnMiLCJfYWN0aXZlUGFyZW50VmFyaWF0aW9ucyIsIl9wcm9wVHlwZXMiLCJfcHJvcFR5cGVzMiIsIkJhc2VBZG9uaXNDb21wb25lbnQiLCJfQ29tcG9uZW50Iiwic2hpbSIsImdldFNoaW0iLCJTdHlsZXMiLCJfaGFzaCIsIl92YXJpYXRpb25IYXNoZXMiLCJfaGFzaFZhcmlhdGlvbnMiLCJoYXNoZXMiLCJ2YXJpYXRpb25TdHlsZXMiLCJfYWRvbmlzJGdldE9wdGlvbnMzIiwiaGFzaCIsImFsbFZhcmlhdGlvbnMiLCJfcnVsZXNldCIsIl9ydWxlc2V0MiIsIlN0eWxlc01hbmFnZXIiLCJfc3R5bGVzIiwiX2FjdGl2ZVZhcmlhdGlvbnMiLCJfY2xhc3NOYW1lIiwiX2dlbmVyYXRlQ2xhc3NOYW1lIiwiX2Jhc2VTZWxlY3RvciIsIl9ydWxlc2V0cyIsIl9nZW5lcmF0ZVJ1bGVzZXRzIiwicnVsZXNldCIsInRvQ1NTIiwiaXNTZWxlY3RvckJ1ZmZlcmVkIiwiZ2V0U2VsZWN0b3IiLCJoYXNEZWNsYXJhdGlvbnMiLCJnZXRTdHlsZXMiLCJnZXRWYXJpYXRpb25TdHlsZXMiLCJnZXRJZGVudGlmaWVyRm9yVmFyaWF0aW9ucyIsImRlZmF1bHRSdWxlc2V0IiwiX2dldENvbWJpbmVkU3R5bGVzIiwiZ2V0U3ViUnVsZXNldHMiLCJfZGVjbGFyYXRpb24yIiwiX2V4dGVuc2lvbnMyIiwiUnVsZXNldCIsIl9zZWxlY3RvciIsIl9yZXNvbHZlZFN0eWxlcyIsIl9wYXJzZVN0eWxlczIiLCJfcGFyc2VTdHlsZXMiLCJzdWJSdWxlc2V0cyIsImRlY2xhcmF0aW9ucyIsIl9zdWJSdWxlc2V0cyIsIl9kZWNsYXJhdGlvbnMiLCJzdWJSdWxlc2V0IiwiZ2VuZXJhdGVTdWJSdWxlc2V0IiwibmV3U2VsZWN0b3IiLCJwYXJlbnRTZWxlY3RvciIsImV4dGVuc2lvbiIsIl9nZXRTdWJSdWxlc2V0IiwicGFyZW50SXNBdFJ1bGUiLCJpbmRlbnRhdGlvbiIsIl9jc3NQcmVmaXhlcyIsIl9jc3NQcmVmaXhlczIiLCJEZWNsYXJhdGlvbiIsImNzc0tleSIsInRvTG93ZXJDYXNlIiwicHJlZml4ZXMiLCJrZXlQYWlycyIsInByZWZpeCIsIl9nZXRBdXRvUHJlZml4ZWRLZXlQYWlycyIsIndrIiwibXoiLCJtcyIsImFwcGVhcmFuY2UiLCJ0ZXh0RW1waGFzaXNQb3NpdGlvbiIsInRleHRFbXBoYXNpcyIsInRleHRFbXBoYXNpc1N0eWxlIiwidGV4dEVtcGhhc2lzQ29sb3IiLCJib3hEZWNvcmF0aW9uQnJlYWsiLCJjbGlwUGF0aCIsIm1hc2tJbWFnZSIsIm1hc2tNb2RlIiwibWFza1JlcGVhdCIsIm1hc2tQb3NpdGlvbiIsIm1hc2tDbGlwIiwibWFza09yaWdpbiIsIm1hc2tTaXplIiwibWFza0NvbXBvc2l0ZSIsIm1hc2siLCJtYXNrQm9yZGVyU291cmNlIiwibWFza0JvcmRlck1vZGUiLCJtYXNrQm9yZGVyU2xpY2UiLCJtYXNrQm9yZGVyV2lkdGgiLCJtYXNrQm9yZGVyT3V0c2V0IiwibWFza0JvcmRlclJlcGVhdCIsIm1hc2tCb3JkZXIiLCJtYXNrVHlwZSIsInRleHREZWNvcmF0aW9uU3R5bGUiLCJ0ZXh0RGVjb3JhdGlvblNraXAiLCJ0ZXh0RGVjb3JhdGlvbkxpbmUiLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwiZm9udEZlYXR1cmVTZXR0aW5ncyIsImJyZWFrQWZ0ZXIiLCJicmVha0JlZm9yZSIsImJyZWFrSW5zaWRlIiwiY29sdW1uQ291bnQiLCJjb2x1bW5GaWxsIiwiY29sdW1uR2FwIiwiY29sdW1uUnVsZSIsImNvbHVtblJ1bGVDb2xvciIsImNvbHVtblJ1bGVTdHlsZSIsImNvbHVtblJ1bGVXaWR0aCIsImNvbHVtbnMiLCJjb2x1bW5TcGFuIiwiY29sdW1uV2lkdGgiLCJmbGV4IiwiZmxleEJhc2lzIiwiZmxleERpcmVjdGlvbiIsImZsZXhHcm93IiwiZmxleEZsb3ciLCJmbGV4U2hyaW5rIiwiZmxleFdyYXAiLCJhbGlnbkNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiYWxpZ25TZWxmIiwianVzdGlmeUNvbnRlbnQiLCJvcmRlciIsInRyYW5zZm9ybU9yaWdpblgiLCJ0cmFuc2Zvcm1PcmlnaW5ZIiwiYmFja2ZhY2VWaXNpYmlsaXR5IiwicGVyc3BlY3RpdmUiLCJwZXJzcGVjdGl2ZU9yaWdpbiIsInRyYW5zZm9ybVN0eWxlIiwidHJhbnNmb3JtT3JpZ2luWiIsImFuaW1hdGlvbiIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uRGlyZWN0aW9uIiwiYW5pbWF0aW9uRmlsbE1vZGUiLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYW5pbWF0aW9uTmFtZSIsImFuaW1hdGlvblBsYXlTdGF0ZSIsImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uIiwiYmFja2Ryb3BGaWx0ZXIiLCJmb250S2VybmluZyIsInNjcm9sbFNuYXBUeXBlIiwic2Nyb2xsU25hcFBvaW50c1giLCJzY3JvbGxTbmFwUG9pbnRzWSIsInNjcm9sbFNuYXBEZXN0aW5hdGlvbiIsInNjcm9sbFNuYXBDb29yZGluYXRlIiwic2hhcGVJbWFnZVRocmVzaG9sZCIsInNoYXBlSW1hZ2VNYXJnaW4iLCJzaGFwZUltYWdlT3V0c2lkZSIsImh5cGhlbnMiLCJmbG93SW50byIsImZsb3dGcm9tIiwicmVnaW9uRnJhZ21lbnQiLCJ0ZXh0QWxpZ25MYXN0IiwidGFiU2l6ZSIsIndyYXBGbG93Iiwid3JhcFRocm91Z2giLCJ3cmFwTWFyZ2luIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImdyaWRUZW1wbGF0ZVJvd3MiLCJncmlkVGVtcGxhdGVBcmVhcyIsImdyaWRUZW1wbGF0ZSIsImdyaWRBdXRvQ29sdW1ucyIsImdyaWRBdXRvUm93cyIsImdyaWRBdXRvRmxvdyIsImdyaWQiLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uU3RhcnQiLCJncmlkUm93RW5kIiwiZ3JpZFJvdyIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtbkdhcCIsImdyaWRSb3dHYXAiLCJncmlkQXJlYSIsImdyaWRHYXAiLCJ0ZXh0U2l6ZUFkanVzdCIsInRyYW5zaXRpb25EZWxheSIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiIsIl9pbW1lZGlhdGVDaGlsZFNlbGVjdG9yRXh0ZW5zaW9uMiIsIl9zZWxmU2VsZWN0b3JFeHRlbnNpb24yIiwiX3BzZXVkb0NsYXNzZXNFeHRlbnNpb24yIiwiX21lZGlhUXVlcnlFeHRlbnNpb24yIiwiYmFzZVNlbGVjdG9yIiwidHJpbSIsImV4dGVuZGluZ1NlbGVjdG9yIiwiUHJlaW5qZWN0aW9uU3R5bGVzTWFuYWdlciIsIl9TdHlsZXNNYW5hZ2VyIiwiX2dlbmVyYXRlVmFyaWF0aW9uUnVsZXNldHMiLCJCYXNlU3R5bGVzIiwiX1N0eWxlcyIsIlRoZW1hYmxlQ29tcG9uZW50IiwiQ29tcG9uZW50V2l0aFRoZW1lIiwiX1JlYWN0JENvbXBvbmVudCIsIkNoaWxkcmVuIiwib25seSIsImNoaWxkQ29udGV4dFR5cGVzIiwiVE9fU1RSSU5HIiwicG9zIiwiYWRkVG9VbnNjb3BhYmxlcyIsIl9rIiwiQXJndW1lbnRzIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJhbkluc3RhbmNlIiwiZm9yT2YiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJ0YXNrIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCIkUHJvbWlzZSIsImVtcHR5IiwiVVNFX05BVElWRSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsImlzUmVqZWN0IiwiY2hhaW4iLCJfYyIsIm9rIiwicmVhY3Rpb24iLCJmYWlsIiwiZG9tYWluIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsImV4aXQiLCJvblVuaGFuZGxlZCIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwid3JhcHBlciIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FwYWJpbGl0eSIsIml0ZXJhYmxlIiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJmb3JiaWRkZW5GaWVsZCIsImlzQXJyYXlJdGVyIiwiZ2V0SXRlckZuIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyRm4iLCJ1biIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJsYXN0IiwiZmx1c2giLCJwYXJlbnQiLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwiY2hhcmFjdGVyRGF0YSIsIkRFU0NSSVBUT1JTIiwiZmluYWxseSIsIm9uRmluYWxseSIsImlzRnVuY3Rpb24iLCJ0cnkiLCJjYWxsYmFja2ZuIiwiVUlVdGlscyIsImdldElubmVyRGltZW5zaW9uc0ZvckVsZW1lbnQiLCJjb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJjbGllbnRYIiwiY2xpZW50WSIsInRvdWNoZXMiLCJjcmVhdGVUcmFuc3BhcmVudFBhdHRlcm5DYW52YXMiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsInN1cHBvcnRzTVNCbG9iIiwibXNUb0Jsb2IiLCJwaHJhc2VzIiwiZmV0Y2giLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfc2hhcmVkX2xvZ19fIiwiaW5mbyIsIm9sZEtleSIsImRlZmF1bHRWYWx1ZSIsInBhdGhTZWdtZW50cyIsInZlbmRvciIsIm9wZXJhIiwic2VsZWN0IiwiaXRlbXMiLCJzZWxlY3RlZEl0ZW1zIiwibmV3SXRlbXMiLCJzZWxlY3RlZEl0ZW0iLCJnZXRKU09OUCIsIml0ZW1zUHJvcGVydHkiLCJleGlzdGluZ0NhdGVnb3J5IiwibmV3Q2F0ZWdvcnkiLCJnZXRTdHlsZU9iamVjdCIsInN0eWxlUHJvcGVydGllcyIsInN0eWxlT2JqZWN0IiwiY2FtZWxpemVkQXR0ciIsInRvVXBwZXJDYXNlIiwic3R5bGVFbGVtZW50IiwiZGVib3VuY2UiLCJ3YWl0IiwiaW1tZWRpYXRlIiwiY2FsbE5vdyIsIm91dGVyIiwidmlzaWJpbGl0eSIsIm1zT3ZlcmZsb3dTdHlsZSIsImJvZHkiLCJ3aWR0aE5vU2Nyb2xsIiwiaW5uZXIiLCJ3aWR0aFdpdGhTY3JvbGwiLCJmaW5kSW50ZWdlckZyYWN0aW9uIiwibWF4SXRlcmF0aW9ucyIsImJlc3REZWx0YSIsIk51bWJlciIsIk1BWF9WQUxVRSIsImJlc3RYIiwiYmVzdFkiLCJpdGVyYXRpb25zIiwiZGVsdGEiLCJuZXdEZWx0YSIsImRlY2ltYWxzIiwiZml4ZWQiLCJjYXBpdGFsaXplIiwibmV3T2JqIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX191dGlsc19icm93c2VyX18iLCJjcmVhdGVQcm9wZXJ0eSIsImFycmF5TGlrZSIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCIkZGVmaW5lUHJvcGVydHkiLCIkSlNPTiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19iYWJlbF9ydW50aW1lX2NvcmVfanNfb2JqZWN0X2dldF9wcm90b3R5cGVfb2ZfX19kZWZhdWx0IiwiSFRNTEVsZW1lbnQiLCJub2RlVHlwZSIsIm5vZGVOYW1lIiwidmVjdG9yIiwidmVjdG9yUmF0aW8iLCJkZXN0IiwiX2RlZXBNZXJnZSIsImlzUGxhaW5PYmplY3QiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYmFiZWxfcnVudGltZV9jb3JlX2pzX29iamVjdF9rZXlzX19fZGVmYXVsdCIsIl9rZXk0IiwicmV2ZXJzZWRTb3VyY2VzIiwicmV2ZXJzZSIsImlzRXh0ZW5kYWJsZSIsImNhbGxQcm9wTmFtZSIsIl9sZW40IiwiX2tleTUiLCJCbG9iIiwiVVJMIiwiQXJyYXlCdWZmZXIiLCJyYXdEYXRhIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19iYXNlNjRfXyIsIm1pbWVTdHJpbmciLCJhcnJheUJ1ZmZlciIsImludEFycmF5IiwiYmxvYiIsImNyZWF0ZU9iamVjdFVSTCIsImh0bWxJbWFnZSIsIm9sZEluZGV4IiwibmV3SW5kZXgiLCJieXRlQXJyYXkiLCJieXRlIiwibmV3T3B0aW9ucyIsImRhdGUiLCJwYWQiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJiSGFzT3duUHJvcGVydHkiLCJjb3VudCIsImVycm9ycyIsIm9uRmlubmlzaCIsIm9uU3VjY2VzcyIsIm9uRXJyb3IiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfX2FycmF5X3V0aWxzX18iLCJnT1BTIiwiJGFzc2lnbiIsIkEiLCJLIiwiZ2V0U3ltYm9scyIsImlzRW51bSIsImoiLCJNRVRBIiwiJGZhaWxzIiwid2tzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJERQIiwiZ09QTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsIndyYXAiLCJzeW0iLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCIkc2V0IiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiS0VZX1NUUiIsImVuY29kZSIsImNocjEiLCJjaHIyIiwiY2hyMyIsImVuYzEiLCJlbmMyIiwiZW5jMyIsImVuYzQiLCJidWYiLCJBcnJheVV0aWxzIiwiZmxhdCIsInRvRmxhdHRlbiIsIl9uYXZpZ2F0b3IiLCJhcHBWZXJzaW9uIiwiaXNJRTEwIiwiaXNJRTExIiwiYnJvd3NlclZlcnNpb24iLCJfUHJvbWlzZSIsImJ1aWx0SW5Qcm9wIiwiY3ljbGUiLCJzY2hlZHVsaW5nX3F1ZXVlIiwiVG9TdHJpbmciLCJ0aW1lciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9iYWJlbF9ydW50aW1lX2NvcmVfanNfc2V0X2ltbWVkaWF0ZV9fX2RlZmF1bHQiLCJjb25maWciLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYmFiZWxfcnVudGltZV9jb3JlX2pzX29iamVjdF9kZWZpbmVfcHJvcGVydHlfX19kZWZhdWx0Iiwic2NoZWR1bGUiLCJkcmFpbiIsIl90aGVuIiwib190eXBlIiwibm90aWZ5SXNvbGF0ZWQiLCJzdWNjZXNzIiwiZmFpbHVyZSIsIm1zZyIsInRyaWdnZXJlZCIsIml0ZXJhdGVQcm9taXNlcyIsInJlamVjdGVyIiwiaWR4IiwiTWFrZURlZldyYXBwZXIiLCJfX05QT19fIiwiZGVmX3dyYXBwZXIiLCJmaXJzdCIsIlByb21pc2VQcm90b3R5cGUiLCJtc2dzIiwicHJvbWlzZUZhY3RvcnkiLCIkdGFzayIsInB1bnljb2RlIiwidXRpbCIsIlVybCIsInByb3RvY29sIiwic2xhc2hlcyIsImF1dGgiLCJob3N0IiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsImhyZWYiLCJ1cmxQYXJzZSIsInJlbGF0aXZlIiwicmVzb2x2ZU9iamVjdCIsImlzU3RyaW5nIiwicHJvdG9jb2xQYXR0ZXJuIiwicG9ydFBhdHRlcm4iLCJzaW1wbGVQYXRoUGF0dGVybiIsInVud2lzZSIsImF1dG9Fc2NhcGUiLCJub25Ib3N0Q2hhcnMiLCJob3N0RW5kaW5nQ2hhcnMiLCJob3N0bmFtZVBhcnRQYXR0ZXJuIiwiaG9zdG5hbWVQYXJ0U3RhcnQiLCJ1bnNhZmVQcm90b2NvbCIsImphdmFzY3JpcHQiLCJqYXZhc2NyaXB0OiIsImhvc3RsZXNzUHJvdG9jb2wiLCJzbGFzaGVkUHJvdG9jb2wiLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJnb3BoZXIiLCJodHRwOiIsImh0dHBzOiIsImZ0cDoiLCJnb3BoZXI6IiwiZmlsZToiLCJxdWVyeXN0cmluZyIsInBhcnNlUXVlcnlTdHJpbmciLCJzbGFzaGVzRGVub3RlSG9zdCIsInUiLCJxdWVyeUluZGV4Iiwic3BsaXR0ZXIiLCJ1U3BsaXQiLCJyZXN0Iiwic2ltcGxlUGF0aCIsImxvd2VyUHJvdG8iLCJhdFNpZ24iLCJob3N0RW5kIiwiaGVjIiwibGFzdEluZGV4T2YiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUhvc3QiLCJpcHY2SG9zdG5hbWUiLCJob3N0cGFydHMiLCJuZXdwYXJ0IiwidmFsaWRQYXJ0cyIsIm5vdEhvc3QiLCJiaXQiLCJ0b0FTQ0lJIiwiYWUiLCJlc2MiLCJlbmNvZGVVUklDb21wb25lbnQiLCJlc2NhcGUiLCJxbSIsInJlbCIsInRrZXlzIiwidGsiLCJ0a2V5IiwicmtleXMiLCJyayIsInJrZXkiLCJyZWxQYXRoIiwiaXNTb3VyY2VBYnMiLCJpc1JlbEFicyIsIm11c3RFbmRBYnMiLCJyZW1vdmVBbGxEb3RzIiwic3JjUGF0aCIsInBzeWNob3RpYyIsImlzTnVsbE9yVW5kZWZpbmVkIiwiYXV0aEluSG9zdCIsImlzTnVsbCIsImhhc1RyYWlsaW5nU2xhc2giLCJ1cCIsImlzQWJzb2x1dGUiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImZyZWVHbG9iYWwiLCJtYXhJbnQiLCJiYXNlIiwidE1pbiIsInRNYXgiLCJza2V3IiwiZGFtcCIsImluaXRpYWxCaWFzIiwiaW5pdGlhbE4iLCJkZWxpbWl0ZXIiLCJyZWdleFB1bnljb2RlIiwicmVnZXhOb25BU0NJSSIsInJlZ2V4U2VwYXJhdG9ycyIsIm5vdC1iYXNpYyIsImludmFsaWQtaW5wdXQiLCJiYXNlTWludXNUTWluIiwic3RyaW5nRnJvbUNoYXJDb2RlIiwiUmFuZ2VFcnJvciIsIm1hcERvbWFpbiIsInBhcnRzIiwidWNzMmRlY29kZSIsImV4dHJhIiwidWNzMmVuY29kZSIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiZmxhZyIsImFkYXB0IiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiYmFzaWMiLCJvbGRpIiwidCIsImJhc2VNaW51c1QiLCJjb2RlUG9pbnQiLCJpbnB1dExlbmd0aCIsImJpYXMiLCJoYW5kbGVkQ1BDb3VudCIsImJhc2ljTGVuZ3RoIiwicSIsImN1cnJlbnRWYWx1ZSIsImhhbmRsZWRDUENvdW50UGx1c09uZSIsInFNaW51c1QiLCJ1Y3MyIiwidG9Vbmljb2RlIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicXMiLCJzZXAiLCJlcSIsInJlZ2V4cCIsIm1heEtleXMiLCJrc3RyIiwidnN0ciIsInN0cmluZ2lmeVByaW1pdGl2ZSIsImlzRmluaXRlIiwib2JqZWN0S2V5cyIsImtzIiwicmVzIiwicGVzZGsuYWRqdXN0bWVudHMuYnV0dG9uLnJlc2V0IiwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5icmlnaHRuZXNzIiwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5jbGFyaXR5IiwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5jb250cmFzdCIsInBlc2RrLmFkanVzdG1lbnRzLnRleHQuZXhwb3N1cmUiLCJwZXNkay5hZGp1c3RtZW50cy50ZXh0LmdhbW1hIiwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5oaWdobGlnaHRzIiwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5zYXR1cmF0aW9uIiwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5zaGFkb3dzIiwicGVzZGsuYWRqdXN0bWVudHMudGl0bGUuYmFzaWNzIiwicGVzZGsuYWRqdXN0bWVudHMudGl0bGUubmFtZSIsInBlc2RrLmFkanVzdG1lbnRzLnRpdGxlLnJlZmluZW1lbnRzIiwicGVzZGsuYnJ1c2gudGl0bGUuaGFyZG5lc3MiLCJwZXNkay5icnVzaC50aXRsZS5uYW1lIiwicGVzZGsuYnJ1c2gudGl0bGUuc2V0dGluZ3MiLCJwZXNkay5icnVzaC50aXRsZS53aWR0aCIsInBlc2RrLmNvbW1vbi5idXR0b24uY2FuY2VsIiwicGVzZGsuY29tbW9uLnRleHQubG9hZGluZyIsInBlc2RrLmNvbW1vbi50aXRsZS5lcnJvciIsInBlc2RrLmVkaXRvci5idXR0b24uZGlzY2FyZENoYW5nZXNXYXJuaW5nRGlzY2FyZCIsInBlc2RrLmVkaXRvci5idXR0b24uZGlzY2FyZENoYW5nZXNXYXJuaW5nS2VlcCIsInBlc2RrLmVkaXRvci5idXR0b24uZXhwb3J0IiwicGVzZGsuZWRpdG9yLmJ1dHRvbi5uZXdJbWFnZUNoYW5nZXNMb3N0V2FybmluZ05vIiwicGVzZGsuZWRpdG9yLmJ1dHRvbi5uZXdJbWFnZUNoYW5nZXNMb3N0V2FybmluZ1llcyIsInBlc2RrLmVkaXRvci50ZXh0LmRpc2NhcmRDaGFuZ2VzV2FybmluZyIsInBlc2RrLmVkaXRvci50ZXh0LmZvbnRMb2FkaW5nRXJyb3IiLCJwZXNkay5lZGl0b3IudGV4dC5pbWFnZUxvYWRpbmdFcnJvciIsInBlc2RrLmVkaXRvci50ZXh0LmltYWdlUmVzaXplZFdhcm5pbmdfbWF4RGltZW5zaW9ucyIsInBlc2RrLmVkaXRvci50ZXh0LmltYWdlUmVzaXplZFdhcm5pbmdfbWF4TWVnYVBpeGVscyIsInBlc2RrLmVkaXRvci50ZXh0LmludmFsaWRGaWxlVHlwZUVycm9yIiwicGVzZGsuZWRpdG9yLnRleHQubG9hZGluZ0ZvbnRzIiwicGVzZGsuZWRpdG9yLnRleHQubmV3SW1hZ2VDaGFuZ2VzTG9zdFdhcm5pbmciLCJwZXNkay5lZGl0b3IudGV4dC5yZW5kZXJpbmdFcnJvciIsInBlc2RrLmVkaXRvci50ZXh0LnJlc2l6aW5nIiwicGVzZGsuZWRpdG9yLnRleHQud2ViY2FtVW5hdmFpbGFibGVFcnJvciIsInBlc2RrLmVkaXRvci50aXRsZS5kaXNjYXJkQ2hhbmdlc1dhcm5pbmciLCJwZXNkay5lZGl0b3IudGl0bGUuZm9udExvYWRpbmdFcnJvciIsInBlc2RrLmVkaXRvci50aXRsZS5pbWFnZVJlc2l6ZWRXYXJuaW5nX21heERpbWVuc2lvbnMiLCJwZXNkay5lZGl0b3IudGl0bGUuaW1hZ2VSZXNpemVkV2FybmluZ19tYXhNZWdhUGl4ZWxzIiwicGVzZGsuZWRpdG9yLnRpdGxlLm5ld0ltYWdlQ2hhbmdlc0xvc3RXYXJuaW5nIiwicGVzZGsuZmlsdGVyLmFzc2V0LmlkZW50aXR5IiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9hZDE5MjAiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2FuY2llbnQiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2JsZWFjaGVkIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9ibGVhY2hlZGJsdWUiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2JsdWVzIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9ibHVlc2hhZG93cyIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfYnJlZXplIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9idyIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfY2Vsc2l1cyIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfY2hlc3QiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2NsYXNzaWMiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2NvbG9yZnVsIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9jb29sIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9jb3R0b25jYW5keSIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfY3JlYW15IiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9laWdodGllcyIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfZWxkZXIiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2V2ZW5pbmciLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2ZhbGwiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2ZpeGllIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9mb29kIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9mcmlkZ2UiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2Zyb250IiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9nbGFtIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9nb2JibGluIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9oaWdoY2FyYiIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfaGlnaGNvbnRyYXN0IiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9rMSIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfazIiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2s2IiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9rZHluYW1pYyIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfa2VlbiIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfbGVuaW4iLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2xpdGhvIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9sb21vMTAwIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9sdWNpZCIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfbWVsbG93IiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9uZWF0IiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9ub2dyZWVuIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9vcmNoaWQiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3BhbGUiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3BpdGNoZWQiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3BsYXRlIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9wb2xhNjY5IiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9wb2xhc3giLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3BybzQwMCIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfcXVvemkiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3NlcGlhaGlnaCIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfc2V0dGxlZCIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfc2V2ZW50aWVzIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9zaW4iLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3NvZnQiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3N0ZWVsIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9zdW1tZXIiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3N1bnNldCIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfdGVuZGVyIiwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF90ZXhhcyIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfdHdpbGlnaHQiLCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3dpbnRlciIsInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfeDQwMCIsInBlc2RrLmZpbHRlci50aXRsZS5uYW1lIiwicGVzZGsuZm9jdXMuYnV0dG9uLmdhdXNzaWFuIiwicGVzZGsuZm9jdXMuYnV0dG9uLmxpbmVhciIsInBlc2RrLmZvY3VzLmJ1dHRvbi5taXJyb3JlZCIsInBlc2RrLmZvY3VzLmJ1dHRvbi5ub25lIiwicGVzZGsuZm9jdXMuYnV0dG9uLnJhZGlhbCIsInBlc2RrLmZvY3VzLnRpdGxlLm5hbWUiLCJwZXNkay5mcmFtZS5hc3NldC5pbWdseV9mcmFtZV9hcnRfZGVjb3IiLCJwZXNkay5mcmFtZS5hc3NldC5pbWdseV9mcmFtZV9ibGFja19wYXNzZXBhcnRvdXQiLCJwZXNkay5mcmFtZS5hc3NldC5pbWdseV9mcmFtZV9kaWEiLCJwZXNkay5mcmFtZS5hc3NldC5pbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvdyIsInBlc2RrLmZyYW1lLmFzc2V0LmltZ2x5X2ZyYW1lX3dvb2RfcGFzc2VwYXJ0b3V0IiwicGVzZGsuZnJhbWUuYnV0dG9uLmZpbGwiLCJwZXNkay5mcmFtZS5idXR0b24ucmVwbGFjZSIsInBlc2RrLmZyYW1lLnRpdGxlLm5hbWUiLCJwZXNkay5mcmFtZS50aXRsZS5vcGFjaXR5IiwicGVzZGsuZnJhbWUudGl0bGUud2lkdGgiLCJwZXNkay5saWJyYXJ5LmJ1dHRvbi5maWxlRHJvcFpvbmUiLCJwZXNkay5saWJyYXJ5LmJ1dHRvbi5maWxlRHJvcFpvbmVIb3ZlcmVkIiwicGVzZGsubGlicmFyeS5wbGFjZWhvbGRlci5zZWFyY2giLCJwZXNkay5saWJyYXJ5LnRleHQubm9SZXN1bHRzIiwicGVzZGsubGlicmFyeS50aXRsZS5uYW1lIiwicGVzZGsub3ZlcmxheS5hc3NldC5pbWdseV9vdmVybGF5X2Jva2VoIiwicGVzZGsub3ZlcmxheS5hc3NldC5pbWdseV9vdmVybGF5X2Nob3AiLCJwZXNkay5vdmVybGF5LmFzc2V0LmltZ2x5X292ZXJsYXlfY2xvdWRzIiwicGVzZGsub3ZlcmxheS5hc3NldC5pbWdseV9vdmVybGF5X2dvbGRlbiIsInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV9ncmFpbiIsInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV9oZWFydHMiLCJwZXNkay5vdmVybGF5LmFzc2V0LmltZ2x5X292ZXJsYXlfbGlnaHRsZWFrMSIsInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV9saWdodGxlYWsyIiwicGVzZGsub3ZlcmxheS5hc3NldC5pbWdseV9vdmVybGF5X21ldGFsIiwicGVzZGsub3ZlcmxheS5hc3NldC5pbWdseV9vdmVybGF5X21vc2FpYyIsInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV9wYWludGluZyIsInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV9wYXBlciIsInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV9yYWluIiwicGVzZGsub3ZlcmxheS5hc3NldC5pbWdseV9vdmVybGF5X3ZpbnRhZ2UiLCJwZXNkay5vdmVybGF5LmFzc2V0LmltZ2x5X292ZXJsYXlfd2FsbDEiLCJwZXNkay5vdmVybGF5LmFzc2V0LmltZ2x5X292ZXJsYXlfd2FsbDIiLCJwZXNkay5vdmVybGF5LmFzc2V0LmltZ2x5X292ZXJsYXlfd29vZCIsInBlc2RrLm92ZXJsYXkuYnV0dG9uLm5vbmUiLCJwZXNkay5vdmVybGF5LnRpdGxlLmJsZW5kaW5nIiwicGVzZGsub3ZlcmxheS50aXRsZS5jb2xvckJ1cm4iLCJwZXNkay5vdmVybGF5LnRpdGxlLmRhcmtlbiIsInBlc2RrLm92ZXJsYXkudGl0bGUuaGFyZExpZ2h0IiwicGVzZGsub3ZlcmxheS50aXRsZS5saWdodGVuIiwicGVzZGsub3ZlcmxheS50aXRsZS5tdWx0aXBseSIsInBlc2RrLm92ZXJsYXkudGl0bGUubmFtZSIsInBlc2RrLm92ZXJsYXkudGl0bGUubm9uZSIsInBlc2RrLm92ZXJsYXkudGl0bGUubm9ybWFsIiwicGVzZGsub3ZlcmxheS50aXRsZS5vdmVybGF5IiwicGVzZGsub3ZlcmxheS50aXRsZS5zY3JlZW4iLCJwZXNkay5vdmVybGF5LnRpdGxlLnNvZnRMaWdodCIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnMiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FsaWVuIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbmdlbCIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW5ncnkiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FueGlvdXMiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FzbGVlcCIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYXR0ZW50aW9uIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19iYWJ5X2NoaWNrZW4iLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JhdG1hbiIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmVlciIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmxhY2siLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JsdWUiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JsdXNoIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ib3hlciIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYnVzaW5lc3MiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2NoaWNrZW4iLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2Nvb2wiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2NyeSIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZGVjZWFzZWQiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2RldmlsIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19kdWNrZmFjZSIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZnVyaW91cyIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZ3JpbiIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZ3VpdGFyIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19oYXJyeV9wb3R0ZXIiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hpcHBpZSIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGl0bWFuIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19odW1vdXJvdXMiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2lkZWEiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2ltcGF0aWVudCIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfa2lzcyIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfa2lzc2VzIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19sYXVnaCIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbG91ZF9jcnkiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2xvdmluZyIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbWFza2VkIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19tdXNpYyIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmVyZCIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmluamEiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX25vdF9zcGVha2luZ190b195b3UiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3BpZyIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcHVtcGtpbiIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcXVlc3Rpb24iLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3JhYmJpdCIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2FkIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zaWNrIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19za2F0ZWJvYXJkIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19za3VsbCIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2xlZXB5IiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zbWlsZSIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc21va2luZyIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc29iYmluZyIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3RhciIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3RlYW1pbmdfZnVyaW91cyIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3VuYmF0aGluZyIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfdGlyZWQiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3Rvbmd1ZV9vdXRfd2luayIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2F2ZSIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2lkZV9ncmluIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc193aW5rIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc193cmVzdGxlciIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXMiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2Fycm93XzAyIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19hcnJvd18wMyIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDEiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA0IiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wNiIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDgiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzExIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xMiIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTMiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE1IiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xOCIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTkiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzIwIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8yOCIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMzIiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzM1IiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8zNiIsInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfc3ByYXlfMDEiLCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzAzIiwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wNCIsInBlc2RrLnN0aWNrZXIuYnV0dG9uLmZpbGwiLCJwZXNkay5zdGlja2VyLmJ1dHRvbi5uZXciLCJwZXNkay5zdGlja2VyLmJ1dHRvbi5yZXBsYWNlIiwicGVzZGsuc3RpY2tlci50ZXh0LnN0aWNrZXJMb2FkaW5nRXJyb3IiLCJwZXNkay5zdGlja2VyLnRpdGxlLm5hbWUiLCJwZXNkay5zdGlja2VyLnRpdGxlLm9wYWNpdHkiLCJwZXNkay50ZXh0LmJ1dHRvbi5uZXciLCJwZXNkay50ZXh0LnBsYWNlaG9sZGVyLmRlZmF1bHRUZXh0IiwicGVzZGsudGV4dC50aXRsZS5iYWNrZ3JvdW5kIiwicGVzZGsudGV4dC50aXRsZS5mb250IiwicGVzZGsudGV4dC50aXRsZS5saW5lIiwicGVzZGsudGV4dC50aXRsZS5uYW1lIiwicGVzZGsudGV4dC50aXRsZS5zaXplIiwicGVzZGsudGV4dC50aXRsZS5zcGFjaW5nIiwicGVzZGsudGV4dGRlc2lnbi50aXRsZS5uYW1lIiwicGVzZGsudHJhbnNmb3JtLmFzc2V0LmltZ2x5X3RyYW5zZm9ybXNfY29tbW9uLmltZ2x5X3RyYW5zZm9ybV9jb21tb25fMTYtOSIsInBlc2RrLnRyYW5zZm9ybS5hc3NldC5pbWdseV90cmFuc2Zvcm1zX2NvbW1vbi5pbWdseV90cmFuc2Zvcm1fY29tbW9uXzQtMyIsInBlc2RrLnRyYW5zZm9ybS5hc3NldC5pbWdseV90cmFuc2Zvcm1zX2NvbW1vbi5pbWdseV90cmFuc2Zvcm1fY29tbW9uX2N1c3RvbSIsInBlc2RrLnRyYW5zZm9ybS5hc3NldC5pbWdseV90cmFuc2Zvcm1zX2NvbW1vbi5pbWdseV90cmFuc2Zvcm1fY29tbW9uX3NxdWFyZSIsInBlc2RrLnRyYW5zZm9ybS5hc3NldC5pbWdseV90cmFuc2Zvcm1zX2NvbW1vbi5uYW1lIiwicGVzZGsudHJhbnNmb3JtLmFzc2V0LmltZ2x5X3RyYW5zZm9ybXNfZmFjZWJvb2suaW1nbHlfdHJhbnNmb3JtX2ZhY2Vib29rX2FkIiwicGVzZGsudHJhbnNmb3JtLmFzc2V0LmltZ2x5X3RyYW5zZm9ybXNfZmFjZWJvb2suaW1nbHlfdHJhbnNmb3JtX2ZhY2Vib29rX2NvdmVyIiwicGVzZGsudHJhbnNmb3JtLmFzc2V0LmltZ2x5X3RyYW5zZm9ybXNfZmFjZWJvb2suaW1nbHlfdHJhbnNmb3JtX2ZhY2Vib29rX3Bvc3QiLCJwZXNkay50cmFuc2Zvcm0uYXNzZXQuaW1nbHlfdHJhbnNmb3Jtc19mYWNlYm9vay5pbWdseV90cmFuc2Zvcm1fZmFjZWJvb2tfcHJvZmlsZSIsInBlc2RrLnRyYW5zZm9ybS5hc3NldC5pbWdseV90cmFuc2Zvcm1zX2ZhY2Vib29rLm5hbWUiLCJwZXNkay50cmFuc2Zvcm0uYnV0dG9uLnJlc2V0IiwicGVzZGsudHJhbnNmb3JtLnBsYWNlaG9sZGVyLmhlaWdodCIsInBlc2RrLnRyYW5zZm9ybS5wbGFjZWhvbGRlci53aWR0aCIsInBlc2RrLnRyYW5zZm9ybS50aXRsZS5uYW1lIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19kZWZhdWx0c19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19ldmVudHNfXyIsIkNMT1NFIiwiT1BFUkFUSU9OX0NSRUFURUQiLCJPUEVSQVRJT05fVVBEQVRFRCIsIk9QRVJBVElPTl9SRU1PVkVEIiwiRURJVE9SX1JFU0laRSIsIlpPT01fQ0hBTkdFRCIsIkhJU1RPUllfVVBEQVRFRCIsIkhJU1RPUllfQkVGT1JFX1VORE8iLCJISVNUT1JZX0JFRk9SRV9SRURPIiwiRkVBVFVSRVNfRElTQUJMRUQiLCJGRUFUVVJFU19FTkFCTEVEIiwiRkVBVFVSRVNfVVBEQVRFRCIsIlRFWFRfU0NBTEVEIiwiVFJBTlNGT1JNX1JFU0laRSIsIlRSQU5TRk9STV9SRUFQUExZX1JBVElPIiwiQnJ1c2hlcyIsIlJhZGlhbEJydXNoIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX190cmFuc2Zvcm1fcmF0aW9fY2F0ZWdvcmllc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb250c19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX190ZXh0X2Rlc2lnbl9mb250c19fIiwidW5pdHNQZXJFbSIsImFzY2VuZGVyIiwiZGVzY2VuZGVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X3Bob3RvZWRpdG9yc2RrX19fZGVmYXVsdCIsInNldE1heExpc3RlbmVycyIsIl9jYW5Ccm9hZGNhc3QiLCJmaW5hbFN0YXRlIiwiaXNJdGVyYWJsZSIsImdldEl0ZXJhdG9yIiwiU0NSRUVOUyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfX3NjcmVlbnNfbG9hZGluZ19zY3JlZW5fY29tcG9uZW50X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfX3NjcmVlbnNfZWRpdG9yX3NjcmVlbl9jb21wb25lbnRfXyIsIkFwcENvbXBvbmVudCIsIl90aGlzJHByb3BzIiwiX3ByZWxvYWRlcklzQ29tcGxldGUiLCJfb25QcmVsb2FkZXJEb25lIiwiX2ltYWdlSXNDb21wbGV0ZSIsImNvbXBsZXRlIiwiX29uSW1hZ2VEb25lIiwiaW5pdGlhbFNjcmVlbkNvbXBvbmVudCIsImdldFRoZW1lIiwic2NyZWVuT3B0aW9ucyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfX2Jhc2VfY29tcG9uZW50X18iLCJfb25Mb2FkaW5nRG9uZSIsInNjcmVlbk5hbWUiLCJfY3VycmVudFNjcmVlbiIsIl9jdXJyZW50U2NyZWVuMiIsIl9zdGF0ZSIsIlNjcmVlbkNvbXBvbmVudCIsIkFwcENvbnRhaW5lciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fbW9kYWxfY29udGFpbmVyX2NvbXBvbmVudF9fIiwibW9kYWxNYW5hZ2VyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X3NoYXJlZF9tYW5hZ2Vyc19tb2RhbF9tYW5hZ2VyX18iLCJfcmVuZGVyQ3VycmVudFNjcmVlbiIsIi13ZWJraXQtdG91Y2gtY2FsbG91dCIsIi13ZWJraXQtdXNlci1zZWxlY3QiLCIta2h0bWwtdXNlci1zZWxlY3QiLCItbW96LXVzZXItc2VsZWN0IiwiLW1zLXVzZXItc2VsZWN0IiwidXNlci1zZWxlY3QiLCJmb250LXNtb290aCIsIi13ZWJraXQtZm9udC1zbW9vdGhpbmciLCItbW96LW9zeC1mb250LXNtb290aGluZyIsIk1vZGFsQ29udGFpbmVyQ29tcG9uZW50IiwiX29uT3ZlcmxheUNsaWNrIiwiX21vZGFsTWFuYWdlciIsImdldE1vZGFscyIsIm92ZXJsYXlWaXNpYmxlIiwiX29uTW9kYWxNYW5hZ2VyVXBkYXRlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19tb2RhbHNfbG9hZGluZ19tb2RhbF9jb21wb25lbnRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fbW9kYWxzX3dhcm5pbmdfbW9kYWxfY29tcG9uZW50X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX21vZGFsc19lcnJvcl9tb2RhbF9jb21wb25lbnRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfX21vZGFsc19pbnB1dF9tb2RhbF9jb21wb25lbnRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fbW9kYWxzX3Byb2dyZXNzX21vZGFsX2NvbXBvbmVudF9fIiwib25DbG9zZSIsIl9vbk1vZGFsQ2xvc2VkIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fdHJhbnNpdGlvbl9fIiwiT3ZlcmxheSIsIl9yZW5kZXJNb2RhbHMiLCJyZW5kZXJlZCIsIkxvYWRpbmdNb2RhbENvbXBvbmVudCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fbW9kYWxfY29tcG9uZW50X18iLCJXYXJuaW5nTW9kYWxDb21wb25lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX21vZGFsX2NvbXBvbmVudF9fIiwiRXJyb3JNb2RhbENvbXBvbmVudCIsIlByb2dyZXNzTW9kYWxDb21wb25lbnQiLCJQcm9ncmVzc0JhciIsIl9nZXRQcm9ncmVzc0JhclN0eWxlIiwiSW5wdXRNb2RhbENvbXBvbmVudCIsIl9vbktleVByZXNzIiwiX29uQWNjZXB0IiwiX3RleHRBcmVhIiwiX29uQ2FuY2VsIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19tb2RhbF9jb21wb25lbnRfXyIsIklucHV0Q29udGFpbmVyIiwiVGV4dEFyZWEiLCJhdXRvRm9jdXMiLCJvbktleVByZXNzIiwiQnV0dG9uQmFyIiwiJjpob3ZlciIsImZsb2F0IiwidGV4dGFyZWEiLCJzcGFuIiwiRWRpdG9yU2NyZWVuQ29tcG9uZW50IiwiX3RoaXMkY29udGV4dCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fbGliX2VkaXRvcl9fIiwiX3N0YXJ0RWRpdG9yIiwiX29uUmVuZGVyRXJyb3IiLCJfb25JbWFnZVJlc2l6ZSIsIl9vbkVkaXRvclJlc2V0IiwiX29yaWdpbmFsVG9vbHNPcHRpb24iLCJfbmVlZHNGb3JjZUNyb3AiLCJpc1JlYWR5IiwiX2hhc1N3aXRjaGVkQ29udHJvbHMiLCJzd2l0Y2hUb0luaXRpYWxDb250cm9scyIsImxvYWRpbmdNb2RhbCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfc2hhcmVkX21hbmFnZXJzX21vZGFsX21hbmFnZXJfXyIsImRpc3BsYXlMb2FkaW5nIiwiZGlzcGxheVdhcm5pbmciLCJfZW1pdEV2ZW50IiwibmVlZHNSYXRpb0ZvcmNlQ3JvcCIsInRyYW5zZm9ybVJhdGlvTWFuYWdlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfc2hhcmVkX21hbmFnZXJzX3RyYW5zZm9ybV9yYXRpb19tYW5hZ2VyX18iLCJoYXNSYXRpb1ZhbHVlIiwic3dpdGNoVG9Gb3JjZUNyb3BDb250cm9scyIsInN3aXRjaFRvRGVmYXVsdENvbnRyb2xzIiwiY29udHJvbE5hbWUiLCJnZXRGaXJzdEVuYWJsZWRDb250cm9sTmFtZSIsIm9sZFRvb2xzIiwiaW5pdGlhbFN0YXRlIiwiQ29udHJvbHNDbGFzcyIsImxlYXZlUHJvbWlzZSIsIm9uTGVhdmUiLCJsZWF2YWJsZSIsImRpc2FibGVCcm9hZGNhc3QiLCJnZXRDaGlsZENvbnRleHQiLCJvbkVudGVyIiwiZW5hYmxlQnJvYWRjYXN0IiwiX2NvbnRyb2xzJGNvbnN0cnVjdG9yIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fZWRpdG9yX2NvbnRyb2xzX2NvbnRyb2xzX2NvbXBvbmVudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fZWRpdG9yX2NvbnRyb2xzX2NhbnZhc19jb250cm9sc19jb21wb25lbnRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fZWRpdG9yX2NhbnZhc19jb21wb25lbnRfXyIsIlRhYmxlQ29udGFpbmVyIiwiX3RhYmxlQ29udGFpbmVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19lZGl0b3JfbmF2aWdhdGlvbl9uYXZpZ2F0aW9uX2NvbXBvbmVudF9fIiwib25Db250cm9sU3dpdGNoIiwiX2VkaXRvcjIiLCJFeHBvcnRlciIsIl9kb3dubG9hZCIsInJlbmRlclR5cGUiLCJfZ2V0UmVuZGVyVHlwZSIsIl9kb3dubG9hZERhdGEiLCJEQVRBVVJMIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX3NoYXJlZF9kb3dubG9hZGVyX2ZpbGVfZG93bmxvYWRlcl9fIiwiZG93bmxvYWREYXRhVVJMIiwiTVNCTE9CIiwiZG93bmxvYWRNU0Jsb2IiLCJGaWxlRG93bmxvYWRlciIsImJhc2VOYW1lIiwiY3JlYXRlQmxvYlVSTEZyb21EYXRhVVJMIiwiZ2V0RXh0ZW5zaW9uRnJvbURhdGFVUkwiLCJsaW5rIiwiY2xpY2siLCJtc1NhdmVCbG9iIiwiSW1hZ2VSZXNpemVyIiwiX2ltYWdlIiwiX21heFBpeGVscyIsIl9tYXhEaW1lbnNpb25zIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19nbG9iYWxzX18iLCJleGNlZWRzTWF4UGl4ZWxzIiwiZXhjZWVkc01heERpbWVuc2lvbnMiLCJfZ2V0RGltZW5zaW9uc0J5TWF4UGl4ZWxzIiwiX2NyZWF0ZVJlc2l6ZWRJbWFnZUNhbnZhcyIsInJhdGlvSFYiLCJyYXRpb1ZIIiwic3FydCIsIkVkaXRvck9wZXJhdGlvbnMiLCJfbWFwIiwiX3N0YWNrIiwiZ2V0T3BlcmF0aW9uc1N0YWNrIiwiX3ByZWZlcnJlZE9yZGVyIiwiX2F2YWlsYWJsZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9waG90b2VkaXRvcnNka19fX2RlZmF1bHQiLCJvcGVyYXRpb25OYW1lIiwiT3BlcmF0aW9uIiwiX2ZpeFN0YWNrIiwiYnJvYWRjYXN0IiwicmVtb3ZlQXQiLCJzZXREaXJ0eSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19iYWJlbF9ydW50aW1lX2NvcmVfanNfb2JqZWN0X2tleXNfX19kZWZhdWx0IiwiaGFzQ2hhbmdlcyIsImNoYW5nZXMiLCJvcHRpb25zRXF1YWwiLCJFZGl0b3JDb250cm9scyIsIl9pbnZhbGlkT3BlcmF0aW9uc1NlZW4iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcGhvdG9lZGl0b3JzZGtfX19kZWZhdWx0IiwiQ29udHJvbCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZ2xvYmFsc19fIiwibWlzc2luZ09wZXJhdGlvbnMiLCJpc0F2YWlsYWJsZSIsIkVkaXRvckZlYXR1cmVzIiwiX2ZlYXR1cmVzIiwiaXNFbmFibGVkQnlPcHRpb25zIiwiY2FwaXRhbGl6ZWRJZGVudGlmaWVyIiwib3B0aW9uRW5hYmxlZCIsImlkZW50aWZpZXJzIiwiZHJhZyIsIm5ldyIsIkVkaXRvclpvb20iLCJfaXNEZWZhdWx0Wm9vbSIsIl96b29tIiwiZ2V0Wm9vbSIsIl90YXJnZXRab29tIiwiX3pvb21MZXZlbHMiLCJ6IiwiX2RlZmF1bHRMZXZlbCIsIl9jYWxjdWxhdGVEZWZhdWx0Wm9vbUxldmVsIiwicmVjYWxjdWxhdGVEZWZhdWx0TGV2ZWwiLCJpbnN0YW50IiwibmV3Wm9vbSIsIl9nZXRDbG9zZXN0Wm9vbUxldmVsIiwiX2NsYW1wIiwiZGVmYXVsdFpvb20iLCJtYXhab29tIiwibWluWm9vbSIsIm1pbmltdW0iLCJfdHJhbnNpdGlvbiIsIm9uWm9vbURvbmUiLCJfc2V0Iiwic2V0VGV4dHVyZVF1YWxpdHkiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfbGliX3RyYW5zaXRpb25fXyIsImR1cmF0aW9uIiwiZWFzaW5nIiwib25VcGRhdGUiLCJvbkRvbmUiLCJ6b29tTGV2ZWwiLCJjbG9zZXN0IiwiX3ByZXZpb3VzWm9vbSIsInNldFpvb20iLCJmaW5hbERpbWVuc2lvbnMiLCJyZXNpemVWZWN0b3JUb0ZpdCIsIkVhc2luZ0Z1bmN0aW9ucyIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJ0YXJnZXRWYWx1ZXMiLCJfb2JqIiwiX2luaXRpYWxPYmoiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcGhvdG9lZGl0b3JzZGtfXyIsIl90YXJnZXRWYWx1ZXMiLCJfc3RhcnRlZEF0IiwidGltZVBhc3NlZCIsImVhc2luZ0ZuIiwidGltZVByb2dyZXNzIiwiaW5pdGlhbFZhbHVlIiwidGFyZ2V0VmFsdWUiLCJFZGl0b3JIaXN0b3J5IiwiX3VuZG9JdGVtcyIsIl9yZWRvSXRlbXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX2dsb2JhbHNfXyIsImdldFVuZG9JdGVtcyIsImdldFJlZG9JdGVtcyIsInNjb3BlIiwiZ3JvdXBlZCIsImxhc3RJdGVtIiwiY3VycmVudEl0ZW0iLCJ1bmRvSXRlbSIsInJlZG9JdGVtIiwiZmlsdGVyRnVuYyIsIlNlcmlhbGl6YXRpb24iLCJzZXJpYWxpemVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19zZXJpYWxpemVyX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2Rlc2VyaWFsaXplcl9fIiwiaGFkUnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIm9sZFJ1bnRpbWUiLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJDb250ZXh0Iiwic2tpcFRlbXBSZXNldCIsInNlbnQiLCJfc2VudCIsImRlbGVnYXRlIiwibWV0aG9kIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFicnVwdCIsImZpbmFsbHlFbnRyeSIsImFmdGVyTG9jIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInRyeUNhdGNoIiwibWFrZUludm9rZU1ldGhvZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwidW53cmFwcGVkIiwicmV0dXJuIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiRm9udCIsIkFSUkFZIiwiRk9OVF9TVFlMRVMiLCJpdGFsaWMiLCJHb29nbGVGb250TG9hZGVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19iYXNlX2ZvbnRfbG9hZGVyX18iLCJfYWRkU3R5bGVzaGVldFRhZyIsImZhbWlsaWVzIiwiX2dldEZhbWlsaWVzU3RyaW5nIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRGb250U3R5bGUiLCJmYW1pbHlTdHJpbmdzIiwidmFyaWFudHMiLCJ2YXJpYW50c1N0cmluZyIsIm5hbWVTdHJpbmciLCJGb250T2JzZXJ2ZXIiLCJmb250VmFyaWF0aW9uIiwiX2ZvbnRWYXJpYXRpb24iLCJfZGVmYXVsdEZvbnRSdWxlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm9udF9ydWxlcl9fIiwiX2N1c3RvbUZvbnRSdWxlciIsInN0YXJ0ZWRBdCIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJnZXRXaWR0aCIsImNsZWFySW50ZXJ2YWwiLCJGb250UnVsZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfc2hhcmVkX2Fzc2V0c19mb250X3ZhcmlhdGlvbl9fIiwiX2NyZWF0ZVJ1bGVyIiwiX3J1bGVyIiwiaW5uZXJUZXh0IiwiX3NldFJ1bGVyU3R5bGUiLCJjc3NUZXh0IiwiRmlsZUZvbnRMb2FkZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX2Jhc2VfZm9udF9sb2FkZXJfXyIsImZvbnRGYWNlc0NTUyIsImdldEZpbGVQYXRoIiwidjIwMVNlcmlhbGl6ZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXzJfMF8wX3NlcmlhbGl6ZXJfXyIsInYyMDFEZXNlcmlhbGl6ZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXzJfMF8wX2Rlc2VyaWFsaXplcl9fIiwidjMxMFNlcmlhbGl6ZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXzNfMF8wX3NlcmlhbGl6ZXJfXyIsImdldExheW91dCIsInYzMTBEZXNlcmlhbGl6ZXIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXzNfMF8wX2Rlc2VyaWFsaXplcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X3NoYXJlZF9tYW5hZ2Vyc190ZXh0X2Rlc2lnbl9tYW5hZ2VyX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfc2hhcmVkX21hbmFnZXJzX2ZvbnRfbWFuYWdlcl9fIiwiTmF2aWdhdGlvbkNvbXBvbmVudCIsImlzSG92ZXJpbmciLCJfb25Nb3VzZUxlYXZlIiwibmF2SGVpZ2h0IiwiX25hdmlnYXRpb24iLCJfZ3JhZGllbnQiLCJzZWN0aW9ucyIsInNlY3Rpb24iLCJfZ2V0SXRlbUNvdW50IiwibWFrZUl0ZW0iLCJtYXhJbmRleCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fbmF2aWdhdGlvbl9pdGVtX2NvbXBvbmVudF9fIiwic2hvd1RpdGxlIiwiX29uSXRlbUNsaWNrIiwibWF4QW5pbWF0aW9uRGVsYXkiLCJlbGVtZW50cyIsIm1ha2VTZXBhcmF0b3IiLCJpc1NlcGFyYXRvciIsImdyYWRpZW50U3R5bGUiLCJOYXZpZ2F0aW9uQ29udGFpbmVyIiwib25Nb3VzZUxlYXZlIiwiTmF2aWdhdGlvbiIsIm9uTW91c2VFbnRlciIsIl9vbk1vdXNlRW50ZXIiLCJOYXZpZ2F0aW9uT3ZlcmxheSIsImxpc3RTdHlsZVR5cGUiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiTmF2aWdhdGlvbkl0ZW1Db21wb25lbnQiLCJTZXBhcmF0b3JJdGVtIiwidGl0bGVDb250YWluZXJTdHlsZSIsIk5hdmlnYXRpb25JdGVtIiwiZGF0YS1pZGVudGlmaWVyIiwiSW5hY3RpdmVJY29uIiwiQWN0aXZlSWNvbiIsIlRpdGxlQ29udGFpbmVyIiwid2l0aFRpdGxlIiwiQmFzZUl0ZW0iLCI6aG92ZXIgPiBpbWc6Zmlyc3QtY2hpbGQiLCI6aG92ZXIgPiBkaXYgPiBkaXYiLCJ0ZXh0U2hhZG93IiwiQ2FudmFzQ29tcG9uZW50IiwiX29uRWRpdG9yUmVzaXplIiwicmVzaXplVG8iLCJfY29udGV4dCIsIl9jYW52YXMiLCJzZXRDYW52YXMiLCJzZXRQYWRkaW5nIiwiQ2FudmFzIiwiQ2FudmFzSGVhZGVyQ29udHJvbHNDb21wb25lbnQiLCJfb25IaXN0b3J5VXBkYXRlZCIsIl9vbkZlYXR1cmVzVXBkYXRlZCIsInVuZG8iLCJyZWRvIiwiZXhwb3J0T3B0aW9ucyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9zaGFyZWRfbWFuYWdlcnNfbW9kYWxfbWFuYWdlcl9fIiwidW5kb0J1dHRvbkNvbXBvbmVudCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19faGVhZGVyX2NhbnZhc19oZWFkZXJfaWNvbl9idXR0b25fY29tcG9uZW50X18iLCJpc1VuZG9BdmFpbGFibGUiLCJfb25VbmRvQ2xpY2siLCJyZWRvQnV0dG9uQ29tcG9uZW50IiwiaXNSZWRvQXZhaWxhYmxlIiwiX29uUmVkb0NsaWNrIiwiQ2VudGVyZWRDb250cm9sR3JvdXAiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX2hlYWRlcl9jYW52YXNfaGVhZGVyX3pvb21fY29udHJvbF9jb21wb25lbnRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9faGVhZGVyX2NhbnZhc19oZWFkZXJfdGV4dF9idXR0b25fY29tcG9uZW50X18iLCJfb25FeHBvcnRDbGljayIsIl9vbkNsb3NlQ2xpY2siLCJDYW52YXNIZWFkZXJDb250cm9scyIsIl9yZW5kZXJJdGVtcyIsIkNhbnZhc0hlYWRlclRleHRCdXR0b25Db21wb25lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2NhbnZhc19oZWFkZXJfYnV0dG9uX2NvbXBvbmVudF9fIiwiQ2FudmFzSGVhZGVySWNvbkJ1dHRvbkNvbXBvbmVudCIsIkNhbnZhc0hlYWRlclpvb21Db250cm9sIiwiX3JlbmRlclpvb21MZXZlbCIsIl9pc1pvb21EaXNhYmxlZCIsImluIiwiWm9vbUNvbnRyb2wiLCJkYXRhLWRpc2FibGVkIiwiX29uWm9vbU91dENsaWNrIiwiTGFiZWwiLCJfb25ab29tSW5DbGljayIsImJvcmRlclN0eWxlIiwiTG9hZGluZ1NjcmVlbkNvbXBvbmVudCIsIl9jYW5IaWRlQWZ0ZXJMb2FkZWQiLCJzdGFydEltYWdlVmlzaWJsZSIsImlkbGVJbWFnZVZpc2libGUiLCJpbmRpY2F0b3JWaXNpYmxlIiwiX2ltYWdlU3dpdGNoVGltZW91dCIsIkltYWdlQ29udGFpbmVyIiwiaGlkZGVuIiwiU3RhcnRJbWFnZSIsIklkbGVJbWFnZSIsIlByZWxvYWRlciIsIl9hc3NldHMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2VkaXRvcl9fIiwiX2FwcGVuZENvbnRyb2xzQXNzZXRzIiwiZ2V0UHJlbG9hZEFzc2V0cyIsImFzc2V0c0NvdW50IiwiYXNzZXRzTG9hZGVkIiwiYXNzZXRMb2FkZWQiLCJhc3NldExvYWRGYWlsZWQiLCJyZXRpbmFBc3NldCIsImFzc2V0UGF0aCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfX2NvbXBvbmVudHNfc3VmZml4ZWRfdGV4dF9pbnB1dF9jb21wb25lbnRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9faW1hZ2VfXyIsIkxpYnJhcnlQcm92aWRlciIsIkxpYnJhcnlDYXRlZ29yeSIsIl9jb3ZlckltYWdlIiwiX2NvdmVySW1hZ2VMb2FkZWQiLCJnZXRDb3ZlckltYWdlIiwiY292ZXJJbWFnZSIsIkxpYnJhcnlJbWFnZSIsIl90aHVtYkltYWdlIiwiX3RodW1iSW1hZ2VMb2FkZWQiLCJnZXRUaHVtYlVybCIsInJhd1VybCIsInRodW1iVXJsIiwiYXV0aG9yTmFtZSIsImF1dGhvckF2YXRhciIsIkRlbGF5ZWRKb2JRdWV1ZSIsImpvYnMiLCJfam9icyIsIl9jdXJyZW50Sm9iIiwiX2N1cnJlbnRKb2JJbmRleCIsIl9sYXN0Sm9iRmluaXNoZWQiLCJ0aW1lTGVmdCIsIkZ1bGxDb250YWluZXIiLCJDb250cm9sSXRlbSIsIjphZnRlciIsIjpob3ZlcjphZnRlciIsImFuaW1hdGVkIiwiQ29udHJvbEl0ZW1UZXh0U3R5bGVzIiwiQ29udHJvbEl0ZW1UaXRsZSIsIkNvbnRyb2xJdGVtQWN0aXZlT3ZlcmxheSIsIkNvbnRyb2xJdGVtT3ZlcmxheSIsInR3b0NvbHVtbnMiLCJ3aXRoVGV4dCIsImJvcmRlckNvbG9yIiwiQmFzZUNvbnRyb2xzIiwiX2luaXRpYWxPcHRpb25zIiwiX29uT3BlcmF0aW9uUmVtb3ZlZCIsIl9vbk9wZXJhdGlvblVwZGF0ZWQiLCJvbk9wZXJhdGlvblJlbW92ZWQiLCJvbk9wZXJhdGlvblVwZGF0ZWQiLCJpbml0aWFsIiwibmV3U2hhcmVkU3RhdGUiLCJtYXBPcGVyYXRpb25zVG9TaGFyZWRTdGF0ZSIsImdldFN0YXRlIiwiaGFzSW5pdGlhbFN0YXRlIiwiYWRkU25hcHNob3QiLCJfc2F2ZU9wZXJhdGlvbnNPcHRpb25zIiwiX29uRW50ZXIiLCJfY29udGV4dCRlZGl0b3IiLCJnZXRJdGVtcyIsIm9wZXJhdGlvbkhhc0NoYW5nZXMiLCJzb21lIiwiaW5pdGlhbE9wdGlvbnMiLCJzbmFwc2hvdE9wdGlvbnMiLCJvbkJlZm9yZUxlYXZlIiwiX3Jlc3BvbnNlIiwiX29uTGVhdmUiLCJfY29udGV4dCRlZGl0b3IyIiwiX3Nob3VsZEFkZEdsb2JhbEhpc3RvcnlTbmFwc2hvdCIsIl9nZXRHbG9iYWxIaXN0b3J5RGF0YSIsImFkZEdsb2JhbEhpc3RvcnlTbmFwc2hvdCIsInJlbW92ZVVudXNlZCIsInJlbW92ZUNvbnRyb2xzIiwiX29uQmVmb3JlTGVhdmUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2NhbnZhc19jb250cm9sc19jb21wb25lbnRfXyIsIkxvYWRpbmdJbmRpY2F0b3JDb21wb25lbnQiLCJidWlsZFN0eWxlcyIsIkxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIiLCJCYWxsIiwiJjpsYXN0LWNoaWxkIiwiU3VmZml4ZWRUZXh0SW5wdXRDb21wb25lbnQiLCJfb25DbGljayIsIlN1ZmZpeCIsInN1ZmZpeCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fc2hhcmVkX2Zvcm1zX2F1dG9fc2l6ZV9udW1lcmljX2lucHV0X2NvbXBvbmVudF9fIiwiQXV0b1NpemVOdW1lcmljSW5wdXRDb21wb25lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX251bWVyaWNfaW5wdXRfY29tcG9uZW50X18iLCJfYWRqdXN0V2lkdGgiLCJfdGV4dFJ1bGVyIiwiQ29sbGFwc2VTZWN0aW9uQ29tcG9uZW50IiwiZXhwYW5kZWQiLCJhbHdheXNFeHBhbmRlZCIsIm5ld0V4cGFuZGVkIiwib25Ub2dnbGUiLCJ0b2dnbGVhYmxlIiwiU2VjdGlvbiIsIlNlY3Rpb25IZWFkZXIiLCJBcnJvd0Rvd24iLCJ0dXJuVXAiLCJTZWN0aW9uVGl0bGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfY29tcG9uZW50c190cmFuc2l0aW9uX18iLCJTZWN0aW9uQ29udGVudCIsImRhdGEtZXhwYW5kZWQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2dyb3VwZWRfY29udHJvbF9zdHlsZXNfXyIsImJvcmRlckxlZnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX2NoZWNrYm94X2NvbXBvbmVudF9fIiwiU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfY29tcG9uZW50c19zY3JvbGxiYXJfY29tcG9uZW50X18iLCJMaXN0V3JhcHBlciIsImlubmVyTGlzdFJlZiIsIlNjcm9sbGFibGVMaXN0IiwiU2xpZGVyQ29udHJvbENvbXBvbmVudCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fdmFsdWVfc2VsZWN0aW9uX2NvbXBvbmVudF9fIiwib25TbGlkZXJWYWx1ZUNoYW5nZSIsInNsaWRlclByb3BzIiwiX2J1aWxkU2xpZGVyUHJvcHMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfY29tcG9uZW50c19zbGlkZXJfY29tcG9uZW50X18iLCJDb2xvclNlbGVjdGlvbkNvbXBvbmVudCIsImNvbG9yUGlja2VyVmlzaWJsZSIsImNvbG9ycyIsIl9nZXREZWZhdWx0Q29sb3JzIiwic2VsZWN0ZWRDb2xvckluZGV4IiwiX29uRG9jdW1lbnRDbGljayIsIm9uQ29sb3JQaWNrZXJUb2dnbGUiLCJuZXdDb2xvciIsImluaXRpYWxDb2xvciIsInRpbGVJbWFnZVBhdGgiLCJDb2xvclNlbGVjdGlvbkJ1YmJsZSIsIkNvbG9yU2VsZWN0aW9uUHJldmlldyIsIkNvbG9yU2VsZWN0aW9uUHJldmlld0NvbnRlbnQiLCJDb2xvclNlbGVjdGlvbkJ1YmJsZUNvbnRlbnQiLCJ0b1JHQkEiLCJEb3QiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2NvbG9yX3BpY2tlcl9jb2xvcl9waWNrZXJfY29tcG9uZW50X18iLCJfb25Db2xvckNoYW5nZSIsIkNvbG9yU2VsZWN0aW9uIiwiX3JlbmRlckNvbG9yQnViYmxlcyIsIkNvbG9yUGlja2VyQ29tcG9uZW50IiwiX2NvbG9yJHRvSFNWIiwidG9IU1YiLCJfY29sb3IkdG9IU1YyIiwiaHVlIiwiX2NvbG9yJHRvSFNWMyIsIl9jb2xvciR0b0hTVjQiLCJfY29sb3IkdG9IU1Y1IiwiX2NvbG9yJHRvSFNWNiIsImZyb21IU1YiLCJfY29sb3IkdG9IU1Y3IiwiX2NvbG9yJHRvSFNWOCIsImhzdlByb3BzIiwiVG9wQXJyb3ciLCJDb2xvclBpY2tlciIsIlNhdHVyYXRpb25WYWx1ZVNsaWRlciIsIl9vblNhdHVyYXRpb25CcmlnaHRuZXNzQ2hhbmdlIiwiSHVlU2xpZGVyIiwiX29uSHVlQ2hhbmdlIiwiT3BhY2l0eVNsaWRlciIsIl9vbkFscGhhQ2hhbmdlIiwiQ29sb3JWYWx1ZUlucHV0cyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfX2hleF9pbnB1dF9jb21wb25lbnRfXyIsInRvSGV4IiwiX29uSGV4VmFsdWVDaGFuZ2UiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX19jb2xvcl9jb21wb25lbnRfaW5wdXRfY29tcG9uZW50X18iLCJ0b1JHQiIsIl9jaGFuZ2VDb2xvckNvbXBvbmVudCIsIkNvbG9yUGlja2VyQ29udGFpbmVyIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJXaWR0aCIsIm92ZXJmbG93WSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfX3NhdHVyYXRpb25fdmFsdWVfc2xpZGVyX2NvbXBvbmVudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19odWVfc2xpZGVyX2NvbXBvbmVudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19vcGFjaXR5X3NsaWRlcl9jb21wb25lbnRfXyIsIkh1ZVNsaWRlckNvbXBvbmVudCIsIl9yZW5kZXJDYW52YXMiLCJfIiwiX3NsaWRlcldpZHRoIiwiX3NsaWRlciIsIl9rbm9iIiwiX2luaXRpYWxWYWx1ZSIsImNsYW1wZWRWYWx1ZSIsInN0cm9rZVN0eWxlIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X2NvbXBvbmVudHNfZHJhZ2dhYmxlX2NvbXBvbmVudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19jaXJjbGVfc2xpZGVyX3N0eWxlc19fIiwiT3BhY2l0eVNsaWRlckNvbXBvbmVudCIsIl90cmFuc3BhcmVudENvbG9yIiwiX29wYXF1ZUNvbG9yIiwiY2xpcHBlZFZhbHVlIiwiX3VwZGF0ZUJhY2tncm91bmRDb2xvcnMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfY29tcG9uZW50c19kcmFnZ2FibGVfY29tcG9uZW50X18iLCJUaWxlZEJhY2tncm91bmQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX2NpcmNsZV9zbGlkZXJfc3R5bGVzX18iLCJTYXR1cmF0aW9uVmFsdWVTbGlkZXJDb21wb25lbnQiLCJfbGFzdEh1ZSIsIl9pbml0aWFsQnJpZ2h0bmVzcyIsIl9pbml0aWFsU2F0dXJhdGlvbiIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiZ2V0SW1hZ2VEYXRhIiwiSGV4SW5wdXRDb21wb25lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2NvbG9yX2NvbXBvbmVudF9pbnB1dF9jb21wb25lbnRfXyIsIkJ1dHRvbkNvbXBvbmVudCIsIkRyb3Bkb3duQ29tcG9uZW50IiwiZW5hYmxlRHJvcGRvd25NZW51IiwiZW5hYmxlTWVudSIsIkRyb3Bkb3duQ29udGFpbmVyIiwiRHJvcGRvd24iLCJfb25Ecm9wZG93bkNsaWNrIiwiRHJvcGRvd25PdmVybGF5IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X2NvbXBvbmVudHNfc2Nyb2xsYmFyX2NvbXBvbmVudF9fIiwiRHJvcGRvd25MaXN0IiwiX3JlbmRlckRyb3Bkb3duSXRlbXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX3N0eWxlc19fIiwiRHJvcGRvd25JdGVtIiwid2hpdGVTcGFjZSIsIiY6YmVmb3JlIiwiVGV4dElucHV0Q29tcG9uZW50IiwicGxhY2Vob2xkZXIiLCJJbnZpc2libGVVcGxvYWRDb21wb25lbnQiLCJfZmlsZUxvYWRlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9zaGFyZWRfbG9hZGVyc19maWxlX2xvYWRlcl9fIiwiX2ZpbGVJbnB1dCIsIl9vbk5ld0ZpbGUiLCJIaWRkZW5GaWxlSW5wdXQiLCJhY2NlcHQiLCJGaWxlTG9hZGVyIiwiX29uRmlsZUNoYW5nZSIsIkNhbnZhc092ZXJsYXlDb250cm9sQ29tcG9uZW50IiwiaWNvbklkZW50aWZpZXIiLCJjbGlja0hhbmRsZXIiLCJvblRvdWNoRW5kIiwiQ2FudmFzT3ZlcmxheUNvbnRyb2wiLCJfY2FuY2VsRXZlbnQiLCJfcmVuZGVyQ29udHJvbEl0ZW0iLCJwZXNkayIsImNvbW1vbiIsImNhbmNlbCIsIm5ld0ltYWdlQ2hhbmdlc0xvc3RXYXJuaW5nWWVzIiwibmV3SW1hZ2VDaGFuZ2VzTG9zdFdhcm5pbmdObyIsImRpc2NhcmRDaGFuZ2VzV2FybmluZ0tlZXAiLCJkaXNjYXJkQ2hhbmdlc1dhcm5pbmdEaXNjYXJkIiwibmV3SW1hZ2VDaGFuZ2VzTG9zdFdhcm5pbmciLCJpbWFnZVJlc2l6ZWRXYXJuaW5nX21heE1lZ2FQaXhlbHMiLCJpbWFnZVJlc2l6ZWRXYXJuaW5nX21heERpbWVuc2lvbnMiLCJmb250TG9hZGluZ0Vycm9yIiwiZGlzY2FyZENoYW5nZXNXYXJuaW5nIiwicmVuZGVyaW5nRXJyb3IiLCJleHBvcnRpbmciLCJyZXNpemluZyIsImxvYWRpbmdGb250cyIsIndlYmNhbVVuYXZhaWxhYmxlRXJyb3IiLCJpbnZhbGlkRmlsZVR5cGVFcnJvciIsImltYWdlTG9hZGluZ0Vycm9yIiwibGlicmFyeSIsImZpbGVEcm9wWm9uZSIsImZpbGVEcm9wWm9uZUhvdmVyZWQiLCJub1Jlc3VsdHMiLCJpbWdseV90cmFuc2Zvcm1zX2NvbW1vbiIsImltZ2x5X3RyYW5zZm9ybV9jb21tb25fY3VzdG9tIiwiaW1nbHlfdHJhbnNmb3JtX2NvbW1vbl9zcXVhcmUiLCJpbWdseV90cmFuc2Zvcm1fY29tbW9uXzQtMyIsImltZ2x5X3RyYW5zZm9ybV9jb21tb25fMTYtOSIsImltZ2x5X3RyYW5zZm9ybXNfZmFjZWJvb2siLCJpbWdseV90cmFuc2Zvcm1fZmFjZWJvb2tfYWQiLCJpbWdseV90cmFuc2Zvcm1fZmFjZWJvb2tfcG9zdCIsImltZ2x5X3RyYW5zZm9ybV9mYWNlYm9va19jb3ZlciIsImltZ2x5X3RyYW5zZm9ybV9mYWNlYm9va19wcm9maWxlIiwiaW1nbHlfbHV0X2NlbHNpdXMiLCJpbWdseV9sdXRfY2hlc3QiLCJpbWdseV9sdXRfZml4aWUiLCJpbWdseV9sdXRfZnJpZGdlIiwiaW1nbHlfbHV0X2Zyb250IiwiaW1nbHlfbHV0X2syIiwiaW1nbHlfbHV0X21lbGxvdyIsImltZ2x5X2x1dF9zaW4iLCJpbWdseV9sdXRfdGV4YXMiLCJpbWdseV9sdXRfYWQxOTIwIiwiaW1nbHlfbHV0X2FuY2llbnQiLCJpbWdseV9sdXRfYmxlYWNoZWQiLCJpbWdseV9sdXRfYmxlYWNoZWRibHVlIiwiaW1nbHlfbHV0X2JsdWVzIiwiaW1nbHlfbHV0X2JsdWVzaGFkb3dzIiwiaW1nbHlfbHV0X2JyZWV6ZSIsImltZ2x5X2x1dF9idyIsImltZ2x5X2x1dF9jbGFzc2ljIiwiaW1nbHlfbHV0X2NvbG9yZnVsIiwiaW1nbHlfbHV0X2Nvb2wiLCJpbWdseV9sdXRfY290dG9uY2FuZHkiLCJpbWdseV9sdXRfY3JlYW15IiwiaW1nbHlfbHV0X2VpZ2h0aWVzIiwiaW1nbHlfbHV0X2VsZGVyIiwiaW1nbHlfbHV0X2V2ZW5pbmciLCJpbWdseV9sdXRfZmFsbCIsImltZ2x5X2x1dF9mb29kIiwiaW1nbHlfbHV0X2dsYW0iLCJpbWdseV9sdXRfZ29iYmxpbiIsImltZ2x5X2x1dF9oaWdoY2FyYiIsImltZ2x5X2x1dF9oaWdoY29udHJhc3QiLCJpbWdseV9sdXRfazEiLCJpbWdseV9sdXRfazYiLCJpbWdseV9sdXRfa2R5bmFtaWMiLCJpbWdseV9sdXRfa2VlbiIsImltZ2x5X2x1dF9sZW5pbiIsImltZ2x5X2x1dF9saXRobyIsImltZ2x5X2x1dF9sb21vMTAwIiwiaW1nbHlfbHV0X2x1Y2lkIiwiaW1nbHlfbHV0X25lYXQiLCJpbWdseV9sdXRfbm9ncmVlbiIsImltZ2x5X2x1dF9vcmNoaWQiLCJpbWdseV9sdXRfcGFsZSIsImltZ2x5X2x1dF9waXRjaGVkIiwiaW1nbHlfbHV0X3BsYXRlIiwiaW1nbHlfbHV0X3BvbGE2NjkiLCJpbWdseV9sdXRfcG9sYXN4IiwiaW1nbHlfbHV0X3BybzQwMCIsImltZ2x5X2x1dF9xdW96aSIsImltZ2x5X2x1dF9zZXBpYWhpZ2giLCJpbWdseV9sdXRfc2V0dGxlZCIsImltZ2x5X2x1dF9zZXZlbnRpZXMiLCJpbWdseV9sdXRfc29mdCIsImltZ2x5X2x1dF9zdGVlbCIsImltZ2x5X2x1dF9zdW1tZXIiLCJpbWdseV9sdXRfc3Vuc2V0IiwiaW1nbHlfbHV0X3RlbmRlciIsImltZ2x5X2x1dF90d2lsaWdodCIsImltZ2x5X2x1dF93aW50ZXIiLCJpbWdseV9sdXRfeDQwMCIsImJhc2ljcyIsInJlZmluZW1lbnRzIiwiZ2FtbWEiLCJjbGFyaXR5IiwiZXhwb3N1cmUiLCJzaGFkb3dzIiwiaGlnaGxpZ2h0cyIsIm5vbmUiLCJyYWRpYWwiLCJtaXJyb3JlZCIsImdhdXNzaWFuIiwic3BhY2luZyIsImxpbmUiLCJkZWZhdWx0VGV4dCIsInRleHRkZXNpZ24iLCJpbnZlcnQiLCJzdGlja2VyTG9hZGluZ0Vycm9yIiwiZmlsbCIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYWxpZW4iLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbmdlbCIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FuZ3J5IiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW54aW91cyIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FzbGVlcCIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2F0dGVudGlvbiIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JhYnlfY2hpY2tlbiIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JhdG1hbiIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JlZXIiLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19ibGFjayIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JsdWUiLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19ibHVzaCIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JveGVyIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYnVzaW5lc3MiLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19jaGlja2VuIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfY29vbCIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2NyeSIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2RlY2Vhc2VkIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZGV2aWwiLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19kdWNrZmFjZSIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2Z1cmlvdXMiLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19ncmluIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZ3VpdGFyIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGFycnlfcG90dGVyIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGlwcGllIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGl0bWFuIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaHVtb3Vyb3VzIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaWRlYSIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2ltcGF0aWVudCIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2tpc3MiLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19raXNzZXMiLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19sYXVnaCIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2xvdWRfY3J5IiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbG92aW5nIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbWFza2VkIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbXVzaWMiLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19uZXJkIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmluamEiLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19ub3Rfc3BlYWtpbmdfdG9feW91IiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcGlnIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcHVtcGtpbiIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3F1ZXN0aW9uIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcmFiYml0IiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2FkIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2ljayIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NrYXRlYm9hcmQiLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19za3VsbCIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NsZWVweSIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NtaWxlIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc21va2luZyIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NvYmJpbmciLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19zdGFyIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3RlYW1pbmdfZnVyaW91cyIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3N1bmJhdGhpbmciLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc190aXJlZCIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3Rvbmd1ZV9vdXRfd2luayIsImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dhdmUiLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc193aWRlX2dyaW4iLCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc193aW5rIiwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd3Jlc3RsZXIiLCJpbWdseV9zdGlja2VyX3NoYXBlcyIsImltZ2x5X3N0aWNrZXJfc2hhcGVzX2Fycm93XzAyIiwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYXJyb3dfMDMiLCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wMSIsImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzExIiwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTIiLCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xMyIsImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE1IiwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTgiLCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xOSIsImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzIwIiwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMjgiLCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8zMiIsImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzM1IiwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMzYiLCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wNCIsImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA2IiwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDgiLCJpbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wMSIsImltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzAzIiwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfc3ByYXlfMDQiLCJzZXR0aW5ncyIsImltZ2x5X2ZyYW1lX2RpYSIsImltZ2x5X2ZyYW1lX2FydF9kZWNvciIsImltZ2x5X2ZyYW1lX2JsYWNrX3Bhc3NlcGFydG91dCIsImltZ2x5X2ZyYW1lX2xvd3BvbHlfc2hhZG93IiwiaW1nbHlfZnJhbWVfd29vZF9wYXNzZXBhcnRvdXQiLCJibGVuZGluZyIsImltZ2x5X292ZXJsYXlfYm9rZWgiLCJpbWdseV9vdmVybGF5X2Nob3AiLCJpbWdseV9vdmVybGF5X2Nsb3VkcyIsImltZ2x5X292ZXJsYXlfZ29sZGVuIiwiaW1nbHlfb3ZlcmxheV9ncmFpbiIsImltZ2x5X292ZXJsYXlfaGVhcnRzIiwiaW1nbHlfb3ZlcmxheV9saWdodGxlYWsxIiwiaW1nbHlfb3ZlcmxheV9saWdodGxlYWsyIiwiaW1nbHlfb3ZlcmxheV9tZXRhbCIsImltZ2x5X292ZXJsYXlfbW9zYWljIiwiaW1nbHlfb3ZlcmxheV9wYWludGluZyIsImltZ2x5X292ZXJsYXlfcGFwZXIiLCJpbWdseV9vdmVybGF5X3JhaW4iLCJpbWdseV9vdmVybGF5X3ZpbnRhZ2UiLCJpbWdseV9vdmVybGF5X3dhbGwxIiwiaW1nbHlfb3ZlcmxheV93YWxsMiIsImltZ2x5X292ZXJsYXlfd29vZCIsIndoaXRlcyIsImJsYWNrcyIsInRlbXBlcmF0dXJlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fdGV4dF9kZXNpZ25fXyIsIkFsbENvbnRyb2xzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19saWJyYXJ5X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2FkanVzdG1lbnRzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2JydXNoX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZpbHRlcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb2N1c19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19mcmFtZV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19vdmVybGF5X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX3N0aWNrZXJfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fdGV4dF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fdHJhbnNmb3JtX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcGhvdG9lZGl0b3JzZGtfZGVza3RvcF91aV9jb3JlX19fZGVmYXVsdCIsIkxpYnJhcnlDb250cm9scyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9waG90b2VkaXRvcnNka19kZXNrdG9wX3VpX2NvcmVfXyIsImtlZXBDaGFuZ2VzIiwic2hvdWxkS2VlcENoYW5nZXMiLCJzd2l0Y2hTY3JlZW5PbkltYWdlIiwic3dpdGNoVG9TY3JlZW4iLCJsaWJyYXJ5T3B0aW9ucyIsImVuYWJsZVdlYmNhbSIsImVuYWJsZVVwbG9hZCIsImhhc0xpYnJhcnlQcm92aWRlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fbGlicmFyeV9jb250cm9sc19jb21wb25lbnRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fbGlicmFyeV9jYW52YXNfY29udHJvbHNfY29tcG9uZW50X18iLCJkaXNwbGF5VXBsb2FkSW5DYW52YXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfcGhvdG9lZGl0b3JzZGtfZGVza3RvcF91aV9jb3JlX19fZGVmYXVsdCIsIlBhbmVsRW51bSIsIlJPT1QiLCJTRUFSQ0giLCJMaWJyYXJ5Q29udHJvbHNDb21wb25lbnQiLCJQcm92aWRlciIsIl9saWJyYXJ5IiwiY3VycmVudFBhbmVsIiwic2VhcmNoUXVlcnkiLCJnZXROYW1lIiwibmV3SW1hZ2UiLCJsb2FkVGltZW91dCIsImdldFJhd1VybCIsInBhbmVsIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19saWJyYXJ5X3Jvb3RfcGFuZWxfY29tcG9uZW50X18iLCJvbkNhdGVnb3J5U2VsZWN0IiwiX29uQ2F0ZWdvcnlTZWxlY3QiLCJfb25XZWJjYW1BY3RpdmF0ZWQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX2xpYnJhcnlfc2VhcmNoX3BhbmVsX2NvbXBvbmVudF9fIiwib25JbWFnZVNlbGVjdCIsIl9vbkltYWdlU2VsZWN0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19saWJyYXJ5X3NlYXJjaF9oZWFkZXJfY29tcG9uZW50X18iLCJfb25TZWFyY2hRdWVyeUNoYW5nZSIsIl9yZW5kZXJDdXJyZW50UGFuZWwiLCJMaWJyYXJ5Um9vdFBhbmVsQ29tcG9uZW50IiwiX2xvYWRDYXRlZ29yaWVzIiwiX2xvYWRDb3ZlckltYWdlc1F1ZXVlIiwibG9hZENvdmVySW1hZ2UiLCJqb2IiLCJnZXRDYXRlZ29yaWVzIiwiX2xvYWRDb3ZlckltYWdlcyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fY2F0ZWdvcnlfbGlzdF9pdGVtX2NvbXBvbmVudF9fIiwiaXNDb3ZlckltYWdlTG9hZGVkIiwiX29uQ2F0ZWdvcnlDbGljayIsIl9wcm9wcyRvcHRpb25zIiwiUm9vdFBhbmVsV3JhcHBlciIsIl93cmFwcGVyIiwiQ2F0ZWdvcnlMaXN0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19saWJyYXJ5X3VwbG9hZF9jb21wb25lbnRfXyIsIkNhdGVnb3J5TGlzdEl0ZW1Db21wb25lbnQiLCJsaXN0SXRlbVN0eWxlIiwiTGlzdEl0ZW0iLCJMaXN0SXRlbVRpdGxlIiwiTGlicmFyeVNlYXJjaFBhbmVsQ29tcG9uZW50IiwiX2xvYWRJbWFnZXMiLCJfbG9hZFRodW1ic1F1ZXVlIiwibG9hZFRodW1iIiwic2VhcmNoSW1hZ2VzIiwiX2xvYWRUaHVtYnMiLCJlZGl0b3JJbWFnZSIsIk5vUmVzdWx0c1RleHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX2ltYWdlX2xpc3RfaXRlbV9jb21wb25lbnRfXyIsImlzVGh1bWJMb2FkZWQiLCJfb25JbWFnZUNsaWNrIiwiSW1hZ2VMaXN0IiwiSW1hZ2VMaXN0SXRlbUNvbXBvbmVudCIsImlzUG9ydHJhaXQiLCJnZXRUaHVtYkltYWdlIiwiZ2V0QXV0aG9yQXZhdGFyIiwicG9ydHJhaXQiLCJBdXRob3IiLCJBdXRob3JBdmF0YXIiLCJBdXRob3JOYW1lIiwiZ2V0QXV0aG9yTmFtZSIsIkxpc3RJdGVtT3ZlcmxheSIsIlNFQVJDSF9RVUVSWV9ERUJPVU5DRV9USU1FIiwiTGlicmFyeVNlYXJjaEhlYWRlckNvbXBvbmVudCIsIl9vbkRlYm91bmNlZElucHV0Q2hhbmdlIiwic2VhcmNoUXVlcnlJbnB1dFZhbHVlIiwiSGVhZGVyIiwiVGV4dElucHV0IiwiTGlicmFyeUNhbnZhc0NvbnRyb2xzQ29tcG9uZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X193ZWJjYW1fY29tcG9uZW50X18iLCJvbkJhY2siLCJfb25XZWJjYW1CYWNrIiwiTGlicmFyeVVwbG9hZENvbnRhaW5lciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fbGFyZ2VfbGlicmFyeV91cGxvYWRfY29tcG9uZW50X18iLCJXZWJjYW1Db21wb25lbnQiLCJ3ZWJjYW1SZWFkeSIsIl90YWtlUGhvdG8iLCJfd2ViY2FtIiwiY2FwdHVyZSIsIkNhbmNlbEJ1dHRvbiIsIl9vbkNhbmNlbENsaWNrIiwiT3V0ZXJWaWRlb0NvbnRhaW5lciIsIlZpZGVvQ29udGFpbmVyIiwiX3ZpZGVvQ29udGFpbmVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X193ZWJjYW1fdmlkZW9fY29tcG9uZW50X18iLCJmbGFzaFVSTCIsIm9uV2ViY2FtRXJyb3IiLCJfb25XZWJjYW1FcnJvciIsIm9uV2ViY2FtQXZhaWxhYmxlIiwiX29uV2ViY2FtUmVhZHkiLCJ2aWRlbyIsIldlYmNhbVZpZGVvQ29tcG9uZW50Iiwid2ViY2FtQXZhaWxhYmxlIiwidXNlRmxhc2hGYWxsYmFjayIsIl9nZXRVc2VyTWVkaWEiLCJfd2ViY2FtU3RyZWFtIiwiX2luaXRHZXRVc2VyTWVkaWEiLCJvcHRpb25hbCIsImF1ZGlvIiwic3RyZWFtIiwiX3ZpZGVvRWxlbWVudCIsInNyY09iamVjdCIsImRlbGV0ZVdlYmNhbSIsIldlYmNhbSIsImZsYXNoTm90aWZ5IiwiX2Rpc3Bvc2VXZWJjYW0iLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJsZWdhY3lHZXRVc2VyTWVkaWEiLCJ3ZWJraXRHZXRVc2VyTWVkaWEiLCJtb3pHZXRVc2VyTWVkaWEiLCJtc0dldFVzZXJNZWRpYSIsInRyYWNrIiwiZ2V0VHJhY2tzIiwiX2ZsYXNoV2ViY2FtIiwiX3JlbGVhc2VDYW1lcmEiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJfc25hcCIsImZsYXNodmFycyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9yZWFjdF9fX2RlZmF1bHQiLCJjbGFzc0lEIiwiYWxpZ24iLCJ2aWRlb0NvbXBvbmVudCIsIl9nZXRGbGFzaEZhbGxiYWNrQ29tcG9uZW50IiwiVmlkZW8iLCJhdXRvUGxheSIsIm9uTG9hZGVkTWV0YWRhdGEiLCJfb25Mb2FkZWRNZXRhZGF0YSIsIkxhcmdlTGlicmFyeVVwbG9hZENvbXBvbmVudCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fbGlicmFyeV91cGxvYWRfY29tcG9uZW50X18iLCJBZGp1c3RtZW50c0NvbnRyb2xzIiwiZ2V0R2FtbWEiLCJnZXRFeHBvc3VyZSIsImdldFNoYWRvd3MiLCJnZXRIaWdobGlnaHRzIiwiZ2V0Q2xhcml0eSIsImdldFdoaXRlcyIsImdldEJsYWNrcyIsImdldFRlbXBlcmF0dXJlIiwic2V0QnJpZ2h0bmVzcyIsInNldFNhdHVyYXRpb24iLCJzZXRDb250cmFzdCIsInNldEdhbW1hIiwic2V0RXhwb3N1cmUiLCJzZXRTaGFkb3ciLCJzZXRIaWdobGlnaHRzIiwic2V0Q2xhcml0eSIsInNldFdoaXRlcyIsInNldEJsYWNrcyIsInNldFRlbXBlcmF0dXJlIiwicmVzZXRPcHRpb25zIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19hZGp1c3RtZW50c19jb250cm9sc19jb21wb25lbnRfXyIsImF2YWlsYWJsZUFkanVzdG1lbnRzIiwiU0VDVElPTlMiLCJBZGp1c3RtZW50c0NvbnRyb2xzQ29tcG9uZW50IiwibWFrZUl0ZW1zIiwiX2lzQWRqdXN0bWVudEF2YWlsYWJsZSIsIl9tYWtlSXRlbSIsIlNlY3Rpb25JdGVtTGlzdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fYWRqdXN0bWVudHNfbGlzdF9pdGVtX2NvbXBvbmVudF9fIiwiX29uVmFsdWVDaGFuZ2UiLCJTZWN0aW9uTGlzdCIsIkJvdHRvbVNlY3Rpb24iLCJfb25SZXNldERlZmF1bHRDbGljayIsIl9yZW5kZXJBZGp1c3RtZW50c0NvbnRyb2xzIiwiQWRqdXN0bWVudHNMaXN0SXRlbUNvbXBvbmVudCIsIl9vcHRpb24iLCJvbkJlZm9yZVZhbHVlQ2hhbmdlIiwiX29wdGlvbjIiLCJzbGlkZXJWYWx1ZSIsIkJydXNoQ29udHJvbHMiLCJnbG9iYWxPcHRpb25zIiwiZ2V0R2xvYmFsVG9vbFN0YXRlIiwiYnJ1c2hDb2xvciIsIldISVRFIiwiYnJ1c2hTaXplIiwiYnJ1c2hIYXJkbmVzcyIsIndpZHRoUHJlc2V0cyIsInNpemVQcmVzZXRzIiwic2F2ZUJydXNoU2V0dGluZ3MiLCJzZXRHbG9iYWxUb29sU3RhdGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX2JydXNoX2NvbnRyb2xzX2NvbXBvbmVudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19icnVzaF9jYW52YXNfY29udHJvbHNfY29tcG9uZW50X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfcGhvdG9lZGl0b3JzZGtfZGVza3RvcF91aV9jb3JlX19fZGVmYXVsdCIsIkJydXNoQ29udHJvbHNDb21wb25lbnQiLCJfaW5pdEJydXNoTWFuYWdlciIsIl9vbkJydXNoU2VsZWN0IiwiZ2V0QnJ1c2hlcyIsInNldENvbG9yIiwiX29uQnJ1c2hXaWR0aENoYW5nZWQiLCJzZXRTaXplIiwicHJldmlvdXNCcnVzaFNwcml0ZSIsIl9sb2FkQnJ1c2giLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX2JydXNoX2xpc3RfaXRlbV9jb21wb25lbnRfXyIsIlNldHRpbmdzIiwiU2V0dGluZ3NUaXRsZSIsIl9vbkJydXNoQ29sb3JDaGFuZ2VkIiwiU2xpZGVyQ29udHJvbCIsIl9vbkJydXNoSGFyZG5lc3NDaGFuZ2VkIiwiQnJ1c2hMaXN0IiwiX3JlbmRlckJydXNoSXRlbXMiLCJQYXRoIiwiQnJ1c2hMaXN0SXRlbUNvbXBvbmVudCIsIl9pbnN0YW50aWF0ZUJydXNoIiwiX2RyYXdCcnVzaCIsIkJydXNoTGlzdEl0ZW0iLCJib3JkZXJCb3R0b21XaWR0aCIsIkJydXNoQ2FudmFzQ29udHJvbHNDb21wb25lbnQiLCJjdXJzb3JQb3NpdGlvbiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fc2hhcmVkX3Nwcml0ZXNfc3ByaXRlc19jYW52YXNfY29udHJvbHNfY29tcG9uZW50X18iLCJfaW5pdGlhbERyYXdQb3NpdGlvbiIsIl9jdXJyZW50UGF0aCIsIl9sYXN0RHJhd1Bvc2l0aW9uIiwiX2xhc3RDdXJzb3JQb3NpdGlvbiIsInRvdGFsRGlzdGFuY2UiLCJvdXRwdXRUZXh0dXJlRGltZW5zaW9ucyIsImN1cnNvclZpc2libGUiLCJjb250YWluZXJCb3VuZHMiLCJoaWRlQ29udGVudCIsIl9vbkRyYXdTdGFydCIsIl9vbkRyYXciLCJfb25EcmF3U3RvcCIsIkJydXNoQ2FudmFzQ29udHJvbHMiLCJvbk1vdXNlTW92ZSIsIl9vbk1vdXNlTW92ZSIsIkN1cnNvciIsIl9nZXRDdXJzb3JTdHlsZSIsIlN0aWNrZXJJdGVtQ29tcG9uZW50IiwicmVuZGVyQXNTVkciLCJzdmdBdHRyaWJ1dGVzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19pdGVtX2NvbXBvbmVudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X3NoYXJlZF9sb2FkZXJzX2ltYWdlX2xvYWRlcl9fIiwicmVzcG9uc2VYTUwiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlc09iamVjdCIsIl9zdmdBdHRyaWJ1dGVzJGkiLCJzdmdDb250ZW50Iiwic3RpY2tlclBvc2l0aW9uIiwiTW96VHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJNb3pUcmFuc2Zvcm1PcmlnaW4iLCJtc1RyYW5zZm9ybU9yaWdpbiIsIldlYmtpdFRyYW5zZm9ybU9yaWdpbiIsIlNWR0ltYWdlIiwiX2dldENvbnRlbnRTdHlsZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwic3ZnIiwiVGV4dEl0ZW1Db21wb25lbnQiLCJfb25JdGVtVG91Y2hTdGFydCIsIl9oYXNUb3VjaFN0YXJ0ZWQiLCJfdG91Y2hDb3VudCIsIl90b3VjaFRpbWVvdXQiLCJfb25JdGVtVG91Y2hFbmQiLCJlbnRlckVkaXRNb2RlIiwidXBkYXRlQmVjYXVzZUlFU3Vja3MiLCJzZXRWaXNpYmxlIiwiX2VkaXRlZCIsInNldFRleHQiLCJfdGV4dEZpZWxkIiwibGVhdmVFZGl0TW9kZSIsIl9nZXQzIiwiX2dldDQiLCJnZXRBbGlnbm1lbnQiLCJzaWRlIiwic3ByaXRlQ2VudGVyUG9zaXRpb24iLCJtb3VzZURpc3RhbmNlRnJvbUNlbnRlciIsImdldE1heFdpZHRoIiwibmV3TW91c2VEaXN0YW5jZUZyb21DZW50ZXIiLCJuZXdNYXhXaWR0aCIsInNldE1heFdpZHRoIiwiZ2V0VGV4dCIsImdldEZvbnRTaXplIiwidGV4dFBvc2l0aW9uIiwiZ2V0RE9NU3R5bGUiLCJjb250cm9sUHJvcHMiLCJfb25XaWR0aERyYWdTdGFydCIsIl9vbldpZHRoRHJhZyIsIl9vbldpZHRoRHJhZ1N0b3AiLCJXaWR0aENvbnRyb2wiLCJvbkRvdWJsZUNsaWNrIiwiX29uSXRlbURvdWJsZUNsaWNrIiwiVGV4dEZpZWxkIiwiX2dldFRleHRTdHlsZSIsIl9vbkJsdXIiLCJfb25UZXh0Q2hhbmdlIiwiRGlzYWJsZWRPdmVybGF5IiwiQnJ1c2hJdGVtQ29tcG9uZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19pdGVtX2NvbXBvbmVudF9fIiwiX2FwcGVuZENhbnZhcyIsIm5ld0NhbnZhcyIsIkJydXNoSXRlbSIsIlRleHREZXNpZ25JdGVtQ29tcG9uZW50IiwiZWRpdFRleHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2l0ZW1fY29tcG9uZW50X18iLCJGaWx0ZXJDb250cm9scyIsInNldEludGVuc2l0eSIsInNldEZpbHRlciIsInNldElkZW50aWZpZXIiLCJmaWx0ZXJPcHRpb25zIiwiZ2V0RmlsdGVyc0ZvckNhdGVnb3J5IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19maWx0ZXJfY29udHJvbHNfY29tcG9uZW50X18iLCJGaWx0ZXJDb250cm9sc0NvbXBvbmVudCIsIl9sb2FkZWRGaWx0ZXJzIiwiX2ZpbHRlclByZXZpZXdSZW5kZXJlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfX2ZpbHRlcl9wcmV2aWV3X3JlbmRlcmVyX18iLCJfcmVuZGVyUXVldWUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfc2hhcmVkX2FzeW5jX3Byb21pc2VfcXVldWVfXyIsIl9maWx0ZXJQcmV2aWV3UXVldWUiLCJfZmlsdGVyUHJldmlld3MiLCJfY2F0ZWdvcnkiLCJfcmVuZGVyUHJldmlld3NBbmltYXRpb25GcmFtZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9zaGFyZWRfYXN5bmNfYW5pbWF0aW9uX2ZyYW1lX18iLCJfcmVuZGVyUHJldmlld3MiLCJfaW50ZXJ2YWwiLCJfZ2V0VmlzaWJsZUZpbHRlcnMiLCJpc09mVHlwZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9waG90b2VkaXRvcnNka19fX2RlZmF1bHQiLCJSZW5kZXJlclR5cGUiLCJXRUJHTCIsImZpbHRlckluc3RhbmNlIiwicHJldmlld1VybCIsInZpc2libGVGaWx0ZXJzIiwiY29udGFpbmVyUmVjdCIsImVsZW1lbnRSZWN0IiwiY3VycmVudEZpbHRlcklkZW50aWZpZXIiLCJmaWx0ZXJQcmV2aWV3cyIsIkxpc3RJdGVtQ29udGFpbmVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fZmlsdGVyX2xpc3RfaXRlbV9jb21wb25lbnRfXyIsImxhc3RDaGlsZCIsImRpc3BsYXlTbGlkZXIiLCJvbkludGVuc2l0eUNoYW5nZWQiLCJfb25JbnRlbnNpdHlDaGFuZ2VkIiwiTG9hZGluZ0luZGljYXRvciIsIkxpc3QiLCJGaWx0ZXJMaXN0SXRlbUNvbXBvbmVudCIsIlByZXZpZXciLCJpdGVtUHJvcHMiLCJJdGVtQ29udGFpbmVyIiwiSXRlbVRpdGxlIiwiUFJFVklFV19ESU1FTlNJT05TIiwiRmlsdGVyUHJldmlld1JlbmRlcmVyIiwiX2ZpbHRlck9wZXJhdGlvbiIsImV4aWZPcGVyYXRpb24iLCJnZXRCeUlkZW50aWZpZXIiLCJyZW5kZXJNb2RlIiwidmVyc2lvbkNoZWNrIiwiY3JlYXRlT3BlcmF0aW9uIiwiX3RyYW5zZm9ybU9wZXJhdGlvbiIsIl9jYWxjdWxhdGVUcmFuc2Zvcm1PcCIsIl9jYWxjdWxhdGVUcmFuc2Zvcm1PcHRpb25zIiwib3V0cHV0UmF0aW8iLCJ0cmFuc2Zvcm1lZERpbWVuc2lvbnMiLCJGb2N1c0NvbnRyb2xzQ29tcG9uZW50IiwiX2lzTW9kZUF2YWlsYWJsZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm9jdXNfbGlzdF9pdGVtX2NvbXBvbmVudF9fIiwic2hvd1NsaWRlciIsIm9uQmx1clJhZGl1c0NoYW5nZWQiLCJfb25CbHVyUmFkaXVzQ2hhbmdlZCIsIkZvY3VzTGlzdEl0ZW1Db21wb25lbnQiLCJzaG9ydGVzdFNpZGUiLCJtYXhCbHVyUmFkaXVzIiwiX29uU2xpZGVyVmFsdWVDaGFuZ2VkIiwid2l0aFNsaWRlciIsIl9yZW5kZXJTbGlkZXIiLCJGb2N1c0NhbnZhc0NvbnRyb2xzQ29tcG9uZW50Iiwiem9vbURvbmUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX3JhZGlhbF9mb2N1c19jYW52YXNfY29udHJvbHNfY29tcG9uZW50X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX2xpbmVhcl9mb2N1c19jYW52YXNfY29udHJvbHNfY29tcG9uZW50X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX21pcnJvcmVkX2ZvY3VzX2NhbnZhc19jb250cm9sc19jb21wb25lbnRfXyIsIktub2JTdHlsZSIsIkZ1bGxDb250YWluZXJTdHlsZSIsIlJhZGlhbEZvY3VzQ2FudmFzQ29udHJvbHNDb21wb25lbnQiLCJjaXJjbGVQb3NpdGlvbiIsImNpcmNsZURpbWVuc2lvbnMiLCJrbm9iUG9zaXRpb24iLCJfa25vYkNoYW5nZWRNYW51YWxseSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19zaGFyZWRfYXN5bmNfYW5pbWF0aW9uX2ZyYW1lX18iLCJfdXBkYXRlT25DYW52YXNDb250cm9scyIsIl91cGRhdGVQb3NpdGlvbnNBbmREaW1lbnNpb25zIiwiX29wZXJhdGlvbiIsIl9pbml0aWFsS25vYlBvc2l0aW9uIiwicmVsYXRpdmVPZmZzZXQiLCJuZXdLbm9iUG9zaXRpb24iLCJkaWFtZXRlciIsImltYWdlQm91bmRzIiwib25DYW52YXNDb250cm9sc1JlY3QiLCJfb25DYW52YXNDb250cm9scyIsIk9uQ2FudmFzQ29udHJvbHMiLCJfb25DaXJjbGVEcmFnU3RhcnQiLCJfb25DaXJjbGVEcmFnIiwiQ2lyY2xlIiwiX2dldENpcmNsZVN0eWxlcyIsIkxpbmVhckZvY3VzQ2FudmFzQ29udHJvbHNDb21wb25lbnQiLCJjb250cm9sUG9pbnRQb3NpdGlvbnMiLCIxIiwiMiIsImRpc3RhbmNlTGVuZ3RoIiwiTGluZSIsIl9nZXRMaW5lU3R5bGUiLCJNaXJyb3JlZEZvY3VzQ2FudmFzQ29udHJvbHNDb21wb25lbnQiLCJhcmVhUG9zaXRpb24iLCJhcmVhRGltZW5zaW9ucyIsIl9pbml0aWFsU3RhcnQiLCJfaW5pdGlhbEVuZCIsIl9pbml0aWFsRGlzdCIsIm5ld1N0YXJ0IiwibmV3RW5kIiwiZGlzdGFuY2VGcm9tQ2VudGVyIiwiZGlzdCIsIl9zaGFyZWRTdGF0ZSRtaXJyb3JlZCIsIm1pZGRsZSIsImFyZWFTaXplIiwidG90YWxEaXN0IiwiZmFjdG9yIiwiX29uQ2VudGVyRHJhZ1N0YXJ0IiwiX29uQ2VudGVyRHJhZyIsIkFyZWEiLCJfZ2V0QXJlYVN0eWxlIiwiRnJhbWVDb250cm9scyIsInNldEZyYW1lIiwiZnJhbWVJZGVudGlmaWVyIiwicmVtb3ZlRnJhbWUiLCJzZXRUaW50Q29sb3IiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZyYW1lX2NvbnRyb2xzX2NvbXBvbmVudF9fIiwiQ0FURUdPUlkiLCJPUFRJT05TIiwiRnJhbWVDb250cm9sc0NvbXBvbmVudCIsIl9pbml0RnJhbWVNYW5hZ2VyIiwicHJldlByb3BzIiwicHJldlN0YXRlIiwibG9hZEZyYW1lIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19mcmFtZV9yb290X3BhbmVsX2NvbXBvbmVudF9fIiwiZnJhbWVNYW5hZ2VyIiwib25GcmFtZUNsaWNrIiwiX29uRnJhbWVDbGljayIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fZnJhbWVfb3B0aW9uc19wYW5lbF9jb21wb25lbnRfXyIsIm9uUmVwbGFjZUNsaWNrIiwiX29uUmVwbGFjZUNsaWNrIiwib25OZXdGcmFtZUNsaWNrIiwiX29uTmV3RnJhbWVDbGljayIsIkZyYW1lUm9vdFBhbmVsQ29tcG9uZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X3NoYXJlZF9hc3luY19hbmltYXRpb25fZnJhbWVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fZnJhbWVfbGlzdF9jb21wb25lbnRfXyIsImdldEZyYW1lc0ZvckNhdGVnb3J5IiwiRnJhbWVMaXN0Q29tcG9uZW50IiwiY3VycmVudEZyYW1lSWRlbnRpZmllciIsIml0ZW1TdHlsZSIsIkZyYW1lTGlzdEl0ZW0iLCJGcmFtZUltYWdlIiwiRnJhbWVMaXN0IiwiRnJhbWVPcHRpb25zUGFuZWxDb21wb25lbnQiLCJ0aW50RW5hYmxlZCIsImVuYWJsZWQiLCJzZXRBbHBoYSIsInNldFNjYWxlIiwidGh1bWJuYWlsU3R5bGUiLCJUb3BTZWN0aW9uIiwiRGV0YWlscyIsIlRodW1ibmFpbCIsIlRodW1ibmFpbEltYWdlIiwiRGV0YWlsc0NvbnRhaW5lciIsIlJlcGxhY2VCdXR0b24iLCJfb25PcGFjaXR5Q2hhbmdlIiwiZ2V0U2NhbGUiLCJfb25XaWR0aENoYW5nZSIsIl9vblRpbnRUb2dnbGUiLCJfb25UaW50Q29sb3JDaGFuZ2UiLCJPdmVybGF5Q29udHJvbHMiLCJpbWFnZVBhdGgiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX2JsZW5kX21vZGVzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfc2hhcmVkX2xvYWRlcnNfaW1hZ2VfbG9hZGVyX18iLCJyZW1vdmVPdmVybGF5Iiwic2V0T3ZlcmxheU9wdGlvbnMiLCJzZXRCbGVuZE1vZGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX292ZXJsYXlfY29udHJvbHNfY29tcG9uZW50X18iLCJPdmVybGF5Q29udHJvbHNDb21wb25lbnQiLCJfdGh1bWJuYWlsTG9hZFF1ZXVlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X3NoYXJlZF9hc3luY19wcm9taXNlX3F1ZXVlX18iLCJfdGh1bWJuYWlsc0xvYWRlZCIsIl9sb2FkVGh1bWJuYWlscyIsImdldE92ZXJsYXlzIiwibG9hZE92ZXJsYXkiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX292ZXJsYXlfbGlzdF9pdGVtX2NvbXBvbmVudF9fIiwib25CbGVuZE1vZGVDaGFuZ2UiLCJfb25CbGVuZE1vZGVDaGFuZ2UiLCJvbkFscGhhQ2hhbmdlIiwibm9uZUl0ZW1BY3RpdmUiLCJOb25lSXRlbSIsIk5vbmVJdGVtQmFja2dyb3VuZCIsIk92ZXJsYXlMaXN0SXRlbUNvbXBvbmVudCIsIm5ld0JsZW5kTW9kZSIsIm9uQmVmb3JlQmxlbmRNb2RlQ2hhbmdlIiwib25CZWZvcmVBbHBoYUNoYW5nZSIsIkl0ZW1Db250ZW50IiwiQmxlbmRpbmdMYWJlbCIsIkJsZW5kaW5nQ29udHJvbCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fb3ZlcmxheV9ibGVuZGluZ19jb250cm9sX2NvbXBvbmVudF9fIiwiQmxlbmRNb2RlQnlJZCIsIk92ZXJsYXlCbGVuZGluZ0NvbnRyb2xDb21wb25lbnQiLCJibGVuZE1vZGVzIiwibGVmdEFycm93U3R5bGUiLCJyaWdodEFycm93U3R5bGUiLCJCbGVuZGluZ0NvbnRyb2xDb250YWluZXIiLCJBcnJvdyIsIl9vblByZXZpb3VzQ2xpY2siLCJfb25OZXh0Q2xpY2siLCJTdGlja2VyQ29udHJvbHMiLCJfdXBkYXRlU3RpY2tlckNhdGVnb3JpZXMiLCJsb2FkU3RpY2tlckltYWdlIiwicmVzb2x2ZWRTdGlja2VyUGF0aCIsInN0aWNrZXJNYW5hZ2VyIiwicHJldmlvdXNTdGF0ZSIsInNldFN0aWNrZXJPcHRpb25zIiwic2V0U3RpY2tlckltYWdlIiwic2V0VGludE1vZGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX3N0aWNrZXJfY29udHJvbHNfY29tcG9uZW50X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX3N0aWNrZXJfY2FudmFzX2NvbnRyb2xzX2NvbXBvbmVudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X3Bob3RvZWRpdG9yc2RrX2Rlc2t0b3BfdWlfY29yZV9fX2RlZmF1bHQiLCJTdGlja2VyQ29udHJvbHNDb21wb25lbnQiLCJzd2l0Y2hUb09wdGlvbnMiLCJsb25nZXN0U2lkZSIsImJvdW5kaW5nUmVjdGFuZ2xlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19zdGlja2VyX3Jvb3RfcGFuZWxfY29tcG9uZW50X18iLCJvbkNhdGVnb3J5Q2xpY2siLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX3N0aWNrZXJfY2F0ZWdvcnlfcGFuZWxfY29tcG9uZW50X18iLCJvbkJhY2tDbGljayIsIl9vbkJhY2tDbGljayIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fc3RpY2tlcl9vcHRpb25zX3BhbmVsX2NvbXBvbmVudF9fIiwib25OZXdTdGlja2VyQ2xpY2siLCJfb25OZXdTdGlja2VyQ2xpY2siLCJTdGlja2VyUm9vdFBhbmVsQ29tcG9uZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19zdGlja2VyX2NhdGVnb3J5X2l0ZW1fY29tcG9uZW50X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX3N0aWNrZXJfbGlzdF9jb21wb25lbnRfXyIsImdldFN0aWNrZXJzRm9yQ2F0ZWdvcnkiLCJTdGlja2VyQ2F0ZWdvcnlJdGVtQ29tcG9uZW50IiwiU3RpY2tlckNhdGVnb3J5SXRlbSIsIlN0aWNrZXJDYXRlZ29yeVBhbmVsQ29tcG9uZW50IiwiaGVhZGVyU3R5bGUiLCJTdGlja2VyQ2F0ZWdvcnlQYW5lbCIsIkhlYWRlckNvbnRlbnQiLCJhdXRob3IiLCJTdWJ0aXRsZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fc3RpY2tlcl9saXN0X2NvbXBvbmVudF9fIiwiPiAqIiwiU3RpY2tlck9wdGlvbnNQYW5lbENvbXBvbmVudCIsIl9vbkNoYW5nZWRPcHRpb24iLCJfZ2V0U3RpY2tlck9iamVjdCIsIl9zaGFyZWRTdGF0ZSIsIlN0aWNrZXJDYW52YXNDb250cm9sc0NvbXBvbmVudCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fc2hhcmVkX3Nwcml0ZXNfc3ByaXRlc19jYW52YXNfY29udHJvbHNfY29tcG9uZW50X18iLCJUZXh0Q29udHJvbHMiLCJzYXZlVGV4dFNldHRpbmdzIiwibWF4VGV4dHVyZVNpemUiLCJnZXRNYXhUZXh0dXJlU2l6ZSIsImRlZmF1bHRGb250VmFyaWF0aW9uIiwiZ2V0Q29sb3IiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJnZXRMaW5lSGVpZ2h0Iiwic2V0Rm9udFNpemUiLCJzZXRCYWNrZ3JvdW5kQ29sb3IiLCJzZXRDaGFyYWN0ZXJTcGFjaW5nIiwic2V0TGluZUhlaWdodCIsInNldEFsaWdubWVudCIsInNldFRleHRPcHRpb25zIiwic2V0VmFyaWF0aW9uIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X190ZXh0X2NvbnRyb2xzX2NvbXBvbmVudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X190ZXh0X2NhbnZhc19jb250cm9sc19jb21wb25lbnRfXyIsIlRleHRDb250cm9sc0NvbXBvbmVudCIsIl9vblRleHRTY2FsZWQiLCJfdW5hdmFpbGFibGVGb250RmFtaWxpZXMiLCJfbG9hZEZvbnRzIiwibG9hZGluZ1RpbWVvdXQiLCJmaXJzdFZhcmlhdGlvbiIsIl9vblZhcmlhdGlvbkNoYW5nZWQiLCJsaW5lU3BhY2luZyIsIm1heEZvbnRTaXplIiwic2VsZWN0YWJsZUZvbnRzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19mb250X2ZhbWlseV9hbmRfc2l6ZV9jb21wb25lbnRfXyIsIl9vbkZvbnRTaXplQ2hhbmdlZCIsIm9uRm9udENoYW5nZSIsIl9vbkZvbnRDaGFuZ2VkIiwiZHJvcGRvd25WYWx1ZSIsIl9zaGFyZWRTdGF0ZTIiLCJfc2hhcmVkU3RhdGUzIiwiX29uTmV3VGV4dENsaWNrIiwiX3JlbmRlckZvbnRGYW1pbHlBbmRTaXplQ29tcG9uZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X190ZXh0X2NvbnRyb2xzX3N0eWxpbmdfY29tcG9uZW50X18iLCJzZWxlY3RlZFZhcmlhdGlvbiIsIm9uQWxpZ25tZW50Q2hhbmdlIiwiX29uQWxpZ25tZW50Q2hhbmdlZCIsIm9uVmFyaWF0aW9uQ2hhbmdlIiwiX29uQ29sb3JDaGFuZ2VkIiwiX29uQmFja2dyb3VuZENvbG9yQ2hhbmdlZCIsIl9vbkxpbmVTcGFjaW5nQ2hhbmdlZCIsIm1hcmdpbi10b3AiLCJGb250RmFtaWx5QW5kU2l6ZUNvbXBvbmVudCIsIl91cGRhdGVGb250c01hcCIsIl9mb250c01hcCIsIlRleHRDb250cm9sc1N0eWxpbmdDb21wb25lbnQiLCJvblN0eWxlQ2hhbmdlIiwic2VsZWN0ZWRJY29uUGF0aCIsImRhdGEtYWxpZ25tZW50IiwiX29uQWxpZ25tZW50SXRlbUNsaWNrIiwiSXRlbUltYWdlIiwiZ2V0TGFiZWwiLCJUZXh0Q29udHJvbHNTdHlsaW5nIiwiR3JvdXAiLCJfcmVuZGVyU3R5bGVzRHJvcGRvd24iLCJfcmVuZGVyQWxpZ21lbnRJdGVtcyIsIm1hcmdpbi1ib3R0b20iLCJMZWdpYmlsaXR5UHJlc2V0SXRlbUNvbXBvbmVudCIsImhvdmVyaW5nIiwiTGVnaWJpbGl0eVByZXNldEl0ZW0iLCJUZXh0Q2FudmFzQ29udHJvbHNDb21wb25lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX3NoYXJlZF9zcHJpdGVzX3Nwcml0ZXNfY2FudmFzX2NvbnRyb2xzX2NvbXBvbmVudF9fIiwiTUlOX0RJTUVOU0lPTlMiLCJUcmFuc2Zvcm1Db250cm9scyIsImZpbmFsU2NhbGUiLCJjYWxjdWxhdGVTY2FsZSIsImhhbGZSZWxhdGl2ZVNpemUiLCJtaWRkbGVEaXN0YW5jZUZyb21DZW50ZXIiLCJuZXdNaWRkbGVEaXN0YW5jZUZyb21DZW50ZXIiLCJuZXdSZWxhdGl2ZU1pZGRsZSIsInRyYW5zZm9ybU9wZXJhdGlvbkV4aXN0ZWRCZWZvcmVFbnRlcmluZyIsIm9yaWVudGF0aW9uT3BlcmF0aW9uRXhpc3RlZEJlZm9yZUVudGVyaW5nIiwiaW5pdGlhbFRyYW5zZm9ybU9wdGlvbnMiLCJfaW5pdGlhbFRyYW5zZm9ybU9wdGkiLCJ1aU9wdGlvbnMiLCJjb252ZXJ0T3BlcmF0aW9uT3B0aW9uc1RvVUkiLCJpbml0aWFsT3JpZW50YXRpb25PcHRpb25zIiwibmV3VHJhbnNmb3JtT3B0aW9ucyIsIm5ld09yaWVudGF0aW9uT3B0aW9ucyIsImNsb25lT3B0aW9ucyIsIm9yaWVudGF0aW9uUm90YXRpb24iLCJpbml0aWFsUmF0aW8iLCJfY2FsY3VsYXRlVGV4dHVyZVNjYWxlIiwiZGVmYXVsdFRyYW5zZm9ybU9wdGlvbnMiLCJfc2hhcmVkU3RhdGUkZ2V0IiwibWF4VHJhbnNmb3JtU2l6ZSIsIm1heFNpemUiLCJtaW5VSURpbWVuc2lvbnMiLCJtaW5EaW1lbnNpb25zIiwicmVsYXRpdmVTaXplIiwidHJhbnNmb3JtT3B0aW9ucyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fdHJhbnNmb3JtX2NvbnRyb2xzX2NvbXBvbmVudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X190cmFuc2Zvcm1fY2FudmFzX2NvbnRyb2xzX2NvbXBvbmVudF9fIiwiZW5hYmxlUm90YXRpb24iLCJlbmFibGVTdHJhaWdodGVuIiwiZW5hYmxlRmxpcCIsIlRyYW5zZm9ybUNhbnZhc0NvbnRyb2xzQ29tcG9uZW50IiwiY2hhbmdlc0RvbmUiLCJfY2FsY3VsYXRlUmF0aW9GcmFjdGlvbiIsIl91cGRhdGVUcmFuc2Zvcm1BcmVhU3R5bGVzIiwiX3RyYW5zZm9ybUNvbnRhaW5lclJlY3QiLCJfem9vbUFGUmVxdWVzdCIsIl9yYXRpb0ZyYWN0aW9uIiwiX2RyYWdPcHRpb25zIiwiaW5pdGlhbFN0YXJ0IiwiaW5pdGlhbEVuZCIsIm1pblN0YXJ0IiwibWF4U3RhcnQiLCJmaXhUcmFuc2Zvcm0iLCJfY3VycmVudENvcm5lciIsIl9kcmFnT3B0aW9uczIiLCJjYXBpdGFsaXplZERpcmVjdGlvbiIsIm5ld0ZsaXAiLCJuZXdSb3RhdGlvbiIsInRtcFN0YXJ0IiwiYnJvYWRjYXN0RmxpcCIsInRlbXBTdGFydCIsImJyb2FkY2FzdFJvdGF0ZSIsIl90cmFuc2Zvcm1Db250YWluZXIiLCJjZW50ZXIiLCJfZ2V0RGltZW5zaW9uc1N0eWxlcyIsInRvcExlZnQiLCJ0b3BDZW50ZXIiLCJjZW50ZXJMZWZ0IiwiaW5uZXJUcmFuc2Zvcm1Db250YWluZXIiLCJhcmVhU3R5bGVzIiwiX2dldEFyZWFTdHlsZXMiLCJhY2NlcHRCdXR0b25TdHlsZSIsImFjY2VwdEJ1dHRvbiIsIkFjY2VwdEJ1dHRvbiIsIl9vbkFjY2VwdENsaWNrIiwiX29uQWNjZXB0TW91c2VEb3duIiwiT3V0ZXJUcmFuc2Zvcm1Db250YWluZXIiLCJUcmFuc2Zvcm1Sb3ciLCJEYXJrVHJhbnNmb3JtQ2VsbCIsIkNlbnRlclRyYW5zZm9ybUNlbGwiLCJ1bmRyYWdnYWJsZSIsIkRyYWdnZXIiLCJJbm5lclRyYW5zZm9ybUNvbnRhaW5lciIsIkJvcmRlcmVkVHJhbnNmb3JtQ2VsbCIsImZsaXBJY29uU3R5bGUiLCJyb3RhdGVJY29uU3R5bGUiLCJfcmVuZGVyT25DYW52YXNDb250cm9scyIsIkJvdHRvbUNvbnRyb2xzQ29udGFpbmVyIiwiQm90dG9tQ29udHJvbHMiLCJGbGlwQnV0dG9uIiwiX29uRmxpcENsaWNrIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X190cmFuc2Zvcm1fcm90YXRpb25fc2xpZGVyX2NvbXBvbmVudF9fIiwiX29uUm90YXRpb25DaGFuZ2UiLCJSb3RhdGVCdXR0b24iLCJfb25Sb3RhdGVDbGljayIsImNsb2Nrd2lzZSIsIlRyYW5zZm9ybUNvbnRhaW5lciIsIlRyYW5zZm9ybUNlbGwiLCJUcmFuc2Zvcm1Sb3RhdGlvblNsaWRlckNvbXBvbmVudCIsIl93aWR0aCIsIl9kZWdyZWVzUGVyUGl4ZWwiLCJNQVhfUk9UQVRJT04iLCJfaW5pdGlhbERlZ3JlZXMiLCJ2YWx1ZVJhbmdlIiwiU0xJREVSX1dJRFRIIiwiaW5kaWNhdG9yU3R5bGVzIiwiX2dldEluZGljYXRvclN0eWxlcyIsImxlZnRTbGlkZXJTdHlsZSIsInJpZ2h0U2xpZGVyU3R5bGUiLCJSb3RhdGlvblNsaWRlciIsIkluZGljYXRvciIsIlZhbHVlIiwiX2dldFZhbHVlIiwiVHJhbnNmb3JtQ29udHJvbHNDb21wb25lbnQiLCJfcmVhcHBseVJhdGlvIiwiX3RyYW5zZm9ybVJhdGlvTWFuYWdlciIsIl9zZWxlY3RJbml0aWFsUmF0aW8iLCJfc2VsZWN0UmF0aW8iLCJzZXREZWZhdWx0T3B0aW9ucyIsIl9zZXREZWZhdWx0T3B0aW9uc0ZvclJhdGlvIiwicmF0aW9PYmplY3QiLCJzZWxlY3RlZFJhdGlvIiwib3BlcmF0aW9uUmF0aW8iLCJpc1NlbGVjdGVkIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X190cmFuc2Zvcm1fbGlzdF9pdGVtX2NvbXBvbmVudF9fIiwiZGVmYXVsdEljb25QYXRoIiwiaG92ZXJJY29uUGF0aCIsIlNlY3Rpb25HcmlkIiwibWFrZVNlY3Rpb24iLCJyZXNldEJ1dHRvbkRpc2FibGVkIiwiU2VjdGlvbkxpc3RIZWFkZXIiLCJfcmVuZGVyU2VjdGlvbnMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX3RyYW5zZm9ybV9kaW1lbnNpb25zX2NvbXBvbmVudF9fIiwiVHJhbnNmb3JtTGlzdEl0ZW1Db21wb25lbnQiLCJkZWZhdWx0SWNvblN0eWxlIiwiaG92ZXJJY29uU3R5bGUiLCJhY3RpdmVJY29uU3R5bGUiLCJUcmFuc2Zvcm1MaXN0SXRlbSIsIiY6bnRoLWNoaWxkKG9kZCkiLCJUcmFuc2Zvcm1EaW1lbnNpb25zQ29tcG9uZW50IiwiX2dldFRyYW5zZm9ybURpbWVuc2lvbnMiLCJyZXF1ZXN0ZWREaW1lbnNpb25zIiwiX3Jlc2l6ZVRyYW5zZm9ybVRvIiwibmV3U2l6ZSIsIl9jb250cm9scyRmaXhUcmFuc2ZvciIsImZpeGVkU3RhcnQiLCJmaXhlZEVuZCIsIlRyYW5zZm9ybURpbWVuc2lvbnMiLCJUcmFuc2Zvcm1EaW1lbnNpb25zV3JhcHBlciIsIlRhYmxlIiwiQ2VsbCIsIkRpbWVuc2lvbklucHV0IiwiQ3Jvc3NDZWxsIiwiQ3Jvc3MiLCJMb2NrT3ZlcmxheSIsIkxvY2siLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfcGhvdG9lZGl0b3JzZGtfXyIsIlRleHREZXNpZ25Db250cm9scyIsInRvZ2dsZVRleHRBc01hc2siLCJzZXRJbnZlcnRlZCIsImdldEludmVydGVkIiwidGV4dEFzTWFzayIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9waG90b2VkaXRvcnNka19kZXNrdG9wX3VpX2NvcmVfXyIsIlRleHREZXNpZ25JdGVtcyIsImRpc3BsYXlJbnB1dCIsIm5ld1RleHQiLCJzZWxlY3RlZExheW91dCIsIkxheW91dCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfc2hhcmVkX2xvZ19fIiwiX2NvbnRleHQzIiwidDAiLCJzZXRMYXlvdXQiLCJ1bmF2YWlsYWJsZUZvbnRGYW1pbGllcyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fdGV4dF9kZXNpZ25fY29udHJvbHNfY29tcG9uZW50X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX190ZXh0X2Rlc2lnbl9jYW52YXNfY29udHJvbHNfY29tcG9uZW50X2pzeF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X3Bob3RvZWRpdG9yc2RrX2Rlc2t0b3BfdWlfY29yZV9fX2RlZmF1bHQiLCJUZXh0RGVzaWduQ29udHJvbHNDb21wb25lbnQiLCJsb2FkRm9udHMiLCJzZWxlY3RMYXlvdXQiLCJnZXRMYXlvdXRJdGVtcyIsIlNldHRpbmdzQm90dG9tIiwib25TZWxlY3RMYXlvdXQiLCJUZXh0RGVzaWduQ2FudmFzQ29udHJvbHNDb21wb25lbnQiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsaUJBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELEVBQUFHLFFBQUEsb0NBQUFBLFFBQUEsU0FBQUEsUUFBQSxjQUNBLG1CQUFBQyxlQUFBQyxJQUNBRCxRQUFBLHNDQUFBSixHQUNBLGlCQUFBQyxRQUNBQSxRQUFBLHFCQUFBRCxFQUFBRyxRQUFBLG9DQUFBQSxRQUFBLFNBQUFBLFFBQUEsY0FFQUosRUFBQSxxQkFBQUMsRUFBQUQsRUFBQSxlQUFBQSxFQUFBLE1BQUFBLEVBQUEsVUFSQSxDQVNDLG9CQUFBTyxVQUFBQyxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0QsbUJDVEEsSUFBQUMsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQVosUUFHQSxJQUFBQyxFQUFBUyxF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Q1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGlFQUNBLDJFQU1OZixXQUFZLG9DQUNaTSxZQUFhLFlBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0Usb0VBQ0EsNEVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLG9FQUNBLDhFQU1OZixXQUFZLHVDQUNaTSxZQUFhLGVBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsdUVBQ0EsK0VBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLHVFQUNBLGlGQU1OZixXQUFZLGlDQUNaTSxZQUFhLFNBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsaUVBQ0EseUVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGlFQUNBLDJFQU1OZixXQUFZLCtCQUNaTSxZQUFhLE9BQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsK0RBQ0EsdUVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLCtEQUNBLHlFQU1OZixXQUFZLGdDQUNaTSxZQUFhLFFBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsZ0VBQ0Esd0VBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGdFQUNBLDBFQU1OZixXQUFZLGdDQUNaTSxZQUFhLFFBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsZ0VBQ0Esd0VBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGdFQUNBLDBFQU1OZixXQUFZLG1DQUNaTSxZQUFhLFdBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsbUVBQ0EsMkVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLG1FQUNBLDZFQU1OZixXQUFZLGtDQUNaTSxZQUFhLFVBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0Usa0VBQ0EsMEVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGtFQUNBLDRFQU1OZixXQUFZLCtCQUNaTSxZQUFhLE9BQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsK0RBQ0EsdUVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLCtEQUNBLHlFQU1OZixXQUFZLDhCQUNaTSxZQUFhLE1BQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsOERBQ0Esc0VBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLDhEQUNBLHdFQU1OZixXQUFZLG1DQUNaTSxZQUFhLFdBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsbUVBQ0EsMkVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLG1FQUNBLDZFQU1OZixXQUFZLGdDQUNaTSxZQUFhLFFBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsZ0VBQ0Esd0VBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGdFQUNBLDBFQU1OZixXQUFZLG1DQUNaTSxZQUFhLFdBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsbUVBQ0EsMkVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLG1FQUNBLDZFQU1OZixXQUFZLGtDQUNaTSxZQUFhLFVBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0Usa0VBQ0EsMEVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGtFQUNBLDRFQU1OZixXQUFZLCtCQUNaTSxZQUFhLE9BQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsK0RBQ0EsdUVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLCtEQUNBLHlFQU1OZixXQUFZLGlDQUNaTSxZQUFhLFNBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsaUVBQ0EseUVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGlFQUNBLDJFQU1OZixXQUFZLHVDQUNaTSxZQUFhLGVBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsdUVBQ0EsK0VBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLHVFQUNBLGlGQU1OZixXQUFZLGlDQUNaTSxZQUFhLFNBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsaUVBQ0EseUVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGlFQUNBLDJFQU1OZixXQUFZLGlDQUNaTSxZQUFhLFNBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsaUVBQ0EseUVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGlFQUNBLDJFQU1OZixXQUFZLG9DQUNaTSxZQUFhLFlBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0Usb0VBQ0EsNEVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLG9FQUNBLDhFQU1OZixXQUFZLCtCQUNaTSxZQUFhLE9BQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsK0RBQ0EsdUVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLCtEQUNBLHlFQU1OZixXQUFZLG9DQUNaTSxZQUFhLFlBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0Usb0VBQ0EsNEVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLG9FQUNBLDhFQU1OZixXQUFZLCtCQUNaTSxZQUFhLE9BQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsK0RBQ0EsdUVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLCtEQUNBLHlFQU1OZixXQUFZLGlDQUNaTSxZQUFhLFNBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsaUVBQ0EseUVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGlFQUNBLDJFQU1OZixXQUFZLGdDQUNaTSxZQUFhLFFBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsZ0VBQ0Esd0VBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLGdFQUNBLDBFQU1OZixXQUFZLG1DQUNaTSxZQUFhLFdBQ2JLLFFBQ0VHLFlBQ0VDLE1BQ0UsbUVBQ0EsMkVBRUZ2TyxNQUFPLEdBQ1BtQixPQUFRLElBRVZrTixXQUNFRSxNQUNFLG1FQUNBLDZFQU1OZixXQUFZLGlD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akUsSUFKQSxJQUNNVixFQURZNXBCLEtBQUttb0IsZUFBZSxhQUNaRSxhQUFhcFosTUFBTSxHQUFHMnhFLFVBRTVDOTRELFNBQVErQixTQUNIdHBCLEVBQUksRUFBR0EsRUFBSXFwQixFQUFReGpCLE9BQVE3RixJQUVsQyxJQURBdW5CLEVBQVM4QixFQUFRcnBCLGNBQ0srcEIsRUFBa0IsQ0FDdENULEVBQWEvQixFQUNiLE1BSUo5bkIsS0FBSzBwQixnQkFBaUJ0QixlQUFnQnlCLEdBQWMsNkNBU3ZDM0osYUFoREkreUksRUFDWjdrSixhQUFlcWdJLEVBQUEsRUFBK0JyZ0kiLCJmaWxlIjoiUGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInBob3RvZWRpdG9yc2RrL2pzL1Bob3RvRWRpdG9yU0RLXCIpLCByZXF1aXJlKFwicmVhY3RcIiksIHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wicGhvdG9lZGl0b3JzZGtcIiwgXCJyZWFjdFwiLCBcInJlYWN0LWRvbVwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJQaG90b0VkaXRvckRlc2t0b3BVSVwiXSA9IGZhY3RvcnkocmVxdWlyZShcInBob3RvZWRpdG9yc2RrL2pzL1Bob3RvRWRpdG9yU0RLXCIpLCByZXF1aXJlKFwicmVhY3RcIiksIHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlBob3RvRWRpdG9yRGVza3RvcFVJXCJdID0gZmFjdG9yeShyb290W1wiUGhvdG9FZGl0b3JTREtcIl0sIHJvb3RbXCJSZWFjdFwiXSwgcm9vdFtcIlJlYWN0RE9NXCJdKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzdfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8zMl9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzE1MV9fKSB7XG5yZXR1cm4gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEzNyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgNWJlZmY5Yjk1YTVmYTRlZjcyNDMiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCBQaG90b0VkaXRvclNESyBmcm9tICdwaG90b2VkaXRvcnNkaydcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcblxuaW1wb3J0IHsgRGVmYXVsdFRoZW1lIH0gZnJvbSAnLi90aGVtZXMnXG5pbXBvcnQgQWRvbmlzLCB7IHdpdGhUaGVtZSwgVGhlbWVQcm92aWRlciB9IGZyb20gJ2Fkb25pcydcblxuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnRzL2Jhc2UtY29tcG9uZW50J1xuaW1wb3J0IFV0aWxzIGZyb20gJy4vbGliL3V0aWxzJ1xuaW1wb3J0IENvbnN0YW50cyBmcm9tICcuL2xpYi9jb25zdGFudHMnXG5pbXBvcnQgU2hhcmVkU3RhdGUgZnJvbSAnLi9saWIvc2hhcmVkLXN0YXRlJ1xuaW1wb3J0IHsgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLCBjYW5jZWxBbmltYXRpb25GcmFtZSB9IGZyb20gJ3NoYXJlZC9hc3luYy9hbmltYXRpb24tZnJhbWUnXG5pbXBvcnQgTG9nIGZyb20gJ3NoYXJlZC9sb2cnXG5pbXBvcnQgSW1hZ2VMb2FkZXIgZnJvbSAnc2hhcmVkL2xvYWRlcnMvaW1hZ2UtbG9hZGVyJ1xuaW1wb3J0IFNoYXJlZENvbnN0YW50cyBmcm9tICdzaGFyZWQvY29uc3RhbnRzJ1xuXG5jb25zdCBlbnYgPSBwcm9jZXNzLmVudi5FTlZcbmNvbnN0IGFkb25pcyA9IG5ldyBBZG9uaXMoZ2xvYmFsLmFkb25pc09wdGlvbnMgfHwge1xuICBpbmplY3Rpb246IChlbnYgPT09ICdwcm9kdWN0aW9uJyB8fCBlbnYgPT09ICd0ZXN0JykgPyBmYWxzZSA6ICdwcmUnLFxuICB0aGVtZTogRGVmYXVsdFRoZW1lLFxuICBtaW5pZmllZDogZW52ID09PSAncHJvZHVjdGlvbicsXG4gIGNzc1NlbGVjdG9yUHJlZml4OiAnLnBlc2RrLWRlc2t0b3AtZWRpdG9yICcsXG4gIGNsYXNzTmFtZVByZWZpeDogJ3Blc2RrLScsXG4gIGhhc2hlZFN0eWxlczogZW52ID09PSAncHJvZHVjdGlvbidcbn0pXG5cbmNvbnN0IEJhc2U2NCA9IFBob3RvRWRpdG9yU0RLLkJhc2U2NFxuY29uc3QgQ29sb3IgPSBQaG90b0VkaXRvclNESy5Db2xvclxuY29uc3QgQ29sb3JNYXRyaXggPSBQaG90b0VkaXRvclNESy5NYXRoLkNvbG9yTWF0cml4XG5jb25zdCBFdmVudEVtaXR0ZXIgPSBQaG90b0VkaXRvclNESy5FdmVudEVtaXR0ZXJcbmNvbnN0IEVYSUYgPSBQaG90b0VkaXRvclNESy5FWElGXG5jb25zdCBPcHRpb25UeXBlID0gUGhvdG9FZGl0b3JTREsuT3B0aW9uVHlwZVxuY29uc3QgUHJvbWlzZSA9IFBob3RvRWRpdG9yU0RLLlByb21pc2VcbmNvbnN0IFNES1V0aWxzID0gUGhvdG9FZGl0b3JTREsuVXRpbHNcbmNvbnN0IFJlbmRlclR5cGUgPSBQaG90b0VkaXRvclNESy5SZW5kZXJUeXBlXG5jb25zdCBJbWFnZUZvcm1hdCA9IFBob3RvRWRpdG9yU0RLLkltYWdlRm9ybWF0XG5jb25zdCBTREsgPSBQaG90b0VkaXRvclNES1xuY29uc3QgVW5pZm9ybVR5cGUgPSBQaG90b0VkaXRvclNESy5Vbmlmb3JtVHlwZVxuY29uc3QgVmVjdG9yMiA9IFBob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMlxuY29uc3QgUmVjdGFuZ2xlID0gUGhvdG9FZGl0b3JTREsuTWF0aC5SZWN0YW5nbGVcblxuY29uc3Qgbm93ID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93XG4gID8gd2luZG93LnBlcmZvcm1hbmNlLm5vdy5iaW5kKHdpbmRvdy5wZXJmb3JtYW5jZSlcbiAgOiByZXF1aXJlKCdwZXJmb3JtYW5jZS1ub3cnKSlcblxuZXhwb3J0IHtcbiAgUHJvbWlzZSwgVXRpbHMsIFJlYWN0LCBCYXNlQ29tcG9uZW50LCBWZWN0b3IyLFxuICBTREtVdGlscywgRXZlbnRFbWl0dGVyLCBDb25zdGFudHMsIFNoYXJlZFN0YXRlLCBDb2xvciwgQmFzZTY0LCBSZW5kZXJUeXBlLCBPcHRpb25UeXBlLCBVbmlmb3JtVHlwZSxcbiAgUmVhY3RET00sIEVYSUYsIFNESywgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLCBjYW5jZWxBbmltYXRpb25GcmFtZSwgTG9nLCBub3csIENvbG9yTWF0cml4LFxuICBJbWFnZUZvcm1hdCwgd2l0aFRoZW1lLCBUaGVtZVByb3ZpZGVyLCBSZWN0YW5nbGUsIGFkb25pcywgSW1hZ2VMb2FkZXIsIFByb3BUeXBlcywgU2hhcmVkQ29uc3RhbnRzXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2dsb2JhbHMuanMiLCIvKiBAbW9kdWxlICovXG4vKiFcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vdWknKS5kZWZhdWx0XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfN19fO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIHtcImNvbW1vbmpzXCI6XCJwaG90b2VkaXRvcnNkay9qcy9QaG90b0VkaXRvclNES1wiLFwiY29tbW9uanMyXCI6XCJwaG90b2VkaXRvcnNkay9qcy9QaG90b0VkaXRvclNES1wiLFwiYW1kXCI6XCJwaG90b2VkaXRvcnNka1wiLFwicm9vdFwiOlwiUGhvdG9FZGl0b3JTREtcIn1cbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZS5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuMycgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnblwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qc1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYga2V5IGluIGV4cG9ydHMpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qXG4gKiBodHRwOi8vcGF1bGlyaXNoLmNvbS8yMDExL3JlcXVlc3RhbmltYXRpb25mcmFtZS1mb3Itc21hcnQtYW5pbWF0aW5nL1xuICogaHR0cDovL215Lm9wZXJhLmNvbS9lbW9sbGVyL2Jsb2cvMjAxMS8xMi8yMC9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWVyLWFuaW1hdGluZ1xuICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHBvbHlmaWxsIGJ5IEVyaWsgTcO2bGxlci4gZml4ZXMgZnJvbSBQYXVsIElyaXNoIGFuZCBUaW5vIFppamRlbFxuICogTUlUIGxpY2Vuc2VcbiAqIEBsaWNlbnNlXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgc3RhbmRhcmQvbm8tY2FsbGJhY2stbGl0ZXJhbCAqL1xuXG5jb25zdCByb290ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3dcbmxldCByQUYgPSByb290LnJlcXVlc3RBbmltYXRpb25GcmFtZVxubGV0IGNBRiA9IHJvb3QuY2FuY2VsQW5pbWF0aW9uRnJhbWVcblxubGV0IGxhc3RUaW1lID0gMFxuY29uc3QgdmVuZG9ycyA9IFsnbXMnLCAnbW96JywgJ3dlYmtpdCcsICdvJ11cbmZvciAobGV0IHggPSAwOyB4IDwgdmVuZG9ycy5sZW5ndGggJiYgIXJBRjsgKyt4KSB7XG4gIHJBRiA9IHJvb3RbdmVuZG9yc1t4XSArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXVxuICBjQUYgPSByb290W3ZlbmRvcnNbeF0gKyAnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXSB8fCByb290W3ZlbmRvcnNbeF0gKyAnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ11cbn1cblxuLyogQmluZCB0byByb290IGlzIG5lY2Vzc2FyeSBhcyB0aGUgY29udGV4dCBtdXN0IGJlIHZhbGlkICovXG5pZiAockFGKSB7IHJBRiA9IHJBRi5iaW5kKHJvb3QpIH1cbmlmIChjQUYpIHsgY0FGID0gY0FGLmJpbmQocm9vdCkgfVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKCFyQUYpIHtcbiAgckFGID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBlbGVtZW50KSB7XG4gICAgY29uc3QgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgIGNvbnN0IHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSlcbiAgICBjb25zdCBpZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBjYWxsYmFjayhjdXJyVGltZSArIHRpbWVUb0NhbGwpIH0sIHRpbWVUb0NhbGwpXG4gICAgbGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGxcbiAgICByZXR1cm4gaWRcbiAgfVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKCFjQUYpIHtcbiAgY0FGID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgY2xlYXJUaW1lb3V0KGlkKVxuICB9XG59XG5cbmV4cG9ydCB7XG4gIHJBRiBhcyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gIGNBRiBhcyBjYW5jZWxBbmltYXRpb25GcmFtZVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvYXN5bmMvYW5pbWF0aW9uLWZyYW1lLmpzIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGJyYWNlLXN0eWxlICovXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2FkICh1cmwsIGNyb3NzT3JpZ2luID0geyBjb3JzOiB0cnVlLCB2YWx1ZTogJ2Fub255bW91cycgfSkge1xuICAgIGNvbnN0IGxvYWRQcm9taXNlID0gKCkgPT4ge1xuICAgICAgaWYgKHVybC5zdWJzdHIoMCwgNSkgPT09ICdkYXRhOicgfHwgdHlwZW9mIFdFQlBBQ0sgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW3VybCwgdXJsXSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbG9hZFByb21pc2UoKVxuICAgICAgLnRoZW4oKFtvcmlnaW5hbFNyYywgc3JjXSkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlQW5kTG9hZEltYWdlKG9yaWdpbmFsU3JjLCBzcmMsIGNyb3NzT3JpZ2luKVxuICAgICAgfSlcbiAgfSxcblxuICBfY3JlYXRlQW5kTG9hZEltYWdlIChvcmlnaW5hbFNyYywgc3JjLCBjcm9zc09yaWdpbiA9IHsgY29yczogdHJ1ZSwgdmFsdWU6ICdhbm9ueW1vdXMnIH0pIHtcbiAgICBpZiAodHlwZW9mIFdFQlBBQ0sgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKVxuICAgICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoaW1hZ2UpXG4gICAgICAgIH0pXG4gICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIGltYWdlIGF0ICR7c3JjfWApKVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChjcm9zc09yaWdpbi5jb3JzKSB7XG4gICAgICAgICAgaW1hZ2UuY3Jvc3NPcmlnaW4gPSBjcm9zc09yaWdpbi52YWx1ZVxuICAgICAgICB9XG5cbiAgICAgICAgaW1hZ2Uuc3JjID0gc3JjXG4gICAgICB9KVxuICAgIH1cblxuICB9LFxuXG4gIGxvYWRYSFIgKHVybCwgbWltZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgeGhyXG4gICAgICBpZiAod2luZG93LlhEb21haW5SZXF1ZXN0KSB7XG4gICAgICAgIHhociA9IG5ldyB3aW5kb3cuWERvbWFpblJlcXVlc3QoKVxuICAgICAgICBpZiAobWltZSkgeGhyLm92ZXJyaWRlTWltZVR5cGUobWltZSlcblxuICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlc29sdmUoeGhyKVxuICAgICAgICB9XG4gICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZWplY3QoZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3QpIHtcbiAgICAgICAgeGhyID0gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpXG4gICAgICAgIGlmIChtaW1lKSB4aHIub3ZlcnJpZGVNaW1lVHlwZShtaW1lKVxuXG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAob0V2ZW50KSB7XG4gICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoeGhyKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgSFRUUCBTdGF0dXMgJHt4aHIuc3RhdHVzfWApKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKVxuICAgICAgeGhyLnNlbmQoKVxuICAgIH0pXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL2xvYWRlcnMvaW1hZ2UtbG9hZGVyLmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgUHJvcFR5cGVzLCBCYXNlQ29tcG9uZW50LCBVdGlscywgVmVjdG9yMiB9IGZyb20gJ2dsb2JhbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERyYWdnYWJsZUNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQmFzZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG9uU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uRHJhZzogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25TdG9wOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2xcbiAgfVxuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uRHJhZ1N0YXJ0JyxcbiAgICAgICdfb25EcmFnTW92ZScsXG4gICAgICAnX29uRHJhZ0VuZCdcbiAgICApXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKVxuICAgIGlmICh0aGlzLnJlZnMuZWxlbWVudCkge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMucmVmcy5lbGVtZW50XG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgc3RhcnMgZHJhZ2dpbmcgdGhlIGNoaWxkXG4gICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkRyYWdTdGFydCAoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSByZXR1cm5cblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIHRoaXMuX2luaXRpYWxNb3VzZVBvc2l0aW9uID0gVXRpbHMuZ2V0RXZlbnRQb3NpdGlvbihlKVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fb25EcmFnTW92ZSwgeyBwYXNzaXZlOiBmYWxzZSB9KVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX29uRHJhZ01vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSlcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fb25EcmFnRW5kKVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5fb25EcmFnRW5kKVxuXG4gICAgY29uc3QgYm91bmRpbmdSZWN0ID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGNvbnN0IGVsZW1lbnRPZmZzZXQgPSBuZXcgVmVjdG9yMihcbiAgICAgIGJvdW5kaW5nUmVjdC5sZWZ0LFxuICAgICAgYm91bmRpbmdSZWN0LnRvcFxuICAgIClcblxuICAgIHRoaXMuX2xhc3RNb3VzZVBvc2l0aW9uID0gdGhpcy5faW5pdGlhbE1vdXNlUG9zaXRpb24uY2xvbmUoKVxuICAgIGNvbnN0IHJlbGF0aXZlUG9zaXRpb24gPSB0aGlzLl9pbml0aWFsTW91c2VQb3NpdGlvblxuICAgICAgLmNsb25lKClcbiAgICAgIC5zdWJ0cmFjdChlbGVtZW50T2Zmc2V0KVxuICAgIHRoaXMucHJvcHMub25TdGFydCAmJiB0aGlzLnByb3BzLm9uU3RhcnQocmVsYXRpdmVQb3NpdGlvbiwgdGhpcy5faW5pdGlhbE1vdXNlUG9zaXRpb24uY2xvbmUoKSwgZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGlsZSB0aGUgdXNlciBkcmFncyB0aGUgY2hpbGRcbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uRHJhZ01vdmUgKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBjb25zdCBtb3VzZVBvc2l0aW9uID0gVXRpbHMuZ2V0RXZlbnRQb3NpdGlvbihlKVxuICAgIGlmICghbW91c2VQb3NpdGlvbikgcmV0dXJuXG4gICAgY29uc3QgbW91c2VEaWZmID0gbW91c2VQb3NpdGlvbi5jbG9uZSgpLnN1YnRyYWN0KHRoaXMuX2luaXRpYWxNb3VzZVBvc2l0aW9uKVxuXG4gICAgY29uc3QgbGFzdE1vdXNlRGlmZiA9IG1vdXNlUG9zaXRpb24uY2xvbmUoKS5zdWJ0cmFjdCh0aGlzLl9sYXN0TW91c2VQb3NpdGlvbilcbiAgICB0aGlzLl9sYXN0TW91c2VQb3NpdGlvbiA9IG1vdXNlUG9zaXRpb24uY2xvbmUoKVxuICAgIHRoaXMucHJvcHMub25EcmFnICYmIHRoaXMucHJvcHMub25EcmFnKG1vdXNlRGlmZiwgbW91c2VQb3NpdGlvbiwgbGFzdE1vdXNlRGlmZiwgZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHN0b3BzIGRyYWdnaW5nIHRoZSBjaGlsZFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25EcmFnRW5kIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblxuICAgIHRoaXMuX29uRHJhZ01vdmUoZSlcblxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX29uRHJhZ01vdmUpXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5fb25EcmFnTW92ZSlcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fb25EcmFnRW5kKVxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5fb25EcmFnRW5kKVxuXG4gICAgdGhpcy5wcm9wcy5vblN0b3AgJiYgdGhpcy5wcm9wcy5vblN0b3AoZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCB0aGlzLnByb3BzLmNoaWxkcmVuIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRHJhZ2dhYmxlQ29tcG9uZW50IGV4cGVjdHMgZXhhY3RseSBvbmUgY2hpbGQuJylcbiAgICB9XG5cbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIG9uTW91c2VEb3duOiB0aGlzLl9vbkRyYWdTdGFydCxcbiAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5fb25EcmFnU3RhcnQsXG4gICAgICBzdHlsZToge1xuICAgICAgICAuLi4odGhpcy5wcm9wcy5jaGlsZHJlbi5wcm9wcy5zdHlsZSB8fCB7fSksXG4gICAgICAgIHRvdWNoQWN0aW9uOiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICBvbkNsaWNrOiAoZSkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgIGNvbnN0IHsgb25DbGljayB9ID0gdGhpcy5wcm9wcy5jaGlsZHJlbi5wcm9wc1xuICAgICAgICAgIG9uQ2xpY2sgJiYgb25DbGljayhlKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5jaGlsZHJlbi50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgcHJvcHMucmVmID0gJ2VsZW1lbnQnXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG9yaWdpbmFsSW5uZXJSZWYgPSB0aGlzLnByb3BzLmNoaWxkcmVuLnByb3BzLmlubmVyUmVmXG4gICAgICBwcm9wcy5pbm5lclJlZiA9IChlbCkgPT4geyB0aGlzLl9lbGVtZW50ID0gZWw7IG9yaWdpbmFsSW5uZXJSZWYgJiYgb3JpZ2luYWxJbm5lclJlZihlbCkgfVxuICAgIH1cbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KHRoaXMucHJvcHMuY2hpbGRyZW4sIHByb3BzKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvZHJhZ2dhYmxlLWNvbXBvbmVudC5qc3giLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8zMl9fO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIHtcInJvb3RcIjpcIlJlYWN0XCIsXCJjb21tb25qczJcIjpcInJlYWN0XCIsXCJjb21tb25qc1wiOlwicmVhY3RcIixcImFtZFwiOlwicmVhY3RcIn1cbi8vIG1vZHVsZSBpZCA9IDMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzXG4vLyBtb2R1bGUgaWQgPSAzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgU0RLVXRpbHMsIEV2ZW50RW1pdHRlciB9IGZyb20gJ2dsb2JhbHMnXG5cbmNsYXNzIE1vZGFsIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IgKHR5cGUsIHRpdGxlLCB0ZXh0LCBvdmVybGF5ID0gZmFsc2UsIGNsb3NlT25PdmVybGF5Q2xpY2sgPSBmYWxzZSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmlkID0gU0RLVXRpbHMuZ2V0VVVJRCgpXG4gICAgdGhpcy50eXBlID0gdHlwZVxuICAgIHRoaXMudGl0bGUgPSB0aXRsZVxuICAgIHRoaXMudGV4dCA9IHRleHRcbiAgICB0aGlzLm92ZXJsYXkgPSBvdmVybGF5XG4gICAgdGhpcy5jbG9zZU9uT3ZlcmxheUNsaWNrID0gY2xvc2VPbk92ZXJsYXlDbGlja1xuICAgIHRoaXMudmlzaWJsZSA9IHRydWVcbiAgICB0aGlzLmRhdGEgPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZGF0YSB0byB0aGUgZ2l2ZW4gb25lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuICBzZXREYXRhIChkYXRhKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YVxuICAgIHRoaXMuZW1pdCgndXBkYXRlJylcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhpcyBtb2RhbFxuICAgKi9cbiAgY2xvc2UgKCkge1xuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlXG4gICAgdGhpcy5lbWl0KCdjbG9zZScpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGlzIG1vZGFsXG4gICAqL1xuICByZW1vdmUgKCkge1xuICAgIHRoaXMuZW1pdCgncmVtb3ZlJylcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbE1hbmFnZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgdGhpcy5fbW9kYWxzID0gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbG9hZGluZyBtb2RhbFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHRpdGxlXG4gICAqIEByZXR1cm4ge01vZGFsfVxuICAgKi9cbiAgZGlzcGxheUxvYWRpbmcgKHRpdGxlLCBvdmVybGF5ID0gdHJ1ZSkge1xuICAgIGNvbnN0IG1vZGFsID0gbmV3IE1vZGFsKCdsb2FkaW5nJywgdGl0bGUsIG51bGwsIG92ZXJsYXkpXG4gICAgdGhpcy5hZGRNb2RhbChtb2RhbClcbiAgICByZXR1cm4gbW9kYWxcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcHJvZ3Jlc3MgbW9kYWxcbiAgICogQHBhcmFtICB7U3RyaW5nfSB0ZXh0XG4gICAqIEByZXR1cm4ge01vZGFsfVxuICAgKi9cbiAgZGlzcGxheVByb2dyZXNzICh0ZXh0LCBwcm9ncmVzcyA9IDApIHtcbiAgICBjb25zdCBtb2RhbCA9IG5ldyBNb2RhbCgncHJvZ3Jlc3MnLCBudWxsLCB0ZXh0KVxuICAgIG1vZGFsLnNldERhdGEoeyBwcm9ncmVzcyB9KVxuICAgIHRoaXMuYWRkTW9kYWwobW9kYWwpXG4gICAgcmV0dXJuIG1vZGFsXG4gIH1cblxuICBkaXNwbGF5SW5wdXQgKHRpdGxlLCB0ZXh0ID0gJycsIG92ZXJsYXkgPSB0cnVlKSB7XG4gICAgY29uc3QgbW9kYWwgPSBuZXcgTW9kYWwoJ2lucHV0JywgdGl0bGUsIG51bGwsIG92ZXJsYXksIHRydWUpXG4gICAgbW9kYWwuc2V0RGF0YSh7IHRleHQgfSlcbiAgICB0aGlzLmFkZE1vZGFsKG1vZGFsKVxuICAgIHJldHVybiBtb2RhbFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB3YXJuaW5nIG1vZGFsXG4gICAqIEBwYXJhbSAge1N0cmluZ30gdGl0bGVcbiAgICogQHBhcmFtICB7U3RyaW5nfSB0ZXh0XG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IG92ZXJsYXkgPSB0cnVlXG4gICAqIEByZXR1cm4ge01vZGFsfVxuICAgKi9cbiAgZGlzcGxheVdhcm5pbmcgKHRpdGxlLCB0ZXh0LCBidXR0b25zID0gWydPSyddLCBvdmVybGF5ID0gdHJ1ZSkge1xuICAgIGNvbnN0IG1vZGFsID0gbmV3IE1vZGFsKCd3YXJuaW5nJywgdGl0bGUsIHRleHQsIG92ZXJsYXkpXG4gICAgbW9kYWwuc2V0RGF0YSh7IGJ1dHRvbnMgfSlcbiAgICB0aGlzLmFkZE1vZGFsKG1vZGFsKVxuICAgIHJldHVybiBtb2RhbFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gZXJyb3IgbW9kYWxcbiAgICogQHBhcmFtICB7U3RyaW5nfSB0aXRsZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHRleHRcbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gb3ZlcmxheSA9IHRydWVcbiAgICogQHJldHVybiB7TW9kYWx9XG4gICAqL1xuICBkaXNwbGF5RXJyb3IgKHRpdGxlLCB0ZXh0LCBvdmVybGF5ID0gdHJ1ZSkge1xuICAgIGNvbnN0IG1vZGFsID0gbmV3IE1vZGFsKCdlcnJvcicsIHRpdGxlLCB0ZXh0LCBvdmVybGF5KVxuICAgIHRoaXMuYWRkTW9kYWwobW9kYWwpXG4gICAgcmV0dXJuIG1vZGFsXG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgZ2l2ZW4gbW9kYWwgdG8gdGhlIGxpc3Qgb2YgbW9kYWxzXG4gICAqIEBwYXJhbSB7TW9kYWx9IG1vZGFsXG4gICAqL1xuICBhZGRNb2RhbCAobW9kYWwpIHtcbiAgICB0aGlzLl9tb2RhbHMucHVzaChtb2RhbClcbiAgICBtb2RhbC5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScpXG4gICAgfSlcbiAgICBtb2RhbC5vbigncmVtb3ZlJywgKCkgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVNb2RhbChtb2RhbClcbiAgICB9KVxuICAgIG1vZGFsLm9uKCd1cGRhdGUnLCAoKSA9PiB7XG4gICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScpXG4gICAgfSlcbiAgICB0aGlzLmVtaXQoJ3VwZGF0ZScpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gbW9kYWwgZnJvbSB0aGUgbGlzdCBvZiBtb2RhbHNcbiAgICogQHBhcmFtICB7TW9kYWx9IG1vZGFsXG4gICAqL1xuICByZW1vdmVNb2RhbCAobW9kYWwpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX21vZGFscy5pbmRleE9mKG1vZGFsKVxuICAgIHRoaXMuX21vZGFscy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgdGhpcy5lbWl0KCd1cGRhdGUnKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG1vZGFsc1xuICAgKiBAcmV0dXJuIHtBcnJheS48TW9kYWw+fVxuICAgKi9cbiAgZ2V0TW9kYWxzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kYWxzXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb25lIGFuZCBvbmx5IGluc3RhbmNlIG9mIHRoaXMgY2xhc3NcbiAgICogQHJldHVybiB7TW9kYWxNYW5hZ2VyfVxuICAgKi9cbiAgc3RhdGljIGdldCBpbnN0YW5jZSAoKSB7XG4gICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xuICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgTW9kYWxNYW5hZ2VyKClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL21hbmFnZXJzL21vZGFsLW1hbmFnZXIuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBQcm9wVHlwZXMsIEJhc2VDb21wb25lbnQsIGFkb25pcywgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIH0gZnJvbSAnLi4vLi4vZ2xvYmFscydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWxDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHsgbW9kYWw6IFByb3BUeXBlcy5vYmplY3QgfVxuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQmFzZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9idXR0b25zID0gW11cbiAgICB0aGlzLnN0YXRlID0geyB2aXNpYmxlOiBmYWxzZSB9XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoLi4uYXJncykge1xuICAgIHN1cGVyLmNvbXBvbmVudERpZE1vdW50KC4uLmFyZ3MpXG5cbiAgICBjb25zdCB7IG1vZGFsIH0gPSB0aGlzLnByb3BzXG4gICAgbW9kYWwub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZpc2libGU6IGZhbHNlIH0pXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbW9kYWwucmVtb3ZlKClcbiAgICAgIH0sIHRoaXMuY29udGV4dC50aGVtZS50cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwKVxuICAgIH0pXG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZpc2libGU6IHRydWUgfSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIGEgYnV0dG9uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBidXR0b25JbmRleFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQnV0dG9uQ2xpY2sgKGJ1dHRvbkluZGV4KSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBidXR0b25zXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnRbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJCdXR0b25zICgpIHtcbiAgICByZXR1cm4gdGhpcy5fYnV0dG9ucy5tYXAoKGJ1dHRvbiwgaSkgPT4ge1xuICAgICAgcmV0dXJuICg8QnV0dG9uIGtleT17aX0gb25DbGljaz17dGhpcy5fb25CdXR0b25DbGljay5iaW5kKHRoaXMsIGkpfT5cbiAgICAgICAge2J1dHRvbn1cbiAgICAgIDwvQnV0dG9uPilcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBtb2RhbCB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHRvcFByb3BzID0geyBbbW9kYWwudHlwZV06IHRydWUgfVxuXG4gICAgbGV0IGJ1dHRvbnMgPSB0aGlzLl9idXR0b25zLmxlbmd0aCA/ICg8QnV0dG9ucz5cbiAgICAgIHt0aGlzLl9yZW5kZXJCdXR0b25zKCl9XG4gICAgPC9CdXR0b25zPikgOiBudWxsXG5cbiAgICBsZXQgY29udGVudCA9IHRoaXMuX3JlbmRlckNvbnRlbnQgJiYgdGhpcy5fcmVuZGVyQ29udGVudCgpXG5cbiAgICBpZiAoY29udGVudCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPE1vZGFsIHZpc2libGU9e3RoaXMuc3RhdGUudmlzaWJsZX0gbGFyZ2U9e3RoaXMuc3RhdGUubGFyZ2V9PlxuICAgICAgICAgIHtjb250ZW50fVxuICAgICAgICAgIDxCbG9ja2luZ092ZXJsYXkgb25DbGljaz17dGhpcy5fb25DbGlja092ZXJsYXl9IHZpc2libGU9eyF0aGlzLnN0YXRlLnZpc2libGV9IC8+XG4gICAgICAgIDwvTW9kYWw+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuICg8TW9kYWwgdmlzaWJsZT17dGhpcy5zdGF0ZS52aXNpYmxlfT5cbiAgICAgIDxUb3Agey4uLnRvcFByb3BzfT5cbiAgICAgICAgPEljb25Db250YWluZXI+XG4gICAgICAgICAgPEljb24gc3JjPXt0aGlzLl9nZXRBc3NldFBhdGgoJ3NoYXJlZC9tb2RhbHMvaWNvbi5wbmcnLCB0cnVlKX0gLz5cbiAgICAgICAgPC9JY29uQ29udGFpbmVyPlxuICAgICAgICA8VGV4dENvbnRhaW5lcj5cbiAgICAgICAgICA8VGl0bGU+e21vZGFsLnRpdGxlfTwvVGl0bGU+XG4gICAgICAgICAgPFRleHQ+e21vZGFsLnRleHR9PC9UZXh0PlxuICAgICAgICA8L1RleHRDb250YWluZXI+XG4gICAgICA8L1RvcD5cbiAgICAgIHtidXR0b25zfVxuICAgICAgPEJsb2NraW5nT3ZlcmxheSBvbkNsaWNrPXt0aGlzLl9vbkNsaWNrT3ZlcmxheX0gdmlzaWJsZT17IXRoaXMuc3RhdGUudmlzaWJsZX0gLz5cbiAgICA8L01vZGFsPilcbiAgfVxufVxuXG5jb25zdCBNb2RhbCA9IGFkb25pcy5kaXYoe1xuICB0cmFuc2Zvcm06ICdyb3RhdGUzZCgxLCAxLCAwLCAtMTVkZWcpIHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKScsXG4gIHRyYW5zZm9ybU9yaWdpbjogJzAgMCcsXG4gIHRyYW5zaXRpb246IHRoZW1lID0+IGBhbGwgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259c2AsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICc1MCUnLFxuICBsZWZ0OiAnNTAlJyxcbiAgd2lkdGg6ICcyODBweCcsXG4gIGJhY2tncm91bmQ6IHRoZW1lID0+IGByZ2JhKCR7dGhlbWUuc2Vjb25kYXJ5Q29udHJvbHNCYWNrZ3JvdW5kQ29sb3JSR0J9LCAuOTUpYCxcbiAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ292ZXJsYXlzJyksXG4gIGJveFNoYWRvdzogJzAgNnB4IDEwcHggMCByZ2JhKDAsIDAsIDAsIDAuNTApJyxcbiAgb3BhY2l0eTogMFxufSwge1xuICB2aXNpYmxlOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpJyxcbiAgICBvcGFjaXR5OiAxXG4gIH0sXG4gIGxhcmdlOiB7XG4gICAgd2lkdGg6ICczNzZweCcsXG4gICAgYm9yZGVyUmFkaXVzOiAnM3B4JyxcbiAgICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiBgcmdiYSgke3RoZW1lLnNlY29uZGFyeUNvbnRyb2xzQmFja2dyb3VuZENvbG9yUkdCfSwgMSlgXG4gIH1cbn0pXG5cbmV4cG9ydCBjb25zdCBUb3AgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlJyxcbiAgdGFibGVMYXlvdXQ6ICdmaXhlZCcsXG4gIHdpZHRoOiAnMTAwJScsXG4gIHBhZGRpbmc6ICcwIDIwcHggMCAwJ1xufSwge1xuICBlcnJvcjoge1xuICAgIGJvcmRlckJvdHRvbTogdGhlbWUgPT4gYDJweCBzb2xpZCAke3RoZW1lLm1vZGFsRXJyb3JDb2xvcn1gXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBib3JkZXJCb3R0b206IHRoZW1lID0+IGAycHggc29saWQgJHt0aGVtZS5tb2RhbFdhcm5pbmdDb2xvcn1gXG4gIH0sXG4gIGxvYWRpbmc6IHtcbiAgICBib3JkZXJCb3R0b206IHRoZW1lID0+IGAycHggc29saWQgJHt0aGVtZS5tb2RhbExvYWRpbmdDb2xvcn1gXG4gIH1cbn0pXG5cbmV4cG9ydCBjb25zdCBJY29uQ29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgd2lkdGg6ICcxMDBweCcsXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnXG59KVxuXG5leHBvcnQgY29uc3QgVGV4dENvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICBwYWRkaW5nOiAnNDVweCAwJ1xufSlcblxuY29uc3QgQnV0dG9ucyA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUnLFxuICB0YWJsZUxheW91dDogJ2ZpeGVkJyxcbiAgaGVpZ2h0OiAnNDhweCcsXG4gIHdpZHRoOiAnMTAwJSdcbn0pXG5cbmNvbnN0IEJ1dHRvbiA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgbGV0dGVyU3BhY2luZzogMC44NCxcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgZm9udEZhbWlseTogdGhlbWUgPT4gdGhlbWUudXBwZXJjYXNlU2VtaUJvbGRGb250RmFtaWx5LFxuICBjb2xvcjogdGhlbWUgPT4gdGhlbWUudGV4dENvbG9yLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgJzpob3Zlcic6IHtcbiAgICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS5zZWNvbmRhcnlDb250cm9sc0JhY2tncm91bmRDb2xvclxuICB9XG59KVxuXG5leHBvcnQgY29uc3QgSWNvbiA9IGFkb25pcy5pbWcoe1xuICB3aWR0aDogJzU2cHgnLFxuICBoZWlnaHQ6ICc1NnB4J1xufSlcblxuZXhwb3J0IGNvbnN0IFRpdGxlID0gYWRvbmlzLmRpdih7XG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnVwcGVyY2FzZVNlbWlCb2xkRm9udEZhbWlseSxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLmRpbW1lZFRleHRDb2xvcixcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gIGxldHRlclNwYWNpbmc6IDEuMixcbiAgZm9udFNpemU6ICcxM3B4J1xufSlcblxuZXhwb3J0IGNvbnN0IFRleHQgPSBhZG9uaXMuZGl2KHtcbiAgZm9udEZhbWlseTogdGhlbWUgPT4gdGhlbWUucmVndWxhckZvbnRGYW1pbHksXG4gIGNvbG9yOiB0aGVtZSA9PiB0aGVtZS5kaW1tZWRUZXh0Q29sb3IsXG4gIGZvbnRTaXplOiAnMTNweCcsXG4gIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgb3ZlcmZsb3dYOiAnYXV0bydcbn0pXG5cbmNvbnN0IEJsb2NraW5nT3ZlcmxheSA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgdG9wOiAwLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgZGlzcGxheTogJ25vbmUnXG59LCB7XG4gIHZpc2libGU6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snXG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvbW9kYWxzL21vZGFsLWNvbXBvbmVudC5qc3giLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanNcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanNcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbnZhciBET01JdGVyYWJsZXMgPSAoJ0NTU1J1bGVMaXN0LENTU1N0eWxlRGVjbGFyYXRpb24sQ1NTVmFsdWVMaXN0LENsaWVudFJlY3RMaXN0LERPTVJlY3RMaXN0LERPTVN0cmluZ0xpc3QsJyArXG4gICdET01Ub2tlbkxpc3QsRGF0YVRyYW5zZmVySXRlbUxpc3QsRmlsZUxpc3QsSFRNTEFsbENvbGxlY3Rpb24sSFRNTENvbGxlY3Rpb24sSFRNTEZvcm1FbGVtZW50LEhUTUxTZWxlY3RFbGVtZW50LCcgK1xuICAnTWVkaWFMaXN0LE1pbWVUeXBlQXJyYXksTmFtZWROb2RlTWFwLE5vZGVMaXN0LFBhaW50UmVxdWVzdExpc3QsUGx1Z2luLFBsdWdpbkFycmF5LFNWR0xlbmd0aExpc3QsU1ZHTnVtYmVyTGlzdCwnICtcbiAgJ1NWR1BhdGhTZWdMaXN0LFNWR1BvaW50TGlzdCxTVkdTdHJpbmdMaXN0LFNWR1RyYW5zZm9ybUxpc3QsU291cmNlQnVmZmVyTGlzdCxTdHlsZVNoZWV0TGlzdCxUZXh0VHJhY2tDdWVMaXN0LCcgK1xuICAnVGV4dFRyYWNrTGlzdCxUb3VjaExpc3QnKS5zcGxpdCgnLCcpO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IERPTUl0ZXJhYmxlcy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IERPTUl0ZXJhYmxlc1tpXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCBVdGlscyBmcm9tICcuLi9zZGsvY29yZS9saWIvdXRpbHMnXG5cblxuY29uc3QgZGVmYXVsdExldmVscyA9IFtcbiAgeyBuYW1lOiAndHJhY2UnLCB0eXBlOiAndHJhY2UnLCBiYWNrZ3JvdW5kOiAnI0VFRUVFRScsIGNvbG9yOiAnI0FBQUFBQScgfSxcbiAgeyBuYW1lOiAnaW5mbycsIHR5cGU6ICdsb2cnLCBiYWNrZ3JvdW5kOiAnI0JERTVGOCcsIGNvbG9yOiAnIzAwNTI5QicgfSxcbiAgeyBuYW1lOiAnd2FybicsIHR5cGU6ICd3YXJuJywgYmFja2dyb3VuZDogJyNGRUVGQjMnLCBjb2xvcjogJyM5RjYwMDAnIH0sXG4gIHsgbmFtZTogJ2Vycm9yJywgdHlwZTogJ2Vycm9yJywgYmFja2dyb3VuZDogJyNGRkJBQkEnLCBjb2xvcjogJyNEODAwMEMnIH0sXG4gIHsgbmFtZTogJ2xvZycsIHR5cGU6ICdsb2cnLCBiYWNrZ3JvdW5kOiAnI0VFRUVFRScsIGNvbG9yOiAnIzFmNGY2YicgfVxuXVxuXG5jb25zdCBoYXNDb25zb2xlR3JvdXBzID0gKCkgPT4gY29uc29sZSAmJiBjb25zb2xlLmdyb3VwICYmIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQgJiYgY29uc29sZS5ncm91cEVuZFxuXG5jb25zdCBoYXNDb2xvck91dHB1dCA9ICgpID0+XG4gICghcHJvY2VzcyB8fCAocHJvY2VzcyAmJiBwcm9jZXNzLmJyb3dzZXIpKSAmJlxuICAgIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChcbiAgICBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9HZWNrb3xXZWJLaXQvaSkgJiZcbiAgICAhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC8pKVxuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgZ2V0TG9nU3R5bGVzID0gKGJhY2tncm91bmQsIGNvbG9yKSA9PiBbXG4gICdiYWNrZ3JvdW5kOiAjMkQ3QkZGOyBsaW5lLWhlaWdodDogMjBweDsgcGFkZGluZzogNHB4IDAnLFxuICAnYmFja2dyb3VuZDogIzJCMkIyQjsgY29sb3I6IHdoaXRlOyBsaW5lLWhlaWdodDogMjBweDsgcGFkZGluZzogNHB4IDAnLFxuICAnYmFja2dyb3VuZDogIzJEN0JGRjsgbGluZS1oZWlnaHQ6IDIwcHg7IHBhZGRpbmc6IDRweCAwJyxcbiAgYGJhY2tncm91bmQ6ICR7YmFja2dyb3VuZH07IGNvbG9yOiAke2NvbG9yfTsgbGluZS1oZWlnaHQ6IDIwcHg7IHBhZGRpbmc6IDRweCAwOyBmb250LXdlaWdodDogYm9sZGAsXG4gICdiYWNrZ3JvdW5kOiAjMkIyQjJCOyBjb2xvcjogd2hpdGU7IGxpbmUtaGVpZ2h0OiAyMHB4OyBwYWRkaW5nOiA0cHggMCcsXG4gICdiYWNrZ3JvdW5kOiAjMkQ3QkZGOyBsaW5lLWhlaWdodDogMjBweDsgcGFkZGluZzogNHB4IDAnLFxuXVxuLyogZXNsaW50LWVuYWJsZSAqL1xuXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcbiAgY29uc3RydWN0b3IgKG1heExldmVsID0gJ3dhcm4nLCBsZXZlbHMgPSBkZWZhdWx0TGV2ZWxzKSB7XG4gICAgdGhpcy5fbGV2ZWxzID0gWy4uLmxldmVsc11cbiAgICB0aGlzLl9tYXhMZXZlbCA9IHRoaXMuZ2V0TGV2ZWxJbmRleEJ5TmFtZShtYXhMZXZlbClcblxuICAgIHRoaXMuX2NvbnNvbGVGdW5jcyA9IHtcbiAgICAgIHRyYWNlOiAoLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoaGFzQ29uc29sZUdyb3VwcygpKSB7XG4gICAgICAgICAgY29uc29sZS5ncm91cENvbGxhcHNlZCguLi5hcmdzKVxuICAgICAgICAgIGNvbnNvbGUudHJhY2UoKVxuICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUudHJhY2UoLi4uYXJncylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2xldmVscy5mb3JFYWNoKCh7IG5hbWUgfSkgPT4ge1xuICAgICAgdGhpc1tuYW1lXSA9ICh0YWcsIC4uLmFyZ3MpID0+IHsgdGhpcy5fbG9nKG5hbWUsIHRhZywgLi4uYXJncykgfVxuICAgIH0pXG4gIH1cblxuICBnZXRMZXZlbEluZGV4QnlOYW1lIChsZXZlbE5hbWUpIHtcbiAgICByZXR1cm4gVXRpbHMuQXJyYXkuZmluZEluZGV4KHRoaXMuX2xldmVscywgbCA9PiBsLm5hbWUgPT09IGxldmVsTmFtZSlcbiAgfVxuXG4gIGdldExldmVsT2JqZWN0QnlOYW1lIChsZXZlbE5hbWUpIHtcbiAgICByZXR1cm4gVXRpbHMuQXJyYXkuZmluZCh0aGlzLl9sZXZlbHMsIGwgPT4gbC5uYW1lID09PSBsZXZlbE5hbWUpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBsb2cgbGV2ZWwgaXMgY3VycmVudGx5IGVuYWJsZWQgb3Igbm90LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxOYW1lXG4gICAqL1xuICBjYW5Mb2cgKGxldmVsTmFtZSkge1xuICAgIGNvbnN0IGxldmVsID0gdGhpcy5nZXRMZXZlbEluZGV4QnlOYW1lKGxldmVsTmFtZSlcblxuICAgIGlmIChsZXZlbCA8IDApIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiBsZXZlbCA+PSB0aGlzLl9tYXhMZXZlbFxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgbG9nIGxldmVsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxOYW1lXG4gICAqIEBtZW1iZXJvZiBMb2dnZXJcbiAgICovXG4gIHNldExldmVsIChsZXZlbE5hbWUpIHtcbiAgICBjb25zdCBsZXZlbCA9IHRoaXMuZ2V0TGV2ZWxJbmRleEJ5TmFtZShsZXZlbE5hbWUpXG5cbiAgICBpZiAobGV2ZWwgPCAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9tYXhMZXZlbCA9IGxldmVsXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGVudHJ5IGluIHRoZSBjb25zb2xlLiBUaGUgc3BlY2lmaWMgY29uc29sZSBtZXRob2QgaXMgZGV0ZXJtaW5lZFxuICAgKiBieSB0aGUgbGV2ZWwgYGxldmVsTmFtZWAuIElmIGNvbG9yIGlzIGF2YWlsYWJsZSwgdXNlIGNvbG9yaXplZCBvdXRwdXQuIElmXG4gICAqIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgaXMgc3VwcGxpZWQgaW4gYGFyZ3NgLCBhIGNvbnNvbGUgZ3JvdXAgaXMgY3JlYXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsTmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdGFnXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYXJnc1xuICAgKlxuICAgKi9cbiAgX2xvZyAobGV2ZWxOYW1lLCB0YWcsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBsZXZlbCA9IHRoaXMuZ2V0TGV2ZWxPYmplY3RCeU5hbWUobGV2ZWxOYW1lKVxuXG4gICAgaWYgKCFsZXZlbCB8fCAhdGhpcy5jYW5Mb2cobGV2ZWxOYW1lKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgeyBuYW1lLCB0eXBlLCBiYWNrZ3JvdW5kLCBjb2xvciB9ID0gbGV2ZWxcblxuICAgIGNvbnN0IG91dHB1dHMgPSBhcmdzLmZpbHRlcihhcmcgPT4gYXJnICE9PSB1bmRlZmluZWQpLm1hcChhcmcgPT4ge1xuICAgICAgaWYgKGFyZy50b09iamVjdCkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhcmcudG9PYmplY3QoKSkpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcmdcbiAgICB9KVxuXG4gICAgbGV0IGNvbnNvbGVGdW5jID0gdGhpcy5fY29uc29sZUZ1bmNzW3R5cGVdIHx8IGNvbnNvbGVbdHlwZV0gPyAoLi4uYXJncykgPT4gY29uc29sZVt0eXBlXSguLi5hcmdzKSA6ICguLi5hcmdzKSA9PiBjb25zb2xlLmxvZyguLi5hcmdzKVxuICAgIGxldCBvdXRwdXRzTGVuID0gb3V0cHV0cy5sZW5ndGhcbiAgICBsZXQgc3R5bGVzID0gZ2V0TG9nU3R5bGVzKGJhY2tncm91bmQsIGNvbG9yKVxuXG4gICAgaWYgKCFoYXNDb2xvck91dHB1dCgpKSB7XG4gICAgICBjb25zdCBvdXRwdXRzTGVuID0gb3V0cHV0cy5sZW5ndGhcbiAgICAgIGlmIChvdXRwdXRzTGVuIDw9IDApIHtcbiAgICAgICAgY29uc29sZUZ1bmMoYFBob3RvRWRpdG9yU0RLIHwgJHt0YWd9IGApXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAob3V0cHV0c0xlbiA9PT0gMSAmJiB0eXBlb2Ygb3V0cHV0c1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc29sZUZ1bmMoYFBob3RvRWRpdG9yU0RLIHwgJHt0YWd9IHwgJHtvdXRwdXRzWzBdfWApXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zb2xlRnVuYyhgUGhvdG9FZGl0b3JTREsgfCAke3RhZ30gfCBgLCAuLi5vdXRwdXRzKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKG91dHB1dHNMZW4gPD0gMCkge1xuICAgICAgY29uc29sZUZ1bmMoYCVjICAlYyBQaG90b0VkaXRvclNESyAlYyAgJWMgJHt0YWd9ICVjICVjICBgLCAuLi5zdHlsZXMpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAob3V0cHV0c0xlbiA9PT0gMSAmJiB0eXBlb2Ygb3V0cHV0c1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnNvbGVGdW5jKGAlYyAgJWMgUGhvdG9FZGl0b3JTREsgJWMgICVjICR7dGFnfSAlYyAgJHtvdXRwdXRzWzBdfSAgJWMgIGAsIC4uLnN0eWxlcylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQsIHRyeSB0byBncm91cCB0aGUgbG9nXG4gICAgaWYgKGhhc0NvbnNvbGVHcm91cHMoKSkge1xuICAgICAgY29uc29sZS5ncm91cENvbGxhcHNlZChgJWMgICVjIFBob3RvRWRpdG9yU0RLICVjICAlYyAke3RhZ30gJWNgLCAuLi5VdGlscy5BcnJheS5pbml0KHN0eWxlcykpXG4gICAgICBjb25zb2xlRnVuYyguLi5vdXRwdXRzKVxuICAgICAgY29uc29sZS5ncm91cEVuZCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGVGdW5jKGAlYyAgJWMgUGhvdG9FZGl0b3JTREsgJWMgICVjICR7dGFnfSAlY2AsIC4uLlV0aWxzLkFycmF5LmluaXQoc3R5bGVzKSwgLi4ub3V0cHV0cylcbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIGFuIGltYWdlIGludG8gdGhlIGJyb3dzZXIncyBjb25zb2xlLiBEb2VzXG4gICAqIG5vdGhpbmcgaW4gYSBub2RlIGVudmlyb25tZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0NhbnZhc3xzdHJpbmd9IHNvdXJjZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gICAqL1xuICBpbWFnZSAodGFnID0gJycsIHNvdXJjZSkge1xuICAgIGxldCBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKVxuXG4gICAgY29uc3Qgb25sb2FkID0gKCkgPT4ge1xuICAgICAgY29uc3Qgd2lkdGggPSBpbWFnZS53aWR0aFxuICAgICAgY29uc3QgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0XG4gICAgICB0YWcgJiYgY29uc29sZS5sb2codGFnKVxuICAgICAgY29uc29sZS5sb2coYCVjK2AsIGBcbiAgICAgICAgZm9udC1zaXplOiAxcHg7XG4gICAgICAgIHBhZGRpbmc6IDBweCAke01hdGguZmxvb3Iod2lkdGggLyAyKX1weDtcbiAgICAgICAgbGluZS1oZWlnaHQ6ICR7aGVpZ2h0fXB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoJHtpbWFnZS5zcmN9KTtcbiAgICAgICAgY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6ICR7d2lkdGh9cHggJHtoZWlnaHR9cHg7YClcbiAgICB9XG5cbiAgICBpbWFnZS5vbmxvYWQgPSBvbmxvYWRcblxuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgIGltYWdlLnNyYyA9IHNvdXJjZS50b0RhdGFVUkwoKVxuICAgIH0gZWxzZSBpZiAoc291cmNlIGluc3RhbmNlb2Ygd2luZG93LkltYWdlKSB7XG4gICAgICBpbWFnZSA9IHNvdXJjZVxuICAgICAgb25sb2FkKClcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpbWFnZS5zcmMgPSBzb3VyY2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2codGFnLCBzb3VyY2UpXG4gICAgfVxuICAgIHJldHVybiBpbWFnZVxuICB9XG5cbiAgLyoqXG4gICAqIExvZ3MgYSBgUGhvdG9FZGl0b3JTREsuRW5naW5lLlRleHR1cmVgIGludG8gdGhlIGJyb3dzZXIncyBjb25zb2xlLiBEb2VzXG4gICAqIG5vdGhpbmcgaW4gYSBub2RlIGVudmlyb25tZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1Bob3RvRWRpdG9yU0RLLkVuZ2luZS5UZXh0dXJlYH0gdGV4dHVyZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gICAqXG4gICAqL1xuICB0ZXh0dXJlICh0YWcgPSAnJywgdGV4dHVyZSkge1xuICAgIGlmICghdGV4dHVyZSkge1xuICAgICAgdGhpcy5sb2codGFnLCAndGV4dHVyZTogbnVsbCBvciB1bmRlZmluZWQnKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgYmFzZVRleHR1cmUgPSB0ZXh0dXJlLmdldEJhc2VUZXh0dXJlKClcbiAgICBsZXQgcmVuZGVyZXJzID0gYmFzZVRleHR1cmUuZ2V0UmVuZGVyZXJzKClcblxuICAgIGxldCBnbFJlbmRlcmVyID0gVXRpbHMuQXJyYXkuZmluZChyZW5kZXJlcnMsIHIgPT4gciAmJiByLmNvbnN0cnVjdG9yLnR5cGUgPT09ICdXZWJHTCcpXG5cbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGJhc2VUZXh0dXJlLmdldEZyYW1lKClcblxuICAgIGlmIChnbFJlbmRlcmVyKSB7XG4gICAgICBjb25zdCBnbCA9IGdsUmVuZGVyZXIuZ2V0Q29udGV4dCgpXG4gICAgICBjb25zdCBnbFRleHR1cmUgPSBiYXNlVGV4dHVyZS5nZXRHTFRleHR1cmVGb3JSZW5kZXJlcihnbFJlbmRlcmVyKVxuICAgICAgdGhpcy5sb2dHbFRleHR1cmUoZ2wsIGdsVGV4dHVyZSwgd2lkdGgsIGhlaWdodCwgdGFnKVxuICAgIH0gZWxzZSB7XG4gICAgICBMb2cuaW1hZ2UodGFnLCBiYXNlVGV4dHVyZS5nZXRTb3VyY2UoKSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBhIFdlYkdMVGV4dHVyZSBpbnRvIHRoZSBicm93c2VyJ3MgY29uc29sZS4gRG9lc1xuICAgKiBub3RoaW5nIGluIGEgbm9kZSBlbnZpcm9ubWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsXG4gICAqIEBwYXJhbSB7V2ViR0xUZXh0dXJlfSB0ZXh0dXJlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbd2lkdGg9MTUwXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xNTBdXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdcbiAgICovXG4gIGxvZ0dsVGV4dHVyZSAoZ2wsIHRleHR1cmUsIHdpZHRoID0gMTUwLCBoZWlnaHQgPSAxNTAsIHRhZykge1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpXG4gICAgbGV0IGZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKVxuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIpXG4gICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlLCAwKVxuXG4gICAgLy8gUmVhZCB0aGUgY29udGVudHMgb2YgdGhlIGZyYW1lYnVmZmVyXG4gICAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheSh3aWR0aCAqIGhlaWdodCAqIDQpXG4gICAgZ2wucmVhZFBpeGVscygwLCAwLCB3aWR0aCwgaGVpZ2h0LCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBkYXRhKVxuXG4gICAgZ2wuZGVsZXRlRnJhbWVidWZmZXIoZnJhbWVidWZmZXIpXG5cbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoXG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodFxuXG4gICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuXG4gICAgLy8gQ29weSB0aGUgcGl4ZWxzIHRvIGEgMkQgY2FudmFzXG4gICAgbGV0IGltYWdlRGF0YSA9IGNvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBoZWlnaHQpXG4gICAgaW1hZ2VEYXRhLmRhdGEuc2V0KGRhdGEpXG4gICAgY29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKVxuXG4gICAgcmV0dXJuIExvZy5pbWFnZSh0YWcsIGNhbnZhcylcbiAgfVxufVxuXG5jb25zdCBMb2cgPSBuZXcgTG9nZ2VyKCd3YXJuJylcblxuZXhwb3J0IGRlZmF1bHQgTG9nXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9sb2cuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXNcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qIGdsb2JhbCBYTUxIdHRwUmVxdWVzdCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgUHJvbWlzZSBmcm9tICcuLi92ZW5kb3IvcHJvbWlzZSdcbmltcG9ydCBVUkwgZnJvbSAndXJsJ1xuXG5jb25zdCBUSU1FT1VUID0gNTAwMFxuXG5jb25zdCByb290ID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSA/IHdpbmRvdyA6IGdsb2JhbFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKU09OTG9hZGVyIHtcbiAgY29uc3RydWN0b3IgKHVybCkge1xuICAgIHRoaXMuX3VybCA9IHVybFxuICAgIHRoaXMuX3BhcnNlZFVybCA9IFVSTC5wYXJzZSh0aGlzLl91cmwsIHRydWUpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgcmVxdWVzdCBpcyBhIEpTT05QIHJlcXVlc3RcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIF9pc0pTT05QUmVxdWVzdCAoKSB7XG4gICAgY29uc3QgeyBxdWVyeSB9ID0gdGhpcy5fcGFyc2VkVXJsXG4gICAgZm9yIChsZXQga2V5IGluIHF1ZXJ5KSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHF1ZXJ5W2tleV1cbiAgICAgIGlmICh2YWx1ZSA9PT0gJz8nKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBKU09OKFApIGZyb20gdGhlIGdpdmVuIFVSTFxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgbG9hZCAoKSB7XG4gICAgaWYgKHRoaXMuX2lzSlNPTlBSZXF1ZXN0KCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sb2FkSlNPTlAoKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fbG9hZEpTT04oKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgVVJMIGFzIEpTT05cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIF9sb2FkSlNPTiAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCB4aHJcbiAgICAgIGlmIChyb290LlhEb21haW5SZXF1ZXN0KSB7XG4gICAgICAgIHhociA9IG5ldyByb290LlhEb21haW5SZXF1ZXN0KClcblxuICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpXG4gICAgICAgICAgcmVzb2x2ZShqc29uKVxuICAgICAgICB9XG4gICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZWplY3QoZSlcbiAgICAgICAgfVxuICAgICAgICB4aHIub3BlbignR0VUJywgdGhpcy5fdXJsLCB0cnVlKVxuICAgICAgICB4aHIuc2VuZCgpXG4gICAgICB9IGVsc2UgaWYgKHJvb3QuWE1MSHR0cFJlcXVlc3QpIHtcbiAgICAgICAgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKG9FdmVudCkge1xuICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KVxuICAgICAgICAgICAgICByZXNvbHZlKGpzb24pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBIVFRQIFN0YXR1cyAke3hoci5zdGF0dXN9YCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHhoci5vcGVuKCdHRVQnLCB0aGlzLl91cmwsIHRydWUpXG4gICAgICAgIHhoci5zZW5kKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBVUkwgYXMgSlNPTlBcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIF9sb2FkSlNPTlAgKCkge1xuICAgIGxldCBmYWlsZWQgPSBmYWxzZVxuICAgIGxldCBzdWNjZWVkZWQgPSBmYWxzZVxuXG4gICAgY29uc3QgZm5OYW1lID0gJ3Blc2RrJyArIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDk5OTk5OTk5OTk5OTk5KVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5fY3JlYXRlSlNPTlBOb2RlKGZuTmFtZSlcbiAgICAgIHJvb3RbZm5OYW1lXSA9IChyZXN1bHQpID0+IHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlSlNPTlBOb2RlKG5vZGUpXG4gICAgICAgIGlmICghZmFpbGVkKSB7XG4gICAgICAgICAgc3VjY2VlZGVkID0gdHJ1ZVxuICAgICAgICAgIHJlc29sdmUocmVzdWx0KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJvb3Quc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICghc3VjY2VlZGVkKSB7XG4gICAgICAgICAgdGhpcy5fcmVtb3ZlSlNPTlBOb2RlKG5vZGUpXG4gICAgICAgICAgZmFpbGVkID0gdHJ1ZVxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1RpbWVvdXQgb2YgNSBzZWNvbmRzIGV4Y2VlZGVkLicpKVxuICAgICAgICB9XG4gICAgICB9LCBUSU1FT1VUKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIEpTT05QIDxzY3JpcHQ+IG5vZGUgaW5zaWRlIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGZuTmFtZVxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NyZWF0ZUpTT05QTm9kZSAoZm5OYW1lKSB7XG4gICAgY29uc3QgSlNPTlBVcmwgPSB0aGlzLl9idWlsZEpTT05QVXJsKGZuTmFtZSlcbiAgICBjb25zdCBoZWFkTm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKVxuICAgIGNvbnN0IHNjcmlwdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgIHNjcmlwdE5vZGUuc3JjID0gSlNPTlBVcmxcbiAgICBoZWFkTm9kZS5hcHBlbmRDaGlsZChzY3JpcHROb2RlKVxuICAgIHJldHVybiBzY3JpcHROb2RlXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgSlNPTlAgPHNjcmlwdD4gbm9kZSBmcm9tIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgKiBAcGFyYW0gIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVtb3ZlSlNPTlBOb2RlIChub2RlKSB7XG4gICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpXG4gIH1cblxuICAvKipcbiAgICogQnVpbGRzIGEgSlNPTlAgdXJsIGZvciB0aGUgZ2l2ZW4gZnVuY3Rpb24gbmFtZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGZuTmFtZVxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuICBfYnVpbGRKU09OUFVybCAoZm5OYW1lKSB7XG4gICAgLy8gRmluZCBKU09OUCBwYXJhbWV0ZXJcbiAgICBjb25zdCB7IHF1ZXJ5IH0gPSB0aGlzLl9wYXJzZWRVcmxcbiAgICBsZXQgcGFyYW1ldGVyID0gbnVsbFxuICAgIGZvciAobGV0IHBhcmFtIGluIHF1ZXJ5KSB7XG4gICAgICBpZiAocXVlcnlbcGFyYW1dID09PSAnPycpIHtcbiAgICAgICAgcGFyYW1ldGVyID0gcGFyYW1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxldGUgdGhpcy5fcGFyc2VkVXJsLnNlYXJjaFxuICAgIHF1ZXJ5W3BhcmFtZXRlcl0gPSBmbk5hbWVcblxuICAgIHJldHVybiBVUkwuZm9ybWF0KHRoaXMuX3BhcnNlZFVybClcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvbG9hZGVycy9qc29uLWxvYWRlci5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2FzeW5jL2FuaW1hdGlvbi1mcmFtZS5qcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNpdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBlbnRlclByb3A6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZW50ZXJEdXJhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBhcHBlYXJQcm9wOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFwcGVhckR1cmF0aW9uOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGxlYXZlUHJvcDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsZWF2ZUR1cmF0aW9uOiBQcm9wVHlwZXMubnVtYmVyXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICBlbnRlclByb3A6ICdyZW5kZXJlZCcsXG4gICAgZW50ZXJEdXJhdGlvbjogMzAwLFxuICAgIGFwcGVhclByb3A6ICd2aXNpYmxlJyxcbiAgICBhcHBlYXJEdXJhdGlvbjogMzAwLFxuICAgIGxlYXZlRHVyYXRpb246IDMwMFxuICB9XG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fdGltZW91dCA9IG51bGxcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZW50ZXI6IGZhbHNlLFxuICAgICAgYXBwZWFyOiBmYWxzZSxcbiAgICAgIGxlYXZlOiBmYWxzZVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFjdGl2ZSkge1xuICAgICAgdGhpcy5zdGF0ZS5lbnRlciA9IHRydWVcbiAgICAgIHRoaXMuc3RhdGUuYXBwZWFyID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSBhIG1vdW50ZWQgY29tcG9uZW50IHJlY2VpdmVzIG5ldyBwcm9wc1xuICAgKiBAcGFyYW0gIHtPYmplY3R9IG5leHRQcm9wc1xuICAgKi9cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYWN0aXZlICYmICFuZXh0UHJvcHMuYWN0aXZlKSB7XG4gICAgICB0aGlzLl9sZWF2ZSgpXG4gICAgfSBlbHNlIGlmICghdGhpcy5wcm9wcy5hY3RpdmUgJiYgbmV4dFByb3BzLmFjdGl2ZSkge1xuICAgICAgdGhpcy5fZW50ZXIoKVxuICAgICAgdGhpcy5fYXBwZWFyKClcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTVEFURVNcblxuICAvKipcbiAgICogQ2FuY2VscyB0aGUgdGltZW91dFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NhbmNlbFRpbWVvdXQgKCkge1xuICAgIGlmICh0aGlzLl90aW1lb3V0KSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpXG4gICAgICB0aGlzLl90aW1lb3V0ID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRoZSBlbnRlciBzdGF0ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2VudGVyICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZW50ZXI6IHRydWUgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnRlcnMgdGhlIGxlYXZlIHN0YXRlLCB3YWl0cyBmb3IgbGVhdmVEdXJhdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2xlYXZlICgpIHtcbiAgICBpZiAodGhpcy5fdGltZW91dCkgdGhpcy5fY2FuY2VsVGltZW91dCgpXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGFwcGVhcjogZmFsc2UsIGxlYXZlOiB0cnVlIH0pXG4gICAgdGhpcy5fdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuX2NhbmNlbFRpbWVvdXQoKVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVudGVyOiBmYWxzZSB9KVxuICAgIH0sIHRoaXMucHJvcHMubGVhdmVEdXJhdGlvbilcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnRlcnMgdGhlIGFwcGVhciBzdGF0ZSwgd2FpdHMgZm9yIGxlYXZlRHVyYXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hcHBlYXIgKCkge1xuICAgIGlmICh0aGlzLl90aW1lb3V0KSB0aGlzLl9jYW5jZWxUaW1lb3V0KClcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFwcGVhcjogdHJ1ZSwgbGVhdmU6IGZhbHNlIH0pXG4gICAgICB0aGlzLl90aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLl9jYW5jZWxUaW1lb3V0KClcbiAgICAgIH0sIHRoaXMucHJvcHMuYXBwZWFyRHVyYXRpb24pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIHN0YXRlIHByb3BzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUgY2hpbGRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2J1aWxkU3RhdGVQcm9wcyAoKSB7XG4gICAgY29uc3QgeyBlbnRlclByb3AsIGFwcGVhclByb3AsIGxlYXZlUHJvcCB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHByb3BzID0ge31cblxuICAgIGlmIChlbnRlclByb3ApIHByb3BzW2VudGVyUHJvcF0gPSB0aGlzLnN0YXRlLmVudGVyXG4gICAgaWYgKGFwcGVhclByb3ApIHByb3BzW2FwcGVhclByb3BdID0gdGhpcy5zdGF0ZS5hcHBlYXJcbiAgICBpZiAobGVhdmVQcm9wKSBwcm9wc1tsZWF2ZVByb3BdID0gdGhpcy5zdGF0ZS5sZWF2ZVxuXG4gICAgcmV0dXJuIHByb3BzXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdGVQcm9wcyA9IHRoaXMuX2J1aWxkU3RhdGVQcm9wcygpXG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudCh0aGlzLnByb3BzLmNoaWxkcmVuLCBzdGF0ZVByb3BzKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvdHJhbnNpdGlvbi5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBTaGFyZWRDb25zdGFudHMgZnJvbSAnc2hhcmVkL2NvbnN0YW50cydcbmltcG9ydCBKU09OTG9hZGVyIGZyb20gJ3NoYXJlZC9sb2FkZXJzL2pzb24tbG9hZGVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGlja2VyTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yICh1aSwgb3B0aW9ucykge1xuICAgIHRoaXMuX3VpID0gdWlcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMuX2NhdGVnb3JpZXNCeUlkID0ge31cbiAgICB0aGlzLl9jYXRlZ29yaWVzID0gW11cbiAgICB0aGlzLl9zdGlja2Vyc0J5SWQgPSB7fVxuXG4gICAgdGhpcy5fYWRkQ2F0ZWdvcmllcyhTaGFyZWRDb25zdGFudHMuREVGQVVMVFMuU1RJQ0tFUl9DQVRFR09SSUVTKVxuXG4gICAgY29uc3QgeyBjYXRlZ29yaWVzLCByZXBsYWNlQ2F0ZWdvcmllcyB9ID0gdGhpcy5fb3B0aW9uc1xuICAgIGlmICh0aGlzLl9vcHRpb25zLmNhdGVnb3JpZXMpIHtcbiAgICAgIHRoaXMuX2FkZENhdGVnb3JpZXMoY2F0ZWdvcmllcywgcmVwbGFjZUNhdGVnb3JpZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3VwZGF0ZUNhdGVnb3JpZXNNYXAoKVxuICAgICAgdGhpcy5fdXBkYXRlQWxsQ2F0ZWdvcnkoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyBzdGlja2VycyBmcm9tIHRoZSBnaXZlbiBleHRlcm5hbCBVUkxcbiAgICogQHBhcmFtICB7U3RyaW5nfSB1cmxcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGxvYWRFeHRlcm5hbCAodXJsKSB7XG4gICAgY29uc3QgbG9hZGVyID0gbmV3IEpTT05Mb2FkZXIodXJsKVxuICAgIHJldHVybiBsb2FkZXIubG9hZCgpXG4gICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICB0aGlzLl9hZGRDYXRlZ29yaWVzKHJlc3VsdC5jYXRlZ29yaWVzLCB0aGlzLl9vcHRpb25zLnJlcGxhY2VDYXRlZ29yaWVzKVxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgY2F0ZWdvcmllc1xuICAgKiBAcGFyYW0ge09iamVjdFtdfSBjYXRlZ29yaWVzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVwbGFjZSA9IGZhbHNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQ2F0ZWdvcmllcyAoY2F0ZWdvcmllcywgcmVwbGFjZSA9IGZhbHNlKSB7XG4gICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgIHRoaXMuX2NhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLnNsaWNlKDApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NhdGVnb3JpZXMgPSBVdGlscy5tZXJnZUNhdGVnb3JpZXMoXG4gICAgICAgIHRoaXMuX2NhdGVnb3JpZXMsXG4gICAgICAgIGNhdGVnb3JpZXMsXG4gICAgICAgICdzdGlja2VycydcbiAgICAgIClcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVDYXRlZ29yaWVzTWFwKClcbiAgICB0aGlzLl91cGRhdGVBbGxDYXRlZ29yeSgpXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgY2F0ZWdvcmllcyBtYXBcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGVDYXRlZ29yaWVzTWFwICgpIHtcbiAgICB0aGlzLl9jYXRlZ29yaWVzQnlJZCA9IHt9XG4gICAgdGhpcy5fY2F0ZWdvcmllcy5mb3JFYWNoKChjKSA9PiB7IHRoaXMuX2NhdGVnb3JpZXNCeUlkW2MuaWRlbnRpZmllcl0gPSBjIH0pXG5cbiAgICAvLyBCdWlsZCBzdGlja2VyIGlkID0+IHN0aWNrZXIgaGFzaFxuICAgIHRoaXMuX2NhdGVnb3JpZXMuZm9yRWFjaChjID0+IHtcbiAgICAgIGMuc3RpY2tlcnMuZm9yRWFjaChzID0+IHtcbiAgICAgICAgdGhpcy5fc3RpY2tlcnNCeUlkW3MuaWRlbnRpZmllcl0gPSBzXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICAvLyBGaWx0ZXIgc3RpY2tlcnNcbiAgICBpZiAodHlwZW9mIHRoaXMuX29wdGlvbnMuYXZhaWxhYmxlU3RpY2tlcnMgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuX29wdGlvbnMuYXZhaWxhYmxlU3RpY2tlcnMgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX2NhdGVnb3JpZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICAgIGNhdGVnb3J5LnN0aWNrZXJzID0gY2F0ZWdvcnkuc3RpY2tlcnMuZmlsdGVyKHN0aWNrZXIgPT5cbiAgICAgICAgICB0aGlzLl9vcHRpb25zLmF2YWlsYWJsZVN0aWNrZXJzLmluZGV4T2Yoc3RpY2tlci5pZGVudGlmaWVyKSAhPT0gLTFcbiAgICAgICAgKVxuICAgICAgfSlcblxuICAgICAgdGhpcy5fY2F0ZWdvcmllcyA9IHRoaXMuX2NhdGVnb3JpZXMuZmlsdGVyKGNhdGVnb3J5ID0+IGNhdGVnb3J5LnN0aWNrZXJzLmxlbmd0aCA+IDApXG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlQWxsQ2F0ZWdvcnkoKVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGBhbGxgIGNhdGVnb3J5IHdoaWNoIGNvbnRhaW5zIGFsbCBzdGlja2Vyc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZUFsbENhdGVnb3J5ICgpIHtcbiAgICB0aGlzLl9hbGxDYXRlZ29yeSA9IHtcbiAgICAgIGlkZW50aWZpZXI6ICdhbGwnLFxuICAgICAgZGVmYXVsdE5hbWU6ICdBbGwnLFxuICAgICAgc3RpY2tlcnM6IHRoaXMuX2NhdGVnb3JpZXNcbiAgICAgICAgLm1hcCgoYykgPT4gYy5zdGlja2VycylcbiAgICAgICAgLnJlZHVjZSgoYSwgYikgPT4gYS5jb25jYXQoYiksIFtdKVxuICAgIH1cbiAgICB0aGlzLl9jYXRlZ29yaWVzQnlJZC5hbGwgPSB0aGlzLl9hbGxDYXRlZ29yeVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0aWNrZXJzIGZvciB0aGUgY2F0ZWdvcnkgd2l0aCB0aGUgZ2l2ZW4gbmFtZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGNhdGVnb3J5TmFtZVxuICAgKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAgICovXG4gIGdldFN0aWNrZXJzRm9yQ2F0ZWdvcnkgKGNhdGVnb3J5TmFtZSkge1xuICAgIGlmICghdGhpcy5fY2F0ZWdvcmllc0J5SWRbY2F0ZWdvcnlOYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHN0aWNrZXIgY2F0ZWdvcnkgJyR7Y2F0ZWdvcnlOYW1lfSdgKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2F0ZWdvcmllc0J5SWRbY2F0ZWdvcnlOYW1lXS5zdGlja2Vyc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0aWNrZXIgd2l0aCB0aGUgZ2l2ZW4gaWRlbnRpZmllclxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGlkZW50aWZpZXJcbiAgICovXG4gIGdldFN0aWNrZXJCeUlkZW50aWZpZXIgKGlkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RpY2tlcnNCeUlkW2lkZW50aWZpZXJdXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2F0ZWdvcmllc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGluY2x1ZGVBbGxDYXRlZ29yeSA9IGZhbHNlXG4gICAqIEByZXR1cm4ge09iamVjdFtdfVxuICAgKi9cbiAgZ2V0Q2F0ZWdvcmllcyAoaW5jbHVkZUFsbENhdGVnb3J5ID0gZmFsc2UpIHtcbiAgICBpZiAoaW5jbHVkZUFsbENhdGVnb3J5KSB7XG4gICAgICByZXR1cm4gW3RoaXMuX2FsbENhdGVnb3J5XS5jb25jYXQodGhpcy5fY2F0ZWdvcmllcylcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fY2F0ZWdvcmllc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhdGVnb3J5IG9iamVjdCBmb3IgdGhlIGdpdmVuIGlkXG4gICAqIEBwYXJhbSAge1N0cmluZ30gaWRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0Q2F0ZWdvcnkgKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhdGVnb3JpZXNCeUlkW2lkXVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIFVSTCBmb3IgdGhlIGdpdmVuIHN0aWNrZXIuIElmIHRoZSB1c2VyIGlzIHVzaW5nIEludGVybmV0IEV4cGxvcmVyLCB3ZVxuICAgKiBmYWxsIGJhY2sgdG8gdGhlIHN2ZyB2YXJpYW50IChpZiBwcmVzZW50KVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IHN0aWNrZXJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBzaXplXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXRVUkxGb3JTdGlja2VyIChzdGlja2VyLCBzaXplID0gJ2Jhc2UnKSB7XG4gICAgY29uc3QgeyBpbWFnZXMgfSA9IHN0aWNrZXJcbiAgICBjb25zdCBtZWRpYSA9IHNpemUgPT09ICdiYXNlJyA/IChpbWFnZXMubWVkaWFCYXNlIHx8IGltYWdlcy5tZWRpYVRodW1iKSA6IGltYWdlcy5tZWRpYVRodW1iXG4gICAgY29uc3QgdXJpcyA9IG1lZGlhLnVyaXMgfHwgW21lZGlhLnVyaV1cbiAgICBpZiAodHlwZW9mIFV0aWxzLkJyb3dzZXIgIT09ICd1bmRlZmluZWQnICYmICFVdGlscy5Ccm93c2VyLmdldElFVmVyc2lvbigpKSB7XG4gICAgICBjb25zdCBzdmdzID0gdXJpcy5maWx0ZXIoZiA9PiAvXFwuc3ZnJC9pLnRlc3QoZikpXG4gICAgICByZXR1cm4gc3Zncy5sZW5ndGggPyBzdmdzWzBdIDogdXJpc1swXVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBub3RTdmdzID0gdXJpcy5maWx0ZXIoZiA9PiAhKC9cXC5zdmckL2kudGVzdChmKSkpXG4gICAgICByZXR1cm4gbm90U3Zncy5sZW5ndGggPyBub3RTdmdzWzBdIDogdXJpc1swXVxuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvbWFuYWdlcnMvc3RpY2tlci1tYW5hZ2VyLmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICdnbG9iYWxzJ1xuaW1wb3J0IEZvbnQgZnJvbSAnLi4vYXNzZXRzL2ZvbnQnXG5pbXBvcnQgTG9nIGZyb20gJy4uL2xvZydcbmltcG9ydCBGb250VmFyaWF0aW9uIGZyb20gJy4uL2Fzc2V0cy9mb250LXZhcmlhdGlvbidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9udE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvciAodWksIG9wdGlvbnMpIHtcbiAgICB0aGlzLl91aSA9IHVpXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLl9mb250cyA9IFtdXG4gICAgdGhpcy5fdmFyaWF0aW9uc0J5SWRlbnRpZmllciA9IHt9XG4gICAgdGhpcy5fZm9udHNCeUZvbnRGYW1pbHkgPSB7fVxuXG4gICAgdGhpcy5faW5pdEZvbnRzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgZm9udHNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0Rm9udHMgKCkge1xuICAgIGxldCB7IGZvbnRzOiBhZGRpdGlvbmFsRm9udHMsIHJlcGxhY2VGb250cywgYXZhaWxhYmxlVmFyaWF0aW9ucyB9ID0gdGhpcy5fb3B0aW9uc1xuXG4gICAgLy8gUmVwbGFjZSBvciBhcHBlbmQgZm9udHNcbiAgICBsZXQgZm9udHMgPSBDb25zdGFudHMuREVGQVVMVFMuRk9OVFNcbiAgICBpZiAocmVwbGFjZUZvbnRzKSB7XG4gICAgICBmb250cyA9IGFkZGl0aW9uYWxGb250c1xuICAgIH0gZWxzZSB7XG4gICAgICBmb250cyA9IGZvbnRzLmNvbmNhdChhZGRpdGlvbmFsRm9udHMgfHwgW10pXG4gICAgfVxuXG4gICAgLy8gVHVybiBmb250cyBpbnRvIGFjdHVhbCBGb250IG9iamVjdHMgd2l0aCBGb250VmFyaWF0aW9uIG9iamVjdHNcbiAgICBsZXQgZGVmYXVsdFZhcmlhdGlvblxuICAgIGZvbnRzID0gZm9udHMubWFwKChmb250KSA9PiB7XG4gICAgICBjb25zdCB7IGZvbnRGYW1pbHkgfSA9IGZvbnRcbiAgICAgIGxldCB2YXJpYXRpb25zID0gZm9udC52YXJpYXRpb25zXG5cbiAgICAgIGlmIChhdmFpbGFibGVWYXJpYXRpb25zKSB7XG4gICAgICAgIHZhcmlhdGlvbnMgPSB2YXJpYXRpb25zLmZpbHRlcih2YXJpYXRpb24gPT5cbiAgICAgICAgICBhdmFpbGFibGVWYXJpYXRpb25zLmluZGV4T2YodmFyaWF0aW9uLmlkZW50aWZpZXIpICE9PSAtMVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGlmICh2YXJpYXRpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGxcblxuICAgICAgY29uc3QgZm9udEluc3RhbmNlID0gbmV3IEZvbnQoe1xuICAgICAgICBmb250RmFtaWx5XG4gICAgICB9KVxuICAgICAgdmFyaWF0aW9ucyA9IHZhcmlhdGlvbnNcbiAgICAgICAgLm1hcCh2YXJpYXRpb24gPT4ge1xuICAgICAgICAgIGNvbnN0IHZhcmlhdGlvbkluc3RhbmNlID0gbmV3IEZvbnRWYXJpYXRpb24odmFyaWF0aW9uKVxuICAgICAgICAgIHZhcmlhdGlvbkluc3RhbmNlLnNldEZvbnRGYW1pbHkoZm9udEZhbWlseSlcbiAgICAgICAgICB2YXJpYXRpb25JbnN0YW5jZS5zZXRGb250KGZvbnRJbnN0YW5jZSlcbiAgICAgICAgICBpZiAodmFyaWF0aW9uLmRlZmF1bHQgJiYgIWRlZmF1bHRWYXJpYXRpb24pIHtcbiAgICAgICAgICAgIGRlZmF1bHRWYXJpYXRpb24gPSB2YXJpYXRpb25JbnN0YW5jZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh2YXJpYXRpb25JbnN0YW5jZS5nZXRUZXh0TWV0cmljcygpID09IG51bGwpIHtcbiAgICAgICAgICAgIExvZy53YXJuKFxuICAgICAgICAgICAgICBgTWlzc2luZyBmb250IG1ldHJpY3MgZm9yICR7dmFyaWF0aW9uSW5zdGFuY2UuZ2V0SWRlbnRpZmllcigpfS4gVGhlIFNESyB3aWxsIGZhbGwgYmFjayB0byBiYXNpYyBmb250IHJlbmRlcmluZywgd2hpY2ggbWF5IGxlYWQgdG8gbGF5b3V0IGlzc3Vlcy4gUGxlYXNlIHByb3ZpZGUgZm9udCBtZXRyaWNzIGZvciB5b3VyIGN1c3RvbSBmb250cy4gU2VlIGh0dHBzOi8vZG9jcy5waG90b2VkaXRvcnNkay5jb20vZ3VpZGVzL2h0bWw1LyBmb3IgbW9yZSBkZXRhaWxzLmBcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl92YXJpYXRpb25zQnlJZGVudGlmaWVyW3ZhcmlhdGlvbkluc3RhbmNlLmdldElkZW50aWZpZXIoKV0gPSB2YXJpYXRpb25JbnN0YW5jZVxuICAgICAgICAgIHJldHVybiB2YXJpYXRpb25JbnN0YW5jZVxuICAgICAgICB9KVxuICAgICAgZm9udEluc3RhbmNlLnNldFZhcmlhdGlvbnModmFyaWF0aW9ucylcbiAgICAgIHRoaXMuX2ZvbnRzQnlGb250RmFtaWx5W2ZvbnRGYW1pbHldID0gZm9udEluc3RhbmNlXG4gICAgICByZXR1cm4gZm9udEluc3RhbmNlXG4gICAgfSkuZmlsdGVyKGYgPT4gZilcblxuICAgIGlmICghZGVmYXVsdFZhcmlhdGlvbikge1xuICAgICAgZGVmYXVsdFZhcmlhdGlvbiA9IGZvbnRzWzBdLmdldFZhcmlhdGlvbnMoKVswXVxuICAgIH1cblxuICAgIHRoaXMuX2RlZmF1bHRWYXJpYXRpb24gPSBkZWZhdWx0VmFyaWF0aW9uXG4gICAgdGhpcy5fZm9udHMgPSBmb250c1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIGF2YWlsYWJsZSBmb250c1xuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuRm9udFtdfVxuICAgKi9cbiAgZ2V0Rm9udHMgKCkge1xuICAgIHJldHVybiB0aGlzLl9mb250c1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZvbnQgZm9yIHRoZSBnaXZlbiBmb250IGZhbWlseVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGZvbnRGYW1pbHlcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkZvbnR9XG4gICAqL1xuICBnZXRGb250QnlGb250RmFtaWx5IChmb250RmFtaWx5KSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZvbnRzQnlGb250RmFtaWx5W2ZvbnRGYW1pbHldXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZm9udCB2YXJpYXRpb24gZm9yIHRoZSBnaXZlbiBpZGVudGlmaWVyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gaWRlbnRpZmllclxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuRm9udFZhcmlhdGlvbn1cbiAgICovXG4gIGdldFZhcmlhdGlvbkJ5SWRlbnRpZmllciAoaWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLl92YXJpYXRpb25zQnlJZGVudGlmaWVyW2lkZW50aWZpZXJdXG4gIH1cblxuICBnZXRWYXJpYXRpb25zQnlJZGVudGlmaWVyICgpIHtcbiAgICByZXR1cm4gey4uLnRoaXMuX3ZhcmlhdGlvbnNCeUlkZW50aWZpZXJ9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGVmYXVsdCB2YXJpYXRpb25cbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkZvbnRWYXJpYXRpb259XG4gICAqL1xuICBnZXREZWZhdWx0VmFyaWF0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFZhcmlhdGlvblxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9tYW5hZ2Vycy9mb250LW1hbmFnZXIuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFByb3BUeXBlcywgQmFzZUNvbXBvbmVudCB9IGZyb20gJ2dsb2JhbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYXJlZFN0YXRlQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgZWRpdG9yOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHVpOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWVkaWF0b3I6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2hhcmVkU3RhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2NyZWVuOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGFwcENvbXBvbmVudDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBnbG9iYWxTdGF0ZTogUHJvcFR5cGVzLm9iamVjdFxuICB9XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBzaGFyZWRTdGF0ZTogUHJvcFR5cGVzLmFueVxuICB9XG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25TaGFyZWRTdGF0ZVVwZGF0ZSdcbiAgICApXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKVxuXG4gICAgaWYgKHRoaXMuY29udGV4dC5zaGFyZWRTdGF0ZSkge1xuICAgICAgdGhpcy5jb250ZXh0LnNoYXJlZFN0YXRlLm9uKCd1cGRhdGUnLCB0aGlzLl9vblNoYXJlZFN0YXRlVXBkYXRlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkXG4gICAqL1xuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50V2lsbFVubW91bnQoKVxuXG4gICAgaWYgKHRoaXMuY29udGV4dC5zaGFyZWRTdGF0ZSkge1xuICAgICAgdGhpcy5jb250ZXh0LnNoYXJlZFN0YXRlLm9mZigndXBkYXRlJywgdGhpcy5fb25TaGFyZWRTdGF0ZVVwZGF0ZSlcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTSEFSRUQgU1RBVEVcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgc2hhcmVkIHN0YXRlIGRpZCBjaGFuZ2VcbiAgICogQHBhcmFtICB7T2JqZWN0fSBvbGRTdGF0ZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG5ld1N0YXRlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25TaGFyZWRTdGF0ZVVwZGF0ZSAob2xkU3RhdGUsIG5ld1N0YXRlKSB7XG4gICAgaWYgKHRoaXMuc2hvdWxkU2hhcmVkQ29tcG9uZW50VXBkYXRlKG9sZFN0YXRlLCBuZXdTdGF0ZSkpIHtcbiAgICAgIHRoaXMuc2hhcmVkQ29tcG9uZW50V2lsbFVwZGF0ZShvbGRTdGF0ZSwgbmV3U3RhdGUpXG4gICAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgICAgIHRoaXMuc2hhcmVkU3RhdGVEaWRDaGFuZ2Uob2xkU3RhdGUsIG5ld1N0YXRlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNoYXJlZFN0YXRlRGlkQ2hhbmdlKG9sZFN0YXRlLCBuZXdTdGF0ZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCBiZWZvcmUgdGhlIHNoYXJlZCBzdGF0ZSBjb21wb25lbnQgaXMgcmUtcmVuZGVyZWQgZHVlIHRvIGFcbiAgICogc3RhdGUgY2hhbmdlXG4gICAqIEBwYXJhbSAge09iamVjdH0gb2xkU3RhdGVcbiAgICogQHBhcmFtICB7T2JqZWN0fSBuZXdTdGF0ZVxuICAgKi9cbiAgc2hhcmVkQ29tcG9uZW50V2lsbFVwZGF0ZSAob2xkU3RhdGUsIG5ld1N0YXRlKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgY2hhbmdlIGZyb20gdGhlIGdpdmVuIHN0YXRlXG4gICAqIEBwYXJhbSAge09iamVjdH0gb2xkU3RhdGVcbiAgICogQHBhcmFtICB7T2JqZWN0fSBuZXdTdGF0ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc2hvdWxkU2hhcmVkQ29tcG9uZW50VXBkYXRlIChvbGRTdGF0ZSwgbmV3U3RhdGUpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHNoYXJlZCBzdGF0ZSBkaWQgY2hhbmdlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRTdGF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbmV3U3RhdGVcbiAgICovXG4gIHNoYXJlZFN0YXRlRGlkQ2hhbmdlIChvbGRTdGF0ZSwgbmV3U3RhdGUpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGJlZm9yZSB0aGUgc2hhcmVkIHN0YXRlIGlzIHVwZGF0ZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9sZFN0YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZXdTdGF0ZVxuICAgKi9cbiAgc2hhcmVkU3RhdGVXaWxsQ2hhbmdlIChvbGRTdGF0ZSwgbmV3U3RhdGUpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdpdmVuIHN0YXRlIG9uIHRoZSBzaGFyZWQgc3RhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gdXBkYXRlXG4gICAqL1xuICBzZXRTaGFyZWRTdGF0ZSAoc3RhdGUsIHVwZGF0ZSkge1xuICAgIHRoaXMuY29udGV4dC5zaGFyZWRTdGF0ZS5zZXQoc3RhdGUsIHVwZGF0ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzaGFyZWQgc3RhdGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcFxuICAgKiBAcmV0dXJuIHsqfVxuICAgKi9cbiAgZ2V0U2hhcmVkU3RhdGUgKHByb3ApIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnNoYXJlZFN0YXRlLmdldChwcm9wKVxuICB9XG5cbiAgZ2V0IHNoYXJlZFN0YXRlICgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnNoYXJlZFN0YXRlLnN0YXRlXG4gIH1cblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZSBvZiB0aGUgc2hhcmVkIHN0YXRlXG4gICAqL1xuICBmb3JjZVNoYXJlZFVwZGF0ZSAoKSB7XG4gICAgdGhpcy5jb250ZXh0LnNoYXJlZFN0YXRlLmJyb2FkY2FzdFVwZGF0ZSgpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQtc3RhdGUtY29tcG9uZW50LmpzeCIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKiovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBCYXNlQ29tcG9uZW50LCBhZG9uaXMgfSBmcm9tICdnbG9iYWxzJ1xuaW1wb3J0IHsgSW5wdXQgYXMgSW5wdXRTdHlsZSB9IGZyb20gJy4uL3N0eWxlcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTnVtZXJpY0lucHV0Q29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uS2V5RG93bicsXG4gICAgICAnX29uSW5wdXRCbHVyJyxcbiAgICAgICdfb25JbnB1dENoYW5nZSdcbiAgICApXG5cbiAgICB0aGlzLnN0YXRlID0ge31cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSByZW5kZXJpbmcgd2hlbiBuZXcgcHJvcHMgb3Igc3RhdGUgYXJlIGJlaW5nIHJlY2VpdmVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUgfHxcbiAgICAgIHRoaXMucHJvcHMuZGlzYWJsZWQgIT09IG5leHRQcm9wcy5kaXNhYmxlZFxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXRcbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbklucHV0Q2hhbmdlIChlKSB7XG4gICAgdGhpcy5wcm9wcy5vbkxpdmVDaGFuZ2UgJiZcbiAgICAgIHRoaXMucHJvcHMub25MaXZlQ2hhbmdlKGUpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBpbnB1dCBsb3NlcyBmb2N1c1xuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25JbnB1dEJsdXIgKGUpIHtcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGUpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIHJlbGVhc2VzIGEga2V5Ym9hcmQga2V5XG4gICAqIEBwYXJhbSAge0V2ZW50fSBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uS2V5RG93biAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMTMgfHwgLy8gRU5URVJcbiAgICAgICAgZXZlbnQua2V5Q29kZSA9PT0gMjcpIHsgLy8gRVNDXG4gICAgICB0aGlzLl9pbnB1dC5ibHVyKClcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vbktleURvd24gJiZcbiAgICAgIHRoaXMucHJvcHMub25LZXlEb3duKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBVQkxJQyBBUElcblxuICAvKipcbiAgICogRm9jdXNlcyB0aGlzIGlucHV0XG4gICAqL1xuICBmb2N1cyAoKSB7XG4gICAgdGhpcy5faW5wdXQuZm9jdXMoKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0eWxlIG9iamVjdCBmb3IgdGhlIGlucHV0XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRJbnB1dFN0eWxlICgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgUm9vdEVsZW1lbnQgfSA9IHRoaXMuY29uc3RydWN0b3JcbiAgICByZXR1cm4gKDxSb290RWxlbWVudFxuICAgICAgdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9XG4gICAgICBvbkNoYW5nZT17dGhpcy5fb25JbnB1dENoYW5nZX1cbiAgICAgIG9uQmx1cj17dGhpcy5fb25JbnB1dEJsdXJ9XG4gICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9pbnB1dCA9IGVsIH19XG4gICAgICBvbktleURvd249e3RoaXMuX29uS2V5RG93bn1cbiAgICAgIG5hbWU9e3RoaXMucHJvcHMubmFtZX1cbiAgICAgIHN0eWxlcz17dGhpcy5wcm9wcy5zdHlsZXN9XG4gICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfVxuICAgICAgc3R5bGU9e3RoaXMuX2dldElucHV0U3R5bGUoKX1cbiAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfSAvPilcbiAgfVxufVxuXG5OdW1lcmljSW5wdXRDb21wb25lbnQuUm9vdEVsZW1lbnQgPSBhZG9uaXMoSW5wdXRTdHlsZSkuaW5wdXQoe30pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2hhcmVkL2Zvcm1zL251bWVyaWMtaW5wdXQtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgT3BlcmF0aW9ucywgTWF0aCBhcyBQTWF0aCwgVXRpbHMgYXMgU0RLVXRpbHMgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIFV0aWxzLCBDb25zdGFudHMsIENhbnZhc0NvbnRyb2xzQ29tcG9uZW50IH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IFN0aWNrZXJJdGVtQ29tcG9uZW50IGZyb20gJy4vc3ByaXRlcy9zdGlja2VyLWl0ZW0tY29tcG9uZW50J1xuaW1wb3J0IFRleHRJdGVtQ29tcG9uZW50IGZyb20gJy4vc3ByaXRlcy90ZXh0LWl0ZW0tY29tcG9uZW50J1xuaW1wb3J0IEJydXNoSXRlbUNvbXBvbmVudCBmcm9tICcuL3Nwcml0ZXMvYnJ1c2gtaXRlbS1jb21wb25lbnQnXG5pbXBvcnQgVGV4dERlc2lnbkl0ZW1Db21wb25lbnQgZnJvbSAnLi9zcHJpdGVzL3RleHQtZGVzaWduLWl0ZW0tY29tcG9uZW50J1xuXG5jb25zdCB7IFZlY3RvcjIgfSA9IFBNYXRoXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3ByaXRlc0NhbnZhc0NvbnRyb2xzQ29tcG9uZW50IGV4dGVuZHMgQ2FudmFzQ29udHJvbHNDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQ2FudmFzQ29udHJvbHNDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25ab29tRG9uZScsXG4gICAgICAnX29uV2luZG93UmVzaXplJyxcbiAgICAgICdfb25IaXN0b3J5Q2hhbmdlJyxcbiAgICAgICdfb25BZnRlclRyYW5zZm9ybSdcbiAgICApXG5cbiAgICB0aGlzLl9ldmVudHMgPSB7XG4gICAgICBbQ29uc3RhbnRzLkVWRU5UUy5aT09NX0RPTkVdOiB0aGlzLl9vblpvb21Eb25lLFxuICAgICAgW0NvbnN0YW50cy5FVkVOVFMuV0lORE9XX1JFU0laRV06IHRoaXMuX29uV2luZG93UmVzaXplLFxuICAgICAgW0NvbnN0YW50cy5FVkVOVFMuSElTVE9SWV9VTkRPXTogdGhpcy5fb25IaXN0b3J5Q2hhbmdlLFxuICAgICAgW0NvbnN0YW50cy5FVkVOVFMuSElTVE9SWV9SRURPXTogdGhpcy5fb25IaXN0b3J5Q2hhbmdlXG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IFNES1V0aWxzLmV4dGVuZCh0aGlzLnN0YXRlLCB7XG4gICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgIGNhbnZhc0NsaWNrRGlzYWJsZWQ6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGltbWVkaWF0ZWx5IGFmdGVyIGEgY29tcG9uZW50IGlzIG1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnREaWRNb3VudCgpXG4gICAgLy8gV2UgbmVlZCB0byByZS1yZW5kZXIgaW5pdGlhbGx5XG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgaGlzdG9yeSBpdGVtIG9mIHRoZSBzcHJpdGUgd2l0aCB0aGUgbmV3IHRyYW5zZm9ybSBvcHRpb25zXG4gICAqIEBwYXJhbSB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uU3ByaXRlfSBzcHJpdGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkFmdGVyVHJhbnNmb3JtIChzcHJpdGUpIHtcbiAgICBjb25zdCBpZGVudGlmaWVyID0gYHNwcml0ZS10cmFuc2Zvcm0tJHtzcHJpdGUuZ2V0SWQoKX1gXG4gICAgdGhpcy5wcm9wcy5jb250cm9scy5hZGRMb2NhbEhpc3RvcnlTbmFwc2hvdChpZGVudGlmaWVyLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgZ2l2ZW4gdW5kbyBvciByZWRvIGl0ZW1zIGFyZSBhcHBsaWVkXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25IaXN0b3J5Q2hhbmdlICgpIHtcbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdvcGVyYXRpb24nKVxuXG4gICAgLy8gQSBoaXN0b3J5IHVuZG8gY291bGQgaGF2ZSBhbHJlYWR5IGRlc3Ryb3llZCB0aGUgb3BlcmF0aW9uXG4gICAgaWYgKCFvcGVyYXRpb24pIHJldHVyblxuXG4gICAgLy8gSWYgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBzcHJpdGUgaXMgbm8gbG9uZ2VyIGF2YWlsYWJsZSwgc2VsZWN0IHRoZSBuZXh0IG9uZVxuICAgIGNvbnN0IHNlbGVjdGVkU3ByaXRlID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnc2VsZWN0ZWRTcHJpdGUnKVxuICAgIGNvbnN0IHNwcml0ZXMgPSBvcGVyYXRpb24uZ2V0U3ByaXRlcygpXG4gICAgaWYgKHNwcml0ZXMuaW5kZXhPZihzZWxlY3RlZFNwcml0ZSkgPT09IC0xKSB7XG4gICAgICB0aGlzLl9zZWxlY3ROZXh0U3ByaXRlKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB3aW5kb3cgaGFzIGJlZW4gcmVzaXplZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uV2luZG93UmVzaXplICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgZWRpdG9yLm9uY2UoJ3JlbmRlcmVkJywgKCkgPT4ge1xuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBhZnRlciBhIHpvb20gaGFzIGJlZW4gZG9uZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uWm9vbURvbmUgKCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBlZGl0b3IucmVuZGVyKClcblxuICAgIHRoaXMuc2V0U3RhdGUoeyB2aXNpYmxlOiB0cnVlIH0pXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBkZXNlbGVjdGVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25JdGVtQmx1ciAoKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBzb21ld2hlcmUgb24gdGhlIGNhbnZhc1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ2FudmFzQ2xpY2sgKGUpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5jYW52YXNDbGlja0Rpc2FibGVkKSByZXR1cm5cblxuICAgIGNvbnN0IGhpdFRlc3QgPSB0aGlzLl9wZXJmb3JtSGl0VGVzdChVdGlscy5nZXRFdmVudFBvc2l0aW9uKGUpKVxuICAgIGlmICghaGl0VGVzdCkge1xuICAgICAgaWYgKHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3NlbGVjdGVkU3ByaXRlJykpIHtcbiAgICAgICAgdGhpcy5fb25JdGVtQmx1cigpXG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRleHQuc2NyZWVuLnN3aXRjaFRvQ29udHJvbHMoJ2RlZmF1bHQnKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgZGVsZXRlcyBhIHNwcml0ZVxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5TcHJpdGV9IHNwcml0ZVxuICAgKiBAcGFyYW0gIHtFdmVudH0gZXZlbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblNwcml0ZURlbGV0ZSAoc3ByaXRlKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnb3BlcmF0aW9uJylcbiAgICBvcGVyYXRpb24ucmVtb3ZlU3ByaXRlKHNwcml0ZSlcbiAgICBzcHJpdGUuZGlzcG9zZSgpXG5cbiAgICB0aGlzLl9zZWxlY3ROZXh0U3ByaXRlKClcblxuICAgIHRoaXMucHJvcHMuY29udHJvbHMuYWRkTG9jYWxIaXN0b3J5U25hcHNob3QoJ3Nwcml0ZS1kZWxldGlvbicsIGZhbHNlKVxuXG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGVkaXRvci5yZW5kZXIoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciB0YWtlcyBhIHNwcml0ZSB0byBmcm9udFxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5TcHJpdGV9IHNwcml0ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uU3ByaXRlVGFrZVRvRnJvbnQgKHNwcml0ZSkge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ29wZXJhdGlvbicpXG4gICAgb3BlcmF0aW9uLnRha2VTcHJpdGVUb0Zyb250KHNwcml0ZSlcblxuICAgIHRoaXMucHJvcHMuY29udHJvbHMuYWRkTG9jYWxIaXN0b3J5U25hcHNob3QoJ3Nwcml0ZS1vcmRlcicsIGZhbHNlKVxuXG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG5cbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgZWRpdG9yLnJlbmRlcigpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGZsaXBzIGEgc3ByaXRlIGhvcml6b250YWxseVxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5TcHJpdGV9IHNwcml0ZVxuICAgKiBAcGFyYW0gIHtFdmVudH0gZXZlbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblNwcml0ZUZsaXBIb3Jpem9udGFsbHkgKHNwcml0ZSwgZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgc3ByaXRlLnNldEZsaXBIb3Jpem9udGFsbHkoIXNwcml0ZS5nZXRGbGlwSG9yaXpvbnRhbGx5KCkpXG5cbiAgICB0aGlzLnByb3BzLmNvbnRyb2xzLmFkZExvY2FsSGlzdG9yeVNuYXBzaG90KCdzcHJpdGUtZmxpcC1ob3Jpem9udGFsbHknLCBmYWxzZSlcblxuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuXG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGVkaXRvci5yZW5kZXIoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBkdXBsaWNhdGVzIGEgc3ByaXRlXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlNwcml0ZX0gc3ByaXRlXG4gICAqIEBwYXJhbSAge0V2ZW50fSBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uU3ByaXRlRHVwbGljYXRlIChzcHJpdGUsIGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdvcGVyYXRpb24nKVxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHNwcml0ZS5zZXJpYWxpemVPcHRpb25zKClcbiAgICBkZWxldGUgb3B0aW9ucy5pZFxuICAgIGRlbGV0ZSBvcHRpb25zLnR5cGVcblxuICAgIC8vIGBzZXJpYWxpemVPcHRpb25zKClgIHNlcmlhbGl6ZXMgdGhlIGltYWdlIGludG8gYSBVUkwsIGJ1dCB3ZSBuZWVkIHRvIHJlLXVzZSB0aGUgYWN0dWFsXG4gICAgLy8gaW1hZ2Ugb2JqZWN0IGhlcmUuXG4gICAgaWYgKHNwcml0ZS5oYXNPcHRpb24oJ2ltYWdlJykpIHtcbiAgICAgIG9wdGlvbnMuaW1hZ2UgPSBzcHJpdGUuZ2V0SW1hZ2UoKVxuICAgIH1cblxuICAgIGNvbnN0IGlucHV0RGltZW5zaW9ucyA9IG9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoKVxuICAgIG9wdGlvbnMucG9zaXRpb24uYWRkKChuZXcgVmVjdG9yMigxMCwgMTApKS5kaXZpZGUoaW5wdXREaW1lbnNpb25zKSlcblxuICAgIGNvbnN0IG5ld1Nwcml0ZSA9IHRoaXMuX2NyZWF0ZVNwcml0ZShvcHRpb25zKVxuICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUoe1xuICAgICAgc2VsZWN0ZWRTcHJpdGU6IG5ld1Nwcml0ZVxuICAgIH0pXG4gICAgb3BlcmF0aW9uLmFkZFNwcml0ZShuZXdTcHJpdGUpXG5cbiAgICB0aGlzLnByb3BzLmNvbnRyb2xzLmFkZExvY2FsSGlzdG9yeVNuYXBzaG90KCdzcHJpdGUtY3JlYXRpb24nLCBmYWxzZSlcblxuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBlZGl0b3IucmVuZGVyKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE1JU0NcblxuICAvKipcbiAgICogU2VsZWN0cyB0aGUgbmV4dCBzcHJpdGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZWxlY3ROZXh0U3ByaXRlICgpIHtcbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdvcGVyYXRpb24nKVxuICAgIGNvbnN0IHNwcml0ZXMgPSBvcGVyYXRpb24uZ2V0U3ByaXRlcygpXG4gICAgY29uc3QgbmV4dFNwcml0ZSA9IHNwcml0ZXNbc3ByaXRlcy5sZW5ndGggLSAxXVxuICAgIGlmICghbmV4dFNwcml0ZSkge1xuICAgICAgdGhpcy5wcm9wcy5jb250cm9scy5za2lwSGlzdG9yeSA9IHRydWVcbiAgICAgIHRoaXMuY29udGV4dC5zY3JlZW4uc3dpdGNoVG9Db250cm9scygnZGVmYXVsdCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUoeyBzZWxlY3RlZFNwcml0ZTogbmV4dFNwcml0ZSB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb21wb25lbnQgY2xhc3MgZm9yIHRoZSBnaXZlbiBzcHJpdGVcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uU3ByaXRlfSBzcHJpdGVcbiAgICogQHJldHVybiB7UmVhY3QuQ29tcG9uZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldENvbXBvbmVudFR5cGVGb3JTcHJpdGUgKHNwcml0ZSkge1xuICAgIGNvbnN0IHsgU3ByaXRlT3BlcmF0aW9uIH0gPSBPcGVyYXRpb25zXG4gICAgc3dpdGNoIChzcHJpdGUuY29uc3RydWN0b3IpIHtcbiAgICAgIGNhc2UgU3ByaXRlT3BlcmF0aW9uLlN0aWNrZXJTcHJpdGU6XG4gICAgICAgIHJldHVybiBTdGlja2VySXRlbUNvbXBvbmVudFxuICAgICAgY2FzZSBTcHJpdGVPcGVyYXRpb24uVGV4dFNwcml0ZTpcbiAgICAgICAgcmV0dXJuIFRleHRJdGVtQ29tcG9uZW50XG4gICAgICBjYXNlIFNwcml0ZU9wZXJhdGlvbi5CcnVzaFNwcml0ZTpcbiAgICAgICAgcmV0dXJuIEJydXNoSXRlbUNvbXBvbmVudFxuICAgICAgY2FzZSBTcHJpdGVPcGVyYXRpb24uVGV4dERlc2lnblNwcml0ZTpcbiAgICAgICAgcmV0dXJuIFRleHREZXNpZ25JdGVtQ29tcG9uZW50XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb3BzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUgaXRlbSBjb21wb25lbnQgb2YgdGhlIGdpdmVuIHNwcml0ZVxuICAgKiBAcGFyYW0gIHtTcHJpdGV9IHNwcml0ZVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0UHJvcHNGb3JTcHJpdGUgKHNwcml0ZSkge1xuICAgIGxldCBwcm9wcyA9IHt9XG4gICAgcHJvcHMuaGlkZUNvbnRlbnQgPSB0cnVlXG4gICAgcmV0dXJuIHByb3BzXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgc3ByaXRlIGl0ZW1zXG4gICAqIEBwYXJhbSB7U3ByaXRlW119IHNwcml0ZXNcbiAgICogQHJldHVybiB7UmVhY3QuQ29tcG9uZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyU3ByaXRlSXRlbXMgKHNwcml0ZXMpIHtcbiAgICBjb25zdCBzZWxlY3RlZFNwcml0ZSA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3NlbGVjdGVkU3ByaXRlJylcbiAgICByZXR1cm4gc3ByaXRlcy5tYXAoKHNwcml0ZSkgPT4ge1xuICAgICAgY29uc3QgU3ByaXRlQ29tcG9uZW50ID0gdGhpcy5fZ2V0Q29tcG9uZW50VHlwZUZvclNwcml0ZShzcHJpdGUpXG4gICAgICBjb25zdCBzcHJpdGVQcm9wcyA9IHRoaXMuX2dldFByb3BzRm9yU3ByaXRlKHNwcml0ZSlcbiAgICAgIGNvbnN0IHNlbGVjdGVkID0gc2VsZWN0ZWRTcHJpdGUgPT09IHNwcml0ZVxuICAgICAgcmV0dXJuICg8U3ByaXRlQ29tcG9uZW50XG4gICAgICAgIHNwcml0ZT17c3ByaXRlfVxuICAgICAgICBzZWxlY3RlZD17c2VsZWN0ZWR9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uQ2FudmFzQ2xpY2t9XG4gICAgICAgIG9uQWZ0ZXJDaGFuZ2U9e3RoaXMuX29uQWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzLCBzcHJpdGUpfVxuICAgICAgICBvbkNhbnZhc0NsaWNrRGlzYWJsZWQ9e3RoaXMuX29uQ2FudmFzQ2xpY2tEaXNhYmxlZH1cbiAgICAgICAgb25DYW52YXNDbGlja0VuYWJsZWQ9e3RoaXMuX29uQ2FudmFzQ2xpY2tFbmFibGVkfVxuICAgICAgICBvbkRlbGV0ZT17dGhpcy5fb25TcHJpdGVEZWxldGUuYmluZCh0aGlzLCBzcHJpdGUpfVxuICAgICAgICBvblRha2VUb0Zyb250PXt0aGlzLl9vblNwcml0ZVRha2VUb0Zyb250LmJpbmQodGhpcywgc3ByaXRlKX1cbiAgICAgICAgb25GbGlwSG9yaXpvbnRhbGx5PXt0aGlzLl9vblNwcml0ZUZsaXBIb3Jpem9udGFsbHkuYmluZCh0aGlzLCBzcHJpdGUpfVxuICAgICAgICBvbkR1cGxpY2F0ZT17dGhpcy5fb25TcHJpdGVEdXBsaWNhdGUuYmluZCh0aGlzLCBzcHJpdGUpfVxuICAgICAgICBzbmFwUm90YXRpb249e3RoaXMucHJvcHMub3B0aW9ucy5zbmFwUm90YXRpb259XG4gICAgICAgIHNuYXBSb3RhdGlvblRvbGVyYW5jZT17dGhpcy5wcm9wcy5vcHRpb25zLnNuYXBSb3RhdGlvblRvbGVyYW5jZX1cbiAgICAgICAgY2FudmFzQ29udHJvbHM9e3RoaXN9XG4gICAgICAgIGtleT17c3ByaXRlLmdldElkKCl9XG4gICAgICAgIHsuLi5zcHJpdGVQcm9wc30gLz4pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBvdmVybGF5IGNvbnRyb2xzXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyT3ZlcmxheUNvbnRyb2xzICgpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIF9yZW5kZXJDb250cm9scyAoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnZpc2libGUpIHJldHVyblxuXG4gICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnb3BlcmF0aW9uJylcbiAgICBjb25zdCBzcHJpdGVzID0gb3BlcmF0aW9uLmdldFNwcml0ZXMoKVxuXG4gICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSB0aGlzLl9jb250YWluZXIgJiYgdGhpcy5fZ2V0Q29udGFpbmVyU3R5bGUoKVxuICAgIHJldHVybiAoPENhbnZhc0NvbnRyb2xzIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtc3ByaXRlc0NhbnZhc0NvbnRyb2xzJyA6IHVuZGVmaW5lZCl9PlxuICAgICAgPENvbnRhaW5lclxuICAgICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9pbm5lckNvbnRhaW5lciA9IGVsIH19XG4gICAgICAgIHN0eWxlPXtjb250YWluZXJTdHlsZX1cbiAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1jb250YWluZXInIDogdW5kZWZpbmVkKX0+XG4gICAgICAgIHshdGhpcy5zdGF0ZS5jYW52YXNDbGlja0Rpc2FibGVkICYmIDxDbGlja0hhbmRsZXJGb3JJbnRlcm5ldEV4cGxvcmVyIG9uQ2xpY2s9e3RoaXMuX29uQ2FudmFzQ2xpY2t9IC8+IH1cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7dGhpcy5fcmVuZGVyU3ByaXRlSXRlbXMoc3ByaXRlcyl9XG4gICAgICAgICAge3RoaXMuX3JlbmRlck92ZXJsYXlDb250cm9scygpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQ29udGFpbmVyPlxuICAgIDwvQ2FudmFzQ29udHJvbHM+KVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxFU1xuXG5jb25zdCBDYW52YXNDb250cm9scyA9IGFkb25pcy5kaXYoe30pXG5cbmNvbnN0IENvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nXG59KVxuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE0MTcyNjMwL2llMTAtaXMtbm90LWhhbmRsaW5nLWNsaWNrLWV2ZW50cy1oZWxwLXVzaW5nLW1zcG9pbnRlclxuY29uc3QgQ2xpY2tIYW5kbGVyRm9ySW50ZXJuZXRFeHBsb3JlciA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgYmFja2dyb3VuZDogJyNGRjAwMDAnLFxuICBvcGFjaXR5OiAwLFxuICB6SW5kZXg6IHRoZW1lID0+IHRoZW1lLnpJbmRleCgnY29udHJvbHNPdmVybGF5cycpXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvc2hhcmVkL3Nwcml0ZXMvc3ByaXRlcy1jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cbmltcG9ydCB7IE1hdGggYXMgUE1hdGgsIE9wZXJhdGlvbnMgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIEJhc2VDb21wb25lbnQsIERyYWdnYWJsZUNvbXBvbmVudCwgQ2FudmFzT3ZlcmxheUNvbnRyb2xzQ29tcG9uZW50IH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuXG5jb25zdCB7IFZlY3RvcjIgfSA9IFBNYXRoXG5sZXQgVGV4dFNwcml0ZVxubGV0IFRleHREZXNpZ25TcHJpdGVcbmlmIChPcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbikge1xuICBUZXh0U3ByaXRlID0gT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uVGV4dFNwcml0ZVxuICBUZXh0RGVzaWduU3ByaXRlID0gT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uVGV4dERlc2lnblNwcml0ZVxufVxuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSXRlbUNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQmFzZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcbiAgc3RhdGljIE1JTl9XSURUSCA9IDFcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHNuYXBSb3RhdGlvbjogOTAsXG4gICAgc25hcFJvdGF0aW9uVG9sZXJhbmNlOiA1XG4gIH1cblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vbkRyYWdTdGFydCcsXG4gICAgICAnX29uRHJhZycsXG4gICAgICAnX29uRHJhZ1N0b3AnLFxuICAgICAgJ19vblJvdGF0ZURyYWdTdGFydCcsXG4gICAgICAnX29uUm90YXRlRHJhZycsXG4gICAgICAnX29uUm90YXRlRHJhZ1N0b3AnLFxuICAgICAgJ19vbkNvcm5lckRyYWcnLFxuICAgICAgJ19vbkNvcm5lckRyYWdTdG9wJyxcbiAgICAgICdfb25TcHJpdGVVcGRhdGUnLFxuICAgICAgJ19vblRha2VUb0Zyb250JyxcbiAgICAgICdfb25GbGlwSG9yaXpvbnRhbGx5JyxcbiAgICAgICdfb25EdXBsaWNhdGUnLFxuICAgICAgJ19vbkRlbGV0ZSdcbiAgICApXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogSW52b2tlZCBpbW1lZGlhdGVseSBhZnRlciBhIGNvbXBvbmVudCBpcyBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgdGhpcy5wcm9wcy5zcHJpdGUub24oJ3VwZGF0ZScsIHRoaXMuX29uU3ByaXRlVXBkYXRlKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgaW1tZWRpYXRlbHkgYmVmb3JlIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBhbmQgZGVzdHJveWVkXG4gICAqL1xuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgdGhpcy5wcm9wcy5zcHJpdGUub2ZmKCd1cGRhdGUnLCB0aGlzLl9vblNwcml0ZVVwZGF0ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSBhIG1vdW50ZWQgY29tcG9uZW50IHJlY2VpdmVzIG5ldyBwcm9wc1xuICAgKiBAcGFyYW0gIHtPYmplY3R9IG5leHRQcm9wc1xuICAgKi9cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgdGhpcy5wcm9wcy5zcHJpdGUub2ZmKCd1cGRhdGUnLCB0aGlzLl9vblNwcml0ZVVwZGF0ZSlcbiAgICBuZXh0UHJvcHMuc3ByaXRlLm9uKCd1cGRhdGUnLCB0aGlzLl9vblNwcml0ZVVwZGF0ZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHNwcml0ZSBoYXMgYmVlbiB1cGRhdGVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25TcHJpdGVVcGRhdGUgKCkge1xuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGB0YWtlIHRvIGZyb250YCBidXR0b25cbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblRha2VUb0Zyb250IChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgdGhpcy5wcm9wcy5vblRha2VUb0Zyb250ICYmIHRoaXMucHJvcHMub25UYWtlVG9Gcm9udChldmVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBgZmxpcCBob3Jpem9udGFsbHlgIGJ1dHRvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uRmxpcEhvcml6b250YWxseSAoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIHRoaXMucHJvcHMub25GbGlwSG9yaXpvbnRhbGx5ICYmIHRoaXMucHJvcHMub25GbGlwSG9yaXpvbnRhbGx5KGV2ZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGBkZWxldGVgIGJ1dHRvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uRGVsZXRlIChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgdGhpcy5wcm9wcy5vbkRlbGV0ZSAmJiB0aGlzLnByb3BzLm9uRGVsZXRlKGV2ZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGBkdXBsaWNhdGVgIGJ1dHRvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uRHVwbGljYXRlIChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgdGhpcy5wcm9wcy5vbkR1cGxpY2F0ZSAmJiB0aGlzLnByb3BzLm9uRHVwbGljYXRlKGV2ZW50KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU0NBTElOR1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgc3RhcnRzIHNjYWxpbmcgdGhlIGl0ZW1cbiAgICogQGFic3RyYWN0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CZWZvcmVTY2FsZSAoKSB7IH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGlsZSB0aGUgdXNlciBpcyBzY2FsaW5nIHRoZSBpdGVtXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZVxuICAgKiBAYWJzdHJhY3RcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblNjYWxlIChzY2FsZSkgeyB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUk9UQVRJT04gS05PQiBEUkFHR0lOR1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgc3RhcnRzIGRyYWdnaW5nIHRoZSByb3RhdGUga25vYlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uUm90YXRlRHJhZ1N0YXJ0ICgpIHtcbiAgICB0aGlzLl9pbWFnZUJvdW5kaW5nQm94ID0gdGhpcy5wcm9wcy5jYW52YXNDb250cm9scy5nZXRJbWFnZUJvdW5kaW5nUmVjdCgpXG4gICAgdGhpcy5fY29udGFpbmVyT2Zmc2V0ID0gdGhpcy5wcm9wcy5jYW52YXNDb250cm9scy5nZXRDb250YWluZXJPZmZzZXQoKVxuXG4gICAgdGhpcy5wcm9wcy5vbkJlZm9yZUNoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkJlZm9yZUNoYW5nZSgpXG5cbiAgICB0aGlzLnByb3BzLm9uQ2FudmFzQ2xpY2tEaXNhYmxlZCAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkNhbnZhc0NsaWNrRGlzYWJsZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhZ2dpbmcgdGhlIHJvdGF0ZSBrbm9iXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMn0gZGlzdGFuY2VcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBwb3NpdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uUm90YXRlRHJhZyAoZGlzdGFuY2UsIHBvc2l0aW9uKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCBzcHJpdGVQb3NpdGlvbiA9IHRoaXMuX2dldEFic29sdXRlU3ByaXRlUG9zaXRpb24oKVxuICAgICAgLmFkZCh0aGlzLl9pbWFnZUJvdW5kaW5nQm94LngsIHRoaXMuX2ltYWdlQm91bmRpbmdCb3gueSlcbiAgICBjb25zdCBzcHJpdGVQaXZvdFBvc2l0aW9uID0gc3ByaXRlUG9zaXRpb24uY2xvbmUoKVxuXG4gICAgY29uc3QgbW91c2VEaXN0YW5jZUZyb21QaXZvdCA9IHBvc2l0aW9uLmNsb25lKClcbiAgICAgIC5zdWJ0cmFjdCh0aGlzLl9jb250YWluZXJPZmZzZXQpXG4gICAgICAuc3VidHJhY3Qoc3ByaXRlUGl2b3RQb3NpdGlvbilcblxuICAgIGxldCByYWRpYW5zID0gTWF0aC5hdGFuMihcbiAgICAgIG1vdXNlRGlzdGFuY2VGcm9tUGl2b3QueSxcbiAgICAgIG1vdXNlRGlzdGFuY2VGcm9tUGl2b3QueFxuICAgICkgLSBNYXRoLlBJIC8gMlxuXG4gICAgY29uc3QgeyBzbmFwUm90YXRpb24sIHNuYXBSb3RhdGlvblRvbGVyYW5jZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IGRlZ3JlZXMgPSBNYXRoLnJvdW5kKHJhZGlhbnMgKiAxODAgLyBNYXRoLlBJKVxuICAgIGNvbnN0IG5leHRTbmFwID0gTWF0aC5yb3VuZChkZWdyZWVzIC8gc25hcFJvdGF0aW9uKSAqIHNuYXBSb3RhdGlvblxuICAgIGNvbnN0IHJlbWFpbmRlciA9IGRlZ3JlZXMgLSBuZXh0U25hcFxuICAgIGlmIChNYXRoLmFicyhyZW1haW5kZXIpIDwgc25hcFJvdGF0aW9uVG9sZXJhbmNlKSB7XG4gICAgICByYWRpYW5zID0gbmV4dFNuYXAgKiBNYXRoLlBJIC8gMTgwXG4gICAgfVxuXG4gICAgc3ByaXRlLnNldFJvdGF0aW9uKHJhZGlhbnMpXG4gICAgZWRpdG9yLnJlbmRlcigpXG5cbiAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgc3RvcHMgZHJhZ2dpbmcgdGhlIHJvdGF0ZSBrbm9iXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Sb3RhdGVEcmFnU3RvcCAoKSB7XG4gICAgdGhpcy5wcm9wcy5vbkFmdGVyQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQWZ0ZXJDaGFuZ2UoKVxuXG4gICAgdGhpcy5wcm9wcy5vbkNhbnZhc0NsaWNrRW5hYmxlZCAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkNhbnZhc0NsaWNrRW5hYmxlZCgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDT1JORVIgRFJBR0dJTkdcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBkcmFnZ2luZyBhIGNvcm5lclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ29ybmVyRHJhZ1N0YXJ0ICh2ZXJ0aWNhbFNpZGUsIGhvcml6b250YWxTaWRlLCByZWxhdGl2ZVBvc2l0aW9uLCBhYnNvbHV0ZVBvc2l0aW9uKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyB4IH0gPSBzcHJpdGUuZ2V0RGltZW5zaW9ucyhlZGl0b3IuZ2V0U0RLKCksIGVkaXRvci5nZXRPdXRwdXREaW1lbnNpb25zKCkpXG5cbiAgICB0aGlzLl9pbWFnZUJvdW5kaW5nQm94ID0gdGhpcy5wcm9wcy5jYW52YXNDb250cm9scy5nZXRJbWFnZUJvdW5kaW5nUmVjdCgpXG4gICAgdGhpcy5fY29udGFpbmVyT2Zmc2V0ID0gdGhpcy5wcm9wcy5jYW52YXNDb250cm9scy5nZXRDb250YWluZXJPZmZzZXQoKVxuXG4gICAgY29uc3QgcGl2b3QgPSBzcHJpdGUuZ2V0UGl2b3QoKVxuICAgIGNvbnN0IGFuY2hvciA9IHNwcml0ZS5nZXRBbmNob3IoKVxuXG4gICAgY29uc3Qgc3ByaXRlUG9zaXRpb24gPSB0aGlzLl9nZXRBYnNvbHV0ZVNwcml0ZVBvc2l0aW9uKClcbiAgICAgIC5hZGQodGhpcy5faW1hZ2VCb3VuZGluZ0JveC54LCB0aGlzLl9pbWFnZUJvdW5kaW5nQm94LnkpXG4gICAgY29uc3Qgc3ByaXRlQm91bmRpbmdCb3ggPSBzcHJpdGUuZ2V0RGltZW5zaW9ucyhlZGl0b3IuZ2V0U0RLKCksIGVkaXRvci5nZXRPdXRwdXREaW1lbnNpb25zKCkpXG4gICAgY29uc3Qgc3ByaXRlRGltZW5zaW9ucyA9IG5ldyBWZWN0b3IyKHNwcml0ZUJvdW5kaW5nQm94LndpZHRoLCBzcHJpdGVCb3VuZGluZ0JveC5oZWlnaHQpXG5cbiAgICBjb25zdCBzcHJpdGVQaXZvdFBvc2l0aW9uID0gc3ByaXRlUG9zaXRpb24uY2xvbmUoKVxuICAgICAgLnN1YnRyYWN0KHNwcml0ZURpbWVuc2lvbnMuY2xvbmUoKS5tdWx0aXBseShhbmNob3IpKVxuICAgICAgLmFkZChzcHJpdGVEaW1lbnNpb25zLmNsb25lKCkubXVsdGlwbHkocGl2b3QpKVxuICAgICAgLnJvdW5kKClcblxuICAgIGNvbnN0IG1vdXNlRGlzdGFuY2VGcm9tUGl2b3QgPSBhYnNvbHV0ZVBvc2l0aW9uLmNsb25lKClcbiAgICAgIC5zdWJ0cmFjdCh0aGlzLl9jb250YWluZXJPZmZzZXQpXG4gICAgICAuc3VidHJhY3Qoc3ByaXRlUGl2b3RQb3NpdGlvbilcblxuICAgIHRoaXMuX2luaXRpYWxTY2FsZVNldHRpbmdzID0ge1xuICAgICAgd2lkdGg6IHgsXG4gICAgICBtb3VzZURpc3RhbmNlRnJvbVBpdm90XG4gICAgfVxuXG4gICAgdGhpcy5fb25CZWZvcmVTY2FsZSgpXG5cbiAgICB0aGlzLnByb3BzLm9uQmVmb3JlQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQmVmb3JlQ2hhbmdlKClcblxuICAgIHRoaXMucHJvcHMub25DYW52YXNDbGlja0Rpc2FibGVkICYmXG4gICAgICB0aGlzLnByb3BzLm9uQ2FudmFzQ2xpY2tEaXNhYmxlZCgpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGlsZSB0aGUgdXNlciBpcyBkcmFnZ2luZyBhIGNvcm5lclxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9IGRpc3RhbmNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Db3JuZXJEcmFnIChkaXN0YW5jZSkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHRleHRSb3RhdGlvbiA9IHNwcml0ZS5nZXRSb3RhdGlvbigpXG4gICAgY29uc3QgeyB3aWR0aCwgbW91c2VEaXN0YW5jZUZyb21QaXZvdCB9ID0gdGhpcy5faW5pdGlhbFNjYWxlU2V0dGluZ3NcbiAgICBjb25zdCBuZXdNb3VzZURpc3RhbmNlRnJvbVBpdm90ID0gbW91c2VEaXN0YW5jZUZyb21QaXZvdC5jbG9uZSgpXG4gICAgICAuYWRkKGRpc3RhbmNlKVxuXG4gICAgY29uc3QgY29zID0gTWF0aC5jb3ModGV4dFJvdGF0aW9uKVxuICAgIGNvbnN0IHNpbiA9IE1hdGguc2luKHRleHRSb3RhdGlvbilcblxuICAgIGNvbnN0IG5ld1dpZHRoID0gTWF0aC5tYXgoXG4gICAgICBNYXRoLmFicygobmV3TW91c2VEaXN0YW5jZUZyb21QaXZvdC54ICogY29zICsgbmV3TW91c2VEaXN0YW5jZUZyb21QaXZvdC55ICogc2luKSAqIDIpLFxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5NSU5fV0lEVEhcbiAgICApXG4gICAgY29uc3QgbmV3U2NhbGUgPSBuZXdXaWR0aCAvIHdpZHRoXG5cbiAgICBlZGl0b3IucmVuZGVyKClcblxuICAgIHRoaXMuX29uU2NhbGUobmV3U2NhbGUpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIHN0b3BzIGRyYWdnaW5nIGEgY29ybmVyXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Db3JuZXJEcmFnU3RvcCAoKSB7XG4gICAgdGhpcy5wcm9wcy5vbkFmdGVyQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQWZ0ZXJDaGFuZ2UoKVxuXG4gICAgdGhpcy5wcm9wcy5vbkNhbnZhc0NsaWNrRW5hYmxlZCAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkNhbnZhc0NsaWNrRW5hYmxlZCgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJVEVNIERSQUdHSU5HXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGl0ZW0gaXMgZHJhZ2dhYmxlIG9yIG5vdFxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2lzRHJhZ2dpbmdEaXNhYmxlZCAoKSB7XG4gICAgY29uc3QgeyBzZWxlY3RlZCB9ID0gdGhpcy5wcm9wc1xuICAgIHJldHVybiAhc2VsZWN0ZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBkcmFnZ2luZyB0aGlzIGl0ZW1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkRyYWdTdGFydCAoKSB7XG4gICAgY29uc3QgeyBzcHJpdGUgfSA9IHRoaXMucHJvcHNcbiAgICB0aGlzLl9pbml0aWFsUG9zaXRpb24gPSBzcHJpdGUuZ2V0UG9zaXRpb24oKVxuXG4gICAgdGhpcy5wcm9wcy5vbkJlZm9yZUNoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkJlZm9yZUNoYW5nZSgpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hpbGUgdGhlIHVzZXIgZHJhZ3MgdGhpcyBpdGVtXG4gICAqIEBwYXJhbSAge1ZlY3RvcjJ9IGRpc3RhbmNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25EcmFnIChkaXN0YW5jZSkge1xuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuXG4gICAgY29uc3Qgb3V0cHV0RGltZW5zaW9ucyA9IGVkaXRvci5nZXRPdXRwdXREaW1lbnNpb25zKClcbiAgICBjb25zdCBuZXdQb3NpdGlvbiA9IHRoaXMuX2luaXRpYWxQb3NpdGlvbi5jbG9uZSgpXG4gICAgICAuYWRkKGRpc3RhbmNlLmRpdmlkZShvdXRwdXREaW1lbnNpb25zKSlcblxuICAgIHRoaXMuX2RyYWdFbmRQb3NpdGlvbiA9IG5ld1Bvc2l0aW9uLmNsb25lKClcblxuICAgIHNwcml0ZS5zZXRQb3NpdGlvbihuZXdQb3NpdGlvbilcblxuICAgIGVkaXRvci5yZW5kZXIoKVxuXG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdXNlciBzdG9wcyBkcmFnZ2luZyB0aGlzIGl0ZW1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkRyYWdTdG9wICgpIHtcbiAgICBpZiAoIXRoaXMuX2RyYWdFbmRQb3NpdGlvbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2RyYWdFbmRQb3NpdGlvbi5jbG9uZSgpLnN1YnRyYWN0KHRoaXMuX2luaXRpYWxQb3NpdGlvbikubGVuKCkgIT09IDApIHtcbiAgICAgIHRoaXMucHJvcHMub25BZnRlckNoYW5nZSAmJiB0aGlzLnByb3BzLm9uQWZ0ZXJDaGFuZ2UoKVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENBTENVTEFUSU9OU1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgc3ByaXRlXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0QWJzb2x1dGVTcHJpdGVQb3NpdGlvbiAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IG91dHB1dERpbWVuc2lvbnMgPSBlZGl0b3IuZ2V0T3V0cHV0RGltZW5zaW9ucygpXG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5zcHJpdGUuZ2V0UG9zaXRpb24oKVxuICAgICAgLmNsb25lKClcbiAgICAgIC5tdWx0aXBseShvdXRwdXREaW1lbnNpb25zKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0eWxlIG9iamVjdCBmb3IgdGhlIGl0ZW0gY29udGFpbmVyXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRDb250YWluZXJTdHlsZSAoKSB7IHJldHVybiB7fSB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGNvcm5lciBrbm9ic1xuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyS25vYnMgKCkge1xuICAgIGNvbnN0IGtub2JzID0gW107XG4gICAgWyd0b3AnLCAnYm90dG9tJ10uZm9yRWFjaCgodmVydGljYWwpID0+IHtcbiAgICAgIFsnbGVmdCcsICdyaWdodCddLmZvckVhY2goKGhvcml6b250YWwpID0+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gYCR7dmVydGljYWx9LSR7aG9yaXpvbnRhbH1gXG4gICAgICAgIGNvbnN0IGtub2JQcm9wcyA9IHsgW2tleV06IHRydWUgfVxuICAgICAgICBrbm9icy5wdXNoKFxuICAgICAgICAgIDxEcmFnZ2FibGVDb21wb25lbnRcbiAgICAgICAgICAgIGtleT17a2V5fVxuICAgICAgICAgICAgb25TdGFydD17dGhpcy5fb25Db3JuZXJEcmFnU3RhcnQuYmluZCh0aGlzLCB2ZXJ0aWNhbCwgaG9yaXpvbnRhbCl9XG4gICAgICAgICAgICBvbkRyYWc9e3RoaXMuX29uQ29ybmVyRHJhZ31cbiAgICAgICAgICAgIG9uU3RvcD17dGhpcy5fb25Db3JuZXJEcmFnU3RvcH0+XG4gICAgICAgICAgICA8Q29ybmVyS25vYiB7Li4ua25vYlByb3BzfSAvPlxuICAgICAgICAgIDwvRHJhZ2dhYmxlQ29tcG9uZW50PilcbiAgICAgIH0pXG4gICAgfSlcbiAgICByZXR1cm4ga25vYnNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzcHJpdGUgZGltZW5zaW9uc1xuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0U3ByaXRlRGltZW5zaW9ucyAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3Qgb3V0cHV0RGltZW5zaW9ucyA9IGVkaXRvci5nZXRPdXRwdXREaW1lbnNpb25zKClcbiAgICByZXR1cm4gc3ByaXRlLmdldERpbWVuc2lvbnMoZWRpdG9yLmdldFNESygpLCBvdXRwdXREaW1lbnNpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHBvc2l0aW9uIGZvciB0aGUgY2FudmFzIG92ZXJsYXlcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldE92ZXJsYXlQb3NpdGlvbiAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCBvdXRwdXREaW1lbnNpb25zID0gZWRpdG9yLmdldE91dHB1dERpbWVuc2lvbnMoKVxuICAgIGNvbnN0IHNwcml0ZUJvdW5kaW5nQm94ID0gdGhpcy5fZ2V0U3ByaXRlRGltZW5zaW9ucygpXG4gICAgY29uc3Qgc3ByaXRlUG9zaXRpb24gPSBzcHJpdGUuZ2V0UG9zaXRpb24oKS5jbG9uZSgpXG4gICAgICAubXVsdGlwbHkob3V0cHV0RGltZW5zaW9ucylcblxuICAgIGNvbnN0IHJvdGF0aW9uID0gc3ByaXRlLmdldFJvdGF0aW9uKClcbiAgICBjb25zdCBzaW5Sb3RhdGlvbiA9IE1hdGguc2luKHJvdGF0aW9uKVxuICAgIGNvbnN0IGNvc1JvdGF0aW9uID0gTWF0aC5jb3Mocm90YXRpb24pXG5cbiAgICBjb25zdCBib3VuZHMgPSBuZXcgVmVjdG9yMihcbiAgICAgIE1hdGguYWJzKHNwcml0ZUJvdW5kaW5nQm94LnggKiBjb3NSb3RhdGlvbikgKyBNYXRoLmFicyhzcHJpdGVCb3VuZGluZ0JveC55ICogc2luUm90YXRpb24pLFxuICAgICAgTWF0aC5hYnMoc3ByaXRlQm91bmRpbmdCb3gueCAqIHNpblJvdGF0aW9uKSArIE1hdGguYWJzKHNwcml0ZUJvdW5kaW5nQm94LnkgKiBjb3NSb3RhdGlvbilcbiAgICApXG5cbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoXG4gICAgICBzcHJpdGVQb3NpdGlvbi54LFxuICAgICAgc3ByaXRlUG9zaXRpb24ueSAtIGJvdW5kcy55IC8gMiAtIDcwXG4gICAgKVxuICAgICAgLmNsYW1wKFxuICAgICAgICBuZXcgVmVjdG9yMig4MCwgMjApLFxuICAgICAgICBvdXRwdXREaW1lbnNpb25zLmNsb25lKCkuc3VidHJhY3QoODAsIDcwKVxuICAgICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIG92ZXJsYXkgY29udHJvbHNcbiAgICogQHJldHVybiB7UmVhY3QuQ29tcG9uZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlck92ZXJsYXlDb250cm9scyAoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLnNlbGVjdGVkKSByZXR1cm5cblxuICAgIHJldHVybiAoPENhbnZhc092ZXJsYXlDb250cm9sc0NvbXBvbmVudFxuICAgICAgdGFrZVRvRnJvbnRcbiAgICAgIGZsaXBIb3Jpem9udGFsbHk9eyEodGhpcy5wcm9wcy5zcHJpdGUgaW5zdGFuY2VvZiBUZXh0U3ByaXRlKSAmJiAhKHRoaXMucHJvcHMuc3ByaXRlIGluc3RhbmNlb2YgVGV4dERlc2lnblNwcml0ZSl9XG4gICAgICBkdXBsaWNhdGU9eyEodGhpcy5wcm9wcy5zcHJpdGUgaW5zdGFuY2VvZiBUZXh0RGVzaWduU3ByaXRlKX1cbiAgICAgIGRlbGV0ZVxuICAgICAgcG9zaXRpb249e3RoaXMuX2dldE92ZXJsYXlQb3NpdGlvbigpfVxuICAgICAgb25UYWtlVG9Gcm9udD17dGhpcy5fb25UYWtlVG9Gcm9udH1cbiAgICAgIG9uRmxpcEhvcml6b250YWxseT17dGhpcy5fb25GbGlwSG9yaXpvbnRhbGx5fVxuICAgICAgb25EdXBsaWNhdGU9e3RoaXMuX29uRHVwbGljYXRlfVxuICAgICAgb25EZWxldGU9e3RoaXMuX29uRGVsZXRlfVxuICAgIC8+KVxuICB9XG5cbiAgX2dldEl0ZW1Db250cm9sc1Byb3BzICgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgc2VsZWN0ZWQsIHNwcml0ZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgZWRpdGluZyB9ID0gdGhpcy5zdGF0ZVxuICAgIGNvbnN0IGNvbnRyb2xzQXNPdmVybGF5ID0gIWVkaXRpbmdcblxuICAgIGNvbnN0IGNvbnRyb2xzQ29udGVudCA9IFtcbiAgICAgIHRoaXMuX3JlbmRlcktub2JzKCksXG4gICAgICA8Um90YXRlQ29udHJvbCBrZXk9J3JvdGF0ZUNvbnRyb2xzJz5cbiAgICAgICAgPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgICAgIG9uU3RhcnQ9e3RoaXMuX29uUm90YXRlRHJhZ1N0YXJ0fVxuICAgICAgICAgIG9uRHJhZz17dGhpcy5fb25Sb3RhdGVEcmFnfVxuICAgICAgICAgIG9uU3RvcD17dGhpcy5fb25Sb3RhdGVEcmFnU3RvcH0+XG4gICAgICAgICAgPFJvdGF0ZUtub2IgLz5cbiAgICAgICAgPC9EcmFnZ2FibGVDb21wb25lbnQ+XG4gICAgICA8L1JvdGF0ZUNvbnRyb2w+XG4gICAgXVxuICAgIGNvbnN0IGl0ZW1Db250cm9sc1Byb3BzID0gdGhpcy5fZ2V0SXRlbUNvbnRyb2xzUHJvcHMoKVxuICAgIGNvbnN0IGl0ZW1Db250cm9scyA9ICg8SXRlbUNvbnRyb2xzXG4gICAgICBzdHlsZT17dGhpcy5fZ2V0Q29udGFpbmVyU3R5bGUoKX1cbiAgICAgIHsuLi5pdGVtQ29udHJvbHNQcm9wc30+XG4gICAgICB7Y29udHJvbHNDb250ZW50fVxuICAgIDwvSXRlbUNvbnRyb2xzPilcblxuICAgIHJldHVybiAoPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgb25TdGFydD17dGhpcy5fb25EcmFnU3RhcnR9XG4gICAgICBvblN0b3A9e3RoaXMuX29uRHJhZ1N0b3B9XG4gICAgICBvbkRyYWc9e3RoaXMuX29uRHJhZ31cbiAgICAgIGRpc2FibGVkPXt0aGlzLl9pc0RyYWdnaW5nRGlzYWJsZWQoKX0+XG4gICAgICA8T3V0ZXJDb250YWluZXJcbiAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfVxuICAgICAgICBkYXRhLXR5cGU9e3Nwcml0ZS5jb25zdHJ1Y3Rvci50eXBlfVxuICAgICAgICBkYXRhLXNlbGVjdGVkPXtzZWxlY3RlZH1cbiAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1zcHJpdGVJdGVtJyA6IHVuZGVmaW5lZCl9PlxuICAgICAgICB7dGhpcy5fcmVuZGVyT3ZlcmxheUNvbnRyb2xzKCl9XG4gICAgICAgIDxDb250YWluZXJcbiAgICAgICAgICBzdHlsZT17dGhpcy5fZ2V0Q29udGFpbmVyU3R5bGUoKX1cbiAgICAgICAgICBlZGl0aW5nPXtzZWxlY3RlZCAmJiBlZGl0aW5nfVxuICAgICAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2NvbnRhaW5lciA9IGVsIH19XG4gICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1jb250YWluZXInIDogdW5kZWZpbmVkKX0+XG4gICAgICAgICAgPENvbnRlbnQ+XG4gICAgICAgICAgICB7dGhpcy5fcmVuZGVyQ29udGVudCgpfVxuICAgICAgICAgIDwvQ29udGVudD5cbiAgICAgICAgICB7c2VsZWN0ZWQgJiYgIWNvbnRyb2xzQXNPdmVybGF5ICYmIGNvbnRyb2xzQ29udGVudH1cbiAgICAgICAgPC9Db250YWluZXI+XG4gICAgICAgIHtzZWxlY3RlZCAmJiBjb250cm9sc0FzT3ZlcmxheSAmJiBpdGVtQ29udHJvbHN9XG4gICAgICA8L091dGVyQ29udGFpbmVyPlxuICAgIDwvRHJhZ2dhYmxlQ29tcG9uZW50PilcbiAgfVxufVxuXG5jb25zdCBPdXRlckNvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuXG59KVxuXG5jb25zdCBDb250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG59LCB7XG4gIGVkaXRpbmc6IHtcbiAgICBib3JkZXI6IHRoZW1lID0+IGAycHggc29saWQgJHt0aGVtZS5jb250cm9sc091dGxpbmVDb2xvcn1gLFxuICAgIGJveFNoYWRvdzogJzAgMnB4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4yMCksIGluc2V0IDAgMnB4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4yMCknLFxuICAgIHpJbmRleDogdGhlbWUgPT4gdGhlbWUuekluZGV4KCdjb250cm9sc092ZXJsYXlzJykgKyAyXG4gIH1cbn0pXG5cbmNvbnN0IEl0ZW1Db250cm9scyA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ2NvbnRyb2xzT3ZlcmxheXMnKSArIDEsXG4gIGJvcmRlcjogdGhlbWUgPT4gYDJweCBzb2xpZCAke3RoZW1lLmNvbnRyb2xzT3V0bGluZUNvbG9yfWAsXG4gIGJveFNoYWRvdzogJzAgMnB4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4yMCksIGluc2V0IDAgMnB4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4yMCknLFxuICBjdXJzb3I6ICdtb3ZlJ1xufSlcblxuY29uc3QgQ29udGVudCA9IGFkb25pcy5kaXYoe30pXG5cbmNvbnN0IFJvdGF0ZUNvbnRyb2wgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvdHRvbTogJy0xOHB4JyxcbiAgbGVmdDogJzUwJScsXG4gIHdpZHRoOiAnMnB4JyxcbiAgaGVpZ2h0OiAnMTZweCcsXG4gIG1hcmdpbkxlZnQ6ICctMXB4JyxcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZSA9PiB0aGVtZS5jb250cm9sc091dGxpbmVDb2xvclxufSlcblxuY29uc3QgS25vYiA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcyNHB4JyxcbiAgaGVpZ2h0OiAnMjRweCcsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICAnOmJlZm9yZSc6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBiYWNrZ3JvdW5kOiAnd2hpdGUnLFxuICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgd2lkdGg6ICc4cHgnLFxuICAgIGhlaWdodDogJzhweCcsXG4gICAgbWFyZ2luTGVmdDogJy00cHgnLFxuICAgIG1hcmdpblRvcDogJy00cHgnLFxuICAgIHRvcDogJzUwJScsXG4gICAgbGVmdDogJzUwJScsXG4gICAgYm94U2hhZG93OiB0aGVtZSA9PiB0aGVtZS5kZWZhdWx0U2hhZG93XG4gIH1cbn0pXG5cbmNvbnN0IFJvdGF0ZUtub2IgPSBhZG9uaXMoS25vYikoe1xuICBtYXJnaW5MZWZ0OiAnLTExcHgnXG59KVxuXG5jb25zdCBDb3JuZXJLbm9iID0gYWRvbmlzKEtub2IpKHtcbiAgbWFyZ2luVG9wOiAnLTEzcHgnLFxuICBtYXJnaW5MZWZ0OiAnLTEzcHgnXG59LCB7XG4gICd0b3AtbGVmdCc6IHtcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBjdXJzb3I6ICdud3NlLXJlc2l6ZSdcbiAgfSxcbiAgJ3RvcC1yaWdodCc6IHtcbiAgICBtYXJnaW5MZWZ0OiAnYXV0bycsXG4gICAgbWFyZ2luUmlnaHQ6ICctMTNweCcsXG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGN1cnNvcjogJ25lc3ctcmVzaXplJ1xuICB9LFxuICAnYm90dG9tLWxlZnQnOiB7XG4gICAgbWFyZ2luVG9wOiAnYXV0bycsXG4gICAgbWFyZ2luQm90dG9tOiAnLTEzcHgnLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwLFxuICAgIGN1cnNvcjogJ25lc3ctcmVzaXplJ1xuICB9LFxuICAnYm90dG9tLXJpZ2h0Jzoge1xuICAgIG1hcmdpblRvcDogJ2F1dG8nLFxuICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICBtYXJnaW5Cb3R0b206ICctMTNweCcsXG4gICAgbWFyZ2luUmlnaHQ6ICctMTNweCcsXG4gICAgYm90dG9tOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGN1cnNvcjogJ253c2UtcmVzaXplJ1xuICB9XG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvc2hhcmVkL3Nwcml0ZXMvc3ByaXRlcy9pdGVtLWNvbXBvbmVudC5qc3giLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qc1xuLy8gbW9kdWxlIGlkID0gNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanNcbi8vIG1vZHVsZSBpZCA9IDU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qc1xuLy8gbW9kdWxlIGlkID0gNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qc1xuLy8gbW9kdWxlIGlkID0gNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanNcbi8vIG1vZHVsZSBpZCA9IDY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanNcbi8vIG1vZHVsZSBpZCA9IDY2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzXG4vLyBtb2R1bGUgaWQgPSA2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Rhc2suanNcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzXG4vLyBtb2R1bGUgaWQgPSA3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5pbXBvcnQgR29vZ2xlRm9udHNMb2FkZXIgZnJvbSAnLi9sb2FkZXJzL2dvb2dsZS1mb250LWxvYWRlcidcbmltcG9ydCBGaWxlRm9udHNMb2FkZXIgZnJvbSAnLi9sb2FkZXJzL2ZpbGUtZm9udC1sb2FkZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvbnRMb2FkZXIge1xuICBjb25zdHJ1Y3RvciAodWksIGZvbnRzKSB7XG4gICAgdGhpcy5fdWkgPSB1aVxuICAgIHRoaXMuX2ZvbnRzID0gZm9udHNcbiAgICB0aGlzLl9sb2FkZWRGb250cyA9IFtdXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZm9udHNcbiAgICogQHBhcmFtIHtGb250W119IGZvbnRzXG4gICAqL1xuICBzZXRGb250cyAoZm9udHMpIHtcbiAgICB0aGlzLl9mb250cyA9IGZvbnRzXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBmb250IGxvYWRlciBuZWVkcyB0byBsb2FkIHNvbWV0aGluZ1xuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgbmVlZHNUb0xvYWQgKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZm9udHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBwcm92aWRlclxuICAgICAgdGhpcy5fZm9udHNbaV0uZ2V0VmFyaWF0aW9ucygpXG4gICAgICAgIC5mb3JFYWNoKHZhcmlhdGlvbiA9PiB7XG4gICAgICAgICAgcHJvdmlkZXIgPSBwcm92aWRlciB8fCB2YXJpYXRpb24uZ2V0UHJvdmlkZXIoKVxuICAgICAgICB9KVxuICAgICAgaWYgKCFwcm92aWRlcikgY29udGludWVcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZm9udCBoYXMgYWxyZWFkeSBiZWVuIGxvYWRlZFxuICAgKiBAcGFyYW0gIHtGb250fSBmb250XG4gICAqL1xuICBmb250TG9hZGVkIChmb250KSB7XG4gICAgY29uc3QgaWRlbnRpZmllciA9IGZvbnQuZ2V0Rm9udEZhbWlseSgpXG4gICAgcmV0dXJuIHRoaXMuX2xvYWRlZEZvbnRzLmluZGV4T2YoaWRlbnRpZmllcikgIT09IC0xXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZ2l2ZW4gZm9udCB0byBsb2FkZWRcbiAgICogQHBhcmFtIHtGb250fSBmb250XG4gICAqL1xuICBzZXRGb250TG9hZGVkIChmb250KSB7XG4gICAgaWYgKCF0aGlzLmZvbnRMb2FkZWQoZm9udCkpIHtcbiAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSBmb250LmdldEZvbnRGYW1pbHkoKVxuICAgICAgdGhpcy5fbG9hZGVkRm9udHMucHVzaChpZGVudGlmaWVyKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgZ2l2ZW4gZm9udHNcbiAgICogQHBhcmFtICB7T2JqZWN0W119IGZvbnRzXG4gICAqL1xuICBsb2FkICgpIHtcbiAgICBjb25zdCBmb250cyA9IHRoaXMuX2ZvbnRzXG4gICAgY29uc3QgbG9hZGVycyA9IHtcbiAgICAgIGdvb2dsZTogbmV3IEdvb2dsZUZvbnRzTG9hZGVyKHRoaXMuX3VpKSxcbiAgICAgIGZpbGU6IG5ldyBGaWxlRm9udHNMb2FkZXIodGhpcy5fdWkpXG4gICAgfVxuXG4gICAgY29uc3QgZGlzcG9zZUxvYWRlcnMgPSAoKSA9PiB7XG4gICAgICBmb3IgKGxldCBpZGVudGlmaWVyIGluIGxvYWRlcnMpIHtcbiAgICAgICAgY29uc3QgbG9hZGVyID0gbG9hZGVyc1tpZGVudGlmaWVyXVxuICAgICAgICBsb2FkZXIuZGlzcG9zZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9udHNcbiAgICAgIC5maWx0ZXIoKGZvbnQpID0+ICF0aGlzLmZvbnRMb2FkZWQoZm9udCkpXG4gICAgICAuZm9yRWFjaCgoZm9udCkgPT4ge1xuICAgICAgICBmb250LmdldFZhcmlhdGlvbnMoKVxuICAgICAgICAgIC5mb3JFYWNoKHZhcmlhdGlvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IHZhcmlhdGlvbi5nZXRQcm92aWRlcigpXG4gICAgICAgICAgICBpZiAoIXByb3ZpZGVyKSByZXR1cm5cblxuICAgICAgICAgICAgY29uc3QgbG9hZGVyID0gbG9hZGVyc1twcm92aWRlcl1cbiAgICAgICAgICAgIGxvYWRlci5hZGQodmFyaWF0aW9uKVxuICAgICAgICAgIH0pXG4gICAgICB9KVxuXG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXVxuICAgIGZvciAobGV0IG5hbWUgaW4gbG9hZGVycykge1xuICAgICAgcHJvbWlzZXMucHVzaChsb2FkZXJzW25hbWVdLmxvYWQoKSlcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBkaXNwb3NlTG9hZGVycygpXG4gICAgICAgIGZvbnRzLmZvckVhY2goKGZvbnQpID0+IHtcbiAgICAgICAgICB0aGlzLnNldEZvbnRMb2FkZWQoZm9udClcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgIGRpc3Bvc2VMb2FkZXJzKClcbiAgICAgICAgdGhyb3cgZVxuICAgICAgfSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9saWIvZm9udC1sb2FkZXIvaW5kZXguanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCBQcmV2aW91c1NlcmlhbGl6ZXIgZnJvbSAnLi4vMS4wLjEvc2VyaWFsaXplcidcbmltcG9ydCBCbGVuZE1vZGVzIGZyb20gJy4vYmxlbmQtbW9kZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHYyMDBTZXJpYWxpemVyIGV4dGVuZHMgUHJldmlvdXNTZXJpYWxpemVyIHtcbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIHN0aWNrZXJcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uU3RpY2tlclNwcml0ZX0gc3ByaXRlXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVTdGlja2VyIChvcGVyYXRpb24sIHNwcml0ZSkge1xuICAgIGNvbnN0IGlucHV0RGltZW5zaW9ucyA9IG9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG4gICAgY29uc3QgcmVzcG9uc2UgPSBzdXBlci5fc2VyaWFsaXplU3RpY2tlcihvcGVyYXRpb24sIHNwcml0ZSlcblxuICAgIC8vIE5ldyBpbiAyLjAuMDogYHRpbnRDb2xvcmBcbiAgICBpZiAoc3ByaXRlLmdldFRpbnRNb2RlKCkgIT09ICdub25lJykge1xuICAgICAgcmVzcG9uc2Uub3B0aW9ucy50aW50Q29sb3IgPSBzcHJpdGUuc2VyaWFsaXplT3B0aW9uKCd0aW50Q29sb3InLCB0cnVlKVxuICAgIH1cblxuICAgIC8vIERpbWVuc2lvbnMgYXJlIHJlbGF0aXZlLCBub3QgYWJzb2x1dGUgYW55bW9yZVxuICAgIHJlc3BvbnNlLm9wdGlvbnMuZGltZW5zaW9ucyA9IHNwcml0ZS5nZXREaW1lbnNpb25zKCkuY2xvbmUoKS5kaXZpZGUoaW5wdXREaW1lbnNpb25zLm1pbigpKS50b09iamVjdCgpXG5cbiAgICAvLyBgbmFtZWAgaXMgbm93IGBpZGVudGlmaWVyYFxuICAgIHJlc3BvbnNlLm9wdGlvbnMuaWRlbnRpZmllciA9IHJlc3BvbnNlLm9wdGlvbnMubmFtZVxuICAgIGRlbGV0ZSByZXNwb25zZS5vcHRpb25zLm5hbWVcblxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIHBhdGhcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uQnJ1c2hTcHJpdGUuUGF0aH0gcGF0aFxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VyaWFsaXplUGF0aCAocGF0aCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gc3VwZXIuX3NlcmlhbGl6ZVBhdGgocGF0aClcblxuICAgIGNvbnN0IGJydXNoID0gcGF0aC5nZXRCcnVzaCgpXG4gICAgaWYgKGJydXNoLmhhc09wdGlvbignaGFyZG5lc3MnKSkge1xuICAgICAgcmVzcG9uc2UuaGFyZG5lc3MgPSBicnVzaC5nZXRPcHRpb24oJ2hhcmRuZXNzJylcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9uW119IG9wZXJhdGlvbnNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NlcmlhbGl6ZU9wZXJhdGlvbiAob3BlcmF0aW9uLCBvcGVyYXRpb25zKSB7XG4gICAgaWYgKG9wZXJhdGlvbi5jb25zdHJ1Y3Rvci5pZGVudGlmaWVyID09PSAnZnJhbWUnKSB7XG4gICAgICB0aGlzLl9zZXJpYWxpemVGcmFtZU9wZXJhdGlvbihvcGVyYXRpb24sIG9wZXJhdGlvbnMpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGlmIChvcGVyYXRpb24uY29uc3RydWN0b3IuaWRlbnRpZmllciA9PT0gJ292ZXJsYXknKSB7XG4gICAgICB0aGlzLl9zZXJpYWxpemVPdmVybGF5T3BlcmF0aW9uKG9wZXJhdGlvbiwgb3BlcmF0aW9ucylcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLl9zZXJpYWxpemVPcGVyYXRpb24ob3BlcmF0aW9uLCBvcGVyYXRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGZyYW1lIG9wZXJhdGlvblxuICAgKiBAcGFyYW0ge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbi5GcmFtZU9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9uW119IG9wZXJhdGlvbnNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVGcmFtZU9wZXJhdGlvbiAob3BlcmF0aW9uLCBvcGVyYXRpb25zKSB7XG4gICAgLy8gU2luY2Ugc2VyaWFsaXphdGlvbiAyLjAuMCBzdG9yZXMgZnJhbWVzIGFzIHBhcnQgb2YgdGhlIFNwcml0ZU9wZXJhdGlvbiwgd2UgbmVlZFxuICAgIC8vIHRvIGNoZWNrIGlmIGEgc3ByaXRlIG9wZXJhdGlvbiBpcyBwcmVzZW50IGFuZCBleHRlbmQgaXRzIGBzcHJpdGVzYCBvcHRpb25cbiAgICBjb25zdCBzcHJpdGVPcGVyYXRpb25zID0gb3BlcmF0aW9ucy5maWx0ZXIobyA9PiBvLnR5cGUgPT09ICdzcHJpdGUnKVxuICAgIGxldCBzcHJpdGVPcGVyYXRpb25cbiAgICBpZiAoc3ByaXRlT3BlcmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHNwcml0ZU9wZXJhdGlvbiA9IHNwcml0ZU9wZXJhdGlvbnMucG9wKClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm8gc3ByaXRlIG9wZXJhdGlvbiBleGlzdHMsIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgIHNwcml0ZU9wZXJhdGlvbiA9IHtcbiAgICAgICAgdHlwZTogJ3Nwcml0ZScsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBzcHJpdGVzOiBbXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvcGVyYXRpb25zLnB1c2goc3ByaXRlT3BlcmF0aW9uKVxuICAgIH1cblxuICAgIHNwcml0ZU9wZXJhdGlvbi5vcHRpb25zLnNwcml0ZXMucHVzaCh7XG4gICAgICB0eXBlOiAnZnJhbWUnLFxuICAgICAgb3B0aW9uczogdGhpcy5fZ2V0RnJhbWVPcHRpb25zKG9wZXJhdGlvbilcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIG92ZXJsYXkgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9uLk92ZXJsYXlPcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcGFyYW0ge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbltdfSBvcGVyYXRpb25zXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VyaWFsaXplT3ZlcmxheU9wZXJhdGlvbiAob3BlcmF0aW9uLCBvcGVyYXRpb25zKSB7XG4gICAgaWYgKCFvcGVyYXRpb24uZ2V0SWRlbnRpZmllcigpKSByZXR1cm5cblxuICAgIC8vIFNpbmNlIHNlcmlhbGl6YXRpb24gMi4wLjAgc3RvcmVzIG92ZXJsYXlzIGFzIHBhcnQgb2YgdGhlIFNwcml0ZU9wZXJhdGlvbiwgd2UgbmVlZFxuICAgIC8vIHRvIGNoZWNrIGlmIGEgc3ByaXRlIG9wZXJhdGlvbiBpcyBwcmVzZW50IGFuZCBleHRlbmQgaXRzIGBzcHJpdGVzYCBvcHRpb25cbiAgICBjb25zdCBzcHJpdGVPcGVyYXRpb25zID0gb3BlcmF0aW9ucy5maWx0ZXIobyA9PiBvLnR5cGUgPT09ICdzcHJpdGUnKVxuICAgIGxldCBzcHJpdGVPcGVyYXRpb25cbiAgICBpZiAoc3ByaXRlT3BlcmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHNwcml0ZU9wZXJhdGlvbiA9IHNwcml0ZU9wZXJhdGlvbnMucG9wKClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm8gc3ByaXRlIG9wZXJhdGlvbiBleGlzdHMsIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgIHNwcml0ZU9wZXJhdGlvbiA9IHtcbiAgICAgICAgdHlwZTogJ3Nwcml0ZScsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBzcHJpdGVzOiBbXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvcGVyYXRpb25zLnB1c2goc3ByaXRlT3BlcmF0aW9uKVxuICAgIH1cblxuICAgIHNwcml0ZU9wZXJhdGlvbi5vcHRpb25zLnNwcml0ZXMucHVzaCh7XG4gICAgICB0eXBlOiAnb3ZlcmxheScsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGlkZW50aWZpZXI6IG9wZXJhdGlvbi5nZXRJZGVudGlmaWVyKCksXG4gICAgICAgIGludGVuc2l0eTogb3BlcmF0aW9uLmdldEFscGhhKCksXG4gICAgICAgIGJsZW5kTW9kZTogQmxlbmRNb2Rlc1tvcGVyYXRpb24uZ2V0QmxlbmRNb2RlKCldXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvcHRpb25zIG9iamVjdCBmb3IgdGhlIGdpdmVuIEZyYW1lT3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuRnJhbWVPcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0RnJhbWVPcHRpb25zIChvcGVyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWRlbnRpZmllcjogb3BlcmF0aW9uLmdldEZyYW1lKCkuaWRlbnRpZmllclxuICAgIH1cbiAgfVxuXG4gIF9zZXJpYWxpemVPcmllbnRhdGlvbk9wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBzdXBlci5fc2VyaWFsaXplT3JpZW50YXRpb25PcGVyYXRpb24ob3BlcmF0aW9uKVxuXG4gICAgLy8gRm9yIHNvbWUgdW5rbm93biByZWFzb24sIHdlIHN0YXJ0IHRoaXMgXCJmaXJzdCByb3RhdGUsIHRoZW4gZmxpcFwiIHRoaW5nIHdpdGggMi4wLjBcbiAgICBpZiAocmVzcG9uc2Uub3B0aW9ucy5yb3RhdGlvbiA9PT0gOTAgfHwgcmVzcG9uc2Uub3B0aW9ucy5yb3RhdGlvbiA9PT0gMjcwKSB7XG4gICAgICByZXNwb25zZS5vcHRpb25zLmZsaXBIb3Jpem9udGFsbHkgPSAhcmVzcG9uc2Uub3B0aW9ucy5mbGlwSG9yaXpvbnRhbGx5XG4gICAgICByZXNwb25zZS5vcHRpb25zLmZsaXBWZXJ0aWNhbGx5ID0gIXJlc3BvbnNlLm9wdGlvbnMuZmxpcFZlcnRpY2FsbHlcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiB0cmFuc2Zvcm0gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbi5UcmFuc2Zvcm1PcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VyaWFsaXplVHJhbnNmb3JtT3BlcmF0aW9uIChvcGVyYXRpb24pIHtcbiAgICBjb25zdCB7IG9wZXJhdGlvbnMgfSA9IHRoaXMuX2VkaXRvclxuXG4gICAgLy8gVmVyc2lvbiAyLjAgYW5kIHVwIGhhcyBkaWZmZXJlbnQgb3BlcmF0aW9uIG9yZGVyOiBGaXJzdCB0cmFuc2Zvcm0sIHRoZW4gb3JpZW50YXRpb24uXG4gICAgaWYgKG9wZXJhdGlvbnMuZXhpc3RzKCdvcmllbnRhdGlvbicpKSB7XG4gICAgICAvLyBVcGRhdGluZyB0aGUgb3JpZ2luYWwgb3BlcmF0aW9uIHdpbGwgbWVzcyB1cCB0aGUgZWRpdG9yIHN0YXRlXG4gICAgICBvcGVyYXRpb24gPSBvcGVyYXRpb24uY2xvbmUoKVxuXG4gICAgICAvLyBVbmRvIG9yaWVudGF0aW9uIHRoYXQgaGFzIGJlZW4gYXBwbGllZCB0byB0aGUgdHJhbnNmb3Jtc1xuICAgICAgY29uc3Qgb3JpZW50YXRpb25PcGVyYXRpb24gPSBvcGVyYXRpb25zLmdldCgnb3JpZW50YXRpb24nKVxuICAgICAgb3BlcmF0aW9uLnJvdGF0ZSgtb3JpZW50YXRpb25PcGVyYXRpb24uZ2V0Um90YXRpb24oKSlcbiAgICAgIGlmIChvcmllbnRhdGlvbk9wZXJhdGlvbi5nZXRGbGlwVmVydGljYWxseSgpKSB7XG4gICAgICAgIG9wZXJhdGlvbi5mbGlwKCd2ZXJ0aWNhbCcpXG4gICAgICAgIG9wZXJhdGlvbi5zZXRSb3RhdGlvbihvcGVyYXRpb24uZ2V0Um90YXRpb24oKSAqIC0xKVxuICAgICAgfVxuICAgICAgaWYgKG9yaWVudGF0aW9uT3BlcmF0aW9uLmdldEZsaXBIb3Jpem9udGFsbHkoKSkge1xuICAgICAgICBvcGVyYXRpb24uZmxpcCgnaG9yaXpvbnRhbCcpXG4gICAgICAgIG9wZXJhdGlvbi5zZXRSb3RhdGlvbihvcGVyYXRpb24uZ2V0Um90YXRpb24oKSAqIC0xKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFZlcnNpb24gMi4wIGFuZCB1cDogQ3JvcCBvcGVyYXRpb24gaXMgbm93IGNhbGxlZCB0cmFuc2Zvcm0gb3BlcmF0aW9uXG4gICAgY29uc3QgcmVzcG9uc2UgPSBzdXBlci5fc2VyaWFsaXplVHJhbnNmb3JtT3BlcmF0aW9uKG9wZXJhdGlvbilcblxuICAgIHJlc3BvbnNlLnR5cGUgPSAndHJhbnNmb3JtJ1xuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIHRleHQgc3ByaXRlXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlRleHRTcHJpdGV9IHNwcml0ZVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VyaWFsaXplVGV4dCAob3BlcmF0aW9uLCBzcHJpdGUpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IHN1cGVyLl9zZXJpYWxpemVUZXh0KG9wZXJhdGlvbiwgc3ByaXRlKVxuXG4gICAgY29uc3QgaW5wdXREaW1lbnNpb25zID0gb3BlcmF0aW9uLmdldElucHV0RGltZW5zaW9ucyhmYWxzZSlcbiAgICByZXNwb25zZS5vcHRpb25zLmZvbnRJZGVudGlmaWVyID0gc3ByaXRlLmdldEZvbnRJZGVudGlmaWVyKClcblxuICAgIC8vIEZvciB3aGF0ZXZlciByZWFzb24sIG1heCB3aWR0aCBpcyByZWxhdGl2ZSB0byBzaG9ydGVzdCBzaWRlLCB3aGlsZSBmb250IHNpemUgaXNuJ3RcbiAgICByZXNwb25zZS5vcHRpb25zLm1heFdpZHRoID0gcmVzcG9uc2Uub3B0aW9ucy5tYXhXaWR0aCAqIGlucHV0RGltZW5zaW9ucy54IC8gaW5wdXREaW1lbnNpb25zLm1pbigpXG4gICAgZGVsZXRlIHJlc3BvbnNlLm9wdGlvbnMuZm9udEZhbWlseVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gZmlsdGVyIG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLkZpbHRlck9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVGaWx0ZXJPcGVyYXRpb24gKG9wZXJhdGlvbikge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gc3VwZXIuX3NlcmlhbGl6ZUZpbHRlck9wZXJhdGlvbihvcGVyYXRpb24pXG4gICAgaWYgKCFyZXNwb25zZSkgcmV0dXJuIG51bGxcblxuICAgIHJlc3BvbnNlLm9wdGlvbnMuaWRlbnRpZmllciA9IHJlc3BvbnNlLm9wdGlvbnMubmFtZVxuICAgIGRlbGV0ZSByZXNwb25zZS5vcHRpb25zLm5hbWVcblxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIHJhZGlhbCBmb2N1cyBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5SYWRpYWxGb2N1c09wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVSYWRpYWxGb2N1c09wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBzdXBlci5fc2VyaWFsaXplUmFkaWFsRm9jdXNPcGVyYXRpb24ob3BlcmF0aW9uKVxuXG4gICAgY29uc3QgZm9jdXNPcHRpb25zID0gcmVzcG9uc2Uub3B0aW9ucy5vcHRpb25zXG4gICAgZm9jdXNPcHRpb25zLnN0YXJ0ID0gZm9jdXNPcHRpb25zLnBvc2l0aW9uXG4gICAgZGVsZXRlIGZvY3VzT3B0aW9ucy5wb3NpdGlvblxuICAgIGZvY3VzT3B0aW9ucy5lbmQgPSB7XG4gICAgICB4OiBmb2N1c09wdGlvbnMuc3RhcnQueCArIGZvY3VzT3B0aW9ucy5yYWRpdXMsXG4gICAgICB5OiBmb2N1c09wdGlvbnMuc3RhcnQueVxuICAgIH1cbiAgICBkZWxldGUgZm9jdXNPcHRpb25zLnJhZGl1c1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cbn1cblxudjIwMFNlcmlhbGl6ZXIudmVyc2lvbiA9ICcyLjAuMCdcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL3NlcmlhbGl6YXRpb24vMi4wLjAvc2VyaWFsaXplci5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgVmVjdG9yMiwgQ29sb3IsIFNESywgTG9nLCBTREtVdGlscyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgUHJldmlvdXNEZXNlcmlhbGl6ZXIgZnJvbSAnLi4vMS4wLjEvZGVzZXJpYWxpemVyJ1xuaW1wb3J0IEZyYW1lTWFuYWdlciBmcm9tICdzaGFyZWQvbWFuYWdlcnMvZnJhbWUtbWFuYWdlcidcbmltcG9ydCBPdmVybGF5TWFuYWdlciBmcm9tICdzaGFyZWQvbWFuYWdlcnMvb3ZlcmxheS1tYW5hZ2VyJ1xuaW1wb3J0IFN0aWNrZXJNYW5hZ2VyIGZyb20gJ3NoYXJlZC9tYW5hZ2Vycy9zdGlja2VyLW1hbmFnZXInXG5cbmltcG9ydCBGcmFtZSBmcm9tICdsaWIvZnJhbWUnXG5pbXBvcnQgRm9udExvYWRlciBmcm9tICdsaWIvZm9udC1sb2FkZXInXG5pbXBvcnQgSW1hZ2VMb2FkZXIgZnJvbSAnc2hhcmVkL2xvYWRlcnMvaW1hZ2UtbG9hZGVyJ1xuaW1wb3J0IEJsZW5kTW9kZXMgZnJvbSAnLi9ibGVuZC1tb2RlcydcblxuY29uc3QgYmxlbmRNb2RlQnlOYW1lID0gU0RLVXRpbHMuZmxpcE9iamVjdChCbGVuZE1vZGVzKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB2MjAwRGVzZXJpYWxpemVyIGV4dGVuZHMgUHJldmlvdXNEZXNlcmlhbGl6ZXIge1xuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9mcmFtZU1hbmFnZXIgPSBuZXcgRnJhbWVNYW5hZ2VyKHRoaXMuX3VpLCB0aGlzLl9nZXRPcHRpb25zKCdmcmFtZScpKVxuXG4gICAgY29uc3Qgb3ZlcmxheU9wdGlvbnMgPSB0aGlzLl9nZXRPcHRpb25zKCdvdmVybGF5JylcbiAgICBpZiAob3ZlcmxheU9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX292ZXJsYXlNYW5hZ2VyID0gbmV3IE92ZXJsYXlNYW5hZ2VyKHRoaXMuX3VpLCBvdmVybGF5T3B0aW9ucylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBzcHJpdGVcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb259IHNwcml0ZU9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5TcHJpdGV9IHNwcml0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplU3ByaXRlIChzcHJpdGVPcGVyYXRpb24sIHNwcml0ZSkge1xuICAgIGlmIChzcHJpdGUudHlwZSA9PT0gJ2ZyYW1lJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2Rlc2VyaWFsaXplRnJhbWUoc3ByaXRlT3BlcmF0aW9uLCBzcHJpdGUpXG4gICAgfVxuICAgIGlmIChzcHJpdGUudHlwZSA9PT0gJ292ZXJsYXknKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVzZXJpYWxpemVPdmVybGF5KHNwcml0ZU9wZXJhdGlvbiwgc3ByaXRlKVxuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuX2Rlc2VyaWFsaXplU3ByaXRlKHNwcml0ZU9wZXJhdGlvbiwgc3ByaXRlKVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGVzZXJpYWxpemVPcGVyYXRpb24gKG9wZXJhdGlvbikge1xuICAgIGlmIChvcGVyYXRpb24udHlwZSA9PT0gJ3RyYW5zZm9ybScpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kZXNlcmlhbGl6ZVRyYW5zZm9ybU9wZXJhdGlvbihvcGVyYXRpb24pXG4gICAgfVxuICAgIHJldHVybiBzdXBlci5fZGVzZXJpYWxpemVPcGVyYXRpb24ob3BlcmF0aW9uKVxuICB9XG5cbiAgX2Rlc2VyaWFsaXplT3JpZW50YXRpb25PcGVyYXRpb24gKG9wZXJhdGlvbkRhdGEpIHtcbiAgICBpZiAob3BlcmF0aW9uRGF0YS5vcHRpb25zLnJvdGF0aW9uID09PSA5MCB8fCBvcGVyYXRpb25EYXRhLm9wdGlvbnMucm90YXRpb24gPT09IDI3MCkge1xuICAgICAgb3BlcmF0aW9uRGF0YS5vcHRpb25zLmZsaXBIb3Jpem9udGFsbHkgPSAhb3BlcmF0aW9uRGF0YS5vcHRpb25zLmZsaXBIb3Jpem9udGFsbHlcbiAgICAgIG9wZXJhdGlvbkRhdGEub3B0aW9ucy5mbGlwVmVydGljYWxseSA9ICFvcGVyYXRpb25EYXRhLm9wdGlvbnMuZmxpcFZlcnRpY2FsbHlcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuX2Rlc2VyaWFsaXplT3JpZW50YXRpb25PcGVyYXRpb24ob3BlcmF0aW9uRGF0YSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIHRyYW5zZm9ybSBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBvcGVyYXRpb25EYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGVzZXJpYWxpemVUcmFuc2Zvcm1PcGVyYXRpb24gKG9wZXJhdGlvbkRhdGEpIHtcbiAgICAvLyBWZXJzaW9uIDIuMCBhbmQgdXA6IENyb3Agb3BlcmF0aW9uIGlzIG5vdyBjYWxsZWQgdHJhbnNmb3JtIG9wZXJhdGlvblxuICAgIHJldHVybiBzdXBlci5fZGVzZXJpYWxpemVDcm9wT3BlcmF0aW9uKG9wZXJhdGlvbkRhdGEpXG4gICAgICAudGhlbihvcGVyYXRpb24gPT4ge1xuICAgICAgICBpZiAoIW9wZXJhdGlvbikgcmV0dXJuXG5cbiAgICAgICAgbGV0IG9yaWVudGF0aW9uRGF0YSA9IFNES1V0aWxzLkFycmF5LmZpbmQodGhpcy5fZGF0YS5vcGVyYXRpb25zLCBvcCA9PiBvcC50eXBlID09PSAnb3JpZW50YXRpb24nKVxuICAgICAgICBpZiAob3JpZW50YXRpb25EYXRhKSB7XG4gICAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSBvcmllbnRhdGlvbkRhdGFcbiAgICAgICAgICBsZXQgeyByb3RhdGlvbiwgZmxpcEhvcml6b250YWxseSwgZmxpcFZlcnRpY2FsbHkgfSA9IG9wdGlvbnNcblxuICAgICAgICAgIGlmIChyb3RhdGlvbiA9PT0gOTAgfHwgcm90YXRpb24gPT09IDI3MCkge1xuICAgICAgICAgICAgaWYgKCghZmxpcEhvcml6b250YWxseSAmJiBmbGlwVmVydGljYWxseSkgfHwgKGZsaXBIb3Jpem9udGFsbHkgJiYgIWZsaXBWZXJ0aWNhbGx5KSkge1xuICAgICAgICAgICAgICBmbGlwSG9yaXpvbnRhbGx5ID0gIWZsaXBIb3Jpem9udGFsbHlcbiAgICAgICAgICAgICAgZmxpcFZlcnRpY2FsbHkgPSAhZmxpcFZlcnRpY2FsbHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvcGVyYXRpb24ucm90YXRlKG9wdGlvbnMucm90YXRpb24pXG4gICAgICAgICAgaWYgKGZsaXBIb3Jpem9udGFsbHkpIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbi5mbGlwKCdob3Jpem9udGFsJylcbiAgICAgICAgICAgIG9wZXJhdGlvbi5zZXRSb3RhdGlvbihvcGVyYXRpb24uZ2V0Um90YXRpb24oKSAqIC0xKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZmxpcFZlcnRpY2FsbHkpIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbi5mbGlwKCd2ZXJ0aWNhbCcpXG4gICAgICAgICAgICBvcGVyYXRpb24uc2V0Um90YXRpb24ob3BlcmF0aW9uLmdldFJvdGF0aW9uKCkgKiAtMSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3BlcmF0aW9uXG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gZnJhbWUgc3ByaXRlXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9ufSBzcHJpdGVPcGVyYXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBmcmFtZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplRnJhbWUgKHNwcml0ZU9wZXJhdGlvbiwgZnJhbWUpIHtcbiAgICBjb25zdCB7IGlkZW50aWZpZXIgfSA9IGZyYW1lLm9wdGlvbnNcblxuICAgIGNvbnN0IGZyYW1lRGF0YSA9IHRoaXMuX2ZyYW1lTWFuYWdlci5nZXRGcmFtZUJ5SWRlbnRpZmllcihpZGVudGlmaWVyKVxuICAgIGlmICghZnJhbWVEYXRhKSB7XG4gICAgICBMb2cud2FybignRGVzZXJpYWxpemVyJywgYFVua25vd24gZnJhbWUgXFxgJHtpZGVudGlmaWVyfVxcYC4gU2tpcHBpbmcgZnJhbWUuYClcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgIH1cbiAgICBjb25zdCBmcmFtZUluc3RhbmNlID0gbmV3IEZyYW1lKHRoaXMuX3VpLCBmcmFtZURhdGEpXG4gICAgcmV0dXJuIGZyYW1lSW5zdGFuY2UubG9hZCgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuX2VkaXRvci5vcGVyYXRpb25zLmdldE9yQ3JlYXRlKCdmcmFtZScsIHtcbiAgICAgICAgICBmcmFtZTogZnJhbWVJbnN0YW5jZS5nZXRGcmFtZSgpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gb3ZlcmxheSBzcHJpdGVcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb259IHNwcml0ZU9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG92ZXJsYXlcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXNlcmlhbGl6ZU92ZXJsYXkgKHNwcml0ZU9wZXJhdGlvbiwgb3ZlcmxheSkge1xuICAgIGNvbnN0IHsgYmxlbmRNb2RlLCBpbnRlbnNpdHksIGlkZW50aWZpZXIgfSA9IG92ZXJsYXkub3B0aW9uc1xuXG4gICAgY29uc3Qgb3ZlcmxheURhdGEgPSB0aGlzLl9vdmVybGF5TWFuYWdlci5nZXRPdmVybGF5QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpXG4gICAgaWYgKCFvdmVybGF5RGF0YSkge1xuICAgICAgTG9nLndhcm4oJ0Rlc2VyaWFsaXplcicsIGBVbmtub3duIG92ZXJsYXkgXFxgJHtpZGVudGlmaWVyfVxcYC4gU2tpcHBpbmcgb3ZlcmxheS5gKVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgfVxuXG4gICAgY29uc3Qgb3ZlcmxheVBhdGggPSB0aGlzLl9lZGl0b3IuZ2V0VUkoKS5nZXRBc3NldFBhdGgob3ZlcmxheURhdGEuaW1hZ2UpXG4gICAgcmV0dXJuIEltYWdlTG9hZGVyLmxvYWQob3ZlcmxheVBhdGgpXG4gICAgICAudGhlbihpbWFnZSA9PiB7XG4gICAgICAgIHRoaXMuX2VkaXRvci5vcGVyYXRpb25zLmdldE9yQ3JlYXRlKCdvdmVybGF5Jywge1xuICAgICAgICAgIGFscGhhOiBpbnRlbnNpdHksXG4gICAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgICBibGVuZE1vZGU6IHBhcnNlSW50KGJsZW5kTW9kZUJ5TmFtZVtibGVuZE1vZGUgfHwgb3ZlcmxheURhdGEuYmxlbmRNb2RlXSwgMTApLFxuICAgICAgICAgIGltYWdlXG4gICAgICAgIH0pXG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBicnVzaCBmYWNlIHdpdGggdGhlIGdpdmVuIG9wdGlvbnNcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uU3ByaXRlcy5CcnVzaFNwcml0ZS5QYXRofSBwYXRoXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlNwcml0ZXMuQnJ1c2hTcHJpdGUuQnJ1c2h9XG4gICAqL1xuICBfY3JlYXRlQnJ1c2hGb3JQYXRoIChwYXRoKSB7XG4gICAgY29uc3QgYnJ1c2ggPSBzdXBlci5fY3JlYXRlQnJ1c2hGb3JQYXRoKHBhdGgpXG4gICAgaWYgKHR5cGVvZiBwYXRoLmhhcmRuZXNzICE9PSAndW5kZWZpbmVkJyAmJiBicnVzaC5oYXNPcHRpb24oJ2hhcmRuZXNzJykpIHtcbiAgICAgIGJydXNoLnNldEhhcmRuZXNzKHBhdGguaGFyZG5lc3MpXG4gICAgfVxuICAgIHJldHVybiBicnVzaFxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gc3RpY2tlciBmb3IgdGhlIGdpdmVuIG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge09iamVjdH0gc3ByaXRlXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlN0aWNrZXJTcHJpdGV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGVzZXJpYWxpemVTdGlja2VyIChvcGVyYXRpb24sIHNwcml0ZSkge1xuICAgIGNvbnN0IHsgU3ByaXRlT3BlcmF0aW9uIH0gPSBTREsuT3BlcmF0aW9uc1xuXG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSBzcHJpdGVcbiAgICBjb25zdCBzdGlja2VyID0gdGhpcy5fc3RpY2tlck1hbmFnZXIuZ2V0U3RpY2tlckJ5SWRlbnRpZmllcihvcHRpb25zLmlkZW50aWZpZXIpXG4gICAgY29uc3QgdXJsID0gU3RpY2tlck1hbmFnZXIuZ2V0VVJMRm9yU3RpY2tlcihzdGlja2VyLCAnYmFzZScpXG4gICAgaWYgKCFzdGlja2VyKSB7XG4gICAgICBMb2cud2FybignRGVzZXJpYWxpemVyJywgYFVua25vd24gc3RpY2tlciBcXGAke29wdGlvbnMuaWRlbnRpZmllcn1cXGAuIFNraXBwaW5nIHNwcml0ZS5gKVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgfVxuICAgIGNvbnN0IGlucHV0RGltZW5zaW9ucyA9IG9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGltYWdlID0gbmV3IHdpbmRvdy5JbWFnZSgpXG4gICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBhZGp1c3RtZW50cyA9IFNwcml0ZU9wZXJhdGlvbi5TdGlja2VyU3ByaXRlLnByb3RvdHlwZS5hdmFpbGFibGVPcHRpb25zLmFkanVzdG1lbnRzLnN0cnVjdHVyZVxuICAgICAgICBjb25zdCB7IHJvdGF0aW9uLCBmbGlwSG9yaXpvbnRhbGx5LCBmbGlwVmVydGljYWxseSB9ID0gb3B0aW9uc1xuICAgICAgICBjb25zdCBzdGlja2VyT3B0aW9ucyA9IHtcbiAgICAgICAgICBpZGVudGlmaWVyOiBvcHRpb25zLmlkZW50aWZpZXIsXG4gICAgICAgICAgaW1hZ2UsXG4gICAgICAgICAgcG9zaXRpb246IFZlY3RvcjIuZnJvbU9iamVjdChvcHRpb25zLnBvc2l0aW9uKSxcbiAgICAgICAgICBkaW1lbnNpb25zOiBWZWN0b3IyLmZyb21PYmplY3Qob3B0aW9ucy5kaW1lbnNpb25zKS5tdWx0aXBseShpbnB1dERpbWVuc2lvbnMubWluKCkpLFxuICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgIGZsaXBIb3Jpem9udGFsbHksXG4gICAgICAgICAgZmxpcFZlcnRpY2FsbHksXG4gICAgICAgICAgYWRqdXN0bWVudHM6IHt9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYWRqdXN0bWVudHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgWydicmlnaHRuZXNzJywgJ2NvbnRyYXN0JywgJ3NhdHVyYXRpb24nXS5mb3JFYWNoKG9wdGlvbiA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYWRqdXN0bWVudHNbb3B0aW9uXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgc3RpY2tlck9wdGlvbnMuYWRqdXN0bWVudHNbb3B0aW9uXSA9IG9wdGlvbnMuYWRqdXN0bWVudHNbb3B0aW9uXSArIGFkanVzdG1lbnRzW29wdGlvbl0uZGVmYXVsdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMudGludENvbG9yICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygc3RpY2tlci50aW50TW9kZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzdGlja2VyT3B0aW9ucy50aW50Q29sb3IgPSBDb2xvci5mcm9tQXJyYXkob3B0aW9ucy50aW50Q29sb3IpXG4gICAgICAgICAgc3RpY2tlck9wdGlvbnMudGludE1vZGUgPSBzdGlja2VyLnRpbnRNb2RlXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShvcGVyYXRpb24uY3JlYXRlU3RpY2tlcihzdGlja2VyT3B0aW9ucykpXG4gICAgICB9KVxuICAgICAgaW1hZ2UuY3Jvc3NPcmlnaW4gPSB0aGlzLl9lZGl0b3IuZ2V0Q3Jvc3NPcmlnaW4oKVxuICAgICAgaW1hZ2Uuc3JjID0gdGhpcy5fZWRpdG9yLmdldFVJKCkuZ2V0QXNzZXRQYXRoKHVybClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gZmlsdGVyIG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wZXJhdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplRmlsdGVyT3BlcmF0aW9uIChvcGVyYXRpb24pIHtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IG9wZXJhdGlvblxuXG4gICAgaWYgKCF0aGlzLl9maWx0ZXJNYW5hZ2VyLmdldEZpbHRlckJ5SWRlbnRpZmllcihvcHRpb25zLmlkZW50aWZpZXIpKSB7XG4gICAgICBMb2cud2FybignRGVzZXJpYWxpemVyJywgYFVua25vd24gZmlsdGVyIFxcYCR7b3B0aW9ucy5pZGVudGlmaWVyfVxcYGApXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmlsdGVyTWFuYWdlci5pbnN0YW50aWF0ZUZpbHRlcldpdGhJZGVudGlmaWVyKG9wdGlvbnMuaWRlbnRpZmllcilcbiAgICAgIC50aGVuKGZpbHRlciA9PiB7XG4gICAgICAgIGNvbnN0IGZpbHRlck9wZXJhdGlvbiA9IHRoaXMuX2VkaXRvci5vcGVyYXRpb25zLmdldE9yQ3JlYXRlKCdmaWx0ZXInKVxuICAgICAgICBpZiAoIWZpbHRlck9wZXJhdGlvbikgcmV0dXJuXG4gICAgICAgIGZpbHRlck9wZXJhdGlvbi5zZXQoe1xuICAgICAgICAgIGlkZW50aWZpZXI6IG9wdGlvbnMuaWRlbnRpZmllcixcbiAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgaW50ZW5zaXR5OiBvcHRpb25zLmludGVuc2l0eVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gZmlsdGVyT3BlcmF0aW9uXG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gZm9jdXMgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge09iamVjdH0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGVzZXJpYWxpemVGb2N1c09wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgY29uc3QgeyBvcHRpb25zLCB0eXBlIH0gPSBvcGVyYXRpb24ub3B0aW9uc1xuICAgIGlmICh0eXBlICE9PSAncmFkaWFsJykgcmV0dXJuIHN1cGVyLl9kZXNlcmlhbGl6ZUZvY3VzT3BlcmF0aW9uKG9wZXJhdGlvbilcblxuICAgIGNvbnN0IHsgc3RhcnQsIGVuZCwgZ3JhZGllbnRSYWRpdXMsIGJsdXJSYWRpdXMgfSA9IG9wdGlvbnNcbiAgICBjb25zdCByYWRpdXMgPSBWZWN0b3IyLmZyb21PYmplY3QoZW5kKVxuICAgICAgLnN1YnRyYWN0KFxuICAgICAgICBWZWN0b3IyLmZyb21PYmplY3Qoc3RhcnQpXG4gICAgICApLmxlbigpXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9lZGl0b3Iub3BlcmF0aW9ucy5nZXRPckNyZWF0ZSgncmFkaWFsLWZvY3VzJywge1xuICAgICAgcG9zaXRpb246IFZlY3RvcjIuZnJvbU9iamVjdChzdGFydCksXG4gICAgICByYWRpdXMsXG4gICAgICBncmFkaWVudFJhZGl1cyxcbiAgICAgIGJsdXJSYWRpdXNcbiAgICB9KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIHRleHQgZm9yIHRoZSBnaXZlbiBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtPYmplY3R9IHRleHRcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uVGV4dFNwcml0ZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXNlcmlhbGl6ZVRleHQgKG9wZXJhdGlvbiwgdGV4dCkge1xuICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGV4dFxuICAgIGNvbnN0IHsgZm9udFNpemUsIGxpbmVIZWlnaHQsIGZvbnRJZGVudGlmaWVyLCBhbGlnbm1lbnQsIHJvdGF0aW9uLCBtYXhXaWR0aCwgY29sb3IsIGJhY2tncm91bmRDb2xvciB9ID0gb3B0aW9uc1xuXG4gICAgY29uc3QgZm9udExvYWRlciA9IG5ldyBGb250TG9hZGVyKHRoaXMuX3VpKVxuICAgIGxldCB2YXJpYXRpb24gPSB0aGlzLl9mb250TWFuYWdlci5nZXRWYXJpYXRpb25CeUlkZW50aWZpZXIoZm9udElkZW50aWZpZXIpXG4gICAgaWYgKCF2YXJpYXRpb24pIHtcbiAgICAgIHZhcmlhdGlvbiA9IHRoaXMuX2ZvbnRNYW5hZ2VyLmdldERlZmF1bHRGb250KClcbiAgICB9IGVsc2Uge1xuICAgICAgZm9udExvYWRlci5zZXRGb250cyhbdmFyaWF0aW9uLmdldEZvbnQoKV0pXG4gICAgfVxuICAgIHJldHVybiBmb250TG9hZGVyLmxvYWQoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zdCBpbnB1dERpbWVuc2lvbnMgPSBvcGVyYXRpb24uZ2V0SW5wdXREaW1lbnNpb25zKGZhbHNlKVxuXG4gICAgICAgIC8vIEZvciB3aGF0ZXZlciByZWFzb24sIG1heCB3aWR0aCBpcyByZWxhdGl2ZSB0byBzaG9ydGVzdCBzaWRlLCB3aGlsZSBmb250IHNpemUgaXNuJ3RcbiAgICAgICAgY29uc3QgZml4ZWRNYXhXaWR0aCA9IG1heFdpZHRoICogaW5wdXREaW1lbnNpb25zLm1pbigpIC8gaW5wdXREaW1lbnNpb25zLnhcbiAgICAgICAgcmV0dXJuIG9wZXJhdGlvbi5jcmVhdGVUZXh0KHtcbiAgICAgICAgICBmb250U2l6ZSxcbiAgICAgICAgICBsaW5lSGVpZ2h0LFxuICAgICAgICAgIGZvbnRGYW1pbHk6IHZhcmlhdGlvbi5nZXRGb250RmFtaWx5KCksXG4gICAgICAgICAgZm9udFdlaWdodDogdmFyaWF0aW9uLmdldEZvbnRXZWlnaHQoKSxcbiAgICAgICAgICBmb250SWRlbnRpZmllcjogdmFyaWF0aW9uLmdldElkZW50aWZpZXIoKSxcbiAgICAgICAgICBhbGlnbm1lbnQsXG4gICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgbWF4V2lkdGg6IGZpeGVkTWF4V2lkdGgsXG4gICAgICAgICAgdGV4dDogb3B0aW9ucy50ZXh0LFxuICAgICAgICAgIGNvbG9yOiBDb2xvci5mcm9tQXJyYXkoY29sb3IpLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3IuZnJvbUFycmF5KGJhY2tncm91bmRDb2xvciksXG4gICAgICAgICAgcG9zaXRpb246IFZlY3RvcjIuZnJvbU9iamVjdChvcHRpb25zLnBvc2l0aW9uKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgfVxufVxuXG52MjAwRGVzZXJpYWxpemVyLnZlcnNpb24gPSAnMi4wLjAnXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzIuMC4wL2Rlc2VyaWFsaXplci5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgU0RLLCBTREtVdGlscyB9IGZyb20gJ2dsb2JhbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHREZXNpZ25NYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IgKHVpLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLl91aSA9IHVpXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnNcblxuICAgIHRoaXMuX2RlZmF1bHRMYXlvdXRzID0gU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlRleHREZXNpZ25TcHJpdGUuTGF5b3V0c1xuICAgIHRoaXMuX2xheW91dHMgPSBbXVxuICAgIHRoaXMuX2luaXQoKVxuICB9XG5cbiAgX2luaXQgKCkge1xuICAgIGNvbnN0IGF2YWlsYWJsZUxheW91dHMgPSB0aGlzLl9vcHRpb25zLmF2YWlsYWJsZUxheW91dHNcblxuICAgIHRoaXMuX2xheW91dHMgPSBPYmplY3Qua2V5cyh0aGlzLl9kZWZhdWx0TGF5b3V0cykubWFwKGsgPT4gKHtcbiAgICAgIGlkZW50aWZpZXI6IHRoaXMuX2RlZmF1bHRMYXlvdXRzW2tdLmlkZW50aWZpZXIsXG4gICAgICBsYXlvdXQ6IHRoaXMuX2RlZmF1bHRMYXlvdXRzW2tdXG4gICAgfSkpXG5cbiAgICBpZiAoYXZhaWxhYmxlTGF5b3V0cykge1xuICAgICAgdGhpcy5fbGF5b3V0cyA9IHRoaXMuX2xheW91dHMuZmlsdGVyKGl0ZW0gPT4gYXZhaWxhYmxlTGF5b3V0cy5pbmRleE9mKGl0ZW0uaWRlbnRpZmllcikgPj0gMClcbiAgICB9XG4gIH1cblxuICBnZXRMYXlvdXRCeUlkZW50aWZpZXIgKGlkZW50aWZpZXIpIHtcbiAgICBsZXQgaXRlbSA9IFNES1V0aWxzLkFycmF5LmZpbmQodGhpcy5fbGF5b3V0cywgbCA9PiBsLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpXG4gICAgcmV0dXJuIGl0ZW0gJiYgaXRlbS5sYXlvdXRcbiAgfVxuXG4gIGdldExheW91dHMgKCkge1xuICAgIHJldHVybiBbLi4udGhpcy5fbGF5b3V0c11cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvbWFuYWdlcnMvdGV4dC1kZXNpZ24tbWFuYWdlci5qcyIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIFByb3BUeXBlcywgYWRvbmlzLCBDb25zdGFudHMsIFV0aWxzLCBSZWN0YW5nbGUsIFZlY3RvcjIsIHJlcXVlc3RBbmltYXRpb25GcmFtZSB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgU2hhcmVkU3RhdGVDb21wb25lbnQgZnJvbSAnLi9zaGFyZWQtc3RhdGUtY29tcG9uZW50J1xuaW1wb3J0IENhbnZhc0hlYWRlckNvbnRyb2xzQ29tcG9uZW50IGZyb20gJy4vY2FudmFzLWhlYWRlci1jb250cm9scy1jb21wb25lbnQnXG5pbXBvcnQgRHJhZ2dhYmxlQ29tcG9uZW50IGZyb20gJ2NvbXBvbmVudHMvZHJhZ2dhYmxlLWNvbXBvbmVudCdcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhc0NvbnRyb2xzQ29tcG9uZW50IGV4dGVuZHMgU2hhcmVkU3RhdGVDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gU2hhcmVkU3RhdGVDb21wb25lbnQuY29udGV4dFR5cGVzXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgb3B0aW9uczogUHJvcFR5cGVzLm9iamVjdFxuICB9XG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fbmVlZHNTdHlsZUZpeGVzID0gdHJ1ZVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25ab29tJyxcbiAgICAgICdfb25ab29tRG9uZScsXG4gICAgICAnX29uQ2FudmFzRHJhZycsXG4gICAgICAnX29uQ2FudmFzRHJhZ1N0YXJ0JyxcbiAgICAgICdfb25DYW52YXNEcmFnU3RvcCcsXG4gICAgICAnX29uQ2FudmFzQ2xpY2snLFxuICAgICAgJ19vbkNhbnZhc0NsaWNrRGlzYWJsZWQnLFxuICAgICAgJ19vbkNhbnZhc0NsaWNrRW5hYmxlZCdcbiAgICApXG5cbiAgICB0aGlzLl9pbml0aWFsUmVyZW5kZXIgPSB0cnVlXG5cbiAgICB0aGlzLl9ldmVudHMgPSB7XG4gICAgICBbQ29uc3RhbnRzLkVWRU5UUy5aT09NXTogdGhpcy5fb25ab29tLFxuICAgICAgW0NvbnN0YW50cy5FVkVOVFMuWk9PTV9ET05FXTogdGhpcy5fb25ab29tRG9uZVxuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjYW52YXNDbGlja0Rpc2FibGVkOiBmYWxzZSxcbiAgICAgIGRpc3BsYXlIZWFkZXI6IHRydWVcbiAgICB9XG4gIH1cblxuICBzZXRTaGFyZWRTdGF0ZSAoc3RhdGUsIHVwZGF0ZSA9IHRydWUsIHNoYXJlZFN0YXRlVXBkYXRlID0gdHJ1ZSkge1xuICAgIHN1cGVyLnNldFNoYXJlZFN0YXRlKHN0YXRlLCB1cGRhdGUpXG4gICAgc2hhcmVkU3RhdGVVcGRhdGUgJiYgdGhpcy5wcm9wcy5jb250cm9scy51cGRhdGVTaGFyZWRTdGF0ZSgpXG4gIH1cblxuICAvKipcbiAgICogQSBtZXRob2QgdGhhdCBpcyBjYWxsZWQgd2hlbmV2ZXIgc3R5bGVzIG5lZWQgdG8gYmUgZml4ZWQgYnkgdGhlIEphdmFTY3JpcHQuXG4gICAqIFRoaXMgbmVlZHMgdG8gYmUgZG9uZSB0aGFua3MgdG8gb2xkZXIgSW50ZXJuZXQgRXhwbG9yZXIgYnJvd3NlcnMgd2hpY2ggaGF2ZVxuICAgKiBhIGJ1bmNoIG9mIENTUyBidWdzLlxuICAgKi9cbiAgZml4U3R5bGVzICgpIHtcbiAgICBpZiAoVXRpbHMuQnJvd3Nlci5pc0lFbHRlKDExKSkge1xuICAgICAgY29uc3Qgb3V0ZXJDb250YWluZXJIZWlnaHQgPSB0aGlzLl9vdXRlckNvbnRhaW5lci5vZmZzZXRIZWlnaHRcbiAgICAgIHRoaXMuX2NvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBgJHtvdXRlckNvbnRhaW5lckhlaWdodH1weGBcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogSW52b2tlZCBpbW1lZGlhdGVseSBhZnRlciBhIGNvbXBvbmVudCBpcyBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKVxuICAgIGlmICh0aGlzLl9pbml0aWFsUmVyZW5kZXIpIHtcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEhJVCBURVNUSU5HXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhbnkgb3RoZXIgY29udHJvbCByZWFjdHMgdG8gYSBjbGljayBhdCB0aGUgZ2l2ZW4gcG9zaXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBjbGlja1Bvc2l0aW9uXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcGVyZm9ybUhpdFRlc3QgKGNsaWNrUG9zaXRpb24pIHtcbiAgICBjb25zdCBjb250YWluZXJCb3VuZGluZ1JlY3QgPSB0aGlzLmNvbnRleHQuYXBwQ29tcG9uZW50LmdldEJvdW5kcygpXG4gICAgY29uc3QgcmVsYXRpdmVDbGlja1Bvc2l0aW9uID0gY2xpY2tQb3NpdGlvblxuICAgICAgLnN1YnRyYWN0KGNvbnRhaW5lckJvdW5kaW5nUmVjdC5sZWZ0LCBjb250YWluZXJCb3VuZGluZ1JlY3QudG9wKVxuXG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IGNvbnRyb2xzID0gZWRpdG9yLmNvbnRyb2xzLmdldEF2YWlsYWJsZSgpXG5cbiAgICAvLyBDaGVjayB0aGlzIGNvbnRyb2wgZmlyc3RcbiAgICBpZiAodGhpcy5wcm9wcy5jb250cm9scykge1xuICAgICAgY29uc3QgY2xpY2tSZXNwb25zZSA9IHRoaXMucHJvcHMuY29udHJvbHMuY29uc3RydWN0b3JcbiAgICAgICAgLmNsaWNrQXRQb3NpdGlvbihjbGlja1Bvc2l0aW9uLCBlZGl0b3IpXG4gICAgICBpZiAoY2xpY2tSZXNwb25zZSkge1xuICAgICAgICB0aGlzLnNldFNoYXJlZFN0YXRlKGNsaWNrUmVzcG9uc2UpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgc3ByaXRlIG9wZXJhdGlvblxuICAgIGlmIChlZGl0b3Iub3BlcmF0aW9ucy5nZXQoJ3Nwcml0ZScpKSB7XG4gICAgICBjb25zdCBjbGlja1Jlc3BvbnNlID0gdGhpcy5fZ2V0VG9wU3ByaXRlQXRQb3NpdGlvbihyZWxhdGl2ZUNsaWNrUG9zaXRpb24pXG5cbiAgICAgIGlmIChjbGlja1Jlc3BvbnNlKSB7XG4gICAgICAgIC8vIERvbid0IHJlLXNlbGVjdCBhbiBhbHJlYWR5IHNlbGVjdGVkIGl0ZW1cbiAgICAgICAgaWYgKGNsaWNrUmVzcG9uc2Uuc2VsZWN0ZWRTcHJpdGUgPT09IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3NlbGVjdGVkU3ByaXRlJykpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlkZW50aWZpZXIgPSBjbGlja1Jlc3BvbnNlLnNlbGVjdGVkU3ByaXRlLnNlcmlhbGl6ZU9wdGlvbnMoKS50eXBlXG5cbiAgICAgICAgLy8gUmVzcG9uZHMgdG8gY2xpY2ssIHN3aXRjaCB0byB0aGUgY29udHJvbHNcbiAgICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICBjb25zdCBjb250cm9sID0gY29udHJvbHNbaWRlbnRpZmllcl1cbiAgICAgICAgICBpZiAoY29udHJvbCAmJiBjb250cm9sLmNsaWNrQXRQb3NpdGlvbihyZWxhdGl2ZUNsaWNrUG9zaXRpb24sIGVkaXRvcikpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5zY3JlZW4uc3dpdGNoVG9Db250cm9scyhpZGVudGlmaWVyLCBjbGlja1Jlc3BvbnNlKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBhbnkgb2YgdGhlIGNvbnRyb2xzIHJlc3BvbmRzIHRvIGEgY2xpY2tcbiAgICAvLyBhdCB0aGUgZ2l2ZW4gcG9zaXRpb25cbiAgICBmb3IgKGxldCBpZGVudGlmaWVyIGluIGNvbnRyb2xzKSB7XG4gICAgICBjb25zdCBjb250cm9sID0gY29udHJvbHNbaWRlbnRpZmllcl1cbiAgICAgIGNvbnN0IGNsaWNrUmVzcG9uc2UgPSBjb250cm9sLmNsaWNrQXRQb3NpdGlvbihyZWxhdGl2ZUNsaWNrUG9zaXRpb24sIGVkaXRvcilcblxuICAgICAgaWYgKGNsaWNrUmVzcG9uc2UpIHtcbiAgICAgICAgLy8gRG9uJ3QgcmUtc2VsZWN0IGFuIGFscmVhZHkgc2VsZWN0ZWQgaXRlbVxuICAgICAgICBpZiAoY2xpY2tSZXNwb25zZS5zZWxlY3RlZFNwcml0ZSA9PT0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnc2VsZWN0ZWRTcHJpdGUnKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNwb25kcyB0byBjbGljaywgc3dpdGNoIHRvIHRoZSBjb250cm9sc1xuICAgICAgICB0aGlzLmNvbnRleHQuc2NyZWVuLnN3aXRjaFRvQ29udHJvbHMoaWRlbnRpZmllciwgY2xpY2tSZXNwb25zZSlcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIF9nZXRUb3BTcHJpdGVBdFBvc2l0aW9uIChjbGlja1Bvc2l0aW9uKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuXG4gICAgY29uc3Qgb3BlcmF0aW9uID0gZWRpdG9yLm9wZXJhdGlvbnMuZ2V0KCdzcHJpdGUnKVxuXG4gICAgaWYgKCFvcGVyYXRpb24pIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGxldCBzcHJpdGVzID0gb3BlcmF0aW9uLmdldFNwcml0ZXNBdFBvc2l0aW9uKGNsaWNrUG9zaXRpb24sIGVkaXRvci5nZXRPdXRwdXRUZXh0dXJlRGltZW5zaW9ucygpKVxuXG4gICAgcmV0dXJuIHNwcml0ZXNbMF0gPyB7IHNlbGVjdGVkU3ByaXRlOiBzcHJpdGVzWzBdIH0gOiBmYWxzZVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY2FudmFzIGNsaWNraW5nIGhhcyBiZWVuIGRpc2FibGVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25DYW52YXNDbGlja0Rpc2FibGVkICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgY2FudmFzQ2xpY2tEaXNhYmxlZDogdHJ1ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY2FudmFzIGNsaWNraW5nIGhhcyBiZWVuIGVuYWJsZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNhbnZhc0NsaWNrRW5hYmxlZCAoKSB7XG4gICAgLy8gV2UgcmUtZW5hYmxlIGNhbnZhcyBjbGlja3Mgd2hlbiBsZXR0aW5nIGdvIG9mIGUuZy4gYSBjb3JuZXIga25vYi4gU2luY2UgdGhpcyB3aWxsIHRyaWdnZXJcbiAgICAvLyBhIGNsaWNrIG9uIHRoZSBjYW52YXMgcmlnaHQgYWZ0ZXIgdGhpcyBtZXRob2QgaXMgY2FsbGVkLCB3ZSBuZWVkIHRvIHBvc3Rwb25lIHRoZSBmbGFnXG4gICAgLy8gY2hhbmdlIGZvciBvbmUgZnJhbWVcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNhbnZhc0NsaWNrRGlzYWJsZWQ6IGZhbHNlIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyBhIGNvbnRyb2wgdGhhdCByZWFjdHMgdG8gdGhlIGNhbnZhcyBjbGlja1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ2FudmFzQ2xpY2sgKGUpIHtcbiAgICBjb25zdCBjbGlja1Bvc2l0aW9uID0gVXRpbHMuZ2V0RXZlbnRQb3NpdGlvbihlKVxuICAgIHRoaXMuX3BlcmZvcm1IaXRUZXN0KGNsaWNrUG9zaXRpb24pXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdGFyZ2V0IHpvb20gbGV2ZWwgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uWm9vbSAoKSB7XG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIGEgem9vbSBoYXMgYmVlbiBkb25lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25ab29tRG9uZSAoKSB7XG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdXNlciBzdGFydHMgZHJhZ2dpbmcgdGhlIGNhbnZhc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ2FudmFzRHJhZ1N0YXJ0ICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgdGhpcy5faW5pdGlhbE9mZnNldCA9IGVkaXRvci5vZmZzZXQuY2xvbmUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgZHJhZ3MgdGhlIGNhbnZhc1xuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9IGRyYWdPZmZzZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNhbnZhc0RyYWcgKGRyYWdPZmZzZXQpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3Qgb2Zmc2V0ID0gZWRpdG9yLm9mZnNldFxuICAgIGVkaXRvci5vZmZzZXQgPSBvZmZzZXQuY29weSh0aGlzLl9pbml0aWFsT2Zmc2V0KS5hZGQoZHJhZ09mZnNldClcbiAgICBlZGl0b3IucmVuZGVyKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgc3RvcHMgZHJhZ2dpbmcgdGhlIGNhbnZhc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ2FudmFzRHJhZ1N0b3AgKCkge1xuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ0FMQ1VMQVRJT05cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYm91bmRpbmcgcmVjdGFuZ2xlIGZvciB0aGUgaW1hZ2VcbiAgICogQHJldHVybiB7UmVjdGFuZ2xlfVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdG9kbyAgQ2FjaGUgdGhpc1xuICAgKi9cbiAgZ2V0SW1hZ2VCb3VuZGluZ1JlY3QgKCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBzZGsgPSBlZGl0b3IuZ2V0U0RLKClcbiAgICBjb25zdCBjb250YWluZXIgPSBzZGsuZ2V0Q29udGFpbmVyKClcbiAgICBjb25zdCBzcHJpdGUgPSBzZGsuZ2V0U3ByaXRlKClcblxuICAgIGNvbnN0IHBvc2l0aW9uID0gY29udGFpbmVyLmdldFBvc2l0aW9uKClcbiAgICBjb25zdCB0ZXh0dXJlID0gc3ByaXRlLmdldFRleHR1cmUoKVxuICAgIGNvbnN0IHRleHR1cmVTY2FsZSA9IHNkay5nZXRUZXh0dXJlU2NhbGUoKVxuXG4gICAgaWYgKCF0ZXh0dXJlKSByZXR1cm4gbmV3IFJlY3RhbmdsZSgpXG5cbiAgICAvLyBjb25zdCBpbWFnZURpbWVuc2lvbnMgPSB0ZXh0dXJlLmdldERpbWVuc2lvbnMoKS5jbG9uZSgpXG4gICAgLy8gICAuZGl2aWRlKHRleHR1cmVTY2FsZSlcbiAgICAvLyAgIC5tdWx0aXBseShlZGl0b3Iuem9vbS5sZXZlbClcbiAgICBjb25zdCBpbWFnZURpbWVuc2lvbnMgPSBzZGsuZ2V0T3V0cHV0RGltZW5zaW9ucygpXG4gICAgY29uc3Qgb3V0ZXJDb250YWluZXJCb3VuZHMgPSB0aGlzLl9vdXRlckNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGNvbnN0IGVkaXRvckJvdW5kcyA9IHRoaXMuY29udGV4dC5hcHBDb21wb25lbnQuZ2V0Qm91bmRzKClcblxuICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKFxuICAgICAgTWF0aC5mbG9vcihwb3NpdGlvbi54IC0gaW1hZ2VEaW1lbnNpb25zLnggLyAyIC0gKG91dGVyQ29udGFpbmVyQm91bmRzLmxlZnQgLSBlZGl0b3JCb3VuZHMubGVmdCkpLFxuICAgICAgTWF0aC5mbG9vcihwb3NpdGlvbi55IC0gaW1hZ2VEaW1lbnNpb25zLnkgLyAyIC0gKG91dGVyQ29udGFpbmVyQm91bmRzLnRvcCAtIGVkaXRvckJvdW5kcy50b3ApKSxcbiAgICAgIE1hdGguY2VpbChpbWFnZURpbWVuc2lvbnMueCksXG4gICAgICBNYXRoLmNlaWwoaW1hZ2VEaW1lbnNpb25zLnkpXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHBvc2l0aW9uIG9mZnNldCBvZiB0aGUgY29udGFpZW5yXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMn1cbiAgICovXG4gIGdldENvbnRhaW5lck9mZnNldCAoKSB7XG4gICAgY29uc3QgYm91bmRpbmdSZWN0ID0gdGhpcy5fb3V0ZXJDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoXG4gICAgICBib3VuZGluZ1JlY3QubGVmdCxcbiAgICAgIGJvdW5kaW5nUmVjdC50b3BcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29udGFpbmVyIHN0eWxlIG9iamVjdFxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0Q29udGFpbmVyU3R5bGUgKCkge1xuICAgIGNvbnN0IHJlY3QgPSB0aGlzLmdldEltYWdlQm91bmRpbmdSZWN0KClcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogcmVjdC54LFxuICAgICAgdG9wOiByZWN0LnksXG4gICAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyBhbGwgY29udHJvbHMgb250byB0aGUgY2FudmFzLlxuICAgKiBAcmV0dXJuIFJlYWN0LkVsZW1lbnRcbiAgICovXG4gIF9yZW5kZXJDb250cm9scyAoKSB7XG4gICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSB0aGlzLl9pbWFnZUNvbnRhaW5lciAmJiB0aGlzLl9nZXRDb250YWluZXJTdHlsZSgpXG4gICAgcmV0dXJuICg8Q29udGFpbmVyXG4gICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9pbWFnZUNvbnRhaW5lciA9IGVsIH19XG4gICAgICBzdHlsZT17Y29udGFpbmVyU3R5bGV9XG4gICAgICBvbkNsaWNrPXt0aGlzLl9vbkNhbnZhc0NsaWNrfSAvPilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICByZXR1cm4gKDxDYW52YXNDb250cm9sc1xuICAgICAgZHJhZ2dhYmxlPXshZWRpdG9yLmlzU2hhbGxvdyAmJiBlZGl0b3IuaXNEcmFnZ2FibGV9XG4gICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWNhbnZhc0NvbnRyb2xzJyA6IHVuZGVmaW5lZCl9XG4gICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9vdXRlckNvbnRhaW5lciA9IGVsIH19PlxuICAgICAgPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgICBkaXNhYmxlZD17ZWRpdG9yLmlzU2hhbGxvdyB8fCAhZWRpdG9yLmlzRHJhZ2dhYmxlfVxuICAgICAgICBvblN0YXJ0PXt0aGlzLl9vbkNhbnZhc0RyYWdTdGFydH1cbiAgICAgICAgb25EcmFnPXt0aGlzLl9vbkNhbnZhc0RyYWd9XG4gICAgICAgIG9uU3RvcD17dGhpcy5fb25DYW52YXNEcmFnU3RvcH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPENhbnZhc0NvbnRyb2xzQ29udGFpbmVyIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2NvbnRhaW5lciA9IGVsIH19PlxuICAgICAgICAgICAge3RoaXMuc3RhdGUuZGlzcGxheUhlYWRlciAmJiA8Q2FudmFzSGVhZGVyQ29udHJvbHNDb21wb25lbnQgLz59XG4gICAgICAgICAgICB7dGhpcy5fcmVuZGVyQ29udHJvbHMoKX1cbiAgICAgICAgICA8L0NhbnZhc0NvbnRyb2xzQ29udGFpbmVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRHJhZ2dhYmxlQ29tcG9uZW50PlxuICAgIDwvQ2FudmFzQ29udHJvbHM+KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhpcyBjb21wb25lbnQncyBjb250YWluZXJcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIGdldCBjb250YWluZXIgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250YWluZXJcbiAgfVxufVxuXG5jb25zdCBDb250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgYmFja2dyb3VuZDogJyNmZjAwMDAnLFxuICBvcGFjaXR5OiAwXG59KVxuXG5jb25zdCBDYW52YXNDb250cm9scyA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnXG59LCB7XG4gIGRyYWdnYWJsZToge1xuICAgIGN1cnNvcjogJ21vdmUnXG4gIH1cbn0pXG5cbmNvbnN0IENhbnZhc0NvbnRyb2xzQ29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICcwJyxcbiAgbGVmdDogJzAnLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKiovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBCYXNlQ29tcG9uZW50LCBVdGlscywgVmVjdG9yMiwgYWRvbmlzIH0gZnJvbSAnLi4vZ2xvYmFscydcbmltcG9ydCBEcmFnZ2FibGVDb21wb25lbnQgZnJvbSAnLi9kcmFnZ2FibGUtY29tcG9uZW50J1xuXG5jb25zdCBTQ1JPTExCQVJfV0lEVEggPSAxMlxuY29uc3QgR1JBRElFTlRfU0NST0xMX1RPTEVSQU5DRSA9IDE1XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcm9sbGJhckNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBzdGF0aWMgSE9SSVpPTlRBTCA9ICdob3Jpem9udGFsJ1xuICBzdGF0aWMgVkVSVElDQUwgPSAndmVydGljYWwnXG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAoIXRoaXMuY29uc3RydWN0b3IuTkFUSVZFX1NDUk9MTEJBUl9XSURUSCkge1xuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5OQVRJVkVfU0NST0xMQkFSX1dJRFRIID0gVXRpbHMuZ2V0U2Nyb2xsYmFyV2lkdGgoKVxuICAgIH1cblxuICAgIHRoaXMuX2lzRHJhZ2dpbmcgPSBmYWxzZVxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uQnV0dG9uRHJhZ1N0YXJ0JyxcbiAgICAgICdfb25CdXR0b25EcmFnJyxcbiAgICAgICdfb25CdXR0b25EcmFnU3RvcCcsXG4gICAgICAnX29uQmFyRHJhZ1N0YXJ0JyxcbiAgICAgICdfb25CYXJEcmFnJyxcbiAgICAgICdfb25CYXJEcmFnU3RvcCcsXG4gICAgICAnX29uTGlzdFNjcm9sbCdcbiAgICApXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGJ1dHRvblNpemU6IDAsXG4gICAgICBidXR0b25Qb3NpdGlvbjogMCxcbiAgICAgIGJ1dHRvblZpc2libGU6IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZFxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudERpZE1vdW50KClcbiAgICB0aGlzLnVwZGF0ZSgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdXNlciBzY3JvbGxzIHRoZSBsaXN0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25MaXN0U2Nyb2xsICgpIHtcbiAgICBpZiAodGhpcy5faXNEcmFnZ2luZykgcmV0dXJuXG5cbiAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLl9nZXREaXJlY3Rpb24oKVxuXG4gICAgbGV0IGxpc3RTY3JvbGxTaXplLCBsaXN0U2Nyb2xsUG9zaXRpb24sIGJhY2tncm91bmRTY3JvbGxTaXplXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gU2Nyb2xsYmFyQ29tcG9uZW50LkhPUklaT05UQUwpIHtcbiAgICAgIGxpc3RTY3JvbGxTaXplID0gdGhpcy5fbGlzdC5zY3JvbGxXaWR0aCAtIHRoaXMuX2xpc3Qub2Zmc2V0V2lkdGhcbiAgICAgIGxpc3RTY3JvbGxQb3NpdGlvbiA9IHRoaXMuX2xpc3Quc2Nyb2xsTGVmdFxuICAgICAgYmFja2dyb3VuZFNjcm9sbFNpemUgPSB0aGlzLl9yb290Lm9mZnNldFdpZHRoIC0gdGhpcy5zdGF0ZS5idXR0b25TaXplXG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IFNjcm9sbGJhckNvbXBvbmVudC5WRVJUSUNBTCkge1xuICAgICAgbGlzdFNjcm9sbFNpemUgPSB0aGlzLl9saXN0LnNjcm9sbEhlaWdodCAtIHRoaXMuX2xpc3Qub2Zmc2V0SGVpZ2h0XG4gICAgICBsaXN0U2Nyb2xsUG9zaXRpb24gPSB0aGlzLl9saXN0LnNjcm9sbFRvcFxuICAgICAgYmFja2dyb3VuZFNjcm9sbFNpemUgPSB0aGlzLl9yb290Lm9mZnNldEhlaWdodCAtIHRoaXMuc3RhdGUuYnV0dG9uU2l6ZVxuICAgIH1cblxuICAgIGNvbnN0IHByb2dyZXNzID0gbGlzdFNjcm9sbFBvc2l0aW9uIC8gbGlzdFNjcm9sbFNpemVcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGJ1dHRvblBvc2l0aW9uOiBiYWNrZ3JvdW5kU2Nyb2xsU2l6ZSAqIHByb2dyZXNzXG4gICAgfSlcblxuICAgIHRoaXMucHJvcHMub25TY3JvbGwgJiYgdGhpcy5wcm9wcy5vblNjcm9sbChsaXN0U2Nyb2xsUG9zaXRpb24pXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdXNlciBwcmVzc2VzIGEgbW91c2UgYnV0dG9uIG9uIHRoZSBiYXJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkJ1dHRvbkRyYWdTdGFydCAoZSkge1xuICAgIHRoaXMuX2lzRHJhZ2dpbmcgPSB0cnVlXG4gICAgdGhpcy5faW5pdGlhbEJ1dHRvblBvc2l0aW9uID0gdGhpcy5zdGF0ZS5idXR0b25Qb3NpdGlvbiB8fCAwXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hpbGUgdGhlIHVzZXIgZHJhZ3MgdGhlIGJ1dHRvblxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IGRpZmZcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkJ1dHRvbkRyYWcgKGRpZmYpIHtcbiAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLl9nZXREaXJlY3Rpb24oKVxuXG4gICAgbGV0IGJ1dHRvblBvc2l0aW9uXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gU2Nyb2xsYmFyQ29tcG9uZW50LkhPUklaT05UQUwpIHtcbiAgICAgIGJ1dHRvblBvc2l0aW9uID0gdGhpcy5faW5pdGlhbEJ1dHRvblBvc2l0aW9uICsgZGlmZi54XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IFNjcm9sbGJhckNvbXBvbmVudC5WRVJUSUNBTCkge1xuICAgICAgYnV0dG9uUG9zaXRpb24gPSB0aGlzLl9pbml0aWFsQnV0dG9uUG9zaXRpb24gKyBkaWZmLnlcbiAgICB9XG4gICAgdGhpcy5fc2V0QnV0dG9uUG9zaXRpb24oYnV0dG9uUG9zaXRpb24pXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdXNlciByZWxlYXNlcyB0aGUgYnV0dG9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CdXR0b25EcmFnU3RvcCAoKSB7XG4gICAgdGhpcy5faXNEcmFnZ2luZyA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdXNlciBzdGFydHMgZHJhZ2dpbmcgdGhlIGJhclxuICAgKiBAcGFyYW0gIHtFdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQmFyRHJhZ1N0YXJ0IChlKSB7XG4gICAgY29uc3QgbW91c2VQb3NpdGlvbiA9IFV0aWxzLmdldEV2ZW50UG9zaXRpb24oZSlcbiAgICB0aGlzLl9pbml0aWFsUG9zaXRpb24gPSBtb3VzZVBvc2l0aW9uLmNsb25lKClcbiAgICBjb25zdCBib3VuZGluZ1JlY3QgPSB0aGlzLl9yb290LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgY29uc3QgZWxlbWVudE9mZnNldCA9IG5ldyBWZWN0b3IyKFxuICAgICAgYm91bmRpbmdSZWN0LmxlZnQsXG4gICAgICBib3VuZGluZ1JlY3QudG9wXG4gICAgKVxuXG4gICAgY29uc3QgcmVsYXRpdmVQb3NpdGlvbiA9IG1vdXNlUG9zaXRpb25cbiAgICAgIC5jbG9uZSgpXG4gICAgICAuc3VidHJhY3QoZWxlbWVudE9mZnNldClcblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuX2dldERpcmVjdGlvbigpXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gU2Nyb2xsYmFyQ29tcG9uZW50LkhPUklaT05UQUwpIHtcbiAgICAgIHRoaXMuX3NldEJ1dHRvblBvc2l0aW9uKHJlbGF0aXZlUG9zaXRpb24ueCAtIHRoaXMuc3RhdGUuYnV0dG9uU2l6ZSAvIDIpXG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IFNjcm9sbGJhckNvbXBvbmVudC5WRVJUSUNBTCkge1xuICAgICAgdGhpcy5fc2V0QnV0dG9uUG9zaXRpb24ocmVsYXRpdmVQb3NpdGlvbi55IC0gdGhpcy5zdGF0ZS5idXR0b25TaXplIC8gMilcbiAgICB9XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9vbkJhckRyYWcpXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5fb25CYXJEcmFnKVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9vbkJhckRyYWdTdG9wKVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5fb25CYXJEcmFnU3RvcClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGlsZSB0aGUgdXNlciBkcmFncyB0aGUgYmFyXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CYXJEcmFnIChlKSB7XG4gICAgY29uc3QgbW91c2VQb3NpdGlvbiA9IFV0aWxzLmdldEV2ZW50UG9zaXRpb24oZSlcblxuICAgIGNvbnN0IGJvdW5kaW5nUmVjdCA9IHRoaXMuX3Jvb3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBjb25zdCBlbGVtZW50T2Zmc2V0ID0gbmV3IFZlY3RvcjIoXG4gICAgICBib3VuZGluZ1JlY3QubGVmdCxcbiAgICAgIGJvdW5kaW5nUmVjdC50b3BcbiAgICApXG5cbiAgICBjb25zdCByZWxhdGl2ZVBvc2l0aW9uID0gbW91c2VQb3NpdGlvblxuICAgICAgLmNsb25lKClcbiAgICAgIC5zdWJ0cmFjdChlbGVtZW50T2Zmc2V0KVxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuX2dldERpcmVjdGlvbigpXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gU2Nyb2xsYmFyQ29tcG9uZW50LkhPUklaT05UQUwpIHtcbiAgICAgIHRoaXMuX3NldEJ1dHRvblBvc2l0aW9uKHJlbGF0aXZlUG9zaXRpb24ueCAtIHRoaXMuc3RhdGUuYnV0dG9uU2l6ZSAvIDIpXG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IFNjcm9sbGJhckNvbXBvbmVudC5WRVJUSUNBTCkge1xuICAgICAgdGhpcy5fc2V0QnV0dG9uUG9zaXRpb24ocmVsYXRpdmVQb3NpdGlvbi55IC0gdGhpcy5zdGF0ZS5idXR0b25TaXplIC8gMilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdXNlciByZWxlYXNlcyB0aGUgYmFyXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CYXJEcmFnU3RvcCAoKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fb25CYXJEcmFnKVxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX29uQmFyRHJhZylcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fb25CYXJEcmFnU3RvcClcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuX29uQmFyRHJhZ1N0b3ApXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBNSVNDXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGJ1dHRvbiBwb3NpdGlvbiB0byB0aGUgZ2l2ZW4gdmFsdWVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJ1dHRvblBvc2l0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0QnV0dG9uUG9zaXRpb24gKGJ1dHRvblBvc2l0aW9uKSB7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gdGhpcy5fZ2V0RGlyZWN0aW9uKClcblxuICAgIGxldCBzY3JvbGxhYmxlQnV0dG9uU2l6ZSwgc2Nyb2xsYWJsZUxpc3RTaXplXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gU2Nyb2xsYmFyQ29tcG9uZW50LkhPUklaT05UQUwpIHtcbiAgICAgIHNjcm9sbGFibGVCdXR0b25TaXplID0gdGhpcy5fcm9vdC5vZmZzZXRXaWR0aCAtIHRoaXMuc3RhdGUuYnV0dG9uU2l6ZVxuICAgICAgc2Nyb2xsYWJsZUxpc3RTaXplID0gdGhpcy5fbGlzdC5zY3JvbGxXaWR0aCAtIHRoaXMuX2xpc3Qub2Zmc2V0V2lkdGhcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gU2Nyb2xsYmFyQ29tcG9uZW50LlZFUlRJQ0FMKSB7XG4gICAgICBzY3JvbGxhYmxlQnV0dG9uU2l6ZSA9IHRoaXMuX3Jvb3Qub2Zmc2V0SGVpZ2h0IC0gdGhpcy5zdGF0ZS5idXR0b25TaXplXG4gICAgICBzY3JvbGxhYmxlTGlzdFNpemUgPSB0aGlzLl9saXN0LnNjcm9sbEhlaWdodCAtIHRoaXMuX2xpc3Qub2Zmc2V0SGVpZ2h0XG4gICAgfVxuXG4gICAgLy8gQ2xhbXAgYnV0dG9uIHBvc2l0aW9uXG4gICAgYnV0dG9uUG9zaXRpb24gPSBNYXRoLm1heCgwLCBidXR0b25Qb3NpdGlvbilcbiAgICBidXR0b25Qb3NpdGlvbiA9IE1hdGgubWluKGJ1dHRvblBvc2l0aW9uLCBzY3JvbGxhYmxlQnV0dG9uU2l6ZSlcblxuICAgIC8vIFNldCBidXR0b24gcG9zaXRpb25cbiAgICB0aGlzLnNldFN0YXRlKHsgYnV0dG9uUG9zaXRpb24gfSlcblxuICAgIC8vIFVwZGF0ZSBsaXN0IHNjcm9sbCBwb3NpdGlvblxuICAgIGNvbnN0IHByb2dyZXNzID0gYnV0dG9uUG9zaXRpb24gLyBzY3JvbGxhYmxlQnV0dG9uU2l6ZVxuICAgIGNvbnN0IHNjcm9sbFBvc2l0aW9uID0gc2Nyb2xsYWJsZUxpc3RTaXplICogcHJvZ3Jlc3NcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFNjcm9sbGJhckNvbXBvbmVudC5IT1JJWk9OVEFMKSB7XG4gICAgICB0aGlzLl9saXN0LnNjcm9sbExlZnQgPSBzY3JvbGxQb3NpdGlvblxuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBTY3JvbGxiYXJDb21wb25lbnQuVkVSVElDQUwpIHtcbiAgICAgIHRoaXMuX2xpc3Quc2Nyb2xsVG9wID0gc2Nyb2xsUG9zaXRpb25cbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uU2Nyb2xsICYmIHRoaXMucHJvcHMub25TY3JvbGwoc2Nyb2xsUG9zaXRpb24pXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgYnV0dG9uIHBvc2l0aW9uIGFuZCBzaXplXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlQnV0dG9uU2l6ZSAoY2IpIHtcbiAgICBsZXQgYnV0dG9uU2l6ZSA9IDBcbiAgICBsZXQgYnV0dG9uVmlzaWJsZSA9IGZhbHNlXG4gICAgbGV0IHBhcmVudFNpemUsIHBhcmVudFNjcm9sbFNpemVcblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuX2dldERpcmVjdGlvbigpXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gU2Nyb2xsYmFyQ29tcG9uZW50LkhPUklaT05UQUwpIHtcbiAgICAgIHBhcmVudFNpemUgPSB0aGlzLl9saXN0LmNsaWVudFdpZHRoXG4gICAgICBwYXJlbnRTY3JvbGxTaXplID0gdGhpcy5fbGlzdC5zY3JvbGxXaWR0aFxuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBTY3JvbGxiYXJDb21wb25lbnQuVkVSVElDQUwpIHtcbiAgICAgIHBhcmVudFNpemUgPSB0aGlzLl9saXN0Lm9mZnNldEhlaWdodFxuICAgICAgcGFyZW50U2Nyb2xsU2l6ZSA9IHRoaXMuX2xpc3Quc2Nyb2xsSGVpZ2h0XG4gICAgfVxuXG4gICAgYnV0dG9uU2l6ZSA9IHBhcmVudFNpemUgLyBwYXJlbnRTY3JvbGxTaXplICogcGFyZW50U2l6ZVxuICAgIGJ1dHRvblZpc2libGUgPSBwYXJlbnRTY3JvbGxTaXplID4gcGFyZW50U2l6ZVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGJ1dHRvblNpemUsIGJ1dHRvblZpc2libGUgfSwgY2IpXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgbGlzdCBzaXplXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlTGlzdFNpemUgKCkge1xuICAgIGlmICghdGhpcy5fbGlzdCkgcmV0dXJuXG5cbiAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLl9nZXREaXJlY3Rpb24oKVxuICAgIGlmIChkaXJlY3Rpb24gPT09IFNjcm9sbGJhckNvbXBvbmVudC5IT1JJWk9OVEFMKSB7XG4gICAgICB0aGlzLl9saXN0LnN0eWxlLmhlaWdodCA9ICcnXG4gICAgICBjb25zdCBmdWxsRGltZW5zaW9ucyA9IHRoaXMuX2dldEZ1bGxMaXN0RGltZW5zaW9ucygpXG4gICAgICB0aGlzLl9saXN0U2l6ZSA9IGZ1bGxEaW1lbnNpb25zLnlcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gU2Nyb2xsYmFyQ29tcG9uZW50LlZFUlRJQ0FMKSB7XG4gICAgICB0aGlzLl9saXN0LnN0eWxlLndpZHRoID0gJydcbiAgICAgIGNvbnN0IGZ1bGxEaW1lbnNpb25zID0gdGhpcy5fZ2V0RnVsbExpc3REaW1lbnNpb25zKClcbiAgICAgIHRoaXMuX2xpc3RTaXplID0gZnVsbERpbWVuc2lvbnMueFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBvcmRlciB0byBnZXQgdGhlIGFic29sdXRlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGxpc3QsIGluY2x1ZGluZyB0aGUgc2Nyb2xsYmFyLFxuICAgKiB3ZSBuZWVkIHRvIG1ha2UgdXNlIG9mIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRGdWxsTGlzdERpbWVuc2lvbnMgKCkge1xuICAgIGNvbnN0IHJlY3QgPSB0aGlzLl9saXN0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUFVCTElDIEFQSVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBkaW1lbnNpb25zIGFuZCBzdHVmZlxuICAgKi9cbiAgdXBkYXRlICgpIHtcbiAgICBpZiAoVXRpbHMuaXNNb2JpbGUoKSkgeyByZXR1cm4gfVxuXG4gICAgaWYgKFV0aWxzLkJyb3dzZXIuaXNJRWx0ZSgxMSkpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lckhlaWdodCA9IHRoaXMuX2NvbnRhaW5lci5vZmZzZXRIZWlnaHRcbiAgICAgIHRoaXMuX2xpc3Quc3R5bGUuaGVpZ2h0ID0gYCR7Y29udGFpbmVySGVpZ2h0fXB4YFxuICAgIH1cblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuX2dldERpcmVjdGlvbigpXG4gICAgdGhpcy5fdXBkYXRlQnV0dG9uU2l6ZSgoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2xpc3RTaXplKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUxpc3RTaXplKClcbiAgICAgIH1cblxuICAgICAgbGV0IG5ld0xpc3RTaXplID0gdGhpcy5fbGlzdFNpemVcbiAgICAgIGlmICh0aGlzLnN0YXRlLmJ1dHRvblZpc2libGUpIHtcbiAgICAgICAgbmV3TGlzdFNpemUgKz0gdGhpcy5jb25zdHJ1Y3Rvci5OQVRJVkVfU0NST0xMQkFSX1dJRFRIXG4gICAgICB9XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IFNjcm9sbGJhckNvbXBvbmVudC5IT1JJWk9OVEFMKSB7XG4gICAgICAgIHRoaXMuX3Jvb3Quc3R5bGUudG9wID0gYCR7dGhpcy5fbGlzdFNpemUgLSBTQ1JPTExCQVJfV0lEVEh9cHhgXG4gICAgICAgIHRoaXMuX3Jvb3Quc3R5bGUud2lkdGggPSBgJHt0aGlzLl9saXN0Lm9mZnNldFdpZHRofXB4YFxuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IFNjcm9sbGJhckNvbXBvbmVudC5WRVJUSUNBTCkge1xuICAgICAgICB0aGlzLl9saXN0LnN0eWxlLndpZHRoID0gYCR7bmV3TGlzdFNpemV9cHhgXG4gICAgICAgIHRoaXMuX3Jvb3Quc3R5bGUubGVmdCA9IGAke3RoaXMuX2xpc3RTaXplIC0gU0NST0xMQkFSX1dJRFRIfXB4YFxuICAgICAgICB0aGlzLl9yb290LnN0eWxlLmhlaWdodCA9IGAke3RoaXMuX2xpc3Qub2Zmc2V0SGVpZ2h0fXB4YFxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLl9saXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX29uTGlzdFNjcm9sbClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE1JU0NcblxuICAvKipcbiAgICogUmV0dXJucyB0aGlzIHNjcm9sbGJhcidzIGRpcmVjdGlvblxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0RGlyZWN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kaXJlY3Rpb24gfHwgJ2hvcml6b250YWwnXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZ3JhZGllbnQgb3BhY2l0eVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0R3JhZGllbnRPcGFjaXR5ICgpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3QpIHJldHVybiBmYWxzZVxuXG4gICAgY29uc3QgZGlyZWN0aW9uID0gdGhpcy5fZ2V0RGlyZWN0aW9uKClcbiAgICBsZXQgcGl4ZWxzTGVmdFRvU2Nyb2xsXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gU2Nyb2xsYmFyQ29tcG9uZW50LkhPUklaT05UQUwpIHtcbiAgICAgIHBpeGVsc0xlZnRUb1Njcm9sbCA9IHRoaXMuX2xpc3Quc2Nyb2xsV2lkdGggLSB0aGlzLl9saXN0Lm9mZnNldFdpZHRoIC0gdGhpcy5fbGlzdC5zY3JvbGxMZWZ0XG4gICAgfSBlbHNlIHtcbiAgICAgIHBpeGVsc0xlZnRUb1Njcm9sbCA9IHRoaXMuX2xpc3Quc2Nyb2xsSGVpZ2h0IC0gdGhpcy5fbGlzdC5vZmZzZXRIZWlnaHQgLSB0aGlzLl9saXN0LnNjcm9sbFRvcFxuICAgIH1cblxuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChwaXhlbHNMZWZ0VG9TY3JvbGwgLyBHUkFESUVOVF9TQ1JPTExfVE9MRVJBTkNFLCAwKSwgMSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxJTkdcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYnV0dG9uJ3Mgc3R5bGUgb2JqZWN0XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRCdXR0b25TdHlsZSAoKSB7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gdGhpcy5fZ2V0RGlyZWN0aW9uKClcbiAgICBpZiAoZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IHRoaXMuc3RhdGUuYnV0dG9uUG9zaXRpb24sXG4gICAgICAgIHdpZHRoOiB0aGlzLnN0YXRlLmJ1dHRvblNpemVcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB0aGlzLnN0YXRlLmJ1dHRvblBvc2l0aW9uLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuc3RhdGUuYnV0dG9uU2l6ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEdFVFRFUlNcblxuICBnZXRMaXN0ICgpIHsgcmV0dXJuIHRoaXMucmVmcy5saXN0IH1cbiAgZ2V0Um9vdCAoKSB7IHJldHVybiB0aGlzLnJlZnMucm9vdCB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNoaWxkIGVsZW1lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJDaGlsZCAoY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICBpbm5lclJlZjogZWwgPT4ge1xuICAgICAgICBpZiAoY2hpbGRyZW4ucHJvcHMuaW5uZXJSZWYpIHtcbiAgICAgICAgICBjaGlsZHJlbi5wcm9wcy5pbm5lclJlZihlbClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ID0gZWxcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgaWYgKFV0aWxzLmlzTW9iaWxlKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfVxuXG4gICAgY29uc3QgYnV0dG9uU3R5bGUgPSB0aGlzLl9nZXRCdXR0b25TdHlsZSgpXG4gICAgY29uc3QgY2hpbGQgPSB0aGlzLl9yZW5kZXJDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKVxuXG4gICAgY29uc3QgZGlyZWN0aW9uID0gdGhpcy5fZ2V0RGlyZWN0aW9uKClcbiAgICBjb25zdCBncmFkaWVudE9wYWNpdHkgPSB0aGlzLl9nZXRHcmFkaWVudE9wYWNpdHkoKVxuICAgIHJldHVybiAoPFNjcm9sbGJhckNvbnRhaW5lclxuICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fY29udGFpbmVyID0gZWwgfX1cbiAgICAgIHN0eWxlcz17dGhpcy5wcm9wcy5zdHlsZXN9PlxuICAgICAge2NoaWxkfVxuICAgICAgeyghdGhpcy5wcm9wcy5ub0dyYWRpZW50ICYmIGdyYWRpZW50T3BhY2l0eSAhPT0gMClcbiAgICAgICAgPyAoPEdyYWRpZW50XG4gICAgICAgICAgc3R5bGU9e3sgb3BhY2l0eTogZ3JhZGllbnRPcGFjaXR5IH19XG4gICAgICAgICAgaG9yaXpvbnRhbD17ZGlyZWN0aW9uID09PSBTY3JvbGxiYXJDb21wb25lbnQuSE9SSVpPTlRBTH1cbiAgICAgICAgICB2ZXJ0aWNhbD17ZGlyZWN0aW9uID09PSBTY3JvbGxiYXJDb21wb25lbnQuVkVSVElDQUx9IC8+KVxuICAgICAgICA6IG51bGx9XG4gICAgICA8U2Nyb2xsYmFyXG4gICAgICAgIGlubmVyUmVmPXsoZWwpID0+IHsgdGhpcy5fcm9vdCA9IGVsIH19XG4gICAgICAgIG9uTW91c2VEb3duPXt0aGlzLl9vbkJhckRyYWdTdGFydH1cbiAgICAgICAgb25Ub3VjaFN0YXJ0PXt0aGlzLl9vbkJhckRyYWdTdGFydH1cbiAgICAgICAgdmVydGljYWw9e3RoaXMucHJvcHMuZGlyZWN0aW9uID09PSAndmVydGljYWwnfVxuICAgICAgICBob3Jpem9udGFsPXt0aGlzLnByb3BzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnfT5cbiAgICAgICAgPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgICAgIG9uU3RhcnQ9e3RoaXMuX29uQnV0dG9uRHJhZ1N0YXJ0fVxuICAgICAgICAgIG9uRHJhZz17dGhpcy5fb25CdXR0b25EcmFnfVxuICAgICAgICAgIG9uU3RvcD17dGhpcy5fb25CdXR0b25EcmFnU3RvcH0+XG4gICAgICAgICAgPFNjcm9sbGJhckJ1dHRvblxuICAgICAgICAgICAgc3R5bGU9e2J1dHRvblN0eWxlfVxuICAgICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS5idXR0b25WaXNpYmxlfVxuICAgICAgICAgICAgb25Nb3VzZURvd249e3RoaXMuX29uQnV0dG9uRG93bn1cbiAgICAgICAgICAgIHZlcnRpY2FsPXt0aGlzLnByb3BzLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJ31cbiAgICAgICAgICAgIGhvcml6b250YWw9e3RoaXMucHJvcHMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCd9IC8+XG4gICAgICAgIDwvRHJhZ2dhYmxlQ29tcG9uZW50PlxuICAgICAgPC9TY3JvbGxiYXI+XG4gICAgPC9TY3JvbGxiYXJDb250YWluZXI+KVxuICB9XG59XG5cbmNvbnN0IFNjcm9sbGJhckNvbnRhaW5lciA9IGFkb25pcy5kaXYoe30pXG5TY3JvbGxiYXJDb21wb25lbnQuUm9vdEVsZW1lbnQgPSBTY3JvbGxiYXJDb250YWluZXJcblxuY29uc3QgU2Nyb2xsYmFyID0gYWRvbmlzLmRpdih7XG4gIG9wYWNpdHk6IDAuMyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgcGFkZGluZzogJzRweCcsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB6SW5kZXg6IHRoZW1lID0+IHRoZW1lLnpJbmRleCgnY29udHJvbHNPdmVybGF5cycpIC0gMVxufSwge1xuICB2ZXJ0aWNhbDoge1xuICAgIHJpZ2h0OiAnNXB4JyxcbiAgICB3aWR0aDogJzEycHgnLFxuICAgIGhlaWdodDogJzEwMCUnXG4gIH0sXG4gIGhvcml6b250YWw6IHtcbiAgICBib3R0b206ICc1cHgnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTJweCdcbiAgfVxufSlcblxuY29uc3QgU2Nyb2xsYmFyQnV0dG9uID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICcwJyxcbiAgbGVmdDogJzAnLFxuICBkaXNwbGF5OiAnbm9uZScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEycHgnLFxuICBwYWRkaW5nOiAnNHB4JyxcblxuICAnOmJlZm9yZSc6IHtcbiAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgYmFja2dyb3VuZDogJ3doaXRlJyxcbiAgICBjb250ZW50OiAnXCJcIidcbiAgfVxufSwge1xuICB2ZXJ0aWNhbDoge1xuICAgICc6YmVmb3JlJzoge1xuICAgICAgd2lkdGg6ICc0cHgnLFxuICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICB9XG4gIH0sXG4gIGhvcml6b250YWw6IHtcbiAgICAnOmJlZm9yZSc6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICc0cHgnXG4gICAgfVxuICB9LFxuICB2aXNpYmxlOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJ1xuICB9XG59KVxuXG5jb25zdCBHcmFkaWVudCA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnXG59LCB7XG4gIGhvcml6b250YWw6IHtcbiAgICBsZWZ0OiAnMCcsXG4gICAgYm90dG9tOiAnMCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6IHRoZW1lID0+IGAke3RoZW1lLnNjcm9sbGJhckdyYWRpZW50U2l6ZX1weGAsXG4gICAgYmFja2dyb3VuZEltYWdlOiAnbGluZWFyLWdyYWRpZW50KC05MGRlZywgcmdiYSgzNCwgMzQsIDM4LCAwKSAwJSwgIzIzMjMyNiA5OCUpJ1xuICB9LFxuICB2ZXJ0aWNhbDoge1xuICAgIGxlZnQ6ICcwJyxcbiAgICBib3R0b206ICcwJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogdGhlbWUgPT4gYCR7dGhlbWUuc2Nyb2xsYmFyR3JhZGllbnRTaXplfXB4YCxcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICdsaW5lYXItZ3JhZGllbnQoLTE4MGRlZywgcmdiYSgzNCwgMzQsIDM4LCAwKSAwJSwgIzIzMjMyNiA5OCUpJ1xuICB9XG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3Njcm9sbGJhci1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazovKipcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBhZG9uaXMgfSBmcm9tICdnbG9iYWxzJ1xuXG5leHBvcnQgY29uc3QgSW5wdXQgPSBhZG9uaXMuY3NzKHtcbiAgdHJhbnNpdGlvbjogJ29wYWNpdHkgLjJzIGVhc2Utb3V0JyxcbiAgZm9udFNpemU6ICcxNHB4JyxcbiAgZm9udEZhbWlseTogdGhlbWUgPT4gdGhlbWUucmVndWxhckZvbnRGYW1pbHksXG4gIG1pbldpZHRoOiAnNDVweCcsXG4gIGhlaWdodDogJzI2cHgnLFxuICBjb2xvcjogdGhlbWUgPT4gdGhlbWUudGV4dENvbG9yLFxuICBwYWRkaW5nQm90dG9tOiAnN3B4JyxcbiAgYm9yZGVyOiAnbm9uZScsXG4gIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSknLFxuICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxuICBvcGFjaXR5OiAwLjcsXG4gICc6Zm9jdXMnOiB7XG4gICAgb3V0bGluZTogJ25vbmUnXG4gIH0sXG4gICc6aG92ZXInOiB7XG4gICAgb3BhY2l0eTogMS4wXG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2hhcmVkL3N0eWxlcy5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6LyoqXG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgVXRpbHMgfSBmcm9tICdnbG9iYWxzJ1xuaW1wb3J0IFNoYXJlZFN0YXRlQ29tcG9uZW50IGZyb20gJy4uL3NoYXJlZC1zdGF0ZS1jb21wb25lbnQnXG5pbXBvcnQgTnVtZXJpY0lucHV0Q29tcG9uZW50IGZyb20gJ2NvbXBvbmVudHMvc2hhcmVkL2Zvcm1zL251bWVyaWMtaW5wdXQtY29tcG9uZW50J1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmFsdWVTZWxlY3Rpb25Db21wb25lbnQgZXh0ZW5kcyBTaGFyZWRTdGF0ZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBTaGFyZWRTdGF0ZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vbklucHV0TGl2ZUNoYW5nZScsXG4gICAgICAnX29uSW5wdXRDaGFuZ2UnXG4gICAgKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzXG4gICAqIEBwYXJhbSAge09iamVjdH0gcHJvcHNcbiAgICovXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKHByb3BzKSB7XG4gICAgaWYgKHByb3BzLnZhbHVlICE9PSB0aGlzLnN0YXRlLnZhbHVlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IHByb3BzLnZhbHVlIH0pXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXRcbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbklucHV0TGl2ZUNoYW5nZSAoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGFuIGlucHV0IGNoYW5nZXMuXG4gICAqIEBwYXJhbSAge0V2ZW50fSBldmVudFxuICAgKiBAcmV0dXJuIEBwcml2YXRlXG4gICAqL1xuICBfb25JbnB1dENoYW5nZSAoZXZlbnQpIHtcbiAgICBsZXQgdmFsdWUgPSBwYXJzZUZsb2F0KGV2ZW50LnRhcmdldC52YWx1ZSlcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSB9KVxuICAgIH1cblxuICAgIGNvbnN0IHsgbWluVmFsdWUsIG1heFZhbHVlIH0gPSB0aGlzLnByb3BzXG4gICAgdmFsdWUgPSBVdGlscy50b0ZpeGVkKE1hdGgubWF4KG1pblZhbHVlLCBNYXRoLm1pbih2YWx1ZSwgbWF4VmFsdWUpKSwgMSlcbiAgICB0aGlzLnByb3BzLm9uVmFsdWVDaGFuZ2UgJiZcbiAgICAgIHRoaXMucHJvcHMub25WYWx1ZUNoYW5nZSh2YWx1ZSlcblxuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZSB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIHJpZ2h0IHBhcnQgb2YgdGhpcyBjb250cm9sIChlLmcuIGFuIGlucHV0KVxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlclJpZ2h0UGFydCAoKSB7XG4gICAgcmV0dXJuICg8SW5wdXRGaWVsZFxuICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9XG4gICAgICBvbkxpdmVDaGFuZ2U9e3RoaXMuX29uSW5wdXRMaXZlQ2hhbmdlfVxuICAgICAgb25DaGFuZ2U9e3RoaXMuX29uSW5wdXRDaGFuZ2V9XG4gICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXZhbHVlU2VsZWN0aW9uLWlucHV0JyA6IHVuZGVmaW5lZCl9XG4gICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9pbnB1dCA9IGVsIH19XG4gICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH0gLz4pXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgbGV0IHsgbGFiZWwsIGlucHV0TGFiZWwsIGNsYXNzTmFtZSwgZGlzYWJsZWQsIHN0eWxlcyB9ID0gdGhpcy5wcm9wc1xuICAgIGxldCBoYXNMZWZ0UGFydCA9IHR5cGVvZiB0aGlzLl9yZW5kZXJMZWZ0UGFydCA9PT0gJ2Z1bmN0aW9uJ1xuICAgIHJldHVybiAoPFZhbHVlU2VsZWN0aW9uXG4gICAgICBzdHlsZXM9e3N0eWxlc31cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfT5cbiAgICAgIDxSb3c+XG4gICAgICAgIHsgaGFzTGVmdFBhcnQgJiZcbiAgICAgICAgICA8Q29sdW1uPlxuICAgICAgICAgICAge2xhYmVsICYmIDxUaXRsZSBsZWZ0PntsYWJlbH08L1RpdGxlPn1cbiAgICAgICAgICAgIHt0aGlzLl9yZW5kZXJMZWZ0UGFydCgpfVxuICAgICAgICAgIDwvQ29sdW1uPlxuICAgICAgICB9XG4gICAgICAgIDxDb2x1bW4+XG4gICAgICAgICAge2lucHV0TGFiZWwgJiYgPFRpdGxlPntpbnB1dExhYmVsIHx8ICcgJ308L1RpdGxlPn1cbiAgICAgICAgICB7dGhpcy5fcmVuZGVyUmlnaHRQYXJ0KCl9XG4gICAgICAgIDwvQ29sdW1uPlxuICAgICAgPC9Sb3c+XG4gICAgPC9WYWx1ZVNlbGVjdGlvbj4pXG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTEVTXG5cbmNvbnN0IFZhbHVlU2VsZWN0aW9uID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzMycHgnLFxuICBtYXJnaW5Cb3R0b206ICcxNnB4JyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbn0sIHtcbiAgZGlzYWJsZWQ6IHtcbiAgICBvcGFjaXR5OiAwLjRcbiAgfVxufSlcblZhbHVlU2VsZWN0aW9uQ29tcG9uZW50LlJvb3RFbGVtZW50ID0gVmFsdWVTZWxlY3Rpb25cblxuY29uc3QgUm93ID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1yb3cnXG59KVxuXG5jb25zdCBDb2x1bW4gPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgcGFkZGluZ1JpZ2h0OiAnMTVweCcsXG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcblxuICAnOmxhc3QtY2hpbGQnOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAwXG4gIH1cbn0sIHtcbiAgYm90dG9tQWxpZ25lZDoge1xuICAgIHZlcnRpY2FsQWxpZ246ICdib3R0b20nXG4gIH1cbn0pXG5cbmNvbnN0IFRpdGxlID0gYWRvbmlzLmRpdih7XG4gIGZvbnRTaXplOiAnMTNweCcsXG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnJlZ3VsYXJGb250RmFtaWx5LFxuICBjb2xvcjogdGhlbWUgPT4gdGhlbWUuZGltbWVkVGV4dENvbG9yLFxuICBtYXJnaW5Cb3R0b206ICc2cHgnXG59LCB7XG4gIGxlZnQ6IHtcbiAgICB0ZXh0QWxpZ246ICdsZWZ0J1xuICB9XG59KVxuXG5jb25zdCBJbnB1dEZpZWxkID0gYWRvbmlzKE51bWVyaWNJbnB1dENvbXBvbmVudCkoe1xuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICB3aWR0aDogJzMycHgnXG59LCB7XG4gIGRpc2FibGVkOiB7XG4gICAgb3BhY2l0eTogMC40LFxuICAgICc6aG92ZXInOiB7XG4gICAgICBvcGFjaXR5OiAwLjRcbiAgICB9XG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL3ZhbHVlLXNlbGVjdGlvbi1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazovKipcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBhZG9uaXMgfSBmcm9tICdnbG9iYWxzJ1xuXG5leHBvcnQgY29uc3QgQ2lyY2xlU2xpZGVyID0gYWRvbmlzLmNzcyh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBoZWlnaHQ6ICcxNHB4JyxcbiAgd2lkdGg6ICcxMDAlJ1xufSlcblxuZXhwb3J0IGNvbnN0IENpcmNsZVNsaWRlckJhY2tncm91bmQgPSBhZG9uaXMuY3NzKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogJzNweCcsXG4gIGJvdHRvbTogJzJweCcsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGJvcmRlclJhZGl1czogJzFweCcsXG4gIGN1cnNvcjogJ3BvaW50ZXInXG59KVxuXG5leHBvcnQgY29uc3QgQ2lyY2xlU2xpZGVyS25vYiA9IGFkb25pcy5jc3Moe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgdG9wOiAwLFxuICBoZWlnaHQ6ICcxMnB4JyxcbiAgd2lkdGg6ICcxMnB4JyxcbiAgbWFyZ2luTGVmdDogJy02cHgnLFxuICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICBib3JkZXI6IHRoZW1lID0+IGAycHggc29saWQgJHt0aGVtZS5zbGlkZXJDaXJjbGVLbm9iQ29sb3J9YCxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGJveFNoYWRvdzogJzAgMXB4IDFweCAwIHJnYmEoMCwwLDAsMC4xMSksIDAgMXB4IDNweCAwIHJnYmEoMCwwLDAsMC40NiknXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jb2xvci1waWNrZXIvY2lyY2xlLXNsaWRlci1zdHlsZXMuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuY29uc3QgeyBPdmVybGF5RmlsdGVyIH0gPSBFbmdpbmUuRmlsdGVyc1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5vcm1hbDogT3ZlcmxheUZpbHRlci5CTEVORF9NT0RFUy5OT1JNQUwsXG4gIG92ZXJsYXk6IE92ZXJsYXlGaWx0ZXIuQkxFTkRfTU9ERVMuT1ZFUkxBWSxcbiAgaGFyZExpZ2h0OiBPdmVybGF5RmlsdGVyLkJMRU5EX01PREVTLkhBUkRfTElHSFQsXG4gIHNvZnRMaWdodDogT3ZlcmxheUZpbHRlci5CTEVORF9NT0RFUy5TT0ZUX0xJR0hULFxuICBtdWx0aXBseTogT3ZlcmxheUZpbHRlci5CTEVORF9NT0RFUy5NVUxUSVBMWSxcbiAgZGFya2VuOiBPdmVybGF5RmlsdGVyLkJMRU5EX01PREVTLkRBUktFTixcbiAgbGlnaHRlbjogT3ZlcmxheUZpbHRlci5CTEVORF9NT0RFUy5MSUdIVEVOLFxuICBzY3JlZW46IE92ZXJsYXlGaWx0ZXIuQkxFTkRfTU9ERVMuU0NSRUVOLFxuICBjb2xvckJ1cm46IE92ZXJsYXlGaWx0ZXIuQkxFTkRfTU9ERVMuQ09MT1JfQlVSTlxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvb3ZlcmxheS9ibGVuZC1tb2Rlcy5qcyIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSA4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2h0bWwuanNcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanNcbi8vIG1vZHVsZSBpZCA9IDg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanNcbi8vIG1vZHVsZSBpZCA9IDkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qc1xuLy8gbW9kdWxlIGlkID0gOTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qc1xuLy8gbW9kdWxlIGlkID0gOTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJpbXBvcnQgRGFya1RoZW1lIGZyb20gJy4vZGFyay10aGVtZSdcbmV4cG9ydCB7IERhcmtUaGVtZVxufVxuY29uc3QgRGVmYXVsdFRoZW1lID0gRGFya1RoZW1lXG5leHBvcnQgeyBEZWZhdWx0VGhlbWUgfVxuXG5jb25zdCBUaGVtZXMgPSB7XG4gIERhcmtUaGVtZVxufVxuZXhwb3J0IGRlZmF1bHQgVGhlbWVzXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL3RoZW1lcy9pbmRleC5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgVXRpbHMgYXMgU0RLVXRpbHMgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZUNvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgYXBwQ29tcG9uZW50OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGVkaXRvcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB1aTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1lZGlhdG9yOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNjcmVlbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBnbG9iYWxTdGF0ZTogUHJvcFR5cGVzLm9iamVjdFxuICB9XG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9XG4gICAgdGhpcy5fbmVlZHNTdHlsZUZpeGVzID0gZmFsc2VcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnZml4U3R5bGVzJ1xuICAgIClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdPUktBUk9VTkRTXG5cbiAgLyoqXG4gICAqIEEgbWV0aG9kIHRoYXQgaXMgY2FsbGVkIHdoZW5ldmVyIHN0eWxlcyBuZWVkIHRvIGJlIGZpeGVkIGJ5IHRoZSBKYXZhU2NyaXB0LlxuICAgKiBUaGlzIG5lZWRzIHRvIGJlIGRvbmUgdGhhbmtzIHRvIG9sZGVyIEludGVybmV0IEV4cGxvcmVyIGJyb3dzZXJzIHdoaWNoIGhhdmVcbiAgICogYSBidW5jaCBvZiBDU1MgYnVncy5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGZpeFN0eWxlcyAoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgdGhpcy5fYmluZEV2ZW50cygpXG5cbiAgICBpZiAodGhpcy5fbmVlZHNTdHlsZUZpeGVzKSB7XG4gICAgICB0aGlzLmZpeFN0eWxlcygpXG4gICAgICBpZiAodGhpcy5jb250ZXh0Lm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5maXhTdHlsZXMpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICB0aGlzLl91bmJpbmRFdmVudHMoKVxuXG4gICAgY29uc3Qgb3B0aW9ucyA9ICh0aGlzLmNvbnRleHQgJiYgdGhpcy5jb250ZXh0Lm9wdGlvbnMpIHx8IHRoaXMucHJvcHMub3B0aW9uc1xuICAgIGlmIChvcHRpb25zLnJlc3BvbnNpdmUgJiYgdGhpcy5fbmVlZHNTdHlsZUZpeGVzKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5maXhTdHlsZXMpXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSEVMUEVSIEZVTkNUSU9OU1xcXG5cbiAgLyoqXG4gICAqIEJpbmRzIHRoZSBpbnN0YW5jZSBtZXRob2RzIHdpdGggdGhlIGdpdmVuIG5hbWVzXG4gICAqIHRvIHRoZSBjbGFzcyBjb250ZXh0XG4gICAqIEBwYXJhbSAge0FycmF5LjxTdHJpbmc+fSAuLi5mbk5hbWVzXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9iaW5kQWxsICguLi5mbk5hbWVzKSB7XG4gICAgZm5OYW1lcy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHRoaXNbbmFtZV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBfYmluZEFsbDogXFxgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9LiR7bmFtZX1cXGAgaXMgbm90IGEgZnVuY3Rpb24uYClcbiAgICAgIH1cbiAgICAgIHRoaXNbbmFtZV0gPSB0aGlzW25hbWVdLmJpbmQodGhpcylcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHRyYW5zbGF0aW9uIGZvciBga2V5YFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGtleVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IFtpbnRlcnBvbGF0aW9uT3B0aW9uc11cbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgX3QgKGtleSwgaW50ZXJwb2xhdGlvbk9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnVpLnRyYW5zbGF0ZShrZXksIGludGVycG9sYXRpb25PcHRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIG1ldGhvZCBmb3IgVUkuaGVscGVycy5hc3NldFBhdGhcbiAgICogQHBhcmFtIHs/fSAuLi5hcmdzXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9nZXRBc3NldFBhdGggKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnVpLmdldEFzc2V0UGF0aCguLi5hcmdzKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlQgSEFORExJTkdcblxuICAvKipcbiAgICogQmluZHMgdGhlIGV2ZW50cyBpbiBfZXZlbnRzXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9iaW5kRXZlbnRzICgpIHtcbiAgICBmb3IgKGxldCBldmVudE5hbWUgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV1cbiAgICAgIHRoaXMuY29udGV4dC5tZWRpYXRvci5vbihldmVudE5hbWUsIGhhbmRsZXIpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuYmluZHMgdGhlIGV2ZW50cyBpbiBfZXZlbnRzXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF91bmJpbmRFdmVudHMgKCkge1xuICAgIGZvciAobGV0IGV2ZW50TmFtZSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbZXZlbnROYW1lXVxuICAgICAgdGhpcy5jb250ZXh0Lm1lZGlhdG9yLm9mZihldmVudE5hbWUsIGhhbmRsZXIpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVtaXRzIGFuIGV2ZW50IHdpdGggdGhlIGdpdmVuIGV2ZW50IG5hbWUgYW5kIGFyZ3VtZW50cyB0aHJvdWdoXG4gICAqIHRoZSBtZWRpYXRvclxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0gIHtBcnJheS48Kj59IC4uLmFyZ3NcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX2VtaXRFdmVudCAoZXZlbnROYW1lLCAuLi5hcmdzKSB7XG4gICAgdGhpcy5jb250ZXh0Lm1lZGlhdG9yLmVtaXQoZXZlbnROYW1lLCAuLi5hcmdzKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhlIFJlYWN0QkVNLmVsZW1lbnQgcmV0dXJuZWQgYnkgYHJlbmRlcldpdGhCRU1gIGludG9cbiAgICogUmVhY3QuRWxlbWVudCBvYmplY3RzIHdpdGggcHJvcGVyIGNsYXNzIG5hbWVzXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIHJldHVybiA8ZGl2IC8+XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9iYXNlLWNvbXBvbmVudC5qc3giLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICghQlVHR1kgJiYgJG5hdGl2ZSkgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY2FsbC5qc1xuLy8gbW9kdWxlIGlkID0gOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qc1xuLy8gbW9kdWxlIGlkID0gOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDEwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3BlcmZvcm0uanNcbi8vIG1vZHVsZSBpZCA9IDEwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDEwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qc1xuLy8gbW9kdWxlIGlkID0gMTA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2lzLWl0ZXJhYmxlXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9pcy1pdGVyYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2dldC1pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvZ2V0LWl0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgREVGQVVMVFM6IHtcbiAgICBGSUxURVJTOiBbXG4gICAgICAvLyB7XG4gICAgICAvLyAgIGlkZW50aWZpZXI6ICdpbWdseV9maWx0ZXJzX3Rlc3QnLFxuICAgICAgLy8gICBkZWZhdWx0TmFtZTogJ1Rlc3QnLFxuICAgICAgLy8gICBmaWx0ZXJzOiBbXG4gICAgICAvLyAgICAge1xuICAgICAgLy8gICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9pZGVudGl0eV81XzUnLFxuICAgICAgLy8gICAgICAgZGVmYXVsdE5hbWU6ICdJZGVudGl0eSA1eDUnLFxuICAgICAgLy8gICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9pZGVudGl0eV81XzVfMTI4LnBuZydcbiAgICAgIC8vICAgICB9XG4gICAgICAvLyAgIF1cbiAgICAgIC8vIH0sXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9maWx0ZXJzX2FuYWxvZycsXG4gICAgICAgIGRlZmF1bHROYW1lOiAnQW5hbG9nJyxcbiAgICAgICAgZmlsdGVyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfY29vbCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0Nvb2wnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9jb29sXzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9ibHVlcycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JsdWVzJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfYmx1ZXNfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9ibHVlc2hhZG93cycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JsdWUgU2hhZG93cycsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X2JsdWVzaGFkb3dzXzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9rNicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0s2JyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfazZfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9rZHluYW1pYycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0tEeW5hbWljJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfa2R5bmFtaWNfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X2x1Y2lkJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnTHVjaWQnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9sdWNpZF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfcGFsZScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1BhbGUnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9wYWxlXzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZpbHRlcnNfYncnLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ0JsYWNrICYgV2hpdGUnLFxuICAgICAgICBmaWx0ZXJzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9zaW4nLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdTaW4nLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9zaW5fOF84XzUxMi5wbmcnLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogNTEyLFxuICAgICAgICAgICAgaG9yaXpvbnRhbFRpbGVDb3VudDogOCxcbiAgICAgICAgICAgIHZlcnRpY2FsVGlsZUNvdW50OiA4XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X2FkMTkyMCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJzE5MjAgQS5ELicsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X2FkMTkyMF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfYncnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdCICYgVycsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X2J3XzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9saXRobycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0xpdGhvJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfbGl0aG9fNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X3BsYXRlJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnUGxhdGUnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9wbGF0ZV81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfeDQwMCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1g0MDAnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF94NDAwXzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZpbHRlcnNfcmV0cm8nLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ1JldHJvJyxcbiAgICAgICAgZmlsdGVyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfY2Vsc2l1cycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0NlbHNpdXMnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9jZWxzaXVzXzhfOF81MTIucG5nJyxcbiAgICAgICAgICAgIHJlc29sdXRpb246IDUxMixcbiAgICAgICAgICAgIGhvcml6b250YWxUaWxlQ291bnQ6IDgsXG4gICAgICAgICAgICB2ZXJ0aWNhbFRpbGVDb3VudDogOFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9rMicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0syJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfazJfOF84XzUxMi5wbmcnLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogNTEyLFxuICAgICAgICAgICAgaG9yaXpvbnRhbFRpbGVDb3VudDogOCxcbiAgICAgICAgICAgIHZlcnRpY2FsVGlsZUNvdW50OiA4XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X3NlcGlhaGlnaCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1NlcGlhIEhpZ2gnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9zZXBpYWhpZ2hfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X2FuY2llbnQnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdBbmNpZW50JyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfYW5jaWVudF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfY2xhc3NpYycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0NsYXNzaWMnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9jbGFzc2ljXzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9laWdodGllcycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0VpZ2h0aWVzJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfZWlnaHRpZXNfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X2VsZGVyJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnRWxkZXInLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9lbGRlcl81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfZ2xhbScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0dsYW0nLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9nbGFtXzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9nb2JibGluJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnR29iYmxpbicsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X2dvYmJsaW5fNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X29yY2hpZCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ09yY2hpZCcsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X29yY2hpZF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfc2V2ZW50aWVzJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnU2V2ZW50aWVzJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfc2V2ZW50aWVzXzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZpbHRlcnNfc3BlY2lhbCcsXG4gICAgICAgIGRlZmF1bHROYW1lOiAnU3BlY2lhbCcsXG4gICAgICAgIGZpbHRlcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X2ZpeGllJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnRml4aWUnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9maXhpZV84XzhfNTEyLnBuZycsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiA1MTIsXG4gICAgICAgICAgICBob3Jpem9udGFsVGlsZUNvdW50OiA4LFxuICAgICAgICAgICAgdmVydGljYWxUaWxlQ291bnQ6IDhcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfY29sb3JmdWwnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdDb2xvcmZ1bCcsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X2NvbG9yZnVsXzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9jb3R0b25jYW5keScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0NvdHRvbiBDYW5keScsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X2NvdHRvbmNhbmR5XzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9mb29kJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnRm9vZCcsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X2Zvb2RfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X2hpZ2hjb250cmFzdCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0hpZ2ggQ29udHJhc3QnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9oaWdoY29udHJhc3RfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X2sxJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnSzEnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9rMV81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfbG9tbzEwMCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0xvbW8gMTAwJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfbG9tbzEwMF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfbmVhdCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ05lYXQnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9uZWF0XzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9ub2dyZWVuJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnTm8gR3JlZW4nLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9ub2dyZWVuXzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9wb2xhNjY5JyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnUG9sYSA2NjknLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9wb2xhNjY5XzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfcG9sYXN4JyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnUG9sYSBTWCcsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X3BvbGFzeF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfcHJvNDAwJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnUHJvIDQwMCcsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X3BybzQwMF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfdHdpbGlnaHQnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdUd2lsaWdodCcsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X3R3aWxpZ2h0XzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9zZXR0bGVkJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnU2V0dGxlZCcsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X3NldHRsZWRfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X3N0ZWVsJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnU3RlZWwnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9zdGVlbF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9maWx0ZXJzX3N1bW1lcicsXG4gICAgICAgIGRlZmF1bHROYW1lOiAnU3VtbWVyJyxcbiAgICAgICAgZmlsdGVyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfdGV4YXMnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdUZXhhcycsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X3RleGFzXzhfOF81MTIucG5nJyxcbiAgICAgICAgICAgIHJlc29sdXRpb246IDUxMixcbiAgICAgICAgICAgIGhvcml6b250YWxUaWxlQ291bnQ6IDgsXG4gICAgICAgICAgICB2ZXJ0aWNhbFRpbGVDb3VudDogOFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9tZWxsb3cnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdNZWxsb3cnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9tZWxsb3dfOF84XzUxMi5wbmcnLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogNTEyLFxuICAgICAgICAgICAgaG9yaXpvbnRhbFRpbGVDb3VudDogOCxcbiAgICAgICAgICAgIHZlcnRpY2FsVGlsZUNvdW50OiA4XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X2NoZXN0JyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnQ2hlc3QnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9jaGVzdF84XzhfNTEyLnBuZycsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiA1MTIsXG4gICAgICAgICAgICBob3Jpem9udGFsVGlsZUNvdW50OiA4LFxuICAgICAgICAgICAgdmVydGljYWxUaWxlQ291bnQ6IDhcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfY3JlYW15JyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnQ3JlYW15JyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfY3JlYW15XzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9ldmVuaW5nJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnRXZlbmluZycsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X2V2ZW5pbmdfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X2ZhbGwnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdGYWxsJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfZmFsbF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfZnJvbnQnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdGcm9udCcsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X2Zyb250XzhfOF81MTIucG5nJyxcbiAgICAgICAgICAgIHJlc29sdXRpb246IDUxMixcbiAgICAgICAgICAgIGhvcml6b250YWxUaWxlQ291bnQ6IDgsXG4gICAgICAgICAgICB2ZXJ0aWNhbFRpbGVDb3VudDogOFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9oaWdoY2FyYicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0hpZ2ggQ2FyYicsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X2hpZ2hjYXJiXzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9rZWVuJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnS2VlbicsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X2tlZW5fNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X3BpdGNoZWQnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdQaXRjaGVkJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfcGl0Y2hlZF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfc29mdCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1NvZnQnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9zb2Z0XzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9zdW1tZXInLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdTdW1tZXInLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9zdW1tZXJfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X3N1bnNldCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1N1bnNldCcsXG4gICAgICAgICAgICBsdXRJbWFnZTogJ2ZpbHRlcnMvaW1nbHlfbHV0X3N1bnNldF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9sdXRfdGVuZGVyJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnVGVuZGVyJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfdGVuZGVyXzVfNV8xMjgucG5nJ1xuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZpbHRlcnNfd2ludGVyJyxcbiAgICAgICAgZGVmYXVsdE5hbWU6ICdXaW50ZXInLFxuICAgICAgICBmaWx0ZXJzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9mcmlkZ2UnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdGcmlkZ2UnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9mcmlkZ2VfOF84XzUxMi5wbmcnLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogNTEyLFxuICAgICAgICAgICAgaG9yaXpvbnRhbFRpbGVDb3VudDogOCxcbiAgICAgICAgICAgIHZlcnRpY2FsVGlsZUNvdW50OiA4XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X2JsZWFjaGVkJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnQmxlYWNoZWQnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9ibGVhY2hlZF81XzVfMTI4LnBuZydcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfbHV0X2JsZWFjaGVkYmx1ZScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JsZWFjaGVkIEJsdWUnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9ibGVhY2hlZGJsdWVfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9icmVlemUnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdCcmVlemUnLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF9icmVlemVfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9sZW5pbicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0xlbmluJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfbGVuaW5fNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF9xdW96aScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1F1b3ppJyxcbiAgICAgICAgICAgIGx1dEltYWdlOiAnZmlsdGVycy9pbWdseV9sdXRfcXVvemlfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2x1dF93aW50ZXInLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdXaW50ZXInLFxuICAgICAgICAgICAgbHV0SW1hZ2U6ICdmaWx0ZXJzL2ltZ2x5X2x1dF93aW50ZXJfNV81XzEyOC5wbmcnXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXSxcbiAgICBPVkVSTEFZUzogW1xuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfb3ZlcmxheV9nb2xkZW4nLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ0dvbGRlbicsXG4gICAgICAgIGltYWdlOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV9nb2xkZW4uanBnJyxcbiAgICAgICAgdGh1bWJuYWlsOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV9nb2xkZW5fdGh1bWIuanBnJyxcbiAgICAgICAgYmxlbmRNb2RlOiAnbGlnaHRlbidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9vdmVybGF5X2Jva2VoJyxcbiAgICAgICAgZGVmYXVsdE5hbWU6ICdCb2tlaCcsXG4gICAgICAgIGltYWdlOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV9ib2tlaC5qcGcnLFxuICAgICAgICB0aHVtYm5haWw6ICdvdmVybGF5cy9pbWdseV9vdmVybGF5X2Jva2VoX3RodW1iLmpwZycsXG4gICAgICAgIGJsZW5kTW9kZTogJ2xpZ2h0ZW4nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfb3ZlcmxheV9oZWFydHMnLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ0hlYXJ0cycsXG4gICAgICAgIGltYWdlOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV9oZWFydHMuanBnJyxcbiAgICAgICAgdGh1bWJuYWlsOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV9oZWFydHNfdGh1bWIuanBnJyxcbiAgICAgICAgYmxlbmRNb2RlOiAnc2NyZWVuJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X292ZXJsYXlfbGlnaHRsZWFrMScsXG4gICAgICAgIGRlZmF1bHROYW1lOiAnTGlnaHQgTGVhaycsXG4gICAgICAgIGltYWdlOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV9saWdodGxlYWsxLmpwZycsXG4gICAgICAgIHRodW1ibmFpbDogJ292ZXJsYXlzL2ltZ2x5X292ZXJsYXlfbGlnaHRsZWFrMV90aHVtYi5qcGcnLFxuICAgICAgICBibGVuZE1vZGU6ICdzY3JlZW4nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfb3ZlcmxheV9saWdodGxlYWsyJyxcbiAgICAgICAgZGVmYXVsdE5hbWU6ICdMaWdodCBMZWFrIDInLFxuICAgICAgICBpbWFnZTogJ292ZXJsYXlzL2ltZ2x5X292ZXJsYXlfbGlnaHRsZWFrMi5qcGcnLFxuICAgICAgICB0aHVtYm5haWw6ICdvdmVybGF5cy9pbWdseV9vdmVybGF5X2xpZ2h0bGVhazJfdGh1bWIuanBnJyxcbiAgICAgICAgYmxlbmRNb2RlOiAnbGlnaHRlbidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9vdmVybGF5X3JhaW4nLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ1JhaW4nLFxuICAgICAgICBpbWFnZTogJ292ZXJsYXlzL2ltZ2x5X292ZXJsYXlfcmFpbi5qcGcnLFxuICAgICAgICB0aHVtYm5haWw6ICdvdmVybGF5cy9pbWdseV9vdmVybGF5X3JhaW5fdGh1bWIuanBnJyxcbiAgICAgICAgYmxlbmRNb2RlOiAnb3ZlcmxheSdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9vdmVybGF5X3dvb2QnLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ1dvb2QnLFxuICAgICAgICBpbWFnZTogJ292ZXJsYXlzL2ltZ2x5X292ZXJsYXlfd29vZC5qcGcnLFxuICAgICAgICB0aHVtYm5haWw6ICdvdmVybGF5cy9pbWdseV9vdmVybGF5X3dvb2RfdGh1bWIuanBnJyxcbiAgICAgICAgYmxlbmRNb2RlOiAnbXVsdGlwbHknXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfb3ZlcmxheV9tb3NhaWMnLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ01vc2FpYycsXG4gICAgICAgIGltYWdlOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV9tb3NhaWMuanBnJyxcbiAgICAgICAgdGh1bWJuYWlsOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV9tb3NhaWNfdGh1bWIuanBnJyxcbiAgICAgICAgYmxlbmRNb2RlOiAnbXVsdGlwbHknXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfb3ZlcmxheV9jaG9wJyxcbiAgICAgICAgZGVmYXVsdE5hbWU6ICdDaG9wJyxcbiAgICAgICAgaW1hZ2U6ICdvdmVybGF5cy9pbWdseV9vdmVybGF5X2Nob3AuanBnJyxcbiAgICAgICAgdGh1bWJuYWlsOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV9jaG9wX3RodW1iLmpwZycsXG4gICAgICAgIGJsZW5kTW9kZTogJ211bHRpcGx5J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X292ZXJsYXlfdmludGFnZScsXG4gICAgICAgIGRlZmF1bHROYW1lOiAnVmludGFnZScsXG4gICAgICAgIGltYWdlOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV92aW50YWdlLmpwZycsXG4gICAgICAgIHRodW1ibmFpbDogJ292ZXJsYXlzL2ltZ2x5X292ZXJsYXlfdmludGFnZV90aHVtYi5qcGcnLFxuICAgICAgICBibGVuZE1vZGU6ICdkYXJrZW4nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfb3ZlcmxheV9tZXRhbCcsXG4gICAgICAgIGRlZmF1bHROYW1lOiAnTWV0YWwnLFxuICAgICAgICBpbWFnZTogJ292ZXJsYXlzL2ltZ2x5X292ZXJsYXlfbWV0YWwuanBnJyxcbiAgICAgICAgdGh1bWJuYWlsOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV9tZXRhbF90aHVtYi5qcGcnLFxuICAgICAgICBibGVuZE1vZGU6ICdvdmVybGF5J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X292ZXJsYXlfcGFwZXInLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ1BhcGVyJyxcbiAgICAgICAgaW1hZ2U6ICdvdmVybGF5cy9pbWdseV9vdmVybGF5X3BhcGVyLmpwZycsXG4gICAgICAgIHRodW1ibmFpbDogJ292ZXJsYXlzL2ltZ2x5X292ZXJsYXlfcGFwZXJfdGh1bWIuanBnJyxcbiAgICAgICAgYmxlbmRNb2RlOiAnbXVsdGlwbHknXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfb3ZlcmxheV9wYWludGluZycsXG4gICAgICAgIGRlZmF1bHROYW1lOiAnUGFpbnRpbmcnLFxuICAgICAgICBpbWFnZTogJ292ZXJsYXlzL2ltZ2x5X292ZXJsYXlfcGFpbnRpbmcuanBnJyxcbiAgICAgICAgdGh1bWJuYWlsOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV9wYWludGluZ190aHVtYi5qcGcnLFxuICAgICAgICBibGVuZE1vZGU6ICdvdmVybGF5J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X292ZXJsYXlfZ3JhaW4nLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ0dyYWluJyxcbiAgICAgICAgaW1hZ2U6ICdvdmVybGF5cy9pbWdseV9vdmVybGF5X2dyYWluLmpwZycsXG4gICAgICAgIHRodW1ibmFpbDogJ292ZXJsYXlzL2ltZ2x5X292ZXJsYXlfZ3JhaW5fdGh1bWIuanBnJyxcbiAgICAgICAgYmxlbmRNb2RlOiAnb3ZlcmxheSdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9vdmVybGF5X2Nsb3VkcycsXG4gICAgICAgIGRlZmF1bHROYW1lOiAnQ2xvdWRzJyxcbiAgICAgICAgaW1hZ2U6ICdvdmVybGF5cy9pbWdseV9vdmVybGF5X2Nsb3Vkcy5qcGcnLFxuICAgICAgICB0aHVtYm5haWw6ICdvdmVybGF5cy9pbWdseV9vdmVybGF5X2Nsb3Vkc190aHVtYi5qcGcnLFxuICAgICAgICBibGVuZE1vZGU6ICdzb2Z0TGlnaHQnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfb3ZlcmxheV93YWxsMScsXG4gICAgICAgIGRlZmF1bHROYW1lOiAnV2FsbCcsXG4gICAgICAgIGltYWdlOiAnb3ZlcmxheXMvaW1nbHlfb3ZlcmxheV93YWxsMS5qcGcnLFxuICAgICAgICB0aHVtYm5haWw6ICdvdmVybGF5cy9pbWdseV9vdmVybGF5X3dhbGwxX3RodW1iLmpwZycsXG4gICAgICAgIGJsZW5kTW9kZTogJ2xpZ2h0ZW4nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfb3ZlcmxheV93YWxsMicsXG4gICAgICAgIGRlZmF1bHROYW1lOiAnV2FsbCAyJyxcbiAgICAgICAgaW1hZ2U6ICdvdmVybGF5cy9pbWdseV9vdmVybGF5X3dhbGwyLmpwZycsXG4gICAgICAgIHRodW1ibmFpbDogJ292ZXJsYXlzL2ltZ2x5X292ZXJsYXlfd2FsbDJfdGh1bWIuanBnJyxcbiAgICAgICAgYmxlbmRNb2RlOiAnb3ZlcmxheSdcbiAgICAgIH1cbiAgICBdLFxuICAgIEZSQU1FX0NBVEVHT1JJRVM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZyYW1lX2dlbmVyaWMnLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ0dlbmVyaWMnLFxuICAgICAgICBtZXRhRGF0YToge1xuICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogJ2ZyYW1lcy9nZW5lcmljLnBuZycgLy8gTm90IHVzZWQgeWV0XG4gICAgICAgIH0sXG4gICAgICAgIGZyYW1lczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mcmFtZV9kaWEnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdEaWEnLFxuICAgICAgICAgICAgbGF5b3V0TW9kZTogJ2hvcml6b250YWwtaW5zaWRlJyxcbiAgICAgICAgICAgIHRodW1ibmFpbDogJ2ZyYW1lcy9pbWdseV9mcmFtZV9kaWEvaW1nbHlfZnJhbWVfZGlhX3RodW1iLnBuZycsXG4gICAgICAgICAgICBpbWFnZUdyb3Vwczoge1xuICAgICAgICAgICAgICB0b3A6IHtcbiAgICAgICAgICAgICAgICBtaWQ6IHtcbiAgICAgICAgICAgICAgICAgIGltYWdlOiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2RpYS9pbWdseV9mcmFtZV9kaWFfdG9wLnBuZycsXG4gICAgICAgICAgICAgICAgICBtb2RlOiAncmVwZWF0J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbGVmdDoge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2RpYS9pbWdseV9mcmFtZV9kaWFfdG9wX2Nvcm5lcl9sZWZ0LnBuZycsXG4gICAgICAgICAgICAgICAgbWlkOiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2RpYS9pbWdseV9mcmFtZV9kaWFfbGVmdC5wbmcnLFxuICAgICAgICAgICAgICAgIGVuZDogJ2ZyYW1lcy9pbWdseV9mcmFtZV9kaWEvaW1nbHlfZnJhbWVfZGlhX2JvdHRvbV9jb3JuZXJfbGVmdC5wbmcnXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJpZ2h0OiB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6ICdmcmFtZXMvaW1nbHlfZnJhbWVfZGlhL2ltZ2x5X2ZyYW1lX2RpYV90b3BfY29ybmVyX3JpZ2h0LnBuZycsXG4gICAgICAgICAgICAgICAgbWlkOiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2RpYS9pbWdseV9mcmFtZV9kaWFfcmlnaHQucG5nJyxcbiAgICAgICAgICAgICAgICBlbmQ6ICdmcmFtZXMvaW1nbHlfZnJhbWVfZGlhL2ltZ2x5X2ZyYW1lX2RpYV9ib3R0b21fY29ybmVyX3JpZ2h0LnBuZydcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYm90dG9tOiB7XG4gICAgICAgICAgICAgICAgbWlkOiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogJ2ZyYW1lcy9pbWdseV9mcmFtZV9kaWEvaW1nbHlfZnJhbWVfZGlhX2JvdHRvbS5wbmcnLFxuICAgICAgICAgICAgICAgICAgbW9kZTogJ3JlcGVhdCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mcmFtZV9hcnRfZGVjb3InLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdBcnQgRGVjb3InLFxuICAgICAgICAgICAgdGludGFibGU6IHRydWUsXG4gICAgICAgICAgICBsYXlvdXRNb2RlOiAnaG9yaXpvbnRhbC1pbnNpZGUnLFxuICAgICAgICAgICAgdGh1bWJuYWlsOiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2FydF9kZWNvci9pbWdseV9mcmFtZV9hcnRfZGVjb3JfdGh1bWIucG5nJyxcbiAgICAgICAgICAgIGltYWdlR3JvdXBzOiB7XG4gICAgICAgICAgICAgIHRvcDoge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2FydF9kZWNvci9pbWdseV9mcmFtZV9hcnRfZGVjb3JfdG9wX2Nvcm5lcl9sZWZ0LnBuZycsXG4gICAgICAgICAgICAgICAgbWlkOiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogJ2ZyYW1lcy9pbWdseV9mcmFtZV9hcnRfZGVjb3IvaW1nbHlfZnJhbWVfYXJ0X2RlY29yX3RvcC5wbmcnLFxuICAgICAgICAgICAgICAgICAgbW9kZTogJ3N0cmV0Y2gnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbmQ6ICdmcmFtZXMvaW1nbHlfZnJhbWVfYXJ0X2RlY29yL2ltZ2x5X2ZyYW1lX2FydF9kZWNvcl90b3BfY29ybmVyX3JpZ2h0LnBuZydcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbGVmdDoge1xuICAgICAgICAgICAgICAgIG1pZDoge1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6ICdmcmFtZXMvaW1nbHlfZnJhbWVfYXJ0X2RlY29yL2ltZ2x5X2ZyYW1lX2FydF9kZWNvcl9sZWZ0LnBuZycsXG4gICAgICAgICAgICAgICAgICBtb2RlOiAnc3RyZXRjaCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJpZ2h0OiB7XG4gICAgICAgICAgICAgICAgbWlkOiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogJ2ZyYW1lcy9pbWdseV9mcmFtZV9hcnRfZGVjb3IvaW1nbHlfZnJhbWVfYXJ0X2RlY29yX3JpZ2h0LnBuZycsXG4gICAgICAgICAgICAgICAgICBtb2RlOiAnc3RyZXRjaCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJvdHRvbToge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2FydF9kZWNvci9pbWdseV9mcmFtZV9hcnRfZGVjb3JfYm90dG9tX2Nvcm5lcl9sZWZ0LnBuZycsXG4gICAgICAgICAgICAgICAgbWlkOiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogJ2ZyYW1lcy9pbWdseV9mcmFtZV9hcnRfZGVjb3IvaW1nbHlfZnJhbWVfYXJ0X2RlY29yX2JvdHRvbS5wbmcnLFxuICAgICAgICAgICAgICAgICAgbW9kZTogJ3N0cmV0Y2gnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbmQ6ICdmcmFtZXMvaW1nbHlfZnJhbWVfYXJ0X2RlY29yL2ltZ2x5X2ZyYW1lX2FydF9kZWNvcl9ib3R0b21fY29ybmVyX3JpZ2h0LnBuZydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZyYW1lX2JsYWNrX3Bhc3NlcGFydG91dCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JsYWNrIFBhc3NlcGFydG91dCcsXG4gICAgICAgICAgICBsYXlvdXRNb2RlOiAnaG9yaXpvbnRhbC1pbnNpZGUnLFxuICAgICAgICAgICAgdGh1bWJuYWlsOiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2JsYWNrX3Bhc3NlcGFydG91dC9pbWdseV9mcmFtZV9ibGFja19wYXNzZXBhcnRvdXRfdGh1bWIucG5nJyxcbiAgICAgICAgICAgIGltYWdlR3JvdXBzOiB7XG4gICAgICAgICAgICAgIHRvcDoge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2JsYWNrX3Bhc3NlcGFydG91dC9pbWdseV9mcmFtZV9ibGFja19wYXNzZXBhcnRvdXRfdG9wX2Nvcm5lcl9sZWZ0LnBuZycsXG4gICAgICAgICAgICAgICAgbWlkOiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogJ2ZyYW1lcy9pbWdseV9mcmFtZV9ibGFja19wYXNzZXBhcnRvdXQvaW1nbHlfZnJhbWVfYmxhY2tfcGFzc2VwYXJ0b3V0X3RvcC5wbmcnLFxuICAgICAgICAgICAgICAgICAgbW9kZTogJ3N0cmV0Y2gnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbmQ6ICdmcmFtZXMvaW1nbHlfZnJhbWVfYmxhY2tfcGFzc2VwYXJ0b3V0L2ltZ2x5X2ZyYW1lX2JsYWNrX3Bhc3NlcGFydG91dF90b3BfY29ybmVyX3JpZ2h0LnBuZydcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbGVmdDoge1xuICAgICAgICAgICAgICAgIG1pZDoge1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6ICdmcmFtZXMvaW1nbHlfZnJhbWVfYmxhY2tfcGFzc2VwYXJ0b3V0L2ltZ2x5X2ZyYW1lX2JsYWNrX3Bhc3NlcGFydG91dF9sZWZ0LnBuZycsXG4gICAgICAgICAgICAgICAgICBtb2RlOiAnc3RyZXRjaCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJpZ2h0OiB7XG4gICAgICAgICAgICAgICAgbWlkOiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogJ2ZyYW1lcy9pbWdseV9mcmFtZV9ibGFja19wYXNzZXBhcnRvdXQvaW1nbHlfZnJhbWVfYmxhY2tfcGFzc2VwYXJ0b3V0X3JpZ2h0LnBuZycsXG4gICAgICAgICAgICAgICAgICBtb2RlOiAnc3RyZXRjaCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJvdHRvbToge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2JsYWNrX3Bhc3NlcGFydG91dC9pbWdseV9mcmFtZV9ibGFja19wYXNzZXBhcnRvdXRfYm90dG9tX2Nvcm5lcl9sZWZ0LnBuZycsXG4gICAgICAgICAgICAgICAgbWlkOiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogJ2ZyYW1lcy9pbWdseV9mcmFtZV9ibGFja19wYXNzZXBhcnRvdXQvaW1nbHlfZnJhbWVfYmxhY2tfcGFzc2VwYXJ0b3V0X2JvdHRvbS5wbmcnLFxuICAgICAgICAgICAgICAgICAgbW9kZTogJ3N0cmV0Y2gnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbmQ6ICdmcmFtZXMvaW1nbHlfZnJhbWVfYmxhY2tfcGFzc2VwYXJ0b3V0L2ltZ2x5X2ZyYW1lX2JsYWNrX3Bhc3NlcGFydG91dF9ib3R0b21fY29ybmVyX3JpZ2h0LnBuZydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZyYW1lX2xvd3BvbHlfc2hhZG93JyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnTG93IFBvbHknLFxuICAgICAgICAgICAgbGF5b3V0TW9kZTogJ2hvcml6b250YWwtaW5zaWRlJyxcbiAgICAgICAgICAgIHRodW1ibmFpbDogJ2ZyYW1lcy9pbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvdy9pbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvd190aHVtYi5wbmcnLFxuICAgICAgICAgICAgaW1hZ2VHcm91cHM6IHtcbiAgICAgICAgICAgICAgdG9wOiB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6ICdmcmFtZXMvaW1nbHlfZnJhbWVfbG93cG9seV9zaGFkb3cvaW1nbHlfZnJhbWVfbG93cG9seV9zaGFkb3dfdG9wX2Nvcm5lcl9sZWZ0LnBuZycsXG4gICAgICAgICAgICAgICAgbWlkOiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogJ2ZyYW1lcy9pbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvdy9pbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvd190b3AucG5nJyxcbiAgICAgICAgICAgICAgICAgIG1vZGU6ICdzdHJldGNoJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW5kOiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2xvd3BvbHlfc2hhZG93L2ltZ2x5X2ZyYW1lX2xvd3BvbHlfc2hhZG93X3RvcF9jb3JuZXJfcmlnaHQucG5nJ1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBsZWZ0OiB7XG4gICAgICAgICAgICAgICAgbWlkOiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogJ2ZyYW1lcy9pbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvdy9pbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvd19sZWZ0LnBuZycsXG4gICAgICAgICAgICAgICAgICBtb2RlOiAnc3RyZXRjaCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJpZ2h0OiB7XG4gICAgICAgICAgICAgICAgbWlkOiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogJ2ZyYW1lcy9pbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvdy9pbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvd19yaWdodC5wbmcnLFxuICAgICAgICAgICAgICAgICAgbW9kZTogJ3N0cmV0Y2gnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBib3R0b206IHtcbiAgICAgICAgICAgICAgICBzdGFydDogJ2ZyYW1lcy9pbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvdy9pbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvd19ib3R0b21fY29ybmVyX2xlZnQucG5nJyxcbiAgICAgICAgICAgICAgICBtaWQ6IHtcbiAgICAgICAgICAgICAgICAgIGltYWdlOiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX2xvd3BvbHlfc2hhZG93L2ltZ2x5X2ZyYW1lX2xvd3BvbHlfc2hhZG93X2JvdHRvbS5wbmcnLFxuICAgICAgICAgICAgICAgICAgbW9kZTogJ3N0cmV0Y2gnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbmQ6ICdmcmFtZXMvaW1nbHlfZnJhbWVfbG93cG9seV9zaGFkb3cvaW1nbHlfZnJhbWVfbG93cG9seV9zaGFkb3dfYm90dG9tX2Nvcm5lcl9yaWdodC5wbmcnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mcmFtZV93b29kX3Bhc3NlcGFydG91dCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1dvb2QgUGFzc2VwYXJ0b3V0JyxcbiAgICAgICAgICAgIGxheW91dE1vZGU6ICdob3Jpem9udGFsLWluc2lkZScsXG4gICAgICAgICAgICB0aHVtYm5haWw6ICdmcmFtZXMvaW1nbHlfZnJhbWVfd29vZF9wYXNzZXBhcnRvdXQvaW1nbHlfZnJhbWVfd29vZF9wYXNzZXBhcnRvdXRfdGh1bWIucG5nJyxcbiAgICAgICAgICAgIGltYWdlR3JvdXBzOiB7XG4gICAgICAgICAgICAgIHRvcDoge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX3dvb2RfcGFzc2VwYXJ0b3V0L2ltZ2x5X2ZyYW1lX3dvb2RfcGFzc2VwYXJ0b3V0X3RvcF9jb3JuZXJfbGVmdC5wbmcnLFxuICAgICAgICAgICAgICAgIG1pZDoge1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6ICdmcmFtZXMvaW1nbHlfZnJhbWVfd29vZF9wYXNzZXBhcnRvdXQvaW1nbHlfZnJhbWVfd29vZF9wYXNzZXBhcnRvdXRfdG9wLnBuZycsXG4gICAgICAgICAgICAgICAgICBtb2RlOiAnc3RyZXRjaCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVuZDogJ2ZyYW1lcy9pbWdseV9mcmFtZV93b29kX3Bhc3NlcGFydG91dC9pbWdseV9mcmFtZV93b29kX3Bhc3NlcGFydG91dF90b3BfY29ybmVyX3JpZ2h0LnBuZydcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbGVmdDoge1xuICAgICAgICAgICAgICAgIG1pZDoge1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6ICdmcmFtZXMvaW1nbHlfZnJhbWVfd29vZF9wYXNzZXBhcnRvdXQvaW1nbHlfZnJhbWVfd29vZF9wYXNzZXBhcnRvdXRfbGVmdC5wbmcnLFxuICAgICAgICAgICAgICAgICAgbW9kZTogJ3N0cmV0Y2gnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICByaWdodDoge1xuICAgICAgICAgICAgICAgIG1pZDoge1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6ICdmcmFtZXMvaW1nbHlfZnJhbWVfd29vZF9wYXNzZXBhcnRvdXQvaW1nbHlfZnJhbWVfd29vZF9wYXNzZXBhcnRvdXRfcmlnaHQucG5nJyxcbiAgICAgICAgICAgICAgICAgIG1vZGU6ICdzdHJldGNoJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYm90dG9tOiB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6ICdmcmFtZXMvaW1nbHlfZnJhbWVfd29vZF9wYXNzZXBhcnRvdXQvaW1nbHlfZnJhbWVfd29vZF9wYXNzZXBhcnRvdXRfYm90dG9tX2Nvcm5lcl9sZWZ0LnBuZycsXG4gICAgICAgICAgICAgICAgbWlkOiB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogJ2ZyYW1lcy9pbWdseV9mcmFtZV93b29kX3Bhc3NlcGFydG91dC9pbWdseV9mcmFtZV93b29kX3Bhc3NlcGFydG91dF9ib3R0b20ucG5nJyxcbiAgICAgICAgICAgICAgICAgIG1vZGU6ICdzdHJldGNoJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW5kOiAnZnJhbWVzL2ltZ2x5X2ZyYW1lX3dvb2RfcGFzc2VwYXJ0b3V0L2ltZ2x5X2ZyYW1lX3dvb2RfcGFzc2VwYXJ0b3V0X2JvdHRvbV9jb3JuZXJfcmlnaHQucG5nJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXSxcbiAgICBTVElDS0VSX0NBVEVHT1JJRVM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zJyxcbiAgICAgICAgZGVmYXVsdE5hbWU6ICdFbW90aWNvbnMnLFxuICAgICAgICAnbWV0YURhdGEnOiB7XG4gICAgICAgICAgJ2JhY2tncm91bmRJbWFnZSc6ICdzdGlja2Vycy9lbW90aWNvbnMvYmFja2dyb3VuZC5wbmcnXG4gICAgICAgIH0sXG4gICAgICAgICdzdGlja2Vycyc6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYWxpZW4nLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdBbGllbicsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYWxpZW4uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FsaWVuLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU4XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYWxpZW4uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbGllbi5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDkzNVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW5nZWwnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdBbmdlbCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW5nZWwuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FuZ2VsLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDY0XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW5nZWwuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbmdlbC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW5ncnknLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdBbmdyeScsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW5ncnkuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FuZ3J5LnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDYyXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW5ncnkuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbmdyeS5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW54aW91cycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0FueGlvdXMnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FueGlvdXMuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FueGlvdXMucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNThcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbnhpb3VzLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW54aW91cy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYXNsZWVwJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnQXNsZWVwJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19hc2xlZXAuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FzbGVlcC5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1OFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FzbGVlcC5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FzbGVlcC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYXR0ZW50aW9uJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnQXR0ZW50aW9uJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19hdHRlbnRpb24uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2F0dGVudGlvbi5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2F0dGVudGlvbi5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2F0dGVudGlvbi5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmFieV9jaGlja2VuJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnQmFieSBDaGlja2VuJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19iYWJ5X2NoaWNrZW4uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JhYnlfY2hpY2tlbi5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0MlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JhYnlfY2hpY2tlbi5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JhYnlfY2hpY2tlbi5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmF0bWFuJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnQmF0bWFuJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19iYXRtYW4uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JhdG1hbi5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1OFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JhdG1hbi5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JhdG1hbi5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmVlcicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JlZXInLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JlZXIuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JlZXIucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNTlcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19iZWVyLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmVlci5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmx1c2gnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdCbHVzaCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmx1c2guc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JsdXNoLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU4XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmx1c2guc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ibHVzaC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYm94ZXInLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdCb3hlcicsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYm94ZXIuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JveGVyLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDYyXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYm94ZXIuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ib3hlci5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYnVzaW5lc3MnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdCdXNpbmVzcycsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYnVzaW5lc3Muc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2J1c2luZXNzLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDYzXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYnVzaW5lc3Muc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19idXNpbmVzcy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfY2hpY2tlbicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0NoaWNrZW4nLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2NoaWNrZW4uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2NoaWNrZW4ucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYzLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNTVcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19jaGlja2VuLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfY2hpY2tlbi5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfY29vbCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0Nvb2wnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2Nvb2wuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2Nvb2wucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNThcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19jb29sLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfY29vbC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfY3J5JyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnQ3J5JyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19jcnkuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2NyeS5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1OFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2NyeS5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2NyeS5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZGVjZWFzZWQnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdEZWNlYXNlZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZGVjZWFzZWQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2RlY2Vhc2VkLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU4XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZGVjZWFzZWQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19kZWNlYXNlZC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZGV2aWwnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdEZXZpbCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZGV2aWwuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2RldmlsLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU4XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZGV2aWwuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19kZXZpbC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZHVja2ZhY2UnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdEdWNrZmFjZScsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZHVja2ZhY2Uuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2R1Y2tmYWNlLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU4XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZHVja2ZhY2Uuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19kdWNrZmFjZS5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZnVyaW91cycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0Z1cmlvdXMnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2Z1cmlvdXMuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2Z1cmlvdXMucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNjFcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19mdXJpb3VzLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZnVyaW91cy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZ3JpbicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0dyaW4nLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2dyaW4uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2dyaW4ucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNThcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ncmluLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZ3Jpbi5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZ3VpdGFyJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnR3VpdGFyJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ndWl0YXIuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2d1aXRhci5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2d1aXRhci5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2d1aXRhci5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGFycnlfcG90dGVyJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnSGFycnkgUG90dGVyJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19oYXJyeV9wb3R0ZXIuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hhcnJ5X3BvdHRlci5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hhcnJ5X3BvdHRlci5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hhcnJ5X3BvdHRlci5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGlwcGllJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnSGlwcGllJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19oaXBwaWUuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hpcHBpZS5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hpcHBpZS5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hpcHBpZS5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGl0bWFuJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnSGl0bWFuJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19oaXRtYW4uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hpdG1hbi5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hpdG1hbi5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hpdG1hbi5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaHVtb3Vyb3VzJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnSHVtb3Vyb3VzJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19odW1vdXJvdXMuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2h1bW91cm91cy5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2NFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2h1bW91cm91cy5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2h1bW91cm91cy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaWRlYScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0lkZWEnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2lkZWEuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2lkZWEucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDY0LFxuICAgICAgICAgICAgICAgIGhlaWdodDogNjJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19pZGVhLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaWRlYS5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaW1wYXRpZW50JyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnSW1wYXRpZW50JyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19pbXBhdGllbnQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2ltcGF0aWVudC5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1OFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2ltcGF0aWVudC5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2ltcGF0aWVudC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfa2lzcycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0tpc3MnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2tpc3Muc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2tpc3MucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNThcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19raXNzLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfa2lzcy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfa2lzc2VzJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnS2lzc2VzJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19raXNzZXMuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2tpc3Nlcy5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1OFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2tpc3Nlcy5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2tpc3Nlcy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbGF1Z2gnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdMYXVnaCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbGF1Z2guc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2xhdWdoLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU4XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbGF1Z2guc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19sYXVnaC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbG91ZF9jcnknLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdMb3VkIENyeScsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbG91ZF9jcnkuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2xvdWRfY3J5LnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2NCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU4XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbG91ZF9jcnkuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19sb3VkX2NyeS5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbG92aW5nJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnTG92aW5nJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19sb3Zpbmcuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2xvdmluZy5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1OFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2xvdmluZy5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2xvdmluZy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbWFza2VkJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnTWFza2VkJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19tYXNrZWQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX21hc2tlZC5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX21hc2tlZC5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX21hc2tlZC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbXVzaWMnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdNdXNpYycsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbXVzaWMuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX211c2ljLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU0XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbXVzaWMuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19tdXNpYy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmVyZCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ05lcmQnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX25lcmQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX25lcmQucG5nJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19uZXJkLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmVyZC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmluamEnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdOaW5qYScsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmluamEuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX25pbmphLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU4XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmluamEuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19uaW5qYS5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbm90X3NwZWFraW5nX3RvX3lvdScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ05vdCBTcGVha2luZyBUbyBZb3UnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX25vdF9zcGVha2luZ190b195b3Uuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX25vdF9zcGVha2luZ190b195b3UucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNThcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ub3Rfc3BlYWtpbmdfdG9feW91LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbm90X3NwZWFraW5nX3RvX3lvdS5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcGlnJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnUGlnJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19waWcuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3BpZy5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjMsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0MVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3BpZy5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3BpZy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcHVtcGtpbicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1B1bXBraW4nLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3B1bXBraW4uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3B1bXBraW4ucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNjBcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19wdW1wa2luLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcHVtcGtpbi5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcXVlc3Rpb24nLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdRdWVzdGlvbicsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcXVlc3Rpb24uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3F1ZXN0aW9uLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDYyXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcXVlc3Rpb24uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19xdWVzdGlvbi5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcmFiYml0JyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnUmFiYml0JyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19yYWJiaXQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3JhYmJpdC5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjUsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0N1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3JhYmJpdC5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3JhYmJpdC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2FkJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnU2FkJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zYWQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NhZC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NhZC5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NhZC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2ljaycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1NpY2snLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NpY2suc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NpY2sucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNThcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zaWNrLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2ljay5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2thdGVib2FyZCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1NrYXRlYm9hcmQnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NrYXRlYm9hcmQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NrYXRlYm9hcmQucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNjRcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19za2F0ZWJvYXJkLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2thdGVib2FyZC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2t1bGwnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdTa3VsbCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2t1bGwuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NrdWxsLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDYyXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2t1bGwuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19za3VsbC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2xlZXB5JyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnU2xlZXB5JyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zbGVlcHkuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NsZWVweS5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NsZWVweS5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NsZWVweS5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc21pbGUnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdTbWlsZScsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc21pbGUuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NtaWxlLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU4XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc21pbGUuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zbWlsZS5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc21va2luZycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1Ntb2tpbmcnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3Ntb2tpbmcuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3Ntb2tpbmcucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNThcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zbW9raW5nLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc21va2luZy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc29iYmluZycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1NvYmJpbmcnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NvYmJpbmcuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NvYmJpbmcucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNTlcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zb2JiaW5nLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc29iYmluZy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3RhcicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1N0YXInLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3N0YXIuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3N0YXIucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDY0LFxuICAgICAgICAgICAgICAgIGhlaWdodDogNjRcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zdGFyLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3Rhci5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3RlYW1pbmdfZnVyaW91cycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1N0ZWFtaW5nIEZ1cmlvdXMnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3N0ZWFtaW5nX2Z1cmlvdXMuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3N0ZWFtaW5nX2Z1cmlvdXMucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNThcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zdGVhbWluZ19mdXJpb3VzLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3RlYW1pbmdfZnVyaW91cy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3VuYmF0aGluZycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1N1bmJhdGhpbmcnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3N1bmJhdGhpbmcuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3N1bmJhdGhpbmcucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNThcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zdW5iYXRoaW5nLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3VuYmF0aGluZy5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfdGlyZWQnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdUaXJlZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfdGlyZWQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3RpcmVkLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfdGlyZWQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc190aXJlZC5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfdG9uZ3VlX291dF93aW5rJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnVG9uZ3VlIE91dCBXaW5rJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc190b25ndWVfb3V0X3dpbmsuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3Rvbmd1ZV9vdXRfd2luay5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1OFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3Rvbmd1ZV9vdXRfd2luay5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3Rvbmd1ZV9vdXRfd2luay5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2F2ZScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1dhdmUnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dhdmUuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dhdmUucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNjBcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc193YXZlLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2F2ZS5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2lkZV9ncmluJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnV2lkZSBHcmluJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc193aWRlX2dyaW4uc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dpZGVfZ3Jpbi5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1OFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dpZGVfZ3Jpbi5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dpZGVfZ3Jpbi5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2luaycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1dpbmsnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dpbmsuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dpbmsucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNThcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL2Vtb3RpY29ucy9zdGlja2Vycy9pbWdseV9zdGlja2VyX2Vtb3RpY29uc193aW5rLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvZW1vdGljb25zL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2luay5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd3Jlc3RsZXInLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdXcmVzdGxlcicsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd3Jlc3RsZXIuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dyZXN0bGVyLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA2MixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd3Jlc3RsZXIuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9lbW90aWNvbnMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX2Vtb3RpY29uc193cmVzdGxlci5wbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9zaGFwZXMnLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ1NoYXBlcycsXG4gICAgICAgICdtZXRhRGF0YSc6IHtcbiAgICAgICAgICAnYmFja2dyb3VuZEltYWdlJzogJ3N0aWNrZXJzL3NoYXBlcy9iYWNrZ3JvdW5kLnBuZydcbiAgICAgICAgfSxcbiAgICAgICAgJ3N0aWNrZXJzJzogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19hcnJvd18wMicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0Fycm93IDEnLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYXJyb3dfMDIuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2Fycm93XzAyLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTIzNlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2Fycm93XzAyLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYXJyb3dfMDIucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMjM2XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19hcnJvd18wMycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0Fycm93IDInLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYXJyb3dfMDMuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2Fycm93XzAzLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAwMFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2Fycm93XzAzLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYXJyb3dfMDMucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wMScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDEnLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDEuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzAxLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAwMFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzAxLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDEucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wNCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDInLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA0LnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTU4OVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA0LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDQucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNTg5XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wNicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDMnLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDYuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA2LnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTczM1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA2LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDYucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNzMzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wOCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDQnLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDguc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA4LnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAwMFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA4LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDgucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xMScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDUnLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTEuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzExLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAwMFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzExLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTEucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xMicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDYnLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTIuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzEyLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAxLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTkwM1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzEyLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTIucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMDEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxOTAzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xMycsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDcnLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTMuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzEzLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTcxOFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzEzLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTMucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNzE4XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xNScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDgnLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTUuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE1LnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxNjE4LFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAwMFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE1LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTUucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDE2MTgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xOCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDknLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTguc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE4LnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMTk4LFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAwMFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE4LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTgucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDExOTgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xOScsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDEwJyxcbiAgICAgICAgICAgIHRpbnRNb2RlOiAnc29saWQnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE5LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL3RodW1icy9pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xOS5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMjEyNyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDQ4MVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE5LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTkucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIxMjcsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0ODFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzIwJyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnQmFkZ2UgMTEnLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMjAuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzIwLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTQwNFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzIwLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMjAucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNDA0XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8yOCcsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDEyJyxcbiAgICAgICAgICAgIHRpbnRNb2RlOiAnc29saWQnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzI4LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL3RodW1icy9pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8yOC5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMjAwMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwMDBcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy9pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8yOC5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzI4LnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAwMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMzInLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdCYWRnZSAxMycsXG4gICAgICAgICAgICB0aW50TW9kZTogJ3NvbGlkJyxcbiAgICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgICBtZWRpYVRodW1iOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy9pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8zMi5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy90aHVtYnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMzIucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDE5NjAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAwXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG1lZGlhQmFzZToge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMzIuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvYmFzZS9pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8zMi5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTk2MCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwMDBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzM1JyxcbiAgICAgICAgICAgIGRlZmF1bHROYW1lOiAnQmFkZ2UgMTQnLFxuICAgICAgICAgICAgdGludE1vZGU6ICdzb2xpZCcsXG4gICAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICAgbWVkaWFUaHVtYjoge1xuICAgICAgICAgICAgICAgIHVyaXM6IFtcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMzUuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICdzdGlja2Vycy9zaGFwZXMvc3RpY2tlcnMvdGh1bWJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzM1LnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAwMlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBtZWRpYUJhc2U6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzM1LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2Jhc2UvaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMzUucG5nJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAyXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8zNicsXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0JhZGdlIDE1JyxcbiAgICAgICAgICAgIHRpbnRNb2RlOiAnc29saWQnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzM2LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL3RodW1icy9pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8zNi5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMjAwMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE2NjhcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy9pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8zNi5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzM2LnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTY2OFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9zaGFwZXNfc3ByYXlfMDEnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdTcHJheSAxJyxcbiAgICAgICAgICAgIHRpbnRNb2RlOiAnc29saWQnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzAxLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL3RodW1icy9pbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wMS5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTkxMixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwMzlcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy9pbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wMS5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzAxLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxOTEyLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAzOVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9zaGFwZXNfc3ByYXlfMDMnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdTcHJheSAyJyxcbiAgICAgICAgICAgIHRpbnRNb2RlOiAnc29saWQnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzAzLnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL3RodW1icy9pbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wMy5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTY4MSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE3NzlcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy9pbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wMy5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzAzLnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxNjgxLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTc3OVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfc3RpY2tlcl9zaGFwZXNfc3ByYXlfMDQnLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdTcHJheSAzJyxcbiAgICAgICAgICAgIHRpbnRNb2RlOiAnc29saWQnLFxuICAgICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAgIG1lZGlhVGh1bWI6IHtcbiAgICAgICAgICAgICAgICB1cmlzOiBbXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzA0LnN2ZycsXG4gICAgICAgICAgICAgICAgICAnc3RpY2tlcnMvc2hhcGVzL3N0aWNrZXJzL3RodW1icy9pbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wNC5wbmcnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTQwNyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDIyNDhcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbWVkaWFCYXNlOiB7XG4gICAgICAgICAgICAgICAgdXJpczogW1xuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy9pbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wNC5zdmcnLFxuICAgICAgICAgICAgICAgICAgJ3N0aWNrZXJzL3NoYXBlcy9zdGlja2Vycy9iYXNlL2ltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzA0LnBuZydcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxNDA3LFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjI0OFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9jb25zdGFudHMvaW5kZXguanMiLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuNy4xXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBnZXROYW5vU2Vjb25kcywgaHJ0aW1lLCBsb2FkVGltZTtcblxuICBpZiAoKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwZXJmb3JtYW5jZSAhPT0gbnVsbCkgJiYgcGVyZm9ybWFuY2Uubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKCh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzICE9PSBudWxsKSAmJiBwcm9jZXNzLmhydGltZSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKGdldE5hbm9TZWNvbmRzKCkgLSBsb2FkVGltZSkgLyAxZTY7XG4gICAgfTtcbiAgICBocnRpbWUgPSBwcm9jZXNzLmhydGltZTtcbiAgICBnZXROYW5vU2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhyO1xuICAgICAgaHIgPSBocnRpbWUoKTtcbiAgICAgIHJldHVybiBoclswXSAqIDFlOSArIGhyWzFdO1xuICAgIH07XG4gICAgbG9hZFRpbWUgPSBnZXROYW5vU2Vjb25kcygpO1xuICB9IGVsc2UgaWYgKERhdGUubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBEYXRlLm5vdygpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IERhdGUubm93KCk7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGxvYWRUaW1lO1xuICAgIH07XG4gICAgbG9hZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfVxuXG59KS5jYWxsKHRoaXMpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL3BlcmZvcm1hbmNlLW5vdy9saWIvcGVyZm9ybWFuY2Utbm93LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7XG4gIEV2ZW50RW1pdHRlciwgU0RLLCBDb25zdGFudHMsIFZlY3RvcjIsIFV0aWxzLCBDb2xvciwgU0RLVXRpbHMsXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSwgY2FuY2VsQW5pbWF0aW9uRnJhbWUsIFByb21pc2UsIExvZ1xufSBmcm9tICcuLi9nbG9iYWxzJ1xuaW1wb3J0IEV4cG9ydGVyIGZyb20gJ3NoYXJlZC9leHBvcnRlcidcbmltcG9ydCBJbWFnZVJlc2l6ZXIgZnJvbSAnLi9pbWFnZS1yZXNpemVyJ1xuXG5pbXBvcnQgRWRpdG9yT3BlcmF0aW9ucyBmcm9tICcuL2VkaXRvci9vcGVyYXRpb25zJ1xuaW1wb3J0IEVkaXRvckNvbnRyb2xzIGZyb20gJy4vZWRpdG9yL2NvbnRyb2xzJ1xuaW1wb3J0IEVkaXRvckZlYXR1cmVzIGZyb20gJy4vZWRpdG9yL2ZlYXR1cmVzJ1xuaW1wb3J0IEVkaXRvclpvb20gZnJvbSAnLi9lZGl0b3Ivem9vbSdcbmltcG9ydCBFZGl0b3JIaXN0b3J5IGZyb20gJy4vZWRpdG9yL2hpc3RvcnknXG5cbi8qKlxuICogVGhlIEVkaXRvciBjbGFzcyBpcyBhbiBpbnRlcmZhY2UgdG8gdGhlIFNESywgbWFuYWdpbmcgb3BlcmF0aW9ucywgcmVuZGVyaW5nLFxuICogaGlzdG9yeSwgem9vbSBldGMuXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUlcbiAqL1xuY2xhc3MgRWRpdG9yIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IgKHVpLCBvcHRpb25zLCBtZWRpYXRvciwgc2hhbGxvdyA9IGZhbHNlKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX3VpID0gdWlcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMuX21lZGlhdG9yID0gbWVkaWF0b3JcbiAgICB0aGlzLl9yZWFkeSA9IGZhbHNlXG4gICAgdGhpcy5fcGFkZGluZyA9IFswLCAwLCAwLCAwXVxuICAgIHRoaXMuX29mZnNldCA9IG5ldyBWZWN0b3IyKDAsIDApXG4gICAgdGhpcy5fc2hhbGxvdyA9IHNoYWxsb3dcblxuICAgIGlmICghc2hhbGxvdykge1xuICAgICAgdGhpcy5faW5pdFNESygpXG5cbiAgICAgIHRoaXMuX29uWm9vbSA9IHRoaXMuX29uWm9vbS5iaW5kKHRoaXMpXG4gICAgICB0aGlzLl9vblVuZG8gPSB0aGlzLl9vblVuZG8uYmluZCh0aGlzKVxuICAgICAgdGhpcy5fb25SZWRvID0gdGhpcy5fb25SZWRvLmJpbmQodGhpcylcblxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEVkaXRvckhpc3RvcnkodGhpcywgdGhpcy5fc2RrLCB0aGlzLl9tZWRpYXRvcilcbiAgICAgIHRoaXMuaGlzdG9yeS5vbigndW5kbycsIHRoaXMuX29uVW5kbylcbiAgICAgIHRoaXMuaGlzdG9yeS5vbigncmVkbycsIHRoaXMuX29uUmVkbylcbiAgICAgIHRoaXMuem9vbSA9IG5ldyBFZGl0b3Jab29tKHRoaXMsIHRoaXMuX3NkaywgdGhpcy5fbWVkaWF0b3IpXG4gICAgICB0aGlzLnpvb20ub24oJ3NldCcsIHRoaXMuX29uWm9vbSlcblxuICAgICAgdGhpcy5faW5pdFNlcmlhbGl6ZXJzKClcbiAgICB9XG5cbiAgICB0aGlzLm9wZXJhdGlvbnMgPSBuZXcgRWRpdG9yT3BlcmF0aW9ucyh0aGlzLCB0aGlzLl9zZGssIHRoaXMuX21lZGlhdG9yKVxuICAgIHRoaXMuY29udHJvbHMgPSBuZXcgRWRpdG9yQ29udHJvbHModGhpcywgdGhpcy5fc2RrLCB0aGlzLl9tZWRpYXRvcilcbiAgICB0aGlzLmZlYXR1cmVzID0gbmV3IEVkaXRvckZlYXR1cmVzKHRoaXMsIHRoaXMuX3NkaywgdGhpcy5fbWVkaWF0b3IpXG5cbiAgICBpZiAodGhpcy5fc2RrKSB7XG4gICAgICBjb25zdCBvcGVyYXRpb25zQXJyYXkgPSBbXVxuICAgICAgZm9yIChsZXQgaWRlbnRpZmllciBpbiB0aGlzLl9vcGVyYXRpb25zKSB7XG4gICAgICAgIG9wZXJhdGlvbnNBcnJheS5wdXNoKHRoaXMuX29wZXJhdGlvbnNbaWRlbnRpZmllcl0pXG4gICAgICB9XG4gICAgICB0aGlzLl9zZGsucmVnaXN0ZXJPcGVyYXRpb25zKG9wZXJhdGlvbnNBcnJheSlcbiAgICB9XG5cbiAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2VcbiAgICB0aGlzLl9yZW5kZXJSZXF1ZXN0ZWQgPSB0cnVlXG4gICAgdGhpcy5fcmVuZGVyQ2FsbGJhY2tzID0gW11cbiAgICB0aGlzLl9hbmltYXRpb25GcmFtZVJlcXVlc3QgPSBudWxsXG5cbiAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcylcbiAgICB0aGlzLl90aWNrID0gdGhpcy5fdGljay5iaW5kKHRoaXMpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJTklUSUFMSVpBVElPTlxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnaXZlbiBpbWFnZSB0byBiZSByZW5kZXJlZC4gSWYgdGhlIGltYWdlIG5lZWRzIHRvIGJlIHJlc2l6ZWQgdG8gZml0IGludG8gYVxuICAgKiBXZWJHTCB0ZXh0dXJlIG9yIHRvIG1hdGNoIHRoZSBgbWF4TWVnYVBpeGVsc2Agb3B0aW9uLCByZXNpemluZyBpcyBkb25lIGJlZm9yZSBzZXR0aW5nXG4gICAqIHRoZSBpbWFnZS5cbiAgICogQHBhcmFtIHtJbWFnZX0gaW1hZ2VcbiAgICogQHBhcmFtIHtCb29sZWFufSByZXNldEVkaXRvciBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBzZXRJbWFnZSAoaW1hZ2UgPSB0aGlzLl9vcHRpb25zLmVkaXRvci5pbWFnZSwgcmVzZXRFZGl0b3IgPSB0cnVlKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9zZGsuZ2V0UmVuZGVyZXIoKVxuICAgIGNvbnN0IGluaXRpYWxEaW1lbnNpb25zID0gbmV3IFZlY3RvcjIoaW1hZ2UubmF0dXJhbFdpZHRoLCBpbWFnZS5uYXR1cmFsSGVpZ2h0KVxuICAgIGNvbnN0IG1heFBpeGVscyA9IHRoaXMuZ2V0TWF4TWVnYXBpeGVscygpICogMTAwMDAwMFxuICAgIGNvbnN0IG1heERpbWVuc2lvbnMgPSByZW5kZXJlci5nZXRNYXhEaW1lbnNpb25zKClcblxuICAgIGlmIChyZXNldEVkaXRvcikge1xuICAgICAgdGhpcy5yZXNldCgpXG4gICAgfVxuXG4gICAgY29uc3QgaW1hZ2VSZXNpemVyID0gbmV3IEltYWdlUmVzaXplcihcbiAgICAgIGltYWdlLFxuICAgICAgbWF4UGl4ZWxzLFxuICAgICAgbWF4RGltZW5zaW9uc1xuICAgIClcbiAgICBsZXQgZXhpZiA9IG51bGxcblxuICAgIGNvbnN0IGRvbmUgPSAoaW1hZ2UsIGRpbWVuc2lvbnMgPSBpbml0aWFsRGltZW5zaW9ucywgcmVzaXplUmVhc29uID0gbnVsbCkgPT4ge1xuICAgICAgbGV0IHByZXZpb3VzRGltZW5zaW9ucywgc2NhbGVcbiAgICAgIGlmICh0aGlzLl9zZGsuZ2V0SW1hZ2UoKSkge1xuICAgICAgICBwcmV2aW91c0RpbWVuc2lvbnMgPSB0aGlzLmdldElucHV0RGltZW5zaW9ucygpXG4gICAgICAgIHNjYWxlID0gZGltZW5zaW9ucy5jbG9uZSgpXG4gICAgICAgICAgLmRpdmlkZShwcmV2aW91c0RpbWVuc2lvbnMpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEltYWdlKGltYWdlLCBleGlmLCBkaW1lbnNpb25zKVxuICAgICAgaWYgKHNjYWxlKSB7XG4gICAgICAgIHRoaXMuYnJvYWRjYXN0U2NhbGUoc2NhbGUpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXRXYXRlcm1hcmsoKVxuXG4gICAgICB0aGlzLl9yZWFkeSA9IHRydWVcblxuICAgICAgdGhpcy5lbWl0KCdyZWFkeScpXG4gICAgfVxuXG4gICAgaWYgKCFpbWFnZVJlc2l6ZXIubmVlZHNSZXNpemUoKSkge1xuICAgICAgZG9uZShpbWFnZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbWl0KCdyZXNpemUnKVxuICAgICAgZXhpZiA9IHRoaXMuX3Nkay5wYXJzZUV4aWYoaW1hZ2UpXG4gICAgICBpbWFnZVJlc2l6ZXIucmVzaXplKClcbiAgICAgICAgLnRoZW4oKHsgY2FudmFzLCBkaW1lbnNpb25zLCByZWFzb24gfSkgPT4ge1xuICAgICAgICAgIC8vIEZsYWcgY2FudmFzIGFzIEpQRUcgc28gdGhhdCBleHBvcnQgd2lsbCByZWNvZ25pemUgdGhhdFxuICAgICAgICAgIC8vIGl0IG5lZWRzIHRvIHJlc3RvcmUgRVhJRiBkYXRhXG4gICAgICAgICAgY2FudmFzLnNyYyA9ICdkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCdcblxuICAgICAgICAgIHRoaXMuZW1pdCgncmVzaXplZCcsIHsgZGltZW5zaW9ucywgcmVhc29uIH0pXG4gICAgICAgICAgZG9uZShjYW52YXMsIGRpbWVuc2lvbnMsIHJlYXNvbilcbiAgICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHdhdGVybWFyayBvcGVyYXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0V2F0ZXJtYXJrICgpIHtcbiAgICBpZiAodGhpcy5fb3B0aW9ucy5lZGl0b3Iud2F0ZXJtYXJrSW1hZ2UpIHtcbiAgICAgIHRoaXMuX3dhdGVybWFya09wZXJhdGlvbiA9IHRoaXMub3BlcmF0aW9ucy5nZXRPckNyZWF0ZSgnd2F0ZXJtYXJrJywge1xuICAgICAgICBpbWFnZTogdGhpcy5fb3B0aW9ucy5lZGl0b3Iud2F0ZXJtYXJrSW1hZ2VcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBTREtcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0U0RLICgpIHtcbiAgICBjb25zdCB7IGxvZ0xldmVsLCBkaXNwbGF5V2VsY29tZU1lc3NhZ2UsIGRlYnVnLCBsaWNlbnNlLCBjcm9zc09yaWdpbiB9ID0gdGhpcy5fb3B0aW9uc1xuICAgIGNvbnN0IHsgc21vb3RoRG93bnNjYWxpbmcsIHNtb290aFVwc2NhbGluZywgcHJlZmVycmVkUmVuZGVyZXIsIHBpeGVsUmF0aW8sIHRyYW5zcGFyZW50LCBjbGVhckNvbG9yIH0gPSB0aGlzLl9vcHRpb25zLmVkaXRvclxuXG4gICAgbGV0IGNsZWFyQ29sb3JJbnN0YW5jZVxuICAgIGlmIChBcnJheS5pc0FycmF5KGNsZWFyQ29sb3IpKSB7XG4gICAgICBjbGVhckNvbG9ySW5zdGFuY2UgPSBDb2xvci5mcm9tQXJyYXkoY2xlYXJDb2xvcilcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjbGVhckNvbG9yID09PSAnc3RyaW5nJykge1xuICAgICAgY2xlYXJDb2xvckluc3RhbmNlID0gQ29sb3IuZnJvbUhleChjbGVhckNvbG9yKVxuICAgIH0gZWxzZSBpZiAoY2xlYXJDb2xvciBpbnN0YW5jZW9mIENvbG9yKSB7XG4gICAgICBjbGVhckNvbG9ySW5zdGFuY2UgPSBjbGVhckNvbG9yLmNsb25lKClcbiAgICB9XG5cbiAgICBjb25zdCByZW5kZXJlck9wdGlvbnMgPSB7XG4gICAgICBsb2dMZXZlbCxcbiAgICAgIGRlYnVnLFxuICAgICAgZGlzcGxheVdlbGNvbWVNZXNzYWdlLFxuICAgICAgcGl4ZWxSYXRpbyxcbiAgICAgIHNtb290aERvd25zY2FsaW5nLFxuICAgICAgc21vb3RoVXBzY2FsaW5nLFxuICAgICAgdHJhbnNwYXJlbnQsXG4gICAgICBjcm9zc09yaWdpbixcbiAgICAgIGNsZWFyQ29sb3I6IGNsZWFyQ29sb3JJbnN0YW5jZSxcbiAgICAgIGxpY2Vuc2VcbiAgICB9XG4gICAgdGhpcy5fc2RrID0gbmV3IFNESyhwcmVmZXJyZWRSZW5kZXJlciwgcmVuZGVyZXJPcHRpb25zKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gWk9PTUlOR1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBhZnRlciBhIG5ldyB6b29tIGxldmVsIGhhcyBiZWVuIHNldC4gUmUtcmVuZGVycyB0aGUgZWRpdG9yLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHpvb21cbiAgICogQHBhcmFtICB7RnVuY3Rpb259IFtjYWxsYmFja11cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblpvb20gKHpvb20sIGNhbGxiYWNrID0gbnVsbCkge1xuICAgIHRoaXMuZml4T2Zmc2V0KClcbiAgICB0aGlzLnJlbmRlcigoKSA9PiB7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlcyBzdXJlIHRoZSBpbWFnZSBzdGF5cyBpbnNpZGUgdGhlIHZpZXdwb3J0XG4gICAqL1xuICBmaXhPZmZzZXQgKCkge1xuICAgIHRoaXMuX29mZnNldCA9IHRoaXMuX2NsYW1wT2Zmc2V0KHRoaXMuX29mZnNldClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBhZnRlciBhbiB1bmRvIGhhcHBlbmVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25VbmRvICgpIHtcbiAgICB0aGlzLnJlbmRlcigpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgYWZ0ZXIgYSByZWRvIGhhcHBlbmVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25SZWRvICgpIHtcbiAgICB0aGlzLnJlbmRlcigpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCByb3RhdGlvblxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICBnZXRSb3RhdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Nkay5nZXRSb3RhdGlvbigpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcm90YXRpb24gdG8gdGhlIGdpdmVuIHZhbHVlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByb3RhdGlvblxuICAgKi9cbiAgc2V0Um90YXRpb24gKHJvdGF0aW9uKSB7XG4gICAgdGhpcy5fc2RrLnNldFJvdGF0aW9uKHJvdGF0aW9uKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgc3ByaXRlIHNjYWxlXG4gICAqIEByZXR1cm4ge051bWJlcn1cbiAgICovXG4gIGdldFNwcml0ZVNjYWxlICgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2RrLmdldFNwcml0ZVNjYWxlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzcHJpdGUgc2NhbGUgdG8gdGhlIGdpdmVuIHZhbHVlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzcHJpdGVTY2FsZVxuICAgKi9cbiAgc2V0U3ByaXRlU2NhbGUgKHNwcml0ZVNjYWxlKSB7XG4gICAgdGhpcy5fc2RrLnNldFNwcml0ZVNjYWxlKHNwcml0ZVNjYWxlKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNyb3NzT3JpZ2luIHZhbHVlIHRvIGJlIHNldCB0byBpbWFnZSBlbGVtZW50cywgYWNjb3JkaW5nXG4gICAqIHRvIHRoZSBwYXNzZWQgYGNyb3NzT3JpZ2luYCBvcHRpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIFN0cmluZ1xuICAgKi9cbiAgZ2V0Q3Jvc3NPcmlnaW4gKCkge1xuICAgIHJldHVybiBTREtVdGlscy5nZXRDcm9zc09yaWdpblZhbHVlKHRoaXMuX29wdGlvbnMuY3Jvc3NPcmlnaW4gfHwgJ2Fub255bW91cycpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBNSVNDIFBSSVZBVEUgQVBJXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gdG9vbCBpcyBhbGxvd2VkIGJ5IHRoZSBsaWNlbnNlXG4gICAqIEBwYXJhbSAge1N0cmluZ30gIGlkZW50aWZpZXJcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGlzVG9vbEFsbG93ZWQgKGlkZW50aWZpZXIpIHtcbiAgICBpZiAodGhpcy5fc2hhbGxvdykgcmV0dXJuIHRydWVcblxuICAgIHJldHVybiB0aGlzLl9zZGsuX2wuaXNUb29sQWxsb3dlZChpZGVudGlmaWVyKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgY29udHJvbCB3aXRoIHRoZSB0b29sIGlkZW50aWZpZXIgaXMgZW5hYmxlZFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBpZGVudGlmaWVyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBpc1Rvb2xFbmFibGVkIChpZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuZWRpdG9yLnRvb2xzLmluZGV4T2YoaWRlbnRpZmllcikgIT09IC0xXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbWF4aW11bSBtZWdhIHBpeGVsc1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRNYXhNZWdhcGl4ZWxzICgpIHtcbiAgICBjb25zdCB7IG1heE1lZ2FQaXhlbHMgfSA9IHRoaXMuX29wdGlvbnMuZWRpdG9yXG4gICAgcmV0dXJuIFV0aWxzLmlzTW9iaWxlKCkgPyBtYXhNZWdhUGl4ZWxzLm1vYmlsZSA6IG1heE1lZ2FQaXhlbHMuZGVza3RvcFxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTUlTQyBQVUJMSUMgQVBJXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG91dHB1dCBzcHJpdGUncyBjdXJyZW50IGRpbWVuc2lvbnNcbiAgICogQHBhcmFtIHtCb29sZWFufSBpbmNvcnBvcmF0ZVNwcml0ZVNjYWxlID0gZmFsc2VcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfVxuICAgKi9cbiAgZ2V0T3V0cHV0RGltZW5zaW9ucyAoaW5jb3Jwb3JhdGVTcHJpdGVTY2FsZSA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Nkay5nZXRPdXRwdXREaW1lbnNpb25zKGluY29ycG9yYXRlU3ByaXRlU2NhbGUpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb3V0cHV0IHRleHR1cmUncyBjdXJyZW50IGRpbWVuc2lvbnNcbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gaW5jb3Jwb3JhdGVTcHJpdGVTY2FsZSA9IGZhbHNlXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMn1cbiAgICovXG4gIGdldE91dHB1dFRleHR1cmVEaW1lbnNpb25zIChpbmNvcnBvcmF0ZVNwcml0ZVNjYWxlID0gZmFsc2UpIHtcbiAgICByZXR1cm4gdGhpcy5fc2RrLmdldE91dHB1dFRleHR1cmVEaW1lbnNpb25zKGluY29ycG9yYXRlU3ByaXRlU2NhbGUpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmluYWwgZGltZW5zaW9ucyB0aGF0IHRoZSBpbnB1dCBpbWFnZSB3b3VsZCBoYXZlXG4gICAqIGFmdGVyIGFsbCBleGlzdGluZyBvcGVyYXRpb25zIGhhdmUgYmVlbiBhcHBsaWVkXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaW5jb3Jwb3JhdGVTcHJpdGVTY2FsZSA9IGZhbHNlXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMn1cbiAgICovXG4gIGdldEZpbmFsRGltZW5zaW9ucyAoaW5jb3Jwb3JhdGVTcHJpdGVTY2FsZSA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Nkay5nZXRGaW5hbERpbWVuc2lvbnMoaW5jb3Jwb3JhdGVTcHJpdGVTY2FsZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjYW52YXMgZGltZW5zaW9uc1xuICAgKiBAcGFyYW0gIHtCb29sZWFufSBzdWJ0cmFjdFBhZGRpbmcgPSB0cnVlXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMn1cbiAgICovXG4gIGdldENhbnZhc0RpbWVuc2lvbnMgKHN1YnRyYWN0UGFkZGluZyA9IHRydWUpIHtcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLl9zZGsuZ2V0Q2FudmFzKClcbiAgICBjb25zdCBkaW1lbnNpb25zID0gbmV3IFZlY3RvcjIoY2FudmFzLm9mZnNldFdpZHRoLCBjYW52YXMub2Zmc2V0SGVpZ2h0KVxuICAgIGlmIChzdWJ0cmFjdFBhZGRpbmcpIHtcbiAgICAgIGRpbWVuc2lvbnMuc3VidHJhY3QoXG4gICAgICAgIHRoaXMuX3BhZGRpbmdbMV0gKyB0aGlzLl9wYWRkaW5nWzNdLFxuICAgICAgICB0aGlzLl9wYWRkaW5nWzBdICsgdGhpcy5fcGFkZGluZ1syXVxuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gZGltZW5zaW9uc1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdpdmVuIGltYWdlXG4gICAqIEBwYXJhbSB7SW1hZ2V9IGltYWdlXG4gICAqIEBwYXJhbSB7UGhvdG9FZGl0b3JTREsuRVhJRn0gW2V4aWZdXG4gICAqIEBwYXJhbSB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBbZGltZW5zaW9uc11cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRJbWFnZSAoaW1hZ2UgPSB0aGlzLl9vcHRpb25zLmVkaXRvci5pbWFnZSwgZXhpZiA9IG51bGwsIGRpbWVuc2lvbnMgPSBudWxsKSB7XG4gICAgLy8gSW52YWxpZGF0ZSBjYWNoZXNcbiAgICB0aGlzLl9zZGsuc2V0QWxsT3BlcmF0aW9uc1RvRGlydHkoKVxuXG4gICAgdGhpcy5fb3B0aW9ucy5lZGl0b3IuaW1hZ2UgPSBpbWFnZVxuICAgIHRoaXMuX3Nkay5zZXRJbWFnZShpbWFnZSwgZXhpZiwgZGltZW5zaW9ucylcblxuICAgIHRoaXMuem9vbS5hdXRvKHRydWUsIHRydWUpXG5cbiAgICB0aGlzLmVtaXQoJ25ldy1pbWFnZScpXG4gIH1cblxuICAvKipcbiAgICogRXhwb3J0cyBhbiBpbWFnZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGRvd25sb2FkID0gZmFsc2VcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGV4cG9ydCAoZG93bmxvYWQgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLl93YXRlcm1hcmtPcGVyYXRpb24pIHtcbiAgICAgIHRoaXMuX3dhdGVybWFya09wZXJhdGlvbi5zZXRFbmFibGVkKGZhbHNlKVxuICAgIH1cblxuICAgIC8vIEludmFsaWRhdGUgY2FjaGVzXG4gICAgdGhpcy5fc2RrLnNldEFsbE9wZXJhdGlvbnNUb0RpcnR5KClcblxuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zLmVkaXRvci5leHBvcnRcbiAgICBjb25zdCBleHBvcnRlciA9IG5ldyBFeHBvcnRlcih0aGlzLl9zZGssIG9wdGlvbnMsIGRvd25sb2FkKVxuICAgIHJldHVybiBleHBvcnRlci5leHBvcnQoKVxuICAgICAgLnRoZW4oKG91dHB1dCkgPT4ge1xuICAgICAgICB0aGlzLmVtaXQoJ2V4cG9ydCcsIG91dHB1dClcbiAgICAgICAgdGhpcy5fbWVkaWF0b3IuZW1pdChDb25zdGFudHMuRVZFTlRTLkVYUE9SVCwgb3V0cHV0LCB0aGlzKVxuXG4gICAgICAgIGlmICh0aGlzLl93YXRlcm1hcmtPcGVyYXRpb24pIHtcbiAgICAgICAgICB0aGlzLl93YXRlcm1hcmtPcGVyYXRpb24uc2V0RW5hYmxlZCh0cnVlKVxuICAgICAgICAgIHRoaXMuX3Nkay5yZW5kZXIoKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW52YWxpZGF0ZSBjYWNoZXNcbiAgICAgICAgdGhpcy5fc2RrLnNldEFsbE9wZXJhdGlvbnNUb0RpcnR5KClcblxuICAgICAgICByZXR1cm4gb3V0cHV0XG4gICAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU0VSSUFMSVpBVElPTlxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgc2VyaWFsaXplcnMgYW5kIGRlc2VyaWFsaXplcnNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0U2VyaWFsaXplcnMgKCkge1xuICAgIHRoaXMuX3NlcmlhbGl6ZXJzID0ge1xuICAgICAgJzEuMC4wJzogcmVxdWlyZSgnc2hhcmVkL3NlcmlhbGl6YXRpb24vMS4wLjAnKS5kZWZhdWx0LFxuICAgICAgJzEuMC4xJzogcmVxdWlyZSgnc2hhcmVkL3NlcmlhbGl6YXRpb24vMS4wLjEnKS5kZWZhdWx0LFxuICAgICAgJzIuMC4wJzogcmVxdWlyZSgnc2hhcmVkL3NlcmlhbGl6YXRpb24vMi4wLjAnKS5kZWZhdWx0LFxuICAgICAgJzIuMC4xJzogcmVxdWlyZSgnc2hhcmVkL3NlcmlhbGl6YXRpb24vMi4wLjEnKS5kZWZhdWx0LFxuICAgICAgJzMuMC4wJzogcmVxdWlyZSgnc2hhcmVkL3NlcmlhbGl6YXRpb24vMy4wLjAnKS5kZWZhdWx0LFxuICAgICAgJzMuMS4wJzogcmVxdWlyZSgnc2hhcmVkL3NlcmlhbGl6YXRpb24vMy4xLjAnKS5kZWZhdWx0XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGVkaXRvciBzdGF0ZSBmb3IgdGhlIGdpdmVuIHZlcnNpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zID0ge31cbiAgICogQHBhcmFtICB7U3RyaW5nfSB2ZXJzaW9uID0gJzMuMS4wJ1xuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgc2VyaWFsaXplIChvcHRpb25zID0ge30sIHZlcnNpb24gPSAnMy4xLjAnKSB7XG4gICAgY29uc3QgU2VyaWFsaXplciA9IHRoaXMuX3NlcmlhbGl6ZXJzW3ZlcnNpb25dXG4gICAgaWYgKCFTZXJpYWxpemVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGBObyBzZXJpYWxpemVyIGZvciB2ZXJzaW9uICR7dmVyc2lvbn0gZm91bmQuYCkpXG4gICAgfVxuICAgIGNvbnN0IHNlcmlhbGl6ZXIgPSBuZXcgU2VyaWFsaXplcih0aGlzKVxuICAgIHJldHVybiBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcHRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gZGF0YVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGRhdGFcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGRlc2VyaWFsaXplIChkYXRhKSB7XG4gICAgY29uc3QgU2VyaWFsaXplciA9IHRoaXMuX3NlcmlhbGl6ZXJzW2RhdGEudmVyc2lvbl1cbiAgICBpZiAoIVNlcmlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYE5vIHNlcmlhbGl6ZXIgZm9yIHZlcnNpb24gJHtkYXRhLnZlcnNpb259IGZvdW5kLmApKVxuICAgIH1cbiAgICBjb25zdCBzZXJpYWxpemVyID0gbmV3IFNlcmlhbGl6ZXIodGhpcylcbiAgICByZXR1cm4gc2VyaWFsaXplci5kZXNlcmlhbGl6ZShkYXRhKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLnpvb20uYXV0byh0cnVlLCB0cnVlKVxuICAgICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSByZW5kZXJpbmcgb2Zmc2V0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYXBwbHlPZmZzZXQgKCkge1xuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuX29mZnNldC5jbG9uZSgpXG5cbiAgICBvZmZzZXQueCAtPSB0aGlzLl9wYWRkaW5nWzFdIC8gMlxuICAgIG9mZnNldC54ICs9IHRoaXMuX3BhZGRpbmdbM10gLyAyXG5cbiAgICBvZmZzZXQueSAtPSB0aGlzLl9wYWRkaW5nWzJdIC8gMlxuICAgIG9mZnNldC55ICs9IHRoaXMuX3BhZGRpbmdbMF0gLyAyXG5cbiAgICB0aGlzLl9zZGsuc2V0T2Zmc2V0KG9mZnNldClcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIHJlbmRlciBsb29wXG4gICAqL1xuICBzdGFydCAoKSB7XG4gICAgdGhpcy5fYW5pbWF0aW9uRnJhbWVSZXF1ZXN0ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX3RpY2spXG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgdGhlIHJlbmRlciBsb29wXG4gICAqL1xuICBzdG9wICgpIHtcbiAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2VcbiAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWVSZXF1ZXN0KSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZVJlcXVlc3QpXG4gICAgICB0aGlzLl9yZW5kZXJDYWxsYmFja3MgPSBbXVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cyBhIHJlbmRlciwgYWRkcyBgY2FsbGJhY2tgIHRvIHRoZSByZW5kZXIgY2FsbGJhY2tzXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbY2FsbGJhY2tdXG4gICAqL1xuICByZW5kZXIgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fcmVuZGVyUmVxdWVzdGVkID0gdHJ1ZVxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gYW4gYW5pbWF0aW9uIGZyYW1lIGlzIGJlaW5nIHByb2Nlc3NlZC4gUmVuZGVycyB0aGVcbiAgICogY2FudmFzIGlmIG5lY2Vzc2FyeSwgcmVxdWVzdHMgYW5vdGhlciBhbmltYXRpb24gZnJhbWUgY2FsbGJhY2tzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdGljayAoKSB7XG4gICAgdGhpcy56b29tLnRpY2soKVxuXG4gICAgaWYgKHRoaXMuX3JlbmRlclJlcXVlc3RlZCkge1xuICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5fcmVuZGVyQ2FsbGJhY2tzLnNsaWNlKDApXG4gICAgICB0aGlzLl9yZW5kZXJDYWxsYmFja3MgPSBbXVxuXG4gICAgICB0aGlzLl9yZW5kZXIoKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goKHIpID0+IHIoKSlcbiAgICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZVJlcXVlc3QgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5fdGljaylcbiAgICAgICAgfSlcbiAgICAgIHRoaXMuX3JlbmRlclJlcXVlc3RlZCA9IGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lUmVxdWVzdCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLl90aWNrKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyBhIHJlbmRlclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlciAoKSB7XG4gICAgaWYgKCF0aGlzLl9yZWFkeSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG5cbiAgICB0aGlzLl9hcHBseU9mZnNldCgpXG4gICAgcmV0dXJuIHRoaXMuX3Nkay5yZW5kZXIoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLl9sYXN0T3V0cHV0Qm91bmRzID0gdGhpcy5fc2RrLmdldFNwcml0ZSgpLmdldEJvdW5kcygpXG4gICAgICAgIHRoaXMuZW1pdCgncmVuZGVyZWQnKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICBMb2cuZXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcmVuZGVyaW5nOiAnICsgZS5tZXNzYWdlKVxuXG4gICAgICAgIHRoaXMuZW1pdCgncmVuZGVyLWVycm9yJywgZSlcbiAgICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIGV2ZXJ5dGhpbmdcbiAgICovXG4gIHJlc2V0ICgpIHtcbiAgICB0aGlzLl9zZGsucmVzZXQoKVxuICAgIHRoaXMuaGlzdG9yeS5yZXNldCgpXG4gICAgdGhpcy5vcGVyYXRpb25zLnJlc2V0KClcbiAgICB0aGlzLmZlYXR1cmVzLnJlc2V0KClcblxuICAgIHRoaXMuZW1pdCgncmVzZXQnKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRElTUE9TQUxcblxuICAvKipcbiAgICogQ2xlYW5zIHRoaXMgaW5zdGFuY2UgdXBcbiAgICovXG4gIGRpc3Bvc2UgKCkge1xuICAgIHRoaXMuc3RvcCgpXG5cbiAgICB0aGlzLl9zZGsuZGlzcG9zZSgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBHRVRURVJTIC8gU0VUVEVSU1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIEVkaXRvciBpcyByZWFkeSB0byByZW5kZXJcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGlzUmVhZHkgKCkgeyByZXR1cm4gdGhpcy5fcmVhZHkgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSByZW5kZXJlclxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5FbmdpbmUuQmFzZVJlbmRlcmVyfVxuICAgKi9cbiAgZ2V0UmVuZGVyZXIgKCkgeyByZXR1cm4gdGhpcy5fc2RrLmdldFJlbmRlcmVyKCkgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBTREtcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREt9XG4gICAqL1xuICBnZXRTREsgKCkgeyByZXR1cm4gdGhpcy5fc2RrIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW5wdXQgaW1hZ2UgZGltZW5zaW9uc1xuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9c1xuICAgKi9cbiAgZ2V0SW5wdXREaW1lbnNpb25zICgpIHsgcmV0dXJuIHRoaXMuX3Nkay5nZXRJbnB1dERpbWVuc2lvbnMoKSB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHBhZGRpbmcgdmFsdWVzXG4gICAqIEByZXR1cm4ge051bWJlcltdfVxuICAgKi9cbiAgZ2V0UGFkZGluZyAoKSB7IHJldHVybiB0aGlzLl9wYWRkaW5nIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcGFkZGluZyAodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KVxuICAgKiBAcGFyYW0ge051bWJlcltdfSBwYWRkaW5nXG4gICAqL1xuICBzZXRQYWRkaW5nIChwYWRkaW5nKSB7XG4gICAgaWYgKCFwYWRkaW5nKSB7XG4gICAgICB0aGlzLl9wYWRkaW5nID0gWzAsIDAsIDAsIDBdXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhZGRpbmcgPSBwYWRkaW5nXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGltYWdlXG4gICAqIEByZXR1cm4ge0ltYWdlfVxuICAgKi9cbiAgZ2V0SW1hZ2UgKCkge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25zLmVkaXRvci5pbWFnZVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9wdGlvbnNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBVSVxuICAgKiBAcmV0dXJuIHtEZXNrdG9wVUl9XG4gICAqL1xuICBnZXRVSSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VpXG4gIH1cblxuICAvKipcbiAgICogQnJvYWRjYXN0cyBhIHNjYWxpbmcgdG8gYWxsIG9wZXJhdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNoYW5nZWQuIFRoZXNlIG9wZXJhdGlvbnMgaW5jbHVkZVxuICAgKiBvbmVzIHRoYXQgc3RvcmUgYWJzb2x1dGUgdmFsdWVzIChlLmcuIHNwcml0ZSBvcGVyYXRpb24gd2hpY2ggaG9sZHMgc3RpY2tlciBkaW1lbnNpb25zXG4gICAqIGluIGFic29sdXRlIHZhbHVlcylcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBzY2FsZVxuICAgKi9cbiAgYnJvYWRjYXN0U2NhbGUgKHNjYWxlKSB7XG4gICAgY29uc3Qgc2NhbGFibGVPcGVyYXRpb25zID0gWydzcHJpdGUnXVxuICAgIHNjYWxhYmxlT3BlcmF0aW9ucy5mb3JFYWNoKGlkZW50aWZpZXIgPT4ge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5vcGVyYXRpb25zLmdldChpZGVudGlmaWVyKVxuICAgICAgaWYgKCFvcGVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBvcGVyYXRpb24uc2NhbGUoc2NhbGUpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBCcm9hZGNhc3RzIGEgdHJhbnNmb3JtIHRvIGFsbCBvcGVyYXRpb25zIHRoYXQgbmVlZCB0byBiZSBjaGFuZ2VkXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuVHJhbnNmb3JtT3BlcmF0aW9ufSB0cmFuc2Zvcm1PcGVyYXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gICAqL1xuICBicm9hZGNhc3RUcmFuc2Zvcm0gKHRyYW5zZm9ybU9wZXJhdGlvbiwgb3B0aW9ucykge1xuICAgIGNvbnN0IHRyYW5zZm9ybUNoYW5nZSA9IG5ldyBTREsuT3BlcmF0aW9ucy5UcmFuc2Zvcm1PcGVyYXRpb24uVHJhbnNmb3JtQ2hhbmdlKHRyYW5zZm9ybU9wZXJhdGlvbiwgb3B0aW9ucylcbiAgICBjb25zdCB0cmFuc2Zvcm1hYmxlT3BlcmF0aW9ucyA9IFtcbiAgICAgICdzcHJpdGUnLCAnc2VsZWN0aXZlLWJsdXInLCAncmFkaWFsLWZvY3VzJywgJ21pcnJvcmVkLWZvY3VzJywgJ2xpbmVhci1mb2N1cycsICdibHVyJ1xuICAgIF1cbiAgICB0cmFuc2Zvcm1hYmxlT3BlcmF0aW9ucy5mb3JFYWNoKChpZGVudGlmaWVyKSA9PiB7XG4gICAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLm9wZXJhdGlvbnMuZ2V0KGlkZW50aWZpZXIpXG4gICAgICBpZiAoIW9wZXJhdGlvbikge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIG9wZXJhdGlvbi50cmFuc2Zvcm0odHJhbnNmb3JtQ2hhbmdlKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQnJvYWRjYXN0cyBhIGZsaXAgdG8gYWxsIG9wZXJhdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNoYW5nZWRcbiAgICogQHBhcmFtICB7U3RyaW5nfSBkaXJlY3Rpb25cbiAgICovXG4gIGJyb2FkY2FzdEZsaXAgKGRpcmVjdGlvbikge1xuICAgIGNvbnN0IGZsaXBwYWJsZU9wZXJhdGlvbnMgPSBbJ21pcnJvcmVkLWZvY3VzJywgJ3JhZGlhbC1mb2N1cycsICdzcHJpdGUnLCAnc2VsZWN0aXZlLWJsdXInXVxuICAgIGZsaXBwYWJsZU9wZXJhdGlvbnMuZm9yRWFjaCgoaWRlbnRpZmllcikgPT4ge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5vcGVyYXRpb25zLmdldChpZGVudGlmaWVyKVxuICAgICAgaWYgKCFvcGVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBvcGVyYXRpb24uZmxpcChkaXJlY3Rpb24pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBCcm9hZGNhc3RzIGEgcm90YXRpb24gdG8gYWxsIG9wZXJhdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNoYW5nZWRcbiAgICogQHBhcmFtICB7TnVtYmVyfSBkZWdyZWVzXG4gICAqL1xuICBicm9hZGNhc3RSb3RhdGUgKGRlZ3JlZXMpIHtcbiAgICBjb25zdCBmbGlwcGFibGVPcGVyYXRpb25zID0gWyd0cmFuc2Zvcm0nLCAnbWlycm9yZWQtZm9jdXMnLCAncmFkaWFsLWZvY3VzJywgJ3Nwcml0ZScsICdzZWxlY3RpdmUtYmx1ciddXG4gICAgZmxpcHBhYmxlT3BlcmF0aW9ucy5mb3JFYWNoKChpZGVudGlmaWVyKSA9PiB7XG4gICAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLm9wZXJhdGlvbnMuZ2V0KGlkZW50aWZpZXIpXG4gICAgICBpZiAoIW9wZXJhdGlvbikge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIG9wZXJhdGlvbi5yb3RhdGUoZGVncmVlcylcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEZpeGVzIHRoZSBnaXZlbiBvZmZzZXQgdG8gbWFrZSBzdXJlIHRoZSBpbWFnZSBzdGF5cyBpbnNpZGUgdGhlIHZpZXdwb3J0XG4gICAqIEBwYXJhbSB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBvZmZzZXRcbiAgICogQHJldHVybnMge1Bob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jbGFtcE9mZnNldCAob2Zmc2V0KSB7XG4gICAgY29uc3QgY2FudmFzRGltZW5zaW9ucyA9IHRoaXMuZ2V0Q2FudmFzRGltZW5zaW9ucygpXG4gICAgY29uc3Qgb3V0cHV0RGltZW5zaW9ucyA9IHRoaXMuX3Nkay5nZXRPdXRwdXREaW1lbnNpb25zKGZhbHNlKVxuXG4gICAgY29uc3QgbWluT2Zmc2V0ID0gY2FudmFzRGltZW5zaW9ucy5jbG9uZSgpXG4gICAgICAuc3VidHJhY3Qob3V0cHV0RGltZW5zaW9ucylcbiAgICAgIC5kaXZpZGUoMilcbiAgICAgIC5jbGFtcChudWxsLCBuZXcgVmVjdG9yMigwLCAwKSlcblxuICAgIGNvbnN0IG1heE9mZnNldCA9IG91dHB1dERpbWVuc2lvbnMuY2xvbmUoKVxuICAgICAgLnN1YnRyYWN0KGNhbnZhc0RpbWVuc2lvbnMpXG4gICAgICAuZGl2aWRlKDIpXG4gICAgICAuY2xhbXAobmV3IFZlY3RvcjIoMCwgMCksIG51bGwpXG5cbiAgICBjb25zdCBuZXdPZmZzZXQgPSBvZmZzZXQuY2xvbmUoKVxuICAgICAgLmNsYW1wKG1pbk9mZnNldCwgbWF4T2Zmc2V0KVxuICAgICAgLnJvdW5kKClcblxuICAgIHJldHVybiBuZXdPZmZzZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IG9mZnNldFxuICAgKiBAdHlwZSB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfVxuICAgKi9cbiAgZ2V0IG9mZnNldCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29mZnNldFxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG9mZnNldCB0byB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAqIEBwYXJhbSB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBvZmZzZXRcbiAgICovXG4gIHNldCBvZmZzZXQgKG9mZnNldCkge1xuICAgIHRoaXMuX29mZnNldCA9IHRoaXMuX2NsYW1wT2Zmc2V0KG9mZnNldClcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGltYWdlIGlzIGRyYWdnYWJsZVxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICovXG4gIGdldCBpc0RyYWdnYWJsZSAoKSB7XG4gICAgY29uc3Qgem9vbUFsbG93c0RyYWcgPSB0aGlzLnpvb20udGFyZ2V0TGV2ZWwgPiB0aGlzLnpvb20uZGVmYXVsdExldmVsXG4gICAgcmV0dXJuIHRoaXMuZmVhdHVyZXMuaXNFbmFibGVkKCdkcmFnJykgJiYgem9vbUFsbG93c0RyYWdcbiAgfVxuXG4gIGdldCBpc1NoYWxsb3cgKCkge1xuICAgIHJldHVybiB0aGlzLl9zaGFsbG93XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgc25hcHNob3QgdG8gdGhlIGN1cnJlbnQgZWRpdG9yIHN0YXRlXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBnZXRTbmFwc2hvdCAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZXJhdGlvbnM6IHRoaXMub3BlcmF0aW9ucy5nZXRTbmFwc2hvdCgpLFxuICAgICAgem9vbTogdGhpcy56b29tLmdldFNuYXBzaG90KCksXG4gICAgICBjYW52YXNEaW1lbnNpb25zOiB0aGlzLmdldENhbnZhc0RpbWVuc2lvbnMoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0b3JlIHRoZSBlZGl0b3Igc3RhdGUgdG8gdGhlIGdpdmVuIHNuYXBzaG90XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbmFwc2hvdFxuICAgKi9cbiAgcmVzdG9yZVNuYXBzaG90IChzbmFwc2hvdCkge1xuICAgIHRoaXMub3BlcmF0aW9ucy5yZXN0b3JlU25hcHNob3Qoc25hcHNob3Qub3BlcmF0aW9ucylcbiAgICB0aGlzLnpvb20ucmVzdG9yZVNuYXBzaG90KHNuYXBzaG90Lnpvb20pXG5cbiAgICAvLyBJZiB0aGUgY2FudmFzIGRpbWVuc2lvbnMgaGF2ZSBjaGFuZ2VkLCByZWNhbGN1bGF0ZSB6b29tXG4gICAgaWYgKCFzbmFwc2hvdC5jYW52YXNEaW1lbnNpb25zLmVxdWFscyh0aGlzLmdldENhbnZhc0RpbWVuc2lvbnMoKSkpIHtcbiAgICAgIHRoaXMuem9vbS5hdXRvKHRydWUsIHRydWUpXG4gICAgfVxuICB9XG5cbiAgZ2V0TWVkaWF0b3IgKCkge1xuICAgIHJldHVybiB0aGlzLl9tZWRpYXRvclxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHN0aWNrZXIgdG8gYSBnaXZlbiBjYXRlZ29yeS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNhdGVnb3J5SWRlbnRpZmllclxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RpY2tlck9iamVjdFxuICAgKi9cbiAgYWRkU3RpY2tlciAoY2F0ZWdvcnlJZGVudGlmaWVyLCBzdGlja2VyT2JqZWN0KSB7XG4gICAgY29uc3QgZWRpdG9yT3B0aW9ucyA9IHRoaXMuX29wdGlvbnMuZWRpdG9yXG5cbiAgICBjb25zdCBjYXRlZ29yaWVzID0gU0RLVXRpbHMuZ2V0RGVlcFByb3BlcnR5KGVkaXRvck9wdGlvbnMsIFsnY29udHJvbHNPcHRpb25zJywgJ3N0aWNrZXInLCAnY2F0ZWdvcmllcyddKVxuXG4gICAgaWYgKCFjYXRlZ29yaWVzKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBzdGlja2VycyA9IFNES1V0aWxzLmdldERlZXBQcm9wZXJ0eShjYXRlZ29yaWVzLFxuICAgICAgWyBjYXRlZ29yaWVzID0+IGNhdGVnb3JpZXMuZmlsdGVyKGMgPT4gYy5pZGVudGlmaWVyID09PSBjYXRlZ29yeUlkZW50aWZpZXIpWzBdLCAnc3RpY2tlcnMnIF0pXG5cbiAgICBpZiAoIXN0aWNrZXJzKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBzdGlja2Vycy5wdXNoKHN0aWNrZXJPYmplY3QpXG5cbiAgICB0aGlzLl9tZWRpYXRvci5lbWl0KENvbnN0YW50cy5FVkVOVFMuQURERURfU1RJQ0tFUiwgY2F0ZWdvcmllcylcblxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRWRpdG9yXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2xpYi9lZGl0b3IuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFNES1V0aWxzLCBJbWFnZUZvcm1hdCwgTG9nIH0gZnJvbSAnZ2xvYmFscydcbmNvbnN0IFRXSUNFX1BJID0gTWF0aC5QSSAqIDJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgdjEwMFNlcmlhbGl6ZXIge1xuICBjb25zdHJ1Y3RvciAoZWRpdG9yKSB7XG4gICAgdGhpcy5fZWRpdG9yID0gZWRpdG9yXG5cbiAgICB0aGlzLl9zZXJpYWxpemVPcGVyYXRpb25zID0gdGhpcy5fc2VyaWFsaXplT3BlcmF0aW9ucy5iaW5kKHRoaXMpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTRVJJQUxJWkFUSU9OXG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGVkaXRvciBzdGF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyA9IHt9XG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBzZXJpYWxpemUgKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuX29wdGlvbnMgPSBTREtVdGlscy5kZWZhdWx0cyhvcHRpb25zLCB7XG4gICAgICBpbWFnZTogdHJ1ZVxuICAgIH0pXG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgdmVyc2lvbjogdGhpcy5jb25zdHJ1Y3Rvci52ZXJzaW9uXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3NlcmlhbGl6ZUlucHV0SW1hZ2UoZGF0YSlcbiAgICAgIC50aGVuKHRoaXMuX3NlcmlhbGl6ZU9wZXJhdGlvbnMpXG4gIH1cblxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgaW5wdXQgaW1hZ2UgYXMgYmFzZTY0IGFuZCBhdHRhY2hlcyBpdCB0byBgZGF0YWBcbiAgICogQHBhcmFtICB7T2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VyaWFsaXplSW5wdXRJbWFnZSAoZGF0YSkge1xuICAgIGNvbnN0IGltYWdlID0gdGhpcy5fZWRpdG9yLmdldEltYWdlKClcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGltYWdlXG5cbiAgICBpZiAoIXRoaXMuX29wdGlvbnMuaW1hZ2UpIHtcbiAgICAgIGRhdGEuaW5wdXRJbWFnZSA9IHsgd2lkdGgsIGhlaWdodCB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRhdGEpXG4gICAgfVxuXG4gICAgY29uc3QgY2FudmFzID0gU0RLVXRpbHMuY3JlYXRlQ2FudmFzKClcbiAgICBjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aFxuICAgIGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHRcbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcbiAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMClcblxuICAgIGNvbnN0IGRhdGFVcmwgPSBjYW52YXMudG9EYXRhVVJMKEltYWdlRm9ybWF0LlBORylcbiAgICBkYXRhLmlucHV0SW1hZ2UgPSB7XG4gICAgICB0eXBlOiBJbWFnZUZvcm1hdC5QTkcsXG4gICAgICBkYXRhOiBkYXRhVXJsLnJlcGxhY2UoL15kYXRhOmltYWdlXFwvKC4qPyk7YmFzZTY0LC8sICcnKSxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGF0YSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBvcGVyYXRpb25zIGFuZCBhdHRhY2hlcyB0aGVtIHRvIGBkYXRhYFxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGRhdGFcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVPcGVyYXRpb25zIChkYXRhKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9ucyA9IFtdXG4gICAgY29uc3Qgc3RhY2sgPSB0aGlzLl9lZGl0b3Iub3BlcmF0aW9ucy5nZXRTdGFjaygpXG4gICAgc3RhY2suZm9yRWFjaCgob3BlcmF0aW9uKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gdGhpcy5fc2VyaWFsaXplT3BlcmF0aW9uKG9wZXJhdGlvbiwgb3BlcmF0aW9ucylcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG9wZXJhdGlvbnMucHVzaChkYXRhKVxuICAgICAgfVxuICAgIH0pXG4gICAgZGF0YS5vcGVyYXRpb25zID0gb3BlcmF0aW9ucy5maWx0ZXIobyA9PiBvKSAvLyBSZW1vdmUgcG9zc2libGUgYG51bGxgIG9wZXJhdGlvbnNcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRhdGEpXG4gIH1cblxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbltdfSBvcGVyYXRpb25zXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVPcGVyYXRpb24gKG9wZXJhdGlvbiwgb3BlcmF0aW9ucykge1xuICAgIHN3aXRjaCAob3BlcmF0aW9uLmNvbnN0cnVjdG9yLmlkZW50aWZpZXIpIHtcbiAgICAgIGNhc2UgJ3RyYW5zZm9ybSc6XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXJpYWxpemVUcmFuc2Zvcm1PcGVyYXRpb24ob3BlcmF0aW9uKVxuICAgICAgY2FzZSAnb3JpZW50YXRpb24nOlxuICAgICAgICByZXR1cm4gdGhpcy5fc2VyaWFsaXplT3JpZW50YXRpb25PcGVyYXRpb24ob3BlcmF0aW9uKVxuICAgICAgY2FzZSAnZmlsdGVyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlcmlhbGl6ZUZpbHRlck9wZXJhdGlvbihvcGVyYXRpb24pXG4gICAgICBjYXNlICdhZGp1c3RtZW50cyc6XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXJpYWxpemVBZGp1c3RtZW50c09wZXJhdGlvbihvcGVyYXRpb24pXG4gICAgICBjYXNlICdzcHJpdGUnOlxuICAgICAgICByZXR1cm4gdGhpcy5fc2VyaWFsaXplU3ByaXRlT3BlcmF0aW9uKG9wZXJhdGlvbiwgb3BlcmF0aW9ucylcbiAgICAgIGNhc2UgJ3JhZGlhbC1mb2N1cyc6XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXJpYWxpemVSYWRpYWxGb2N1c09wZXJhdGlvbihvcGVyYXRpb24pXG4gICAgICBjYXNlICdtaXJyb3JlZC1mb2N1cyc6XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXJpYWxpemVMaW5lYXJGb2N1c09wZXJhdGlvbihvcGVyYXRpb24pXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBMb2cud2FybihgVW5hYmxlIHRvIHNlcmlhbGl6ZSBvcGVyYXRpb24gb2YgdHlwZSAke29wZXJhdGlvbi5jb25zdHJ1Y3Rvci5pZGVudGlmaWVyfWApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIHRyYW5zZm9ybSBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9uLlRyYW5zZm9ybU9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVUcmFuc2Zvcm1PcGVyYXRpb24gKG9wZXJhdGlvbikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBvcGVyYXRpb24uc2VyaWFsaXplT3B0aW9ucyhbJ3N0YXJ0JywgJ2VuZCcsICdyb3RhdGlvbiddLCB0cnVlKVxuICAgIG9wdGlvbnMucm90YXRpb24gPSAob3B0aW9ucy5yb3RhdGlvbiArIFRXSUNFX1BJKSAlIFRXSUNFX1BJXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdjcm9wJyxcbiAgICAgIG9wdGlvbnNcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gb3JpZW50YXRpb24gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbi5PcmllbnRhdGlvbk9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVPcmllbnRhdGlvbk9wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdvcmllbnRhdGlvbicsXG4gICAgICBvcHRpb25zOiBvcGVyYXRpb24uc2VyaWFsaXplT3B0aW9ucyhbXG4gICAgICAgICdmbGlwVmVydGljYWxseScsXG4gICAgICAgICdmbGlwSG9yaXpvbnRhbGx5JyxcbiAgICAgICAgJ3JvdGF0aW9uJ1xuICAgICAgXSwgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gZmlsdGVyIG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLkZpbHRlck9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVGaWx0ZXJPcGVyYXRpb24gKG9wZXJhdGlvbikge1xuICAgIGlmIChvcGVyYXRpb24uZ2V0SWRlbnRpZmllcigpID09PSAnaWRlbnRpdHknKSByZXR1cm4gbnVsbFxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdmaWx0ZXInLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBpbnRlbnNpdHk6IG9wZXJhdGlvbi5nZXRJbnRlbnNpdHkoKSxcbiAgICAgICAgbmFtZTogb3BlcmF0aW9uLmdldElkZW50aWZpZXIoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBhZGp1c3RtZW50cyBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5BZGp1c3RtZW50c09wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVBZGp1c3RtZW50c09wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgY29uc3QgeyBhdmFpbGFibGVPcHRpb25zIH0gPSBvcGVyYXRpb25cblxuICAgIGNvbnN0IG9wdGlvbk5hbWVzID0gW1xuICAgICAgJ2JyaWdodG5lc3MnLCAnc2F0dXJhdGlvbicsICdjb250cmFzdCcsICdleHBvc3VyZScsICdzaGFkb3dzJywgJ2hpZ2hsaWdodHMnLCAnY2xhcml0eSdcbiAgICBdXG4gICAgY29uc3Qgb3B0aW9ucyA9IHt9XG4gICAgb3B0aW9uTmFtZXMuZm9yRWFjaChvcHRpb25OYW1lID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbiA9IGF2YWlsYWJsZU9wdGlvbnNbb3B0aW9uTmFtZV1cbiAgICAgIGNvbnN0IHZhbHVlID0gb3BlcmF0aW9uLmdldE9wdGlvbihvcHRpb25OYW1lKVxuICAgICAgY29uc3QgeyBtaW5WYWx1ZSwgbWlkVmFsdWUsIG1heFZhbHVlIH0gPSBvcHRpb25cbiAgICAgIG9wdGlvbnNbb3B0aW9uTmFtZV0gPSB2YWx1ZSA8PSBtaWRWYWx1ZVxuICAgICAgICA/ICh2YWx1ZSAtIG1pblZhbHVlKSAvIChtaWRWYWx1ZSAtIG1pblZhbHVlKSAtIDFcbiAgICAgICAgOiAodmFsdWUgLSBtaWRWYWx1ZSkgLyAobWF4VmFsdWUgLSBtaWRWYWx1ZSlcbiAgICB9KVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnYWRqdXN0bWVudHMnLFxuICAgICAgb3B0aW9uc1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBzcHJpdGUgb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVTcHJpdGVPcGVyYXRpb24gKG9wZXJhdGlvbiwgb3BlcmF0aW9ucykge1xuICAgIGNvbnN0IHNwcml0ZU9wZXJhdGlvbnMgPSBvcGVyYXRpb25zLmZpbHRlcihvID0+IG8udHlwZSA9PT0gJ3Nwcml0ZScpXG4gICAgbGV0IHNwcml0ZU9wZXJhdGlvblxuICAgIGxldCByZXR1cm5PcGVyYXRpb24gPSB0cnVlXG4gICAgaWYgKHNwcml0ZU9wZXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgICBzcHJpdGVPcGVyYXRpb24gPSBzcHJpdGVPcGVyYXRpb25zLnBvcCgpXG4gICAgICByZXR1cm5PcGVyYXRpb24gPSBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBObyBzcHJpdGUgb3BlcmF0aW9uIGV4aXN0cywgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgc3ByaXRlT3BlcmF0aW9uID0ge1xuICAgICAgICB0eXBlOiAnc3ByaXRlJyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHNwcml0ZXM6IFtdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVyYXRpb24uZ2V0U3ByaXRlcygpXG4gICAgICAuZm9yRWFjaCgoc3ByaXRlKSA9PiB7XG4gICAgICAgIGxldCBzcHJpdGVJdGVtID0gbnVsbFxuICAgICAgICBpZiAoc3ByaXRlIGluc3RhbmNlb2Ygb3BlcmF0aW9uLmNvbnN0cnVjdG9yLlN0aWNrZXJTcHJpdGUpIHtcbiAgICAgICAgICBzcHJpdGVJdGVtID0gdGhpcy5fc2VyaWFsaXplU3RpY2tlcihvcGVyYXRpb24sIHNwcml0ZSlcbiAgICAgICAgfSBlbHNlIGlmIChzcHJpdGUgaW5zdGFuY2VvZiBvcGVyYXRpb24uY29uc3RydWN0b3IuVGV4dFNwcml0ZSkge1xuICAgICAgICAgIHNwcml0ZUl0ZW0gPSB0aGlzLl9zZXJpYWxpemVUZXh0KG9wZXJhdGlvbiwgc3ByaXRlKVxuICAgICAgICB9IGVsc2UgaWYgKHNwcml0ZSBpbnN0YW5jZW9mIG9wZXJhdGlvbi5jb25zdHJ1Y3Rvci5CcnVzaFNwcml0ZSkge1xuICAgICAgICAgIHNwcml0ZUl0ZW0gPSB0aGlzLl9zZXJpYWxpemVCcnVzaChvcGVyYXRpb24sIHNwcml0ZSlcbiAgICAgICAgfSBlbHNlIGlmIChzcHJpdGUgaW5zdGFuY2VvZiBvcGVyYXRpb24uY29uc3RydWN0b3IuVGV4dERlc2lnblNwcml0ZSkge1xuICAgICAgICAgIHNwcml0ZUl0ZW0gPSB0aGlzLl9zZXJpYWxpemVUZXh0RGVzaWduICYmIHRoaXMuX3NlcmlhbGl6ZVRleHREZXNpZ24ob3BlcmF0aW9uLCBzcHJpdGUpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3ByaXRlSXRlbSkge1xuICAgICAgICAgIHNwcml0ZU9wZXJhdGlvbi5vcHRpb25zLnNwcml0ZXMucHVzaChzcHJpdGVJdGVtKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgaWYgKHJldHVybk9wZXJhdGlvbikge1xuICAgICAgcmV0dXJuIHNwcml0ZU9wZXJhdGlvblxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBzdGlja2VyXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlN0aWNrZXJTcHJpdGV9IHNwcml0ZVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VyaWFsaXplU3RpY2tlciAob3BlcmF0aW9uLCBzcHJpdGUpIHtcbiAgICBjb25zdCBhZGp1c3RtZW50cyA9IHNwcml0ZS5nZXRBZGp1c3RtZW50cygpXG5cbiAgICBjb25zdCBvcHRpb25zID0gc3ByaXRlLnNlcmlhbGl6ZU9wdGlvbnMoW1xuICAgICAgJ2lkZW50aWZpZXInLCAncG9zaXRpb24nLCAnZGltZW5zaW9ucycsICdmbGlwVmVydGljYWxseScsICdmbGlwSG9yaXpvbnRhbGx5JywgJ3JvdGF0aW9uJ1xuICAgIF0sIHRydWUpXG5cbiAgICBvcHRpb25zLm5hbWUgPSBvcHRpb25zLmlkZW50aWZpZXJcbiAgICBkZWxldGUgb3B0aW9ucy5pZGVudGlmaWVyXG5cbiAgICBvcHRpb25zLnJvdGF0aW9uID0gKG9wdGlvbnMucm90YXRpb24gKyBUV0lDRV9QSSkgJSBUV0lDRV9QSVxuXG4gICAgY29uc3QgYWRqdXN0bWVudHNPcHRpb25zID0gYWRqdXN0bWVudHMuYXZhaWxhYmxlT3B0aW9uc1xuICAgIG9wdGlvbnMuYWRqdXN0bWVudHMgPSB7XG4gICAgICBicmlnaHRuZXNzOiBhZGp1c3RtZW50cy5nZXRCcmlnaHRuZXNzKCkgLSBhZGp1c3RtZW50c09wdGlvbnMuYnJpZ2h0bmVzcy5kZWZhdWx0LFxuICAgICAgc2F0dXJhdGlvbjogYWRqdXN0bWVudHMuZ2V0U2F0dXJhdGlvbigpIC0gYWRqdXN0bWVudHNPcHRpb25zLnNhdHVyYXRpb24uZGVmYXVsdCxcbiAgICAgIGNvbnRyYXN0OiBhZGp1c3RtZW50cy5nZXRDb250cmFzdCgpIC0gYWRqdXN0bWVudHNPcHRpb25zLmNvbnRyYXN0LmRlZmF1bHRcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3N0aWNrZXInLFxuICAgICAgb3B0aW9uc1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiB0ZXh0IHNwcml0ZVxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5UZXh0U3ByaXRlfSBzcHJpdGVcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NlcmlhbGl6ZVRleHQgKG9wZXJhdGlvbiwgc3ByaXRlKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHNwcml0ZS5zZXJpYWxpemVPcHRpb25zKFtcbiAgICAgICdmb250U2l6ZScsICdsaW5lSGVpZ2h0JywgJ2ZvbnRGYW1pbHknLCAnZm9udFdlaWdodCcsICdhbGlnbm1lbnQnLFxuICAgICAgJ2NvbG9yJywgJ2JhY2tncm91bmRDb2xvcicsXG4gICAgICAncG9zaXRpb24nLCAncm90YXRpb24nLFxuICAgICAgJ3RleHQnLCAnbWF4V2lkdGgnXG4gICAgXSwgdHJ1ZSlcbiAgICBvcHRpb25zLnJvdGF0aW9uID0gKG9wdGlvbnMucm90YXRpb24gKyBUV0lDRV9QSSkgJSBUV0lDRV9QSVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgIG9wdGlvbnNcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gYnJ1c2ggc3ByaXRlXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLkJydXNoU3ByaXRlfSBzcHJpdGVcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NlcmlhbGl6ZUJydXNoIChvcGVyYXRpb24sIHNwcml0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnYnJ1c2gnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBwYXRoczogc3ByaXRlLmdldFBhdGhzKClcbiAgICAgICAgICAubWFwKChwYXRoKSA9PiB0aGlzLl9zZXJpYWxpemVQYXRoKHBhdGgpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBwYXRoXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLkJydXNoU3ByaXRlLlBhdGh9IHBhdGhcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NlcmlhbGl6ZVBhdGggKHBhdGgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gcGF0aC5nZXRCcnVzaCgpLnNlcmlhbGl6ZU9wdGlvbnMoWydjb2xvcicsICdzaXplJ10sIHRydWUpXG5cbiAgICBvcHRpb25zLnBvaW50cyA9IHBhdGguZ2V0Q29udHJvbFBvaW50cygpLm1hcCgocG9pbnQpID0+XG4gICAgICBwb2ludC5nZXRQb3NpdGlvbigpLnRvT2JqZWN0KClcbiAgICApXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiByYWRpYWwgZm9jdXMgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuUmFkaWFsRm9jdXNPcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VyaWFsaXplUmFkaWFsRm9jdXNPcGVyYXRpb24gKG9wZXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZm9jdXMnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICB0eXBlOiAncmFkaWFsJyxcbiAgICAgICAgb3B0aW9uczogb3BlcmF0aW9uLnNlcmlhbGl6ZU9wdGlvbnMoWydwb3NpdGlvbicsICdyYWRpdXMnLCAnZ3JhZGllbnRSYWRpdXMnLCAnYmx1clJhZGl1cyddLCB0cnVlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBsaW5lYXIgZm9jdXMgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuTWlycm9yZWRGb2N1c09wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVMaW5lYXJGb2N1c09wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdmb2N1cycsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHR5cGU6ICdsaW5lYXInLFxuICAgICAgICBvcHRpb25zOiBvcGVyYXRpb24uc2VyaWFsaXplT3B0aW9ucyhbJ3N0YXJ0JywgJ2VuZCcsICdibHVyUmFkaXVzJywgJ3NpemUnLCAnZ3JhZGllbnRTaXplJ10sIHRydWUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGlucHV0IGRpbWVuc2lvbnMgZm9yIHRoZSBnaXZlbiBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldElucHV0RGltZW5zaW9uc0Zvck9wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgbGV0IG9wZXJhdGlvbkZvdW5kID0gZmFsc2VcbiAgICBsZXQgaW5wdXREaW1lbnNpb25zID0gdGhpcy5fZWRpdG9yLmdldElucHV0RGltZW5zaW9ucygpXG5cbiAgICB0aGlzLl9lZGl0b3Iub3BlcmF0aW9ucy5nZXRTdGFjaygpXG4gICAgICAuZm9yRWFjaCgob3ApID0+IHtcbiAgICAgICAgaWYgKG9wID09PSBvcGVyYXRpb24pIG9wZXJhdGlvbkZvdW5kID0gdHJ1ZVxuICAgICAgICBpZiAob3BlcmF0aW9uRm91bmQpIHJldHVyblxuICAgICAgICBpbnB1dERpbWVuc2lvbnMgPSBvcC5nZXROZXdEaW1lbnNpb25zKGlucHV0RGltZW5zaW9ucylcbiAgICAgIH0pXG5cbiAgICByZXR1cm4gaW5wdXREaW1lbnNpb25zXG4gIH1cbn1cblxudjEwMFNlcmlhbGl6ZXIudmVyc2lvbiA9ICcxLjAuMCdcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL3NlcmlhbGl6YXRpb24vMS4wLjAvc2VyaWFsaXplci5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgU0RLLCBWZWN0b3IyLCBDb2xvciwgU0RLVXRpbHMsIExvZyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgRmlsdGVyTWFuYWdlciBmcm9tICdzaGFyZWQvbWFuYWdlcnMvZmlsdGVyLW1hbmFnZXInXG5pbXBvcnQgU3RpY2tlck1hbmFnZXIgZnJvbSAnc2hhcmVkL21hbmFnZXJzL3N0aWNrZXItbWFuYWdlcidcbmltcG9ydCBCcnVzaE1hbmFnZXIgZnJvbSAnc2hhcmVkL21hbmFnZXJzL2JydXNoLW1hbmFnZXInXG5pbXBvcnQgRm9udE1hbmFnZXIgZnJvbSAnc2hhcmVkL21hbmFnZXJzL2ZvbnQtbWFuYWdlcidcbmltcG9ydCBGb250TG9hZGVyIGZyb20gJ2xpYi9mb250LWxvYWRlcidcblxubGV0IEJydXNoXG5pZiAodHlwZW9mIFNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgQnJ1c2ggPSBTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uQnJ1c2hTcHJpdGVcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgdjEwMERlc2VyaWFsaXplciB7XG4gIGNvbnN0cnVjdG9yIChlZGl0b3IsIGRhdGEpIHtcbiAgICB0aGlzLl9lZGl0b3IgPSBlZGl0b3JcbiAgICB0aGlzLl91aSA9IHRoaXMuX2VkaXRvci5nZXRVSSgpXG4gICAgdGhpcy5fZGF0YSA9IGRhdGFcblxuICAgIHRoaXMuX2ZpbHRlck1hbmFnZXIgPSBuZXcgRmlsdGVyTWFuYWdlcih0aGlzLl91aSwgdGhpcy5fZ2V0T3B0aW9ucygnZmlsdGVyJykpXG4gICAgdGhpcy5fc3RpY2tlck1hbmFnZXIgPSBuZXcgU3RpY2tlck1hbmFnZXIodGhpcy5fdWksIHRoaXMuX2dldE9wdGlvbnMoJ3N0aWNrZXInKSlcbiAgICB0aGlzLl9icnVzaE1hbmFnZXIgPSBuZXcgQnJ1c2hNYW5hZ2VyKHRoaXMuX3VpLCB0aGlzLl9nZXRPcHRpb25zKCdicnVzaCcpKVxuICAgIHRoaXMuX2ZvbnRNYW5hZ2VyID0gbmV3IEZvbnRNYW5hZ2VyKHRoaXMuX3VpLCB0aGlzLl9nZXRPcHRpb25zKCd0ZXh0JykpXG4gIH1cblxuICBfZ2V0T3B0aW9ucyAoY29udHJvbCkge1xuICAgIGNvbnN0IHsgY29udHJvbHMgfSA9IHRoaXMuX2VkaXRvclxuICAgIGxldCBkZWZhdWx0T3B0aW9ucyA9IHt9XG4gICAgaWYgKGNvbnRyb2xzICYmIGNvbnRyb2xzLmdldChjb250cm9sKSkge1xuICAgICAgZGVmYXVsdE9wdGlvbnMgPSBjb250cm9scy5nZXQoY29udHJvbCkuZGVmYXVsdE9wdGlvbnNcbiAgICB9XG5cbiAgICBjb25zdCBlZGl0b3JPcHRpb25zID0gdGhpcy5fZWRpdG9yLmdldE9wdGlvbnMoKVxuICAgIHJldHVybiBTREtVdGlscy5kZWVwRGVmYXVsdHMoe30sIGVkaXRvck9wdGlvbnMuZWRpdG9yLmNvbnRyb2xzT3B0aW9uc1tjb250cm9sXSB8fCB7fSwgZGVmYXVsdE9wdGlvbnMpXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBkYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBkZXNlcmlhbGl6ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlVmVyc2lvbigpXG4gICAgICAudGhlbigoKSA9PiB0aGlzLl9kZXNlcmlhbGl6ZUlucHV0SW1hZ2UoKSlcbiAgICAgIC50aGVuKCgpID0+IHRoaXMuX2Rlc2VyaWFsaXplT3BlcmF0aW9ucygpKVxuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyB0aGUgdmVyc2lvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgX3ZhbGlkYXRlVmVyc2lvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2RhdGEudmVyc2lvbiAhPT0gdGhpcy5jb25zdHJ1Y3Rvci52ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGBJbnZhbGlkIHZlcnNpb24gJHt0aGlzLl9kYXRhLnZlcnNpb259LCBleHBlY3RlZCAke3RoaXMuY29uc3RydWN0b3IudmVyc2lvbn1gKSlcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBpbnB1dCBpbWFnZSAoaWYgcHJlc2VudClcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXNlcmlhbGl6ZUlucHV0SW1hZ2UgKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCB7IGRhdGEsIHR5cGUgfSA9IHRoaXMuX2RhdGEuaW5wdXRJbWFnZVxuICAgICAgaWYgKGRhdGEgJiYgdHlwZSkge1xuICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKVxuICAgICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX2VkaXRvci5zZXRJbWFnZShpbWFnZSlcbiAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgfSlcbiAgICAgICAgaW1hZ2Uuc3JjID0gYGRhdGE6JHt0eXBlfTtiYXNlNjQsJHtkYXRhfWBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBvcGVyYXRpb25zXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhc3luYyBfZGVzZXJpYWxpemVPcGVyYXRpb25zICgpIHtcbiAgICBjb25zdCBvcGVyYXRpb25zID0gdGhpcy5fZGF0YS5vcGVyYXRpb25zXG4gICAgY29uc3QgaW5zdGFuY2VzID0gW11cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3BlcmF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uID0gb3BlcmF0aW9uc1tpXVxuICAgICAgY29uc3QgaW5zdGFuY2UgPSBhd2FpdCB0aGlzLl9kZXNlcmlhbGl6ZU9wZXJhdGlvbihvcGVyYXRpb24pXG4gICAgICBpbnN0YW5jZXMucHVzaChpbnN0YW5jZSlcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2VzXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXNlcmlhbGl6ZU9wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgc3dpdGNoIChvcGVyYXRpb24udHlwZSkge1xuICAgICAgY2FzZSAnY3JvcCc6XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNlcmlhbGl6ZUNyb3BPcGVyYXRpb24ob3BlcmF0aW9uKVxuICAgICAgY2FzZSAnb3JpZW50YXRpb24nOlxuICAgICAgICByZXR1cm4gdGhpcy5fZGVzZXJpYWxpemVPcmllbnRhdGlvbk9wZXJhdGlvbihvcGVyYXRpb24pXG4gICAgICBjYXNlICdmaWx0ZXInOlxuICAgICAgICByZXR1cm4gdGhpcy5fZGVzZXJpYWxpemVGaWx0ZXJPcGVyYXRpb24ob3BlcmF0aW9uKVxuICAgICAgY2FzZSAnYWRqdXN0bWVudHMnOlxuICAgICAgICByZXR1cm4gdGhpcy5fZGVzZXJpYWxpemVBZGp1c3RtZW50c09wZXJhdGlvbihvcGVyYXRpb24pXG4gICAgICBjYXNlICdzcHJpdGUnOlxuICAgICAgICByZXR1cm4gdGhpcy5fZGVzZXJpYWxpemVTcHJpdGVPcGVyYXRpb24ob3BlcmF0aW9uKVxuICAgICAgY2FzZSAnZm9jdXMnOlxuICAgICAgICByZXR1cm4gdGhpcy5fZGVzZXJpYWxpemVGb2N1c09wZXJhdGlvbihvcGVyYXRpb24pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gY3JvcCBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBvcGVyYXRpb25cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXNlcmlhbGl6ZUNyb3BPcGVyYXRpb24gKG9wZXJhdGlvbikge1xuICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gb3BlcmF0aW9uXG4gICAgbGV0IHsgcm90YXRpb24gfSA9IG9wdGlvbnNcbiAgICBjb25zdCBzdGFydCA9IFZlY3RvcjIuZnJvbU9iamVjdChvcHRpb25zLnN0YXJ0KVxuICAgIGNvbnN0IGVuZCA9IFZlY3RvcjIuZnJvbU9iamVjdChvcHRpb25zLmVuZClcblxuICAgIC8vIE5vcm1hbGl6ZSByb3RhdGlvblxuICAgIGlmIChyb3RhdGlvbiA+IE1hdGguUEkpIHtcbiAgICAgIHJvdGF0aW9uIC09IE1hdGguUEkgKiAyXG4gICAgfVxuXG4gICAgY29uc3QgY3JvcE9wdGlvbnMgPSB7IHN0YXJ0LCBlbmQgfVxuICAgIGlmICh0eXBlb2Ygcm90YXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjcm9wT3B0aW9ucy5yb3RhdGlvbiA9IHJvdGF0aW9uXG4gICAgfVxuXG4gICAgY29uc3QgdHJhbnNmb3JtT3BlcmF0aW9uID0gdGhpcy5fZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ3RyYW5zZm9ybScpXG4gICAgdGhpcy5fZWRpdG9yLmJyb2FkY2FzdFRyYW5zZm9ybSh0cmFuc2Zvcm1PcGVyYXRpb24sIGNyb3BPcHRpb25zKVxuICAgIHRyYW5zZm9ybU9wZXJhdGlvbi5zZXQoY3JvcE9wdGlvbnMpXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cmFuc2Zvcm1PcGVyYXRpb24pXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBvcmllbnRhdGlvbiBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBvcGVyYXRpb25cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXNlcmlhbGl6ZU9yaWVudGF0aW9uT3BlcmF0aW9uIChvcGVyYXRpb24pIHtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IG9wZXJhdGlvblxuICAgIGNvbnN0IG9yaWVudGF0aW9uT3BlcmF0aW9uID0gdGhpcy5fZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ29yaWVudGF0aW9uJylcbiAgICBpZiAoIW9yaWVudGF0aW9uT3BlcmF0aW9uKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICBvcmllbnRhdGlvbk9wZXJhdGlvbi5zZXQob3B0aW9ucylcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG9yaWVudGF0aW9uT3BlcmF0aW9uKVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gZmlsdGVyIG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wZXJhdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplRmlsdGVyT3BlcmF0aW9uIChvcGVyYXRpb24pIHtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IG9wZXJhdGlvblxuXG4gICAgaWYgKCF0aGlzLl9maWx0ZXJNYW5hZ2VyLmdldEZpbHRlckJ5SWRlbnRpZmllcihvcHRpb25zLm5hbWUpKSB7XG4gICAgICBMb2cud2FybignRGVzZXJpYWxpemVyJywgYFVua25vd24gZmlsdGVyIFxcYCR7b3B0aW9ucy5uYW1lfVxcYGApXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmlsdGVyTWFuYWdlci5pbnN0YW50aWF0ZUZpbHRlcldpdGhJZGVudGlmaWVyKG9wdGlvbnMubmFtZSlcbiAgICAgIC50aGVuKGZpbHRlciA9PiB7XG4gICAgICAgIGNvbnN0IGZpbHRlck9wZXJhdGlvbiA9IHRoaXMuX2VkaXRvci5vcGVyYXRpb25zLmdldE9yQ3JlYXRlKCdmaWx0ZXInKVxuICAgICAgICBmaWx0ZXJPcGVyYXRpb24uc2V0KHtcbiAgICAgICAgICBpZGVudGlmaWVyOiBvcHRpb25zLm5hbWUsXG4gICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgIGludGVuc2l0eTogb3B0aW9ucy5pbnRlbnNpdHlcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGZpbHRlck9wZXJhdGlvblxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIGFkanVzdG1lbnRzIG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wZXJhdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplQWRqdXN0bWVudHNPcGVyYXRpb24gKG9wZXJhdGlvbikge1xuICAgIGNvbnN0IHsgQWRqdXN0bWVudHNPcGVyYXRpb24gfSA9IFNESy5PcGVyYXRpb25zXG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSBvcGVyYXRpb25cblxuICAgIGNvbnN0IGtub3duT3B0aW9ucyA9IFsnYnJpZ2h0bmVzcycsICdzYXR1cmF0aW9uJywgJ2NvbnRyYXN0JywgJ2V4cG9zdXJlJywgJ3NoYWRvd3MnLCAnaGlnaGxpZ2h0cycsICdjbGFyaXR5J11cblxuICAgIGNvbnN0IG9wZXJhdGlvbk9wdGlvbnMgPSB7fVxuXG4gICAga25vd25PcHRpb25zLmZvckVhY2gob3B0aW9uTmFtZSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnNbb3B0aW9uTmFtZV0gPT09ICd1bmRlZmluZWQnKSByZXR1cm5cblxuICAgICAgY29uc3QgeyBtaW5WYWx1ZSwgbWlkVmFsdWUsIG1heFZhbHVlIH0gPSBBZGp1c3RtZW50c09wZXJhdGlvbi5wcm90b3R5cGUuYXZhaWxhYmxlT3B0aW9uc1tvcHRpb25OYW1lXVxuICAgICAgbGV0IHZhbHVlID0gb3B0aW9uc1tvcHRpb25OYW1lXVxuXG4gICAgICB2YWx1ZSA9IHZhbHVlIDwgMFxuICAgICAgICA/IChtaWRWYWx1ZSArIChtaWRWYWx1ZSAtIG1pblZhbHVlKSAqIHZhbHVlKVxuICAgICAgICA6IChtaWRWYWx1ZSArIChtYXhWYWx1ZSAtIG1pZFZhbHVlKSAqIHZhbHVlKVxuICAgICAgb3BlcmF0aW9uT3B0aW9uc1tvcHRpb25OYW1lXSA9IHZhbHVlXG4gICAgfSlcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ2FkanVzdG1lbnRzJywgb3BlcmF0aW9uT3B0aW9ucykpXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBzcHJpdGUgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge09iamVjdH0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGVzZXJpYWxpemVTcHJpdGVPcGVyYXRpb24gKG9wZXJhdGlvbikge1xuICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gb3BlcmF0aW9uXG4gICAgY29uc3Qgc3ByaXRlT3BlcmF0aW9uID0gdGhpcy5fZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ3Nwcml0ZScpXG4gICAgaWYgKCFzcHJpdGVPcGVyYXRpb24pIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuXG4gICAgY29uc3QgcHJvbWlzZXMgPSBvcHRpb25zLnNwcml0ZXMubWFwKChzcHJpdGUpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLl9kZXNlcmlhbGl6ZVNwcml0ZShzcHJpdGVPcGVyYXRpb24sIHNwcml0ZSlcbiAgICB9KS5maWx0ZXIocCA9PiBwKVxuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgIC50aGVuKChzcHJpdGVzKSA9PiB7XG4gICAgICAgIHNwcml0ZU9wZXJhdGlvbi5zZXRTcHJpdGVzKHNwcml0ZXMuZmlsdGVyKHMgPT4gcykpXG4gICAgICAgIHJldHVybiBzcHJpdGVPcGVyYXRpb25cbiAgICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBzcHJpdGVcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb259IHNwcml0ZU9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5TcHJpdGV9IHNwcml0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplU3ByaXRlIChzcHJpdGVPcGVyYXRpb24sIHNwcml0ZSkge1xuICAgIHN3aXRjaCAoc3ByaXRlLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3N0aWNrZXInOlxuICAgICAgICByZXR1cm4gdGhpcy5fZGVzZXJpYWxpemVTdGlja2VyKHNwcml0ZU9wZXJhdGlvbiwgc3ByaXRlKVxuICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNlcmlhbGl6ZVRleHQoc3ByaXRlT3BlcmF0aW9uLCBzcHJpdGUpXG4gICAgICBjYXNlICdicnVzaCc6XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNlcmlhbGl6ZUJydXNoKHNwcml0ZU9wZXJhdGlvbiwgc3ByaXRlKVxuICAgICAgY2FzZSAndGV4dGRlc2lnbic6XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNlcmlhbGl6ZVRleHREZXNpZ24gJiYgdGhpcy5fZGVzZXJpYWxpemVUZXh0RGVzaWduKHNwcml0ZU9wZXJhdGlvbiwgc3ByaXRlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIHN0aWNrZXIgZm9yIHRoZSBnaXZlbiBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtPYmplY3R9IHNwcml0ZVxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5TdGlja2VyU3ByaXRlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplU3RpY2tlciAob3BlcmF0aW9uLCBzcHJpdGUpIHtcbiAgICBjb25zdCB7IFNwcml0ZU9wZXJhdGlvbiB9ID0gU0RLLk9wZXJhdGlvbnNcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHNwcml0ZVxuXG4gICAgY29uc3Qgc3RpY2tlciA9IHRoaXMuX3N0aWNrZXJNYW5hZ2VyLmdldFN0aWNrZXJCeUlkZW50aWZpZXIob3B0aW9ucy5uYW1lKVxuICAgIGNvbnN0IHVybCA9IHRoaXMuX3N0aWNrZXJNYW5hZ2VyLmdldFVSTEZvclN0aWNrZXIoc3RpY2tlcilcbiAgICBpZiAoIXN0aWNrZXIpIHtcbiAgICAgIExvZy53YXJuKCdEZXNlcmlhbGl6ZXInLCBgVW5rbm93biBzdGlja2VyICcke29wdGlvbnMubmFtZX0nLiBTa2lwcGluZyBzcHJpdGUuYClcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKClcbiAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFkanVzdG1lbnRzID0gU3ByaXRlT3BlcmF0aW9uLlN0aWNrZXJTcHJpdGUucHJvdG90eXBlLmF2YWlsYWJsZU9wdGlvbnMuYWRqdXN0bWVudHMuc3RydWN0dXJlXG4gICAgICAgIGNvbnN0IHsgcm90YXRpb24sIGZsaXBIb3Jpem9udGFsbHksIGZsaXBWZXJ0aWNhbGx5IH0gPSBvcHRpb25zXG4gICAgICAgIGNvbnN0IHN0aWNrZXJPcHRpb25zID0ge1xuICAgICAgICAgIGlkZW50aWZpZXI6IG9wdGlvbnMubmFtZSxcbiAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICBwb3NpdGlvbjogVmVjdG9yMi5mcm9tT2JqZWN0KG9wdGlvbnMucG9zaXRpb24pLFxuICAgICAgICAgIGRpbWVuc2lvbnM6IFZlY3RvcjIuZnJvbU9iamVjdChvcHRpb25zLmRpbWVuc2lvbnMpLFxuICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgIGZsaXBIb3Jpem9udGFsbHksXG4gICAgICAgICAgZmxpcFZlcnRpY2FsbHksXG4gICAgICAgICAgYWRqdXN0bWVudHM6IHt9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYWRqdXN0bWVudHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgWydicmlnaHRuZXNzJywgJ2NvbnRyYXN0JywgJ3NhdHVyYXRpb24nXS5mb3JFYWNoKG9wdGlvbiA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYWRqdXN0bWVudHNbb3B0aW9uXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgc3RpY2tlck9wdGlvbnMuYWRqdXN0bWVudHNbb3B0aW9uXSA9IG9wdGlvbnMuYWRqdXN0bWVudHNbb3B0aW9uXSArIGFkanVzdG1lbnRzW29wdGlvbl0uZGVmYXVsdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKG9wZXJhdGlvbi5jcmVhdGVTdGlja2VyKHN0aWNrZXJPcHRpb25zKSlcbiAgICAgIH0pXG4gICAgICBpbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuX2VkaXRvci5nZXRDcm9zc09yaWdpbigpXG4gICAgICBpbWFnZS5zcmMgPSB0aGlzLl9lZGl0b3IuZ2V0VUkoKS5nZXRBc3NldFBhdGgodXJsKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiB0ZXh0IGZvciB0aGUgZ2l2ZW4gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSB0ZXh0XG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlRleHRTcHJpdGV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGVzZXJpYWxpemVUZXh0IChvcGVyYXRpb24sIHRleHQpIHtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRleHRcbiAgICBjb25zdCB7IGZvbnRTaXplLCBsaW5lSGVpZ2h0LCBmb250RmFtaWx5LCBmb250V2VpZ2h0LCBhbGlnbm1lbnQsIHJvdGF0aW9uLCBtYXhXaWR0aCwgY29sb3IsIGJhY2tncm91bmRDb2xvciB9ID0gb3B0aW9uc1xuXG4gICAgY29uc3QgZm9udExvYWRlciA9IG5ldyBGb250TG9hZGVyKHRoaXMuX3VpKVxuICAgIGxldCBmb250ID0gdGhpcy5fZm9udE1hbmFnZXIuZ2V0Rm9udEJ5Rm9udEZhbWlseShmb250RmFtaWx5KVxuICAgIGlmICghZm9udCkgZm9udCA9IHRoaXMuX2ZvbnRNYW5hZ2VyLmdldERlZmF1bHRGb250KClcbiAgICBmb250TG9hZGVyLnNldEZvbnRzKFtmb250XSlcbiAgICByZXR1cm4gZm9udExvYWRlci5sb2FkKClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIG9wZXJhdGlvbi5jcmVhdGVUZXh0KHtcbiAgICAgICAgICBmb250U2l6ZSxcbiAgICAgICAgICBsaW5lSGVpZ2h0LFxuICAgICAgICAgIGZvbnRGYW1pbHksXG4gICAgICAgICAgZm9udFdlaWdodCxcbiAgICAgICAgICBhbGlnbm1lbnQsXG4gICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgdGV4dDogb3B0aW9ucy50ZXh0LFxuICAgICAgICAgIGNvbG9yOiBDb2xvci5mcm9tQXJyYXkoY29sb3IpLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3IuZnJvbUFycmF5KGJhY2tncm91bmRDb2xvciksXG4gICAgICAgICAgcG9zaXRpb246IFZlY3RvcjIuZnJvbU9iamVjdChvcHRpb25zLnBvc2l0aW9uKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIGJydXNoIGZvciB0aGUgZ2l2ZW4gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBicnVzaFxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5CcnVzaFNwcml0ZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXNlcmlhbGl6ZUJydXNoIChvcGVyYXRpb24sIGJydXNoKSB7XG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSBicnVzaFxuICAgIGNvbnN0IHsgcGF0aHMgfSA9IG9wdGlvbnNcblxuICAgIGNvbnN0IGJydXNoU3ByaXRlID0gb3BlcmF0aW9uLmNyZWF0ZUJydXNoKClcbiAgICBwYXRocy5mb3JFYWNoKChwYXRoKSA9PiB7XG4gICAgICB0aGlzLl9kZXNlcmlhbGl6ZUJydXNoUGF0aChicnVzaFNwcml0ZSwgcGF0aClcbiAgICB9KVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYnJ1c2hTcHJpdGUpXG4gIH1cblxuICBfZGVzZXJpYWxpemVCcnVzaFBhdGggKGJydXNoU3ByaXRlLCBwYXRoKSB7XG4gICAgY29uc3QgeyBwb2ludHMgfSA9IHBhdGhcblxuICAgIGNvbnN0IGJydXNoSW5zdGFuY2UgPSB0aGlzLl9jcmVhdGVCcnVzaEZvclBhdGgocGF0aClcbiAgICBjb25zdCBwYXRoT2JqZWN0ID0gYnJ1c2hTcHJpdGUuY3JlYXRlUGF0aChicnVzaEluc3RhbmNlKVxuICAgIHBhdGhPYmplY3Quc2V0Q2xvc2VkKHRydWUpXG4gICAgcG9pbnRzLmZvckVhY2goKHBvaW50KSA9PiB7XG4gICAgICBwYXRoT2JqZWN0LmFkZENvbnRyb2xQb2ludChcbiAgICAgICAgVmVjdG9yMi5mcm9tT2JqZWN0KHBvaW50KVxuICAgICAgKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGJydXNoIGZhY2Ugd2l0aCB0aGUgZ2l2ZW4gb3B0aW9uc1xuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5TcHJpdGVzLkJydXNoU3ByaXRlLlBhdGh9IHBhdGhcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uU3ByaXRlcy5CcnVzaFNwcml0ZS5CcnVzaH1cbiAgICovXG4gIF9jcmVhdGVCcnVzaEZvclBhdGggKHBhdGgpIHtcbiAgICBjb25zdCB7IGNvbG9yLCBzaXplIH0gPSBwYXRoXG4gICAgY29uc3QgY29sb3JPYmplY3QgPSBDb2xvci5mcm9tQXJyYXkoY29sb3IpXG5cbiAgICBjb25zdCBicnVzaE9wdGlvbnMgPSB7XG4gICAgICBjb2xvcjogY29sb3JPYmplY3QsXG4gICAgICBzaXplXG4gICAgfVxuXG4gICAgY29uc3QgcmF3QnJ1c2ggPSB0aGlzLl9icnVzaE1hbmFnZXIuZ2V0Rmlyc3RCcnVzaCgpXG4gICAgaWYgKHJhd0JydXNoLnByb3RvdHlwZSAmJiByYXdCcnVzaC5wcm90b3R5cGUgaW5zdGFuY2VvZiBCcnVzaCkge1xuICAgICAgLy8gQ3VzdG9tIEJydXNoIGluc3RhbmNlLCB1c2VkIGZvciBzcGVjaWFsIGJydXNoZXMgc3VjaCBhcyByYWRpYWwgYnJ1c2gsIHdoaWNoIGhhc1xuICAgICAgLy8gYW4gYWRkaXRpb25hbCBoYXJkbmVzcyBvcHRpb25cbiAgICAgIGNvbnN0IEJydXNoQ2xhc3MgPSByYXdCcnVzaFxuICAgICAgcmV0dXJuIG5ldyBCcnVzaENsYXNzKGJydXNoT3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgX2JydXNoID0gU0RLVXRpbHMuZXh0ZW5kKHt9LCByYXdCcnVzaClcbiAgICAgIGRlbGV0ZSBfYnJ1c2guaW1hZ2VcblxuICAgICAgY2xhc3MgQnJ1c2hDbGFzcyBleHRlbmRzIEJydXNoIHt9XG4gICAgICBCcnVzaENsYXNzLmlkZW50aWZpZXIgPSByYXdCcnVzaC5pZGVudGlmaWVyXG5cbiAgICAgIC8vIFBsYWluIEpTIG9iamVjdCwgdXNlZCBmb3Igc2ltcGxlIGltYWdlIGJydXNoZXNcbiAgICAgIHJldHVybiBuZXcgQnJ1c2hDbGFzcyhTREtVdGlscy5leHRlbmQoe30sIF9icnVzaCwgYnJ1c2hPcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBmb2N1cyBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBvcGVyYXRpb25cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXNlcmlhbGl6ZUZvY3VzT3BlcmF0aW9uIChvcGVyYXRpb24pIHtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IG9wZXJhdGlvbi5vcHRpb25zXG4gICAgc3dpdGNoIChvcGVyYXRpb24ub3B0aW9ucy50eXBlKSB7XG4gICAgICBjYXNlICdyYWRpYWwnOlxuICAgICAge1xuICAgICAgICBjb25zdCB7IHBvc2l0aW9uLCByYWRpdXMsIGdyYWRpZW50UmFkaXVzLCBibHVyUmFkaXVzIH0gPSBvcHRpb25zXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ3JhZGlhbC1mb2N1cycsIHtcbiAgICAgICAgICBwb3NpdGlvbjogVmVjdG9yMi5mcm9tT2JqZWN0KHBvc2l0aW9uKSxcbiAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgZ3JhZGllbnRSYWRpdXMsXG4gICAgICAgICAgYmx1clJhZGl1c1xuICAgICAgICB9KSlcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2xpbmVhcic6XG4gICAgICB7XG4gICAgICAgIGNvbnN0IHsgc3RhcnQsIGVuZCwgc2l6ZSwgZ3JhZGllbnRTaXplLCBibHVyUmFkaXVzIH0gPSBvcHRpb25zXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ21pcnJvcmVkLWZvY3VzJywge1xuICAgICAgICAgIHN0YXJ0OiBWZWN0b3IyLmZyb21PYmplY3Qoc3RhcnQpLFxuICAgICAgICAgIGVuZDogVmVjdG9yMi5mcm9tT2JqZWN0KGVuZCksXG4gICAgICAgICAgc2l6ZSxcbiAgICAgICAgICBncmFkaWVudFNpemUsXG4gICAgICAgICAgYmx1clJhZGl1c1xuICAgICAgICB9KSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW5wdXQgZGltZW5zaW9ucyBmb3IgdGhlIGdpdmVuIG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0SW5wdXREaW1lbnNpb25zRm9yT3BlcmF0aW9uIChvcGVyYXRpb24pIHtcbiAgICBsZXQgb3BlcmF0aW9uRm91bmQgPSBmYWxzZVxuICAgIGxldCBpbnB1dERpbWVuc2lvbnMgPSB0aGlzLl9lZGl0b3IuZ2V0SW5wdXREaW1lbnNpb25zKClcblxuICAgIHRoaXMuX2VkaXRvci5vcGVyYXRpb25zLmdldFN0YWNrKClcbiAgICAgIC5mb3JFYWNoKChvcCkgPT4ge1xuICAgICAgICBpZiAob3AgPT09IG9wZXJhdGlvbikgb3BlcmF0aW9uRm91bmQgPSB0cnVlXG4gICAgICAgIGlmIChvcGVyYXRpb25Gb3VuZCkgcmV0dXJuXG4gICAgICAgIGlucHV0RGltZW5zaW9ucyA9IG9wLmdldE5ld0RpbWVuc2lvbnMoaW5wdXREaW1lbnNpb25zKVxuICAgICAgfSlcblxuICAgIHJldHVybiBpbnB1dERpbWVuc2lvbnNcbiAgfVxufVxuXG52MTAwRGVzZXJpYWxpemVyLnZlcnNpb24gPSAnMS4wLjAnXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzEuMC4wL2Rlc2VyaWFsaXplci5qcyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBTREssIFNoYXJlZENvbnN0YW50cywgVXRpbHMsIEltYWdlTG9hZGVyIH0gZnJvbSAnZ2xvYmFscydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yICh1aSwgb3B0aW9ucykge1xuICAgIHRoaXMuX3VpID0gdWlcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMuX2NhdGVnb3JpZXNCeUlkID0ge31cbiAgICB0aGlzLl9maWx0ZXJzQnlJZGVudGlmaWVyID0ge1xuICAgICAgaWRlbnRpdHk6IFNESy5PcGVyYXRpb25zLkZpbHRlck9wZXJhdGlvbi5GaWx0ZXJzLklkZW50aXR5RmlsdGVyXG4gICAgfVxuXG4gICAgdGhpcy5fY2F0ZWdvcmllcyA9IFNoYXJlZENvbnN0YW50cy5ERUZBVUxUUy5GSUxURVJTLnNsaWNlKDApXG5cbiAgICB0aGlzLl9pbml0Q2F0ZWdvcmllcygpXG4gIH1cblxuICBpbnN0YW50aWF0ZUZpbHRlcldpdGhJZGVudGlmaWVyIChpZGVudGlmaWVyKSB7XG4gICAgY29uc3QgRmlsdGVyID0gdGhpcy5nZXRGaWx0ZXJCeUlkZW50aWZpZXIoaWRlbnRpZmllcilcbiAgICBpZiAoIUZpbHRlcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihgVW5rbm93biBmaWx0ZXIgd2l0aCBpZGVudGlmaWVyIFxcYCR7aWRlbnRpZmllcn1cXGAhYCkpXG4gICAgfVxuXG4gICAgaWYgKCEoRmlsdGVyLnByb3RvdHlwZSBpbnN0YW5jZW9mIFNESy5PcGVyYXRpb25zLkZpbHRlck9wZXJhdGlvbi5GaWx0ZXIpKSB7XG4gICAgICBjb25zdCB7IGx1dEltYWdlLCByZXNvbHV0aW9uLCBob3Jpem9udGFsVGlsZUNvdW50LCB2ZXJ0aWNhbFRpbGVDb3VudCB9ID0gRmlsdGVyXG4gICAgICBsZXQgcHJlbG9hZGVkSW1hZ2VcbiAgICAgIGlmICh0aGlzLl91aS5nZXRQcmVsb2FkZXIpIHtcbiAgICAgICAgcHJlbG9hZGVkSW1hZ2UgPSB0aGlzLl91aS5nZXRQcmVsb2FkZXIoKS5nZXRBc3NldChsdXRJbWFnZSlcbiAgICAgIH1cbiAgICAgIGxldCBsb2FkUHJvbWlzZVxuICAgICAgaWYgKHByZWxvYWRlZEltYWdlKSB7XG4gICAgICAgIGxvYWRQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHByZWxvYWRlZEltYWdlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZFByb21pc2UgPSBJbWFnZUxvYWRlci5sb2FkKHRoaXMuX3VpLmdldEFzc2V0UGF0aChsdXRJbWFnZSkpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsb2FkUHJvbWlzZVxuICAgICAgICAudGhlbihpbWFnZSA9PiB7XG4gICAgICAgICAgcmV0dXJuIEltYWdlTG9hZGVyLmxvYWQodGhpcy5fdWkuZ2V0QXNzZXRQYXRoKGx1dEltYWdlKSlcbiAgICAgICAgICAgIC50aGVuKGltYWdlID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTREsuT3BlcmF0aW9ucy5GaWx0ZXJPcGVyYXRpb24uRmlsdGVycy5UaHJlZURMVVRGaWx0ZXIoe1xuICAgICAgICAgICAgICAgIGltYWdlLCByZXNvbHV0aW9uLCBob3Jpem9udGFsVGlsZUNvdW50LCB2ZXJ0aWNhbFRpbGVDb3VudFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgRmlsdGVyKCkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjYXRlZ29yaWVzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdENhdGVnb3JpZXMgKCkge1xuICAgIC8vIFNob3VsZCB0aGUgY2F0ZWdvcmllcyBwYXNzZWQgaW4gYnkgdGhlIHVzZXIgcmVwbGFjZSB0aGUgZXhpc3Rpbmcgb25lcz9cbiAgICBpZiAodGhpcy5fb3B0aW9ucy5jYXRlZ29yaWVzKSB7XG4gICAgICBpZiAodGhpcy5fb3B0aW9ucy5yZXBsYWNlQ2F0ZWdvcmllcykge1xuICAgICAgICB0aGlzLl9jYXRlZ29yaWVzID0gdGhpcy5fb3B0aW9ucy5jYXRlZ29yaWVzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jYXRlZ29yaWVzID0gVXRpbHMubWVyZ2VDYXRlZ29yaWVzKFxuICAgICAgICAgIHRoaXMuX2NhdGVnb3JpZXMsXG4gICAgICAgICAgdGhpcy5fb3B0aW9ucy5jYXRlZ29yaWVzLFxuICAgICAgICAgICdmaWx0ZXJzJ1xuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGZpbHRlcnMgdGhhdCBzaG91bGQgbm90IGJlIHNlbGVjdGFibGVcbiAgICBpZiAodGhpcy5fb3B0aW9ucy5hdmFpbGFibGVGaWx0ZXJzKSB7XG4gICAgICBjb25zdCBuZXdDYXRlZ29yaWVzID0gW11cbiAgICAgIHRoaXMuX2NhdGVnb3JpZXMuZm9yRWFjaCgoY2F0ZWdvcnkpID0+IHtcbiAgICAgICAgY29uc3QgZmlsdGVycyA9IGNhdGVnb3J5LmZpbHRlcnMuZmlsdGVyKChmKSA9PlxuICAgICAgICAgIHRoaXMuX29wdGlvbnMuYXZhaWxhYmxlRmlsdGVycy5pbmRleE9mKGYuaWRlbnRpZmllcikgIT09IC0xXG4gICAgICAgIClcbiAgICAgICAgaWYgKGZpbHRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIG5ld0NhdGVnb3JpZXMucHVzaCh7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiBjYXRlZ29yeS5pZGVudGlmaWVyLFxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6IGNhdGVnb3J5LmRlZmF1bHROYW1lLFxuICAgICAgICAgICAgZmlsdGVyc1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICB0aGlzLl9jYXRlZ29yaWVzID0gbmV3Q2F0ZWdvcmllc1xuICAgIH1cblxuICAgIGNvbnN0IGFsbENhdGVnb3J5ID0ge1xuICAgICAgaWRlbnRpZmllcjogJ2FsbCcsXG4gICAgICBkZWZhdWx0TmFtZTogJ0FsbCcsXG4gICAgICBmaWx0ZXJzOiB0aGlzLl9jYXRlZ29yaWVzLmxlbmd0aCA8PSAwXG4gICAgICAgID8gW11cbiAgICAgICAgOiB0aGlzLl9jYXRlZ29yaWVzXG4gICAgICAgICAgLm1hcCgoYykgPT4gYy5maWx0ZXJzKVxuICAgICAgICAgIC5yZWR1Y2UoKGEsIGIpID0+IGEuY29uY2F0KGIpKVxuICAgIH1cbiAgICB0aGlzLl9jYXRlZ29yaWVzLnVuc2hpZnQoYWxsQ2F0ZWdvcnkpXG4gICAgdGhpcy5fY2F0ZWdvcmllc0J5SWQuYWxsID0gYWxsQ2F0ZWdvcnlcbiAgICB0aGlzLl9jYXRlZ29yaWVzLmZvckVhY2goKGMpID0+IHsgdGhpcy5fY2F0ZWdvcmllc0J5SWRbYy5pZGVudGlmaWVyXSA9IGMgfSlcbiAgICBhbGxDYXRlZ29yeS5maWx0ZXJzLmZvckVhY2goZmlsdGVyID0+IHtcbiAgICAgIHRoaXMuX2ZpbHRlcnNCeUlkZW50aWZpZXJbZmlsdGVyLmlkZW50aWZpZXJdID0gZmlsdGVyXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaWx0ZXJzIGZvciB0aGUgY2F0ZWdvcnkgd2l0aCB0aGUgZ2l2ZW4gbmFtZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGNhdGVnb3J5SWRlbnRpZmllclxuICAgKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAgICovXG4gIGdldEZpbHRlcnNGb3JDYXRlZ29yeSAoY2F0ZWdvcnlJZGVudGlmaWVyKSB7XG4gICAgaWYgKCF0aGlzLl9jYXRlZ29yaWVzQnlJZFtjYXRlZ29yeUlkZW50aWZpZXJdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gZmlsdGVyIGNhdGVnb3J5ICcke2NhdGVnb3J5SWRlbnRpZmllcn0nYClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NhdGVnb3JpZXNCeUlkW2NhdGVnb3J5SWRlbnRpZmllcl0uZmlsdGVyc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpbHRlciB3aXRoIHRoZSBnaXZlbiBpZGVudGlmaWVyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gaWRlbnRpZmllclxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5GaWx0ZXJ9XG4gICAqL1xuICBnZXRGaWx0ZXJCeUlkZW50aWZpZXIgKGlkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVyc0J5SWRlbnRpZmllcltpZGVudGlmaWVyXVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhdGVnb3JpZXNcbiAgICogQHJldHVybiB7T2JqZWN0W119XG4gICAqL1xuICBnZXRDYXRlZ29yaWVzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2F0ZWdvcmllc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhdGVnb3J5IHdpdGggdGhlIGdpdmVuIGlkZW50aWZpZXJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBpZGVudGlmaWVyXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGdldENhdGVnb3J5QnlJZGVudGlmaWVyIChpZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhdGVnb3JpZXNCeUlkW2lkZW50aWZpZXJdXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL21hbmFnZXJzL2ZpbHRlci1tYW5hZ2VyLmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNiA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnZ2xvYmFscydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJ1c2hNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IgKHVpLCBvcHRpb25zKSB7XG4gICAgdGhpcy5fdWkgPSB1aVxuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zXG4gICAgdGhpcy5fYnJ1c2hlcyA9IFtdXG4gICAgdGhpcy5fYnJ1c2hlc0J5SWQgPSB7fVxuXG4gICAgdGhpcy5fYWRkQnJ1c2hlcyhDb25zdGFudHMuREVGQVVMVFMuQlJVU0hFUylcblxuICAgIGNvbnN0IHsgYnJ1c2hlcywgcmVwbGFjZUJydXNoZXMsIGF2YWlsYWJsZUJydXNoZXMgfSA9IHRoaXMuX29wdGlvbnNcbiAgICBpZiAodGhpcy5fb3B0aW9ucy5icnVzaGVzKSB7XG4gICAgICB0aGlzLl9hZGRCcnVzaGVzKGJydXNoZXMsIHJlcGxhY2VCcnVzaGVzKVxuICAgIH1cblxuICAgIGlmIChhdmFpbGFibGVCcnVzaGVzKSB7XG4gICAgICB0aGlzLl9icnVzaGVzID0gdGhpcy5fYnJ1c2hlcy5maWx0ZXIoYnJ1c2ggPT4gYXZhaWxhYmxlQnJ1c2hlcy5pbmRleE9mKGJydXNoLmlkZW50aWZpZXIpICE9PSAtMSlcbiAgICB9XG4gIH1cblxuICBfYWRkQnJ1c2hlcyAoYnJ1c2hlcywgcmVwbGFjZUJydXNoZXMpIHtcbiAgICBpZiAocmVwbGFjZUJydXNoZXMpIHtcbiAgICAgIHRoaXMuX2JydXNoZXMgPSBbXVxuICAgICAgdGhpcy5fYnJ1c2hlc0J5SWQgPSB7fVxuICAgIH1cblxuICAgIGJydXNoZXMuZm9yRWFjaChicnVzaCA9PiB7XG4gICAgICB0aGlzLl9icnVzaGVzLnB1c2goYnJ1c2gpXG4gICAgICB0aGlzLl9icnVzaGVzQnlJZFticnVzaC5pZGVudGlmaWVyXSA9IGJydXNoXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBicnVzaCB3aXRoIHRoZSBnaXZlbiBpZGVudGlmaWVyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gaWRlbnRpZmllclxuICAgKi9cbiAgZ2V0QnJ1c2hCeUlkZW50aWZpZXIgKGlkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fYnJ1c2hlc0J5SWRbaWRlbnRpZmllcl1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBicnVzaGVzXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLkJydXNoU3ByaXRlLkJydXNoW119XG4gICAqL1xuICBnZXRCcnVzaGVzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fYnJ1c2hlc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IGF2YWlsYWJsZSBicnVzaFxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5CcnVzaFNwcml0ZS5CcnVzaH1cbiAgICovXG4gIGdldEZpcnN0QnJ1c2ggKCkge1xuICAgIHJldHVybiB0aGlzLl9icnVzaGVzWzBdXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL21hbmFnZXJzL2JydXNoLW1hbmFnZXIuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IE9wdGlvblR5cGUsIENvbmZpZ3VyYWJsZSB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuXG5jb25zdCBGT05UX1dFSUdIVFMgPSB7XG4gIDEwMDogJ0V4dHJhIExpZ2h0JyxcbiAgMjAwOiAnTGlnaHQnLFxuICAzMDA6ICdCb29rJyxcbiAgNDAwOiAnUmVndWxhcicsXG4gIDUwMDogJ01lZGl1bScsXG4gIDYwMDogJ1NlbWlib2xkJyxcbiAgNzAwOiAnQm9sZCcsXG4gIDgwMDogJ0JsYWNrJyxcbiAgOTAwOiAnRXh0cmEgQmxhY2snLFxuICBib2xkOiAnQm9sZCcsXG4gIG5vcm1hbDogJ1JlZ3VsYXInXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvbnRWYXJpYXRpb24gZXh0ZW5kcyBDb25maWd1cmFibGUge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGFiZWwgZm9yIHRoaXMgdmFyaWF0aW9uXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIGdldExhYmVsICgpIHtcbiAgICBsZXQgbGFiZWwgPSBGT05UX1dFSUdIVFNbdGhpcy5fb3B0aW9ucy5mb250V2VpZ2h0XVxuXG4gICAgc3dpdGNoICh0aGlzLl9vcHRpb25zLmZvbnRTdHlsZSkge1xuICAgICAgY2FzZSAnaXRhbGljJzpcbiAgICAgICAgbGFiZWwgKz0gJyBJdGFsaWMnXG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgcmV0dXJuIGxhYmVsXG4gIH1cbn1cblxuLyoqXG4gKiBTcGVjaWZpZXMgdGhlIGF2YWlsYWJsZSBvcHRpb25zIGZvciB0aGUgRm9udFZhcmlhdGlvbiBjbGFzc1xuICogQHR5cGUge09iamVjdH1cbiAqIEBpZ25vcmVcbiAqL1xuRm9udFZhcmlhdGlvbi5wcm90b3R5cGUuYXZhaWxhYmxlT3B0aW9ucyA9IHtcbiAgaWRlbnRpZmllcjogeyB0eXBlOiBPcHRpb25UeXBlLlNUUklORywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgZm9udEZhbWlseTogeyB0eXBlOiBPcHRpb25UeXBlLlNUUklORywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgZm9udFdlaWdodDogeyB0eXBlOiBPcHRpb25UeXBlLkFMTCwgZGVmYXVsdDogNDAwIH0sXG4gIGZvbnRTdHlsZTogeyB0eXBlOiBPcHRpb25UeXBlLlNUUklORywgZGVmYXVsdDogJ25vcm1hbCcgfSxcbiAgdGV4dE1ldHJpY3M6IHsgdHlwZTogT3B0aW9uVHlwZS5PQkpFQ1QsIGRlZmF1bHQ6IG51bGwgfSxcbiAgcHJvdmlkZXI6IHsgdHlwZTogT3B0aW9uVHlwZS5TVFJJTkcsIGF2YWlsYWJsZTogWydnb29nbGUnLCAnZmlsZSddIH0sXG4gIGZpbGVQYXRoOiB7IHR5cGU6IE9wdGlvblR5cGUuU1RSSU5HIH0sXG4gIGRlZmF1bHQ6IHsgdHlwZTogT3B0aW9uVHlwZS5CT09MRUFOLCBkZWZhdWx0OiBmYWxzZSB9LFxuICBmb250OiB7IHR5cGU6IE9wdGlvblR5cGUuT0JKRUNUIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL2Fzc2V0cy9mb250LXZhcmlhdGlvbi5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IEZvbnRPYnNlcnZlciBmcm9tICcuLi9mb250LW9ic2VydmVyJ1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZUZvbnRMb2FkZXIge1xuICBjb25zdHJ1Y3RvciAodWkpIHtcbiAgICB0aGlzLl91aSA9IHVpXG4gICAgdGhpcy5fZm9udHMgPSBbXVxuICAgIHRoaXMuX29ic2VydmVycyA9IFtdXG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgZ2l2ZW4gZm9udCB0byB0aGUgbGlzdCBvZiBmb250cyB0byBsb2FkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YXJpYXRpb25cbiAgICovXG4gIGFkZCAodmFyaWF0aW9uKSB7XG4gICAgdGhpcy5fZm9udHMucHVzaCh2YXJpYXRpb24pXG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgdGhlIGZvbnRzXG4gICAqL1xuICBsb2FkICgpIHtcbiAgICBpZiAodGhpcy5fZm9udHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICB9XG5cbiAgICB0aGlzLl9vYnNlcnZlcnMgPSBbXVxuICAgIHRoaXMuX2ZvbnRzLmZvckVhY2godmFyaWF0aW9uID0+IHtcbiAgICAgIHRoaXMuX29ic2VydmVycy5wdXNoKG5ldyBGb250T2JzZXJ2ZXIodmFyaWF0aW9uKSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIFV0aWxzLmV4ZWN1dGVQcm9taXNlcyhcbiAgICAgIHRoaXMuX29ic2VydmVycy5tYXAob2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIub2JzZXJ2ZSgpKVxuICAgIClcblxuICAgIC8vIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAvLyAgIHRoaXMuX29ic2VydmVycy5tYXAob2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIub2JzZXJ2ZSgpKVxuICAgIC8vIClcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwb3NlcyB0aGUgb2JzZXJ2ZXJzXG4gICAqL1xuICBkaXNwb3NlICgpIHtcbiAgICB0aGlzLl9vYnNlcnZlcnMuZm9yRWFjaChvYnNlcnZlciA9PiBvYnNlcnZlci5kaXNwb3NlKCkpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvbGliL2ZvbnQtbG9hZGVyL2xvYWRlcnMvYmFzZS1mb250LWxvYWRlci5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IFByZXZpb3VzU2VyaWFsaXplciBmcm9tICcuLi8xLjAuMC9zZXJpYWxpemVyJ1xuXG5jb25zdCBUV0lDRV9QSSA9IE1hdGguUEkgKiAyXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHYxMDFTZXJpYWxpemVyIGV4dGVuZHMgUHJldmlvdXNTZXJpYWxpemVyIHtcbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIHRyYW5zZm9ybSBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9uLlRyYW5zZm9ybU9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVUcmFuc2Zvcm1PcGVyYXRpb24gKG9wZXJhdGlvbikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBvcGVyYXRpb24uc2VyaWFsaXplT3B0aW9ucyhbJ3N0YXJ0JywgJ2VuZCcsICdyb3RhdGlvbicsICd0ZXh0dXJlU2NhbGUnXSwgdHJ1ZSlcbiAgICBvcHRpb25zLnJvdGF0aW9uID0gKG9wdGlvbnMucm90YXRpb24gKyBUV0lDRV9QSSkgJSBUV0lDRV9QSVxuICAgIGlmIChvcHRpb25zLnRleHR1cmVTY2FsZSAhPT0gMSkge1xuICAgICAgb3B0aW9ucy5kaW1lbnNpb25zID0gb3BlcmF0aW9uLmdldE5ld0RpbWVuc2lvbnMob3BlcmF0aW9uLmdldElucHV0RGltZW5zaW9ucyhmYWxzZSkpXG4gICAgfVxuXG4gICAgZGVsZXRlIG9wdGlvbnMudGV4dHVyZVNjYWxlXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdjcm9wJyxcbiAgICAgIG9wdGlvbnNcbiAgICB9XG4gIH1cbn1cblxudjEwMVNlcmlhbGl6ZXIudmVyc2lvbiA9ICcxLjAuMSdcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL3NlcmlhbGl6YXRpb24vMS4wLjEvc2VyaWFsaXplci5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgUHJldmlvdXNEZXNlcmlhbGl6ZXIgZnJvbSAnLi4vMS4wLjAvZGVzZXJpYWxpemVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB2MTAxRGVzZXJpYWxpemVyIGV4dGVuZHMgUHJldmlvdXNEZXNlcmlhbGl6ZXIge1xuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXNlcmlhbGl6ZU9wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgaWYgKG9wZXJhdGlvbi50eXBlID09PSAnc2VsZWN0aXZlLWJsdXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVzZXJpYWxpemVTZWxlY3RpdmVCbHVyT3BlcmF0aW9uKG9wZXJhdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLl9kZXNlcmlhbGl6ZU9wZXJhdGlvbihvcGVyYXRpb24pXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBjcm9wIG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplQ3JvcE9wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgLy8gTmV3IGluIDEuMC4xOiBgZGltZW5zaW9uc2Agb3B0aW9uXG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSBvcGVyYXRpb25cbiAgICBsZXQgeyByb3RhdGlvbiB9ID0gb3B0aW9uc1xuICAgIGNvbnN0IHN0YXJ0ID0gVmVjdG9yMi5mcm9tT2JqZWN0KG9wdGlvbnMuc3RhcnQpXG4gICAgY29uc3QgZW5kID0gVmVjdG9yMi5mcm9tT2JqZWN0KG9wdGlvbnMuZW5kKVxuICAgIGNvbnN0IGRpbWVuc2lvbnMgPSBvcHRpb25zLmRpbWVuc2lvbnMgPyBWZWN0b3IyLmZyb21PYmplY3Qob3B0aW9ucy5kaW1lbnNpb25zKSA6IG51bGxcblxuICAgIC8vIE5vcm1hbGl6ZSByb3RhdGlvblxuICAgIGlmIChyb3RhdGlvbiA+IE1hdGguUEkpIHtcbiAgICAgIHJvdGF0aW9uIC09IE1hdGguUEkgKiAyXG4gICAgfVxuXG4gICAgY29uc3QgY3JvcE9wdGlvbnMgPSB7XG4gICAgICBzdGFydCwgZW5kXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByb3RhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIGNyb3BPcHRpb25zLnJvdGF0aW9uID0gcm90YXRpb25cblxuICAgIGNvbnN0IHRyYW5zZm9ybU9wZXJhdGlvbiA9IHRoaXMuX2VkaXRvci5vcGVyYXRpb25zLmdldE9yQ3JlYXRlKCd0cmFuc2Zvcm0nKVxuICAgIGlmICghdHJhbnNmb3JtT3BlcmF0aW9uKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblxuICAgIHRoaXMuX2VkaXRvci5icm9hZGNhc3RUcmFuc2Zvcm0odHJhbnNmb3JtT3BlcmF0aW9uLCBjcm9wT3B0aW9ucylcbiAgICB0cmFuc2Zvcm1PcGVyYXRpb24uc2V0KGNyb3BPcHRpb25zKVxuXG4gICAgaWYgKGRpbWVuc2lvbnMpIHtcbiAgICAgIGNvbnN0IHNpemUgPSBlbmQuY2xvbmUoKS5zdWJ0cmFjdChzdGFydClcbiAgICAgIGNvbnN0IHRyYW5zZm9ybURpbWVuc2lvbnMgPSB0cmFuc2Zvcm1PcGVyYXRpb24uZ2V0SW5wdXREaW1lbnNpb25zKGZhbHNlKS5tdWx0aXBseShzaXplKVxuICAgICAgdHJhbnNmb3JtT3BlcmF0aW9uLnNldFRleHR1cmVTY2FsZShkaW1lbnNpb25zLnggLyB0cmFuc2Zvcm1EaW1lbnNpb25zLngpXG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cmFuc2Zvcm1PcGVyYXRpb24pXG4gIH1cbn1cblxudjEwMURlc2VyaWFsaXplci52ZXJzaW9uID0gJzEuMC4xJ1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8xLjAuMS9kZXNlcmlhbGl6ZXIuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFNESyB9IGZyb20gJ2dsb2JhbHMnXG5jb25zdCB7IE92ZXJsYXlGaWx0ZXIgfSA9IFNESy5FbmdpbmUuRmlsdGVyc1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFtPdmVybGF5RmlsdGVyLkJMRU5EX01PREVTLk5PUk1BTF06ICdub3JtYWwnLFxuICBbT3ZlcmxheUZpbHRlci5CTEVORF9NT0RFUy5PVkVSTEFZXTogJ292ZXJsYXknLFxuICBbT3ZlcmxheUZpbHRlci5CTEVORF9NT0RFUy5IQVJEX0xJR0hUXTogJ2hhcmQgbGlnaHQnLFxuICBbT3ZlcmxheUZpbHRlci5CTEVORF9NT0RFUy5TT0ZUX0xJR0hUXTogJ3NvZnQgbGlnaHQnLFxuICBbT3ZlcmxheUZpbHRlci5CTEVORF9NT0RFUy5NVUxUSVBMWV06ICdtdWx0aXBseScsXG4gIFtPdmVybGF5RmlsdGVyLkJMRU5EX01PREVTLkRBUktFTl06ICdkYXJrZW4nLFxuICBbT3ZlcmxheUZpbHRlci5CTEVORF9NT0RFUy5MSUdIVEVOXTogJ2xpZ2h0ZW4nLFxuICBbT3ZlcmxheUZpbHRlci5CTEVORF9NT0RFUy5TQ1JFRU5dOiAnc2NyZWVuJyxcbiAgW092ZXJsYXlGaWx0ZXIuQkxFTkRfTU9ERVMuQ09MT1JfQlVSTl06ICdjb2xvciBidXJuJ1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8yLjAuMC9ibGVuZC1tb2Rlcy5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFV0aWxzLCBTaGFyZWRDb25zdGFudHMgfSBmcm9tICdnbG9iYWxzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGcmFtZU1hbmFnZXIge1xuICBjb25zdHJ1Y3RvciAodWksIG9wdGlvbnMpIHtcbiAgICB0aGlzLl91aSA9IHVpXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnNcblxuICAgIHRoaXMuX2NhdGVnb3JpZXNCeUlkID0ge31cbiAgICB0aGlzLl9jYXRlZ29yaWVzID0gW11cbiAgICB0aGlzLl9mcmFtZXNCeUlkID0ge31cblxuICAgIHRoaXMuX2FkZENhdGVnb3JpZXMoU2hhcmVkQ29uc3RhbnRzLkRFRkFVTFRTLkZSQU1FX0NBVEVHT1JJRVMpXG5cbiAgICBjb25zdCB7IGNhdGVnb3JpZXMsIHJlcGxhY2VDYXRlZ29yaWVzIH0gPSB0aGlzLl9vcHRpb25zXG4gICAgaWYgKHRoaXMuX29wdGlvbnMuY2F0ZWdvcmllcykge1xuICAgICAgdGhpcy5fYWRkQ2F0ZWdvcmllcyhjYXRlZ29yaWVzLCByZXBsYWNlQ2F0ZWdvcmllcylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdXBkYXRlQWxsQ2F0ZWdvcnkoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgY2F0ZWdvcmllc1xuICAgKiBAcGFyYW0ge09iamVjdFtdfSBjYXRlZ29yaWVzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVwbGFjZSA9IGZhbHNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQ2F0ZWdvcmllcyAoY2F0ZWdvcmllcywgcmVwbGFjZSA9IGZhbHNlKSB7XG4gICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgIHRoaXMuX2NhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLnNsaWNlKDApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NhdGVnb3JpZXMgPSBVdGlscy5tZXJnZUNhdGVnb3JpZXMoXG4gICAgICAgIHRoaXMuX2NhdGVnb3JpZXMsXG4gICAgICAgIGNhdGVnb3JpZXMsXG4gICAgICAgICdmcmFtZXMnXG4gICAgICApXG4gICAgfVxuXG4gICAgLy8gQnVpbGQgY2F0IGlkID0+IGNhdGVnb3J5IGhhc2hcbiAgICB0aGlzLl9jYXRlZ29yaWVzQnlJZCA9IHt9XG4gICAgdGhpcy5fY2F0ZWdvcmllcy5mb3JFYWNoKChjKSA9PiB7IHRoaXMuX2NhdGVnb3JpZXNCeUlkW2MuaWRlbnRpZmllcl0gPSBjIH0pXG5cbiAgICAvLyBGaWx0ZXIgZnJhbWVzXG4gICAgY29uc3QgeyBhdmFpbGFibGVGcmFtZXMgfSA9IHRoaXMuX29wdGlvbnNcbiAgICBpZiAoYXZhaWxhYmxlRnJhbWVzKSB7XG4gICAgICB0aGlzLl9jYXRlZ29yaWVzLmZvckVhY2goYyA9PiB7XG4gICAgICAgIGMuZnJhbWVzID0gYy5mcmFtZXMuZmlsdGVyKGYgPT4gYXZhaWxhYmxlRnJhbWVzLmluZGV4T2YoZi5pZGVudGlmaWVyKSAhPT0gLTEpXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIEJ1aWxkIGZyYW1lIGlkID0+IGZyYW1lIGhhc2hcbiAgICB0aGlzLl9jYXRlZ29yaWVzLmZvckVhY2goYyA9PiB7XG4gICAgICBjLmZyYW1lcy5mb3JFYWNoKHMgPT4ge1xuICAgICAgICB0aGlzLl9mcmFtZXNCeUlkW3MuaWRlbnRpZmllcl0gPSBzXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLl91cGRhdGVBbGxDYXRlZ29yeSgpXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgYGFsbGAgY2F0ZWdvcnkgd2hpY2ggY29udGFpbnMgYWxsIGZyYW1lc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZUFsbENhdGVnb3J5ICgpIHtcbiAgICB0aGlzLl9hbGxDYXRlZ29yeSA9IHtcbiAgICAgIGlkZW50aWZpZXI6ICdhbGwnLFxuICAgICAgZGVmYXVsdE5hbWU6ICdBbGwnLFxuICAgICAgZnJhbWVzOiB0aGlzLl9jYXRlZ29yaWVzXG4gICAgICAgIC5tYXAoKGMpID0+IGMuZnJhbWVzKVxuICAgICAgICAucmVkdWNlKChhLCBiKSA9PiBhLmNvbmNhdChiKSwgW10pXG4gICAgfVxuICAgIHRoaXMuX2NhdGVnb3JpZXNCeUlkLmFsbCA9IHRoaXMuX2FsbENhdGVnb3J5XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZnJhbWVzIGZvciB0aGUgY2F0ZWdvcnkgd2l0aCB0aGUgZ2l2ZW4gbmFtZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGNhdGVnb3J5TmFtZVxuICAgKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAgICovXG4gIGdldEZyYW1lc0ZvckNhdGVnb3J5IChjYXRlZ29yeU5hbWUpIHtcbiAgICBpZiAoIXRoaXMuX2NhdGVnb3JpZXNCeUlkW2NhdGVnb3J5TmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBmcmFtZSBjYXRlZ29yeSAnJHtjYXRlZ29yeU5hbWV9J2ApXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jYXRlZ29yaWVzQnlJZFtjYXRlZ29yeU5hbWVdLmZyYW1lc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZyYW1lIHdpdGggdGhlIGdpdmVuIGlkZW50aWZpZXJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBpZGVudGlmaWVyXG4gICAqL1xuICBnZXRGcmFtZUJ5SWRlbnRpZmllciAoaWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9mcmFtZXNCeUlkW2lkZW50aWZpZXJdXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2F0ZWdvcmllc1xuICAgKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAgICovXG4gIGdldENhdGVnb3JpZXMgKCkge1xuICAgIHJldHVybiB0aGlzLl9jYXRlZ29yaWVzXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2F0ZWdvcnkgb2JqZWN0IGZvciB0aGUgZ2l2ZW4gaWRcbiAgICogQHBhcmFtICB7U3RyaW5nfSBpZFxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBnZXRDYXRlZ29yeSAoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fY2F0ZWdvcmllc0J5SWRbaWRdXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL21hbmFnZXJzL2ZyYW1lLW1hbmFnZXIuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFNoYXJlZENvbnN0YW50cyB9IGZyb20gJ2dsb2JhbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE92ZXJsYXlNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IgKHVpLCBvcHRpb25zKSB7XG4gICAgdGhpcy5fdWkgPSB1aVxuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zXG4gICAgdGhpcy5fb3ZlcmxheXMgPSBTaGFyZWRDb25zdGFudHMuREVGQVVMVFMuT1ZFUkxBWVMuc2xpY2UoMClcbiAgICB0aGlzLl9vdmVybGF5c0J5SWRlbnRpZmllciA9IHt9XG5cbiAgICBpZiAob3B0aW9ucy5vdmVybGF5cykge1xuICAgICAgaWYgKG9wdGlvbnMucmVwbGFjZU92ZXJsYXlzKSB7XG4gICAgICAgIHRoaXMuX292ZXJsYXlzID0gb3B0aW9ucy5vdmVybGF5c1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fb3ZlcmxheXMgPSB0aGlzLl9vdmVybGF5cy5jb25jYXQob3B0aW9ucy5vdmVybGF5cylcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaWx0ZXIgYXZhaWxhYmxlXG4gICAgaWYgKG9wdGlvbnMuYXZhaWxhYmxlT3ZlcmxheXMpIHtcbiAgICAgIHRoaXMuX292ZXJsYXlzID0gdGhpcy5fb3ZlcmxheXMuZmlsdGVyKG8gPT5cbiAgICAgICAgb3B0aW9ucy5hdmFpbGFibGVPdmVybGF5cy5pbmRleE9mKG8uaWRlbnRpZmllcikgIT09IC0xXG4gICAgICApXG4gICAgfVxuXG4gICAgdGhpcy5fb3ZlcmxheXMuZm9yRWFjaChvdmVybGF5ID0+IHtcbiAgICAgIHRoaXMuX292ZXJsYXlzQnlJZGVudGlmaWVyW292ZXJsYXkuaWRlbnRpZmllcl0gPSBvdmVybGF5XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvdmVybGF5c1xuICAgKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAgICovXG4gIGdldE92ZXJsYXlzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fb3ZlcmxheXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvdmVybGF5IHdpdGggdGhlIGdpdmVuIGlkZW50aWZpZXJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBpZGVudGlmaWVyXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGdldE92ZXJsYXlCeUlkZW50aWZpZXIgKGlkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fb3ZlcmxheXNCeUlkZW50aWZpZXJbaWRlbnRpZmllcl1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvbWFuYWdlcnMvb3ZlcmxheS1tYW5hZ2VyLmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNiA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgU0RLIH0gZnJvbSAnLi4vZ2xvYmFscydcbmNvbnN0IHsgT3B0aW9uVHlwZSB9ID0gU0RLXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZyYW1lIGV4dGVuZHMgU0RLLkNvbmZpZ3VyYWJsZSB7XG4gIGNvbnN0cnVjdG9yICh1aSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIob3B0aW9ucylcblxuICAgIHRoaXMuX2xvYWRlZCA9IGZhbHNlXG4gICAgdGhpcy5fbG9hZGluZyA9IGZhbHNlXG4gICAgdGhpcy5fdWkgPSB1aVxuICAgIHRoaXMuX2ZyYW1lID0gU0RLLlV0aWxzLmRlZXBDbG9uZSh0aGlzLl9vcHRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBpbWFnZXMgb2YgdGhpcyBmcmFtZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgbG9hZCAoKSB7XG4gICAgaWYgKHRoaXMuX2xvYWRlZCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgaWYgKHRoaXMuX2xvYWRpbmcpIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ0NhbGxlZCBGcmFtZSNsb2FkIHdoaWxlIGl0XFwncyBhbHJlYWR5IGxvYWRpbmcnKSlcblxuICAgIHRoaXMuX2xvYWRpbmcgPSB0cnVlXG4gICAgY29uc3QgeyBpbWFnZUdyb3VwcyB9ID0gdGhpcy5fZnJhbWVcblxuICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgWyd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nXS5mb3JFYWNoKChncm91cE5hbWUpID0+IHtcbiAgICAgIGlmICghKGdyb3VwTmFtZSBpbiBpbWFnZUdyb3VwcykpIHJldHVyblxuXG4gICAgICBjb25zdCBncm91cCA9IGltYWdlR3JvdXBzW2dyb3VwTmFtZV07XG4gICAgICBbJ3N0YXJ0JywgJ21pZCcsICdlbmQnXS5mb3JFYWNoKChwYXJ0TmFtZSkgPT4ge1xuICAgICAgICBpZiAoIShwYXJ0TmFtZSBpbiBncm91cCkpIHJldHVyblxuXG4gICAgICAgIHByb21pc2VzLnB1c2godGhpcy5fbG9hZFBhcnQoZ3JvdXBOYW1lLCBwYXJ0TmFtZSkpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuX2xvYWRlZCA9IHRydWVcbiAgICAgICAgdGhpcy5fbG9hZGluZyA9IGZhbHNlXG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHRoaXMuX2xvYWRlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuX2xvYWRpbmcgPSBmYWxzZVxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgZ2l2ZW4gcGFydCBvZiB0aGUgZ2l2ZW4gZ3JvdXBcbiAgICogQHBhcmFtICB7U3RyaW5nfSBncm91cE5hbWVcbiAgICogQHBhcmFtICB7U3RyaW5nfSBwYXJ0TmFtZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2xvYWRQYXJ0IChncm91cE5hbWUsIHBhcnROYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHsgaW1hZ2VHcm91cHMgfSA9IHRoaXMuX2ZyYW1lXG5cbiAgICAgIGxldCBwYXJ0ID0gaW1hZ2VHcm91cHNbZ3JvdXBOYW1lXVtwYXJ0TmFtZV1cbiAgICAgIGxldCBpbWFnZVVybCA9IHBhcnRcbiAgICAgIC8vIGBwYXJ0YCBjYW4gYWxzbyBiZSBhbiBvYmplY3QgY29udGFpbmluZyBgbW9kZWAgYW5kIGBpbWFnZWBcbiAgICAgIGlmICh0eXBlb2YgcGFydCAhPT0gJ3N0cmluZycgJiYgJ2ltYWdlJyBpbiBwYXJ0KSB7XG4gICAgICAgIGltYWdlVXJsID0gcGFydC5pbWFnZVxuICAgICAgfVxuXG4gICAgICBsZXQgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKClcblxuICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJ0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXMuX2ZyYW1lLmltYWdlR3JvdXBzW2dyb3VwTmFtZV1bcGFydE5hbWVdLmltYWdlID0gaW1hZ2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9mcmFtZS5pbWFnZUdyb3Vwc1tncm91cE5hbWVdW3BhcnROYW1lXSA9IGltYWdlXG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKGltYWdlKVxuICAgICAgfSlcblxuICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIGltYWdlIGF0ICR7aW1hZ2VVcmx9YCkpXG4gICAgICB9KVxuXG4gICAgICBpbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuX3VpLmdldEVkaXRvcigpLmdldENyb3NzT3JpZ2luKClcbiAgICAgIGltYWdlLnNyYyA9IHRoaXMuX3VpLmdldEFzc2V0UGF0aChpbWFnZVVybClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZyYW1lXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGdldEZyYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZnJhbWVcbiAgfVxufVxuXG4vKipcbiAqIFNwZWNpZmllcyB0aGUgYXZhaWxhYmxlIG9wdGlvbnMgZm9yIHRoZSBGcmFtZSBjbGFzc1xuICogQHR5cGUge09iamVjdH1cbiAqIEBpZ25vcmVcbiAqL1xuRnJhbWUucHJvdG90eXBlLmF2YWlsYWJsZU9wdGlvbnMgPSB7XG4gIGlkZW50aWZpZXI6IHsgdHlwZTogT3B0aW9uVHlwZS5TVFJJTkcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gIGRlZmF1bHROYW1lOiB7IHR5cGU6IE9wdGlvblR5cGUuU1RSSU5HIH0sXG4gIHRodW1ibmFpbDogeyB0eXBlOiBPcHRpb25UeXBlLlNUUklORyB9LFxuICB0aW50YWJsZTogeyB0eXBlOiBPcHRpb25UeXBlLkJPT0xFQU4sIGRlZmF1bHQ6IGZhbHNlIH0sXG4gIGxheW91dE1vZGU6IHtcbiAgICB0eXBlOiBPcHRpb25UeXBlLlNUUklORyxcbiAgICBkZWZhdWx0OiAnaG9yaXpvbnRhbC1pbnNpZGUnLFxuICAgIGF2YWlsYWJsZTogWydob3Jpem9udGFsLWluc2lkZScsICd2ZXJ0aWNhbC1pbnNpZGUnXVxuICB9LFxuICBpbWFnZUdyb3VwczogeyB0eXBlOiBPcHRpb25UeXBlLk9CSkVDVCwgcmVxdWlyZWQ6IHRydWUgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9saWIvZnJhbWUuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFNES1V0aWxzLCBDb2xvciB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgUHJldmlvdXNTZXJpYWxpemVyIGZyb20gJy4uLzIuMC4wL3NlcmlhbGl6ZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHYzMDBTZXJpYWxpemVyIGV4dGVuZHMgUHJldmlvdXNTZXJpYWxpemVyIHtcbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGVkaXRvciBzdGF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyA9IHt9XG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBzZXJpYWxpemUgKG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBzdXBlci5zZXJpYWxpemUob3B0aW9ucylcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICBkYXRhLm1ldGEgPSB7XG4gICAgICAgICAgcGxhdGZvcm06ICdodG1sNScsXG4gICAgICAgICAgdmVyc2lvbjogdGhpcy5fZWRpdG9yLmdldFNESygpLnZlcnNpb24sXG4gICAgICAgICAgY3JlYXRlZEF0OiBTREtVdGlscy5JU09EYXRlU3RyaW5nKG5ldyBEYXRlKCkpXG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5pbWFnZSA9IGRhdGEuaW5wdXRJbWFnZVxuICAgICAgICBkZWxldGUgZGF0YS5pbnB1dEltYWdlXG4gICAgICAgIHJldHVybiBkYXRhXG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIHN0aWNrZXJcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uU3RpY2tlclNwcml0ZX0gc3ByaXRlXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVTdGlja2VyIChvcGVyYXRpb24sIHNwcml0ZSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gc3VwZXIuX3NlcmlhbGl6ZVN0aWNrZXIob3BlcmF0aW9uLCBzcHJpdGUpXG4gICAgcmVzcG9uc2Uub3B0aW9ucy5hbHBoYSA9IHNwcml0ZS5nZXRBbHBoYSgpXG5cbiAgICBpZiAocmVzcG9uc2Uub3B0aW9ucy50aW50Q29sb3IpIHtcbiAgICAgIHJlc3BvbnNlLm9wdGlvbnMudGludENvbG9yID0ge1xuICAgICAgICByZ2JhOiByZXNwb25zZS5vcHRpb25zLnRpbnRDb2xvclxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIHRleHQgc3ByaXRlXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlRleHRTcHJpdGV9IHNwcml0ZVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VyaWFsaXplVGV4dCAob3BlcmF0aW9uLCBzcHJpdGUpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IHN1cGVyLl9zZXJpYWxpemVUZXh0KG9wZXJhdGlvbiwgc3ByaXRlKVxuICAgIHJlc3BvbnNlLm9wdGlvbnMuY29sb3IgPSB7XG4gICAgICByZ2JhOiByZXNwb25zZS5vcHRpb25zLmNvbG9yXG4gICAgfVxuICAgIHJlc3BvbnNlLm9wdGlvbnMuYmFja2dyb3VuZENvbG9yID0ge1xuICAgICAgcmdiYTogcmVzcG9uc2Uub3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3JcbiAgICB9XG4gICAgcmVzcG9uc2Uub3B0aW9ucy5mbGlwSG9yaXpvbnRhbGx5ID0gZmFsc2VcbiAgICByZXNwb25zZS5vcHRpb25zLmZsaXBWZXJ0aWNhbGx5ID0gZmFsc2VcbiAgICBkZWxldGUgcmVzcG9uc2Uub3B0aW9ucy5mb250V2VpZ2h0XG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gcGF0aFxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5CcnVzaFNwcml0ZS5QYXRofSBwYXRoXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVQYXRoIChwYXRoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBzdXBlci5fc2VyaWFsaXplUGF0aChwYXRoKVxuXG4gICAgZGVsZXRlIHJlc3BvbnNlLmhhcmRuZXNzXG4gICAgZGVsZXRlIHJlc3BvbnNlLnNpemVcbiAgICBkZWxldGUgcmVzcG9uc2UuY29sb3JcblxuICAgIGNvbnN0IGJydXNoID0gcGF0aC5nZXRCcnVzaCgpXG4gICAgcmVzcG9uc2UuYnJ1c2ggPSBicnVzaC5zZXJpYWxpemVPcHRpb25zKFtcbiAgICAgICdpZGVudGlmaWVyJywgJ3NpemUnLCAnY29sb3InXG4gICAgXSwgdHJ1ZSlcbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlLmJydXNoLmlkZW50aWZpZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkZWxldGUgcmVzcG9uc2UuYnJ1c2guaWRlbnRpZmllclxuICAgIH1cbiAgICByZXNwb25zZS5icnVzaC5jb2xvciA9IHtcbiAgICAgIHJnYmE6IHJlc3BvbnNlLmJydXNoLmNvbG9yXG4gICAgfVxuXG4gICAgY29uc3QgaGFyZG5lc3MgPSBicnVzaC5nZXRPcHRpb24oJ2hhcmRuZXNzJylcbiAgICBpZiAoaGFyZG5lc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXNwb25zZS5icnVzaC5oYXJkbmVzcyA9IGhhcmRuZXNzXG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGZyYW1lIG9wZXJhdGlvblxuICAgKiBAcGFyYW0ge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbi5GcmFtZU9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9uW119IG9wZXJhdGlvbnNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVGcmFtZU9wZXJhdGlvbiAob3BlcmF0aW9uLCBvcGVyYXRpb25zKSB7XG4gICAgc3VwZXIuX3NlcmlhbGl6ZUZyYW1lT3BlcmF0aW9uKG9wZXJhdGlvbiwgb3BlcmF0aW9ucylcblxuICAgIC8vIEZpbmQgc3ByaXRlIG9wZXJhdGlvbiBhbmQgZnJhbWUgc3ByaXRlIGZyb20gc2VyaWFsaXplZCBkYXRhXG4gICAgY29uc3Qgc3ByaXRlT3BlcmF0aW9ucyA9IG9wZXJhdGlvbnMuZmlsdGVyKG8gPT4gby50eXBlID09PSAnc3ByaXRlJylcbiAgICBsZXQgc3ByaXRlT3BlcmF0aW9uXG4gICAgaWYgKHNwcml0ZU9wZXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgICBzcHJpdGVPcGVyYXRpb24gPSBzcHJpdGVPcGVyYXRpb25zLnBvcCgpXG4gICAgICBjb25zdCBmcmFtZSA9IHNwcml0ZU9wZXJhdGlvbi5vcHRpb25zLnNwcml0ZXNcbiAgICAgICAgLmZpbHRlcihzID0+IHMudHlwZSA9PT0gJ2ZyYW1lJylbMF1cblxuICAgICAgY29uc3QgdGludENvbG9yID0gb3BlcmF0aW9uLmdldFRpbnRDb2xvcigpXG4gICAgICBpZiAoIXRpbnRDb2xvci5lcXVhbHMobmV3IENvbG9yKDEsIDEsIDEsIDApKSkge1xuICAgICAgICBmcmFtZS5vcHRpb25zLnRpbnRDb2xvciA9IHtcbiAgICAgICAgICByZ2JhOiBvcGVyYXRpb24uc2VyaWFsaXplT3B0aW9uKCd0aW50Q29sb3InLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBvcGVyYXRpb24uc2VyaWFsaXplT3B0aW9ucyhbXG4gICAgICAgICdzY2FsZScsICdhbHBoYSdcbiAgICAgIF0sIHRydWUpXG4gICAgICBmcmFtZS5vcHRpb25zID0gU0RLVXRpbHMuZXh0ZW5kKGZyYW1lLm9wdGlvbnMsIG9wdGlvbnMpXG4gICAgICBmcmFtZS5vcHRpb25zLnNpemUgPSBmcmFtZS5vcHRpb25zLnNjYWxlXG4gICAgICBkZWxldGUgZnJhbWUub3B0aW9ucy5zY2FsZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiB0cmFuc2Zvcm0gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbi5UcmFuc2Zvcm1PcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VyaWFsaXplVHJhbnNmb3JtT3BlcmF0aW9uIChvcGVyYXRpb24pIHtcbiAgICBjb25zdCByZXNwb25zZSA9IHN1cGVyLl9zZXJpYWxpemVUcmFuc2Zvcm1PcGVyYXRpb24ob3BlcmF0aW9uKVxuXG4gICAgaWYgKG9wZXJhdGlvbi5fcmF0aW8pIHtcbiAgICAgIHJlc3BvbnNlLm9wdGlvbnMubWV0YSA9IHtcbiAgICAgICAgaWRlbnRpZmllcjogb3BlcmF0aW9uLl9yYXRpby5pZGVudGlmaWVyXG4gICAgICB9XG4gICAgfVxuICAgIGRlbGV0ZSByZXNwb25zZS5vcHRpb25zLnNjYWxlXG5cbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBhZGp1c3RtZW50cyBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5BZGp1c3RtZW50c09wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVBZGp1c3RtZW50c09wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBzdXBlci5fc2VyaWFsaXplQWRqdXN0bWVudHNPcGVyYXRpb24ob3BlcmF0aW9uKVxuXG4gICAgY29uc3Qgb3B0aW9uTmFtZXMgPSBbXG4gICAgICAnZ2FtbWEnLCAnd2hpdGVzJywgJ2JsYWNrcycsICd0ZW1wZXJhdHVyZSdcbiAgICBdXG5cbiAgICBjb25zdCB7IGF2YWlsYWJsZU9wdGlvbnMgfSA9IG9wZXJhdGlvblxuICAgIGNvbnN0IG9wdGlvbnMgPSB7fVxuICAgIG9wdGlvbk5hbWVzLmZvckVhY2gob3B0aW9uTmFtZSA9PiB7XG4gICAgICBjb25zdCBvcHRpb24gPSBhdmFpbGFibGVPcHRpb25zW29wdGlvbk5hbWVdXG4gICAgICBjb25zdCB2YWx1ZSA9IG9wZXJhdGlvbi5nZXRPcHRpb24ob3B0aW9uTmFtZSlcbiAgICAgIGNvbnN0IHsgbWluVmFsdWUsIG1pZFZhbHVlLCBtYXhWYWx1ZSB9ID0gb3B0aW9uXG4gICAgICBvcHRpb25zW29wdGlvbk5hbWVdID0gdmFsdWUgPD0gbWlkVmFsdWVcbiAgICAgICAgPyAodmFsdWUgLSBtaW5WYWx1ZSkgLyAobWlkVmFsdWUgLSBtaW5WYWx1ZSkgLSAxXG4gICAgICAgIDogKHZhbHVlIC0gbWlkVmFsdWUpIC8gKG1heFZhbHVlIC0gbWlkVmFsdWUpXG4gICAgfSlcblxuICAgIHJlc3BvbnNlLm9wdGlvbnMgPSB7XG4gICAgICAuLi5yZXNwb25zZS5vcHRpb25zLFxuICAgICAgLi4ub3B0aW9uc1xuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25bXX0gb3BlcmF0aW9uc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2VyaWFsaXplT3BlcmF0aW9uIChvcGVyYXRpb24sIG9wZXJhdGlvbnMpIHtcbiAgICBzd2l0Y2ggKG9wZXJhdGlvbi5jb25zdHJ1Y3Rvci5pZGVudGlmaWVyKSB7XG4gICAgICBjYXNlICdtaXJyb3JlZC1mb2N1cyc6XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXJpYWxpemVNaXJyb3JlZEZvY3VzT3BlcmF0aW9uKG9wZXJhdGlvbilcbiAgICAgIGNhc2UgJ2xpbmVhci1mb2N1cyc6XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXJpYWxpemVMaW5lYXJGb2N1c09wZXJhdGlvbihvcGVyYXRpb24pXG4gICAgICBjYXNlICdibHVyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlcmlhbGl6ZUJsdXJPcGVyYXRpb24ob3BlcmF0aW9uKVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9zZXJpYWxpemVPcGVyYXRpb24ob3BlcmF0aW9uLCBvcGVyYXRpb25zKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtaXJyb3JlZCBmb2N1cyBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5NaXJyb3JlZEZvY3VzT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NlcmlhbGl6ZU1pcnJvcmVkRm9jdXNPcGVyYXRpb24gKG9wZXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZm9jdXMnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICB0eXBlOiAnbWlycm9yZWQnLFxuICAgICAgICBvcHRpb25zOiBvcGVyYXRpb24uc2VyaWFsaXplT3B0aW9ucyhbJ3N0YXJ0JywgJ2VuZCcsICdibHVyUmFkaXVzJywgJ3NpemUnLCAnZ3JhZGllbnRTaXplJ10sIHRydWUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIGxpbmVhciBmb2N1cyBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5MaW5lYXJGb2N1c09wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVMaW5lYXJGb2N1c09wZXJhdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wZXJhdGlvbi5zZXJpYWxpemVPcHRpb25zKFsnY29udHJvbFBvaW50MScsICdjb250cm9sUG9pbnQyJywgJ2JsdXJSYWRpdXMnXSwgdHJ1ZSlcbiAgICBvcHRpb25zLnN0YXJ0ID0gb3B0aW9ucy5jb250cm9sUG9pbnQxXG4gICAgZGVsZXRlIG9wdGlvbnMuY29udHJvbFBvaW50MVxuICAgIG9wdGlvbnMuZW5kID0gb3B0aW9ucy5jb250cm9sUG9pbnQyXG4gICAgZGVsZXRlIG9wdGlvbnMuY29udHJvbFBvaW50MlxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdmb2N1cycsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHR5cGU6ICdsaW5lYXInLFxuICAgICAgICBvcHRpb25zXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIGJsdXIgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuQmx1ck9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXJpYWxpemVCbHVyT3BlcmF0aW9uIChvcGVyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2ZvY3VzJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgdHlwZTogJ2dhdXNzaWFuJyxcbiAgICAgICAgb3B0aW9uczogb3BlcmF0aW9uLnNlcmlhbGl6ZU9wdGlvbnMoWydibHVyUmFkaXVzJ10sIHRydWUpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnYzMDBTZXJpYWxpemVyLnZlcnNpb24gPSAnMy4wLjAnXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzMuMC4wL3NlcmlhbGl6ZXIuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFZlY3RvcjIsIENvbG9yLCBTREssIExvZywgU0RLVXRpbHMsIENvbnN0YW50cyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgUHJldmlvdXNEZXNlcmlhbGl6ZXIgZnJvbSAnLi4vMi4wLjAvZGVzZXJpYWxpemVyJ1xuaW1wb3J0IFN0aWNrZXJNYW5hZ2VyIGZyb20gJ3NoYXJlZC9tYW5hZ2Vycy9zdGlja2VyLW1hbmFnZXInXG5pbXBvcnQgVGV4dERlc2lnbk1hbmFnZXIgZnJvbSAnc2hhcmVkL21hbmFnZXJzL3RleHQtZGVzaWduLW1hbmFnZXInXG5pbXBvcnQgSW1hZ2VMb2FkZXIgZnJvbSAnc2hhcmVkL2xvYWRlcnMvaW1hZ2UtbG9hZGVyJ1xuaW1wb3J0IEZvbnRNYW5hZ2VyIGZyb20gJ3NoYXJlZC9tYW5hZ2Vycy9mb250LW1hbmFnZXInXG5cbmxldCBCcnVzaFxuaWYgKHR5cGVvZiBTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gIEJydXNoID0gU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLkJydXNoU3ByaXRlLkJydXNoXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHYzMDBEZXNlcmlhbGl6ZXIgZXh0ZW5kcyBQcmV2aW91c0Rlc2VyaWFsaXplciB7XG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIHN0aWNrZXIgZm9yIHRoZSBnaXZlbiBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBzcHJpdGVcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uU3RpY2tlclNwcml0ZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXNlcmlhbGl6ZVN0aWNrZXIgKG9wZXJhdGlvbiwgc3ByaXRlKSB7XG4gICAgY29uc3QgeyBTcHJpdGVPcGVyYXRpb24gfSA9IFNESy5PcGVyYXRpb25zXG5cbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHNwcml0ZVxuICAgIGNvbnN0IHN0aWNrZXIgPSB0aGlzLl9zdGlja2VyTWFuYWdlci5nZXRTdGlja2VyQnlJZGVudGlmaWVyKG9wdGlvbnMuaWRlbnRpZmllcilcbiAgICBpZiAoIXN0aWNrZXIpIHtcbiAgICAgIExvZy53YXJuKCdEZXNlcmlhbGl6ZXInLCBgVW5rbm93biBzdGlja2VyIFxcYCR7b3B0aW9ucy5pZGVudGlmaWVyfVxcYC4gU2tpcHBpbmcgc3ByaXRlLmApXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICB9XG4gICAgY29uc3QgdXJsID0gU3RpY2tlck1hbmFnZXIuZ2V0VVJMRm9yU3RpY2tlcihzdGlja2VyLCAnYmFzZScpXG4gICAgY29uc3QgcmVzb2x2ZWRVcmwgPSB0aGlzLl9lZGl0b3IuZ2V0VUkoKS5nZXRBc3NldFBhdGgodXJsKVxuICAgIGNvbnN0IGlucHV0RGltZW5zaW9ucyA9IG9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG4gICAgcmV0dXJuIEltYWdlTG9hZGVyLmxvYWQocmVzb2x2ZWRVcmwpXG4gICAgICAudGhlbihpbWFnZSA9PiB7XG4gICAgICAgIGNvbnN0IGFkanVzdG1lbnRzID0gU3ByaXRlT3BlcmF0aW9uLlN0aWNrZXJTcHJpdGUucHJvdG90eXBlLmF2YWlsYWJsZU9wdGlvbnMuYWRqdXN0bWVudHMuc3RydWN0dXJlXG4gICAgICAgIGNvbnN0IHsgcm90YXRpb24sIGZsaXBIb3Jpem9udGFsbHksIGZsaXBWZXJ0aWNhbGx5IH0gPSBvcHRpb25zXG4gICAgICAgIGNvbnN0IHN0aWNrZXJPcHRpb25zID0ge1xuICAgICAgICAgIGlkZW50aWZpZXI6IG9wdGlvbnMuaWRlbnRpZmllcixcbiAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICBwb3NpdGlvbjogVmVjdG9yMi5mcm9tT2JqZWN0KG9wdGlvbnMucG9zaXRpb24pLFxuICAgICAgICAgIGRpbWVuc2lvbnM6IFZlY3RvcjIuZnJvbU9iamVjdChvcHRpb25zLmRpbWVuc2lvbnMpLm11bHRpcGx5KGlucHV0RGltZW5zaW9ucy5taW4oKSksXG4gICAgICAgICAgcm90YXRpb246IHJvdGF0aW9uIHx8IDAsXG4gICAgICAgICAgZmxpcEhvcml6b250YWxseSxcbiAgICAgICAgICBmbGlwVmVydGljYWxseSxcbiAgICAgICAgICBhZGp1c3RtZW50czoge31cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hZGp1c3RtZW50cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBbJ2JyaWdodG5lc3MnLCAnY29udHJhc3QnLCAnc2F0dXJhdGlvbiddLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hZGp1c3RtZW50c1tvcHRpb25dICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBzdGlja2VyT3B0aW9ucy5hZGp1c3RtZW50c1tvcHRpb25dID0gb3B0aW9ucy5hZGp1c3RtZW50c1tvcHRpb25dICsgYWRqdXN0bWVudHNbb3B0aW9uXS5kZWZhdWx0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50aW50Q29sb3IgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzdGlja2VyLnRpbnRNb2RlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHN0aWNrZXJPcHRpb25zLnRpbnRDb2xvciA9IENvbG9yLmZyb21BcnJheShvcHRpb25zLnRpbnRDb2xvci5yZ2JhKVxuICAgICAgICAgIHN0aWNrZXJPcHRpb25zLnRpbnRNb2RlID0gc3RpY2tlci50aW50TW9kZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmFscGhhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHN0aWNrZXJPcHRpb25zLmFscGhhID0gb3B0aW9ucy5hbHBoYVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wZXJhdGlvbi5jcmVhdGVTdGlja2VyKHN0aWNrZXJPcHRpb25zKVxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIHRyYW5zZm9ybSBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBvcGVyYXRpb25EYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGVzZXJpYWxpemVUcmFuc2Zvcm1PcGVyYXRpb24gKG9wZXJhdGlvbkRhdGEpIHtcbiAgICByZXR1cm4gc3VwZXIuX2Rlc2VyaWFsaXplVHJhbnNmb3JtT3BlcmF0aW9uKG9wZXJhdGlvbkRhdGEpXG4gICAgICAudGhlbihvcGVyYXRpb24gPT4ge1xuICAgICAgICBpZiAoIW9wZXJhdGlvbikgcmV0dXJuXG5cbiAgICAgICAgLy8gVE9ETzogR2V0IGNvcnJlY3QgcmF0aW9cbiAgICAgICAgb3BlcmF0aW9uLl9yYXRpbyA9IG51bGxcbiAgICAgICAgcmV0dXJuIG9wZXJhdGlvblxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGlucHV0IGltYWdlIChpZiBwcmVzZW50KVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplSW5wdXRJbWFnZSAoKSB7XG4gICAgbGV0IHsgZGF0YSwgdHlwZSwgdXJpIH0gPSB0aGlzLl9kYXRhLmltYWdlXG5cbiAgICBpZiAoZGF0YSAmJiB0eXBlKSB7XG4gICAgICB1cmkgPSBgZGF0YToke3R5cGV9O2Jhc2U2NCwke2RhdGF9YFxuICAgIH1cblxuICAgIGlmICh1cmkpIHtcbiAgICAgIHJldHVybiBJbWFnZUxvYWRlci5sb2FkKHVyaSlcbiAgICAgICAgLnRoZW4oaW1hZ2UgPT4ge1xuICAgICAgICAgIHRoaXMuX2VkaXRvci5zZXRJbWFnZShpbWFnZSlcbiAgICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gYWRqdXN0bWVudHMgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge09iamVjdH0gb3BlcmF0aW9uRGF0YVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplQWRqdXN0bWVudHNPcGVyYXRpb24gKG9wZXJhdGlvbkRhdGEpIHtcbiAgICBjb25zdCB7IEFkanVzdG1lbnRzT3BlcmF0aW9uIH0gPSBTREsuT3BlcmF0aW9uc1xuICAgIHJldHVybiBzdXBlci5fZGVzZXJpYWxpemVBZGp1c3RtZW50c09wZXJhdGlvbihvcGVyYXRpb25EYXRhKVxuICAgICAgLnRoZW4ob3BlcmF0aW9uID0+IHtcbiAgICAgICAgaWYgKCFvcGVyYXRpb24pIHJldHVybiBudWxsXG5cbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSBvcGVyYXRpb25EYXRhXG4gICAgICAgIGNvbnN0IGtub3duT3B0aW9ucyA9IFsnZ2FtbWEnLCAnd2hpdGVzJywgJ2JsYWNrcycsICd0ZW1wZXJhdHVyZSddXG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbk9wdGlvbnMgPSB7fVxuXG4gICAgICAgIGtub3duT3B0aW9ucy5mb3JFYWNoKG9wdGlvbk5hbWUgPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1tvcHRpb25OYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVyblxuXG4gICAgICAgICAgY29uc3QgeyBtaW5WYWx1ZSwgbWlkVmFsdWUsIG1heFZhbHVlIH0gPSBBZGp1c3RtZW50c09wZXJhdGlvbi5wcm90b3R5cGUuYXZhaWxhYmxlT3B0aW9uc1tvcHRpb25OYW1lXVxuICAgICAgICAgIGxldCB2YWx1ZSA9IG9wdGlvbnNbb3B0aW9uTmFtZV1cblxuICAgICAgICAgIHZhbHVlID0gdmFsdWUgPCAwXG4gICAgICAgICAgICA/IChtaWRWYWx1ZSArIChtaWRWYWx1ZSAtIG1pblZhbHVlKSAqIHZhbHVlKVxuICAgICAgICAgICAgOiAobWlkVmFsdWUgKyAobWF4VmFsdWUgLSBtaWRWYWx1ZSkgKiB2YWx1ZSlcbiAgICAgICAgICBvcGVyYXRpb25PcHRpb25zW29wdGlvbk5hbWVdID0gdmFsdWVcbiAgICAgICAgfSlcblxuICAgICAgICBvcGVyYXRpb24uc2V0KG9wZXJhdGlvbk9wdGlvbnMpXG5cbiAgICAgICAgcmV0dXJuIG9wZXJhdGlvblxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIGZvY3VzIG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wZXJhdGlvbkRhdGFcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kZXNlcmlhbGl6ZUZvY3VzT3BlcmF0aW9uIChvcGVyYXRpb25EYXRhKSB7XG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSBvcGVyYXRpb25EYXRhLm9wdGlvbnNcbiAgICBzd2l0Y2ggKG9wZXJhdGlvbkRhdGEub3B0aW9ucy50eXBlKSB7XG4gICAgICBjYXNlICdyYWRpYWwnOlxuICAgICAgICByZXR1cm4gc3VwZXIuX2Rlc2VyaWFsaXplRm9jdXNPcGVyYXRpb24ob3BlcmF0aW9uRGF0YSlcbiAgICAgIGNhc2UgJ2xpbmVhcic6IHtcbiAgICAgICAgY29uc3QgeyBzdGFydCwgZW5kLCBibHVyUmFkaXVzIH0gPSBvcHRpb25zXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ2xpbmVhci1mb2N1cycsIHtcbiAgICAgICAgICBjb250cm9sUG9pbnQxOiBWZWN0b3IyLmZyb21PYmplY3Qoc3RhcnQpLFxuICAgICAgICAgIGNvbnRyb2xQb2ludDI6IFZlY3RvcjIuZnJvbU9iamVjdChlbmQpLFxuICAgICAgICAgIGJsdXJSYWRpdXNcbiAgICAgICAgfSkpXG4gICAgICB9XG4gICAgICBjYXNlICdtaXJyb3JlZCc6IHtcbiAgICAgICAgY29uc3QgeyBzdGFydCwgZW5kLCBzaXplLCBncmFkaWVudFNpemUsIGJsdXJSYWRpdXMgfSA9IG9wdGlvbnNcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9lZGl0b3Iub3BlcmF0aW9ucy5nZXRPckNyZWF0ZSgnbWlycm9yZWQtZm9jdXMnLCB7XG4gICAgICAgICAgc3RhcnQ6IFZlY3RvcjIuZnJvbU9iamVjdChzdGFydCksXG4gICAgICAgICAgZW5kOiBWZWN0b3IyLmZyb21PYmplY3QoZW5kKSxcbiAgICAgICAgICBzaXplLFxuICAgICAgICAgIGdyYWRpZW50U2l6ZSxcbiAgICAgICAgICBibHVyUmFkaXVzXG4gICAgICAgIH0pKVxuICAgICAgfVxuICAgICAgY2FzZSAnZ2F1c3NpYW4nOiB7XG4gICAgICAgIGNvbnN0IHsgYmx1clJhZGl1cyB9ID0gb3B0aW9uc1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2VkaXRvci5vcGVyYXRpb25zLmdldE9yQ3JlYXRlKCdibHVyJywge1xuICAgICAgICAgIGJsdXJSYWRpdXNcbiAgICAgICAgfSkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gdGV4dCBmb3IgdGhlIGdpdmVuIG9wZXJhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEBwYXJhbSAge09iamVjdH0gdGV4dFxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5UZXh0U3ByaXRlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplVGV4dCAob3BlcmF0aW9uLCB0ZXh0KSB7XG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSB0ZXh0XG4gICAgY29uc3QgeyBmb250U2l6ZSwgbGluZUhlaWdodCwgZm9udElkZW50aWZpZXIsIGFsaWdubWVudCwgcm90YXRpb24sIG1heFdpZHRoLCBjb2xvciwgYmFja2dyb3VuZENvbG9yIH0gPSBvcHRpb25zXG5cbiAgICBjb25zdCBmb250TG9hZGVyID0gdGhpcy5fdWkuZ2V0Rm9udExvYWRlcigpXG4gICAgbGV0IHZhcmlhdGlvbiA9IHRoaXMuX2ZvbnRNYW5hZ2VyLmdldFZhcmlhdGlvbkJ5SWRlbnRpZmllcihmb250SWRlbnRpZmllcilcbiAgICBpZiAoIXZhcmlhdGlvbikge1xuICAgICAgdmFyaWF0aW9uID0gdGhpcy5fZm9udE1hbmFnZXIuZ2V0RGVmYXVsdFZhcmlhdGlvbigpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvbnRMb2FkZXIuc2V0Rm9udHMoW3ZhcmlhdGlvbi5nZXRGb250KCldKVxuICAgIH1cbiAgICByZXR1cm4gZm9udExvYWRlci5sb2FkKClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc3QgaW5wdXREaW1lbnNpb25zID0gb3BlcmF0aW9uLmdldElucHV0RGltZW5zaW9ucyhmYWxzZSlcblxuICAgICAgICAvLyBGb3Igd2hhdGV2ZXIgcmVhc29uLCBtYXggd2lkdGggaXMgcmVsYXRpdmUgdG8gc2hvcnRlc3Qgc2lkZSwgd2hpbGUgZm9udCBzaXplIGlzbid0XG4gICAgICAgIGNvbnN0IGZpeGVkTWF4V2lkdGggPSBtYXhXaWR0aCAqIGlucHV0RGltZW5zaW9ucy5taW4oKSAvIGlucHV0RGltZW5zaW9ucy54XG4gICAgICAgIHJldHVybiBvcGVyYXRpb24uY3JlYXRlVGV4dCh7XG4gICAgICAgICAgZm9udFNpemUsXG4gICAgICAgICAgbGluZUhlaWdodCxcbiAgICAgICAgICBmb250RmFtaWx5OiB2YXJpYXRpb24uZ2V0Rm9udEZhbWlseSgpLFxuICAgICAgICAgIGZvbnRXZWlnaHQ6IHZhcmlhdGlvbi5nZXRGb250V2VpZ2h0KCksXG4gICAgICAgICAgZm9udElkZW50aWZpZXI6IHZhcmlhdGlvbi5nZXRJZGVudGlmaWVyKCksXG4gICAgICAgICAgdGV4dE1ldHJpY3M6IHZhcmlhdGlvbi5nZXRUZXh0TWV0cmljcygpLFxuICAgICAgICAgIGFsaWdubWVudCxcbiAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICBtYXhXaWR0aDogZml4ZWRNYXhXaWR0aCxcbiAgICAgICAgICB0ZXh0OiBvcHRpb25zLnRleHQsXG4gICAgICAgICAgY29sb3I6IENvbG9yLmZyb21BcnJheShjb2xvci5yZ2JhKSxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9yLmZyb21BcnJheShiYWNrZ3JvdW5kQ29sb3IucmdiYSksXG4gICAgICAgICAgcG9zaXRpb246IFZlY3RvcjIuZnJvbU9iamVjdChvcHRpb25zLnBvc2l0aW9uKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgYnJ1c2ggZmFjZSB3aXRoIHRoZSBnaXZlbiBvcHRpb25zXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlNwcml0ZXMuQnJ1c2hTcHJpdGUuUGF0aH0gcGF0aFxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5TcHJpdGVzLkJydXNoU3ByaXRlLkJydXNofVxuICAgKi9cbiAgX2NyZWF0ZUJydXNoRm9yUGF0aCAocGF0aCkge1xuICAgIGNvbnN0IHsgaWRlbnRpZmllciwgY29sb3IsIHNpemUsIGhhcmRuZXNzIH0gPSBwYXRoLmJydXNoXG4gICAgY29uc3QgY29sb3JPYmplY3QgPSBDb2xvci5mcm9tQXJyYXkoY29sb3IucmdiYSlcblxuICAgIGNvbnN0IGJydXNoT3B0aW9ucyA9IHtcbiAgICAgIGNvbG9yOiBjb2xvck9iamVjdCxcbiAgICAgIHNpemVcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGhhcmRuZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgYnJ1c2hPcHRpb25zLmhhcmRuZXNzID0gaGFyZG5lc3NcbiAgICB9XG5cbiAgICBsZXQgcmF3QnJ1c2ggPSB0aGlzLl9icnVzaE1hbmFnZXIuZ2V0QnJ1c2hCeUlkZW50aWZpZXIoaWRlbnRpZmllcilcbiAgICBpZiAoIXJhd0JydXNoKSB7XG4gICAgICByYXdCcnVzaCA9IHRoaXMuX2JydXNoTWFuYWdlci5nZXRGaXJzdEJydXNoKClcbiAgICB9XG5cbiAgICBpZiAocmF3QnJ1c2gucHJvdG90eXBlICYmIHJhd0JydXNoLnByb3RvdHlwZSBpbnN0YW5jZW9mIEJydXNoKSB7XG4gICAgICAvLyBDdXN0b20gQnJ1c2ggaW5zdGFuY2UsIHVzZWQgZm9yIHNwZWNpYWwgYnJ1c2hlcyBzdWNoIGFzIHJhZGlhbCBicnVzaCwgd2hpY2ggaGFzXG4gICAgICAvLyBhbiBhZGRpdGlvbmFsIGhhcmRuZXNzIG9wdGlvblxuICAgICAgY29uc3QgQnJ1c2hDbGFzcyA9IHJhd0JydXNoXG4gICAgICByZXR1cm4gbmV3IEJydXNoQ2xhc3MoYnJ1c2hPcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBfYnJ1c2ggPSBTREtVdGlscy5leHRlbmQoe30sIHJhd0JydXNoKVxuICAgICAgZGVsZXRlIF9icnVzaC5pbWFnZVxuXG4gICAgICBjbGFzcyBCcnVzaENsYXNzIGV4dGVuZHMgQnJ1c2gge31cbiAgICAgIEJydXNoQ2xhc3MuaWRlbnRpZmllciA9IHJhd0JydXNoLmlkZW50aWZpZXJcblxuICAgICAgLy8gUGxhaW4gSlMgb2JqZWN0LCB1c2VkIGZvciBzaW1wbGUgaW1hZ2UgYnJ1c2hlc1xuICAgICAgcmV0dXJuIG5ldyBCcnVzaENsYXNzKFNES1V0aWxzLmV4dGVuZCh7fSwgX2JydXNoLCBicnVzaE9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIGZyYW1lIHNwcml0ZVxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbn1cbiAgICogQHBhcmFtICB7T2JqZWN0fSBmcmFtZXNwcml0ZU9wZXJhdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rlc2VyaWFsaXplRnJhbWUgKHNwcml0ZU9wZXJhdGlvbiwgZnJhbWUpIHtcbiAgICByZXR1cm4gc3VwZXIuX2Rlc2VyaWFsaXplRnJhbWUoc3ByaXRlT3BlcmF0aW9uLCBmcmFtZSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc3QgZnJhbWVPcGVyYXRpb24gPSB0aGlzLl9lZGl0b3Iub3BlcmF0aW9ucy5nZXQoJ2ZyYW1lJylcblxuICAgICAgICBjb25zdCB7IHNpemUsIGFscGhhLCB0aW50Q29sb3IgfSA9IGZyYW1lLm9wdGlvbnNcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9XG4gICAgICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBvcHRpb25zLnNjYWxlID0gc2l6ZVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYWxwaGEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgb3B0aW9ucy5hbHBoYSA9IGFscGhhXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aW50Q29sb3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgb3B0aW9ucy50aW50Q29sb3IgPSBDb2xvci5mcm9tQXJyYXkodGludENvbG9yLnJnYmEpXG4gICAgICAgIH1cbiAgICAgICAgZnJhbWVPcGVyYXRpb24uc2V0KG9wdGlvbnMpXG4gICAgICB9KVxuICB9XG5cbiAgX2Rlc2VyaWFsaXplVGV4dERlc2lnbiAob3BlcmF0aW9uLCBzcHJpdGUpIHtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHNwcml0ZVxuICAgIGNvbnN0IHsgcG9zaXRpb24sIHJvdGF0aW9uLCBmbGlwSG9yaXpvbnRhbGx5LCBmbGlwVmVydGljYWxseSxcbiAgICAgIHRleHQsIGNvbG9yLCB3aWR0aCwgc2VlZCwgaW52ZXJ0ZWQsIGlkZW50aWZpZXIgfSA9IG9wdGlvbnNcblxuICAgIGNvbnN0IHRleHREZXNpZ25NYW5hZ2VyID0gbmV3IFRleHREZXNpZ25NYW5hZ2VyKHRoaXMuX3VpLCB0aGlzLl9nZXRPcHRpb25zKCd0ZXh0ZGVzaWduJykpXG4gICAgY29uc3QgZm9udE1hbmFnZXIgPSBuZXcgRm9udE1hbmFnZXIodGhpcy5fdWksIHsgZm9udHM6IENvbnN0YW50cy5ERUZBVUxUUy5URVhUX0RFU0lHTl9GT05UUywgcmVwbGFjZUZvbnRzOiB0cnVlIH0pXG4gICAgY29uc3QgQXNzZXRNYW5hZ2VyID0gb3BlcmF0aW9uLmNvbnN0cnVjdG9yLlRleHREZXNpZ25TcHJpdGUuQXNzZXRNYW5hZ2VyXG4gICAgY29uc3QgZm9udExvYWRlciA9IHRoaXMuX3VpLmdldEZvbnRMb2FkZXIoKVxuXG4gICAgY29uc3QgTGF5b3V0ID0gdGV4dERlc2lnbk1hbmFnZXIuZ2V0TGF5b3V0QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpXG5cbiAgICBjb25zdCBsYXlvdXQgPSBuZXcgTGF5b3V0KClcblxuICAgIGZvbnRMb2FkZXIuc2V0Rm9udHMoZm9udE1hbmFnZXIuZ2V0Rm9udHMoKSlcblxuICAgIEFzc2V0TWFuYWdlci5zZXRGb250cyh7XG4gICAgICAuLi5Bc3NldE1hbmFnZXIuZ2V0Rm9udHMoKSxcbiAgICAgIC4uLmZvbnRNYW5hZ2VyLmdldFZhcmlhdGlvbnNCeUlkZW50aWZpZXIoKVxuICAgIH0pXG5cbiAgICByZXR1cm4gZm9udExvYWRlclxuICAgICAgLmxvYWQoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zdCBpbWFnZXMgPSBsYXlvdXQuZ2V0SW1hZ2VQYXRocygpLm1hcChwYXRoID0+ICh7IHBhdGgsIGZ1bGxQYXRoOiB0aGlzLl91aS5nZXRBc3NldFBhdGgocGF0aCksIGltYWdlOiBudWxsIH0pKVxuICAgICAgICByZXR1cm4gQXNzZXRNYW5hZ2VyXG4gICAgICAgICAgLmxvYWRJbWFnZXMoaW1hZ2VzKVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGxheW91dC5vbkltYWdlc0xvYWRlZCgpXG5cbiAgICAgICAgICAgIHJldHVybiBvcGVyYXRpb24uY3JlYXRlVGV4dERlc2lnbih7XG4gICAgICAgICAgICAgIHBvc2l0aW9uLFxuICAgICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgICAgZmxpcEhvcml6b250YWxseSxcbiAgICAgICAgICAgICAgZmxpcFZlcnRpY2FsbHksXG4gICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgIGNvbG9yOiBDb2xvci5mcm9tQXJyYXkoY29sb3IucmdiYSksXG4gICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICBzZWVkLFxuICAgICAgICAgICAgICBpbnZlcnRlZCxcbiAgICAgICAgICAgICAgbGF5b3V0XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICB9KVxuICB9XG59XG5cbnYzMDBEZXNlcmlhbGl6ZXIudmVyc2lvbiA9ICczLjAuMCdcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL3NlcmlhbGl6YXRpb24vMy4wLjAvZGVzZXJpYWxpemVyLmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBVdGlscywgQ29uc3RhbnRzIH0gZnJvbSAnZ2xvYmFscydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNmb3JtUmF0aW9NYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IgKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMuX2NhdGVnb3JpZXNCeUlkID0ge31cbiAgICB0aGlzLl9jYXRlZ29yaWVzID0gW11cblxuICAgIHRoaXMuX2luaXRDYXRlZ29yaWVzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgY2F0ZWdvcmllc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXRDYXRlZ29yaWVzICgpIHtcbiAgICBsZXQgeyByZXBsYWNlQ2F0ZWdvcmllcywgY2F0ZWdvcmllcyB9ID0gdGhpcy5fb3B0aW9uc1xuICAgIGxldCBkZWZhdWx0Q2F0ZWdvcmllcyA9IENvbnN0YW50cy5ERUZBVUxUUy5UUkFOU0ZPUk1fUkFUSU9fQ0FURUdPUklFU1xuXG4gICAgaWYgKCFjYXRlZ29yaWVzKSB7XG4gICAgICB0aGlzLl9jYXRlZ29yaWVzID0gVXRpbHMuY2xvbmVDYXRlZ29yaWVzKGRlZmF1bHRDYXRlZ29yaWVzLCAncmF0aW9zJylcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHJlcGxhY2VDYXRlZ29yaWVzKSB7XG4gICAgICAgIHRoaXMuX2NhdGVnb3JpZXMgPSBVdGlscy5jbG9uZUNhdGVnb3JpZXMoY2F0ZWdvcmllcywgJ3JhdGlvcycpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jYXRlZ29yaWVzID0gVXRpbHMubWVyZ2VDYXRlZ29yaWVzKFxuICAgICAgICAgIGRlZmF1bHRDYXRlZ29yaWVzLFxuICAgICAgICAgIGNhdGVnb3JpZXMsXG4gICAgICAgICAgJ3JhdGlvcydcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJ1aWxkIGNhdCBpZCA9PiBjYXRlZ29yeSBoYXNoXG4gICAgdGhpcy5fY2F0ZWdvcmllc0J5SWQgPSB7fVxuICAgIHRoaXMuX2NhdGVnb3JpZXMuZm9yRWFjaCgoYykgPT4geyB0aGlzLl9jYXRlZ29yaWVzQnlJZFtjLm5hbWVdID0gYyB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhdGVnb3JpZXNcbiAgICogQHBhcmFtIHtCb29sZWFufSBpbmNsdWRlQWxsQ2F0ZWdvcnkgPSBmYWxzZVxuICAgKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAgICovXG4gIGdldENhdGVnb3JpZXMgKGluY2x1ZGVBbGxDYXRlZ29yeSA9IGZhbHNlKSB7XG4gICAgY29uc3QgY2F0ZWdvcmllcyA9IHRoaXMuX2NhdGVnb3JpZXMuc2xpY2UoMClcbiAgICBpZiAoaW5jbHVkZUFsbENhdGVnb3J5KSB7XG4gICAgICBjb25zdCBhbGxDYXRlZ29yeSA9IHtcbiAgICAgICAgbmFtZTogJ2FsbCcsXG4gICAgICAgIHJhdGlvczogdGhpcy5fY2F0ZWdvcmllc1xuICAgICAgICAgIC5tYXAoKGMpID0+IGMucmF0aW9zKVxuICAgICAgICAgIC5yZWR1Y2UoKGEsIGIpID0+IGEuY29uY2F0KGIpKVxuICAgICAgfVxuICAgICAgY2F0ZWdvcmllcy51bnNoaWZ0KGFsbENhdGVnb3J5KVxuICAgIH1cbiAgICByZXR1cm4gY2F0ZWdvcmllc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHJhdGlvcyBmb3IgdGhlIGdpdmVuIGNhdGVnb3J5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYXRlZ29yeVxuICAgKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAgICovXG4gIGdldFJhdGlvc0ZvckNhdGVnb3J5IChjYXRlZ29yeSkge1xuICAgIGNvbnN0IHsgYXZhaWxhYmxlUmF0aW9zIH0gPSB0aGlzLl9vcHRpb25zXG4gICAgaWYgKCFhdmFpbGFibGVSYXRpb3MpIHJldHVybiBjYXRlZ29yeS5yYXRpb3NcblxuICAgIHJldHVybiBjYXRlZ29yeS5yYXRpb3MuZmlsdGVyKHJhdGlvID0+IHtcbiAgICAgIHJldHVybiBhdmFpbGFibGVSYXRpb3MuaW5kZXhPZihyYXRpby5pZGVudGlmaWVyKSAhPT0gLTFcbiAgICB9KVxuICB9XG5cbiAgaGFzUmF0aW9WYWx1ZSAocmF0aW8pIHtcbiAgICBsZXQgcmVzdWx0ID0gZmFsc2VcblxuICAgIHRoaXMuX2NhdGVnb3JpZXMuZm9yRWFjaChjID0+IHtcbiAgICAgIHRoaXMuZ2V0UmF0aW9zRm9yQ2F0ZWdvcnkoYykuZm9yRWFjaChcbiAgICAgICAgaXRlbSA9PiB7XG4gICAgICAgICAgaWYgKGl0ZW0ucmF0aW8pIHtcbiAgICAgICAgICAgIGlmIChpdGVtLnJhdGlvID09PSAnKicpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnJhdGlvID09PSByYXRpbykge1xuICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmRpbWVuc2lvbikge1xuICAgICAgICAgICAgbGV0IGl0ZW1SYXRpbyA9IGl0ZW0uZGltZW5zaW9uLnkgLyBpdGVtLmRpbWVuc2lvbi54XG4gICAgICAgICAgICBpZiAoaXRlbVJhdGlvID09PSByYXRpbykge1xuICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApXG4gICAgfSlcblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvbWFuYWdlcnMvdHJhbnNmb3JtLXJhdGlvLW1hbmFnZXIuanMiLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBQcm9wVHlwZXMsIGFkb25pcywgVXRpbHMsIHJlcXVlc3RBbmltYXRpb25GcmFtZSB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgU2hhcmVkU3RhdGVDb21wb25lbnQgZnJvbSAnLi9zaGFyZWQtc3RhdGUtY29tcG9uZW50J1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udHJvbHNDb21wb25lbnQgZXh0ZW5kcyBTaGFyZWRTdGF0ZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBTaGFyZWRTdGF0ZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vbkJhY2tCdXR0b25DbGljaydcbiAgICApXG5cbiAgICB0aGlzLl9uZWVkc1N0eWxlRml4ZXMgPSB0cnVlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGJhY2tCdXR0b246IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBvcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgYmFjayBidXR0b25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkJhY2tCdXR0b25DbGljayAoKSB7XG5cbiAgfVxuXG4gIHNldFNoYXJlZFN0YXRlIChzdGF0ZSwgdXBkYXRlID0gdHJ1ZSwgc2hhcmVkU3RhdGVVcGRhdGUgPSB0cnVlKSB7XG4gICAgc3VwZXIuc2V0U2hhcmVkU3RhdGUoc3RhdGUsIHVwZGF0ZSlcbiAgICBzaGFyZWRTdGF0ZVVwZGF0ZSAmJiB0aGlzLnByb3BzLmNvbnRyb2xzLnVwZGF0ZVNoYXJlZFN0YXRlKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBzdHlsZXMgbmVlZCB0byBiZSBmaXhlZCBieSB0aGUgSmF2YVNjcmlwdC5cbiAgICogVGhpcyBuZWVkcyB0byBiZSBkb25lIHRoYW5rcyB0byBvbGRlciBJbnRlcm5ldCBFeHBsb3JlciBicm93c2VycyB3aGljaCBoYXZlXG4gICAqIGEgYnVuY2ggb2YgQ1NTIGJ1Z3MuXG4gICAqL1xuICBmaXhTdHlsZXMgKCkge1xuICAgIGlmIChVdGlscy5Ccm93c2VyLmlzSUVsdGUoMTApKSB7XG4gICAgICBpZiAodGhpcy5fdGFibGUpIHRoaXMuX3RhYmxlLnN0eWxlLmhlaWdodCA9ICcxMDAlJ1xuICAgICAgaWYgKHRoaXMuX2NvbnRhaW5lcikgdGhpcy5fY29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcxMDAlJ1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9yb290KSByZXR1cm5cblxuICAgICAgICAgIGNvbnN0IHJvb3RIZWlnaHQgPSB0aGlzLl9yb290Lm9mZnNldEhlaWdodFxuXG4gICAgICAgICAgaWYgKHRoaXMuX2NvbnRhaW5lciAmJiB0aGlzLl9oZWFkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckhlaWdodCA9IHRoaXMuX2hlYWRlci5vZmZzZXRIZWlnaHRcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBgJHtyb290SGVpZ2h0IC0gaGVhZGVySGVpZ2h0fXB4YFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLl90YWJsZSkgdGhpcy5fdGFibGUuc3R5bGUuaGVpZ2h0ID0gYCR7cm9vdEhlaWdodH1weGBcblxuICAgICAgICAgIGlmICh0aGlzLl9zY3JvbGxiYXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbGJhci51cGRhdGUoKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICB9LCAxMDAwKVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3Njcm9sbGJhcikge1xuICAgICAgdGhpcy5fc2Nyb2xsYmFyLnVwZGF0ZSgpXG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICBfZ2V0Um9vdFByb3BzICgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuXG4gIF9yZW5kZXJDb250ZW50ICgpIHtcbiAgICByZXR1cm4gPGRpdiAvPlxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBSb290RWxlbWVudCB9ID0gdGhpcy5jb25zdHJ1Y3RvclxuICAgIGNvbnN0IHsgLi4ucHJvcHMgfSA9IHRoaXMuX2dldFJvb3RQcm9wcygpXG4gICAgY29uc3QgeyBjdXJyZW50Q29udHJvbCB9ID0gdGhpcy5jb250ZXh0LnNjcmVlbi5zdGF0ZVxuICAgIGNvbnN0IGlzT3ZlcnZpZXdDb250cm9sID0gY3VycmVudENvbnRyb2wgPT09IG51bGxcblxuICAgIGNvbnN0IGJhY2tCdXR0b25TdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgnJHt0aGlzLl9nZXRBc3NldFBhdGgoJ2VkaXRvci9jb250cm9scy9zaGFyZWQvYmFjay5wbmcnLCB0cnVlKX0nKWBcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPENvbnRyb2xzQ29tcG9uZW50Um9vdCBpbm5lclJlZj17ZWwgPT4geyBwcm9wcy5pbm5lclJlZiAmJiBwcm9wcy5pbm5lclJlZihlbCk7IHRoaXMuX3Jvb3QgPSBlbCB9fT5cbiAgICAgICAgPENvbnRyb2xzQ29tcG9uZW50VGFibGUgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fdGFibGUgPSBlbCB9fT5cbiAgICAgICAgICB7ICFpc092ZXJ2aWV3Q29udHJvbCAmJlxuICAgICAgICAgICAgPENvbnRyb2xzQ29tcG9uZW50SGVhZGVyIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2hlYWRlciA9IGVsIH19PlxuICAgICAgICAgICAgICB7IHRoaXMuc3RhdGUuYmFja0J1dHRvbiAmJlxuICAgICAgICAgICAgICAgIDxCYWNrQnV0dG9uXG4gICAgICAgICAgICAgICAgICBzdHlsZT17YmFja0J1dHRvblN0eWxlfVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5fb25CYWNrQnV0dG9uQ2xpY2t9IC8+IH1cbiAgICAgICAgICAgICAgPENvbnRyb2xzQ29tcG9uZW50VGl0bGU+XG4gICAgICAgICAgICAgICAge3RoaXMuX3QoYHBlc2RrLiR7Y3VycmVudENvbnRyb2x9LnRpdGxlLm5hbWVgKX1cbiAgICAgICAgICAgICAgPC9Db250cm9sc0NvbXBvbmVudFRpdGxlPlxuICAgICAgICAgICAgPC9Db250cm9sc0NvbXBvbmVudEhlYWRlcj5cbiAgICAgICAgICB9XG4gICAgICAgICAgPFJvb3RFbGVtZW50Q29udGFpbmVyPlxuICAgICAgICAgICAgPFJvb3RFbGVtZW50XG4gICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgaW5uZXJSZWY9eyhlbCkgPT4geyB0aGlzLl9jb250YWluZXIgPSBlbCB9fVxuICAgICAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gKHByb3BzLmNsYXNzTmFtZSB8fCAnanMtZGVmYXVsdENvbnRyb2xzJykgOiB1bmRlZmluZWQpfT5cbiAgICAgICAgICAgICAge3RoaXMuX3JlbmRlckNvbnRlbnQoKX1cbiAgICAgICAgICAgIDwvUm9vdEVsZW1lbnQ+XG4gICAgICAgICAgPC9Sb290RWxlbWVudENvbnRhaW5lcj5cbiAgICAgICAgPC9Db250cm9sc0NvbXBvbmVudFRhYmxlPlxuICAgICAgPC9Db250cm9sc0NvbXBvbmVudFJvb3Q+XG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhpcyBlbGVtZW50J3MgY29udGFpbmVyXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICBnZXQgY29udGFpbmVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyXG4gIH1cbn1cblxuY29uc3QgQ29udHJvbHNDb21wb25lbnRSb290ID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gIGhlaWdodDogJzEwMCUnLFxuICBtYXhIZWlnaHQ6ICcxMDAlJyxcbiAgd2lkdGg6ICcyMzBweCcsXG4gIHpJbmRleDogdGhlbWUgPT4gdGhlbWUuekluZGV4KCdjb250cm9scycpLFxuICBvdmVyZmxvdzogJ2hpZGRlbidcbn0pXG5cbmNvbnN0IENvbnRyb2xzQ29tcG9uZW50VGFibGUgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlJyxcbiAgdGFibGVMYXlvdXQ6ICdmaXhlZCcsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnXG59KVxuXG5jb25zdCBDb250cm9sc0NvbXBvbmVudEhlYWRlciA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUtcm93JyxcbiAgaGVpZ2h0OiAnNDhweCcsXG4gIGJhY2tncm91bmQ6IHRoZW1lID0+IHRoZW1lLmNvbnRyb2xzTGlnaHRCYWNrZ3JvdW5kQ29sb3Jcbn0pXG5cbmNvbnN0IFJvb3RFbGVtZW50Q29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1yb3cnLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgYmFja2dyb3VuZDogdGhlbWUgPT4gdGhlbWUuY29udHJvbHNCYWNrZ3JvdW5kQ29sb3Jcbn0pXG5cbkNvbnRyb2xzQ29tcG9uZW50LlJvb3RFbGVtZW50ID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZScsXG4gIHRhYmxlTGF5b3V0OiAnZml4ZWQnLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSwge1xuICB3aXRoQm9yZGVyVG9wOiB7XG4gICAgYm9yZGVyVG9wOiB0aGVtZSA9PiBgMXB4IHNvbGlkICR7dGhlbWUuY29udHJvbHNTZXBhcmF0b3JDb2xvcn1gXG4gIH1cbn0pXG5cbmNvbnN0IENvbnRyb2xzQ29tcG9uZW50VGl0bGUgPSBhZG9uaXMuZGl2KHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIGxpbmVIZWlnaHQ6ICc0OHB4JyxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLmRpbW1lZFRleHRDb2xvcixcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gIGZvbnRTaXplOiAnMTNweCcsXG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnVwcGVyY2FzZVNlbWlCb2xkRm9udEZhbWlseSxcbiAgbGV0dGVyU3BhY2luZzogJzEuNHB4JyxcbiAgdGV4dEFsaWduOiAnY2VudGVyJ1xufSlcblxuY29uc3QgQmFja0J1dHRvbiA9IGFkb25pcy5idXR0b24oe1xuICBoZWlnaHQ6ICcxNHB4JyxcbiAgd2lkdGg6ICcxNHB4JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGxlZnQ6ICcxNnB4JyxcbiAgdG9wOiAnMTZweCcsXG4gIG9wYWNpdHk6IDAuNyxcbiAgYm9yZGVyOiAnbm9uZScsXG4gIGJhY2tncm91bmQ6ICduby1yZXBlYXQgY2VudGVyJyxcbiAgYmFja2dyb3VuZFNpemU6ICdjb250YWluJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG5cbiAgJzpmb2N1cyc6IHtcbiAgICBvdXRsaW5lOiAnbm9uZSdcbiAgfVxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9jb250cm9scy1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50IH0gZnJvbSAnZ2xvYmFscydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzSGVhZGVyQnV0dG9uQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgUm9vdEVsZW1lbnQgfSA9IHRoaXMuY29uc3RydWN0b3JcbiAgICBjb25zdCB7IC4uLnByb3BzIH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIDxSb290RWxlbWVudCB7Li4ucHJvcHN9IC8+XG4gIH1cbn1cblxuQ2FudmFzSGVhZGVyQnV0dG9uQ29tcG9uZW50LlJvb3RFbGVtZW50ID0gYWRvbmlzLmxpKHtcbiAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHdpZHRoOiAnNTBweCcsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB1c2VyU2VsZWN0OiAnbm9uZSdcbn0sIHtcbiAgZGlzYWJsZWQ6IHtcbiAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICB9XG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2hlYWRlci9jYW52YXMtaGVhZGVyLWJ1dHRvbi1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cbmltcG9ydCB7IFJlYWN0LCBQcm9wVHlwZXMsIEJhc2VDb21wb25lbnQsIGFkb25pcywgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBEcmFnZ2FibGVDb21wb25lbnQgZnJvbSAnLi9kcmFnZ2FibGUtY29tcG9uZW50J1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpZGVyQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBtaW5WYWx1ZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIG1heFZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgbWlkZGxlRG90OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcG9zaXRpdmVWYWx1ZVByZWZpeDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB2YWx1ZVVuaXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmdcbiAgfVxuXG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uS25vYkRyYWdTdGFydCcsXG4gICAgICAnX29uS25vYkRyYWcnLFxuICAgICAgJ19vbktub2JEcmFnU3RvcCcsXG4gICAgICAnX29uQmFyRHJhZ1N0YXJ0JyxcbiAgICAgICdfb25CYXJEcmFnJyxcbiAgICAgICdfb25CYXJEcmFnU3RvcCdcbiAgICApXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUgfHwgMCxcbiAgICAgIHNsaWRlclBvc2l0aW9uOiAwLFxuICAgICAgZm9yZWdyb3VuZExlZnQ6IDAsXG4gICAgICBmb3JlZ3JvdW5kV2lkdGg6IDBcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgLy8gVHJpZ2dlciBhIHJlLXJlbmRlciB0byBwb3NpdGlvbiB0aGUga25vYlxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICB0aGlzLl9zZXRWYWx1ZSh0aGlzLnN0YXRlLnZhbHVlLCBmYWxzZSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzXG4gICAqIEBwYXJhbSAge09iamVjdH0gcHJvcHNcbiAgICovXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKHByb3BzKSB7XG4gICAgaWYgKHByb3BzLnZhbHVlICE9PSB0aGlzLnN0YXRlLnZhbHVlKSB7XG4gICAgICB0aGlzLl9zZXRWYWx1ZShwcm9wcy52YWx1ZSwgZmFsc2UpXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgc3RhcnRzIGRyYWdnaW5nIHRoZSBrbm9iXG4gICAqIEBwYXJhbSAge1ZlY3RvcjJ9IHBvc2l0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Lbm9iRHJhZ1N0YXJ0IChwb3NpdGlvbikge1xuICAgIHRoaXMuX3ByZXZpb3VzVmFsdWUgPSB0aGlzLnN0YXRlLnZhbHVlXG4gICAgdGhpcy5faW5pdGlhbFNsaWRlclBvc2l0aW9uID0gdGhpcy5zdGF0ZS5zbGlkZXJQb3NpdGlvblxuICAgIHRoaXMuX2luaXRpYWxQb3NpdGlvbiA9IHBvc2l0aW9uXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hpbGUgdGhlIHVzZXIgZHJhZ3MgdGhlIGtub2JcbiAgICogQHBhcmFtICB7VmVjdG9yMn0gZGlmZlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uS25vYkRyYWcgKGRpZmYpIHtcbiAgICBjb25zdCBiYXJXaWR0aCA9IHRoaXMuX2Jhci5vZmZzZXRXaWR0aFxuXG4gICAgbGV0IG5ld1NsaWRlclBvc2l0aW9uID0gdGhpcy5faW5pdGlhbFNsaWRlclBvc2l0aW9uICsgZGlmZi54XG4gICAgbmV3U2xpZGVyUG9zaXRpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbihuZXdTbGlkZXJQb3NpdGlvbiwgYmFyV2lkdGgpKVxuICAgIGNvbnN0IHByb2dyZXNzID0gbmV3U2xpZGVyUG9zaXRpb24gLyBiYXJXaWR0aFxuICAgIGxldCBuZXdWYWx1ZSA9IHRoaXMucHJvcHMubWluVmFsdWUgKyAodGhpcy5wcm9wcy5tYXhWYWx1ZSAtIHRoaXMucHJvcHMubWluVmFsdWUpICogcHJvZ3Jlc3NcblxuICAgIHRoaXMuX3NldFZhbHVlKG5ld1ZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgc3RvcHMgZHJhZ2dpbmcgdGhlIGtub2JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbktub2JEcmFnU3RvcCAoKSB7XG4gICAgdGhpcy5fc2V0VmFsdWUodGhpcy5zdGF0ZS52YWx1ZSwgdHJ1ZSwgdHJ1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBkcmFnZ2luZyB0aGUgYmFyXG4gICAqIEBwYXJhbSAge1ZlY3RvcjJ9IHBvc2l0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CYXJEcmFnU3RhcnQgKHBvc2l0aW9uKSB7XG4gICAgdGhpcy5fcHJldmlvdXNWYWx1ZSA9IHRoaXMuc3RhdGUudmFsdWVcbiAgICB0aGlzLl9pbml0aWFsUG9zaXRpb24gPSBwb3NpdGlvbi5jbG9uZSgpXG5cbiAgICBjb25zdCBiYXJXaWR0aCA9IHRoaXMuX2Jhci5vZmZzZXRXaWR0aFxuICAgIGNvbnN0IHByb2dyZXNzID0gcG9zaXRpb24ueCAvIGJhcldpZHRoXG4gICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLnByb3BzLm1pblZhbHVlICsgKHRoaXMucHJvcHMubWF4VmFsdWUgLSB0aGlzLnByb3BzLm1pblZhbHVlKSAqIHByb2dyZXNzXG4gICAgdGhpcy5fc2V0VmFsdWUobmV3VmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hpbGUgdGhlIHVzZXIgZHJhZ3MgdGhlIGJhclxuICAgKiBAcGFyYW0gIHtWZWN0b3IyfSBkaWZmXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CYXJEcmFnIChkaWZmKSB7XG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLl9pbml0aWFsUG9zaXRpb24uY2xvbmUoKVxuICAgICAgLmFkZChkaWZmKVxuXG4gICAgY29uc3QgYmFyV2lkdGggPSB0aGlzLl9iYXIub2Zmc2V0V2lkdGhcbiAgICBjb25zdCBwcm9ncmVzcyA9IHBvc2l0aW9uLnggLyBiYXJXaWR0aFxuICAgIGxldCBuZXdWYWx1ZSA9IHRoaXMucHJvcHMubWluVmFsdWUgKyAodGhpcy5wcm9wcy5tYXhWYWx1ZSAtIHRoaXMucHJvcHMubWluVmFsdWUpICogcHJvZ3Jlc3NcbiAgICBuZXdWYWx1ZSA9IE1hdGgubWF4KHRoaXMucHJvcHMubWluVmFsdWUsIE1hdGgubWluKHRoaXMucHJvcHMubWF4VmFsdWUsIG5ld1ZhbHVlKSlcbiAgICB0aGlzLl9zZXRWYWx1ZShuZXdWYWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHN0b3BzIGRyYWdnaW5nIHRoZSBiYXJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkJhckRyYWdTdG9wICgpIHtcbiAgICB0aGlzLl9zZXRWYWx1ZSh0aGlzLnN0YXRlLnZhbHVlLCB0cnVlLCB0cnVlKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTElOR1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdHlsZSBmb3IgdGhlIGtub2IgKHBvc2l0aW9uKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0S25vYlN0eWxlICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogdGhpcy5zdGF0ZS5zbGlkZXJQb3NpdGlvblxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdHlsZSBmb3IgdGhlIGZvcmVncm91bmQgYmFyXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRGb3JlZ3JvdW5kU3R5bGUgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiB0aGlzLnN0YXRlLmZvcmVncm91bmRMZWZ0LFxuICAgICAgd2lkdGg6IHRoaXMuc3RhdGUuZm9yZWdyb3VuZFdpZHRoXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTUlTQ1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSB0byB0aGUgZ2l2ZW4gdmFsdWUsIHVwZGF0ZXMgdGhlIHNsaWRlciBwb3NpdGlvblxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICogQHBhcmFtIHtCb29sZWFufSBlbWl0Q2hhbmdlID0gdHJ1ZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVtaXRSZWxlYXNlID0gZmFsc2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRWYWx1ZSAodmFsdWUsIGVtaXRDaGFuZ2UgPSB0cnVlLCBlbWl0UmVsZWFzZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgeyBtaW5WYWx1ZSwgbWF4VmFsdWUgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBwcm9ncmVzcyA9ICh2YWx1ZSAtIG1pblZhbHVlKSAvIChtYXhWYWx1ZSAtIG1pblZhbHVlKVxuXG4gICAgLy8gQ2FsY3VsYXRlIHNsaWRlciBwb3NpdGlvblxuICAgIGNvbnN0IGJhcldpZHRoID0gdGhpcy5fYmFyLm9mZnNldFdpZHRoXG4gICAgY29uc3Qgc2xpZGVyUG9zaXRpb24gPSBiYXJXaWR0aCAqIHByb2dyZXNzXG5cbiAgICAvLyBDYWxjdWxhdGUgZm9yZWdyb3VuZCBwb3NpdGlvbiBhbmQgd2lkdGhcbiAgICBsZXQgZm9yZWdyb3VuZFdpZHRoID0gcHJvZ3Jlc3MgKiBiYXJXaWR0aFxuICAgIGxldCBmb3JlZ3JvdW5kTGVmdCA9IDBcbiAgICBpZiAodGhpcy5wcm9wcy5taWRkbGVEb3QpIHtcbiAgICAgIGZvcmVncm91bmRXaWR0aCA9IE1hdGguYWJzKHByb2dyZXNzIC0gMC41KSAqIGJhcldpZHRoXG4gICAgICBmb3JlZ3JvdW5kTGVmdCA9IHByb2dyZXNzIDwgMC41XG4gICAgICAgID8gKGJhcldpZHRoICogMC41IC0gZm9yZWdyb3VuZFdpZHRoKVxuICAgICAgICA6ICc1MCUnXG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlLCBzbGlkZXJQb3NpdGlvbiwgZm9yZWdyb3VuZFdpZHRoLCBmb3JlZ3JvdW5kTGVmdCB9KVxuXG4gICAgaWYgKGVtaXRDaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiYgdGhpcy5wcm9wcy5vbkNoYW5nZSh2YWx1ZSwgdGhpcy5fcHJldmlvdXNWYWx1ZSwgZW1pdFJlbGVhc2UpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhIGRpc3BsYXkgdmFsdWUgZnJvbSB0aGUgZ2l2ZW4gcHJvcHNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9idWlsZFZhbHVlICh2YWx1ZSkge1xuICAgIC8vIExpbWl0IGRlY2ltYWxzIHRvIHR3byBkaWdpdHMsIGlmIHByZXNlbnRcbiAgICBpZiAodmFsdWUgJSAxICE9PSAwKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvRml4ZWQoMilcbiAgICB9XG5cbiAgICAvLyBBZGQgcG9zaXRpdmUgdmFsdWUgcHJlZml4ICgrKSBpZiB2YWx1ZSBpcyA+IDBcbiAgICBpZiAodGhpcy5wcm9wcy5wb3NpdGl2ZVZhbHVlUHJlZml4ICYmIHZhbHVlID49IDApIHtcbiAgICAgIHZhbHVlID0gYCR7dGhpcy5wcm9wcy5wb3NpdGl2ZVZhbHVlUHJlZml4fSR7dmFsdWV9YFxuICAgIH1cblxuICAgIC8vIEFkZCB1bml0IGlmIHByZXNlbnRcbiAgICBpZiAodGhpcy5wcm9wcy52YWx1ZVVuaXQpIHtcbiAgICAgIHZhbHVlICs9IHRoaXMucHJvcHMudmFsdWVVbml0XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBmb3JlZ3JvdW5kUHJvcHMgPSB7XG4gICAgICBzdHlsZTogdGhpcy5fZ2V0Rm9yZWdyb3VuZFN0eWxlKClcbiAgICB9XG5cbiAgICByZXR1cm4gKDxTbGlkZXIgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9PlxuICAgICAgPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgICBvblN0YXJ0PXt0aGlzLl9vbkJhckRyYWdTdGFydH1cbiAgICAgICAgb25EcmFnPXt0aGlzLl9vbkJhckRyYWd9XG4gICAgICAgIG9uU3RvcD17dGhpcy5fb25CYXJEcmFnU3RvcH1cbiAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9PlxuICAgICAgICA8QmFyQ29udGFpbmVyPlxuICAgICAgICAgIDxCYXIgcmVmPSdmb28nIGlubmVyUmVmPXsoZWwpID0+IHsgdGhpcy5fYmFyID0gZWwgfX0+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8QmFyQmFja2dyb3VuZFNlY3Rpb24gZGFya0JhY2tncm91bmQ9e3RoaXMucHJvcHMuZGFya0JhY2tncm91bmR9IC8+XG4gICAgICAgICAgICAgIDxCYXJGb3JlZ3JvdW5kU2VjdGlvbiB7Li4uZm9yZWdyb3VuZFByb3BzfSAvPlxuICAgICAgICAgICAgICA8RHJhZ2dhYmxlQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgb25TdGFydD17dGhpcy5fb25Lbm9iRHJhZ1N0YXJ0fVxuICAgICAgICAgICAgICAgIG9uRHJhZz17dGhpcy5fb25Lbm9iRHJhZ31cbiAgICAgICAgICAgICAgICBvblN0b3A9e3RoaXMuX29uS25vYkRyYWdTdG9wfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfT5cbiAgICAgICAgICAgICAgICA8S25vYlRvdWNoVGFyZ2V0IHN0eWxlPXt0aGlzLl9nZXRLbm9iU3R5bGUoKX0gY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1zbGlkZXJLbm9iJyA6IHVuZGVmaW5lZCl9PlxuICAgICAgICAgICAgICAgICAgPEtub2IgaWRsZT17dGhpcy5zdGF0ZS52YWx1ZSA9PT0gMH0gLz5cbiAgICAgICAgICAgICAgICA8L0tub2JUb3VjaFRhcmdldD5cbiAgICAgICAgICAgICAgPC9EcmFnZ2FibGVDb21wb25lbnQ+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L0Jhcj5cbiAgICAgICAgPC9CYXJDb250YWluZXI+XG4gICAgICA8L0RyYWdnYWJsZUNvbXBvbmVudD5cbiAgICA8L1NsaWRlcj4pXG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTEVTXG5cbmNvbnN0IFNsaWRlciA9IGFkb25pcy5kaXYoe1xuICB6SW5kZXg6ICcyJyxcbiAgaGVpZ2h0OiAnMTJweCcsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSwge1xuICBkaXNhYmxlZDoge1xuICAgIG9wYWNpdHk6IDAuNFxuICB9XG59KVxuXG5jb25zdCBCYXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogJzUwJScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzJweCcsXG4gIG1hcmdpblRvcDogJy0xcHgnXG59KVxuXG5jb25zdCBCYXJTZWN0aW9uID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnXG59KVxuXG5jb25zdCBCYXJCYWNrZ3JvdW5kU2VjdGlvbiA9IGFkb25pcyhCYXJTZWN0aW9uKSh7XG4gIGJhY2tncm91bmQ6IHRoZW1lID0+IHRoZW1lLnNsaWRlckJhY2tncm91bmRDb2xvclxufSwge1xuICBkYXJrQmFja2dyb3VuZDoge1xuICAgIGJhY2tncm91bmQ6IHRoZW1lID0+IHRoZW1lLmRhcmtTbGlkZXJCYWNrZ3JvdW5kQ29sb3JcbiAgfVxufSlcblxuY29uc3QgQmFyRm9yZWdyb3VuZFNlY3Rpb24gPSBhZG9uaXMoQmFyU2VjdGlvbikoe1xuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS5oaWdobGlnaHRDb2xvcixcbiAgYm94U2hhZG93OiAnMCAxcHggMnB4IDAgcmdiYSgwLDAsMCwwLjY1KSdcbn0pXG5cbmNvbnN0IEtub2IgPSBhZG9uaXMuZGl2KHtcbiAgYmFja2dyb3VuZDogdGhlbWUgPT4gdGhlbWUuc2xpZGVyS25vYkNvbG9yLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgd2lkdGg6ICcxMnB4JyxcbiAgaGVpZ2h0OiAnMTJweCcsXG4gIGJvcmRlclJhZGl1czogJzZweCcsXG4gIGJveFNoYWRvdzogJzAgMXB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC40NSknLFxuICB0cmFuc2l0aW9uOiAnYm9yZGVyLCBiYWNrZ3JvdW5kLCBvcGFjaXR5IDAuMTVzIGVhc2UtaW4tb3V0J1xufSwge1xuICBpZGxlOiB7XG4gICAgYmFja2dyb3VuZDogdGhlbWUgPT4gdGhlbWUuY29udHJvbHNCYWNrZ3JvdW5kQ29sb3IsXG4gICAgYm9yZGVyOiB0aGVtZSA9PiBgMS41cHggc29saWQgJHt0aGVtZS5kaW1tZWRUZXh0Q29sb3J9YCxcbiAgICBvcGFjaXR5OiAwLjg1XG4gIH1cbn0pXG5cbmNvbnN0IEtub2JUb3VjaFRhcmdldCA9IGFkb25pcy5kaXYoe1xuICBwYWRkaW5nOiAnNHB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIG1hcmdpblRvcDogJy05cHgnLFxuICBtYXJnaW5MZWZ0OiAnLTlweCcsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIDAuMTVzIGVhc2UtaW4tb3V0JyxcbiAgJzphY3RpdmUnOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMS4yKSdcbiAgfVxufSlcblxuY29uc3QgQmFyQ29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3NsaWRlci1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBhZG9uaXMgfSBmcm9tICdnbG9iYWxzJ1xuXG5leHBvcnQgY29uc3QgQ29udHJvbEdyb3VwTGlzdCA9IGFkb25pcy5jc3Moe1xuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgbWFyZ2luOiAnMCcsXG4gIHBhZGRpbmc6ICcwJ1xufSlcblxuZXhwb3J0IGNvbnN0IENvbnRyb2xHcm91cCA9IGFkb25pcy5jc3Moe1xuICBwYWRkaW5nOiAnMjVweCcsXG4gIHBhZGRpbmdCb3R0b206ICc1cHgnXG59KVxuXG5leHBvcnQgY29uc3QgQ29udHJvbEdyb3VwVGl0bGUgPSBhZG9uaXMuY3NzKHtcbiAgbWFyZ2luQm90dG9tOiAnMTZweCcsXG4gIGZvbnRTaXplOiAnMTNweCcsXG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnVwcGVyY2FzZVNlbWlCb2xkRm9udEZhbWlseSxcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gIGxldHRlclNwYWNpbmc6ICcxLjJweCcsXG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICBjb2xvcjogdGhlbWUgPT4gdGhlbWUuZGltbWVkVGV4dENvbG9yXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2dyb3VwZWQtY29udHJvbC1zdHlsZXMuanMiLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIEJhc2VDb21wb25lbnQgfSBmcm9tICdnbG9iYWxzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGVja2JveENvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgaWNvblBhdGggPSB0aGlzLl9nZXRBc3NldFBhdGgoJ2VkaXRvci9jb250cm9scy9zaGFyZWQvY2hlY2tib3gucG5nJywgdHJ1ZSlcbiAgICBjb25zdCBhY3RpdmVJY29uUGF0aCA9IHRoaXMuX2dldEFzc2V0UGF0aCgnZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jaGVja2JveC1hY3RpdmUucG5nJywgdHJ1ZSlcblxuICAgIGNvbnN0IHsgc3R5bGVzLCBjbGFzc05hbWUsIGNoZWNrZWQsIG9uQ2xpY2sgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKDxDaGVja2JveFxuICAgICAgc3R5bGVzPXtzdHlsZXN9XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBzdHlsZT17e1xuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtjaGVja2VkID8gYWN0aXZlSWNvblBhdGggOiBpY29uUGF0aH0pYFxuICAgICAgfX1cbiAgICAvPilcbiAgfVxufVxuXG5jb25zdCBDaGVja2JveCA9IGFkb25pcy5kaXYoe1xuICBoZWlnaHQ6ICcxNnB4JyxcbiAgd2lkdGg6ICcxNnB4JyxcbiAgYmFja2dyb3VuZFNpemU6ICdjb250YWluJ1xufSlcbkNoZWNrYm94Q29tcG9uZW50LlJvb3RFbGVtZW50ID0gQ2hlY2tib3hcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvY2hlY2tib3gtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6LyoqXG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgVmFsdWVTZWxlY3Rpb25Db21wb25lbnQgZnJvbSAnLi4vdmFsdWUtc2VsZWN0aW9uLWNvbXBvbmVudCdcbmltcG9ydCBOdW1lcmljSW5wdXRDb21wb25lbnQgZnJvbSAnY29tcG9uZW50cy9zaGFyZWQvZm9ybXMvbnVtZXJpYy1pbnB1dC1jb21wb25lbnQnXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2xvckNvbXBvbmVudElucHV0Q29tcG9uZW50IGV4dGVuZHMgVmFsdWVTZWxlY3Rpb25Db21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gVmFsdWVTZWxlY3Rpb25Db21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIHJpZ2h0IHBhcnQgb2YgdGhpcyBjb250cm9sIChlLmcuIGFuIGlucHV0KVxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlclJpZ2h0UGFydCAoKSB7XG4gICAgbGV0IGNsYXNzTmFtZXMgPSB0ZXN0ID8gWydqcy12YWx1ZVNlbGVjdGlvbi1pbnB1dCddIDogW11cbiAgICBpZiAodGhpcy5wcm9wcy5pbnB1dENsYXNzTmFtZSkge1xuICAgICAgY2xhc3NOYW1lcy5wdXNoKHRoaXMucHJvcHMuaW5wdXRDbGFzc05hbWUpXG4gICAgfVxuXG4gICAgcmV0dXJuICg8SW5wdXRGaWVsZFxuICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9XG4gICAgICBvbkxpdmVDaGFuZ2U9e3RoaXMuX29uSW5wdXRMaXZlQ2hhbmdlfVxuICAgICAgb25DaGFuZ2U9e3RoaXMuX29uSW5wdXRDaGFuZ2V9XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMuam9pbignICcpfVxuICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5faW5wdXQgPSBlbCB9fVxuICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IC8+KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGxldCB7IGlucHV0TGFiZWwsIGNsYXNzTmFtZSwgZGlzYWJsZWQsIHN0eWxlcyB9ID0gdGhpcy5wcm9wc1xuICAgIHJldHVybiAoPENvbG9yQ29tcG9uZW50SW5wdXRcbiAgICAgIHN0eWxlcz17c3R5bGVzfVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9PlxuICAgICAgPFJvdz5cbiAgICAgICAgPENvbHVtbj5cbiAgICAgICAgICB7aW5wdXRMYWJlbCAmJiA8VGl0bGU+e2lucHV0TGFiZWwgfHwgJyAnfTwvVGl0bGU+fVxuICAgICAgICAgIHt0aGlzLl9yZW5kZXJSaWdodFBhcnQoKX1cbiAgICAgICAgPC9Db2x1bW4+XG4gICAgICA8L1Jvdz5cbiAgICA8L0NvbG9yQ29tcG9uZW50SW5wdXQ+KVxuICB9XG59XG5cbmNvbnN0IElucHV0RmllbGQgPSBhZG9uaXMoTnVtZXJpY0lucHV0Q29tcG9uZW50KSh7XG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIHdpZHRoOiAnMjhweCcsXG4gIG1pbldpZHRoOiAnYXV0bydcbn0pXG5cbmNvbnN0IENvbG9yQ29tcG9uZW50SW5wdXQgPSBhZG9uaXMoVmFsdWVTZWxlY3Rpb25Db21wb25lbnQuUm9vdEVsZW1lbnQpKHtcbiAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICB3aWR0aDogJzEwMCUnLFxuICBwYWRkaW5nTGVmdDogJzRweCdcbn0pXG5cbmNvbnN0IFJvdyA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUtcm93J1xufSlcblxuY29uc3QgQ29sdW1uID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHBhZGRpbmdSaWdodDogJzE1cHgnLFxuICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG5cbiAgJzpsYXN0LWNoaWxkJzoge1xuICAgIHBhZGRpbmdSaWdodDogMFxuICB9XG59LCB7XG4gIGJvdHRvbUFsaWduZWQ6IHtcbiAgICB2ZXJ0aWNhbEFsaWduOiAnYm90dG9tJ1xuICB9XG59KVxuXG5jb25zdCBUaXRsZSA9IGFkb25pcy5kaXYoe1xuICBmb250U2l6ZTogJzEzcHgnLFxuICBmb250RmFtaWx5OiB0aGVtZSA9PiB0aGVtZS5yZWd1bGFyRm9udEZhbWlseSxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLmRpbW1lZFRleHRDb2xvcixcbiAgbWFyZ2luQm90dG9tOiAnNnB4JyxcbiAgdGV4dEFsaWduOiAnY2VudGVyJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvY29sb3ItcGlja2VyL2NvbG9yLWNvbXBvbmVudC1pbnB1dC1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCBDb250cm9sc1N0eWxlcywgTW9kYWxNYW5hZ2VyLCBJbnZpc2libGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5jb25zdCB7IFBsYWluQ29udHJvbEl0ZW0sIFBsYWluQ29udHJvbEl0ZW1CYWNrZ3JvdW5kIH0gPSBDb250cm9sc1N0eWxlc1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlicmFyeVVwbG9hZENvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vbldlYmNhbUNsaWNrJyxcbiAgICAgICdfb25Ecm9wWm9uZUNsaWNrJyxcbiAgICAgICdfb25Ecm9wWm9uZURyYWdFbnRlcicsXG4gICAgICAnX29uRHJvcFpvbmVEcmFnTGVhdmUnLFxuICAgICAgJ19vbkRyb3Bab25lRHJhZ092ZXInLFxuICAgICAgJ19vbkRyb3Bab25lRHJvcCcsXG4gICAgICAnX29uSW1hZ2UnXG4gICAgKVxuXG4gICAgdGhpcy5fZHJhZ0NvdW50ZXIgPSAwXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRyb3Bab25lSG92ZXJlZDogZmFsc2VcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgd2ViY2FtIGJ1dHRvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uV2ViY2FtQ2xpY2sgKCkge1xuICAgIHRoaXMucHJvcHMub25XZWJjYW1BY3RpdmF0ZWQgJiZcbiAgICAgIHRoaXMucHJvcHMub25XZWJjYW1BY3RpdmF0ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBoYXMgc2VsZWN0ZWQgYW4gaW1hZ2UgZnJvbSB0aGUgZmlsZSBpbnB1dFxuICAgKiBAcGFyYW0gIHtJbWFnZX0gaW1hZ2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkltYWdlIChpbWFnZSkge1xuICAgIHRoaXMucHJvcHMub25JbWFnZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkltYWdlKGltYWdlKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGRyb3Agem9uZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uRHJvcFpvbmVDbGljayAoKSB7XG4gICAgdGhpcy5yZWZzLnVwbG9hZC5vcGVuKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgZW50ZXJzIHRoZSBkcm9wIHpvbmUgd2l0aCBhIGZpbGVcbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkRyb3Bab25lRHJhZ0VudGVyIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICB0aGlzLl9kcmFnQ291bnRlcisrXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRyb3Bab25lSG92ZXJlZDogdHJ1ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBsZWF2ZXMgdGhlIGRyb3Agem9uZSB3aXRoIGEgZmlsZVxuICAgKiBAcGFyYW0gIHtFdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uRHJvcFpvbmVEcmFnTGVhdmUgKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIHRoaXMuX2RyYWdDb3VudGVyLS1cbiAgICBpZiAodGhpcy5fZHJhZ0NvdW50ZXIgPT09IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBkcm9wWm9uZUhvdmVyZWQ6IGZhbHNlIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBkcmFncyBhbiBpdGVtIG92ZXIgdGhlIGRyb3Agem9uZSAtIGVuYWJsZXMgZHJvcHBpbmdcbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkRyb3Bab25lRHJhZ092ZXIgKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgZHJvcHMgYSBmaWxlIG9uIHRoZSBkcm9wIHpvbmVcbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkRyb3Bab25lRHJvcCAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBlID0gZS5uYXRpdmVFdmVudFxuICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRyb3Bab25lSG92ZXJlZDogZmFsc2UgfSwgKCkgPT4ge1xuICAgICAgaWYgKCEoZS50YXJnZXQgfHwgZS5kYXRhVHJhbnNmZXIpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCBmaWxlcyA9IGUudGFyZ2V0LmZpbGVzIHx8IGUuZGF0YVRyYW5zZmVyLmZpbGVzXG5cbiAgICAgIGlmICghZmlsZXMgfHwgKGZpbGVzLmxlbmd0aCA8PSAwKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKCFmaWxlc1swXS50eXBlLm1hdGNoKC9eaW1hZ2VcXC8vaSkpIHtcbiAgICAgICAgcmV0dXJuIE1vZGFsTWFuYWdlci5pbnN0YW5jZS5kaXNwbGF5RXJyb3IoXG4gICAgICAgICAgdGhpcy5fdCgncGVzZGsuY29tbW9uLnRpdGxlLmVycm9yJyksXG4gICAgICAgICAgdGhpcy5fdCgncGVzZGsuZWRpdG9yLnRleHQuaW52YWxpZEZpbGVUeXBlRXJyb3InLCB7IGZpbGVUeXBlOiBmaWxlc1swXS50eXBlIH0pXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHRoaXMuX2hhbmRsZUZpbGUoZmlsZXNbMF0pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBmaWxlIHVwbG9hZCBmb3IgdGhlIGdpdmVuIGZpbGUgYW5kIHR1cm5zIGl0IGludG8gYW4gaW1hZ2VcbiAgICogQHBhcmFtICB7RmlsZX0gZmlsZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2hhbmRsZUZpbGUgKGZpbGUpIHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgd2luZG93LkZpbGVSZWFkZXIoKVxuICAgIHJlYWRlci5vbmxvYWQgPSAoKCkgPT4ge1xuICAgICAgcmV0dXJuIChlKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBlLnRhcmdldC5yZXN1bHRcbiAgICAgICAgbGV0IGltYWdlID0gbmV3IHdpbmRvdy5JbWFnZSgpXG5cbiAgICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgICAgICB0aGlzLl9vbkltYWdlKGltYWdlKVxuICAgICAgICB9KVxuXG4gICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZSA9PiB7XG4gICAgICAgICAgcmV0dXJuIE1vZGFsTWFuYWdlci5pbnN0YW5jZS5kaXNwbGF5RXJyb3IoXG4gICAgICAgICAgICB0aGlzLl90KCdwZXNkay5jb21tb24udGl0bGUuZXJyb3InKSxcbiAgICAgICAgICAgIHRoaXMuX3QoJ3Blc2RrLmVkaXRvci50ZXh0LmltYWdlTG9hZGluZ0Vycm9yJylcbiAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgICAgIGltYWdlLmNyb3NzT3JpZ2luID0gdGhpcy5jb250ZXh0LmVkaXRvci5nZXRDcm9zc09yaWdpbigpXG4gICAgICAgIGltYWdlLnNyYyA9IGRhdGFcbiAgICAgIH1cbiAgICB9KShmaWxlKVxuICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB3ZWJjYW1CdXR0b25TdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgnJHt0aGlzLl9nZXRBc3NldFBhdGgoJ2VkaXRvci9jb250cm9scy9saWJyYXJ5L3dlYmNhbS5wbmcnLCB0cnVlKX0nKWBcbiAgICB9XG4gICAgcmV0dXJuICg8Q29udGFpbmVyPlxuICAgICAgPEludmlzaWJsZVVwbG9hZENvbXBvbmVudFxuICAgICAgICByZWY9J3VwbG9hZCdcbiAgICAgICAgb25OZXdGaWxlPXt0aGlzLl9vbkltYWdlfSAvPlxuICAgICAgPEJhY2tncm91bmQ+XG4gICAgICAgIDxEcm9wWm9uZVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uRHJvcFpvbmVDbGlja31cbiAgICAgICAgICBvbkRyYWdFbnRlcj17dGhpcy5fb25Ecm9wWm9uZURyYWdFbnRlcn1cbiAgICAgICAgICBvbkRyYWdPdmVyPXt0aGlzLl9vbkRyb3Bab25lRHJhZ092ZXJ9XG4gICAgICAgICAgb25EcmFnTGVhdmU9e3RoaXMuX29uRHJvcFpvbmVEcmFnTGVhdmV9XG4gICAgICAgICAgb25Ecm9wPXt0aGlzLl9vbkRyb3Bab25lRHJvcH1cbiAgICAgICAgICBob3ZlcmVkPXt0aGlzLnN0YXRlLmRyb3Bab25lSG92ZXJlZH0+XG4gICAgICAgICAge3RoaXMuc3RhdGUuZHJvcFpvbmVIb3ZlcmVkXG4gICAgICAgICAgICA/IHRoaXMuX3QoJ3Blc2RrLmxpYnJhcnkuYnV0dG9uLmZpbGVEcm9wWm9uZUhvdmVyZWQnKVxuICAgICAgICAgICAgOiB0aGlzLl90KCdwZXNkay5saWJyYXJ5LmJ1dHRvbi5maWxlRHJvcFpvbmUnKX1cbiAgICAgICAgPC9Ecm9wWm9uZT5cbiAgICAgICAgeyF0aGlzLnN0YXRlLmRyb3Bab25lSG92ZXJlZCAmJiB0aGlzLnByb3BzLndlYmNhbUVuYWJsZWQgJiYgPFdlYmNhbUJ1dHRvblxuICAgICAgICAgIHN0eWxlPXt3ZWJjYW1CdXR0b25TdHlsZX1cbiAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXdlYmNhbUJ1dHRvbicgOiB1bmRlZmluZWQpfVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uV2ViY2FtQ2xpY2t9IC8+fVxuICAgICAgPC9CYWNrZ3JvdW5kPlxuICAgIDwvQ29udGFpbmVyPilcbiAgfVxufVxuXG5jb25zdCBDb250YWluZXIgPSBhZG9uaXMoUGxhaW5Db250cm9sSXRlbSkubGkoe1xuICBtYXJnaW5Cb3R0b206ICcyNHB4JyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICc6aG92ZXIgKic6IHtcbiAgICBvcGFjaXR5OiAnMSdcbiAgfVxufSlcblxuY29uc3QgQmFja2dyb3VuZCA9IGFkb25pcyhQbGFpbkNvbnRyb2xJdGVtQmFja2dyb3VuZCkuZGl2KHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnODBweCcsXG4gIGRpc3BsYXk6ICd0YWJsZScsXG4gIHRhYmxlTGF5b3V0OiAnZml4ZWQnLFxuICBwYWRkaW5nOiAnMCdcbn0pXG5cbmNvbnN0IERyb3Bab25lID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgYm9yZGVyUmlnaHQ6ICcxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KScsXG4gIHBhZGRpbmc6ICcxOHB4JyxcbiAgZm9udEZhbWlseTogdGhlbWUgPT4gdGhlbWUucmVndWxhckZvbnRGYW1pbHksXG4gIGZvbnRTaXplOiAnMTNweCcsXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICBjb2xvcjogdGhlbWUgPT4gdGhlbWUuZGltbWVkVGV4dENvbG9yXG59LCB7XG4gIGhvdmVyZWQ6IHtcbiAgICBiYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA1KScsXG4gICAgYm9yZGVyUmlnaHQ6ICdub25lJ1xuICB9XG59KVxuXG5jb25zdCBXZWJjYW1CdXR0b24gPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICB3aWR0aDogJzQ2cHgnLFxuICBiYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjA2KSBuby1yZXBlYXQgY2VudGVyIGNlbnRlcicsXG4gIGJhY2tncm91bmRTaXplOiAnY29udGFpbidcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9saWJyYXJ5L2xpYnJhcnktdXBsb2FkLWNvbXBvbmVudC5qc3giLCJpbXBvcnQgeyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIGNhbmNlbEFuaW1hdGlvbkZyYW1lIH0gZnJvbSAnLi9hbmltYXRpb24tZnJhbWUuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb21pc2VRdWV1ZSB7XG4gIGNvbnN0cnVjdG9yIChtYXhDb25jdXJyZW5jeSA9IEluZmluaXR5LCBtYXhRdWV1ZUxlbmd0aCA9IEluZmluaXR5LCBtaW5EZWxheSA9IDApIHtcbiAgICB0aGlzLl9xdWV1ZSA9IFtdXG4gICAgdGhpcy5fcGVuZGluZ1Byb21pc2VzID0gMFxuICAgIHRoaXMuX21heENvbmN1cnJlbmN5ID0gbWF4Q29uY3VycmVuY3lcbiAgICB0aGlzLl9tYXhRdWV1ZUxlbmd0aCA9IG1heFF1ZXVlTGVuZ3RoXG4gICAgdGhpcy5fbWluRGVsYXkgPSBtaW5EZWxheVxuICAgIHRoaXMuX3RpY2sgPSB0aGlzLl90aWNrLmJpbmQodGhpcylcbiAgICB0aGlzLl9sYXN0UHJvbWlzZURvbmUgPSBEYXRlLm5vdygpXG4gICAgdGhpcy5fcnVubmluZyA9IHRydWVcbiAgICB0aGlzLl9hbmltYXRpb25GcmFtZVJlcXVlc3QgPSBudWxsXG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5fdGljaylcbiAgfVxuXG4gIF90aWNrICgpIHtcbiAgICBpZiAoIXRoaXMuX3J1bm5pbmcpIHJldHVyblxuXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKVxuICAgIGlmIChub3cgLSB0aGlzLl9sYXN0UHJvbWlzZURvbmUgPiB0aGlzLl9taW5EZWxheSAmJlxuICAgICAgICB0aGlzLl9wZW5kaW5nUHJvbWlzZXMgPCB0aGlzLl9tYXhDb25jdXJyZW5jeSAmJlxuICAgICAgICB0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2RlcXVldWUoKVxuICAgIH1cbiAgICB0aGlzLl9hbmltYXRpb25GcmFtZVJlcXVlc3QgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5fdGljaylcbiAgfVxuXG4gIGFkZCAoZm4pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX3F1ZXVlLmxlbmd0aCA+PSB0aGlzLl9tYXhRdWV1ZUxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcignTWF4IHF1ZXVlIGxlbmd0aCByZWFjaGVkJykpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3F1ZXVlLnB1c2goe1xuICAgICAgICBmbiwgcmVzb2x2ZSwgcmVqZWN0XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBfcHJvbWlzaWZ5IChyZXN1bHQpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KVxuICB9XG5cbiAgX2RlcXVldWUgKCkge1xuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9xdWV1ZS5zaGlmdCgpXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKVxuICAgIHRoaXMuX3BlbmRpbmdQcm9taXNlcysrXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX3Byb21pc2lmeShpdGVtLmZuKCkpXG4gICAgICAgIC50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICB0aGlzLl9sYXN0UHJvbWlzZURvbmUgPSBub3dcbiAgICAgICAgICB0aGlzLl9wZW5kaW5nUHJvbWlzZXMtLVxuICAgICAgICAgIGl0ZW0ucmVzb2x2ZSh2YWx1ZSlcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgIHRoaXMuX2xhc3RQcm9taXNlRG9uZSA9IG5vd1xuICAgICAgICAgIHRoaXMuX3BlbmRpbmdQcm9taXNlcy0tXG4gICAgICAgICAgaXRlbS5yZWplY3QoZSlcbiAgICAgICAgfSlcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLl9sYXN0UHJvbWlzZURvbmUgPSBub3dcbiAgICAgIHRoaXMuX3BlbmRpbmdQcm9taXNlcy0tXG4gICAgICBpdGVtLnJlamVjdChlKVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBkaXNwb3NlICgpIHtcbiAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2VcbiAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWVSZXF1ZXN0KSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZVJlcXVlc3QpXG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9hc3luYy9wcm9taXNlLXF1ZXVlLmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgRGVza3RvcFVJLCB7IEJhc2VDb250cm9scyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmltcG9ydCBGb2N1c0NvbnRyb2xzQ29tcG9uZW50IGZyb20gJy4vZm9jdXMtY29udHJvbHMtY29tcG9uZW50J1xuaW1wb3J0IEZvY3VzQ2FudmFzQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi9mb2N1cy1jYW52YXMtY29udHJvbHMtY29tcG9uZW50J1xuXG4vKipcbiAqIFRoZSBDb250cm9scyBmb3IgdGhlIEZvY3VzIHRvb2wuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkNvbnRyb2xzXG4gKiBAZXh0ZW5kcyBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuQmFzZUNvbnRyb2xzXG4gKi9cbmNsYXNzIEZvY3VzQ29udHJvbHMgZXh0ZW5kcyBCYXNlQ29udHJvbHMge1xuICBzdGF0aWMgY2xpY2tBdFBvc2l0aW9uID0gQmFzZUNvbnRyb2xzLmNsaWNrQXRQb3NpdGlvblxuICBzdGF0aWMgSVRFTVMgPSBbXG4gICAge1xuICAgICAgaWRlbnRpZmllcjogJ25vbmUnLFxuICAgICAgb3BlcmF0aW9uSWRlbnRpZmllcjogbnVsbCxcbiAgICAgIGJhY2tncm91bmRJbWFnZVBhdGg6ICdlZGl0b3IvY29udHJvbHMvZm9jdXMvbm9uZS5wbmcnLFxuICAgICAgYWN0aXZlQmFja2dyb3VuZEltYWdlUGF0aDogJ2VkaXRvci9jb250cm9scy9mb2N1cy9ub25lLWFjdGl2ZS5wbmcnXG4gICAgfSxcbiAgICB7XG4gICAgICBpZGVudGlmaWVyOiAncmFkaWFsJyxcbiAgICAgIG9wZXJhdGlvbklkZW50aWZpZXI6ICdyYWRpYWwtZm9jdXMnLFxuICAgICAgYmFja2dyb3VuZEltYWdlUGF0aDogJ2VkaXRvci9jb250cm9scy9mb2N1cy9yYWRpYWwucG5nJyxcbiAgICAgIGFjdGl2ZUJhY2tncm91bmRJbWFnZVBhdGg6ICdlZGl0b3IvY29udHJvbHMvZm9jdXMvcmFkaWFsLWFjdGl2ZS5wbmcnXG4gICAgfSxcbiAgICB7XG4gICAgICBpZGVudGlmaWVyOiAnbWlycm9yZWQnLFxuICAgICAgb3BlcmF0aW9uSWRlbnRpZmllcjogJ21pcnJvcmVkLWZvY3VzJyxcbiAgICAgIGJhY2tncm91bmRJbWFnZVBhdGg6ICdlZGl0b3IvY29udHJvbHMvZm9jdXMvbWlycm9yZWQucG5nJyxcbiAgICAgIGFjdGl2ZUJhY2tncm91bmRJbWFnZVBhdGg6ICdlZGl0b3IvY29udHJvbHMvZm9jdXMvbWlycm9yZWQtYWN0aXZlLnBuZydcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkZW50aWZpZXI6ICdsaW5lYXInLFxuICAgICAgb3BlcmF0aW9uSWRlbnRpZmllcjogJ2xpbmVhci1mb2N1cycsXG4gICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL2ZvY3VzL2xpbmVhci5wbmcnLFxuICAgICAgYWN0aXZlQmFja2dyb3VuZEltYWdlUGF0aDogJ2VkaXRvci9jb250cm9scy9mb2N1cy9saW5lYXItYWN0aXZlLnBuZydcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkZW50aWZpZXI6ICdnYXVzc2lhbicsXG4gICAgICBvcGVyYXRpb25JZGVudGlmaWVyOiAnYmx1cicsXG4gICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL2ZvY3VzL2dhdXNzaWFuLnBuZycsXG4gICAgICBhY3RpdmVCYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL2ZvY3VzL2dhdXNzaWFuLWFjdGl2ZS5wbmcnXG4gICAgfVxuICBdXG4gIHN0YXRpYyBGT0NVU19PUEVSQVRJT05TID0gRm9jdXNDb250cm9scy5JVEVNUy5tYXAoaSA9PiBpLm9wZXJhdGlvbklkZW50aWZpZXIpLmZpbHRlcihpID0+IGkpXG5cbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWRlbnRpZmllciA9ICdmb2N1cydcblxuICAvKipcbiAgICogVGhlIGNvbnRyb2xzIGNvbXBvbmVudCBmb3IgdGhlc2UgY29udHJvbHNcbiAgICogQHR5cGUge1JlYWN0LkNvbXBvbmVudH1cbiAgICovXG4gIHN0YXRpYyBjb250cm9sc0NvbXBvbmVudCA9IEZvY3VzQ29udHJvbHNDb21wb25lbnRcblxuICAvKipcbiAgICogVGhlIGNhbnZhcyBjb21wb25lbnQgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtSZWFjdC5Db21wb25lbnR9XG4gICAqL1xuICBzdGF0aWMgY2FudmFzQ29udHJvbHNDb21wb25lbnQgPSBGb2N1c0NhbnZhc0NvbnRyb2xzQ29tcG9uZW50XG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHBhdGggb2YgdGhpcyBjb250cm9sXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWNvblBhdGggPSAnZWRpdG9yL2NvbnRyb2xzL2ZvY3VzL2ljb24ucG5nJ1xuXG4gIC8qKlxuICAgKiBUaGUgYWN0aXZlIGljb24gcGF0aCBvZiB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBhY3RpdmVJY29uUGF0aCA9ICdlZGl0b3IvY29udHJvbHMvZm9jdXMvaWNvbi1hY3RpdmUucG5nJ1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBvcHRpb25zIGZvciB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByb3BlcnR5IHtTdHJpbmdbXX0gW2F2YWlsYWJsZU1vZGVzID0gbnVsbF1cbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBhdmFpbGFibGVNb2RlczogbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBvcGVyYXRpb25zIHJlcXVpcmVkIGZvciB0aGlzIGNvbnRyb2wgdG8gd29yayBwcm9wZXJseVxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgcmVxdWlyZWRPcGVyYXRpb25zID0gRm9jdXNDb250cm9scy5JVEVNUy5tYXAoaSA9PiBpLm9wZXJhdGlvbklkZW50aWZpZXIpLmZpbHRlcihpID0+IGkpXG5cbiAgLyoqXG4gICAqIE9wZXJhdGlvbnMgd2hpY2ggd2lsbCB0cmlnZ2VyIFVJIHVwZGF0ZXMgb24gdGhpcyBjb250cm9scy5cbiAgICogQHR5cGUge1N0cmluZ1tdfVxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgdXBkYXRhYmxlT3BlcmF0aW9ucyA9IEZvY3VzQ29udHJvbHMuSVRFTVMubWFwKGkgPT4gaS5vcGVyYXRpb25JZGVudGlmaWVyKS5maWx0ZXIoaSA9PiBpKVxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgZWRpdG9yIHdpbGwgc3dpdGNoIHRvIHRoZSBkZWZhdWx0IGNvbnRyb2xzIHdoZW4gYW55IG9mIHRoZSB1cGRhdGFibGVPcGVyYXRpb25zIGlzIHJlbW92ZWQuXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgc3dpdGNoVG9EZWZhdWx0Q29udHJvbHNPblJlbW92YWwgPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBNYXBzIHRoZSBvcGVyYXRpb25zIHN0YXRlIHRvIGEgc2hhcmVkIHN0YXRlIG9iamVjdFxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcGVyYXRpb25zXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2luaXRpYWw9ZmFsc2VdXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgbWFwT3BlcmF0aW9uc1RvU2hhcmVkU3RhdGUgKG9wZXJhdGlvbnMsIGluaXRpYWwgPSBmYWxzZSwgcHJldmlvdXNTdGF0ZSA9IHt9KSB7XG4gICAgLy8gR2V0IGEgZm9jdXMgb3BlcmF0aW9uLCBpZiBleGlzdGVudFxuICAgIGNvbnN0IG9wZXJhdGlvbiA9IEZvY3VzQ29udHJvbHMuRk9DVVNfT1BFUkFUSU9OU1xuICAgICAgLm1hcCgoaWRlbnRpZmllcikgPT4gb3BlcmF0aW9ucy5nZXQoaWRlbnRpZmllcikpXG4gICAgICAucmVkdWNlKChwcmV2LCBjdXIpID0+XG4gICAgICAgIHByZXYgfHwgY3VyXG4gICAgICApXG5cbiAgICBjb25zdCBpbnB1dERpbWVuc2lvbnMgPSBvcGVyYXRpb24gJiYgb3BlcmF0aW9uLmdldElucHV0RGltZW5zaW9ucyhmYWxzZSlcbiAgICBjb25zdCBvcGVyYXRpb25JZGVudGlmaWVyID0gb3BlcmF0aW9uID8gb3BlcmF0aW9uLmNvbnN0cnVjdG9yLmlkZW50aWZpZXIgOiBudWxsXG4gICAgY29uc3Qgc2VsZWN0ZWRGb2N1c0l0ZW0gPSBGb2N1c0NvbnRyb2xzLmdldEl0ZW1CeU9wZXJhdGlvbklkZW50aWZpZXIob3BlcmF0aW9uSWRlbnRpZmllcilcbiAgICBjb25zdCBzZWxlY3RlZEZvY3VzID0gc2VsZWN0ZWRGb2N1c0l0ZW0gPyBzZWxlY3RlZEZvY3VzSXRlbS5pZGVudGlmaWVyIDogJ25vbmUnXG5cbiAgICByZXR1cm4ge1xuICAgICAgLy8gcHJvcHNcbiAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uIHx8IG51bGwsXG4gICAgICBpbnB1dERpbWVuc2lvbnMsXG4gICAgICBvcGVyYXRpb25JZGVudGlmaWVyLFxuICAgICAgc2VsZWN0ZWRGb2N1cyxcbiAgICAgIHNlbGVjdGVkRm9jdXNJdGVtLFxuICAgICAgYmx1clJhZGl1czogb3BlcmF0aW9uID8gb3BlcmF0aW9uLmdldEJsdXJSYWRpdXMoKSA6IDAsXG5cbiAgICAgIGxpbmVhckZvY3VzOiBvcGVyYXRpb25JZGVudGlmaWVyID09PSAnbGluZWFyLWZvY3VzJyA/IHtcbiAgICAgICAgY29udHJvbFBvaW50MTogb3BlcmF0aW9uLmdldENvbnRyb2xQb2ludDEoKSxcbiAgICAgICAgY29udHJvbFBvaW50Mjogb3BlcmF0aW9uLmdldENvbnRyb2xQb2ludDIoKVxuICAgICAgfSA6IG51bGwsXG5cbiAgICAgIG1pcnJvcmVkRm9jdXM6IG9wZXJhdGlvbklkZW50aWZpZXIgPT09ICdtaXJyb3JlZC1mb2N1cycgPyB7XG4gICAgICAgIHN0YXJ0OiBvcGVyYXRpb24uZ2V0U3RhcnQoKSxcbiAgICAgICAgZW5kOiBvcGVyYXRpb24uZ2V0RW5kKCksXG4gICAgICAgIHNpemU6IG9wZXJhdGlvbi5nZXRTaXplKCksXG4gICAgICAgIGdyYWRpZW50U2l6ZTogb3BlcmF0aW9uLmdldEdyYWRpZW50U2l6ZSgpXG4gICAgICB9IDogbnVsbCxcblxuICAgICAgcmFkaWFsRm9jdXM6IG9wZXJhdGlvbklkZW50aWZpZXIgPT09ICdyYWRpYWwtZm9jdXMnID8ge1xuICAgICAgICBwb3NpdGlvbjogb3BlcmF0aW9uLmdldFBvc2l0aW9uKCksXG4gICAgICAgIHJhZGl1czogb3BlcmF0aW9uLmdldFJhZGl1cygpLFxuICAgICAgICBncmFkaWVudFJhZGl1czogb3BlcmF0aW9uLmdldEdyYWRpZW50UmFkaXVzKClcbiAgICAgIH0gOiBudWxsLFxuXG4gICAgICAvLyBhY3Rpb25zXG4gICAgICBzZXRTZWxlY3RlZEZvY3VzOiBmb2N1c0l0ZW0gPT4ge1xuICAgICAgICBpZiAoZm9jdXNJdGVtLm9wZXJhdGlvbklkZW50aWZpZXIgPT09IG9wZXJhdGlvbklkZW50aWZpZXIpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcGVyYXRpb25JZGVudGlmaWVyKSB7XG4gICAgICAgICAgb3BlcmF0aW9ucy5yZW1vdmUob3BlcmF0aW9uSWRlbnRpZmllcilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb2N1c0l0ZW0ub3BlcmF0aW9uSWRlbnRpZmllcikge1xuICAgICAgICAgIG9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoZm9jdXNJdGVtLm9wZXJhdGlvbklkZW50aWZpZXIpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZXRCbHVyUmFkaXVzOiB2YWx1ZSA9PiB7IG9wZXJhdGlvbiAmJiBvcGVyYXRpb24uc2V0Qmx1clJhZGl1cyh2YWx1ZSkgfSxcbiAgICAgIHNldENvbnRyb2xQb2ludDE6IHZhbHVlID0+IHsgKG9wZXJhdGlvbklkZW50aWZpZXIgPT09ICdsaW5lYXItZm9jdXMnKSAmJiBvcGVyYXRpb24uc2V0Q29udHJvbFBvaW50MSh2YWx1ZSkgfSxcbiAgICAgIHNldENvbnRyb2xQb2ludDI6IHZhbHVlID0+IHsgKG9wZXJhdGlvbklkZW50aWZpZXIgPT09ICdsaW5lYXItZm9jdXMnKSAmJiBvcGVyYXRpb24uc2V0Q29udHJvbFBvaW50Mih2YWx1ZSkgfSxcbiAgICAgIHNldFN0YXJ0OiB2YWx1ZSA9PiB7IChvcGVyYXRpb25JZGVudGlmaWVyID09PSAnbWlycm9yZWQtZm9jdXMnKSAmJiBvcGVyYXRpb24uc2V0U3RhcnQodmFsdWUpIH0sXG4gICAgICBzZXRFbmQ6IHZhbHVlID0+IHsgKG9wZXJhdGlvbklkZW50aWZpZXIgPT09ICdtaXJyb3JlZC1mb2N1cycpICYmIG9wZXJhdGlvbi5zZXRFbmQodmFsdWUpIH0sXG4gICAgICBzZXRQb3NpdGlvbjogdmFsdWUgPT4geyAob3BlcmF0aW9uSWRlbnRpZmllciA9PT0gJ3JhZGlhbC1mb2N1cycpICYmIG9wZXJhdGlvbi5zZXRQb3NpdGlvbih2YWx1ZSkgfSxcbiAgICAgIHNldFJhZGl1czogdmFsdWUgPT4geyAob3BlcmF0aW9uSWRlbnRpZmllciA9PT0gJ3JhZGlhbC1mb2N1cycpICYmIG9wZXJhdGlvbi5zZXRSYWRpdXModmFsdWUpIH0sXG5cbiAgICAgIHNldE9wZXJhdGlvbk9wdGlvbnM6IG9wdHMgPT4geyBvcGVyYXRpb24gJiYgb3BlcmF0aW9uLnNldChvcHRzKSB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIElzIGNhbGxlZCB3aGVuIGEgY29udHJvbCBpcyBlbnRlcmVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25FbnRlciAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuXG4gICAgZWRpdG9yLnpvb20uYXV0byh0cnVlLCBmYWxzZSwgKCkgPT4ge1xuICAgICAgLy8gRGlzYWJsZSB6b29tIGFuZCBkcmFnIHdoaWxlIHdlJ3JlIHRyYW5zZm9ybWluZ1xuICAgICAgZWRpdG9yLmZlYXR1cmVzLmRpc2FibGUoJ3pvb20nLCAnZHJhZycpXG4gICAgfSwgZmFsc2UpXG4gIH1cblxuICAvKipcbiAgICogSXMgY2FsbGVkIHdoZW4gYSBjb250cm9sIGlzIGxlZnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkxlYXZlICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgZWRpdG9yLmZlYXR1cmVzLmVuYWJsZSgnem9vbScsICdkcmFnJylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhc3NldHMgdGhhdCBzaG91bGQgYmUgcHJlbG9hZGVkIGZvciB0aGlzIGNvbnRyb2xcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkVkaXRvcn0gZWRpdG9yXG4gICAqIEByZXR1cm4ge1N0cmluZ1tdfVxuICAgKi9cbiAgc3RhdGljIGdldFByZWxvYWRBc3NldHMgKGVkaXRvcikge1xuICAgIGxldCBhc3NldHMgPSBbXVxuICAgIHRoaXMuSVRFTVMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGFzc2V0cy5wdXNoKGl0ZW0uYmFja2dyb3VuZEltYWdlUGF0aClcbiAgICAgIGFzc2V0cy5wdXNoKGl0ZW0uYWN0aXZlQmFja2dyb3VuZEltYWdlUGF0aClcbiAgICB9KVxuICAgIHJldHVybiBhc3NldHNcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBjb250cm9sIGlzIGVuYWJsZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0VuYWJsZWQgKGVkaXRvcikge1xuICAgIHJldHVybiBlZGl0b3IuaXNUb29sQWxsb3dlZCgnZm9jdXMnKSAmJiBlZGl0b3IuaXNUb29sRW5hYmxlZCgnZm9jdXMnKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGZvY3VzIGl0ZW0gYnkgaXQncyBpZGVudGlmaWVyXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG4gICAqL1xuICBzdGF0aWMgZ2V0SXRlbUJ5SWRlbnRpZmllciAoaWRlbnRpZmllcikge1xuICAgIHJldHVybiBGb2N1c0NvbnRyb2xzLklURU1TLmZpbHRlcihlID0+IGUuaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcilbMF1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBmb2N1cyBpdGVtIGJ5IGl0J3MgaWRlbnRpZmllclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllclxuICAgKi9cbiAgc3RhdGljIGdldEl0ZW1CeU9wZXJhdGlvbklkZW50aWZpZXIgKGlkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gRm9jdXNDb250cm9scy5JVEVNUy5maWx0ZXIoZSA9PiBlLm9wZXJhdGlvbklkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpWzBdXG4gIH1cbn1cblxuRGVza3RvcFVJLkNvbnRyb2xzLkZvY3VzQ29udHJvbHMgPSBGb2N1c0NvbnRyb2xzXG5cbmV4cG9ydCBkZWZhdWx0IEZvY3VzQ29udHJvbHNcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2ZvY3VzL2luZGV4LmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazovKipcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBTaGFyZWRTdGF0ZUNvbXBvbmVudCwgQ29udHJvbHNTdHlsZXMsIFN0aWNrZXJNYW5hZ2VyIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuXG5jb25zdCB7IFBsYWluQ29udHJvbEl0ZW0gfSA9IENvbnRyb2xzU3R5bGVzXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RpY2tlckxpc3RDb21wb25lbnQgZXh0ZW5kcyBTaGFyZWRTdGF0ZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBTaGFyZWRTdGF0ZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBhIHN0aWNrZXJcbiAgICogQHBhcmFtICB7T2JqZWN0fSBzdGlja2VyXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25TdGlja2VyQ2xpY2sgKHN0aWNrZXIpIHtcbiAgICB0aGlzLnByb3BzLm9uU3RpY2tlckNsaWNrICYmXG4gICAgICB0aGlzLnByb3BzLm9uU3RpY2tlckNsaWNrKHN0aWNrZXIpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyBhbiBhcmJpdHJheSBudW1iZXIgb2Ygc3RpY2tlciBpdGVtcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJMaXN0SXRlbXMgKCkge1xuICAgIGNvbnN0IHsgc3RpY2tlcnMgfSA9IHRoaXMucHJvcHNcblxuICAgIGxldCBjdXJyZW50U3RpY2tlcklkZW50aWZpZXJcbiAgICBjb25zdCBzZWxlY3RlZFNwcml0ZSA9IHRoaXMuc2hhcmVkU3RhdGUuc2VsZWN0ZWRTcHJpdGVcbiAgICBpZiAoc2VsZWN0ZWRTcHJpdGUpIHtcbiAgICAgIGN1cnJlbnRTdGlja2VySWRlbnRpZmllciA9IHNlbGVjdGVkU3ByaXRlLmdldElkZW50aWZpZXIoKVxuICAgIH1cblxuICAgIHJldHVybiBzdGlja2Vycy5tYXAoc3RpY2tlciA9PiB7XG4gICAgICBjb25zdCB1cmwgPSBTdGlja2VyTWFuYWdlci5nZXRVUkxGb3JTdGlja2VyKHN0aWNrZXIsICd0aHVtYicpXG4gICAgICBjb25zdCB0aHVtYlVSTCA9IHRoaXMuX2dldEFzc2V0UGF0aCh1cmwpXG4gICAgICBjb25zdCBjcm9zc09yaWdpbiA9IHRoaXMuY29udGV4dC5lZGl0b3IuZ2V0Q3Jvc3NPcmlnaW4oKVxuXG4gICAgICByZXR1cm4gKDxTdGlja2VyTGlzdEl0ZW1cbiAgICAgICAgc2VsZWN0ZWQ9e3N0aWNrZXIuaWRlbnRpZmllciA9PT0gY3VycmVudFN0aWNrZXJJZGVudGlmaWVyfVxuICAgICAgICBrZXk9e3N0aWNrZXIuaWRlbnRpZmllcn1cbiAgICAgICAgb25DbGljaz17dGhpcy5fb25TdGlja2VyQ2xpY2suYmluZCh0aGlzLCBzdGlja2VyKX1cbiAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1zdGlja2VyJyA6IHVuZGVmaW5lZCl9XG4gICAgICAgIHRocmVlQ29sdW1ucz5cbiAgICAgICAgPFN0aWNrZXJJbWFnZSBjcm9zc09yaWdpbj17Y3Jvc3NPcmlnaW59IHNyYz17dGh1bWJVUkx9IC8+XG4gICAgICA8L1N0aWNrZXJMaXN0SXRlbT4pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKDxTdGlja2VyTGlzdD5cbiAgICAgIHt0aGlzLl9yZW5kZXJMaXN0SXRlbXMoKX1cbiAgICA8L1N0aWNrZXJMaXN0PilcbiAgfVxufVxuXG5jb25zdCBTdGlja2VyTGlzdCA9IGFkb25pcy51bCh7XG4gIGxpc3RTdHlsZTogJ25vbmUnLFxuICBtYXJnaW46IDAsXG4gIHBhZGRpbmc6IDAsXG4gIHBhZGRpbmdUb3A6ICcyNXB4JyxcbiAgcGFkZGluZ0xlZnQ6ICcxN3B4JyxcbiAgdGV4dEFsaWduOiAnbGVmdCdcbn0pXG5cbmNvbnN0IFN0aWNrZXJMaXN0SXRlbSA9IGFkb25pcyhQbGFpbkNvbnRyb2xJdGVtKS5saSh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG5cbiAgJzpsYXN0LWNoaWxkJzoge1xuICAgIG1hcmdpbkJvdHRvbTogJzI1cHgnXG4gIH1cbn0pXG5cbmNvbnN0IFN0aWNrZXJJbWFnZSA9IGFkb25pcy5pbWcoe1xuICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIHBhZGRpbmc6ICc1cHgnXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvc3RpY2tlci9zdGlja2VyLWxpc3QtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qIVxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmNvbnN0IFBob3RvRWRpdG9yU0RLID0gcmVxdWlyZSgncGhvdG9lZGl0b3JzZGsnKVxuY29uc3QgRGVza3RvcFVJID0gcmVxdWlyZSgnLi9jb3JlL2luZGV4JylcbnJlcXVpcmUoJy4vY29udHJvbHMvaW5kZXgnKVxuUGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJID0gRGVza3RvcFVJXG5tb2R1bGUuZXhwb3J0cyA9IERlc2t0b3BVSVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vaW5kZXguanMiLCIvKiFcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuaW1wb3J0IHtcbiAgU0RLLCBTREtVdGlscywgRXZlbnRFbWl0dGVyLCBDb25zdGFudHMsIFV0aWxzLCBSZW5kZXJUeXBlLCBCYXNlQ29tcG9uZW50LFxuICBSZWFjdCwgUmVhY3RET00sIFNoYXJlZFN0YXRlLCBMb2csIEJhc2U2NCwgYWRvbmlzXG59IGZyb20gJ2dsb2JhbHMnXG5cbmltcG9ydCBBcHBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnRzL2FwcC1jb21wb25lbnQnXG5pbXBvcnQgU2Nyb2xsYmFyQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50cy9zY3JvbGxiYXItY29tcG9uZW50J1xuaW1wb3J0IEpTT05Mb2FkZXIgZnJvbSAnc2hhcmVkL2xvYWRlcnMvanNvbi1sb2FkZXInXG5pbXBvcnQgU2xpZGVyQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50cy9zbGlkZXItY29tcG9uZW50J1xuaW1wb3J0IHsgRGVmYXVsdFRoZW1lIH0gZnJvbSAnLi90aGVtZXMnXG5pbXBvcnQgQ1NTUmVzZXQgZnJvbSAnLi9saWIvY3NzLXJlc2V0J1xuaW1wb3J0IEdsb2JhbENTUyBmcm9tICcuL2xpYi9nbG9iYWwtY3NzJ1xuaW1wb3J0IEZvbnRMb2FkZXIgZnJvbSAnLi9saWIvZm9udC1sb2FkZXInXG5pbXBvcnQgUHJlbG9hZGVyIGZyb20gJy4vbGliL3ByZWxvYWRlcidcbmltcG9ydCAqIGFzIEV4cG9ydHMgZnJvbSAnLi9leHBvcnRzJ1xuXG5jb25zdCBiZCA9IChzdHIpID0+IFNES1V0aWxzLmJ5dGVBcnJheVRvU3RyaW5nKEJhc2U2NC5kZWNvZGUoc3RyKSlcbkNTU1Jlc2V0KGFkb25pcywgJy5wZXNkay1kZXNrdG9wLWVkaXRvcicpXG5HbG9iYWxDU1MoYWRvbmlzKVxuXG4vKipcbiAqIFRoZSBEZXNrdG9wIFVJXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBob3RvRWRpdG9yU0RLLkV2ZW50RW1pdHRlclxuICogQG1lbWJlcm9mIFBob3RvRWRpdG9yU0RLLlVJXG4gKi9cbmNsYXNzIERlc2t0b3BVSSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIFVJIGluc3RhbmNlXG4gICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcGFyYW0gIHtTdHJpbmd9IG9wdGlvbnMubGljZW5zZSAtIFlvdXIgbGljZW5zZVxuICAgKiBAcGFyYW0gIHtET01FbGVtZW50fSBvcHRpb25zLmNvbnRhaW5lciAtIFRoZSBjb250YWluZXIgdGhhdCB0aGUgVUkgc2hvdWxkIGJlIHJlbmRlcmVkIHRvXG4gICAqIEBwYXJhbSAge1N0cmluZ30gW29wdGlvbnMubGFuZ3VhZ2UgPSAnZW4nXSAtIEN1cnJlbnRseSBgZW5gIGFuZCBgZGVgIGFyZSBzdXBwb3J0ZWRcbiAgICogQHBhcmFtICB7U3RyaW5nfSBbb3B0aW9ucy5sb2dMZXZlbF0gLSBgdHJhY2VgLCBgaW5mb2AsIGB3YXJuYCwgYGVycm9yYCBvciBgbG9nYFxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0aW9ucy5yZXNwb25zaXZlID0gZmFsc2VdIC0gU2hvdWxkIHRoZSBlZGl0b3IgcmUtcmVuZGVyIG9uIHdpbmRvdyByZXNpemU/XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMucHJlbG9hZGVyID0gdHJ1ZV0gLSBFbmFibGVzIG9yIGRpc2FibGVzIHRoZSBwcmVsb2FkZXJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBbb3B0aW9ucy5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnXSAtICdhbm9ueW1vdXMnLCAndXNlLWNyZWRlbnRpYWxzJyBvciAnbm9uZSdcbiAgICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9ucy5lZGl0b3JdXG4gICAqIEBwYXJhbSAge0ltYWdlfSBbb3B0aW9ucy5lZGl0b3IuaW1hZ2VdIC0gVGhlIGltYWdlIHRoYXQgdGhlIHVzZXIgY2FuIGVkaXRcbiAgICogQHBhcmFtICB7SW1hZ2V9IFtvcHRpb25zLmVkaXRvci53YXRlcm1hcmtJbWFnZV0gLSBBbiBpbWFnZSB0aGF0IHNob3VsZCBiZSBwbGFjZWQgb24gdG9wIGFzIGEgd2F0ZXJtYXJrXG4gICAqIEBwYXJhbSAge1N0cmluZ30gW29wdGlvbnMuZWRpdG9yLnByZWZlcnJlZFJlbmRlcmVyID0gJ3dlYmdsJ10gLSBgd2ViZ2xgIG9yIGBjYW52YXNgXG4gICAqIEBwYXJhbSAge051bWJlcn0gW29wdGlvbnMuZWRpdG9yLnBpeGVsUmF0aW8gPSAxXSAtIElmIG5vbmUgaXMgZ2l2ZW4sIFBob3RvRWRpdG9yU0RLIGF1dG9tYXRpY2FsbHlcbiAgICogICBkZXRlY3RzIHRoZSBjdXJyZW50IGRldmljZSdzIHBpeGVsIHJhdGlvXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IFtvcHRpb25zLmVkaXRvci5lbmFibGVEcmFnID0gdHJ1ZV0gLSBTaG91bGQgZHJhZ2dpbmcgdGhlIGNhbnZhcyBiZSBlbmFibGVkP1xuICAgKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0aW9ucy5lZGl0b3IuZW5hYmxlWm9vbSA9IHRydWVdIC0gU2hvdWxkIHpvb21pbmcgYmUgZW5hYmxlZD9cbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gW29wdGlvbnMuZWRpdG9yLnNtb290aERvd25zY2FsaW5nID0gZmFsc2VdIC0gVG9nZ2xlcyBzbW9vdGggZG93bnNjYWxpbmdcbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gW29wdGlvbnMuZWRpdG9yLnNtb290aFVwc2NhbGluZyA9IGZhbHNlXSAtIFRvZ2dsZXMgc21vb3RoIHVwc2NhbGluZ1xuICAgKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0aW9ucy5lZGl0b3IuZGlzcGxheVJlc2l6ZU1lc3NhZ2UgPSB0cnVlXSAtIFNob3VsZCBhIG1lc3NhZ2UgYmUgZGlzcGxheWVkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIGltYWdlIGhhcyBiZWVuIHNjYWxlZCBkb3duXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBwZXJmb3JtYW5jZT9cbiAgICogQHBhcmFtICB7KFN0cmluZ1tdfEFycmF5W10pfSBbb3B0aW9ucy5lZGl0b3IuY29udHJvbHNPcmRlcl0gLSBUaGUgb3JkZXIgaW4gd2hpY2ggdGhlIGNvbnRyb2xzIGFyZSBkaXNwbGF5ZWQuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF2YWlsYWJsZSBhcmUgYHRyYW5zZm9ybWAsIGBmaWx0ZXJgLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgYWRqdXN0bWVudHNgLCBgdGV4dGAsIGBzdGlja2VyYCwgYGJydXNoYCwgYGZvY3VzYCxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGZyYW1lYC4gQ2FuIGJlIGdyb3VwZWQgaW4gYXJyYXlzIHdoaWNoIHdpbGwgYmVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheWVkIHdpdGggc2VwYXJhdG9ycy5cbiAgICogQHBhcmFtICB7U3RyaW5nW119IFtvcHRpb25zLmVkaXRvci5vcGVyYXRpb25zT3JkZXJdIC0gVGhlIG9yZGVyIGluIHdoaWNoIG9wZXJhdGlvbnMgYXJlIGFkZGVkIHRvXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzdGFjay4gQ2hhbmdpbmcgdGhpcyBtYXkgYWZmZWN0IHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZS5cbiAgICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9ucy5lZGl0b3IuY29udHJvbHNPcHRpb25zXSAtIE9wdGlvbnMgdGhhdCBhcmUgcGFzc2VkIHRvIHNwZWNpZmljIGNvbnRyb2xzLCB3aXRoIHRoZSBjb250cm9scyBpZGVudGlmaWVycyBhcyBrZXlzLiBTZWVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkb2N1bWVudGF0aW9uIGZvciBlYWNoIGNvbnRyb2wgdG8gbGVhcm4gbW9yZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvdXQgYXZhaWxhYmxlIHZhbHVlcy5cbiAgICogQHBhcmFtIHtPYmplY3RbXX0gW29wdGlvbnMuZWRpdG9yLmZvcmNlQ3JvcF0gLSBJZiB0cnVlLCB0aGUgZWRpdG9yIHdpbGwgbGF1Y2ggdG8gdGhlIHRyYW5zZm9ybSB0b29sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGNyb3BwaW5nLCBiZWZvcmUgYW55IG90aGVyIHRvb2wgaXMgYWxsb3dlZC5cbiAgICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9ucy5lZGl0b3IubWF4TWVnYVBpeGVsc10gLSBNYXhpbXVtIGFtb3VudCBvZiBtZWdhcGl4ZWxzIHBlciBkZXZpY2UgdHlwZVxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IFtvcHRpb25zLmVkaXRvci5tYXhNZWdhUGl4ZWxzLmRlc2t0b3AgPSAxMF1cbiAgICogQHBhcmFtICB7TnVtYmVyfSBbb3B0aW9ucy5lZGl0b3IubWF4TWVnYVBpeGVscy5tb2JpbGUgPSA1XVxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0aW9ucy5lZGl0b3IudHJhbnNwYXJlbnQgPSB0cnVlXVxuICAgKiBAcGFyYW0gIHtBcnJheXxTdHJpbmd8UGhvdG9FZGl0b3JTREsuQ29sb3J9IFtvcHRpb25zLmVkaXRvci5jbGVhckNvbG9yID0gWzAsIDAsIDAsIDBdXVxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IFtvcHRpb25zLmVkaXRvci5leHBvcnRdXG4gICAqIEBwYXJhbSAge1N0cmluZ30gW29wdGlvbnMuZWRpdG9yLmV4cG9ydC5mb3JtYXQgPSAnaW1hZ2UvcG5nJ10gLSBUaGUgZXhwb3J0IGZvcm1hdC4gQXZhaWxhYmxlIGZvcm1hdHNcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuUmVuZGVyVHlwZX0gW29wdGlvbnMuZWRpdG9yLmV4cG9ydC50eXBlXSAtIFRoZSBleHBvcnQgdHlwZSAoaW1hZ2Ugb3IgZGF0YSB1cmwpXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IFtvcHRpb25zLmVkaXRvci5leHBvcnQuZG93bmxvYWRdIC0gU2hvdWxkIHRoZSByZXN1bHQgYmUgcHJlc2VudGVkIGFzIGEgZG93bmxvYWQ/XG4gICAqIEBwYXJhbSAge1N0cmluZ30gW29wdGlvbnMuZWRpdG9yLmV4cG9ydC5maWxlQmFzZW5hbWUgPSAncGhvdG9lZGl0b3JzZGstZXhwb3J0J10gLSBUaGUgYmFzZW5hbWVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZXhwb3J0ZWQgZmlsZSAoZmlsZSBleHRlbnNpb24gd2lsbFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGFkZGVkIGF1dG9tYXRpY2FsbHkpXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5lZGl0b3IuZXhwb3J0LnF1YWxpdHkgPSAwLjhdIC0gVGhlIGV4cG9ydCBxdWFsaXR5ICgwLi4uMSwgb25seSBzdXBwb3J0ZWRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgSlBHIGltYWdlcylcbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9ucy5hc3NldHNdXG4gICAqIEBwYXJhbSAge1N0cmluZ30gW29wdGlvbnMuYXNzZXRzLmJhc2VVcmwgPSAnL2Fzc2V0cyddIC0gUGF0aCB0aGF0IGlzIHByZXBlbmRlZCB0byBhbGwgYXNzZXQgcGF0aHNcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IFtvcHRpb25zLmFzc2V0cy5yZXNvbHZlcl0gLSBBIGZ1bmN0aW9uIHJlc29sdmluZyBhIHBhdGggdG8gYW5vdGhlciBwYXRoLlxuICAgKi9cbiAgY29uc3RydWN0b3IgKG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKClcblxuICAgIHRoaXMuX21lZGlhdG9yID0gbmV3IEV2ZW50RW1pdHRlcigpXG4gICAgdGhpcy5fZm9udExvYWRlciA9IG5ldyBGb250TG9hZGVyKHRoaXMpXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLl9pbml0T3B0aW9ucygpXG4gICAgdGhpcy5faW5pdExhbmd1YWdlKClcbiAgICB0aGlzLl9pbml0RXZlbnRzKClcbiAgICB0aGlzLl9kaXNwb3NlZCA9IGZhbHNlXG5cbiAgICB0aGlzLl9wcmVsb2FkZXIgPSBuZXcgUHJlbG9hZGVyKHRoaXMsIHRoaXMuX29wdGlvbnMsIHRoaXMuX21lZGlhdG9yKVxuXG4gICAgdGhpcy5fZ2xvYmFsU3RhdGUgPSBuZXcgU2hhcmVkU3RhdGUoKVxuXG4gICAgdGhpcy5faXNSZWFkeSA9IGZhbHNlXG5cbiAgICB0aGlzLl9tZWRpYXRvci5vbmNlKENvbnN0YW50cy5FVkVOVFMuRURJVE9SX1JFQURZLCAoKSA9PiB7IHRoaXMuX2lzUmVhZHkgPSB0cnVlIH0pXG5cbiAgICBMb2cuc2V0TGV2ZWwodGhpcy5fb3B0aW9ucy5sb2dMZXZlbClcblxuICAgIGlmICghdGhpcy5fb3B0aW9ucy5saWNlbnNlIHx8IHRoaXMuX3YoKSkge1xuICAgICAgdGhpcy5ydW4oKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYWluIGVudHJ5IHBvaW50IGZvciB0aGUgVUlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJ1biAoKSB7XG4gICAgdGhpcy5fdGhlbWUgPSB0aGlzLl9vcHRpb25zLnRoZW1lXG4gICAgdGhpcy5faW5qZWN0V2ViRm9udHMoKVxuXG4gICAgLy8gQ29udGFpbmVyIGhhcyB0byBiZSBwb3NpdGlvbjogcmVsYXRpdmVcbiAgICB0aGlzLl9vcHRpb25zLmNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSdcbiAgICB0aGlzLl9vcHRpb25zLmNvbnRhaW5lci5jbGFzc05hbWUgKz0gJyBwZXNkay1kZXNrdG9wLWVkaXRvcidcbiAgICB0aGlzLl9yZW5kZXIoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIFVJXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyICgpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSAoPEFwcENvbXBvbmVudFxuICAgICAgdWk9e3RoaXN9XG4gICAgICBtZWRpYXRvcj17dGhpcy5fbWVkaWF0b3J9XG4gICAgICByZWY9e2MgPT4geyB0aGlzLl9jb21wb25lbnQgPSBjIH19XG4gICAgICBvcHRpb25zPXt0aGlzLl9vcHRpb25zfVxuICAgICAgZ2xvYmFsU3RhdGU9e3RoaXMuX2dsb2JhbFN0YXRlfSAvPilcblxuICAgIGlmICh0aGlzLl9vcHRpb25zLnJlbmRlclJldHVybnNDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBjb21wb25lbnRcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3RET00ucmVuZGVyKGNvbXBvbmVudCwgdGhpcy5fb3B0aW9ucy5jb250YWluZXIpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9ydHMgYW4gaW1hZ2VcbiAgICogQHBhcmFtIHtCb29sZWFufSBkb3dubG9hZCA9IGZhbHNlXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBleHBvcnQgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50LmV4cG9ydCguLi5hcmdzKVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGVkaXRvciBzdGF0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgc2VyaWFsaXplICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RWRpdG9yKCkuc2VyaWFsaXplKC4uLmFyZ3MpXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBkYXRhXG4gICAqIEBwYXJhbSAge09iamVjdH0gZGF0YVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgZGVzZXJpYWxpemUgKGRhdGEpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFZGl0b3IoKS5kZXNlcmlhbGl6ZShkYXRhKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVkaXRvclxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuRWRpdG9yfVxuICAgKi9cbiAgZ2V0RWRpdG9yICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50LmdldEVkaXRvcigpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBlZGl0b3IgaXMgcmVhZHkgZm9yIGRvaW5nIG9wZXJhdGlvbnMsIGUuZy4sXG4gICAqIHNlcmlhbGl6aW5nLCBkZXNlcmlhbGl6aW5nIGFuZCBleHBvcnRpbmcuXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgKi9cbiAgaXNSZWFkeSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzUmVhZHlcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBhIGNhbGxiYWNrIHdoZW4gdGhlIGVkaXRvciBpcyByZWFkeSwgb3IgaW1tZWRpdGlhbGx5IGlmIGl0J3MgYWxyZWFkeVxuICAgKiBpbiBhIHJlYWR5IHN0YXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYlxuICAgKi9cbiAgb25SZWFkeSAoY2IpIHtcbiAgICBpZiAoIXRoaXMuX2lzUmVhZHkpIHtcbiAgICAgIHRoaXMuX21lZGlhdG9yLm9uY2UoQ29uc3RhbnRzLkVWRU5UUy5FRElUT1JfUkVBRFksIGNiKVxuICAgIH0gZWxzZSB7XG4gICAgICBjYigpXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSU5JVElBTElaQVRJT05cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGRlZmF1bHQgb3B0aW9uc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXRPcHRpb25zICgpIHtcbiAgICB0aGlzLl9vcHRpb25zID0gU0RLVXRpbHMuZGVmYXVsdHModGhpcy5fb3B0aW9ucywge1xuICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgICBsb2dMZXZlbDogJ3dhcm4nLFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuXG4gICAgICBlZGl0b3I6IHt9LFxuICAgICAgYXNzZXRzOiB7fSxcbiAgICAgIHJlc3BvbnNpdmU6IGZhbHNlLFxuICAgICAgcHJlbG9hZGVyOiB0cnVlLFxuICAgICAgdGhlbWU6IERlZmF1bHRUaGVtZVxuICAgIH0pXG5cbiAgICB0aGlzLl9vcHRpb25zLmVkaXRvciA9IFNES1V0aWxzLmRlZmF1bHRzKHRoaXMuX29wdGlvbnMuZWRpdG9yIHx8IHt9LCB7XG4gICAgICBwaXhlbFJhdGlvOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8pIHx8IDEsXG4gICAgICBwcmVmZXJyZWRSZW5kZXJlcjogJ3dlYmdsJyxcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgY2xlYXJDb2xvcjogWzAsIDAsIDAsIDBdLFxuICAgICAgZGlzcGxheVJlc2l6ZU1lc3NhZ2U6IHRydWUsXG4gICAgICBtYXhNZWdhUGl4ZWxzOiB7fSxcbiAgICAgIGVuYWJsZURyYWc6IHRydWUsXG4gICAgICBlbmFibGVab29tOiB0cnVlLFxuICAgICAgZGlzcGxheUNsb3NlQnV0dG9uOiBmYWxzZSxcbiAgICAgIHVuZG9Nb2RlOiAnZ2xvYmFsJyxcbiAgICAgIGRlZmF1bHRDb250cm9sOiAnZmlsdGVyJyxcbiAgICAgIGZvcmNlQ3JvcDogZmFsc2UsXG4gICAgICB0b29sczogW1xuICAgICAgICAndHJhbnNmb3JtJywgJ2ZpbHRlcicsICdhZGp1c3RtZW50cycsICdmb2N1cycsICd0ZXh0JywgJ3RleHRkZXNpZ24nLCAnc3RpY2tlcicsICdicnVzaCcsICdmcmFtZScsICdvdmVybGF5JywgJ2xpYnJhcnknXG4gICAgICBdLFxuICAgICAgY29udHJvbHNPcmRlcjogW1xuICAgICAgICBbJ2xpYnJhcnknXSxcbiAgICAgICAgWyd0cmFuc2Zvcm0nLCAnZmlsdGVyJywgJ2FkanVzdG1lbnRzJywgJ2ZvY3VzJ10sXG4gICAgICAgIFsndGV4dCcsICd0ZXh0ZGVzaWduJywgJ3N0aWNrZXInLCAnYnJ1c2gnLCAnZnJhbWUnLCAnb3ZlcmxheSddXG4gICAgICBdLFxuICAgICAgb3BlcmF0aW9uc09yZGVyOiBbXG4gICAgICAgIC8vIEZpcnN0LCBhbGwgb3BlcmF0aW9ucyB0aGF0IGFmZmVjdCB0aGUgaW1hZ2UgZGltZW5zaW9uc1xuICAgICAgICAnZXhpZi1vcmllbnRhdGlvbicsIC8vIEF1dG9tYXRpY2FsbHkgY3JlYXRlZCBieSBTREtcbiAgICAgICAgJ29yaWVudGF0aW9uJyxcbiAgICAgICAgJ3RyYW5zZm9ybScsXG5cbiAgICAgICAgLy8gVGhlbiBjb2xvciBvcGVyYXRpb25zIChmaXJzdCBmaWx0ZXIsIHRoZW4gZmluZS10dW5pbmcpXG4gICAgICAgICdmaWx0ZXInLCAnYWRqdXN0bWVudHMnLFxuXG4gICAgICAgIC8vIFRoZW4gcG9zdC1wcm9jZXNzaW5nXG4gICAgICAgICdyYWRpYWwtZm9jdXMnLCAnbWlycm9yZWQtZm9jdXMnLCAnbGluZWFyLWZvY3VzJywgJ2JsdXInLCAnc2VsZWN0aXZlLWJsdXInLFxuICAgICAgICAnb3ZlcmxheScsICdzcHJpdGUnLCAnZnJhbWUnLFxuICAgICAgICAnd2F0ZXJtYXJrJ1xuICAgICAgXSxcbiAgICAgIGNvbnRyb2xzT3B0aW9uczoge31cbiAgICB9KVxuXG4gICAgdGhpcy5fb3B0aW9ucy5lZGl0b3IubWF4TWVnYVBpeGVscyA9IFNES1V0aWxzLmRlZmF1bHRzKHRoaXMuX29wdGlvbnMuZWRpdG9yLm1heE1lZ2FQaXhlbHMsIHtcbiAgICAgIG1vYmlsZTogNSxcbiAgICAgIGRlc2t0b3A6IDEwXG4gICAgfSlcblxuICAgIHRoaXMuX29wdGlvbnMuZWRpdG9yLmV4cG9ydCA9IFNES1V0aWxzLmRlZmF1bHRzKHRoaXMuX29wdGlvbnMuZWRpdG9yLmV4cG9ydCB8fCB7fSwge1xuICAgICAgZm9ybWF0OiAnaW1hZ2UvcG5nJyxcbiAgICAgIHR5cGU6IFJlbmRlclR5cGUuSU1BR0UsXG4gICAgICBkb3dubG9hZDogdHJ1ZSxcbiAgICAgIGZpbGVCYXNlbmFtZTogJ3Bob3RvZWRpdG9yc2RrLWV4cG9ydCcsXG4gICAgICBxdWFsaXR5OiAwLjhcbiAgICB9KVxuXG4gICAgdGhpcy5fb3B0aW9ucy5leHRlbnNpb25zID0gU0RLVXRpbHMuZGVmYXVsdHModGhpcy5fb3B0aW9ucy5leHRlbnNpb25zIHx8IHt9LCB7XG4gICAgICBsYW5ndWFnZXM6IHt9LFxuICAgICAgb3BlcmF0aW9uczogW10sXG4gICAgICBjb250cm9sczogW11cbiAgICB9KVxuXG4gICAgdGhpcy5fb3B0aW9ucy5hc3NldHMgPSBTREtVdGlscy5kZWZhdWx0cyh0aGlzLl9vcHRpb25zLmFzc2V0cyB8fCB7fSwge1xuICAgICAgYmFzZVVybDogJ2Fzc2V0cycsXG4gICAgICByZXNvbHZlcjogbnVsbFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogSW5qZWN0cyB0aGUgd2ViIGZvbnRzIGNzc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luamVjdFdlYkZvbnRzICgpIHtcbiAgICBjb25zdCBmb250RmFjZXMgPSBbXVxuICAgIGZvciAobGV0IGZvbnROYW1lIGluIHRoaXMuX3RoZW1lLmZvbnRzKSB7XG4gICAgICBjb25zdCBmb250ID0gdGhpcy5fdGhlbWUuZm9udHNbZm9udE5hbWVdXG4gICAgICBjb25zdCBmb250UGF0aCA9IHRoaXMuZ2V0QXNzZXRQYXRoKGZvbnQuc3JjLCB0cnVlLCB0cnVlKVxuICAgICAgZm9udEZhY2VzLnB1c2goYFxuICAgICAgICBAZm9udC1mYWNlIHtcbiAgICAgICAgICBmb250LWZhbWlseTogXCIke2ZvbnQuZm9udEZhbWlseX1cIjtcbiAgICAgICAgICBzcmM6IHVybCgnJHtmb250UGF0aH0nKSBmb3JtYXQoJ3dvZmYnKTtcbiAgICAgICAgICBmb250LXdlaWdodDogJHtmb250LmZvbnRXZWlnaHR9O1xuICAgICAgICAgIGZvbnQtc3R5bGU6ICR7Zm9udC5mb250U3R5bGV9O1xuICAgICAgICB9XG4gICAgICBgKVxuICAgIH1cblxuICAgIGNvbnN0IGNzcyA9IGBcbiAgICAgIC8qIEluamVjdGVkIGJ5IFBob3RvRWRpdG9yU0RLICovXG4gICAgICAke2ZvbnRGYWNlcy5qb2luKCdcXG4nKX1cbiAgICBgXG5cbiAgICBhZG9uaXMuZ2xvYmFsKGNzcywgdHJ1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgcHJlc2VuY2Ugb2YgdGhlIEFQSSBrZXlcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF92ICgpIHtcbiAgICBpZiAoIXRoaXNbYmQoJ1gyOXdkR2x2Ym5NPScpXVtiZCgnYkdsalpXNXpaUT09JyldKSB7XG4gICAgICBMb2cuZXJyb3IoYmQoJ1RHbGpaVzV6YVc1bicpLCBiZCgnVG04Z1lHeHBZMlZ1YzJWZ0lHOXdkR2x2YmlCbmFYWmxiZz09JykpXG4gICAgICBMb2cuZXJyb3IoYmQoJ1RHbGpaVzV6YVc1bicpLCBiZCgnU1c0Z1kyRnpaU0I1YjNVZ1pHOXVKM1FnYUdGMlpTQmhJR3hwWTJWdWMyVWdlV1YwTENCd2JHVmhjMlVnWTI5dWRHRmpkQ0J2ZFhJZ2MyRnNaWE1nYzNSaFptWWdZWFFnYzJGc1pYTkFjR2h2ZEc5bFpHbDBiM0p6WkdzdVkyOXRJSFJ2SUc5aWRHRnBiaUJoSUd4cFkyVnVjMlVnYjNJZ2JHOW5JR2x1SUhSdklIbHZkWElnWTNWemRHOXRaWElnWkdGemFHSnZZWEprTGc9PScpKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogQ2F0Y2hlcyBtZWRpYXRvciBldmVudHMgYW5kIGVtaXRzIHRoZW0gaGVyZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXRFdmVudHMgKCkge1xuICAgIHRoaXMuX21lZGlhdG9yLnBpcGVFdmVudHModGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnBpcGVzIHRoZSB2ZW50c1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rpc3Bvc2VFdmVudHMgKCkge1xuICAgIHRoaXMuX21lZGlhdG9yLnVucGlwZUV2ZW50cyh0aGlzKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSTE4TlxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW50ZXJuYXRpb25hbGl6YXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0TGFuZ3VhZ2UgKCkge1xuICAgIHRoaXMuX2xhbmd1YWdlcyA9IFNES1V0aWxzLmRlZXBEZWZhdWx0cyh0aGlzLl9vcHRpb25zLmV4dGVuc2lvbnMubGFuZ3VhZ2VzLCB7XG4gICAgICBkZTogcmVxdWlyZSgnLi9sYW5nL2RlLmpzb24nKSxcbiAgICAgIGVuOiByZXF1aXJlKCcuL2xhbmcvZW4uanNvbicpXG4gICAgfSlcbiAgICB0aGlzLl9sYW5ndWFnZSA9IHRoaXMuX2xhbmd1YWdlc1t0aGlzLl9vcHRpb25zLmxhbmd1YWdlXVxuICAgIGlmICghdGhpcy5fbGFuZ3VhZ2UpIHtcbiAgICAgIExvZy5lcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIGBMYW5ndWFnZSBcXGAke3RoaXMuX29wdGlvbnMubGFuZ3VhZ2V9XFxgIG5vdCBmb3VuZCFgKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiBmb3IgYGtleWBcbiAgICogQHBhcmFtICB7U3RyaW5nfSBrZXlcbiAgICogQHBhcmFtICB7T2JqZWN0fSBbaW50ZXJwb2xhdGlvbk9wdGlvbnNdXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIHRyYW5zbGF0ZSAoa2V5LCBpbnRlcnBvbGF0aW9uT3B0aW9ucykge1xuICAgIHJldHVybiBVdGlscy50cmFuc2xhdGUodGhpcy5fbGFuZ3VhZ2UsIGtleSwgaW50ZXJwb2xhdGlvbk9wdGlvbnMpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgaW1hZ2UgdG8gdGhlIGdpdmVuIG9uZVxuICAgKiBAcGFyYW0ge0ltYWdlfSBpbWFnZVxuICAgKi9cbiAgc2V0SW1hZ2UgKGltYWdlKSB7XG4gICAgaWYgKCF0aGlzLl9jb21wb25lbnQpIHJldHVyblxuICAgIHRoaXMuX2NvbXBvbmVudC5zZXRJbWFnZShpbWFnZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSByZXNvbHZlZCBhc3NldCBwYXRoIGZvciB0aGUgZ2l2ZW4gYXNzZXQgbmFtZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGFzc2V0XG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IHVpQXNzZXQgPSBmYWxzZVxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBkaXNhYmxlUmV0aW5hID0gZmFsc2VcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgZ2V0QXNzZXRQYXRoIChhc3NldCwgdWlBc3NldCA9IGZhbHNlLCBkaXNhYmxlUmV0aW5hID0gZmFsc2UpIHtcbiAgICBjb25zdCB7IGJhc2VVcmwsIHJlc29sdmVyIH0gPSB0aGlzLl9vcHRpb25zLmFzc2V0c1xuICAgIGxldCBwYXRoID0gYCR7YmFzZVVybH0vJHthc3NldH1gXG5cbiAgICAvLyBEb24ndCBwcmVwZW5kIGJhc2VVcmwgdG8gYWJzb2x1dGUgdXJsc1xuICAgIGlmIChhc3NldC5tYXRjaCgvKGZ0cHxodHRwfGh0dHBzKTpcXC9cXC8vKSkge1xuICAgICAgcGF0aCA9IGFzc2V0XG4gICAgfVxuXG4gICAgaWYgKHVpQXNzZXQpIHtcbiAgICAgIGlmICghZGlzYWJsZVJldGluYSkge1xuICAgICAgICAvLyBBcHBlbmQgQDJ4IGlmIGRldmljZSdzIHBpeGVsIHJhdGlvID4gMVxuICAgICAgICBjb25zdCBwaXhlbFJhdGlvID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSB8fCAxXG4gICAgICAgIGlmIChwaXhlbFJhdGlvID4gMSkge1xuICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gL1xcLltcXHc/PV0rJC9cbiAgICAgICAgICBhc3NldCA9IGFzc2V0LnJlcGxhY2UocmVnZXgsIChtYXRjaCkgPT4gJ0AyeCcgKyBtYXRjaClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwYXRoID0gYCR7YmFzZVVybH0vdWkvZGVza3RvcC8ke2Fzc2V0fWBcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlc29sdmVyICE9PSAndW5kZWZpbmVkJyAmJiByZXNvbHZlciAhPT0gbnVsbCkge1xuICAgICAgcGF0aCA9IHJlc29sdmVyKHBhdGgpXG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0aGVtZVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBnZXRUaGVtZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RoZW1lXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZm9udCBsb2FkZXJcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkZvbnRMb2FkZXJ9XG4gICAqL1xuICBnZXRGb250TG9hZGVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZm9udExvYWRlclxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByZWxvYWRlclxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5QcmVsb2FkZXJ9XG4gICAqL1xuICBnZXRQcmVsb2FkZXIgKCkge1xuICAgIHJldHVybiB0aGlzLl9wcmVsb2FkZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwb3NlcyB0aGUgVUlcbiAgICovXG4gIGRpc3Bvc2UgKCkge1xuICAgIGlmICh0aGlzLl9kaXNwb3NlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGluc3RhbmNlIG9mIFBob3RvRWRpdG9yU0RLIGlzIGFscmVhZHkgZGlzcG9zZWQuJylcbiAgICB9XG4gICAgdGhpcy5fZGlzcG9zZWQgPSB0cnVlXG5cbiAgICAvLyBVbm1vdW50IEFwcENvbXBvbmVudFxuICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUodGhpcy5fb3B0aW9ucy5jb250YWluZXIpXG5cbiAgICB0aGlzLl9kaXNwb3NlRXZlbnRzKClcbiAgfVxufVxuXG4vKipcbiAqIEEgdW5pcXVlIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhpcyBVSVxuICogQHR5cGUge1N0cmluZ31cbiAqL1xuRGVza3RvcFVJLnByb3RvdHlwZS5pZGVudGlmaWVyID0gJ3JlYWN0J1xuXG4vLyBFeHBvcnQgZXh0ZW5kYWJsZSBzdHVmZlxuRGVza3RvcFVJLkJhc2VDb21wb25lbnQgPSBCYXNlQ29tcG9uZW50XG5EZXNrdG9wVUkuUmVhY3QgPSBSZWFjdFxuRGVza3RvcFVJLmFkb25pcyA9IGFkb25pc1xuRGVza3RvcFVJLlNoYXJlZFN0YXRlID0gU2hhcmVkU3RhdGVcbkRlc2t0b3BVSS5Db25zdGFudHMgPSBDb25zdGFudHNcbkRlc2t0b3BVSS5VdGlscyA9IFV0aWxzXG5EZXNrdG9wVUkuU2Nyb2xsYmFyQ29tcG9uZW50ID0gU2Nyb2xsYmFyQ29tcG9uZW50XG5EZXNrdG9wVUkuSlNPTkxvYWRlciA9IEpTT05Mb2FkZXJcbkRlc2t0b3BVSS5TbGlkZXJDb21wb25lbnQgPSBTbGlkZXJDb21wb25lbnRcblxuLyoqXG4gKiBUaGUgUGhvdG9FZGl0b3JTREsgVUkgY2FuIGFsc28gYmUgaW50ZWdyYXRlZCBhcyBhIFJlYWN0LmpzIGNvbXBvbmVudFxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBSZWFjdC5Db21wb25lbnRcbiAqIEBtZW1iZXJvZiBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUlcbiAqL1xuY2xhc3MgUmVhY3RDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgdGhpcy5fdWkgPSBuZXcgRGVza3RvcFVJKFNES1V0aWxzLmV4dGVuZCh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgY29udGFpbmVyOiB0aGlzLnJlZnMuY29udGFpbmVyXG4gICAgfSkpXG5cbiAgICBpZiAodGhpcy5wcm9wcy5vbkVkaXRvclJlYWR5KSB7XG4gICAgICB0aGlzLl91aS5vblJlYWR5KHRoaXMucHJvcHMub25FZGl0b3JSZWFkeSlcbiAgICB9XG4gIH1cblxuICBnZXQgdWkgKCkge1xuICAgIHJldHVybiB0aGlzLl91aVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSBTREtVdGlscy5leHRlbmQoe30sIHRoaXMucHJvcHMuc3R5bGUgfHwge30pXG4gICAgcmV0dXJuIDxkaXYgc3R5bGU9e2NvbnRhaW5lclN0eWxlfSByZWY9J2NvbnRhaW5lcicgLz5cbiAgfVxufVxuXG5EZXNrdG9wVUkuUmVhY3RDb21wb25lbnQgPSBSZWFjdENvbXBvbmVudFxuXG4vKipcbiAqIEBuYW1lc3BhY2UgUGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkNvbnRyb2xzXG4qL1xuRGVza3RvcFVJLkNvbnRyb2xzID0ge31cblxuZm9yIChsZXQga2V5IGluIEV4cG9ydHMpIHtcbiAgRGVza3RvcFVJW2tleV0gPSBFeHBvcnRzW2tleV1cbn1cblxuLy8gRXh0ZW5kIFBob3RvRWRpdG9yU0RLIG9iamVjdFxuU0RLLlVJID0gU0RLLlVJIHx8IHt9XG5TREsuVUkuRGVza3RvcFVJID0gRGVza3RvcFVJXG5cbmV4cG9ydCBkZWZhdWx0IERlc2t0b3BVSVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS91aS5qc3giLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpIHtcbiAgcmV0dXJuICRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMTQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKSB7XG4gIHJldHVybiAkT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8xNTFfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJyb290XCI6XCJSZWFjdERPTVwiLFwiY29tbW9uanMyXCI6XCJyZWFjdC1kb21cIixcImNvbW1vbmpzXCI6XCJyZWFjdC1kb21cIixcImFtZFwiOlwicmVhY3QtZG9tXCJ9XG4vLyBtb2R1bGUgaWQgPSAxNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG52YXIgY2hlY2tQcm9wVHlwZXMgPSByZXF1aXJlKCcuL2NoZWNrUHJvcFR5cGVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgLyogZ2xvYmFsIFN5bWJvbCAqL1xuICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG4gICAqXG4gICAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICAgKlxuICAgKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICAgKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuICAgKiAgICAgICAuLi5cbiAgICogICAgIH1cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gICAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAgICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcbiAgICpcbiAgICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICAgKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAqICAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICAgKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuICAgKlxuICAgKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gICAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcbiAgICpcbiAgICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gICAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcbiAgICogICAgIH0sXG4gICAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gICAqXG4gICAqICAgdHlwZSA6PSBhcnJheXxib29sfGZ1bmN8b2JqZWN0fG51bWJlcnxzdHJpbmd8b25lT2YoWy4uLl0pfGluc3RhbmNlT2YoLi4uKVxuICAgKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAgICpcbiAgICogRWFjaCBhbmQgZXZlcnkgZGVjbGFyYXRpb24gcHJvZHVjZXMgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZS4gVGhpc1xuICAgKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICB2YXIgTXlMaW5rID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG4gICAqICAgICAgaHJlZjogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAqICAgICAgICAgICAgIShwcm9wVmFsdWUgaW5zdGFuY2VvZiBVUkkpKSB7XG4gICAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcbiAgICogICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAqICAgICAgICAgICk7XG4gICAqICAgICAgICB9XG4gICAqICAgICAgfVxuICAgKiAgICB9LFxuICAgKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cbiAgICogIH0pO1xuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgdmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYXJyYXknKSxcbiAgICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICAgIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICAgIG51bWJlcjogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ251bWJlcicpLFxuICAgIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICAgIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuICAgIHN5bWJvbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N5bWJvbCcpLFxuXG4gICAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuICAgIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcbiAgICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICAgIG5vZGU6IGNyZWF0ZU5vZGVDaGVja2VyKCksXG4gICAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG4gICAgb25lT2Y6IGNyZWF0ZUVudW1UeXBlQ2hlY2tlcixcbiAgICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gICAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIsXG4gICAgZXhhY3Q6IGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIsXG4gIH07XG5cbiAgLyoqXG4gICAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gICAqL1xuICAvKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSovXG4gIGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gICAgfVxuICB9XG4gIC8qZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUqL1xuXG4gIC8qKlxuICAgKiBXZSB1c2UgYW4gRXJyb3ItbGlrZSBvYmplY3QgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYXMgcGVvcGxlIG1heSBjYWxsXG4gICAqIFByb3BUeXBlcyBkaXJlY3RseSBhbmQgaW5zcGVjdCB0aGVpciBvdXRwdXQuIEhvd2V2ZXIsIHdlIGRvbid0IHVzZSByZWFsXG4gICAqIEVycm9ycyBhbnltb3JlLiBXZSBkb24ndCBpbnNwZWN0IHRoZWlyIHN0YWNrIGFueXdheSwgYW5kIGNyZWF0aW5nIHRoZW1cbiAgICogaXMgcHJvaGliaXRpdmVseSBleHBlbnNpdmUgaWYgdGhleSBhcmUgY3JlYXRlZCB0b28gb2Z0ZW4sIHN1Y2ggYXMgd2hhdFxuICAgKiBoYXBwZW5zIGluIG9uZU9mVHlwZSgpIGZvciBhbnkgdHlwZSBiZWZvcmUgdGhlIG9uZSB0aGF0IG1hdGNoZWQuXG4gICAqL1xuICBmdW5jdGlvbiBQcm9wVHlwZUVycm9yKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuc3RhY2sgPSAnJztcbiAgfVxuICAvLyBNYWtlIGBpbnN0YW5jZW9mIEVycm9yYCBzdGlsbCB3b3JrIGZvciByZXR1cm5lZCBlcnJvcnMuXG4gIFByb3BUeXBlRXJyb3IucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBtYW51YWxQcm9wVHlwZUNhbGxDYWNoZSA9IHt9O1xuICAgICAgdmFyIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50ID0gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICAgIGlmIChzZWNyZXQgIT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAgIGlmICh0aHJvd09uRGlyZWN0QWNjZXNzKSB7XG4gICAgICAgICAgLy8gTmV3IGJlaGF2aW9yIG9ubHkgZm9yIHVzZXJzIG9mIGBwcm9wLXR5cGVzYCBwYWNrYWdlXG4gICAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAnVXNlIGBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKWAgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBPbGQgYmVoYXZpb3IgZm9yIHBlb3BsZSB1c2luZyBSZWFjdC5Qcm9wVHlwZXNcbiAgICAgICAgICB2YXIgY2FjaGVLZXkgPSBjb21wb25lbnROYW1lICsgJzonICsgcHJvcE5hbWU7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIW1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSAmJlxuICAgICAgICAgICAgLy8gQXZvaWQgc3BhbW1pbmcgdGhlIGNvbnNvbGUgYmVjYXVzZSB0aGV5IGFyZSBvZnRlbiBub3QgYWN0aW9uYWJsZSBleGNlcHQgZm9yIGxpYiBhdXRob3JzXG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCA8IDNcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAnWW91IGFyZSBtYW51YWxseSBjYWxsaW5nIGEgUmVhY3QuUHJvcFR5cGVzIHZhbGlkYXRpb24gJyArXG4gICAgICAgICAgICAgICdmdW5jdGlvbiBmb3IgdGhlIGAlc2AgcHJvcCBvbiBgJXNgLiBUaGlzIGlzIGRlcHJlY2F0ZWQgJyArXG4gICAgICAgICAgICAgICdhbmQgd2lsbCB0aHJvdyBpbiB0aGUgc3RhbmRhbG9uZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAgICdZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzICcgK1xuICAgICAgICAgICAgICAnbGlicmFyeS4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1kb250LWNhbGwtcHJvcHR5cGVzICcgKyAnZm9yIGRldGFpbHMuJyxcbiAgICAgICAgICAgICAgcHJvcEZ1bGxOYW1lLFxuICAgICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkICcgKyAoJ2luIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGBudWxsYC4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignVGhlICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGJ1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gICAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKGV4cGVjdGVkVHlwZSkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICAgIC8vIGBwcm9wVmFsdWVgIGJlaW5nIGluc3RhbmNlIG9mLCBzYXksIGRhdGUvcmVnZXhwLCBwYXNzIHRoZSAnb2JqZWN0J1xuICAgICAgICAvLyBjaGVjaywgYnV0IHdlIGNhbiBvZmZlciBhIG1vcmUgcHJlY2lzZSBlcnJvciBtZXNzYWdlIGhlcmUgcmF0aGVyIHRoYW5cbiAgICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuICAgICAgICB2YXIgcHJlY2lzZVR5cGUgPSBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByZWNpc2VUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdgJyArIGV4cGVjdGVkVHlwZSArICdgLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGFycmF5LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICdbJyArIGkgKyAnXScsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGV4cGVjdGVkQ2xhc3MpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICghKHByb3BzW3Byb3BOYW1lXSBpbnN0YW5jZW9mIGV4cGVjdGVkQ2xhc3MpKSB7XG4gICAgICAgIHZhciBleHBlY3RlZENsYXNzTmFtZSA9IGV4cGVjdGVkQ2xhc3MubmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICAgIHZhciBhY3R1YWxDbGFzc05hbWUgPSBnZXRDbGFzc05hbWUocHJvcHNbcHJvcE5hbWVdKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgYWN0dWFsQ2xhc3NOYW1lICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdpbnN0YW5jZSBvZiBgJyArIGV4cGVjdGVkQ2xhc3NOYW1lICsgJ2AuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIoZXhwZWN0ZWRWYWx1ZXMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRWYWx1ZXMpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzKHByb3BWYWx1ZSwgZXhwZWN0ZWRWYWx1ZXNbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkVmFsdWVzKTtcbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdmFsdWUgYCcgKyBwcm9wVmFsdWUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgICAgaWYgKHByb3BWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVVbmlvblR5cGVDaGVja2VyKGFycmF5T2ZUeXBlQ2hlY2tlcnMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXlPZlR5cGVDaGVja2VycykpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgaWYgKHR5cGVvZiBjaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2ZUeXBlLiBFeHBlY3RlZCBhbiBhcnJheSBvZiBjaGVjayBmdW5jdGlvbnMsIGJ1dCAnICtcbiAgICAgICAgICAncmVjZWl2ZWQgJXMgYXQgaW5kZXggJXMuJyxcbiAgICAgICAgICBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcoY2hlY2tlciksXG4gICAgICAgICAgaVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKSk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICghaXNOb2RlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBgb2JqZWN0YC4nKSk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb21cbiAgICAgIC8vIHByb3BzLlxuICAgICAgdmFyIGFsbEtleXMgPSBhc3NpZ24oe30sIHByb3BzW3Byb3BOYW1lXSwgc2hhcGVUeXBlcyk7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYWxsS2V5cykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFxuICAgICAgICAgICAgJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIGtleSBgJyArIGtleSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLicgK1xuICAgICAgICAgICAgJ1xcbkJhZCBvYmplY3Q6ICcgKyBKU09OLnN0cmluZ2lmeShwcm9wc1twcm9wTmFtZV0sIG51bGwsICcgICcpICtcbiAgICAgICAgICAgICdcXG5WYWxpZCBrZXlzOiAnICsgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IGlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihwcm9wVmFsdWUpO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykge1xuICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgICBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05vZGUoZW50cnlbMV0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpIHtcbiAgICAvLyBOYXRpdmUgU3ltYm9sLlxuICAgIGlmIChwcm9wVHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10gPT09ICdTeW1ib2wnXG4gICAgaWYgKHByb3BWYWx1ZVsnQEB0b1N0cmluZ1RhZyddID09PSAnU3ltYm9sJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gRmFsbGJhY2sgZm9yIG5vbi1zcGVjIGNvbXBsaWFudCBTeW1ib2xzIHdoaWNoIGFyZSBwb2x5ZmlsbGVkLlxuICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHByb3BWYWx1ZSBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gRXF1aXZhbGVudCBvZiBgdHlwZW9mYCBidXQgd2l0aCBzcGVjaWFsIGhhbmRsaW5nIGZvciBhcnJheSBhbmQgcmVnZXhwLlxuICBmdW5jdGlvbiBnZXRQcm9wVHlwZShwcm9wVmFsdWUpIHtcbiAgICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgIHJldHVybiAnYXJyYXknO1xuICAgIH1cbiAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAvLyBPbGQgd2Via2l0cyAoYXQgbGVhc3QgdW50aWwgQW5kcm9pZCA0LjApIHJldHVybiAnZnVuY3Rpb24nIHJhdGhlciB0aGFuXG4gICAgICAvLyAnb2JqZWN0JyBmb3IgdHlwZW9mIGEgUmVnRXhwLiBXZSdsbCBub3JtYWxpemUgdGhpcyBoZXJlIHNvIHRoYXQgL2JsYS9cbiAgICAgIC8vIHBhc3NlcyBQcm9wVHlwZXMub2JqZWN0LlxuICAgICAgcmV0dXJuICdvYmplY3QnO1xuICAgIH1cbiAgICBpZiAoaXNTeW1ib2wocHJvcFR5cGUsIHByb3BWYWx1ZSkpIHtcbiAgICAgIHJldHVybiAnc3ltYm9sJztcbiAgICB9XG4gICAgcmV0dXJuIHByb3BUeXBlO1xuICB9XG5cbiAgLy8gVGhpcyBoYW5kbGVzIG1vcmUgdHlwZXMgdGhhbiBgZ2V0UHJvcFR5cGVgLiBPbmx5IHVzZWQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICAvLyBTZWUgYGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyYC5cbiAgZnVuY3Rpb24gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHByb3BWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnICsgcHJvcFZhbHVlO1xuICAgIH1cbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgICB9IGVsc2UgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICByZXR1cm4gJ3JlZ2V4cCc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZTtcbiAgfVxuXG4gIC8vIFJldHVybnMgYSBzdHJpbmcgdGhhdCBpcyBwb3N0Zml4ZWQgdG8gYSB3YXJuaW5nIGFib3V0IGFuIGludmFsaWQgdHlwZS5cbiAgLy8gRm9yIGV4YW1wbGUsIFwidW5kZWZpbmVkXCIgb3IgXCJvZiB0eXBlIGFycmF5XCJcbiAgZnVuY3Rpb24gZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nKHZhbHVlKSB7XG4gICAgdmFyIHR5cGUgPSBnZXRQcmVjaXNlVHlwZSh2YWx1ZSk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdhcnJheSc6XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICByZXR1cm4gJ2FuICcgKyB0eXBlO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBjYXNlICdkYXRlJzpcbiAgICAgIGNhc2UgJ3JlZ2V4cCc6XG4gICAgICAgIHJldHVybiAnYSAnICsgdHlwZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybnMgY2xhc3MgbmFtZSBvZiB0aGUgb2JqZWN0LCBpZiBhbnkuXG4gIGZ1bmN0aW9uIGdldENsYXNzTmFtZShwcm9wVmFsdWUpIHtcbiAgICBpZiAoIXByb3BWYWx1ZS5jb25zdHJ1Y3RvciB8fCAhcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgIHJldHVybiBBTk9OWU1PVVM7XG4gICAgfVxuICAgIHJldHVybiBwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gY2hlY2tQcm9wVHlwZXM7XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc1xuLy8gbW9kdWxlIGlkID0gMTUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbiAgdmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcbiAgdmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xufVxuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSB2YWx1ZXMgbWF0Y2ggd2l0aCB0aGUgdHlwZSBzcGVjcy5cbiAqIEVycm9yIG1lc3NhZ2VzIGFyZSBtZW1vcml6ZWQgYW5kIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0eXBlU3BlY3MgTWFwIG9mIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gdmFsdWVzIFJ1bnRpbWUgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSB0eXBlLWNoZWNrZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcGFyYW0gez9GdW5jdGlvbn0gZ2V0U3RhY2sgUmV0dXJucyB0aGUgY29tcG9uZW50IHN0YWNrLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBnZXRTdGFjaykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGZvciAodmFyIHR5cGVTcGVjTmFtZSBpbiB0eXBlU3BlY3MpIHtcbiAgICAgIGlmICh0eXBlU3BlY3MuaGFzT3duUHJvcGVydHkodHlwZVNwZWNOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgICBpbnZhcmlhbnQodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdID09PSAnZnVuY3Rpb24nLCAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICsgJ3RoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAlc2AuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBsb2NhdGlvbiwgdHlwZVNwZWNOYW1lLCB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0pO1xuICAgICAgICAgIGVycm9yID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgfVxuICAgICAgICB3YXJuaW5nKCFlcnJvciB8fCBlcnJvciBpbnN0YW5jZW9mIEVycm9yLCAnJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcyBgJXNgIGlzIGludmFsaWQ7IHRoZSB0eXBlIGNoZWNrZXIgJyArICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAlcy4gJyArICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICsgJ2NyZWF0b3IgKGFycmF5T2YsIGluc3RhbmNlT2YsIG9iamVjdE9mLCBvbmVPZiwgb25lT2ZUeXBlLCBhbmQgJyArICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBsb2NhdGlvbiwgdHlwZVNwZWNOYW1lLCB0eXBlb2YgZXJyb3IpO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICAgIHZhciBzdGFjayA9IGdldFN0YWNrID8gZ2V0U3RhY2soKSA6ICcnO1xuXG4gICAgICAgICAgd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCAlcyB0eXBlOiAlcyVzJywgbG9jYXRpb24sIGVycm9yLm1lc3NhZ2UsIHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrUHJvcFR5cGVzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuY29uc3QgZm9udHMgPSB7XG4gIGZpcmFzYW5zbWVkaXVtOiB7XG4gICAgZm9udEZhbWlseTogJ2ZpcmFzYW5zbWVkaXVtJyxcbiAgICBmb250V2VpZ2h0OiAnNTAwJyxcbiAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgIHNyYzogJ2ZvbnRzL0ZpcmFTYW5zLU1lZGl1bS53b2ZmJ1xuICB9LFxuICBmaXJhc2Fuc3JlZ3VsYXI6IHtcbiAgICBmb250RmFtaWx5OiAnZmlyYXNhbnNyZWd1bGFyJyxcbiAgICBmb250V2VpZ2h0OiAnNDAwJyxcbiAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgIHNyYzogJ2ZvbnRzL0ZpcmFTYW5zLVJlZ3VsYXIud29mZidcbiAgfSxcbiAgc291cmNlc2Fuc3Byb2JvbGQ6IHtcbiAgICBmb250RmFtaWx5OiAnc291cmNlc2Fuc3Byb2JvbGQnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkZXInLFxuICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgc3JjOiAnZm9udHMvU291cmNlU2Fuc1Byby1Cb2xkLndvZmYnXG4gIH0sXG4gIHNvdXJjZXNhbnNwcm9zZW1pYm9sZDoge1xuICAgIGZvbnRGYW1pbHk6ICdzb3VyY2VzYW5zcHJvc2VtaWJvbGQnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgIHNyYzogJ2ZvbnRzL1NvdXJjZVNhbnNQcm8tU2VtaWJvbGQud29mZidcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcHJpbWFyeUNvbG9yOiAnIzJEN0JGRicsXG4gIHByaW1hcnlDb2xvclJHQjogJzQ1LCAxMjMsIDI1NScsXG4gIGJhY2tncm91bmRDb2xvcjogJyMxNDE0MTUnLFxuICBiYWNrZ3JvdW5kQ29sb3JSR0I6ICcyMCwgMjAsIDIxJyxcbiAgY29udHJvbHNLbm9iQ29sb3I6ICd3aGl0ZScsXG4gIGNvbnRyb2xzQmFja2dyb3VuZENvbG9yOiAnIzIzMjMyNicsXG4gIGNvbnRyb2xzQmFja2dyb3VuZENvbG9yUkdCOiAnMzUsIDM1LCAzOCcsXG4gIGNvbnRyb2xzTGlnaHRCYWNrZ3JvdW5kQ29sb3I6ICcjMmEyYTJlJyxcbiAgY29udHJvbHNPdXRsaW5lQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNiknLFxuICBjb250cm9sc1NlcGFyYXRvckNvbG9yOiAnIzFiMWIxZCcsXG4gIG5hdmlnYXRpb25CYWNrZ3JvdW5kQ29sb3I6ICcjMjAyMDIyJyxcbiAgbmF2aWdhdGlvbkJhY2tncm91bmRDb2xvclJHQjogJzMyLCAzMiwgMzQnLFxuICB0ZXh0Q29sb3I6ICcjRkZGRkZGJyxcbiAgZGltbWVkVGV4dENvbG9yOiAnIzg4ODg4OCcsXG4gIGRpbW1lZFRleHRDb2xvclJHQjogJzEzNiwgMTM2LCAxMzYnLFxuICBmaWx0ZXJJdGVtQmFja2dyb3VuZENvbG9yOiAnIzRiNGI0YycsXG4gIHNlY29uZGFyeUNvbnRyb2xzQmFja2dyb3VuZENvbG9yOiAnIzJhMmEyZScsXG4gIHNlY29uZGFyeUNvbnRyb2xzQmFja2dyb3VuZENvbG9yUkdCOiAnNDIsIDQyLCA0NicsXG4gIGZvY3VzSXRlbUJhY2tncm91bmRDb2xvcjogJyMzNDM0MzcnLFxuICBzbGlkZXJCYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMjQpJyxcbiAgZGFya1NsaWRlckJhY2tncm91bmRDb2xvcjogJyMxQjFCMUUnLFxuICBzbGlkZXJLbm9iQ29sb3I6ICcjYjViNWJlJyxcbiAgc2xpZGVyQ2lyY2xlS25vYkNvbG9yOiAnI2M4YzhkMicsXG4gIGhpZ2hsaWdodENvbG9yOiAnIzI2NzVGOCcsXG4gIGhpZ2hsaWdodENvbG9yUkdCOiAnMzgsIDExNywgMjUzJyxcbiAgZGFya0hpZ2hsaWdodENvbG9yUkdCOiAnMTUsIDQ3LCAxMDEnLFxuICBidXR0b25Cb3JkZXJDb2xvcjogJyMzMDMwMzQnLFxuICBkZWZhdWx0U2hhZG93OiAnMCAxcHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjYwKScsXG4gIGlucHV0TW9kYWxCdXR0b25CYXJDb2xvcjogJyMyNjI2MjknLFxuXG4gIG1vZGFsRXJyb3JDb2xvcjogJyNDMjNBM0EnLFxuICBtb2RhbFdhcm5pbmdDb2xvcjogJyNDMTgyMjYnLFxuICBtb2RhbExvYWRpbmdDb2xvcjogJyMyRDdCRkYnLFxuXG4gIHpJbmRleCAobGF5ZXIpIHtcbiAgICBjb25zdCBsYXllcnMgPSBbJ2JhY2tncm91bmQnLCAnY29udHJvbHMnLCAnY29udHJvbHNPdmVybGF5cycsICdvdmVybGF5cycsICduYXZpZ2F0aW9uJ11cbiAgICBjb25zdCBzdHJpZGUgPSA1XG4gICAgcmV0dXJuIGxheWVycy5pbmRleE9mKGxheWVyKSAqIHN0cmlkZVxuICB9LFxuXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogMC4zLFxuICBsaXN0SXRlbVNsaWRlSW5EZWxheTogMTAwLFxuXG4gIHNjcm9sbGJhckdyYWRpZW50U2l6ZTogNjQsXG5cbiAgdXBwZXJjYXNlQm9sZEZvbnRGYW1pbHk6ICdzb3VyY2VzYW5zcHJvYm9sZCcsXG4gIHVwcGVyY2FzZVNlbWlCb2xkRm9udEZhbWlseTogJ3NvdXJjZXNhbnNwcm9zZW1pYm9sZCcsXG5cbiAgcmVndWxhckZvbnRGYW1pbHk6ICdmaXJhc2Fuc3JlZ3VsYXInLFxuICBtZWRpdW1Gb250RmFtaWx5OiAnZmlyYXNhbnNtZWRpdW0nLFxuICBmb250c1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS90aGVtZXMvZGFyay10aGVtZS5qcyIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkFkb25pc1wiXSA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJBZG9uaXNcIl0gPSBmYWN0b3J5KHJvb3RbXCJSZWFjdFwiXSk7XG59KSh0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzZfXykge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG5cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG5cblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLlRoZW1lUHJvdmlkZXIgPSBleHBvcnRzLndpdGhUaGVtZSA9IHVuZGVmaW5lZDtcblxuXHR2YXIgX2Fkb25pcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0dmFyIF9hZG9uaXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWRvbmlzKTtcblxuXHR2YXIgX2RvbUVsZW1lbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cblx0dmFyIF9kb21FbGVtZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb21FbGVtZW50cyk7XG5cblx0dmFyIF9iYXNlU3R5bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cblx0dmFyIF9iYXNlU3R5bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jhc2VTdHlsZXMpO1xuXG5cdHZhciBfd2l0aFRoZW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSk7XG5cblx0dmFyIF93aXRoVGhlbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2l0aFRoZW1lKTtcblxuXHR2YXIgX3RoZW1lUHJvdmlkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKTtcblxuXHR2YXIgX3RoZW1lUHJvdmlkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGhlbWVQcm92aWRlcik7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHQgIHZhciBhZG9uaXMgPSBuZXcgX2Fkb25pczIuZGVmYXVsdChvcHRpb25zKTtcblxuXHQgIC8vIGFkb25pcygpXG5cdCAgdmFyIGZhY3RvcnkgPSBmdW5jdGlvbiBmYWN0b3J5KHRhcmdldCkge1xuXHQgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIF9iYXNlU3R5bGVzMi5kZWZhdWx0KSB7XG5cdCAgICAgIC8vIGFkb25pcyhCYXNlU3R5bGVzKS5kaXYoc3R5bGVzLCB2YXJpYXRpb25zLCBuYW1lKVxuXHQgICAgICB2YXIgYmFzZVN0eWxlcyA9IHRhcmdldDtcblx0ICAgICAgdmFyIF9mYWN0b3J5ID0ge307XG5cdCAgICAgIF9kb21FbGVtZW50czIuZGVmYXVsdC5mb3JFYWNoKGZ1bmN0aW9uIChkb21FbGVtZW50KSB7XG5cdCAgICAgICAgX2ZhY3RvcnlbZG9tRWxlbWVudF0gPSBmdW5jdGlvbiAoc3R5bGVzLCB2YXJpYXRpb25zLCBuYW1lKSB7XG5cdCAgICAgICAgICBpZiAodHlwZW9mIHZhcmlhdGlvbnMgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgIG5hbWUgPSB2YXJpYXRpb25zO1xuXHQgICAgICAgICAgICB2YXJpYXRpb25zID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICByZXR1cm4gYWRvbmlzLmNyZWF0ZUNvbXBvbmVudChkb21FbGVtZW50LCB7XG5cdCAgICAgICAgICAgIHN0eWxlczogc3R5bGVzLCB2YXJpYXRpb25zOiB2YXJpYXRpb25zLCBuYW1lOiBuYW1lLCBiYXNlU3R5bGVzOiBiYXNlU3R5bGVzXG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9O1xuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIF9mYWN0b3J5O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gYWRvbmlzKENvbXBvbmVudCkoc3R5bGVzLCB2YXJpYXRpb25zLCBuYW1lKVxuXHQgICAgICAvLyBhZG9uaXMoQWRvbmlzQ29tcG9uZW50KShzdHlsZXMsIHZhcmlhdGlvbnMsIG5hbWUpXG5cdCAgICAgIHJldHVybiBmdW5jdGlvbiAoc3R5bGVzLCB2YXJpYXRpb25zLCBuYW1lKSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiB2YXJpYXRpb25zID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgbmFtZSA9IHZhcmlhdGlvbnM7XG5cdCAgICAgICAgICB2YXJpYXRpb25zID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBhZG9uaXMuY3JlYXRlQ29tcG9uZW50KHRhcmdldCwge1xuXHQgICAgICAgICAgc3R5bGVzOiBzdHlsZXMsIHZhcmlhdGlvbnM6IHZhcmlhdGlvbnMsIG5hbWU6IG5hbWVcblx0ICAgICAgICB9KTtcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICB9O1xuXG5cdCAgLy8gYWRvbmlzLmRpdihzdHlsZXMsIHZhcmlhdGlvbnMsIG5hbWUpXG5cdCAgX2RvbUVsZW1lbnRzMi5kZWZhdWx0LmZvckVhY2goZnVuY3Rpb24gKGRvbUVsZW1lbnQpIHtcblx0ICAgIGZhY3RvcnlbZG9tRWxlbWVudF0gPSBmdW5jdGlvbiAoc3R5bGVzLCB2YXJpYXRpb25zLCBuYW1lKSB7XG5cdCAgICAgIGlmICh0eXBlb2YgdmFyaWF0aW9ucyA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICBuYW1lID0gdmFyaWF0aW9ucztcblx0ICAgICAgICB2YXJpYXRpb25zID0gdW5kZWZpbmVkO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGFkb25pcy5jcmVhdGVDb21wb25lbnQoZG9tRWxlbWVudCwge1xuXHQgICAgICAgIHN0eWxlczogc3R5bGVzLCB2YXJpYXRpb25zOiB2YXJpYXRpb25zLCBuYW1lOiBuYW1lXG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICB9KTtcblxuXHQgIC8vIGFkb25pcy5nbG9iYWwoY3NzLCBmb3JjZSA9IGZhbHNlKVxuXHQgIGZhY3RvcnkuZ2xvYmFsID0gZnVuY3Rpb24gKGNzcykge1xuXHQgICAgdmFyIGZvcmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuXHQgICAgdmFyIF9hZG9uaXMkZ2V0T3B0aW9ucyA9IGFkb25pcy5nZXRPcHRpb25zKCksXG5cdCAgICAgICAgaW5qZWN0aW9uID0gX2Fkb25pcyRnZXRPcHRpb25zLmluamVjdGlvbixcblx0ICAgICAgICB0aGVtZSA9IF9hZG9uaXMkZ2V0T3B0aW9ucy50aGVtZTtcblxuXHQgICAgaWYgKCFpbmplY3Rpb24gJiYgIWZvcmNlKSByZXR1cm47XG5cblx0ICAgIGlmICh0eXBlb2YgY3NzID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgIGNzcyA9IGNzcyh0aGVtZSk7XG5cdCAgICB9XG5cblx0ICAgIHZhciBzdHlsZXNCdWZmZXIgPSBhZG9uaXMuZ2V0U3R5bGVzQnVmZmVyKCk7XG5cdCAgICBzdHlsZXNCdWZmZXIuYnVmZmVyQ1NTKGNzcyk7XG5cdCAgICBzdHlsZXNCdWZmZXIuZmx1c2hUb1N0eWxlVGFnKGZvcmNlKTtcblx0ICB9O1xuXG5cdCAgLy8gYWRvbmlzLmNzcyhzdHlsZXMsIHZhcmlhdGlvbnMsIG5hbWUpXG5cdCAgZmFjdG9yeS5jc3MgPSBmdW5jdGlvbiAoc3R5bGVzLCB2YXJpYXRpb25zLCBuYW1lKSB7XG5cdCAgICBpZiAodHlwZW9mIHZhcmlhdGlvbnMgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgIG5hbWUgPSB2YXJpYXRpb25zO1xuXHQgICAgICB2YXJpYXRpb25zID0gdW5kZWZpbmVkO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gbmV3IF9iYXNlU3R5bGVzMi5kZWZhdWx0KGFkb25pcywgeyBzdHlsZXM6IHN0eWxlcywgdmFyaWF0aW9uczogdmFyaWF0aW9ucywgbmFtZTogbmFtZSB8fCAnYmFzZVN0eWxlcycgfSk7XG5cdCAgfTtcblxuXHQgIC8vIFByb3h5IHNvbWUgbWV0aG9kc1xuXHQgIFsncmVuZGVyVG9TdGF0aWMnXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG5cdCAgICBmYWN0b3J5W3Byb3BdID0gYWRvbmlzW3Byb3BdLmJpbmQoYWRvbmlzKTtcblx0ICB9KTtcblxuXHQgIHJldHVybiBmYWN0b3J5O1xuXHR9O1xuXG5cdGV4cG9ydHMud2l0aFRoZW1lID0gX3dpdGhUaGVtZTIuZGVmYXVsdDtcblx0ZXhwb3J0cy5UaGVtZVByb3ZpZGVyID0gX3RoZW1lUHJvdmlkZXIyLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cblx0dmFyIF9zdHlsZXNCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5cdHZhciBfc3R5bGVzQnVmZmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0eWxlc0J1ZmZlcik7XG5cblx0dmFyIF9jb21wb25lbnRGYWN0b3J5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuXHR2YXIgX2NvbXBvbmVudEZhY3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcG9uZW50RmFjdG9yeSk7XG5cblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdHZhciBwcm9kdWN0aW9uID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG5cblx0dmFyIEFkb25pcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAvKipcblx0ICAgKiBAcGFyYW0gIHtPYmplY3R9IFtvcHRpb25zXVxuXHQgICAqIEBwYXJhbSAge0Jvb2xlYW58U3RyaW5nfSBbb3B0aW9ucy5pbmplY3Rpb24gPSB0cnVlXSBJZiBgdHJ1ZWAsIHN0eWxlcyB3aWxsIGJlIGluamVjdGVkIG9uIHJlbmRlcixcblx0ICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBgZmFsc2VgLCB0aGV5IHdpbGwgbm90IGJlIGluamVjdGVkLiBJZiBzZXQgdG9cblx0ICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgcHJlYCwgc3R5bGVzIGFyZSBpbmplY3RlZCBiZWZvcmUgcmVuZGVyaW5nLlxuXHQgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYmF0Y2hJbmplY3Rpb24gPSB0cnVlXSBTaG91bGQgQ1NTIGluamVjdGlvbnMgYmUgYmF0Y2hlZD9cblx0ICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1pbmlmaWVkID0gZmFsc2VdIFNob3VsZCB0aGUgcmVzdWx0aW5nIENTUyBiZSBtaW5pZmllZD9cblx0ICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmF1dG9QcmVmaXggPSB0cnVlXSBTaG91bGQgYWRvbmlzIGF1dG9tYXRpY2FsbHkgYWRkIHZlbmRvciBwcmVmaXhlcyB0b1xuXHQgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1NTIHByb3BlcnRpZXMgd2hlbiBuZWNlc3Nhcnk/XG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmNzc1NlbGVjdG9yUHJlZml4ID0gJyddIFRoZSBzZWxlY3RvciBwcmVwZW5kZWQgdG8gYWxsIENTUyBydWxlc1xuXHQgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5jbGFzc05hbWVQcmVmaXggPSAnJ10gVGhlIHN0cmluZyBwcmVwZW5kZWQgdG8gYWxsIGNsYXNzIG5hbWVzXG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmhhc2hTZXBhcmF0b3IgPSAnLSddIFRoZSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIHNlcGFyYXRlIGVsZW1lbnQgbmFtZXNcblx0ICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGVpciBoYXNoZXNcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMubmFtZVNlcGFyYXRvciA9ICdfXyddIFRoZSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIHNlcGFyYXRlIG11bHRpcGxlXG5cdCAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVkIGVsZW1lbnRzXG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnZhcmlhdGlvblNlcGFyYXRvciA9ICctLSddIFRoZSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIHNlcGFyYXRlIGVsZW1lbnRcblx0ICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXJzIGZyb20gdmFyaWF0aW9uIGlkZW50aWZpZXJzXG5cdCAgICogQHBhcmFtIHtET01FbGVtZW50fSBbb3B0aW9ucy5zdHlsZU5vZGVdIFRoZSA8c3R5bGU+IG5vZGUgdGhhdCB0aGUgQ1NTIHNob3VsZCBiZSBhcHBlbmRlZCB0b1xuXHQgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5pbmplY3Rpb25Nb2RlXSBgZmFzdGAgaW5qZWN0cyB0aGUgY3NzIHVzaW5nIGEgYnJvd3Nlci1iYWNrZWQgc3R5bGVzaGVldFxuXHQgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSBgZGVidWdgIGluamVjdHMgaXQgdXNpbmcgdGV4dCBub2Rlcywgd2hpY2ggbWFrZXNcblx0ICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHN0eWxlcyBkZWJ1Z2dhYmxlIGFuZCBlZGl0YWJsZSBpbiB0aGUgYnJvd3Nlci5cblx0ICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyBgZmFzdGAgZm9yIHByb2R1Y3Rpb24sIGBkZWJ1Z2Agb3RoZXJ3aXNlLlxuXHQgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaGFzaGVkU3R5bGVzID0gZmFsc2VdIFdoZW4gc2V0IHRvIHRydWUsIGFkb25pcyBleHBlY3RzIHN0cmluZyBoYXNoZXNcblx0ICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIHN0eWxlIG9iamVjdHMuIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IGFyZVxuXHQgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzaW5nIGV4dGVybmFsIENTUyBmaWxlcyBhbmQgZG9uJ3Qgd2FudCB5b3VyIHByb2R1Y3Rpb25cblx0ICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlIHRvIGJlIGZ1bGwgb2Ygc3R5bGUgb2JqZWN0c1xuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIEFkb25pcyhvcHRpb25zKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWRvbmlzKTtcblxuXHQgICAgdGhpcy5fb3B0aW9ucyA9ICgwLCBfdXRpbHMuZGVmYXVsdHMpKG9wdGlvbnMsIHtcblx0ICAgICAgaW5qZWN0aW9uOiB0cnVlLFxuXHQgICAgICBiYXRjaEluamVjdGlvbjogdHJ1ZSxcblx0ICAgICAgbWluaWZpZWQ6IGZhbHNlLFxuXHQgICAgICBhdXRvUHJlZml4OiB0cnVlLFxuXHQgICAgICBjc3NTZWxlY3RvclByZWZpeDogJycsXG5cdCAgICAgIGNsYXNzTmFtZVByZWZpeDogJycsXG5cdCAgICAgIGhhc2hTZXBhcmF0b3I6ICctJyxcblx0ICAgICAgbmFtZVNlcGFyYXRvcjogJ19fJyxcblx0ICAgICAgdmFyaWF0aW9uU2VwYXJhdG9yOiAnLS0nLFxuXHQgICAgICBzdHlsZU5vZGU6IG51bGwsXG5cdCAgICAgIGluamVjdGlvbk1vZGU6IHByb2R1Y3Rpb24gPyAnZmFzdCcgOiAnZGVidWcnLFxuXHQgICAgICBoYXNoZWRTdHlsZXM6IGZhbHNlXG5cdCAgICB9KTtcblx0ICAgIHRoaXMuX3N0eWxlc0J1ZmZlciA9IG5ldyBfc3R5bGVzQnVmZmVyMi5kZWZhdWx0KHRoaXMpO1xuXHQgICAgdGhpcy5fY29tcG9uZW50RmFjdG9yeSA9IG5ldyBfY29tcG9uZW50RmFjdG9yeTIuZGVmYXVsdCh0aGlzLCB0aGlzLl9vcHRpb25zKTtcblx0ICB9XG5cblx0ICAvKipcblx0ICAgKiBDcmVhdGVzIGFuIGFkb25pcyBjb21wb25lbnQgZm9yIHRoZSBnaXZlbiB0YXJnZXRcblx0ICAgKiBAcGFyYW0gIHtTdHJpbmd8UmVhY3QuQ29tcG9uZW50fEFkb25pc0NvbXBvbmVudH0gdGFyZ2V0XG5cdCAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG5cdCAgICogQHJldHVybiB7QWRvbmlzQ29tcG9uZW50fVxuXHQgICAqL1xuXG5cblx0ICBfY3JlYXRlQ2xhc3MoQWRvbmlzLCBbe1xuXHQgICAga2V5OiAnY3JlYXRlQ29tcG9uZW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQodGFyZ2V0LCBvcHRpb25zKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9jb21wb25lbnRGYWN0b3J5LmNyZWF0ZUNvbXBvbmVudCh0YXJnZXQsIG9wdGlvbnMpO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFJlbmRlcnMgdGhlIHN0eWxlcyBjcmVhdGVkIGluIGByZW5kZXJGbmAgdG8gYSBzdHJpbmcgYW5kIHJldHVybnMgaXRcblx0ICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSByZW5kZXJGblxuXHQgICAgICogQHJldHVybiB7U3RyaW5nfVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZW5kZXJUb1N0YXRpYycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyVG9TdGF0aWMocmVuZGVyRm4pIHtcblx0ICAgICAgdGhpcy5fc3R5bGVzQnVmZmVyLmRpc2FibGVJbmplY3Rpb24oKTtcblxuXHQgICAgICB2YXIgaHRtbCA9IHJlbmRlckZuKCk7XG5cblx0ICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3N0eWxlc0J1ZmZlci5mbHVzaFRvU3RyaW5nKHRydWUpO1xuXHQgICAgICB0aGlzLl9zdHlsZXNCdWZmZXIuZW5hYmxlSW5qZWN0aW9uKCk7XG5cblx0ICAgICAgcmV0dXJuIHsgY3NzOiB7IGNvbnRlbnQ6IG91dHB1dCB9LCBodG1sOiBodG1sIH07XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJucyB0aGUgc3R5bGVzIGJ1ZmZlclxuXHQgICAgICogQHJldHVybiB7U3R5bGVzQnVmZmVyfVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRTdHlsZXNCdWZmZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN0eWxlc0J1ZmZlcigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlc0J1ZmZlcjtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBSZXR1cm5zIGFsbCBvcHRpb25zIGZvciB0aGlzIGFkb25pcyBpbnN0YW5jZVxuXHQgICAgICogQHJldHVybiB7T2JqZWN0fVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRPcHRpb25zJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPcHRpb25zKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gQWRvbmlzO1xuXHR9KCk7XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gQWRvbmlzO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygyKSkpXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXHR2YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cblx0Ly8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG5cdC8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuXHQvLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG5cdC8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cblx0dmFyIGNhY2hlZFNldFRpbWVvdXQ7XG5cdHZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cblx0ZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xuXHR9XG5cdGZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcblx0fVxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuXHQgICAgfVxuXHQgICAgdHJ5IHtcblx0ICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcblx0ICAgICAgICB9XG5cdCAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcblx0ICAgIH1cblx0fSAoKSlcblx0ZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcblx0ICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG5cdCAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG5cdCAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcblx0ICAgIH1cblx0ICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG5cdCAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcblx0ICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcblx0ICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuXHQgICAgfVxuXHQgICAgdHJ5IHtcblx0ICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG5cdCAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcblx0ICAgIH0gY2F0Y2goZSl7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG5cdCAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcblx0ICAgICAgICB9IGNhdGNoKGUpe1xuXHQgICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuXHQgICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cblx0fVxuXHRmdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG5cdCAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcblx0ICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcblx0ICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG5cdCAgICB9XG5cdCAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG5cdCAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcblx0ICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG5cdCAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuXHQgICAgfVxuXHQgICAgdHJ5IHtcblx0ICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG5cdCAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuXHQgICAgfSBjYXRjaCAoZSl7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuXHQgICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcblx0ICAgICAgICB9IGNhdGNoIChlKXtcblx0ICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG5cdCAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcblx0ICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cblxuXHR9XG5cdHZhciBxdWV1ZSA9IFtdO1xuXHR2YXIgZHJhaW5pbmcgPSBmYWxzZTtcblx0dmFyIGN1cnJlbnRRdWV1ZTtcblx0dmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuXHRmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG5cdCAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICBkcmFpbmluZyA9IGZhbHNlO1xuXHQgICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcblx0ICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG5cdCAgICB9XG5cdCAgICBpZiAocXVldWUubGVuZ3RoKSB7XG5cdCAgICAgICAgZHJhaW5RdWV1ZSgpO1xuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcblx0ICAgIGlmIChkcmFpbmluZykge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuXHQgICAgZHJhaW5pbmcgPSB0cnVlO1xuXG5cdCAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuXHQgICAgd2hpbGUobGVuKSB7XG5cdCAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG5cdCAgICAgICAgcXVldWUgPSBbXTtcblx0ICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG5cdCAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcblx0ICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG5cdCAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuXHQgICAgfVxuXHQgICAgY3VycmVudFF1ZXVlID0gbnVsbDtcblx0ICAgIGRyYWluaW5nID0gZmFsc2U7XG5cdCAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG5cdH1cblxuXHRwcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuXHQgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuXHQgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcblx0ICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG5cdCAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcblx0ICAgIH1cblx0fTtcblxuXHQvLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5cdGZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuXHQgICAgdGhpcy5mdW4gPSBmdW47XG5cdCAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG5cdH1cblx0SXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG5cdH07XG5cdHByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5cdHByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5cdHByb2Nlc3MuZW52ID0ge307XG5cdHByb2Nlc3MuYXJndiA9IFtdO1xuXHRwcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcblx0cHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5cdGZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5cdHByb2Nlc3Mub24gPSBub29wO1xuXHRwcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcblx0cHJvY2Vzcy5vbmNlID0gbm9vcDtcblx0cHJvY2Vzcy5vZmYgPSBub29wO1xuXHRwcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcblx0cHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xuXHRwcm9jZXNzLmVtaXQgPSBub29wO1xuXHRwcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5cdHByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cblx0cHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5cdHByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG5cdH07XG5cblx0cHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcblx0cHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG5cdH07XG5cdHByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXG5cdHZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cblx0dmFyIFN0eWxlc0J1ZmZlciA9IGZ1bmN0aW9uICgpIHtcblx0ICBmdW5jdGlvbiBTdHlsZXNCdWZmZXIoYWRvbmlzKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVzQnVmZmVyKTtcblxuXHQgICAgdGhpcy5fYWRvbmlzID0gYWRvbmlzO1xuXHQgICAgdGhpcy5faW5qZWN0aW9uRW5hYmxlZCA9IHRydWU7XG5cdCAgICB0aGlzLl9idWZmZXJlZFNlbGVjdG9ycyA9IHt9O1xuXHQgICAgdGhpcy5fYnVmZmVyID0gW107XG5cdCAgICB0aGlzLl9zdHlsZU5vZGUgPSB0aGlzLl9maW5kU3R5bGVOb2RlKCk7XG5cdCAgICB0aGlzLl9zaGVldCA9IHRoaXMuX2ZpbmRTaGVldCgpO1xuXHQgIH1cblxuXHQgIC8qKlxuXHQgICAqIEZpbmRzIHRoZSBTdHlsZXNoZWV0IGZvciBvdXIgc3R5bGUgbm9kZVxuXHQgICAqIEByZXR1cm4ge0NTU1N0eWxlU2hlZXR9XG5cdCAgICogQHByaXZhdGVcblx0ICAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzKFN0eWxlc0J1ZmZlciwgW3tcblx0ICAgIGtleTogJ19maW5kU2hlZXQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kU2hlZXQoKSB7XG5cdCAgICAgIGlmICghdGhpcy5fc3R5bGVOb2RlKSByZXR1cm47XG5cblx0ICAgICAgaWYgKHRoaXMuX3N0eWxlTm9kZS5zaGVldCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9zdHlsZU5vZGUuc2hlZXQ7XG5cdCAgICAgIH1cblxuXHQgICAgICAvLyBGaW5kIHN0eWxlc2hlZXRcblx0ICAgICAgdmFyIF9kb2N1bWVudCA9IGRvY3VtZW50LFxuXHQgICAgICAgICAgc3R5bGVTaGVldHMgPSBfZG9jdW1lbnQuc3R5bGVTaGVldHM7XG5cblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBzdHlsZVNoZWV0ID0gc3R5bGVTaGVldHNbaV07XG5cdCAgICAgICAgaWYgKHN0eWxlU2hlZXQub3duZXJOb2RlID09PSB0aGlzLl9zdHlsZU5vZGUpIHtcblx0ICAgICAgICAgIHJldHVybiBzdHlsZVNoZWV0O1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIEZpbmRzIHRoZSBzdHlsZSBub2RlXG5cdCAgICAgKiBAcmV0dXJuIHtET01FbGVtZW50fVxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiAnX2ZpbmRTdHlsZU5vZGUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kU3R5bGVOb2RlKCkge1xuXHQgICAgICB2YXIgX2Fkb25pcyRnZXRPcHRpb25zID0gdGhpcy5fYWRvbmlzLmdldE9wdGlvbnMoKSxcblx0ICAgICAgICAgIHN0eWxlTm9kZSA9IF9hZG9uaXMkZ2V0T3B0aW9ucy5zdHlsZU5vZGU7XG5cblx0ICAgICAgaWYgKHN0eWxlTm9kZSkge1xuXHQgICAgICAgIHJldHVybiBzdHlsZU5vZGU7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIG51bGw7XG5cblx0ICAgICAgc3R5bGVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblx0ICAgICAgc3R5bGVOb2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1hZG9uaXMnLCB0cnVlKTtcblx0ICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZU5vZGUpO1xuXHQgICAgICByZXR1cm4gc3R5bGVOb2RlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2J1ZmZlckNTUycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYnVmZmVyQ1NTKGNzcykge1xuXHQgICAgICB0aGlzLl9idWZmZXIucHVzaChjc3MpO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIEJ1ZmZlcnMgdGhlIGdpdmVuIGFycmF5IG9mIGNzcyBydWxlc2V0c1xuXHQgICAgICogQHBhcmFtICB7U3RyaW5nW11bXX0gcnVsZXNldHNcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiAnYnVmZmVyUnVsZXNldHMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGJ1ZmZlclJ1bGVzZXRzKHJ1bGVzZXRzKSB7XG5cdCAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cblx0ICAgICAgcnVsZXNldHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuXHQgICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuXHQgICAgICAgICAgICBzZWxlY3RvciA9IF9yZWYyWzBdLFxuXHQgICAgICAgICAgICBjc3MgPSBfcmVmMlsxXTtcblxuXHQgICAgICAgIF90aGlzLl9idWZmZXJlZFNlbGVjdG9yc1tzZWxlY3Rvcl0gPSB0cnVlO1xuXHQgICAgICB9KTtcblx0ICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5fYnVmZmVyLCBydWxlc2V0cy5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7XG5cdCAgICAgICAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDIpLFxuXHQgICAgICAgICAgICBjc3MgPSBfcmVmNFsxXTtcblxuXHQgICAgICAgIHJldHVybiBjc3M7XG5cdCAgICAgIH0pKTtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIHNlbGVjdG9yIGhhcyBiZWVuIGJ1ZmZlcmVkIGFscmVhZHlcblx0ICAgICAqIEBwYXJhbSAge1N0cmluZ30gIHNlbGVjdG9yXG5cdCAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdpc1NlbGVjdG9yQnVmZmVyZWQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGlzU2VsZWN0b3JCdWZmZXJlZChzZWxlY3Rvcikge1xuXHQgICAgICByZXR1cm4gdGhpcy5fYnVmZmVyZWRTZWxlY3RvcnNbc2VsZWN0b3JdO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIERpc2FibGVzIHRoZSBpbmplY3Rpb25cblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiAnZGlzYWJsZUluamVjdGlvbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUluamVjdGlvbigpIHtcblx0ICAgICAgdGhpcy5faW5qZWN0aW9uRW5hYmxlZCA9IGZhbHNlO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIEVuYWJsZXMgdGhlIGluamVjdGlvblxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdlbmFibGVJbmplY3Rpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUluamVjdGlvbigpIHtcblx0ICAgICAgdGhpcy5faW5qZWN0aW9uRW5hYmxlZCA9IHRydWU7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogRmx1c2hlcyB0aGUgYnVmZmVyZWQgQ1NTIHRvIGEgc3RyaW5nIGFuZCByZXR1cm5zIGl0XG5cdCAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNsZWFyQnVmZmVyZWRTZWxlY3RvcnMgPSBmYWxzZVxuXHQgICAgICogQHJldHVybiB7U3RyaW5nfVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdmbHVzaFRvU3RyaW5nJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmbHVzaFRvU3RyaW5nKCkge1xuXHQgICAgICB2YXIgY2xlYXJCdWZmZXJlZFNlbGVjdG9ycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cblx0ICAgICAgdmFyIF9hZG9uaXMkZ2V0T3B0aW9uczIgPSB0aGlzLl9hZG9uaXMuZ2V0T3B0aW9ucygpLFxuXHQgICAgICAgICAgbWluaWZpZWQgPSBfYWRvbmlzJGdldE9wdGlvbnMyLm1pbmlmaWVkO1xuXG5cdCAgICAgIHZhciBjb250ZW50ID0gdGhpcy5fYnVmZmVyLmpvaW4obWluaWZpZWQgPyAnJyA6ICdcXG5cXG4nKTtcblx0ICAgICAgdGhpcy5fYnVmZmVyID0gW107XG5cdCAgICAgIGlmIChjbGVhckJ1ZmZlcmVkU2VsZWN0b3JzKSB7XG5cdCAgICAgICAgdGhpcy5fYnVmZmVyZWRTZWxlY3RvcnMgPSB7fTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gY29udGVudDtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBJbmplY3RzIHRoZSBjc3MgcnVsZXMgdXNpbmcgQ1NTU3R5bGVTaGVldCNpbnNlcnRSdWxlXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdfaW5qZWN0RmFzdCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2luamVjdEZhc3QoKSB7XG5cdCAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG5cdCAgICAgIHRoaXMuX2J1ZmZlci5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG5cdCAgICAgICAgX3RoaXMyLl9zaGVldC5pbnNlcnRSdWxlKHJ1bGUsIF90aGlzMi5fc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogSW5qZWN0cyB0aGUgY3NzIHJ1bGVzIGJ5IGFwcGVuZGluZyB0ZXh0IG5vZGVzIHRvIHRoZSBzdHlsZSBub2RlXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdfaW5qZWN0RGVidWcnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbmplY3REZWJ1ZygpIHtcblx0ICAgICAgdmFyIGNzcyA9IHRoaXMuZmx1c2hUb1N0cmluZygpO1xuXHQgICAgICBpZiAoIWNzcykgcmV0dXJuO1xuXG5cdCAgICAgIHZhciBfYWRvbmlzJGdldE9wdGlvbnMzID0gdGhpcy5fYWRvbmlzLmdldE9wdGlvbnMoKSxcblx0ICAgICAgICAgIG1pbmlmaWVkID0gX2Fkb25pcyRnZXRPcHRpb25zMy5taW5pZmllZDtcblxuXHQgICAgICB2YXIgaGFzQ29udGVudCA9IHRoaXMuX3N0eWxlTm9kZS5pbm5lckhUTUwubGVuZ3RoID4gMDtcblx0ICAgICAgdGhpcy5fc3R5bGVOb2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKChtaW5pZmllZCB8fCAhaGFzQ29udGVudCA/ICcnIDogJ1xcblxcbicpICsgY3NzKSk7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWN0dWFsbHkgZmx1c2hlcyB0aGUgY3NzIHJ1bGVzIHRvIHRoZSBzdHlsZSBub2RlXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdfZmx1c2hUb1N0eWxlVGFnJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfZmx1c2hUb1N0eWxlVGFnKCkge1xuXHQgICAgICB2YXIgX2Fkb25pcyRnZXRPcHRpb25zNCA9IHRoaXMuX2Fkb25pcy5nZXRPcHRpb25zKCksXG5cdCAgICAgICAgICBpbmplY3Rpb25Nb2RlID0gX2Fkb25pcyRnZXRPcHRpb25zNC5pbmplY3Rpb25Nb2RlO1xuXG5cdCAgICAgIGlmIChpbmplY3Rpb25Nb2RlID09PSAnZmFzdCcgJiYgdGhpcy5fc2hlZXQuaW5zZXJ0UnVsZSkge1xuXHQgICAgICAgIHRoaXMuX2luamVjdEZhc3QoKTtcblx0ICAgICAgfSBlbHNlIGlmIChpbmplY3Rpb25Nb2RlID09PSAnZGVidWcnKSB7XG5cdCAgICAgICAgdGhpcy5faW5qZWN0RGVidWcoKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gQ1NTIGluamVjdGlvbiBtb2RlOiBgJyArIGluamVjdGlvbk1vZGUgKyAnYCcpO1xuXHQgICAgICB9XG5cblx0ICAgICAgdGhpcy5fYnVmZmVyID0gW107XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2NoZWR1bGVzIHRoZSBpbmplY3Rpb24gb2YgY3NzIHJ1bGVzIGludG8gdGhlIHN0eWxlIG5vZGVcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiAnZmx1c2hUb1N0eWxlVGFnJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmbHVzaFRvU3R5bGVUYWcoKSB7XG5cdCAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG5cdCAgICAgIGlmICghdGhpcy5faW5qZWN0aW9uRW5hYmxlZCkgcmV0dXJuO1xuXG5cdCAgICAgIHZhciBfYWRvbmlzJGdldE9wdGlvbnM1ID0gdGhpcy5fYWRvbmlzLmdldE9wdGlvbnMoKSxcblx0ICAgICAgICAgIGJhdGNoSW5qZWN0aW9uID0gX2Fkb25pcyRnZXRPcHRpb25zNS5iYXRjaEluamVjdGlvbjtcblxuXHQgICAgICBpZiAoIXRoaXMuX25leHRUaWNrICYmIGJhdGNoSW5qZWN0aW9uKSB7XG5cdCAgICAgICAgdGhpcy5fbmV4dFRpY2sgPSAoMCwgX3V0aWxzLnJlcXVlc3RBbmltYXRpb25GcmFtZSkoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgX3RoaXMzLl9uZXh0VGljayA9IG51bGw7XG5cdCAgICAgICAgICBfdGhpczMuX2ZsdXNoVG9TdHlsZVRhZygpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9IGVsc2UgaWYgKCFiYXRjaEluamVjdGlvbikge1xuXHQgICAgICAgIHRoaXMuX2ZsdXNoVG9TdHlsZVRhZygpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIFN0eWxlc0J1ZmZlcjtcblx0fSgpO1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IFN0eWxlc0J1ZmZlcjtcblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgeyd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cblx0LyoqXG5cdCAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0KHMpIHRvIHRoZSBkZXN0aW5hdGlvblxuXHQgKiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byB1bmRlZmluZWQuIE9uY2UgYVxuXHQgKiBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuXHQgKiBAcGFyYW0gIHtPYmplY3R9IG9iamVjdFxuXHQgKiBAcGFyYW0gIHtPYmplY3R9IC4uLnNvdXJjZXNcblx0ICogQHJldHVybiB7T2JqZWN0fVxuXHQgKi9cblx0dmFyIGRlZmF1bHRzID0gZXhwb3J0cy5kZWZhdWx0cyA9IGZ1bmN0aW9uIGRlZmF1bHRzKG9iamVjdCkge1xuXHQgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzb3VyY2VzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgc291cmNlc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgfVxuXG5cdCAgLy8gU2hhbGxvdyBjbG9uZVxuXHQgIHZhciBuZXdPYmplY3QgPSB7fTtcblx0ICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG5cdCAgICBuZXdPYmplY3Rba2V5XSA9IG9iamVjdFtrZXldO1xuXHQgIH1cblxuXHQgIC8vIENsb25lIHNvdXJjZXNcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuXHQgICAgZm9yICh2YXIgX2tleTIgaW4gc291cmNlKSB7XG5cdCAgICAgIGlmICh0eXBlb2YgbmV3T2JqZWN0W19rZXkyXSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICBuZXdPYmplY3RbX2tleTJdID0gc291cmNlW19rZXkyXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBuZXdPYmplY3Q7XG5cdH07XG5cblx0LyoqXG5cdCAqIEpTIEltcGxlbWVudGF0aW9uIG9mIE11cm11ckhhc2gyXG5cdCAqXG5cdCAqIEBhdXRob3IgR2FyeSBDb3VydCA8Z2FyeS5jb3VydEBnbWFpbC5jb20+XG5cdCAqIEBzZWUgaHR0cDovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanNcblx0ICogQGF1dGhvciBBdXN0aW4gQXBwbGVieSA8YWFwcGxlYnlAZ21haWwuY29tPlxuXHQgKiBAc2VlIGh0dHA6Ly9zaXRlcy5nb29nbGUuY29tL3NpdGUvbXVybXVyaGFzaC9cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9XG5cdCAqIEByZXR1cm4ge1N0cmluZ30gQmFzZSAzNiBlbmNvZGVkIGhhc2ggcmVzdWx0XG5cdCAqL1xuXHR2YXIgaGFzaE9iamVjdCA9IGV4cG9ydHMuaGFzaE9iamVjdCA9IGZ1bmN0aW9uIGhhc2hPYmplY3Qob2JqZWN0KSB7XG5cdCAgdmFyIHN0ciA9IEpTT04uc3RyaW5naWZ5KG9iamVjdCk7XG5cdCAgdmFyIGwgPSBzdHIubGVuZ3RoO1xuXHQgIHZhciBoID0gbDtcblx0ICB2YXIgaSA9IDA7XG5cdCAgdmFyIGsgPSB2b2lkIDA7XG5cblx0ICB3aGlsZSAobCA+PSA0KSB7XG5cdCAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG5cblx0ICAgIGsgPSAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKCgoayA+Pj4gMTYpICogMHg1YmQxZTk5NSAmIDB4ZmZmZikgPDwgMTYpO1xuXHQgICAgayBePSBrID4+PiAyNDtcblx0ICAgIGsgPSAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKCgoayA+Pj4gMTYpICogMHg1YmQxZTk5NSAmIDB4ZmZmZikgPDwgMTYpO1xuXG5cdCAgICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KSBeIGs7XG5cblx0ICAgIGwgLT0gNDtcblx0ICAgICsraTtcblx0ICB9XG5cblx0ICAvKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqLyAvLyBmb3JnaXZlIGV4aXN0aW5nIGNvZGVcblx0ICBzd2l0Y2ggKGwpIHtcblx0ICAgIGNhc2UgMzpcblx0ICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDIpICYgMHhmZikgPDwgMTY7XG5cdCAgICBjYXNlIDI6XG5cdCAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cdCAgICBjYXNlIDE6XG5cdCAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuXHQgICAgICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcblx0ICB9XG5cdCAgLyogZXNsaW50LWVuYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXG5cdCAgaCBePSBoID4+PiAxMztcblx0ICBoID0gKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUgJiAweGZmZmYpIDw8IDE2KTtcblx0ICBoIF49IGggPj4+IDE1O1xuXG5cdCAgcmV0dXJuIChoID4+PiAwKS50b1N0cmluZygzNik7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBmbGF0dGVuZWQgdmVyc2lvbiBvZiB0aGUgZ2l2ZW4gYXJyYXlcblx0ICogQHBhcmFtICB7QXJyYXl9IGFyclxuXHQgKiBAcmV0dXJuIHtBcnJheX1cblx0ICovXG5cdHZhciBmbGF0dGVuID0gZXhwb3J0cy5mbGF0dGVuID0gZnVuY3Rpb24gZmxhdHRlbihhcnIpIHtcblx0ICByZXR1cm4gYXJyLnJlZHVjZShmdW5jdGlvbiAoYWNjLCB2YWwpIHtcblx0ICAgIHJldHVybiBhY2MuY29uY2F0KEFycmF5LmlzQXJyYXkodmFsKSA/IGZsYXR0ZW4odmFsKSA6IHZhbCk7XG5cdCAgfSwgW10pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgZ2l2ZW4gb2JqZWN0LCByZW1vdmluZyBhbGwgcHJvcGVydGllcyB0aGF0IHBvaW50IHRvIGZ1bmN0aW9uc2Bcblx0ICogQHBhcmFtICB7T2JqZWN0fSBvYmpcblx0ICogQHJldHVybiB7T2JqZWN0fVxuXHQgKi9cblx0dmFyIHRvU3RhdGljU3R5bGVzID0gZXhwb3J0cy50b1N0YXRpY1N0eWxlcyA9IGZ1bmN0aW9uIHRvU3RhdGljU3R5bGVzKG9iaikge1xuXHQgIHZhciBuZXdPYmplY3QgPSB7fTtcblx0ICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdCAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcblx0ICAgIGlmICgodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSkpID09PSAnb2JqZWN0Jykge1xuXHQgICAgICBuZXdPYmplY3Rba2V5XSA9IHRvU3RhdGljU3R5bGVzKHZhbHVlKTtcblx0ICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgIG5ld09iamVjdFtrZXldID0gdmFsdWU7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBuZXdPYmplY3Q7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlZXAgbWVyZ2VzIHRoZSBnaXZlbiB0YXJnZXQgYW5kIHNvdXJjZVxuXHQgKiBAcGFyYW0gIHtPYmplY3R9IHRhcmdldFxuXHQgKiBAcGFyYW0gIHtPYmplY3R9IHNvdXJjZVxuXHQgKiBAcmV0dXJuIHtPYmplY3R9XG5cdCAqL1xuXHR2YXIgZGVlcE1lcmdlID0gZXhwb3J0cy5kZWVwTWVyZ2UgPSBmdW5jdGlvbiBkZWVwTWVyZ2UodGFyZ2V0LCBzb3VyY2UpIHtcblx0ICB2YXIgZGVzdGluYXRpb24gPSB7fTtcblxuXHQgIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcblx0ICAgIGRlc3RpbmF0aW9uW2tleV0gPSB0YXJnZXRba2V5XTtcblx0ICB9XG5cblx0ICBmb3IgKHZhciBfa2V5MyBpbiBzb3VyY2UpIHtcblx0ICAgIGlmIChfdHlwZW9mKHNvdXJjZVtfa2V5M10pID09PSAnb2JqZWN0JyAmJiB0YXJnZXRbX2tleTNdKSB7XG5cdCAgICAgIGRlc3RpbmF0aW9uW19rZXkzXSA9IGRlZXBNZXJnZSh0YXJnZXRbX2tleTNdLCBzb3VyY2VbX2tleTNdKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGRlc3RpbmF0aW9uW19rZXkzXSA9IHNvdXJjZVtfa2V5M107XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBkZXN0aW5hdGlvbjtcblx0fTtcblxuXHQvKipcblx0ICogRGVlcCBtZXJnZXMgdGhlIGdpdmVuIG9iamVjdHNcblx0ICogQHBhcmFtICB7T2JqZWN0W119IGFyclxuXHQgKiBAcmV0dXJuIHtPYmplY3R9XG5cdCAqL1xuXHR2YXIgZGVlcE1lcmdlQWxsID0gZXhwb3J0cy5kZWVwTWVyZ2VBbGwgPSBmdW5jdGlvbiBkZWVwTWVyZ2VBbGwoYXJyKSB7XG5cdCAgcmV0dXJuIGFyci5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIG5leHQpIHtcblx0ICAgIHJldHVybiBkZWVwTWVyZ2UocHJldiwgbmV4dCk7XG5cdCAgfSwge30pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBXYWxrcyB0aHJvdWdoIHRoZSBnaXZlbiBvYmplY3QsIGlmIGl0IGZpbmRzIGEgZnVuY3Rpb24sIGl0IGNhbGxzIGl0IHdpdGggdGhlIGdpdmVuIGB0aGVtZWBcblx0ICogb2JqZWN0IGFuZCBwbGFjZXMgdGhlIHJlc3VsdCBhdCB0aGUgc2FtZSBrZXlcblx0ICogQHBhcmFtICB7T2JqZWN0fSBvYmplY3Rcblx0ICogQHBhcmFtICB7T2JqZWN0fSB0aGVtZVxuXHQgKiBAcmV0dXJuIHtPYmplY3R9XG5cdCAqL1xuXHR2YXIgcmVzb2x2ZVN0eWxlc09iamVjdCA9IGV4cG9ydHMucmVzb2x2ZVN0eWxlc09iamVjdCA9IGZ1bmN0aW9uIHJlc29sdmVTdHlsZXNPYmplY3Qob2JqZWN0LCB0aGVtZSkge1xuXHQgIHZhciByZXNvbHZlZCA9IHt9O1xuXHQgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcblx0ICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXHQgICAgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgIHJlc29sdmVkW2tleV0gPSByZXNvbHZlU3R5bGVzT2JqZWN0KHZhbHVlLCB0aGVtZSk7XG5cdCAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICBpZiAoIXRoZW1lKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcnlpbmcgdG8gcmVzb2x2ZSBhIGR5bmFtaWMgcHJvcGVydHkgd2l0aG91dCBhIGB0aGVtZWAgZ2l2ZW4uJyk7XG5cdCAgICAgIH1cblx0ICAgICAgcmVzb2x2ZWRba2V5XSA9IHZhbHVlKHRoZW1lKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJlc29sdmVkW2tleV0gPSB2YWx1ZTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHJlc29sdmVkO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFsbCBwb3NzaWJsZSBjb21iaW5hdGlvbnMgZm9yIHRoZSBnaXZlbiBzZXQgb2Ygb2JqZWN0c1xuXHQgKiBAcGFyYW0gIHsqW119IHNldFxuXHQgKiBAcmV0dXJuIHsqW119XG5cdCAqL1xuXHR2YXIgZmluZEFsbENvbWJpbmF0aW9ucyA9IGV4cG9ydHMuZmluZEFsbENvbWJpbmF0aW9ucyA9IGZ1bmN0aW9uIGZpbmRBbGxDb21iaW5hdGlvbnMoc2V0KSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIGFjYyh4cywgc2V0KSB7XG5cdCAgICB2YXIgeCA9IHhzWzBdO1xuXG5cdCAgICBpZiAodHlwZW9mIHggPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgIHJldHVybiBzZXQ7XG5cdCAgICB9XG5cblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gc2V0Lmxlbmd0aDsgaSA8IGw7ICsraSkge1xuXHQgICAgICBzZXQucHVzaChzZXRbaV0uY29uY2F0KHgpKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBhY2MoeHMuc2xpY2UoMSksIHNldCk7XG5cdCAgfShzZXQsIFtbXV0pLnNsaWNlKDEpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBQb2x5ZmlsbCBmb3Igd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuXHQgKiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0ICovXG5cdHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBleHBvcnRzLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgbGFzdEFGID0gMDtcblx0ICB2YXIgcm9vdCA9IHR5cGVvZiBnbG9iYWwgPT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsO1xuXHQgIHZhciByQUYgPSByb290LnJlcXVlc3RBbmltYXRpb25GcmFtZTtcblxuXHQgIHZhciB2ZW5kb3JzID0gWydtcycsICdtb3onLCAnd2Via2l0JywgJ28nXTtcblx0ICBmb3IgKHZhciB4ID0gMDsgeCA8IHZlbmRvcnMubGVuZ3RoICYmICFyQUY7ICsreCkge1xuXHQgICAgckFGID0gcm9vdFt2ZW5kb3JzW3hdICsgJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuXHQgIH1cblxuXHQgIGlmICghckFGICYmIHR5cGVvZiByb290ICE9PSAndW5kZWZpbmVkJyAmJiByb290LnNldEltbWVkaWF0ZSkge1xuXHQgICAgckFGID0gcm9vdC5zZXRJbW1lZGlhdGU7XG5cdCAgfVxuXG5cdCAgLy8gd2UgbmVlZCB0byBiaW5kIGl0IHRvIHJvb3QsIGVsc2Ugd2Ugd2lsbCBnZXQgYW4gaWxsZWdhbCBpbnZvY2F0aW9uIGVycm9yc1xuXHQgIGlmIChyQUYpIHtcblx0ICAgIHJBRiA9IHJBRi5iaW5kKHJvb3QpO1xuXHQgIH1cblxuXHQgIGlmICghckFGKSB7XG5cdCAgICByQUYgPSBmdW5jdGlvbiByQUYoY2FsbGJhY2spIHtcblx0ICAgICAgdmFyIGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdCAgICAgIHZhciB0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0QUYpKTtcblx0ICAgICAgdmFyIGlkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTtcblx0ICAgICAgfSwgdGltZVRvQ2FsbCk7XG5cdCAgICAgIGxhc3RBRiA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcblx0ICAgICAgcmV0dXJuIGlkO1xuXHQgICAgfTtcblx0ICB9XG5cblx0ICByZXR1cm4gckFGO1xuXHR9KCk7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cblx0dmFyIF9iYXNlQWRvbmlzQ29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuXHR2YXIgX2Jhc2VBZG9uaXNDb21wb25lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmFzZUFkb25pc0NvbXBvbmVudCk7XG5cblx0dmFyIF9zdHlsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblxuXHR2YXIgX3N0eWxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHlsZXMpO1xuXG5cdHZhciBfc3R5bGVzTWFuYWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXG5cdHZhciBfc3R5bGVzTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHlsZXNNYW5hZ2VyKTtcblxuXHR2YXIgX3ByZWluamVjdGlvblN0eWxlc01hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblxuXHR2YXIgX3ByZWluamVjdGlvblN0eWxlc01hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlaW5qZWN0aW9uU3R5bGVzTWFuYWdlcik7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdHZhciBDb21wb25lbnRGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIENvbXBvbmVudEZhY3RvcnkoYWRvbmlzLCBvcHRpb25zKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tcG9uZW50RmFjdG9yeSk7XG5cblx0ICAgIHRoaXMuX2Fkb25pcyA9IGFkb25pcztcblx0ICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuXHQgIH1cblxuXHQgIC8qKlxuXHQgICAqIFJldHVybnMgYSBzdHJpbmcgbmFtZSBmb3IgdGhlIGdpdmVuIHRhcmdldFxuXHQgICAqIEBwYXJhbSAge1N0cmluZ3xPYmplY3R9IHRhcmdldFxuXHQgICAqIEByZXR1cm4ge1N0cmluZ31cblx0ICAgKiBAcHJpdmF0ZVxuXHQgICAqL1xuXG5cblx0ICBfY3JlYXRlQ2xhc3MoQ29tcG9uZW50RmFjdG9yeSwgW3tcblx0ICAgIGtleTogJ19nZXROYW1lJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0TmFtZSh0YXJnZXQpIHtcblx0ICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSByZXR1cm4gdGFyZ2V0O1xuXHQgICAgICBpZiAodGFyZ2V0Lm5hbWUpIHJldHVybiB0YXJnZXQubmFtZTtcblx0ICAgICAgcmV0dXJuICdhZG9uaXMnO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybnMgdGhlIGdpdmVuIHRhcmdldCdzIHN0eWxlcy4gVGhpcyBmdW5jdGlvbiBnZXRzIHRoZSBzdHlsZXMgcmVjdXJzaXZlbHksIG1lYW5pbmcgdGhhdFxuXHQgICAgICogaWYgdGhlIHRhcmdldCBoYXMgYW5vdGhlciB0YXJnZXQsIGl0IHJldHVybnMgaXRzIHN0eWxlcyBhcyB3ZWxsLlxuXHQgICAgICogQHBhcmFtICB7UmVhY3RDb21wb25lbnR8QmFzZUFkb25pc0NvbXBvbmVudH0gdGFyZ2V0XG5cdCAgICAgKiBAcmV0dXJuIHtTdHlsZXNbXX1cblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogJ19nZXRUYXJnZXRTdHlsZXMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRUYXJnZXRTdHlsZXModGFyZ2V0LCBuYW1lKSB7XG5cdCAgICAgIHZhciBzdHlsZXMgPSBbdGFyZ2V0LmFkb25pc0Jhc2VTdHlsZXMsIHRhcmdldC5hZG9uaXNTdHlsZXNdO1xuXG5cdCAgICAgIC8vIFRhcmdldCBoYXMgYW5vdGhlciB0YXJnZXQsIGdldCBpdHMgc3R5bGVzXG5cdCAgICAgIGlmICh0YXJnZXQuYWRvbmlzVGFyZ2V0KSB7XG5cdCAgICAgICAgc3R5bGVzLnVuc2hpZnQodGhpcy5fZ2V0VGFyZ2V0U3R5bGVzKHRhcmdldC5hZG9uaXNUYXJnZXQpKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIC8vIFRhcmdldCBoYXMgYSBSb290RWxlbWVudCB0aGF0IGluaGVyaXRzIHN0eWxlc1xuXHQgICAgICBpZiAodGFyZ2V0LlJvb3RFbGVtZW50KSB7XG5cdCAgICAgICAgc3R5bGVzLnVuc2hpZnQodGhpcy5fZ2V0VGFyZ2V0U3R5bGVzKHRhcmdldC5Sb290RWxlbWVudCkpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuICgwLCBfdXRpbHMuZmxhdHRlbikoc3R5bGVzKS5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcblx0ICAgICAgICByZXR1cm4gcztcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogQ3JlYXRlcyBhbiBhZG9uaXMgY29tcG9uZW50IGZvciB0aGUgZ2l2ZW4gdGFyZ2V0XG5cdCAgICAgKiBAcGFyYW0gIHtTdHJpbmd8UmVhY3QuQ29tcG9uZW50fEFkb25pc0NvbXBvbmVudH0gdGFyZ2V0XG5cdCAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcblx0ICAgICAqIEByZXR1cm4ge0Fkb25pc0NvbXBvbmVudH1cblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiAnY3JlYXRlQ29tcG9uZW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQodGFyZ2V0LCBvcHRpb25zKSB7XG5cdCAgICAgIHZhciBhZG9uaXMgPSB0aGlzLl9hZG9uaXM7XG5cdCAgICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lO1xuXG5cdCAgICAgIGlmICghbmFtZSkgbmFtZSA9IHRoaXMuX2dldE5hbWUodGFyZ2V0KTtcblxuXHQgICAgICB2YXIgaXNUYWcgPSB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJztcblx0ICAgICAgdmFyIGlzQWRvbmlzQ29tcG9uZW50ID0gdGFyZ2V0LnByb3RvdHlwZSBpbnN0YW5jZW9mIF9iYXNlQWRvbmlzQ29tcG9uZW50Mi5kZWZhdWx0O1xuXHQgICAgICB2YXIgaXNDb21wb25lbnQgPSAhaXNBZG9uaXNDb21wb25lbnQgJiYgdGFyZ2V0LnByb3RvdHlwZSBpbnN0YW5jZW9mIF9yZWFjdC5Db21wb25lbnQ7XG5cblx0ICAgICAgdmFyIHN0eWxlcyA9IG9wdGlvbnMuc3R5bGVzLFxuXHQgICAgICAgICAgdmFyaWF0aW9ucyA9IG9wdGlvbnMudmFyaWF0aW9ucyxcblx0ICAgICAgICAgIGJhc2VTdHlsZXMgPSBvcHRpb25zLmJhc2VTdHlsZXM7XG5cblx0ICAgICAgdmFyaWF0aW9ucyA9IHZhcmlhdGlvbnMgfHwge307XG5cdCAgICAgIHZhciBzdHlsZXNPYmplY3QgPSBuZXcgX3N0eWxlczIuZGVmYXVsdChhZG9uaXMsIHsgc3R5bGVzOiBzdHlsZXMsIHZhcmlhdGlvbnM6IHZhcmlhdGlvbnMsIG5hbWU6IG5hbWUgfSk7XG5cblx0ICAgICAgdmFyIF9hZG9uaXMkZ2V0T3B0aW9ucyA9IGFkb25pcy5nZXRPcHRpb25zKCksXG5cdCAgICAgICAgICBpbmplY3Rpb24gPSBfYWRvbmlzJGdldE9wdGlvbnMuaW5qZWN0aW9uLFxuXHQgICAgICAgICAgdGhlbWUgPSBfYWRvbmlzJGdldE9wdGlvbnMudGhlbWUsXG5cdCAgICAgICAgICBoYXNoZWRTdHlsZXMgPSBfYWRvbmlzJGdldE9wdGlvbnMuaGFzaGVkU3R5bGVzO1xuXG5cdCAgICAgIGlmIChpbmplY3Rpb24gPT09ICdwcmUnICYmICFoYXNoZWRTdHlsZXMpIHtcblx0ICAgICAgICB2YXIgdGFyZ2V0U3R5bGVzID0gdGhpcy5fZ2V0VGFyZ2V0U3R5bGVzKHRhcmdldCwgbmFtZSk7XG5cdCAgICAgICAgdmFyIGFsbFN0eWxlcyA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgc3R5bGVzTWFuYWdlciA9IHZvaWQgMDtcblx0ICAgICAgICBhbGxTdHlsZXMgPSB0YXJnZXRTdHlsZXMuY29uY2F0KFtiYXNlU3R5bGVzLCBzdHlsZXNPYmplY3RdKS5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcblx0ICAgICAgICAgIHJldHVybiBzO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHN0eWxlc01hbmFnZXIgPSBuZXcgX3ByZWluamVjdGlvblN0eWxlc01hbmFnZXIyLmRlZmF1bHQoYWRvbmlzLCBhbGxTdHlsZXMsIHRoZW1lKTtcblxuXHQgICAgICAgIHN0eWxlc01hbmFnZXIuYnVmZmVyUnVsZXNldHMoKTtcblx0ICAgICAgICB2YXIgc3R5bGVzQnVmZmVyID0gYWRvbmlzLmdldFN0eWxlc0J1ZmZlcigpO1xuXHQgICAgICAgIHN0eWxlc0J1ZmZlci5mbHVzaFRvU3R5bGVUYWcoKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciBBZG9uaXNDb21wb25lbnQgPSBmdW5jdGlvbiAoX0Jhc2VBZG9uaXNDb21wb25lbnQpIHtcblx0ICAgICAgICBfaW5oZXJpdHMoQWRvbmlzQ29tcG9uZW50LCBfQmFzZUFkb25pc0NvbXBvbmVudCk7XG5cblx0ICAgICAgICBmdW5jdGlvbiBBZG9uaXNDb21wb25lbnQoKSB7XG5cdCAgICAgICAgICB2YXIgX3JlZjtcblxuXHQgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFkb25pc0NvbXBvbmVudCk7XG5cblx0ICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG5cdCAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgICAgICAgICB9XG5cblx0ICAgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gQWRvbmlzQ29tcG9uZW50Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQWRvbmlzQ29tcG9uZW50KSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cblx0ICAgICAgICAgIF90aGlzLl91cGRhdGVTdHlsZXNNYW5hZ2VyKCk7XG5cdCAgICAgICAgICBfdGhpcy5fYWRvbmlzID0gYWRvbmlzO1xuXHQgICAgICAgICAgcmV0dXJuIF90aGlzO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIF9jcmVhdGVDbGFzcyhBZG9uaXNDb21wb25lbnQsIFt7XG5cdCAgICAgICAgICBrZXk6ICdfdXBkYXRlU3R5bGVzTWFuYWdlcicsXG5cblxuXHQgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgKiBVcGRhdGVzIHRoZSBzdHlsZXMgbWFuYWdlciBmb3IgdGhlIGdpdmVuIHByb3BzXG5cdCAgICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IHByb3BzXG5cdCAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICovXG5cdCAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZVN0eWxlc01hbmFnZXIoKSB7XG5cdCAgICAgICAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5wcm9wcztcblxuXHQgICAgICAgICAgICB0aGlzLl9hbGxTdHlsZXMgPSBbYmFzZVN0eWxlcywgc3R5bGVzT2JqZWN0XS5jb25jYXQocHJvcHMuc3R5bGVzIHx8IFtdKS5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gcztcblx0ICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgdmFyIGFjdGl2ZVZhcmlhdGlvbnMgPSB0aGlzLl9nZXRBY3RpdmVWYXJpYXRpb25zRnJvbVByb3BzKHByb3BzKTtcblx0ICAgICAgICAgICAgdGhpcy5fc3R5bGVzTWFuYWdlciA9IG5ldyBfc3R5bGVzTWFuYWdlcjIuZGVmYXVsdChhZG9uaXMsIHRoaXMuX2FsbFN0eWxlcywgYWN0aXZlVmFyaWF0aW9ucywgdGhpcy5jb250ZXh0LnRoZW1lKTtcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgKiBJbnZva2VkIGJlZm9yZSBhIG1vdW50ZWQgY29tcG9uZW50IHJlY2VpdmVzIG5ldyBwcm9wc1xuXHQgICAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBwcm9wc1xuXHQgICAgICAgICAgICovXG5cblx0ICAgICAgICB9LCB7XG5cdCAgICAgICAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcblx0ICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzKSB7XG5cdCAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG5cdCAgICAgICAgICAgIHZhciBzdHlsZXNDaGFuZ2VkID0gcHJvcHMuc3R5bGVzICE9PSB0aGlzLnByb3BzLnN0eWxlcztcblxuXHQgICAgICAgICAgICB2YXIgdmFyaWF0aW9uc0NoYW5nZWQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgdmFyIGFsbFZhcmlhdGlvbnMgPSAoMCwgX3V0aWxzLmZsYXR0ZW4pKHRoaXMuX2FsbFN0eWxlcy5tYXAoZnVuY3Rpb24gKHMpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gcy5nZXRWYXJpYXRpb25zKCk7XG5cdCAgICAgICAgICAgIH0pKTtcblxuXHQgICAgICAgICAgICBhbGxWYXJpYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhdGlvbikge1xuXHQgICAgICAgICAgICAgIGlmIChwcm9wc1t2YXJpYXRpb25dICE9PSBfdGhpczIucHJvcHNbdmFyaWF0aW9uXSkge1xuXHQgICAgICAgICAgICAgICAgdmFyaWF0aW9uc0NoYW5nZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgaWYgKHN0eWxlc0NoYW5nZWQgfHwgdmFyaWF0aW9uc0NoYW5nZWQpIHtcblx0ICAgICAgICAgICAgICB0aGlzLl91cGRhdGVTdHlsZXNNYW5hZ2VyKHByb3BzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAvKipcblx0ICAgICAgICAgICAqIFJldHVybnMgYSBzaGFsbG93IGNsb25lIG9mIHRoaXMgY29tcG9uZW50J3MgcHJvcHNcblx0ICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH1cblx0ICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgKi9cblxuXHQgICAgICAgIH0sIHtcblx0ICAgICAgICAgIGtleTogJ19jbG9uZVByb3BzJyxcblx0ICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY2xvbmVQcm9wcygpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cblx0ICAgICAgICAgICAgdmFyIGVsZW1lbnRQcm9wcyA9IHt9O1xuXHQgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG5cdCAgICAgICAgICAgICAgZWxlbWVudFByb3BzW3Byb3BdID0gX3RoaXMzLnByb3BzW3Byb3BdO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRQcm9wcztcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGFjdGl2ZSB2YXJpYXRpb25zIGZvciB0aGlzIGNvbXBvbmVudCBmcm9tIHRoZSBnaXZlbiBwcm9wc1xuXHQgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzXG5cdCAgICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmdbXX1cblx0ICAgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICAgKi9cblxuXHQgICAgICAgIH0sIHtcblx0ICAgICAgICAgIGtleTogJ19nZXRBY3RpdmVWYXJpYXRpb25zRnJvbVByb3BzJyxcblx0ICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0QWN0aXZlVmFyaWF0aW9uc0Zyb21Qcm9wcygpIHtcblx0ICAgICAgICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLnByb3BzO1xuXG5cdCAgICAgICAgICAgIHZhciB2YXJpYXRpb25zU2V0ID0ge307XG5cdCAgICAgICAgICAgIHRoaXMuX2FsbFN0eWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIHMuZ2V0VmFyaWF0aW9ucygpLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhdGlvbikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHZhcmlhdGlvbnNTZXRbdmFyaWF0aW9uXSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2YXJpYXRpb25zU2V0KS5maWx0ZXIoZnVuY3Rpb24gKHApIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gcHJvcHNbcF0gPT09IHRydWU7XG5cdCAgICAgICAgICAgIH0pLnNvcnQoKTtcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgKiBCdWlsZHMgdGhlIGNsYXNzIG5hbWUgZm9yIHRoaXMgY29tcG9uZW50XG5cdCAgICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG5cdCAgICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAgICovXG5cblx0ICAgICAgICB9LCB7XG5cdCAgICAgICAgICBrZXk6ICdfYnVpbGRDbGFzc05hbWUnLFxuXHQgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9idWlsZENsYXNzTmFtZSgpIHtcblx0ICAgICAgICAgICAgdmFyIHBhc3NlZENsYXNzTmFtZSA9IHRoaXMucHJvcHMuY2xhc3NOYW1lO1xuXG5cdCAgICAgICAgICAgIC8vIFdlIGNhbiBwYXNzIGFkZGl0aW9uYWwgY2xhc3MgbmFtZXMgdG8gY29tcG9uZW50c1xuXG5cdCAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gW107XG5cdCAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaChwYXNzZWRDbGFzc05hbWUpO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGEgY2xhc3MgbmFtZSBmb3IgdGhpcyBjb21wb25lbnRcblx0ICAgICAgICAgICAgdmFyIGdlbmVyYXRlZENsYXNzTmFtZSA9IHRoaXMuX3N0eWxlc01hbmFnZXIuZ2V0Q2xhc3NOYW1lKCk7XG5cdCAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaChnZW5lcmF0ZWRDbGFzc05hbWUpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiB7IGNsYXNzTmFtZTogY2xhc3NOYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBjO1xuXHQgICAgICAgICAgICAgIH0pLmpvaW4oJyAnKSB9O1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAvKipcblx0ICAgICAgICAgICAqIENoZWNrcyBpZiBDU1MgaW5qZWN0aW9uIGZvciB0aGlzIGNvbXBvbmVudCBpcyByZXF1aXJlZFxuXHQgICAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgfSwge1xuXHQgICAgICAgICAga2V5OiAnX3Nob3VsZEluamVjdENTUycsXG5cdCAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Nob3VsZEluamVjdENTUygpIHtcblx0ICAgICAgICAgICAgaWYgKCFpbmplY3Rpb24gfHwgaGFzaGVkU3R5bGVzKSByZXR1cm4gZmFsc2U7XG5cblx0ICAgICAgICAgICAgLy8gSW5qZWN0aW9uIGlzIG9ubHkgbmVlZGVkIGlmIHRoZSByZW5kZXJlZCBjaGlsZCBpcyBhIHJlYWwgdGFnXG5cdCAgICAgICAgICAgIHJldHVybiBpc1RhZyB8fCBpc0NvbXBvbmVudCAmJiAhaXNBZG9uaXNDb21wb25lbnQ7XG5cdCAgICAgICAgICB9XG5cblx0ICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuXHQgICAgICAgICAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cblx0ICAgICAgICAgICAqL1xuXG5cdCAgICAgICAgfSwge1xuXHQgICAgICAgICAga2V5OiAncmVuZGVyJyxcblx0ICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgICAgICAgIHZhciBlbGVtZW50UHJvcHMgPSB0aGlzLl9jbG9uZVByb3BzKCk7XG5cblx0ICAgICAgICAgICAgdmFyIF9idWlsZENsYXNzTmFtZTIgPSB0aGlzLl9idWlsZENsYXNzTmFtZSgpLFxuXHQgICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gX2J1aWxkQ2xhc3NOYW1lMi5jbGFzc05hbWU7XG5cblx0ICAgICAgICAgICAgdmFyIHN0eWxlc0J1ZmZlciA9IHRoaXMuX2Fkb25pcy5nZXRTdHlsZXNCdWZmZXIoKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3Nob3VsZEluamVjdENTUygpKSB7XG5cdCAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzTWFuYWdlci5idWZmZXJSdWxlc2V0cygpO1xuXG5cdCAgICAgICAgICAgICAgaWYgKGluamVjdGlvbiA9PT0gdHJ1ZSAmJiAhaGFzaGVkU3R5bGVzKSB7XG5cdCAgICAgICAgICAgICAgICBzdHlsZXNCdWZmZXIuZmx1c2hUb1N0eWxlVGFnKCk7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSWYgYW4gYXZhaWxhYmxlIHZhcmlhdGlvbiBpcyBwYXNzZWQgaW4gYXMgYSBwcm9wZXJ0eSwgd2UgYWRkIHRoZSBzdHlsZXMgdG8gdGhlIGNsYXNzIGFuZFxuXHQgICAgICAgICAgICAvLyByZW1vdmUgdGhlIHByb3AgZnJvbSB0aGUgcHJvcHMgd2UgcGFzcyB0byBvdXIgdGFyZ2V0IGVsZW1lbnRcblx0ICAgICAgICAgICAgaWYgKGlzVGFnKSB7XG5cdCAgICAgICAgICAgICAgdmFyIF92YXJpYXRpb25zID0gb3B0aW9ucy52YXJpYXRpb25zO1xuXG5cdCAgICAgICAgICAgICAgaWYgKF92YXJpYXRpb25zKSB7XG5cdCAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhfdmFyaWF0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAodmFyaWF0aW9uKSB7XG5cdCAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50UHJvcHNbdmFyaWF0aW9uXTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgIC8vIFJlbW92ZSB2YXJpYXRpb25zIHBhc3NlZCBmcm9tIHBhcmVudFxuXHQgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLl9hY3RpdmVQYXJlbnRWYXJpYXRpb25zKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnByb3BzLl9hY3RpdmVQYXJlbnRWYXJpYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhdGlvbikge1xuXHQgICAgICAgICAgICAgICAgICBkZWxldGUgZWxlbWVudFByb3BzW3ZhcmlhdGlvbl07XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAvLyBSZW1vdmUgdmFyaWF0aW9ucyBmcm9tIGJhc2Ugc3R5bGVzXG5cdCAgICAgICAgICAgICAgaWYgKGJhc2VTdHlsZXMpIHtcblx0ICAgICAgICAgICAgICAgIGJhc2VTdHlsZXMuZ2V0VmFyaWF0aW9ucygpLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhdGlvbikge1xuXHQgICAgICAgICAgICAgICAgICBkZWxldGUgZWxlbWVudFByb3BzW3ZhcmlhdGlvbl07XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBXZSBvbmx5IG5lZWQgdG8gcGFzcyB0aGUgY2xhc3MgbmFtZSB0byB0YWdzLCBub3QgdG8gY29tcG9uZW50c1xuXHQgICAgICAgICAgICBpZiAoaXNUYWcpIHtcblx0ICAgICAgICAgICAgICBlbGVtZW50UHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgIGVsZW1lbnRQcm9wcy5zdHlsZXMgPSAoMCwgX3V0aWxzLmZsYXR0ZW4pKFtzdHlsZXNPYmplY3RdLmNvbmNhdCh0aGlzLnByb3BzLnN0eWxlcyB8fCBbXSkpO1xuXHQgICAgICAgICAgICAgIGVsZW1lbnRQcm9wcy5fYWN0aXZlUGFyZW50VmFyaWF0aW9ucyA9IE9iamVjdC5rZXlzKHZhcmlhdGlvbnMgfHwge30pLmNvbmNhdCh0aGlzLnByb3BzLl9hY3RpdmVQYXJlbnRWYXJpYXRpb25zIHx8IFtdKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFBhc3MgcmVmXG5cdCAgICAgICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuXHQgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG5cdCAgICAgICAgICAgICAgICBpbm5lclJlZiA9IF9wcm9wcy5pbm5lclJlZjtcblxuXHQgICAgICAgICAgICBpZiAoaW5uZXJSZWYpIHtcblx0ICAgICAgICAgICAgICBpZiAoaXNDb21wb25lbnQgfHwgaXNUYWcpIHtcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnRQcm9wcy5yZWYgPSBpbm5lclJlZjtcblx0ICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQWRvbmlzQ29tcG9uZW50KSB7XG5cdCAgICAgICAgICAgICAgICBlbGVtZW50UHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHBhc3MgaW52YWxpZCBwcm9wcyB0byB0YWdzXG5cdCAgICAgICAgICAgIGlmIChpc1RhZykge1xuXHQgICAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50UHJvcHMuc3R5bGVzO1xuXHQgICAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50UHJvcHMuaW5uZXJSZWY7XG5cdCAgICAgICAgICAgICAgZGVsZXRlIGVsZW1lbnRQcm9wcy5fYWN0aXZlUGFyZW50VmFyaWF0aW9ucztcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0YXJnZXQsIGVsZW1lbnRQcm9wcywgY2hpbGRyZW4pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1dLCBbe1xuXHQgICAgICAgICAga2V5OiAnbmFtZScsXG5cdCAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfV0pO1xuXG5cdCAgICAgICAgcmV0dXJuIEFkb25pc0NvbXBvbmVudDtcblx0ICAgICAgfShfYmFzZUFkb25pc0NvbXBvbmVudDIuZGVmYXVsdCk7XG5cblx0ICAgICAgQWRvbmlzQ29tcG9uZW50LmNvbnRleHRUeXBlcyA9IF9iYXNlQWRvbmlzQ29tcG9uZW50Mi5kZWZhdWx0LmNvbnRleHRUeXBlcztcblx0ICAgICAgQWRvbmlzQ29tcG9uZW50LmFkb25pc1RhcmdldCA9IHRhcmdldDtcblx0ICAgICAgQWRvbmlzQ29tcG9uZW50LmFkb25pc1N0eWxlcyA9IHN0eWxlc09iamVjdDtcblx0ICAgICAgQWRvbmlzQ29tcG9uZW50LmFkb25pc0Jhc2VTdHlsZXMgPSBiYXNlU3R5bGVzO1xuXG5cdCAgICAgIHJldHVybiBBZG9uaXNDb21wb25lbnQ7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIENvbXBvbmVudEZhY3Rvcnk7XG5cdH0oKTtcblxuXHRleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnRGYWN0b3J5O1xuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfNl9fO1xuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cblx0dmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG5cdHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cdHZhciBCYXNlQWRvbmlzQ29tcG9uZW50ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0ICBfaW5oZXJpdHMoQmFzZUFkb25pc0NvbXBvbmVudCwgX0NvbXBvbmVudCk7XG5cblx0ICBmdW5jdGlvbiBCYXNlQWRvbmlzQ29tcG9uZW50KCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VBZG9uaXNDb21wb25lbnQpO1xuXG5cdCAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJhc2VBZG9uaXNDb21wb25lbnQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCYXNlQWRvbmlzQ29tcG9uZW50KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIEJhc2VBZG9uaXNDb21wb25lbnQ7XG5cdH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gQmFzZUFkb25pc0NvbXBvbmVudDtcblxuXHRCYXNlQWRvbmlzQ29tcG9uZW50LmNvbnRleHRUeXBlcyA9IHtcblx0ICB0aGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcblx0fTtcblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICovXG5cblx0aWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcblx0ICAgIFN5bWJvbC5mb3IgJiZcblx0ICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcblx0ICAgIDB4ZWFjNztcblxuXHQgIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuXHQgICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG5cdCAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuXHQgICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcblx0ICB9O1xuXG5cdCAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG5cdCAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuXHQgIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcblx0ICBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oOSkoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xuXHR9IGVsc2Uge1xuXHQgIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG5cdCAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuXHQgIG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSkoKTtcblx0fVxuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKSlcblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICovXG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBlbXB0eUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0dmFyIHdhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblxuXHR2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblx0dmFyIGNoZWNrUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcykge1xuXHQgIC8qIGdsb2JhbCBTeW1ib2wgKi9cblx0ICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG5cdCAgdmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cblx0ICAvKipcblx0ICAgKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG5cdCAgICpcblx0ICAgKiBCZSBzdXJlIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgaXRlcmFibGUgYXMgY29udGV4dDpcblx0ICAgKlxuXHQgICAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG5cdCAgICogICAgIGlmIChpdGVyYXRvckZuKSB7XG5cdCAgICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuXHQgICAqICAgICAgIC4uLlxuXHQgICAqICAgICB9XG5cdCAgICpcblx0ICAgKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcblx0ICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb259XG5cdCAgICovXG5cdCAgZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG5cdCAgICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO1xuXHQgICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgIHJldHVybiBpdGVyYXRvckZuO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIC8qKlxuXHQgICAqIENvbGxlY3Rpb24gb2YgbWV0aG9kcyB0aGF0IGFsbG93IGRlY2xhcmF0aW9uIGFuZCB2YWxpZGF0aW9uIG9mIHByb3BzIHRoYXQgYXJlXG5cdCAgICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcblx0ICAgKlxuXHQgICAqICAgdmFyIFByb3BzID0gcmVxdWlyZSgnUmVhY3RQcm9wVHlwZXMnKTtcblx0ICAgKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdCAgICogICAgIHByb3BUeXBlczoge1xuXHQgICAqICAgICAgIC8vIEFuIG9wdGlvbmFsIHN0cmluZyBwcm9wIG5hbWVkIFwiZGVzY3JpcHRpb25cIi5cblx0ICAgKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuXHQgICAqXG5cdCAgICogICAgICAgLy8gQSByZXF1aXJlZCBlbnVtIHByb3AgbmFtZWQgXCJjYXRlZ29yeVwiLlxuXHQgICAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcblx0ICAgKlxuXHQgICAqICAgICAgIC8vIEEgcHJvcCBuYW1lZCBcImRpYWxvZ1wiIHRoYXQgcmVxdWlyZXMgYW4gaW5zdGFuY2Ugb2YgRGlhbG9nLlxuXHQgICAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcblx0ICAgKiAgICAgfSxcblx0ICAgKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHsgLi4uIH1cblx0ICAgKiAgIH0pO1xuXHQgICAqXG5cdCAgICogQSBtb3JlIGZvcm1hbCBzcGVjaWZpY2F0aW9uIG9mIGhvdyB0aGVzZSBtZXRob2RzIGFyZSB1c2VkOlxuXHQgICAqXG5cdCAgICogICB0eXBlIDo9IGFycmF5fGJvb2x8ZnVuY3xvYmplY3R8bnVtYmVyfHN0cmluZ3xvbmVPZihbLi4uXSl8aW5zdGFuY2VPZiguLi4pXG5cdCAgICogICBkZWNsIDo9IFJlYWN0UHJvcFR5cGVzLnt0eXBlfSguaXNSZXF1aXJlZCk/XG5cdCAgICpcblx0ICAgKiBFYWNoIGFuZCBldmVyeSBkZWNsYXJhdGlvbiBwcm9kdWNlcyBhIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlLiBUaGlzXG5cdCAgICogYWxsb3dzIHRoZSBjcmVhdGlvbiBvZiBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbnMuIEZvciBleGFtcGxlOlxuXHQgICAqXG5cdCAgICogIHZhciBNeUxpbmsgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdCAgICogICAgcHJvcFR5cGVzOiB7XG5cdCAgICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG5cdCAgICogICAgICBocmVmOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcblx0ICAgKiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblx0ICAgKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG5cdCAgICogICAgICAgICAgICAhKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFVSSSkpIHtcblx0ICAgKiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuXHQgICAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcblx0ICAgKiAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcblx0ICAgKiAgICAgICAgICApO1xuXHQgICAqICAgICAgICB9XG5cdCAgICogICAgICB9XG5cdCAgICogICAgfSxcblx0ICAgKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cblx0ICAgKiAgfSk7XG5cdCAgICpcblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblxuXHQgIHZhciBBTk9OWU1PVVMgPSAnPDxhbm9ueW1vdXM+Pic7XG5cblx0ICAvLyBJbXBvcnRhbnQhXG5cdCAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanNgLlxuXHQgIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcblx0ICAgIGFycmF5OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYXJyYXknKSxcblx0ICAgIGJvb2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdib29sZWFuJyksXG5cdCAgICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcblx0ICAgIG51bWJlcjogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ251bWJlcicpLFxuXHQgICAgb2JqZWN0OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignb2JqZWN0JyksXG5cdCAgICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcblx0ICAgIHN5bWJvbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N5bWJvbCcpLFxuXG5cdCAgICBhbnk6IGNyZWF0ZUFueVR5cGVDaGVja2VyKCksXG5cdCAgICBhcnJheU9mOiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIsXG5cdCAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcblx0ICAgIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG5cdCAgICBub2RlOiBjcmVhdGVOb2RlQ2hlY2tlcigpLFxuXHQgICAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG5cdCAgICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuXHQgICAgb25lT2ZUeXBlOiBjcmVhdGVVbmlvblR5cGVDaGVja2VyLFxuXHQgICAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXJcblx0ICB9O1xuXG5cdCAgLyoqXG5cdCAgICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuXHQgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuXHQgICAqL1xuXHQgIC8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlKi9cblx0ICBmdW5jdGlvbiBpcyh4LCB5KSB7XG5cdCAgICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG5cdCAgICBpZiAoeCA9PT0geSkge1xuXHQgICAgICAvLyBTdGVwcyAxLTUsIDctMTBcblx0ICAgICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcblx0ICAgICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cblx0ICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcblx0ICAgIH1cblx0ICB9XG5cdCAgLyplc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSovXG5cblx0ICAvKipcblx0ICAgKiBXZSB1c2UgYW4gRXJyb3ItbGlrZSBvYmplY3QgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYXMgcGVvcGxlIG1heSBjYWxsXG5cdCAgICogUHJvcFR5cGVzIGRpcmVjdGx5IGFuZCBpbnNwZWN0IHRoZWlyIG91dHB1dC4gSG93ZXZlciwgd2UgZG9uJ3QgdXNlIHJlYWxcblx0ICAgKiBFcnJvcnMgYW55bW9yZS4gV2UgZG9uJ3QgaW5zcGVjdCB0aGVpciBzdGFjayBhbnl3YXksIGFuZCBjcmVhdGluZyB0aGVtXG5cdCAgICogaXMgcHJvaGliaXRpdmVseSBleHBlbnNpdmUgaWYgdGhleSBhcmUgY3JlYXRlZCB0b28gb2Z0ZW4sIHN1Y2ggYXMgd2hhdFxuXHQgICAqIGhhcHBlbnMgaW4gb25lT2ZUeXBlKCkgZm9yIGFueSB0eXBlIGJlZm9yZSB0aGUgb25lIHRoYXQgbWF0Y2hlZC5cblx0ICAgKi9cblx0ICBmdW5jdGlvbiBQcm9wVHlwZUVycm9yKG1lc3NhZ2UpIHtcblx0ICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdCAgICB0aGlzLnN0YWNrID0gJyc7XG5cdCAgfVxuXHQgIC8vIE1ha2UgYGluc3RhbmNlb2YgRXJyb3JgIHN0aWxsIHdvcmsgZm9yIHJldHVybmVkIGVycm9ycy5cblx0ICBQcm9wVHlwZUVycm9yLnByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZTtcblxuXHQgIGZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG5cdCAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgICAgICB2YXIgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGUgPSB7fTtcblx0ICAgICAgdmFyIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50ID0gMDtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuXHQgICAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBBTk9OWU1PVVM7XG5cdCAgICAgIHByb3BGdWxsTmFtZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuXHQgICAgICBpZiAoc2VjcmV0ICE9PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuXHQgICAgICAgIGlmICh0aHJvd09uRGlyZWN0QWNjZXNzKSB7XG5cdCAgICAgICAgICAvLyBOZXcgYmVoYXZpb3Igb25seSBmb3IgdXNlcnMgb2YgYHByb3AtdHlwZXNgIHBhY2thZ2Vcblx0ICAgICAgICAgIGludmFyaWFudChcblx0ICAgICAgICAgICAgZmFsc2UsXG5cdCAgICAgICAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcblx0ICAgICAgICAgICAgJ1VzZSBgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKClgIHRvIGNhbGwgdGhlbS4gJyArXG5cdCAgICAgICAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuXHQgICAgICAgICAgKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgICAvLyBPbGQgYmVoYXZpb3IgZm9yIHBlb3BsZSB1c2luZyBSZWFjdC5Qcm9wVHlwZXNcblx0ICAgICAgICAgIHZhciBjYWNoZUtleSA9IGNvbXBvbmVudE5hbWUgKyAnOicgKyBwcm9wTmFtZTtcblx0ICAgICAgICAgIGlmIChcblx0ICAgICAgICAgICAgIW1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSAmJlxuXHQgICAgICAgICAgICAvLyBBdm9pZCBzcGFtbWluZyB0aGUgY29uc29sZSBiZWNhdXNlIHRoZXkgYXJlIG9mdGVuIG5vdCBhY3Rpb25hYmxlIGV4Y2VwdCBmb3IgbGliIGF1dGhvcnNcblx0ICAgICAgICAgICAgbWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQgPCAzXG5cdCAgICAgICAgICApIHtcblx0ICAgICAgICAgICAgd2FybmluZyhcblx0ICAgICAgICAgICAgICBmYWxzZSxcblx0ICAgICAgICAgICAgICAnWW91IGFyZSBtYW51YWxseSBjYWxsaW5nIGEgUmVhY3QuUHJvcFR5cGVzIHZhbGlkYXRpb24gJyArXG5cdCAgICAgICAgICAgICAgJ2Z1bmN0aW9uIGZvciB0aGUgYCVzYCBwcm9wIG9uIGAlc2AuIFRoaXMgaXMgZGVwcmVjYXRlZCAnICtcblx0ICAgICAgICAgICAgICAnYW5kIHdpbGwgdGhyb3cgaW4gdGhlIHN0YW5kYWxvbmUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuXHQgICAgICAgICAgICAgICdZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzICcgK1xuXHQgICAgICAgICAgICAgICdsaWJyYXJ5LiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWRvbnQtY2FsbC1wcm9wdHlwZXMgJyArICdmb3IgZGV0YWlscy4nLFxuXHQgICAgICAgICAgICAgIHByb3BGdWxsTmFtZSxcblx0ICAgICAgICAgICAgICBjb21wb25lbnROYW1lXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSA9IHRydWU7XG5cdCAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50Kys7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuXHQgICAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG5cdCAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignVGhlICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgJyArICgnaW4gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGJ1dCBpdHMgdmFsdWUgaXMgYG51bGxgLicpKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignVGhlICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGJ1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuJykpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcblx0ICAgIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuXG5cdCAgICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihleHBlY3RlZFR5cGUpIHtcblx0ICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG5cdCAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG5cdCAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG5cdCAgICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG5cdCAgICAgICAgLy8gYHByb3BWYWx1ZWAgYmVpbmcgaW5zdGFuY2Ugb2YsIHNheSwgZGF0ZS9yZWdleHAsIHBhc3MgdGhlICdvYmplY3QnXG5cdCAgICAgICAgLy8gY2hlY2ssIGJ1dCB3ZSBjYW4gb2ZmZXIgYSBtb3JlIHByZWNpc2UgZXJyb3IgbWVzc2FnZSBoZXJlIHJhdGhlciB0aGFuXG5cdCAgICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuXHQgICAgICAgIHZhciBwcmVjaXNlVHlwZSA9IGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSk7XG5cblx0ICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcmVjaXNlVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnYCcgKyBleHBlY3RlZFR5cGUgKyAnYC4nKSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuXHQgICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsKTtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcblx0ICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuXHQgICAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgYXJyYXlPZi4nKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXHQgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuXHQgICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gYXJyYXkuJykpO1xuXHQgICAgICB9XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJ1snICsgaSArICddJywgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuXHQgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdCAgICAgICAgICByZXR1cm4gZXJyb3I7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBudWxsO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSB7XG5cdCAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcblx0ICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblx0ICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG5cdCAgICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcblx0ICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBudWxsO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGV4cGVjdGVkQ2xhc3MpIHtcblx0ICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuXHQgICAgICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBleHBlY3RlZENsYXNzKSkge1xuXHQgICAgICAgIHZhciBleHBlY3RlZENsYXNzTmFtZSA9IGV4cGVjdGVkQ2xhc3MubmFtZSB8fCBBTk9OWU1PVVM7XG5cdCAgICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuXHQgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIGFjdHVhbENsYXNzTmFtZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnaW5zdGFuY2Ugb2YgYCcgKyBleHBlY3RlZENsYXNzTmFtZSArICdgLicpKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gY3JlYXRlRW51bVR5cGVDaGVja2VyKGV4cGVjdGVkVmFsdWVzKSB7XG5cdCAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRWYWx1ZXMpKSB7XG5cdCAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJykgOiB2b2lkIDA7XG5cdCAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbDtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG5cdCAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICBpZiAoaXMocHJvcFZhbHVlLCBleHBlY3RlZFZhbHVlc1tpXSkpIHtcblx0ICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciB2YWx1ZXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShleHBlY3RlZFZhbHVlcyk7XG5cdCAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdmFsdWUgYCcgKyBwcm9wVmFsdWUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuXHQgICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG5cdCAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBvYmplY3RPZi4nKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXHQgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuXHQgICAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LicpKTtcblx0ICAgICAgfVxuXHQgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcFZhbHVlKSB7XG5cdCAgICAgICAgaWYgKHByb3BWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdCAgICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuXHQgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gY3JlYXRlVW5pb25UeXBlQ2hlY2tlcihhcnJheU9mVHlwZUNoZWNrZXJzKSB7XG5cdCAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXlPZlR5cGVDaGVja2VycykpIHtcblx0ICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZSwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJykgOiB2b2lkIDA7XG5cdCAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbDtcblx0ICAgIH1cblxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcblx0ICAgICAgaWYgKHR5cGVvZiBjaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgd2FybmluZyhcblx0ICAgICAgICAgIGZhbHNlLFxuXHQgICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZCB0byBvbmVPZlR5cGUuIEV4cGVjdGVkIGFuIGFycmF5IG9mIGNoZWNrIGZ1bmN0aW9ucywgYnV0ICcgK1xuXHQgICAgICAgICAgJ3JlY2VpdmVkICVzIGF0IGluZGV4ICVzLicsXG5cdCAgICAgICAgICBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcoY2hlY2tlciksXG5cdCAgICAgICAgICBpXG5cdCAgICAgICAgKTtcblx0ICAgICAgICByZXR1cm4gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGw7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcblx0ICAgICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KSA9PSBudWxsKSB7XG5cdCAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLicpKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gY3JlYXRlTm9kZUNoZWNrZXIoKSB7XG5cdCAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcblx0ICAgICAgaWYgKCFpc05vZGUocHJvcHNbcHJvcE5hbWVdKSkge1xuXHQgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3ROb2RlLicpKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG5cdCAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcblx0ICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblx0ICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcblx0ICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuXHQgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGBvYmplY3RgLicpKTtcblx0ICAgICAgfVxuXHQgICAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuXHQgICAgICAgIHZhciBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuXHQgICAgICAgIGlmICghY2hlY2tlcikge1xuXHQgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcblx0ICAgICAgICBpZiAoZXJyb3IpIHtcblx0ICAgICAgICAgIHJldHVybiBlcnJvcjtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIGlzTm9kZShwcm9wVmFsdWUpIHtcblx0ICAgIHN3aXRjaCAodHlwZW9mIHByb3BWYWx1ZSkge1xuXHQgICAgICBjYXNlICdudW1iZXInOlxuXHQgICAgICBjYXNlICdzdHJpbmcnOlxuXHQgICAgICBjYXNlICd1bmRlZmluZWQnOlxuXHQgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICBjYXNlICdib29sZWFuJzpcblx0ICAgICAgICByZXR1cm4gIXByb3BWYWx1ZTtcblx0ICAgICAgY2FzZSAnb2JqZWN0Jzpcblx0ICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG5cdCAgICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChwcm9wVmFsdWUgPT09IG51bGwgfHwgaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuXHQgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKHByb3BWYWx1ZSk7XG5cdCAgICAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcblx0ICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuXHQgICAgICAgICAgdmFyIHN0ZXA7XG5cdCAgICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gcHJvcFZhbHVlLmVudHJpZXMpIHtcblx0ICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuXHQgICAgICAgICAgICAgIGlmICghaXNOb2RlKHN0ZXAudmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cblx0ICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuXHQgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG5cdCAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIWlzTm9kZShlbnRyeVsxXSkpIHtcblx0ICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpIHtcblx0ICAgIC8vIE5hdGl2ZSBTeW1ib2wuXG5cdCAgICBpZiAocHJvcFR5cGUgPT09ICdzeW1ib2wnKSB7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXG5cdCAgICAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuXHQgICAgaWYgKHByb3BWYWx1ZVsnQEB0b1N0cmluZ1RhZyddID09PSAnU3ltYm9sJykge1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblxuXHQgICAgLy8gRmFsbGJhY2sgZm9yIG5vbi1zcGVjIGNvbXBsaWFudCBTeW1ib2xzIHdoaWNoIGFyZSBwb2x5ZmlsbGVkLlxuXHQgICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgcHJvcFZhbHVlIGluc3RhbmNlb2YgU3ltYm9sKSB7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXG5cdCAgLy8gRXF1aXZhbGVudCBvZiBgdHlwZW9mYCBidXQgd2l0aCBzcGVjaWFsIGhhbmRsaW5nIGZvciBhcnJheSBhbmQgcmVnZXhwLlxuXHQgIGZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuXHQgICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcblx0ICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcblx0ICAgICAgcmV0dXJuICdhcnJheSc7XG5cdCAgICB9XG5cdCAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG5cdCAgICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cblx0ICAgICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG5cdCAgICAgIC8vIHBhc3NlcyBQcm9wVHlwZXMub2JqZWN0LlxuXHQgICAgICByZXR1cm4gJ29iamVjdCc7XG5cdCAgICB9XG5cdCAgICBpZiAoaXNTeW1ib2wocHJvcFR5cGUsIHByb3BWYWx1ZSkpIHtcblx0ICAgICAgcmV0dXJuICdzeW1ib2wnO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHByb3BUeXBlO1xuXHQgIH1cblxuXHQgIC8vIFRoaXMgaGFuZGxlcyBtb3JlIHR5cGVzIHRoYW4gYGdldFByb3BUeXBlYC4gT25seSB1c2VkIGZvciBlcnJvciBtZXNzYWdlcy5cblx0ICAvLyBTZWUgYGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyYC5cblx0ICBmdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpIHtcblx0ICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBwcm9wVmFsdWUgPT09IG51bGwpIHtcblx0ICAgICAgcmV0dXJuICcnICsgcHJvcFZhbHVlO1xuXHQgICAgfVxuXHQgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcblx0ICAgIGlmIChwcm9wVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcblx0ICAgICAgICByZXR1cm4gJ2RhdGUnO1xuXHQgICAgICB9IGVsc2UgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuXHQgICAgICAgIHJldHVybiAncmVnZXhwJztcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHByb3BUeXBlO1xuXHQgIH1cblxuXHQgIC8vIFJldHVybnMgYSBzdHJpbmcgdGhhdCBpcyBwb3N0Zml4ZWQgdG8gYSB3YXJuaW5nIGFib3V0IGFuIGludmFsaWQgdHlwZS5cblx0ICAvLyBGb3IgZXhhbXBsZSwgXCJ1bmRlZmluZWRcIiBvciBcIm9mIHR5cGUgYXJyYXlcIlxuXHQgIGZ1bmN0aW9uIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyh2YWx1ZSkge1xuXHQgICAgdmFyIHR5cGUgPSBnZXRQcmVjaXNlVHlwZSh2YWx1ZSk7XG5cdCAgICBzd2l0Y2ggKHR5cGUpIHtcblx0ICAgICAgY2FzZSAnYXJyYXknOlxuXHQgICAgICBjYXNlICdvYmplY3QnOlxuXHQgICAgICAgIHJldHVybiAnYW4gJyArIHR5cGU7XG5cdCAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuXHQgICAgICBjYXNlICdkYXRlJzpcblx0ICAgICAgY2FzZSAncmVnZXhwJzpcblx0ICAgICAgICByZXR1cm4gJ2EgJyArIHR5cGU7XG5cdCAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgcmV0dXJuIHR5cGU7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgLy8gUmV0dXJucyBjbGFzcyBuYW1lIG9mIHRoZSBvYmplY3QsIGlmIGFueS5cblx0ICBmdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcFZhbHVlKSB7XG5cdCAgICBpZiAoIXByb3BWYWx1ZS5jb25zdHJ1Y3RvciB8fCAhcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpIHtcblx0ICAgICAgcmV0dXJuIEFOT05ZTU9VUztcblx0ICAgIH1cblx0ICAgIHJldHVybiBwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZTtcblx0ICB9XG5cblx0ICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGNoZWNrUHJvcFR5cGVzO1xuXHQgIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG5cdCAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xuXHR9O1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKSlcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogXG5cdCAqL1xuXG5cdGZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuXHQgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gYXJnO1xuXHQgIH07XG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcblx0ICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcblx0ICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cblx0ICovXG5cdHZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5cdGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcblx0ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuXHRlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuXHRlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuXHRlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4gdGhpcztcblx0fTtcblx0ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuXHQgIHJldHVybiBhcmc7XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uO1xuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqL1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHQvKipcblx0ICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuXHQgKlxuXHQgKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuXHQgKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcblx0ICogZXhwZWN0aW5nLlxuXHQgKlxuXHQgKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuXHQgKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG5cdCAqL1xuXG5cdHZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cblx0aWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuXHQgICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcblx0ICAgIH1cblx0ICB9O1xuXHR9XG5cblx0ZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG5cdCAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuXHQgIGlmICghY29uZGl0aW9uKSB7XG5cdCAgICB2YXIgZXJyb3I7XG5cdCAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuXHQgICAgICB2YXIgYXJnSW5kZXggPSAwO1xuXHQgICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuXHQgICAgICB9KSk7XG5cdCAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG5cdCAgICB9XG5cblx0ICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcblx0ICAgIHRocm93IGVycm9yO1xuXHQgIH1cblx0fVxuXG5cdG1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygyKSkpXG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKi9cblxuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGVtcHR5RnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxuXHQvKipcblx0ICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuXHQgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG5cdCAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG5cdCAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuXHQgKi9cblxuXHR2YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cblx0aWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcblx0ICAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQpIHtcblx0ICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG5cdCAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgICAgIH1cblxuXHQgICAgICB2YXIgYXJnSW5kZXggPSAwO1xuXHQgICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcblx0ICAgICAgfSk7XG5cdCAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuXHQgICAgICB9XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuXHQgICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuXHQgICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcblx0ICAgICAgfSBjYXRjaCAoeCkge31cblx0ICAgIH07XG5cblx0ICAgIHdhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG5cdCAgICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuOyAvLyBJZ25vcmUgQ29tcG9zaXRlQ29tcG9uZW50IHByb3B0eXBlIGNoZWNrLlxuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKCFjb25kaXRpb24pIHtcblx0ICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG5cdCAgICAgICAgICBhcmdzW19rZXkyIC0gMl0gPSBhcmd1bWVudHNbX2tleTJdO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfSkoKTtcblx0fVxuXG5cdG1vZHVsZS5leHBvcnRzID0gd2FybmluZztcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMikpKVxuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqL1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG5cblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqL1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuXHQgIHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0ICB2YXIgd2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHQgIHZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXHQgIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBc3NlcnQgdGhhdCB0aGUgdmFsdWVzIG1hdGNoIHdpdGggdGhlIHR5cGUgc3BlY3MuXG5cdCAqIEVycm9yIG1lc3NhZ2VzIGFyZSBtZW1vcml6ZWQgYW5kIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gdHlwZVNwZWNzIE1hcCBvZiBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuXHQgKiBAcGFyYW0ge29iamVjdH0gdmFsdWVzIFJ1bnRpbWUgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSB0eXBlLWNoZWNrZWRcblx0ICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuXHQgKiBAcGFyYW0gez9GdW5jdGlvbn0gZ2V0U3RhY2sgUmV0dXJucyB0aGUgY29tcG9uZW50IHN0YWNrLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBnZXRTdGFjaykge1xuXHQgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG5cdCAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7XG5cdCAgICAgIGlmICh0eXBlU3BlY3MuaGFzT3duUHJvcGVydHkodHlwZVNwZWNOYW1lKSkge1xuXHQgICAgICAgIHZhciBlcnJvcjtcblx0ICAgICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuXHQgICAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cblx0ICAgICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuXHQgICAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuXHQgICAgICAgICAgaW52YXJpYW50KHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSA9PT0gJ2Z1bmN0aW9uJywgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gJyArICdSZWFjdC5Qcm9wVHlwZXMuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBsb2NhdGlvbiwgdHlwZVNwZWNOYW1lKTtcblx0ICAgICAgICAgIGVycm9yID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG5cdCAgICAgICAgfSBjYXRjaCAoZXgpIHtcblx0ICAgICAgICAgIGVycm9yID0gZXg7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHdhcm5pbmcoIWVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgRXJyb3IsICclczogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICVzIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvcik7XG5cdCAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcblx0ICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuXHQgICAgICAgICAgLy8gc2FtZSBlcnJvci5cblx0ICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cblx0ICAgICAgICAgIHZhciBzdGFjayA9IGdldFN0YWNrID8gZ2V0U3RhY2soKSA6ICcnO1xuXG5cdCAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkICVzIHR5cGU6ICVzJXMnLCBsb2NhdGlvbiwgZXJyb3IubWVzc2FnZSwgc3RhY2sgIT0gbnVsbCA/IHN0YWNrIDogJycpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0fVxuXG5cdG1vZHVsZS5leHBvcnRzID0gY2hlY2tQcm9wVHlwZXM7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMikpKVxuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqL1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgZW1wdHlGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdHZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdCAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuXHQgICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcblx0ICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICBpbnZhcmlhbnQoXG5cdCAgICAgIGZhbHNlLFxuXHQgICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG5cdCAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcblx0ICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG5cdCAgICApO1xuXHQgIH07XG5cdCAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcblx0ICBmdW5jdGlvbiBnZXRTaGltKCkge1xuXHQgICAgcmV0dXJuIHNoaW07XG5cdCAgfTtcblx0ICAvLyBJbXBvcnRhbnQhXG5cdCAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG5cdCAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuXHQgICAgYXJyYXk6IHNoaW0sXG5cdCAgICBib29sOiBzaGltLFxuXHQgICAgZnVuYzogc2hpbSxcblx0ICAgIG51bWJlcjogc2hpbSxcblx0ICAgIG9iamVjdDogc2hpbSxcblx0ICAgIHN0cmluZzogc2hpbSxcblx0ICAgIHN5bWJvbDogc2hpbSxcblxuXHQgICAgYW55OiBzaGltLFxuXHQgICAgYXJyYXlPZjogZ2V0U2hpbSxcblx0ICAgIGVsZW1lbnQ6IHNoaW0sXG5cdCAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuXHQgICAgbm9kZTogc2hpbSxcblx0ICAgIG9iamVjdE9mOiBnZXRTaGltLFxuXHQgICAgb25lT2Y6IGdldFNoaW0sXG5cdCAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG5cdCAgICBzaGFwZTogZ2V0U2hpbVxuXHQgIH07XG5cblx0ICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG5cdCAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cblx0ICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAxNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cblx0dmFyIFN0eWxlcyA9IGZ1bmN0aW9uICgpIHtcblx0ICBmdW5jdGlvbiBTdHlsZXMoYWRvbmlzLCBvcHRpb25zKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVzKTtcblxuXHQgICAgdGhpcy5fYWRvbmlzID0gYWRvbmlzO1xuXHQgICAgdGhpcy5fb3B0aW9ucyA9ICgwLCBfdXRpbHMuZGVmYXVsdHMpKG9wdGlvbnMsIHtcblx0ICAgICAgdmFyaWF0aW9uczogW10sXG5cdCAgICAgIHN0eWxlczoge30sXG5cdCAgICAgIG5hbWU6ICdVbm5hbWVkJ1xuXHQgICAgfSk7XG5cblx0ICAgIHZhciBfYWRvbmlzJGdldE9wdGlvbnMgPSB0aGlzLl9hZG9uaXMuZ2V0T3B0aW9ucygpLFxuXHQgICAgICAgIGhhc2hlZFN0eWxlcyA9IF9hZG9uaXMkZ2V0T3B0aW9ucy5oYXNoZWRTdHlsZXM7XG5cblx0ICAgIGlmIChoYXNoZWRTdHlsZXMgJiYgdHlwZW9mIHRoaXMuX29wdGlvbnMuc3R5bGVzICE9PSAnc3RyaW5nJykge1xuXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bhc3Npbmcgc3R5bGUgb2JqZWN0cyB3aXRoIGBoYXNoZWRTdHlsZXNgIHNldCB0byB0cnVlIGlzIGludmFsaWQuJyk7XG5cdCAgICB9XG5cdCAgICB0aGlzLl9oYXNoID0gaGFzaGVkU3R5bGVzID8gdGhpcy5fb3B0aW9ucy5zdHlsZXMgOiAoMCwgX3V0aWxzLmhhc2hPYmplY3QpKHRoaXMuX29wdGlvbnMuc3R5bGVzKTtcblx0ICAgIHRoaXMuX3ZhcmlhdGlvbkhhc2hlcyA9IHRoaXMuX2hhc2hWYXJpYXRpb25zKCk7XG5cdCAgfVxuXG5cdCAgLyoqXG5cdCAgICogR2VuZXJhdGVzIGhhc2hlcyBmb3IgYWxsIGV4aXN0aW5nIHZhcmlhdGlvbnNcblx0ICAgKiBAcmV0dXJuIHtPYmplY3R9XG5cdCAgICogQHByaXZhdGVcblx0ICAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzKFN0eWxlcywgW3tcblx0ICAgIGtleTogJ19oYXNoVmFyaWF0aW9ucycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2hhc2hWYXJpYXRpb25zKCkge1xuXHQgICAgICB2YXIgaGFzaGVzID0ge307XG5cblx0ICAgICAgdmFyIF9hZG9uaXMkZ2V0T3B0aW9uczIgPSB0aGlzLl9hZG9uaXMuZ2V0T3B0aW9ucygpLFxuXHQgICAgICAgICAgaGFzaGVkU3R5bGVzID0gX2Fkb25pcyRnZXRPcHRpb25zMi5oYXNoZWRTdHlsZXM7XG5cblx0ICAgICAgdmFyIHZhcmlhdGlvbnMgPSB0aGlzLl9vcHRpb25zLnZhcmlhdGlvbnM7XG5cblx0ICAgICAgZm9yICh2YXIgdmFyaWF0aW9uIGluIHZhcmlhdGlvbnMpIHtcblx0ICAgICAgICB2YXIgdmFyaWF0aW9uU3R5bGVzID0gdmFyaWF0aW9uc1t2YXJpYXRpb25dO1xuXHQgICAgICAgIGhhc2hlc1t2YXJpYXRpb25dID0gaGFzaGVkU3R5bGVzID8gdmFyaWF0aW9uU3R5bGVzIDogKDAsIF91dGlscy5oYXNoT2JqZWN0KSh2YXJpYXRpb25TdHlsZXMpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBoYXNoZXM7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJucyBhbiBpZGVudGlmaWVyIGZvciB0aGUgZ2l2ZW4gYWN0aXZlIHZhcmlhdGlvbnNcblx0ICAgICAqIEBwYXJhbSAge1N0cmluZ1tdfSB2YXJpYXRpb25zXG5cdCAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldElkZW50aWZpZXJGb3JWYXJpYXRpb25zJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJZGVudGlmaWVyRm9yVmFyaWF0aW9ucyh2YXJpYXRpb25zKSB7XG5cdCAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cblx0ICAgICAgdmFyIG5hbWUgPSB0aGlzLl9vcHRpb25zLm5hbWU7XG5cblx0ICAgICAgdmFyIF9hZG9uaXMkZ2V0T3B0aW9uczMgPSB0aGlzLl9hZG9uaXMuZ2V0T3B0aW9ucygpLFxuXHQgICAgICAgICAgaGFzaFNlcGFyYXRvciA9IF9hZG9uaXMkZ2V0T3B0aW9uczMuaGFzaFNlcGFyYXRvcixcblx0ICAgICAgICAgIHZhcmlhdGlvblNlcGFyYXRvciA9IF9hZG9uaXMkZ2V0T3B0aW9uczMudmFyaWF0aW9uU2VwYXJhdG9yO1xuXG5cdCAgICAgIHZhciBpZGVudGlmaWVyID0gJycgKyBuYW1lICsgaGFzaFNlcGFyYXRvciArIHRoaXMuX2hhc2g7XG5cdCAgICAgIHZhcmlhdGlvbnMuc29ydCgpLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhdGlvbikge1xuXHQgICAgICAgIHZhciBoYXNoID0gX3RoaXMuX3ZhcmlhdGlvbkhhc2hlc1t2YXJpYXRpb25dO1xuXHQgICAgICAgIGlmICghaGFzaCkgcmV0dXJuO1xuXHQgICAgICAgIGlkZW50aWZpZXIgKz0gJycgKyB2YXJpYXRpb25TZXBhcmF0b3IgKyB2YXJpYXRpb24gKyBoYXNoU2VwYXJhdG9yICsgaGFzaDtcblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBpZGVudGlmaWVyO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybnMgdGhlIHN0eWxlcyBvYmplY3Rcblx0ICAgICAqIEByZXR1cm4ge09iamVjdH1cblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0U3R5bGVzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zLnN0eWxlcztcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBSZXR1cm5zIHRoZSBzdHlsZXMgZm9yIHRoZSBnaXZlbiB2YXJpYXRpb25zXG5cdCAgICAgKiBAcGFyYW0gIHtTdHJpbmdbXX0gdmFyaWF0aW9uc1xuXHQgICAgICogQHJldHVybiB7T2JqZWN0W119XG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFZhcmlhdGlvblN0eWxlcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmFyaWF0aW9uU3R5bGVzKHZhcmlhdGlvbnMpIHtcblx0ICAgICAgdmFyIGFsbFZhcmlhdGlvbnMgPSB0aGlzLl9vcHRpb25zLnZhcmlhdGlvbnM7XG5cblx0ICAgICAgaWYgKCF2YXJpYXRpb25zKSByZXR1cm4gYWxsVmFyaWF0aW9ucztcblxuXHQgICAgICByZXR1cm4gdmFyaWF0aW9ucy5tYXAoZnVuY3Rpb24gKHZhcmlhdGlvbikge1xuXHQgICAgICAgIHJldHVybiBhbGxWYXJpYXRpb25zW3ZhcmlhdGlvbl07XG5cdCAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAodikge1xuXHQgICAgICAgIHJldHVybiB2O1xuXHQgICAgICB9KTtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBSZXR1cm5zIGFsbCBhdmFpbGFibGUgdmFyaWF0aW9uc1xuXHQgICAgICogQHJldHVybiB7U3RyaW5nW119XG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFZhcmlhdGlvbnMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZhcmlhdGlvbnMoKSB7XG5cdCAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9vcHRpb25zLnZhcmlhdGlvbnMgfHwge30pO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBTdHlsZXM7XG5cdH0oKTtcblxuXHRleHBvcnRzLmRlZmF1bHQgPSBTdHlsZXM7XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuXHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuXHR2YXIgX3J1bGVzZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblxuXHR2YXIgX3J1bGVzZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnVsZXNldCk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdHZhciBTdHlsZXNNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIFN0eWxlc01hbmFnZXIoYWRvbmlzLCBzdHlsZXMsIGFjdGl2ZVZhcmlhdGlvbnMsIHRoZW1lKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVzTWFuYWdlcik7XG5cblx0ICAgIHRoaXMuX2Fkb25pcyA9IGFkb25pcztcblx0ICAgIHRoaXMuX3N0eWxlcyA9IHN0eWxlcztcblx0ICAgIHRoaXMuX3RoZW1lID0gdGhlbWU7XG5cdCAgICB0aGlzLl9hY3RpdmVWYXJpYXRpb25zID0gYWN0aXZlVmFyaWF0aW9ucztcblx0ICAgIHRoaXMuX2NsYXNzTmFtZSA9IHRoaXMuX2dlbmVyYXRlQ2xhc3NOYW1lKHRoaXMuX2FjdGl2ZVZhcmlhdGlvbnMpO1xuXHQgICAgdGhpcy5fYmFzZVNlbGVjdG9yID0gJy4nICsgdGhpcy5fY2xhc3NOYW1lO1xuXHQgICAgdGhpcy5fcnVsZXNldHMgPSB0aGlzLl9nZW5lcmF0ZVJ1bGVzZXRzKCk7XG5cdCAgfVxuXG5cdCAgLyoqXG5cdCAgICogR2VuZXJhdGVzIHRoZSBDU1Mgb2YgYWxsIHJ1bGVzZXRzXG5cdCAgICogQHJldHVybiB7U3RyaW5nW119XG5cdCAgICovXG5cblxuXHQgIF9jcmVhdGVDbGFzcyhTdHlsZXNNYW5hZ2VyLCBbe1xuXHQgICAga2V5OiAnZ2VuZXJhdGVDU1MnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlQ1NTKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fcnVsZXNldHMubWFwKGZ1bmN0aW9uIChydWxlc2V0KSB7XG5cdCAgICAgICAgcmV0dXJuIHJ1bGVzZXQudG9DU1MoKTtcblx0ICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG5cdCAgICAgICAgcmV0dXJuIHI7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIEJ1ZmZlcnMgdGhlIHJ1bGVzZXRzIHRoYXQgaGF2ZSBub3QgYmVlbiBidWZmZXJlZCB5ZXRcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiAnYnVmZmVyUnVsZXNldHMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGJ1ZmZlclJ1bGVzZXRzKCkge1xuXHQgICAgICB2YXIgc3R5bGVzQnVmZmVyID0gdGhpcy5fYWRvbmlzLmdldFN0eWxlc0J1ZmZlcigpO1xuXHQgICAgICB2YXIgcnVsZXNldHMgPSB0aGlzLl9ydWxlc2V0cy5maWx0ZXIoZnVuY3Rpb24gKHJ1bGVzZXQpIHtcblx0ICAgICAgICByZXR1cm4gIXN0eWxlc0J1ZmZlci5pc1NlbGVjdG9yQnVmZmVyZWQocnVsZXNldC5nZXRTZWxlY3RvcigpKSAmJiBydWxlc2V0Lmhhc0RlY2xhcmF0aW9ucygpO1xuXHQgICAgICB9KS5tYXAoZnVuY3Rpb24gKHJ1bGVzZXQpIHtcblx0ICAgICAgICByZXR1cm4gW3J1bGVzZXQuZ2V0U2VsZWN0b3IoKSwgcnVsZXNldC50b0NTUygpXTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHN0eWxlc0J1ZmZlci5idWZmZXJSdWxlc2V0cyhydWxlc2V0cyk7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJucyB0aGUgZGVlcGx5IG1lcmdlZCBzdHlsZXMgb2JqZWN0XG5cdCAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBhY3RpdmVWYXJpYXRpb25zID0gW11cblx0ICAgICAqIEByZXR1cm4ge09iamVjdH1cblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogJ19nZXRDb21iaW5lZFN0eWxlcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2dldENvbWJpbmVkU3R5bGVzKCkge1xuXHQgICAgICB2YXIgYWN0aXZlVmFyaWF0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cblx0ICAgICAgdmFyIGFsbFN0eWxlcyA9ICgwLCBfdXRpbHMuZmxhdHRlbikodGhpcy5fc3R5bGVzLm1hcChmdW5jdGlvbiAocykge1xuXHQgICAgICAgIHJldHVybiBbcy5nZXRTdHlsZXMoKSwgcy5nZXRWYXJpYXRpb25TdHlsZXMoYWN0aXZlVmFyaWF0aW9ucyldO1xuXHQgICAgICB9KSk7XG5cblx0ICAgICAgcmV0dXJuICgwLCBfdXRpbHMuZGVlcE1lcmdlQWxsKShhbGxTdHlsZXMpO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIEdlbmVyYXRlcyB0aGUgY2xhc3MgbmFtZVxuXHQgICAgICogQHBhcmFtIHtTdHJpbmdbXX0gYWN0aXZlVmFyaWF0aW9ucyA9IFtdXG5cdCAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdfZ2VuZXJhdGVDbGFzc05hbWUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZW5lcmF0ZUNsYXNzTmFtZSgpIHtcblx0ICAgICAgdmFyIGFjdGl2ZVZhcmlhdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuXG5cdCAgICAgIHZhciBfYWRvbmlzJGdldE9wdGlvbnMgPSB0aGlzLl9hZG9uaXMuZ2V0T3B0aW9ucygpLFxuXHQgICAgICAgICAgbmFtZVNlcGFyYXRvciA9IF9hZG9uaXMkZ2V0T3B0aW9ucy5uYW1lU2VwYXJhdG9yLFxuXHQgICAgICAgICAgY2xhc3NOYW1lUHJlZml4ID0gX2Fkb25pcyRnZXRPcHRpb25zLmNsYXNzTmFtZVByZWZpeDtcblxuXHQgICAgICByZXR1cm4gY2xhc3NOYW1lUHJlZml4ICsgdGhpcy5fc3R5bGVzLm1hcChmdW5jdGlvbiAoc3R5bGUpIHtcblx0ICAgICAgICByZXR1cm4gc3R5bGUuZ2V0SWRlbnRpZmllckZvclZhcmlhdGlvbnMoYWN0aXZlVmFyaWF0aW9ucyk7XG5cdCAgICAgIH0pLmpvaW4obmFtZVNlcGFyYXRvcik7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogR2VuZXJhdGVzIHRoZSBydWxlc2V0cyBhbmQgc3ViIHJ1bGVzZXRzXG5cdCAgICAgKiBAcmV0dXJuIHtSdWxlc2V0W119XG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdfZ2VuZXJhdGVSdWxlc2V0cycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2dlbmVyYXRlUnVsZXNldHMoKSB7XG5cdCAgICAgIHZhciBkZWZhdWx0UnVsZXNldCA9IG5ldyBfcnVsZXNldDIuZGVmYXVsdCh0aGlzLl9hZG9uaXMsIHRoaXMuX2Jhc2VTZWxlY3RvciwgdGhpcy5fZ2V0Q29tYmluZWRTdHlsZXModGhpcy5fYWN0aXZlVmFyaWF0aW9ucyksIHtcblx0ICAgICAgICB0aGVtZTogdGhpcy5fdGhlbWVcblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiAoMCwgX3V0aWxzLmZsYXR0ZW4pKFtkZWZhdWx0UnVsZXNldCwgZGVmYXVsdFJ1bGVzZXQuZ2V0U3ViUnVsZXNldHMoKV0pO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybnMgdGhlIGNsYXNzIG5hbWVcblx0ICAgICAqIEByZXR1cm4ge1N0cmluZ31cblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0Q2xhc3NOYW1lJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDbGFzc05hbWUoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9jbGFzc05hbWU7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIFN0eWxlc01hbmFnZXI7XG5cdH0oKTtcblxuXHRleHBvcnRzLmRlZmF1bHQgPSBTdHlsZXNNYW5hZ2VyO1xuXG4vKioqLyB9KSxcbi8qIDE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cblx0dmFyIF9kZWNsYXJhdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuXG5cdHZhciBfZGVjbGFyYXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVjbGFyYXRpb24pO1xuXG5cdHZhciBfZXh0ZW5zaW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXG5cdHZhciBfZXh0ZW5zaW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbnNpb25zKTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cblx0dmFyIFJ1bGVzZXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgZnVuY3Rpb24gUnVsZXNldChhZG9uaXMsIHNlbGVjdG9yLCBzdHlsZXMsIG9wdGlvbnMpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSdWxlc2V0KTtcblxuXHQgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG5cblx0ICAgIHRoaXMuX2Fkb25pcyA9IGFkb25pcztcblx0ICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdCAgICB0aGlzLl9zdHlsZXMgPSBzdHlsZXM7XG5cdCAgICB0aGlzLl9yZXNvbHZlZFN0eWxlcyA9ICgwLCBfdXRpbHMucmVzb2x2ZVN0eWxlc09iamVjdCkodGhpcy5fc3R5bGVzLCB0aGlzLl9vcHRpb25zLnRoZW1lKTtcblxuXHQgICAgdmFyIF9hZG9uaXMkZ2V0T3B0aW9ucyA9IHRoaXMuX2Fkb25pcy5nZXRPcHRpb25zKCksXG5cdCAgICAgICAgaGFzaGVkU3R5bGVzID0gX2Fkb25pcyRnZXRPcHRpb25zLmhhc2hlZFN0eWxlcztcblxuXHQgICAgdGhpcy5faGFzaCA9IGhhc2hlZFN0eWxlcyA/IHRoaXMuX3N0eWxlcyA6ICgwLCBfdXRpbHMuaGFzaE9iamVjdCkodGhpcy5fc3R5bGVzKTtcblxuXHQgICAgdmFyIF9wYXJzZVN0eWxlczIgPSB0aGlzLl9wYXJzZVN0eWxlcygpLFxuXHQgICAgICAgIHN1YlJ1bGVzZXRzID0gX3BhcnNlU3R5bGVzMi5zdWJSdWxlc2V0cyxcblx0ICAgICAgICBkZWNsYXJhdGlvbnMgPSBfcGFyc2VTdHlsZXMyLmRlY2xhcmF0aW9ucztcblxuXHQgICAgdGhpcy5fc3ViUnVsZXNldHMgPSBzdWJSdWxlc2V0cztcblx0ICAgIHRoaXMuX2RlY2xhcmF0aW9ucyA9IGRlY2xhcmF0aW9ucztcblx0ICB9XG5cblx0ICAvKipcblx0ICAgKiBJZiBhbnkgcmVnaXN0ZXJlZCBleHRlbnNpb24gcmVzb2x2ZXMgdGhlIGdpdmVuIGtleSB0byBhIHN1YiBydWxlc2V0LCB0aGlzIG1ldGhvZFxuXHQgICAqIHJldHVybnMgdGhlIG5ldyBSdWxlc2V0XG5cdCAgICogQHBhcmFtICB7U3RyaW5nfSBrZXlcblx0ICAgKiBAcGFyYW0gIHtTdHJpbmd8T2JqZWN0fSB2YWx1ZVxuXHQgICAqIEByZXR1cm4ge1J1bGVzZXR9XG5cdCAgICogQHByaXZhdGVcblx0ICAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzKFJ1bGVzZXQsIFt7XG5cdCAgICBrZXk6ICdfZ2V0U3ViUnVsZXNldCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFN1YlJ1bGVzZXQoa2V5LCB2YWx1ZSkge1xuXHQgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICAgIHZhciBfYWRvbmlzJGdldE9wdGlvbnMyID0gdGhpcy5fYWRvbmlzLmdldE9wdGlvbnMoKSxcblx0ICAgICAgICAgIG1pbmlmaWVkID0gX2Fkb25pcyRnZXRPcHRpb25zMi5taW5pZmllZDtcblxuXHQgICAgICB2YXIgc3ViUnVsZXNldCA9IG51bGw7XG5cdCAgICAgIHZhciBnZW5lcmF0ZVN1YlJ1bGVzZXQgPSBmdW5jdGlvbiBnZW5lcmF0ZVN1YlJ1bGVzZXQobmV3U2VsZWN0b3IsIHBhcmVudFNlbGVjdG9yKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSAoMCwgX3V0aWxzLmRlZXBNZXJnZSkoX3RoaXMuX29wdGlvbnMsIHtcblx0ICAgICAgICAgIHBhcmVudFNlbGVjdG9yOiBwYXJlbnRTZWxlY3RvclxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHN1YlJ1bGVzZXQgPSBuZXcgUnVsZXNldChfdGhpcy5fYWRvbmlzLCBuZXdTZWxlY3RvciwgdmFsdWUsIG9wdGlvbnMpO1xuXHQgICAgICB9O1xuXG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX2V4dGVuc2lvbnMyLmRlZmF1bHQubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIgZXh0ZW5zaW9uID0gX2V4dGVuc2lvbnMyLmRlZmF1bHRbaV07XG5cdCAgICAgICAgZXh0ZW5zaW9uKGtleSwgdGhpcy5fc2VsZWN0b3IsIGdlbmVyYXRlU3ViUnVsZXNldCwgbWluaWZpZWQpO1xuXHQgICAgICAgIGlmIChzdWJSdWxlc2V0KSByZXR1cm4gc3ViUnVsZXNldDtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFBhcnNlcyB0aGlzIHJ1bGVzZXQncyBzdHlsZXMgb2JqZWN0IGFuZCByZXR1cm5zIHRoZSBwYXJzZWQgZGVjbGFyYXRpb25zIGFuZCBzdWIgcnVsZXNldHNcblx0ICAgICAqIEByZXR1cm4ge09iamVjdH1cblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogJ19wYXJzZVN0eWxlcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX3BhcnNlU3R5bGVzKCkge1xuXHQgICAgICB2YXIgc3ViUnVsZXNldHMgPSBbXTtcblx0ICAgICAgdmFyIGRlY2xhcmF0aW9ucyA9IFtdO1xuXHQgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fcmVzb2x2ZWRTdHlsZXMpIHtcblx0ICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9yZXNvbHZlZFN0eWxlc1trZXldO1xuXHQgICAgICAgIHZhciBzdWJSdWxlc2V0ID0gdGhpcy5fZ2V0U3ViUnVsZXNldChrZXksIHZhbHVlKTtcblx0ICAgICAgICBpZiAoc3ViUnVsZXNldCkge1xuXHQgICAgICAgICAgc3ViUnVsZXNldHMucHVzaChzdWJSdWxlc2V0LCBzdWJSdWxlc2V0LmdldFN1YlJ1bGVzZXRzKCkpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBkZWNsYXJhdGlvbnMucHVzaChuZXcgX2RlY2xhcmF0aW9uMi5kZWZhdWx0KHRoaXMuX2Fkb25pcywga2V5LCB2YWx1ZSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4geyBzdWJSdWxlc2V0czogc3ViUnVsZXNldHMsIGRlY2xhcmF0aW9uczogZGVjbGFyYXRpb25zIH07XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJucyB0aGUgQ1NTIHN0cmluZyBmb3IgdGhpcyBydWxlc2V0XG5cdCAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3RvQ1NTJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b0NTUygpIHtcblx0ICAgICAgdmFyIHBhcmVudFNlbGVjdG9yID0gdGhpcy5fb3B0aW9ucy5wYXJlbnRTZWxlY3RvcjtcblxuXHQgICAgICB2YXIgX2Fkb25pcyRnZXRPcHRpb25zMyA9IHRoaXMuX2Fkb25pcy5nZXRPcHRpb25zKCksXG5cdCAgICAgICAgICBtaW5pZmllZCA9IF9hZG9uaXMkZ2V0T3B0aW9uczMubWluaWZpZWQsXG5cdCAgICAgICAgICBjc3NTZWxlY3RvclByZWZpeCA9IF9hZG9uaXMkZ2V0T3B0aW9uczMuY3NzU2VsZWN0b3JQcmVmaXg7XG5cblx0ICAgICAgaWYgKHRoaXMuX2RlY2xhcmF0aW9ucy5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG5cdCAgICAgIHZhciBwYXJlbnRJc0F0UnVsZSA9IHBhcmVudFNlbGVjdG9yICYmIHBhcmVudFNlbGVjdG9yLm1hdGNoKC9eQC8pO1xuXG5cdCAgICAgIHZhciBjc3MgPSAnJztcblx0ICAgICAgdmFyIGluZGVudGF0aW9uID0gJyc7XG5cdCAgICAgIGlmIChwYXJlbnRTZWxlY3Rvcikge1xuXHQgICAgICAgIGlmIChjc3NTZWxlY3RvclByZWZpeCAmJiAhcGFyZW50SXNBdFJ1bGUpIHtcblx0ICAgICAgICAgIGNzcyArPSBjc3NTZWxlY3RvclByZWZpeDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY3NzICs9IHBhcmVudFNlbGVjdG9yICsgKG1pbmlmaWVkID8gJ3snIDogJyB7XFxuJyk7XG5cdCAgICAgICAgaW5kZW50YXRpb24gPSAnICAnO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGNzcyArPSBjc3NTZWxlY3RvclByZWZpeDtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciBzZWxlY3RvciA9ICcnO1xuXHQgICAgICBpZiAoY3NzU2VsZWN0b3JQcmVmaXggJiYgcGFyZW50SXNBdFJ1bGUpIHtcblx0ICAgICAgICBzZWxlY3RvciArPSBjc3NTZWxlY3RvclByZWZpeDtcblx0ICAgICAgfVxuXHQgICAgICBzZWxlY3RvciArPSB0aGlzLl9zZWxlY3RvcjtcblxuXHQgICAgICBjc3MgKz0gaW5kZW50YXRpb24gKyBzZWxlY3RvciArIChtaW5pZmllZCA/ICd7JyA6ICcge1xcbicpO1xuXHQgICAgICB0aGlzLl9kZWNsYXJhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkge1xuXHQgICAgICAgIGNzcyArPSBpbmRlbnRhdGlvbiArIHJ1bGUudG9DU1MoKSArIChtaW5pZmllZCA/ICcnIDogJ1xcbicpO1xuXHQgICAgICB9KTtcblx0ICAgICAgY3NzICs9IGluZGVudGF0aW9uICsgJ30nO1xuXG5cdCAgICAgIGlmIChwYXJlbnRTZWxlY3Rvcikge1xuXHQgICAgICAgIGNzcyArPSBtaW5pZmllZCA/ICd9JyA6ICdcXG59Jztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gY3NzO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybnMgdGhpcyBydWxlc2V0J3Mgc3ViIHJ1bGVzZXRzXG5cdCAgICAgKiBAcmV0dXJuIHtSdWxlc2V0W119XG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFN1YlJ1bGVzZXRzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdWJSdWxlc2V0cygpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX3N1YlJ1bGVzZXRzO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIENoZWNrcyBpZiB0aGlzIHJ1bGVzZXQgaGFzIGRlY2xhcmF0aW9uc1xuXHQgICAgICogQHJldHVybiB7Qm9vbGVhbn1cblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFzRGVjbGFyYXRpb25zJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNEZWNsYXJhdGlvbnMoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9kZWNsYXJhdGlvbnMubGVuZ3RoICE9PSAwO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybnMgdGhlIHNlbGVjdG9yXG5cdCAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFNlbGVjdG9yJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWxlY3RvcigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdG9yO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBSdWxlc2V0O1xuXHR9KCk7XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gUnVsZXNldDtcblxuLyoqKi8gfSksXG4vKiAxOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHR2YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuXHR2YXIgX2Nzc1ByZWZpeGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cblx0dmFyIF9jc3NQcmVmaXhlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jc3NQcmVmaXhlcyk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdHZhciBEZWNsYXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICBmdW5jdGlvbiBEZWNsYXJhdGlvbihhZG9uaXMsIGtleSwgdmFsdWUpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZWNsYXJhdGlvbik7XG5cblx0ICAgIHRoaXMuX2Fkb25pcyA9IGFkb25pcztcblx0ICAgIHRoaXMua2V5ID0ga2V5O1xuXHQgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuXHQgICAgdGhpcy5jc3NLZXkgPSB0aGlzLmtleS5yZXBsYWNlKC8oW0EtWl0pL2csIGZ1bmN0aW9uIChnKSB7XG5cdCAgICAgIHJldHVybiAnLScgKyBnWzBdLnRvTG93ZXJDYXNlKCk7XG5cdCAgICB9KTtcblx0ICB9XG5cblx0ICAvKipcblx0ICAgKiBJZiB0aGlzIGRlY2xhcmF0aW9uJ3Mga2V5IHJlcXVpcmVzIHZlbmRvciBwcmVmaXhlcywgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGFycmF5IG9mIFtrZXksIHZhbHVlXVxuXHQgICAqIHBhaXJzIHdpdGggcHJlZml4ZWQga2V5cy5cblx0ICAgKiBAcmV0dXJuIHtBcnJheVtdfVxuXHQgICAqIEBwcml2YXRlXG5cdCAgICovXG5cblxuXHQgIF9jcmVhdGVDbGFzcyhEZWNsYXJhdGlvbiwgW3tcblx0ICAgIGtleTogJ19nZXRBdXRvUHJlZml4ZWRLZXlQYWlycycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEF1dG9QcmVmaXhlZEtleVBhaXJzKCkge1xuXHQgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICAgIHZhciBwcmVmaXhlcyA9IF9jc3NQcmVmaXhlczIuZGVmYXVsdFt0aGlzLmtleV07XG5cdCAgICAgIHZhciBrZXlQYWlycyA9IFtdO1xuXHQgICAgICBpZiAocHJlZml4ZXMpIHtcblx0ICAgICAgICBwcmVmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcblx0ICAgICAgICAgIGtleVBhaXJzLnB1c2goWyctJyArIHByZWZpeCArICctJyArIF90aGlzLmNzc0tleSwgX3RoaXMudmFsdWVdKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4ga2V5UGFpcnM7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJucyB0aGUgQ1NTIHN0cmluZyBmb3IgdGhpcyBkZWNsYXJhdGlvblxuXHQgICAgICogQHJldHVybiB7U3RyaW5nfVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6ICd0b0NTUycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9DU1MoKSB7XG5cdCAgICAgIHZhciBfYWRvbmlzJGdldE9wdGlvbnMgPSB0aGlzLl9hZG9uaXMuZ2V0T3B0aW9ucygpLFxuXHQgICAgICAgICAgbWluaWZpZWQgPSBfYWRvbmlzJGdldE9wdGlvbnMubWluaWZpZWQsXG5cdCAgICAgICAgICBhdXRvUHJlZml4ID0gX2Fkb25pcyRnZXRPcHRpb25zLmF1dG9QcmVmaXg7XG5cblx0ICAgICAgdmFyIGtleVBhaXJzID0gW1t0aGlzLmNzc0tleSwgdGhpcy52YWx1ZV1dO1xuXHQgICAgICBpZiAoYXV0b1ByZWZpeCkge1xuXHQgICAgICAgIGtleVBhaXJzID0ga2V5UGFpcnMuY29uY2F0KHRoaXMuX2dldEF1dG9QcmVmaXhlZEtleVBhaXJzKCkpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGtleVBhaXJzLm1hcChmdW5jdGlvbiAoX3JlZikge1xuXHQgICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuXHQgICAgICAgICAgICBrZXkgPSBfcmVmMlswXSxcblx0ICAgICAgICAgICAgdmFsdWUgPSBfcmVmMlsxXTtcblxuXHQgICAgICAgIHJldHVybiAnJyArIChtaW5pZmllZCA/ICcnIDogJyAgJykgKyBrZXkgKyAnOicgKyAobWluaWZpZWQgPyAnJyA6ICcgJykgKyB2YWx1ZSArICc7Jztcblx0ICAgICAgfSkuam9pbihtaW5pZmllZCA/ICcnIDogJ1xcbicpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBEZWNsYXJhdGlvbjtcblx0fSgpO1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IERlY2xhcmF0aW9uO1xuXG4vKioqLyB9KSxcbi8qIDIwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHR2YXIgd2sgPSAnd2Via2l0Jztcblx0dmFyIG16ID0gJ21veic7XG5cdHZhciBtcyA9ICdtcyc7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IHtcblx0ICBhcHBlYXJhbmNlOiBbd2ssIG16XSxcblx0ICB1c2VyU2VsZWN0OiBbd2ssIG16LCBtc10sXG5cdCAgdGV4dEVtcGhhc2lzUG9zaXRpb246IFt3a10sXG5cdCAgdGV4dEVtcGhhc2lzOiBbd2tdLFxuXHQgIHRleHRFbXBoYXNpc1N0eWxlOiBbd2tdLFxuXHQgIHRleHRFbXBoYXNpc0NvbG9yOiBbd2tdLFxuXHQgIGJveERlY29yYXRpb25CcmVhazogW3drXSxcblx0ICBjbGlwUGF0aDogW3drXSxcblx0ICBtYXNrSW1hZ2U6IFt3a10sXG5cdCAgbWFza01vZGU6IFt3a10sXG5cdCAgbWFza1JlcGVhdDogW3drXSxcblx0ICBtYXNrUG9zaXRpb246IFt3a10sXG5cdCAgbWFza0NsaXA6IFt3a10sXG5cdCAgbWFza09yaWdpbjogW3drXSxcblx0ICBtYXNrU2l6ZTogW3drXSxcblx0ICBtYXNrQ29tcG9zaXRlOiBbd2tdLFxuXHQgIG1hc2s6IFt3a10sXG5cdCAgbWFza0JvcmRlclNvdXJjZTogW3drXSxcblx0ICBtYXNrQm9yZGVyTW9kZTogW3drXSxcblx0ICBtYXNrQm9yZGVyU2xpY2U6IFt3a10sXG5cdCAgbWFza0JvcmRlcldpZHRoOiBbd2tdLFxuXHQgIG1hc2tCb3JkZXJPdXRzZXQ6IFt3a10sXG5cdCAgbWFza0JvcmRlclJlcGVhdDogW3drXSxcblx0ICBtYXNrQm9yZGVyOiBbd2tdLFxuXHQgIG1hc2tUeXBlOiBbd2tdLFxuXHQgIHRleHREZWNvcmF0aW9uU3R5bGU6IFt3a10sXG5cdCAgdGV4dERlY29yYXRpb25Ta2lwOiBbd2tdLFxuXHQgIHRleHREZWNvcmF0aW9uTGluZTogW3drXSxcblx0ICB0ZXh0RGVjb3JhdGlvbkNvbG9yOiBbd2tdLFxuXHQgIGZpbHRlcjogW3drXSxcblx0ICBmb250RmVhdHVyZVNldHRpbmdzOiBbd2tdLFxuXHQgIGJyZWFrQWZ0ZXI6IFt3aywgbXosIG1zXSxcblx0ICBicmVha0JlZm9yZTogW3drLCBteiwgbXNdLFxuXHQgIGJyZWFrSW5zaWRlOiBbd2ssIG16LCBtc10sXG5cdCAgY29sdW1uQ291bnQ6IFt3aywgbXpdLFxuXHQgIGNvbHVtbkZpbGw6IFt3aywgbXpdLFxuXHQgIGNvbHVtbkdhcDogW3drLCBtel0sXG5cdCAgY29sdW1uUnVsZTogW3drLCBtel0sXG5cdCAgY29sdW1uUnVsZUNvbG9yOiBbd2ssIG16XSxcblx0ICBjb2x1bW5SdWxlU3R5bGU6IFt3aywgbXpdLFxuXHQgIGNvbHVtblJ1bGVXaWR0aDogW3drLCBtel0sXG5cdCAgY29sdW1uczogW3drLCBtel0sXG5cdCAgY29sdW1uU3BhbjogW3drLCBtel0sXG5cdCAgY29sdW1uV2lkdGg6IFt3aywgbXpdLFxuXHQgIGZsZXg6IFt3a10sXG5cdCAgZmxleEJhc2lzOiBbd2tdLFxuXHQgIGZsZXhEaXJlY3Rpb246IFt3a10sXG5cdCAgZmxleEdyb3c6IFt3a10sXG5cdCAgZmxleEZsb3c6IFt3a10sXG5cdCAgZmxleFNocmluazogW3drXSxcblx0ICBmbGV4V3JhcDogW3drXSxcblx0ICBhbGlnbkNvbnRlbnQ6IFt3a10sXG5cdCAgYWxpZ25JdGVtczogW3drXSxcblx0ICBhbGlnblNlbGY6IFt3a10sXG5cdCAganVzdGlmeUNvbnRlbnQ6IFt3a10sXG5cdCAgb3JkZXI6IFt3a10sXG5cdCAgdHJhbnNmb3JtOiBbd2tdLFxuXHQgIHRyYW5zZm9ybU9yaWdpbjogW3drXSxcblx0ICB0cmFuc2Zvcm1PcmlnaW5YOiBbd2tdLFxuXHQgIHRyYW5zZm9ybU9yaWdpblk6IFt3a10sXG5cdCAgYmFja2ZhY2VWaXNpYmlsaXR5OiBbd2tdLFxuXHQgIHBlcnNwZWN0aXZlOiBbd2tdLFxuXHQgIHBlcnNwZWN0aXZlT3JpZ2luOiBbd2tdLFxuXHQgIHRyYW5zZm9ybVN0eWxlOiBbd2tdLFxuXHQgIHRyYW5zZm9ybU9yaWdpblo6IFt3a10sXG5cdCAgYW5pbWF0aW9uOiBbd2tdLFxuXHQgIGFuaW1hdGlvbkRlbGF5OiBbd2tdLFxuXHQgIGFuaW1hdGlvbkRpcmVjdGlvbjogW3drXSxcblx0ICBhbmltYXRpb25GaWxsTW9kZTogW3drXSxcblx0ICBhbmltYXRpb25EdXJhdGlvbjogW3drXSxcblx0ICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogW3drXSxcblx0ICBhbmltYXRpb25OYW1lOiBbd2tdLFxuXHQgIGFuaW1hdGlvblBsYXlTdGF0ZTogW3drXSxcblx0ICBhbmltYXRpb25UaW1pbmdGdW5jdGlvbjogW3drXSxcblx0ICBiYWNrZHJvcEZpbHRlcjogW3drXSxcblx0ICBmb250S2VybmluZzogW3drXSxcblx0ICBzY3JvbGxTbmFwVHlwZTogW3drLCBtc10sXG5cdCAgc2Nyb2xsU25hcFBvaW50c1g6IFt3aywgbXNdLFxuXHQgIHNjcm9sbFNuYXBQb2ludHNZOiBbd2ssIG1zXSxcblx0ICBzY3JvbGxTbmFwRGVzdGluYXRpb246IFt3aywgbXNdLFxuXHQgIHNjcm9sbFNuYXBDb29yZGluYXRlOiBbd2ssIG1zXSxcblx0ICBzaGFwZUltYWdlVGhyZXNob2xkOiBbd2tdLFxuXHQgIHNoYXBlSW1hZ2VNYXJnaW46IFt3a10sXG5cdCAgc2hhcGVJbWFnZU91dHNpZGU6IFt3a10sXG5cdCAgaHlwaGVuczogW3drLCBteiwgbXNdLFxuXHQgIGZsb3dJbnRvOiBbd2ssIG1zXSxcblx0ICBmbG93RnJvbTogW3drLCBtc10sXG5cdCAgcmVnaW9uRnJhZ21lbnQ6IFt3aywgbXNdLFxuXHQgIHRleHRBbGlnbkxhc3Q6IFttel0sXG5cdCAgdGFiU2l6ZTogW216XSxcblx0ICB3cmFwRmxvdzogW21zXSxcblx0ICB3cmFwVGhyb3VnaDogW21zXSxcblx0ICB3cmFwTWFyZ2luOiBbbXNdLFxuXHQgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IFttc10sXG5cdCAgZ3JpZFRlbXBsYXRlUm93czogW21zXSxcblx0ICBncmlkVGVtcGxhdGVBcmVhczogW21zXSxcblx0ICBncmlkVGVtcGxhdGU6IFttc10sXG5cdCAgZ3JpZEF1dG9Db2x1bW5zOiBbbXNdLFxuXHQgIGdyaWRBdXRvUm93czogW21zXSxcblx0ICBncmlkQXV0b0Zsb3c6IFttc10sXG5cdCAgZ3JpZDogW21zXSxcblx0ICBncmlkUm93U3RhcnQ6IFttc10sXG5cdCAgZ3JpZENvbHVtblN0YXJ0OiBbbXNdLFxuXHQgIGdyaWRSb3dFbmQ6IFttc10sXG5cdCAgZ3JpZFJvdzogW21zXSxcblx0ICBncmlkQ29sdW1uOiBbbXNdLFxuXHQgIGdyaWRDb2x1bW5FbmQ6IFttc10sXG5cdCAgZ3JpZENvbHVtbkdhcDogW21zXSxcblx0ICBncmlkUm93R2FwOiBbbXNdLFxuXHQgIGdyaWRBcmVhOiBbbXNdLFxuXHQgIGdyaWRHYXA6IFttc10sXG5cdCAgdGV4dFNpemVBZGp1c3Q6IFt3aywgbXNdLFxuXHQgIHRyYW5zaXRpb25EZWxheTogW3drXSxcblx0ICB0cmFuc2l0aW9uRHVyYXRpb246IFt3a10sXG5cdCAgdHJhbnNpdGlvblByb3BlcnR5OiBbd2tdLFxuXHQgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogW3drXVxuXHR9O1xuXG4vKioqLyB9KSxcbi8qIDIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXG5cdHZhciBfaW1tZWRpYXRlQ2hpbGRTZWxlY3RvckV4dGVuc2lvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuXG5cdHZhciBfaW1tZWRpYXRlQ2hpbGRTZWxlY3RvckV4dGVuc2lvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbW1lZGlhdGVDaGlsZFNlbGVjdG9yRXh0ZW5zaW9uKTtcblxuXHR2YXIgX3NlbGZTZWxlY3RvckV4dGVuc2lvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG5cdHZhciBfc2VsZlNlbGVjdG9yRXh0ZW5zaW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGZTZWxlY3RvckV4dGVuc2lvbik7XG5cblx0dmFyIF9wc2V1ZG9DbGFzc2VzRXh0ZW5zaW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cblx0dmFyIF9wc2V1ZG9DbGFzc2VzRXh0ZW5zaW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BzZXVkb0NsYXNzZXNFeHRlbnNpb24pO1xuXG5cdHZhciBfbWVkaWFRdWVyeUV4dGVuc2lvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXG5cdHZhciBfbWVkaWFRdWVyeUV4dGVuc2lvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZWRpYVF1ZXJ5RXh0ZW5zaW9uKTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IFtfaW1tZWRpYXRlQ2hpbGRTZWxlY3RvckV4dGVuc2lvbjIuZGVmYXVsdCwgX3NlbGZTZWxlY3RvckV4dGVuc2lvbjIuZGVmYXVsdCwgX3BzZXVkb0NsYXNzZXNFeHRlbnNpb24yLmRlZmF1bHQsIF9tZWRpYVF1ZXJ5RXh0ZW5zaW9uMi5kZWZhdWx0XTtcblxuLyoqKi8gfSksXG4vKiAyMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN1YiBydWxlc2V0IGV2ZXJ5IHRpbWUgYW4gaW1tZWRpYXRlIGNoaWxkIHNlbGVjdG9yIChlLmcuICc+IGgxJykgaXMgZm91bmRcblx0ICovXG5cdGV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxlY3RvciwgYmFzZVNlbGVjdG9yLCBnZW5lcmF0ZVN1YlJ1bGVzZXQsIG1pbmlmaWVkKSB7XG5cdCAgc2VsZWN0b3IgPSBzZWxlY3Rvci50cmltKCk7XG5cdCAgaWYgKHNlbGVjdG9yWzBdICE9PSAnPicpIHtcblx0ICAgIHJldHVybiBudWxsO1xuXHQgIH1cblx0ICBzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKDEpLnRyaW0oKTtcblx0ICB2YXIgbmV3U2VsZWN0b3IgPSBiYXNlU2VsZWN0b3I7XG5cdCAgaWYgKCFtaW5pZmllZCkgbmV3U2VsZWN0b3IgKz0gJyAnO1xuXHQgIG5ld1NlbGVjdG9yICs9ICc+Jztcblx0ICBpZiAoIW1pbmlmaWVkKSBuZXdTZWxlY3RvciArPSAnICc7XG5cdCAgbmV3U2VsZWN0b3IgKz0gc2VsZWN0b3I7XG5cblx0ICByZXR1cm4gZ2VuZXJhdGVTdWJSdWxlc2V0KG5ld1NlbGVjdG9yKTtcblx0fTtcblxuLyoqKi8gfSksXG4vKiAyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN1YiBydWxlc2V0IGV2ZXJ5IHRpbWUgYSBzZWxmIHNlbGVjdG9yIChlLmcuICcmIGgxLCBoMiwgaDMnKSBpcyBmb3VuZFxuXHQgKi9cblx0ZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBiYXNlU2VsZWN0b3IsIGdlbmVyYXRlU3ViUnVsZXNldCwgbWluaWZpZWQpIHtcblx0ICBzZWxlY3RvciA9IHNlbGVjdG9yLnRyaW0oKTtcblx0ICBpZiAoc2VsZWN0b3JbMF0gIT09ICcmJykge1xuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfVxuXG5cdCAgdmFyIGV4dGVuZGluZ1NlbGVjdG9yID0gIXNlbGVjdG9yLm1hdGNoKC9eJlxccysvKTsgLy8gYCYuZm9vYCAoZXh0ZW5kaW5nKSB2cy4gYCYgLmZvb2AgKG5vbiBleHRlbmRpbmcpXG5cdCAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKC9eJi8sICcnKTsgLy8gYCYgaDEsIGgyLCBoM2AgPT4gYCBoMSwgaDIsIGgzYFxuXG5cdCAgdmFyIG5ld1NlbGVjdG9yID0gc2VsZWN0b3Iuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHMpIHtcblx0ICAgIHJldHVybiBzLnRyaW0oKTtcblx0ICB9KSAvLyBoMSwgaDIsIGgzID0+IFtoMSwgaDIsIGgzXVxuXHQgIC5tYXAoZnVuY3Rpb24gKHMsIGkpIHtcblx0ICAgIHJldHVybiAnJyArIGJhc2VTZWxlY3RvciArIChpID09PSAwICYmIGV4dGVuZGluZ1NlbGVjdG9yID8gJycgOiAnICcpICsgcztcblx0ICB9KSAvLyBbaDEsIGgyLCBoM10gPT4gWy5iYXNlIGgxLCAuYmFzZSBoMiwgLmJhc2UgaDNdXG5cdCAgLmpvaW4oJywgJyk7IC8vIFsuYmFzZSBoMSwgLmJhc2UgaDIsIC5iYXNlIGgzXSA9PiBgLmJhc2UgaDEsIC5iYXNlIGgyLCAuYmFzZSBoM2Bcblx0ICByZXR1cm4gZ2VuZXJhdGVTdWJSdWxlc2V0KG5ld1NlbGVjdG9yKTtcblx0fTtcblxuLyoqKi8gfSksXG4vKiAyNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN1YiBydWxlc2V0IGV2ZXJ5IHRpbWUgYW4gcHNldWRvIGNsYXNzIChlLmcuICc6bGFzdC1jaGlsZCcpIGlzIGZvdW5kXG5cdCAqL1xuXHRleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIGJhc2VTZWxlY3RvciwgZ2VuZXJhdGVTdWJSdWxlc2V0LCBtaW5pZmllZCkge1xuXHQgIHNlbGVjdG9yID0gc2VsZWN0b3IudHJpbSgpO1xuXHQgIGlmIChzZWxlY3RvclswXSAhPT0gJzonKSB7XG5cdCAgICByZXR1cm4gbnVsbDtcblx0ICB9XG5cblx0ICB2YXIgbmV3U2VsZWN0b3IgPSBiYXNlU2VsZWN0b3IgKyBzZWxlY3Rvcjtcblx0ICByZXR1cm4gZ2VuZXJhdGVTdWJSdWxlc2V0KG5ld1NlbGVjdG9yKTtcblx0fTtcblxuLyoqKi8gfSksXG4vKiAyNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN1YiBydWxlc2V0IGV2ZXJ5IHRpbWUgYSBtZWRpYSBxdWVyeSBpcyBmb3VuZFxuXHQgKi9cblx0ZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBiYXNlU2VsZWN0b3IsIGdlbmVyYXRlU3ViUnVsZXNldCwgbWluaWZpZWQpIHtcblx0ICBzZWxlY3RvciA9IHNlbGVjdG9yLnRyaW0oKTtcblx0ICBpZiAoc2VsZWN0b3JbMF0gIT09ICdAJykge1xuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIGdlbmVyYXRlU3ViUnVsZXNldChiYXNlU2VsZWN0b3IsIHNlbGVjdG9yKTtcblx0fTtcblxuLyoqKi8gfSksXG4vKiAyNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdHZhciBfcnVsZXNldCA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXG5cdHZhciBfcnVsZXNldDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ydWxlc2V0KTtcblxuXHR2YXIgX3N0eWxlc01hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblxuXHR2YXIgX3N0eWxlc01hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3R5bGVzTWFuYWdlcik7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cdC8qKlxuXHQgKiBUaGUgUHJlaW5qZWN0aW9uU3R5bGVzTWFuYWdlciBpcyBzaW1pbGFyIHRvIFN0eWxlc01hbmFnZXIsIGV4Y2VwdCB0aGF0IGl0IGNyZWF0ZXMgc3R5bGVzIGZvclxuXHQgKiBldmVyeSBwb3NzaWJsZSBjb21iaW5hdGlvbiBvZiBhY3RpdmUgdmFyaWF0aW9uc1xuXHQgKi9cblx0dmFyIFByZWluamVjdGlvblN0eWxlc01hbmFnZXIgPSBmdW5jdGlvbiAoX1N0eWxlc01hbmFnZXIpIHtcblx0ICBfaW5oZXJpdHMoUHJlaW5qZWN0aW9uU3R5bGVzTWFuYWdlciwgX1N0eWxlc01hbmFnZXIpO1xuXG5cdCAgZnVuY3Rpb24gUHJlaW5qZWN0aW9uU3R5bGVzTWFuYWdlcihhZG9uaXMsIHN0eWxlcywgdGhlbWUpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcmVpbmplY3Rpb25TdHlsZXNNYW5hZ2VyKTtcblxuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQcmVpbmplY3Rpb25TdHlsZXNNYW5hZ2VyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUHJlaW5qZWN0aW9uU3R5bGVzTWFuYWdlcikpLmNhbGwodGhpcywgYWRvbmlzLCBzdHlsZXMsIFtdLCB0aGVtZSkpO1xuXHQgIH1cblxuXHQgIC8qKlxuXHQgICAqIEdlbmVyYXRlcyBydWxlc2V0cyBmb3IgYWxsIHBvc3NpYmxlIHZhcmlhdGlvbiBjb21iaW5hdGlvbnNcblx0ICAgKiBAcmV0dXJuIHtSdWxlc2V0W119XG5cdCAgICogQHByaXZhdGVcblx0ICAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzKFByZWluamVjdGlvblN0eWxlc01hbmFnZXIsIFt7XG5cdCAgICBrZXk6ICdfZ2VuZXJhdGVWYXJpYXRpb25SdWxlc2V0cycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2dlbmVyYXRlVmFyaWF0aW9uUnVsZXNldHMoKSB7XG5cdCAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG5cdCAgICAgIHZhciBhbGxWYXJpYXRpb25zID0gKDAsIF91dGlscy5mbGF0dGVuKSh0aGlzLl9zdHlsZXMubWFwKGZ1bmN0aW9uIChzKSB7XG5cdCAgICAgICAgcmV0dXJuIHMuZ2V0VmFyaWF0aW9ucygpO1xuXHQgICAgICB9KSk7XG5cdCAgICAgIHZhciBhbGxDb21iaW5hdGlvbnMgPSAoMCwgX3V0aWxzLmZpbmRBbGxDb21iaW5hdGlvbnMpKGFsbFZhcmlhdGlvbnMpO1xuXG5cdCAgICAgIHJldHVybiBhbGxDb21iaW5hdGlvbnMubWFwKGZ1bmN0aW9uICh2YXJpYXRpb25zKSB7XG5cdCAgICAgICAgdmFyIGNsYXNzTmFtZSA9IF90aGlzMi5fZ2VuZXJhdGVDbGFzc05hbWUodmFyaWF0aW9ucyk7XG5cdCAgICAgICAgdmFyIHNlbGVjdG9yID0gJy4nICsgY2xhc3NOYW1lO1xuXHQgICAgICAgIHZhciBydWxlc2V0ID0gbmV3IF9ydWxlc2V0Mi5kZWZhdWx0KF90aGlzMi5fYWRvbmlzLCBzZWxlY3RvciwgX3RoaXMyLl9nZXRDb21iaW5lZFN0eWxlcyh2YXJpYXRpb25zKSwge1xuXHQgICAgICAgICAgdGhlbWU6IF90aGlzMi5fdGhlbWVcblx0ICAgICAgICB9KTtcblx0ICAgICAgICByZXR1cm4gW3J1bGVzZXQsIHJ1bGVzZXQuZ2V0U3ViUnVsZXNldHMoKV07XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIEdlbmVyYXRlcyB0aGUgcnVsZXNldHMgYW5kIHN1YiBydWxlc2V0c1xuXHQgICAgICogQHJldHVybiB7UnVsZXNldFtdfVxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiAnX2dlbmVyYXRlUnVsZXNldHMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZW5lcmF0ZVJ1bGVzZXRzKCkge1xuXHQgICAgICB2YXIgZGVmYXVsdFJ1bGVzZXQgPSBuZXcgX3J1bGVzZXQyLmRlZmF1bHQodGhpcy5fYWRvbmlzLCB0aGlzLl9iYXNlU2VsZWN0b3IsIHRoaXMuX2dldENvbWJpbmVkU3R5bGVzKCksIHtcblx0ICAgICAgICB0aGVtZTogdGhpcy5fdGhlbWVcblx0ICAgICAgfSk7XG5cdCAgICAgIHZhciBydWxlc2V0cyA9IFtkZWZhdWx0UnVsZXNldCwgZGVmYXVsdFJ1bGVzZXQuZ2V0U3ViUnVsZXNldHMoKV07XG5cdCAgICAgIHJ1bGVzZXRzLnB1c2godGhpcy5fZ2VuZXJhdGVWYXJpYXRpb25SdWxlc2V0cygpKTtcblx0ICAgICAgcmV0dXJuICgwLCBfdXRpbHMuZmxhdHRlbikocnVsZXNldHMpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBQcmVpbmplY3Rpb25TdHlsZXNNYW5hZ2VyO1xuXHR9KF9zdHlsZXNNYW5hZ2VyMi5kZWZhdWx0KTtcblxuXHRleHBvcnRzLmRlZmF1bHQgPSBQcmVpbmplY3Rpb25TdHlsZXNNYW5hZ2VyO1xuXG4vKioqLyB9KSxcbi8qIDI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ21ldGVyJywgJ25hdicsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAnb3B0Z3JvdXAnLCAnb3B0aW9uJywgJ291dHB1dCcsICdwJywgJ3BhcmFtJywgJ3BpY3R1cmUnLCAncHJlJywgJ3Byb2dyZXNzJywgJ3EnLCAncnAnLCAncnQnLCAncnVieScsICdzJywgJ3NhbXAnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NtYWxsJywgJ3NvdXJjZScsICdzcGFuJywgJ3N0cm9uZycsICdzdHlsZScsICdzdWInLCAnc3VtbWFyeScsICdzdXAnLCAndGFibGUnLCAndGJvZHknLCAndGQnLCAndGV4dGFyZWEnLCAndGZvb3QnLCAndGgnLCAndGhlYWQnLCAndGltZScsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1JywgJ3VsJywgJ3ZhcicsICd2aWRlbycsICd3YnInLCAnY2lyY2xlJywgJ2NsaXBQYXRoJywgJ2RlZnMnLCAnZWxsaXBzZScsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFzaycsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3N0b3AnLCAnc3ZnJywgJ3RleHQnLCAndHNwYW4nXTtcblxuLyoqKi8gfSksXG4vKiAyOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHR2YXIgX3N0eWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG5cdHZhciBfc3R5bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0eWxlcyk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cdHZhciBCYXNlU3R5bGVzID0gZnVuY3Rpb24gKF9TdHlsZXMpIHtcblx0ICBfaW5oZXJpdHMoQmFzZVN0eWxlcywgX1N0eWxlcyk7XG5cblx0ICBmdW5jdGlvbiBCYXNlU3R5bGVzKCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VTdHlsZXMpO1xuXG5cdCAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJhc2VTdHlsZXMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCYXNlU3R5bGVzKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIEJhc2VTdHlsZXM7XG5cdH0oX3N0eWxlczIuZGVmYXVsdCk7XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gQmFzZVN0eWxlcztcblxuLyoqKi8gfSksXG4vKiAyOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5cdHZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxuXHR2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXHRleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoVGhlbWFibGVDb21wb25lbnQpIHtcblx0ICB2YXIgQ29tcG9uZW50V2l0aFRoZW1lID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhDb21wb25lbnRXaXRoVGhlbWUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG5cdCAgICBmdW5jdGlvbiBDb21wb25lbnRXaXRoVGhlbWUoKSB7XG5cdCAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wb25lbnRXaXRoVGhlbWUpO1xuXG5cdCAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29tcG9uZW50V2l0aFRoZW1lLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29tcG9uZW50V2l0aFRoZW1lKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdCAgICB9XG5cblx0ICAgIF9jcmVhdGVDbGFzcyhDb21wb25lbnRXaXRoVGhlbWUsIFt7XG5cdCAgICAgIGtleTogJ19jbG9uZVByb3BzJyxcblxuXHQgICAgICAvKipcblx0ICAgICAgICogUmV0dXJucyBhIHNoYWxsb3cgY2xvbmUgb2YgdGhpcyBjb21wb25lbnQncyBwcm9wc1xuXHQgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG5cdCAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAqL1xuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gX2Nsb25lUHJvcHMoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cblx0ICAgICAgICB2YXIgZWxlbWVudFByb3BzID0ge307XG5cdCAgICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuXHQgICAgICAgICAgZWxlbWVudFByb3BzW3Byb3BdID0gX3RoaXMyLnByb3BzW3Byb3BdO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybiBlbGVtZW50UHJvcHM7XG5cdCAgICAgIH1cblxuXHQgICAgICAvKipcblx0ICAgICAgICogUmVuZGVycyB0aGUgY29tcG9uZW50XG5cdCAgICAgICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR8UmVhY3QuQ29tcG9uZW50fVxuXHQgICAgICAgKi9cblxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICAgIHZhciBlbGVtZW50UHJvcHMgPSB0aGlzLl9jbG9uZVByb3BzKCk7XG5cblx0ICAgICAgICB2YXIgaW5uZXJSZWYgPSBlbGVtZW50UHJvcHMuaW5uZXJSZWY7XG5cblx0ICAgICAgICBpZiAoaW5uZXJSZWYpIHtcblx0ICAgICAgICAgIGVsZW1lbnRQcm9wcy5yZWYgPSBpbm5lclJlZjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZGVsZXRlIGVsZW1lbnRQcm9wcy5pbm5lclJlZjtcblxuXHQgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChUaGVtYWJsZUNvbXBvbmVudCwgZWxlbWVudFByb3BzKTtcblx0ICAgICAgfVxuXHQgICAgfV0pO1xuXG5cdCAgICByZXR1cm4gQ29tcG9uZW50V2l0aFRoZW1lO1xuXHQgIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblx0ICBDb21wb25lbnRXaXRoVGhlbWUuY29udGV4dFR5cGVzID0ge1xuXHQgICAgdGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG5cdCAgfTtcblxuXHQgIHJldHVybiBDb21wb25lbnRXaXRoVGhlbWU7XG5cdH07XG5cbi8qKiovIH0pLFxuLyogMzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuXHR2YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cblx0dmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblx0dmFyIFRoZW1lUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuXHQgIF9pbmhlcml0cyhUaGVtZVByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuXHQgIGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIoKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGhlbWVQcm92aWRlcik7XG5cblx0ICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVGhlbWVQcm92aWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRoZW1lUHJvdmlkZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICB9XG5cblx0ICBfY3JlYXRlQ2xhc3MoVGhlbWVQcm92aWRlciwgW3tcblx0ICAgIGtleTogJ2dldENoaWxkQ29udGV4dCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuXHQgICAgICB2YXIgY29udGV4dCA9IHt9O1xuXHQgICAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuY29udGV4dCkge1xuXHQgICAgICAgIGNvbnRleHRbcHJvcF0gPSB0aGlzLmNvbnRleHQ7XG5cdCAgICAgIH1cblx0ICAgICAgY29udGV4dC50aGVtZSA9IHRoaXMucHJvcHMudGhlbWU7XG5cdCAgICAgIHJldHVybiBjb250ZXh0O1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICBpZiAoIXRoaXMucHJvcHMuY2hpbGRyZW4pIHtcblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIFRoZW1lUHJvdmlkZXI7XG5cdH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gVGhlbWVQcm92aWRlcjtcblxuXG5cdFRoZW1lUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG5cdCAgdGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcblx0fTtcblxuXHRUaGVtZVByb3ZpZGVyLmNvbnRleHRUeXBlcyA9IHtcblx0ICB0aGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcblx0fTtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pXG59KTtcbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYWRvbmlzL2J1aWxkL2Fkb25pcy5qc1xuLy8gbW9kdWxlIGlkID0gMTU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczcucHJvbWlzZS50cnknKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2U7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UuanNcbi8vIG1vZHVsZSBpZCA9IDE1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qc1xuLy8gbW9kdWxlIGlkID0gMTU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMTYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qc1xuLy8gbW9kdWxlIGlkID0gMTYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnByb21pc2UuanNcbi8vIG1vZHVsZSBpZCA9IDE2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1pbnN0YW5jZS5qc1xuLy8gbW9kdWxlIGlkID0gMTY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZm9yLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ludm9rZS5qc1xuLy8gbW9kdWxlIGlkID0gMTY2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19taWNyb3Rhc2suanNcbi8vIG1vZHVsZSBpZCA9IDE2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGlmIChzYWZlICYmIHRhcmdldFtrZXldKSB0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgIGVsc2UgaGlkZSh0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9IHJldHVybiB0YXJnZXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS1hbGwuanNcbi8vIG1vZHVsZSBpZCA9IDE2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSB0eXBlb2YgY29yZVtLRVldID09ICdmdW5jdGlvbicgPyBjb3JlW0tFWV0gOiBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qc1xuLy8gbW9kdWxlIGlkID0gMTY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanNcbi8vIG1vZHVsZSBpZCA9IDE3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUHJvbWlzZScsIHsgJ3RyeSc6IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyk7XG4gIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAocmVzdWx0LmUgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudik7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcucHJvbWlzZS50cnkuanNcbi8vIG1vZHVsZSBpZCA9IDE3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IFBob3RvRWRpdG9yU0RLIGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuaW1wb3J0IExvZyBmcm9tICdzaGFyZWQvbG9nJ1xuaW1wb3J0IEJyb3dzZXIgZnJvbSAnLi91dGlscy9icm93c2VyJ1xuaW1wb3J0IEpTT05Mb2FkZXIgZnJvbSAnc2hhcmVkL2xvYWRlcnMvanNvbi1sb2FkZXInXG5cbmNvbnN0IHsgVXRpbHM6IFNES1V0aWxzIH0gPSBQaG90b0VkaXRvclNES1xuY29uc3QgeyBWZWN0b3IyIH0gPSBQaG90b0VkaXRvclNESy5NYXRoXG5cbmNvbnN0IFVJVXRpbHMgPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbm5lciBkaW1lbnNpb25zIChzaXplIC0gcGFkZGluZykgb2YgdGhlIGdpdmVuXG4gICAqIERPTSBlbGVtZW50XG4gICAqIEBwYXJhbSAge0RPTUVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHJldHVybiB7VmVjdG9yMn1cbiAgICovXG4gIGdldElubmVyRGltZW5zaW9uc0ZvckVsZW1lbnQgKGVsZW1lbnQpIHtcbiAgICBsZXQgc2l6ZSA9IG5ldyBWZWN0b3IyKGVsZW1lbnQub2Zmc2V0V2lkdGgsIGVsZW1lbnQub2Zmc2V0SGVpZ2h0KVxuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKVxuICAgIHNpemUueCAtPSBwYXJzZUludChjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctbGVmdCcpLCAxMClcbiAgICBzaXplLnggLT0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXJpZ2h0JyksIDEwKVxuICAgIHNpemUueSAtPSBwYXJzZUludChjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctdG9wJyksIDEwKVxuICAgIHNpemUueSAtPSBwYXJzZUludChjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctYm90dG9tJyksIDEwKVxuICAgIHJldHVybiBzaXplXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHggYW5kIHkgcG9zaXRpb24gZm9yIHRoZSBnaXZlbiBldmVudC5cbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKiBAcmV0dXJuIHtWZWN0b3IyfVxuICAgKi9cbiAgZ2V0RXZlbnRQb3NpdGlvbiAoZSkge1xuICAgIGxldCB4ID0gZS5jbGllbnRYXG4gICAgbGV0IHkgPSBlLmNsaWVudFlcbiAgICBpZiAoZS50eXBlLmluZGV4T2YoJ3RvdWNoJykgIT09IC0xKSB7XG4gICAgICBpZiAoIWUudG91Y2hlcy5sZW5ndGgpIHJldHVyblxuXG4gICAgICB4ID0gZS50b3VjaGVzWzBdLmNsaWVudFhcbiAgICAgIHkgPSBlLnRvdWNoZXNbMF0uY2xpZW50WVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCwgeSlcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNhbnZhcyB3aXRoIGEgdHJhbnNwYXJlbmN5IHBhdHRlcm5cbiAgICogQHJldHVybiB7Q2FudmFzfVxuICAgKi9cbiAgY3JlYXRlVHJhbnNwYXJlbnRQYXR0ZXJuQ2FudmFzICgpIHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuXG4gICAgY2FudmFzLndpZHRoID0gMTBcbiAgICBjYW52YXMuaGVpZ2h0ID0gMTBcblxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3doaXRlJ1xuICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KVxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyNjY2NjY2MnXG4gICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMilcbiAgICBjb250ZXh0LmZpbGxSZWN0KFxuICAgICAgY2FudmFzLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAvIDIsXG4gICAgICBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHRcbiAgICApXG5cbiAgICByZXR1cm4gY2FudmFzXG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBjYW52YXMubXNUb0Jsb2JcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHN1cHBvcnRzTVNCbG9iICgpIHtcbiAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgICByZXR1cm4gdHlwZW9mIGNhbnZhcy5tc1RvQmxvYiAhPT0gJ3VuZGVmaW5lZCdcbiAgfSxcblxuICAvKipcbiAgICogVHJhbnNsYXRlcyB0aGUgZ2l2ZW4ga2V5IHVzaW5nIHRoZSBnaXZlbiBvcHRpb25zXG4gICAqIEBwYXJhbSAge09iamVjdH0gcGhyYXNlc1xuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGtleVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGludGVycG9sYXRpb25PcHRpb25zID0ge31cbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgdHJhbnNsYXRlIChwaHJhc2VzLCBrZXksIGludGVycG9sYXRpb25PcHRpb25zID0ge30pIHtcbiAgICBsZXQgcmVzcG9uc2UgPSB0aGlzLmZldGNoKHBocmFzZXMsIGtleSlcbiAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICBMb2cuaW5mbygnVXRpbHMjdHJhbnNsYXRlJywgYFVuYWJsZSB0byB0cmFuc2xhdGUgXFxgJHtrZXl9XFxgYClcblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAvLyBSZW1vdmUgdGhpcyBwYXJ0IGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gdXBkYXRlXG4gICAgICBjb25zdCBuZXdUb09sZExvY2FsaXphdGlvbktleU1hcCA9IHJlcXVpcmUoJy4vbmV3LXRvLW9sZC1sb2NhbGl6YXRpb24ta2V5LW1hcC5qc29uJylcbiAgICAgIGNvbnN0IG9sZEtleSA9IG5ld1RvT2xkTG9jYWxpemF0aW9uS2V5TWFwW2tleV1cbiAgICAgIGlmIChvbGRLZXkgIT0gbnVsbCkge1xuICAgICAgICBMb2cud2FybignVXRpbHMjdHJhbnNsYXRlJywgYFRyeWluZyB0byBmaW5kIGxvY2FsaXplZCBzdHJpbmcgZm9yIG9sZCBrZXk6IFxcYCR7b2xkS2V5fVxcYC4gUGxlYXNlIHVwZGF0ZSB5b3VyIGxvY2FsaXphdGlvbiB0byB1c2UgdGhlIG5ldyBrZXkgYXMgc29vbiBhcyBwb3NzaWJsZS4gU3VwcG9ydCBmb3IgdGhlIG9sZCwgZGVwcmVjYXRlZCBrZXkgd2lsbCBiZSBkcm9wcGVkIHdpdGggdGhlIG5leHQgbWFqb3IgdmVyc2lvbiB1cGRhdGUuYClcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlKHBocmFzZXMsIG9sZEtleSwgaW50ZXJwb2xhdGlvbk9wdGlvbnMpXG4gICAgICB9XG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgZm9yIChsZXQga2V5IGluIGludGVycG9sYXRpb25PcHRpb25zKSB7XG4gICAgICByZXNwb25zZSA9IHJlc3BvbnNlLnJlcGxhY2UoYFxcJHske2tleX19YCwgaW50ZXJwb2xhdGlvbk9wdGlvbnNba2V5XSlcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHByb3BlcnR5IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YFxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHBhdGhcbiAgICogQHBhcmFtICB7P30gW2RlZmF1bHRWYWx1ZV1cbiAgICogQHJldHVybiB7P31cbiAgICovXG4gIGZldGNoIChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgIC8vIFJlcGxhY2UgaW5kZXhlcyB3aXRoIHByb3BlcnR5IGFjY2Vzc29yc1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcWyhcXHcrKV0vZywgJy4kMScpXG4gICAgLy8gU3RyaXAgbGVhZGluZyBkb3QgKHdoZW4gcGF0aCBiZWdpbnMgd2l0aCBbMF0gZm9yIGV4YW1wbGUpXG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXlxcLi8sICcnKVxuXG4gICAgY29uc3QgcGF0aFNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoU2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHNlZ21lbnQgPSBwYXRoU2VnbWVudHNbaV1cbiAgICAgIG9iamVjdCA9IG9iamVjdFtzZWdtZW50XVxuICAgICAgaWYgKCFvYmplY3QpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiBvYmplY3RcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgcmVwcmVzZW50cyBhIG1vYmlsZSBkZXZpY2VcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGlzTW9iaWxlICgpIHtcbiAgICBjb25zdCBhID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYVxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgcmV0dXJuICgvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2kudGVzdChhKXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdChhLnN1YnN0cigwLCA0KSkpXG4gICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZWxlY3RzIHRoZSBgc2VsZWN0ZWRJdGVtc2AgZnJvbSBgaXRlbXNgLiBgc2VsZWN0b3JgIGlzIGNhbGxlZCBmb3IgZXZlcnkgaXRlbSwgcmV0dXJuIHZhbHVlXG4gICAqIGlzIG1hdGNoZWQgYWdhaW5zdCBgc2VsZWN0ZWRJdGVtc2BcbiAgICogQHBhcmFtICB7QXJyYXl9IGl0ZW1zXG4gICAqIEBwYXJhbSAge0FycmF5fSBzZWxlY3RlZEl0ZW1zXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbc2VsZWN0b3IgPSBudWxsXVxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIHNlbGVjdCAoaXRlbXMsIHNlbGVjdGVkSXRlbXMsIHNlbGVjdG9yID0gbnVsbCkge1xuICAgIGlmICghc2VsZWN0b3IpIHNlbGVjdG9yID0gKGkpID0+IGlcblxuICAgIGNvbnN0IG5ld0l0ZW1zID0gW11cbiAgICBzZWxlY3RlZEl0ZW1zLmZvckVhY2goKHNlbGVjdGVkSXRlbSkgPT4ge1xuICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtSWRlbnRpZmllciA9IHNlbGVjdG9yKGl0ZW0pXG4gICAgICAgIGlmIChpdGVtSWRlbnRpZmllciA9PT0gc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgICAgbmV3SXRlbXMucHVzaChpdGVtKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIG5ld0l0ZW1zXG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGdpdmVuIFVSTCB1c2luZyBKU09OKFApXG4gICAqIEBwYXJhbSAge1N0cmluZ30gdXJsXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBnZXRKU09OUCAodXJsKSB7XG4gICAgY29uc3QgbG9hZGVyID0gbmV3IEpTT05Mb2FkZXIodXJsKVxuICAgIHJldHVybiBsb2FkZXIubG9hZCgpXG4gIH0sXG5cbiAgLyoqXG4gICAqIENsb25lcyB0aGUgZ2l2ZW4gYGNhdGVnb3JpZXNgIGFycmF5XG4gICAqIEBwYXJhbSAge09iamVjdFtdfSBjYXRlZ29yaWVzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpdGVtc1Byb3BlcnR5XG4gICAqIEByZXR1cm4ge09iamVjdFtdfVxuICAgKi9cbiAgY2xvbmVDYXRlZ29yaWVzIChjYXRlZ29yaWVzLCBpdGVtc1Byb3BlcnR5KSB7XG4gICAgcmV0dXJuIGNhdGVnb3JpZXMubWFwKGNhdGVnb3J5ID0+IHtcbiAgICAgIGNhdGVnb3J5ID0gU0RLVXRpbHMuY2xvbmUoY2F0ZWdvcnkpXG4gICAgICBjYXRlZ29yeVtpdGVtc1Byb3BlcnR5XSA9IGNhdGVnb3J5W2l0ZW1zUHJvcGVydHldLnNsaWNlKDApXG4gICAgICByZXR1cm4gY2F0ZWdvcnlcbiAgICB9KVxuICB9LFxuXG4gIC8qKlxuICAgKiBNZXJnZXMgdGhlIGdpdmVuIGBuZXdDYXRlZ29yaWVzYCBpbnRvIHRoZSBnaXZlbiBgY2F0ZWdvcmllc2BcbiAgICogQHBhcmFtICB7T2JqZWN0W119IGNhdGVnb3JpZXNcbiAgICogQHBhcmFtICB7T2JqZWN0W119IG5ld0NhdGVnb3JpZXNcbiAgICogQHBhcmFtICB7U3RyaW5nfSBpdGVtc1Byb3BlcnR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBtZXJnZUNhdGVnb3JpZXMgKGNhdGVnb3JpZXMsIG5ld0NhdGVnb3JpZXMsIGl0ZW1zUHJvcGVydHkpIHtcbiAgICBjYXRlZ29yaWVzID0gdGhpcy5jbG9uZUNhdGVnb3JpZXMoY2F0ZWdvcmllcywgaXRlbXNQcm9wZXJ0eSlcblxuICAgIGxldCBleGlzdGluZ0NhdGVnb3J5ID0gbnVsbFxuICAgIG5ld0NhdGVnb3JpZXMuZm9yRWFjaCgobmV3Q2F0ZWdvcnkpID0+IHtcbiAgICAgIGNhdGVnb3JpZXMuZm9yRWFjaCgoY2F0ZWdvcnkpID0+IHtcbiAgICAgICAgaWYgKG5ld0NhdGVnb3J5LmlkZW50aWZpZXIgPT09IGNhdGVnb3J5LmlkZW50aWZpZXIpIHtcbiAgICAgICAgICBleGlzdGluZ0NhdGVnb3J5ID0gY2F0ZWdvcnlcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgaWYgKCFleGlzdGluZ0NhdGVnb3J5KSB7XG4gICAgICAgIGNhdGVnb3JpZXMucHVzaChuZXdDYXRlZ29yeSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXN0aW5nQ2F0ZWdvcnlbaXRlbXNQcm9wZXJ0eV0gPSBleGlzdGluZ0NhdGVnb3J5W2l0ZW1zUHJvcGVydHldXG4gICAgICAgICAgLmNvbmNhdChuZXdDYXRlZ29yeVtpdGVtc1Byb3BlcnR5XSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIGNhdGVnb3JpZXNcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIGNhbWVsaXplZCBzdHlsZSBvYmplY3QgZm9yIHRoZSBnaXZlbiBET01FbGVtZW50XG4gICAqIEBwYXJhbSAge0RPTUVsZW1lbnR9IGVsXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGdldFN0eWxlT2JqZWN0IChlbCkge1xuICAgIGNvbnN0IHN0eWxlUHJvcGVydGllcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKVxuICAgIGxldCBzdHlsZU9iamVjdCA9IHt9XG4gICAgZm9yIChsZXQgcHJvcGVydHkgaW4gc3R5bGVQcm9wZXJ0aWVzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHN0eWxlUHJvcGVydGllcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KVxuICAgICAgY29uc3QgY2FtZWxpemVkQXR0ciA9IHByb3BlcnR5LnJlcGxhY2UoLy0oW2Etel0pL2csIChhLCBiKSA9PiBiLnRvVXBwZXJDYXNlKCkpXG4gICAgICBpZiAodmFsdWUgIT09ICcnKSB7XG4gICAgICAgIHN0eWxlT2JqZWN0W2NhbWVsaXplZEF0dHJdID0gdmFsdWVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlT2JqZWN0XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGdpdmVuIHN0eWxlcyB0byB0aGUgZ2l2ZW4gZWxlbWVudFxuICAgKiBAcGFyYW0gIHtET01FbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSAge09iamVjdH0gc3R5bGVzXG4gICAqL1xuICBzdHlsZUVsZW1lbnQgKGVsZW1lbnQsIHN0eWxlcykge1xuICAgIGZvciAobGV0IHByb3AgaW4gc3R5bGVzKSB7XG4gICAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZWJvdW5jZXMgdGhlIGdpdmVuIGZ1bmN0aW9uIHRvIHRyaWdnZXIgb25seSBldmVyeSBzbyBvZnRlblxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm5cbiAgICogQHBhcmFtICB7TnVtYmVyfSAgIHdhaXRcbiAgICogQHBhcmFtICB7Qm9vbGVhbn1cbiAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAqL1xuICBkZWJvdW5jZSAoZm4sIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgIHZhciB0aW1lb3V0XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHNcbiAgICAgIHZhciBsYXRlciA9ICgpID0+IHtcbiAgICAgICAgdGltZW91dCA9IG51bGxcbiAgICAgICAgaWYgKCFpbW1lZGlhdGUpIGZuLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgICB9XG4gICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dFxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpXG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdClcbiAgICAgIGlmIChjYWxsTm93KSBmbi5hcHBseSh0aGlzLCBhcmdzKVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRmluZHMgdGhlIG5hdGl2ZSBzY3JvbGxiYXIgd2lkdGggZm9yIHRoZSBjdXJyZW50IGJyb3dzZXJcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKi9cbiAgZ2V0U2Nyb2xsYmFyV2lkdGggKCkge1xuICAgIGNvbnN0IG91dGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBvdXRlci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbidcbiAgICBvdXRlci5zdHlsZS53aWR0aCA9ICcxMDBweCdcbiAgICBvdXRlci5zdHlsZS5tc092ZXJmbG93U3R5bGUgPSAnc2Nyb2xsYmFyJ1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3V0ZXIpXG5cbiAgICBjb25zdCB3aWR0aE5vU2Nyb2xsID0gb3V0ZXIub2Zmc2V0V2lkdGhcbiAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnXG5cbiAgICBjb25zdCBpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgaW5uZXIuc3R5bGUud2lkdGggPSAnMTAwJSdcbiAgICBvdXRlci5hcHBlbmRDaGlsZChpbm5lcilcblxuICAgIGNvbnN0IHdpZHRoV2l0aFNjcm9sbCA9IGlubmVyLm9mZnNldFdpZHRoXG4gICAgb3V0ZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvdXRlcilcblxuICAgIHJldHVybiB3aWR0aE5vU2Nyb2xsIC0gd2lkdGhXaXRoU2Nyb2xsXG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBjbG9zZXN0IGludGVnZXIgZnJhY3Rpb24gZm9yIHRoZSBnaXZlbiBOdW1iZXJcbiAgICogQHBhcmFtICB7TnVtYmVyfSByYXRpb1xuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG1heEl0ZXJhdGlvbnMgPSAxMDBcbiAgICogQHJldHVybiB7VmVjdG9yMn1cbiAgICovXG4gIGZpbmRJbnRlZ2VyRnJhY3Rpb24gKHJhdGlvLCBtYXhJdGVyYXRpb25zID0gMTAwKSB7XG4gICAgbGV0IGJlc3REZWx0YSA9IE51bWJlci5NQVhfVkFMVUVcbiAgICBsZXQgYmVzdFggPSAwXG4gICAgbGV0IGJlc3RZID0gMFxuICAgIGxldCB4ID0gMVxuICAgIGxldCB5ID0gMVxuICAgIGZvciAobGV0IGl0ZXJhdGlvbnMgPSAwOyBpdGVyYXRpb25zIDwgbWF4SXRlcmF0aW9uczsgaXRlcmF0aW9ucysrKSB7XG4gICAgICBsZXQgZGVsdGEgPSB4IC8geSAtIHJhdGlvXG5cbiAgICAgIGlmIChkZWx0YSA8IDApIHtcbiAgICAgICAgeCsrXG4gICAgICB9IGVsc2UgaWYgKGRlbHRhID4gMCkge1xuICAgICAgICB5KytcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih4LCB5KVxuICAgICAgfVxuXG4gICAgICBsZXQgbmV3RGVsdGEgPSBNYXRoLmFicyh4IC8geSAtIHJhdGlvKVxuICAgICAgaWYgKG5ld0RlbHRhIDwgYmVzdERlbHRhKSB7XG4gICAgICAgIGJlc3REZWx0YSA9IG5ld0RlbHRhXG4gICAgICAgIGJlc3RYID0geFxuICAgICAgICBiZXN0WSA9IHlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoYmVzdFgsIGJlc3RZKVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBnaXZlbiBudW1iZXIgd2l0aCB0aGUgZ2l2ZW4gYW1vdW50IG9mIGRlY2ltYWxzLCBidXQgcmVtb3ZlcyB0cmFpbGluZ1xuICAgKiB6ZXJvZXMgYnkgY2FzdGluZyBpdCB0byBhIGZsb2F0XG4gICAqIEBwYXJhbSAge051bWJlcn0gbnVtYmVyXG4gICAqIEBwYXJhbSAge051bWJlcn0gZGVjaW1hbHNcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKi9cbiAgdG9GaXhlZCAobnVtYmVyLCBkZWNpbWFscyA9IDIpIHtcbiAgICBjb25zdCBmaXhlZCA9IG51bWJlci50b0ZpeGVkKGRlY2ltYWxzKVxuICAgIHJldHVybiBwYXJzZUZsb2F0KGZpeGVkKVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBnaXZlbiBzdHJpbmcgd2l0aCB0aGUgZmlyc3QgY2hhcmFjdGVyIHVwcGVyY2FzZWRcbiAgICogQHBhcmFtICB7U3RyaW5nfSBzdHJcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgY2FwaXRhbGl6ZSAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IG9iamVjdCB3aXRoIGZsaXBwZWQgdmFsdWVzIGFuZCBrZXlzXG4gICAqIEBwYXJhbSAge09iamVjdH0gb2JqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGZsaXBPYmplY3QgKG9iaikge1xuICAgIGNvbnN0IG5ld09iaiA9IHt9XG4gICAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgICAgbmV3T2JqW29ialtrZXldXSA9IGtleVxuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqXG4gIH0sXG5cbiAgQnJvd3NlclxufVxuXG5leHBvcnQgZGVmYXVsdCBVSVV0aWxzXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2xpYi91dGlscy5qcyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZnJvbTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMTczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMTc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanNcbi8vIG1vZHVsZSBpZCA9IDE3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkuanNcbi8vIG1vZHVsZSBpZCA9IDE3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBjb3JlID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpO1xudmFyICRKU09OID0gY29yZS5KU09OIHx8IChjb3JlLkpTT04gPSB7IHN0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnkgfSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHJldHVybiAkSlNPTi5zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3VtZW50cyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeS5qc1xuLy8gbW9kdWxlIGlkID0gMTc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLyogZ2xvYmFsIEhUTUxFbGVtZW50LCBXRUJQQUNLICovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCBCYXNlNjQgZnJvbSAnLi9iYXNlNjQnXG5pbXBvcnQgQXJyYXlVdGlscyBmcm9tICcuL2FycmF5LXV0aWxzJ1xuLyoqXG4gKiBQcm92aWRlcyB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgaW50ZXJuYWwgdXNlXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQaG90b0VkaXRvclNES1xuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgVXRpbHMge1xuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBvYmplY3QgaXMgYW4gQXJyYXlcbiAgICogQHBhcmFtICB7T2JqZWN0fSAgb2JqZWN0XG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNBcnJheSAob2JqZWN0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBBcnJheV0nXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgZ2l2ZW4gb2JqZWN0IGlzIGEgcGxhaW4gb2JqZWN0IChpLmUuLCBhIGxpdGVyYWwgb2JqZWN0KSBvciBub3QuXG4gICAqIEBwYXJhbSB7YW55fSBvYmplY3RcbiAgICogQHJldHVybnMgQm9vbGVhblxuICAgKi9cbiAgc3RhdGljIGlzUGxhaW5PYmplY3QgKG9iamVjdCkge1xuICAgIGlmICh0eXBlb2Ygb2JqZWN0ICE9PSAnb2JqZWN0JyB8fCAhb2JqZWN0KSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRQcm90b3R5cGVPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbGV0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdClcbiAgICAgIHJldHVybiBwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBwcm90byA9PT0gbnVsbFxuICAgIH1cblxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciB0aGUgdXNlciBhZ2VudCByZXByZXNlbnRzIGEgbW9iaWxlIGRldmljZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzTW9iaWxlICgpIHtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZVxuXG4gICAgY29uc3QgYSA9IG5hdmlnYXRvci51c2VyQWdlbnQgfHwgbmF2aWdhdG9yLnZlbmRvciB8fCB3aW5kb3cub3BlcmFcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIHJldHVybiAoLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2R8YWQpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLnRlc3QoYSl8fC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLnRlc3QoYS5zdWJzdHIoMCwgNCkpKVxuICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2V0aGVyIHRoZSBwbGF0Zm9ybSB0YXJnZXQgaXMgYSBicm93c2VyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNCcm93c2VyICgpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3ZXRoZXIgdGhlIHBsYXRmb3JtIHRhcmdldCBpcyBOb2RlanNcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc05vZGUgKCkge1xuICAgIHJldHVybiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpICYmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBnaXZlbiBvYmplY3QncyB2YWx1ZXMgYXMgYW4gYXJyYXlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcmV0dXJucyB7QXJyYXk8Kj59XG4gICAqL1xuICBzdGF0aWMgdmFsdWVzIChvYmplY3QpIHtcbiAgICB2YXIgdmFsdWVzID0gW11cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICB2YWx1ZXMucHVzaChvYmplY3Rba2V5XSlcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlc1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGEgRE9NIGVsZW1lbnRcbiAgICogQHBhcmFtICB7T2JqZWN0fSAgb1xuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgc3RhdGljIGlzRE9NRWxlbWVudCAobykge1xuICAgIHJldHVybiAoXG4gICAgICB0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdvYmplY3QnID8gbyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XG4gICAgICAgIDogbyAmJiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLm5vZGVUeXBlID09PSAxICYmIHR5cGVvZiBvLm5vZGVOYW1lID09PSAnc3RyaW5nJ1xuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGggZ2l2ZW4gZXZlbnQgaXMgYSB0b3VjaCBldmVudFxuICAgKiBAcGFyYW0gIHtFdmVudH0gIGVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc1RvdWNoRXZlbnQgKGUpIHtcbiAgICByZXR1cm4gKGUudHlwZS5pbmRleE9mKCd0b3VjaCcpICE9PSAtMSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemVzIHRoZSBnaXZlbiB2ZWN0b3IgdG8gZml0IGluc2lkZSB0aGUgZ2l2ZW4gbWF4IHNpemUgd2hpbGUgbWFpbnRhaW5pbmdcbiAgICogdGhlIGFzcGVjdCByYXRpb1xuICAgKiBAcGFyYW0gIHtWZWN0b3IyfSB2ZWN0b3JcbiAgICogQHBhcmFtICB7VmVjdG9yMn0gbWF4XG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9XG4gICAqL1xuICBzdGF0aWMgcmVzaXplVmVjdG9yVG9GaXQgKHZlY3RvciwgbWF4KSB7XG4gICAgY29uc3Qgc2NhbGUgPSBNYXRoLm1pbihtYXgueCAvIHZlY3Rvci54LCBtYXgueSAvIHZlY3Rvci55KVxuICAgIGNvbnN0IG5ld1NpemUgPSB2ZWN0b3IuY2xvbmUoKVxuICAgICAgLm11bHRpcGx5KHNjYWxlKVxuICAgIHJldHVybiBuZXdTaXplXG4gIH1cblxuICBzdGF0aWMgcmVzaXplVmVjdG9yVG9GaWxsICh2ZWN0b3IsIGNvbnRhaW5lcikge1xuICAgIGNvbnN0IHZlY3RvclJhdGlvID0gdmVjdG9yLnggLyB2ZWN0b3IueVxuICAgIGNvbnN0IGNvbnRhaW5lclJhdGlvID0gY29udGFpbmVyLnggLyBjb250YWluZXIueVxuICAgIGlmICh2ZWN0b3JSYXRpbyA+IGNvbnRhaW5lclJhdGlvKSB7XG4gICAgICByZXR1cm4gY29udGFpbmVyLmNsb25lKClcbiAgICAgICAgLnNldChjb250YWluZXIueSAqIHZlY3RvclJhdGlvLCBjb250YWluZXIueSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbnRhaW5lci5jbG9uZSgpXG4gICAgICAgIC5zZXQoY29udGFpbmVyLngsIGNvbnRhaW5lci54IC8gdmVjdG9yUmF0aW8pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIHZhbHVlIGlzIGV4dGVuZGFibGUgLyBjYW4gaGF2ZSBrZXlzXG4gICAqIEBwYXJhbSAgeyp9ICB2YWxcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0V4dGVuZGFibGUgKHZhbCkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgIT09IG51bGwgJiZcbiAgICAgICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKVxuICB9XG5cbiAgLyoqXG4gICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0KHMpIHRvIHRoZSBkZXN0aW5hdGlvblxuICAgKiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byB1bmRlZmluZWQuIE9uY2UgYVxuICAgKiBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0gIHtPYmplY3R9IC4uLnNvdXJjZXNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRzIChvYmplY3QsIC4uLnNvdXJjZXMpIHtcbiAgICAvLyBTaGFsbG93IGNsb25lXG4gICAgbGV0IG5ld09iamVjdCA9IHt9XG4gICAgZm9yIChsZXQga2V5IGluIG9iamVjdCkge1xuICAgICAgbmV3T2JqZWN0W2tleV0gPSBvYmplY3Rba2V5XVxuICAgIH1cblxuICAgIC8vIENsb25lIHNvdXJjZXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXNbaV1cbiAgICAgIGZvciAobGV0IGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdPYmplY3Rba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBuZXdPYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3T2JqZWN0XG4gIH1cblxuICAvKipcbiAgICogRG9lcyBhIGRlZXAgbWVyZ2UgYmV0d2VlbiBhIHNldCBvZiBvYmplY3RzLCBmcm9tIGxlZnQgdG8gcmlnaHQuIFRoZSBtZXJnZSBpc1xuICAgKiBkZWVwIGluIHRoZSBzZW5zZSB0aGF0IGl0IGdvZXMgcmVjdXJzZXZpbGV5IHRyb3VnaCB0aGUgb2JqZWN0cyBvd25cbiAgICogcHJvcGVydGllcy4gV2hlbiBpdCBlbmNvdW50ZXJzIGFuIGFycmF5LCBpdCBvbmx5IGRvZXMgYSBzaGFsbG93IGNvcHkgb2YgaXQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0XG4gICAqIEBwYXJhbSB7T2JqZWN0W119IHNvdXJjZXNcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBkZWVwTWVyZ2UgKGRlc3QsIC4uLnNvdXJjZXMpIHtcbiAgICAvLyBkZWVwIG1lcmdlIGJldHdlZW4gdHdvIG9iamVjdHMgb25seVxuICAgIGNvbnN0IF9kZWVwTWVyZ2UgPSAoZGVzdCwgc291cmNlKSA9PiB7XG4gICAgICAvLyBJZiB0aGUgc291cmNlIGlzIHVuZGVmaW5lZCwgcmV0dXJuIGEgY29weSBvZiBkZXN0XG4gICAgICBpZiAoc291cmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIF9kZWVwTWVyZ2UobnVsbCwgZGVzdClcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIHNvdXJjZSBpcyBhbiBhcnJheSwgcmV0dXJuIGEgc2hhbGxvdyBjb3B5XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIHJldHVybiBbLi4uc291cmNlXVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgc291cmNlIGlzIG5vdCBhIHBsYWluIG9iamVjdCwganVzdCByZXR1cm4gaXRcbiAgICAgIGlmICghVXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2VcbiAgICAgIH1cblxuICAgICAgLy8gSWYgZGVzdCBpcyBhbiBub3QgYSBwbGFpbiBvYmplY3QsIHJldHVybiBhIHNoYWxsb3cgY29weSBvZiB0aGUgc291cmNlXG4gICAgICBpZiAoIVV0aWxzLmlzUGxhaW5PYmplY3QoZGVzdCkpIHtcbiAgICAgICAgcmV0dXJuIHsuLi5zb3VyY2V9XG4gICAgICB9XG5cbiAgICAgIC8vIFNoYWxsb3ctY29weSB0aGUgb3JpZ2luYWwgb2JqZWN0XG4gICAgICBsZXQgcmVzdWx0ID0gey4uLmRlc3R9XG5cbiAgICAgIC8vIEdvIHRyb3VnaCBlYWNoIHNvdXJjZSBrZXlcbiAgICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSBzb3VyY2Vba2V5XVxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtrZXldID0gX2RlZXBNZXJnZShkZXN0W2tleV0sIHZhbHVlKVxuICAgICAgfSlcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlcy5yZWR1Y2UoX2RlZXBNZXJnZSwgZGVzdClcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdChzKSB0byB0aGUgZGVzdGluYXRpb25cbiAgICogb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyBhbmQgdGhlaXIgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG9cbiAgICogdW5kZWZpbmVkLiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlIHNvZiB0aGUgc2FtZSBwcm9wZXJ0eVxuICAgKiBhcmUgaWdub3JlZC5cbiAgICogQHBhcmFtICB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtICB7T2JqZWN0fSAuLi5zb3VyY2VzXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBkZWVwRGVmYXVsdHMgKG9iamVjdCwgLi4uc291cmNlcykge1xuICAgIGNvbnN0IHJldmVyc2VkU291cmNlcyA9IFsuLi5zb3VyY2VzXS5yZXZlcnNlKClcbiAgICByZXR1cm4gVXRpbHMuZGVlcE1lcmdlKC4uLnJldmVyc2VkU291cmNlcywgb2JqZWN0KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBkZWVwIGNsb25lIG9mIHRoZSBnaXZlbiBvYmplY3RcbiAgICogQHBhcmFtICB7T2JqZWN0fSAgICBvYmplY3RcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGRlZXBDbG9uZSAob2JqZWN0KSB7XG4gICAgbGV0IG5ld09iamVjdCA9IHt9XG4gICAgZm9yIChsZXQga2V5IGluIG9iamVjdCkge1xuICAgICAgaWYgKFV0aWxzLmlzRXh0ZW5kYWJsZShvYmplY3Rba2V5XSkpIHtcbiAgICAgICAgbmV3T2JqZWN0W2tleV0gPSBVdGlscy5kZWVwQ2xvbmUob2JqZWN0W2tleV0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdPYmplY3Rba2V5XSA9IG9iamVjdFtrZXldXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdPYmplY3RcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBkZWVwIHByb3BlcnR5IGluc2lkZSBhbiBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSB0aGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nW119IHBhdGggLSBFaXRoZXIgYSBzdHJpbmcgd2l0aCB0aGUgcHJvcCdzXG4gICAqICBuYW1lLCBvciBhbiBhcnJheSBvZiBwcm9wIG5hbWVzIGFuZC9vciBmdW5jdGlvbnMgZGVzY3JpYmluZyBhIHBhdGggaW4gYVxuICAgKiAgbmVzdGVkIG9iamVjdC4gQW55IGZ1bmN0aW9uIHBhc3NlZCBpbiB0aGUgYXJyYXkgc2hvdWxkIGZ1bmN0aW9uIGFzIGEgZ2V0dGVyXG4gICAqICBmb3IgYSBwcm9wLlxuICAgKlxuICAgKiBAcmV0dXJucyB7KGFueXx1bmRlZmluZWQpfSAtIFRoZSBwcm9wJ3MgdmFsdWUsIG9yIHVuZGVmaW5lZCBpZiB0aGUgcHJvcCBpc1xuICAgKiBub3QgZm91bmRcbiAgICovXG4gIHN0YXRpYyBnZXREZWVwUHJvcGVydHkgKG9iamVjdCwgcGF0aCkge1xuICAgIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvYmplY3RbcGF0aF1cbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocGF0aCkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICAvLyBXaGVuIHdlIGhhdmUgYSBnZXR0ZXIgZnVuY3Rpb24gaW5zaWRlIHRoZSBhcnJheSwgY2FsbCBpdCBhcyBhIGdldHRlcixcbiAgICAvLyBpZ25vcmluZyBhbnkgdHlwZSBlcnJvcnMgdGhyb3duIGJ5IGl0IChqdXN0IHJldHVybiB1bmRlZmluZWQuKVxuICAgIGNvbnN0IGNhbGxQcm9wTmFtZSA9IChvYmplY3QsIHByb3BOYW1lKSA9PiB7XG4gICAgICBsZXQgdmFsdWVcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlID0gcHJvcE5hbWUob2JqZWN0KVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgVHlwZUVycm9yKSkge1xuICAgICAgICAgIHRocm93IGVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aC5yZWR1Y2UoKG9iamVjdCwgcHJvcE5hbWUpID0+XG4gICAgICBvYmplY3RcbiAgICAgICAgPyAodHlwZW9mIHByb3BOYW1lID09PSAnZnVuY3Rpb24nID8gY2FsbFByb3BOYW1lKG9iamVjdCwgcHJvcE5hbWUpIDogb2JqZWN0W3Byb3BOYW1lXSlcbiAgICAgICAgOiBudWxsXG4gICAgICAsIG9iamVjdClcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdChzKSB0byB0aGUgZGVzdGluYXRpb25cbiAgICogb2JqZWN0LiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzXG4gICAqIHNvdXJjZXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IC4uLnNvdXJjZXNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGV4dGVuZCAob2JqZWN0LCAuLi5zb3VyY2VzKSB7XG4gICAgLy8gU2hhbGxvdyBjbG9uZVxuICAgIGxldCBuZXdPYmplY3QgPSB7fVxuICAgIGZvciAobGV0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgIG5ld09iamVjdFtrZXldID0gb2JqZWN0W2tleV1cbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgc291cmNlc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc291cmNlID0gc291cmNlc1tpXVxuICAgICAgZm9yIChsZXQga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBuZXdPYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld09iamVjdFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIHRoZSBnaXZlbiBvYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGNsb25lIChvYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcy5leHRlbmQoe30sIG9iamVjdClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgQmxvYiBVUkkgZnJvbSB0aGUgZ2l2ZW4gRGF0YSBVUklcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVCbG9iVVJJRnJvbURhdGFVUkkgKGRhdGEpIHtcbiAgICBjb25zdCByb290ID0gKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSA/IGdsb2JhbCA6IHdpbmRvd1xuICAgIGlmICghcm9vdC5CbG9iIHx8ICFyb290LlVSTCB8fCAhQXJyYXlCdWZmZXIgfHwgIVVpbnQ4QXJyYXkpIHtcbiAgICAgIHJldHVybiBkYXRhXG4gICAgfVxuXG4gICAgY29uc3QgcmF3RGF0YSA9IEJhc2U2NC5kZWNvZGUoZGF0YS5zcGxpdCgnLCcpWzFdKVxuICAgIGNvbnN0IG1pbWVTdHJpbmcgPSBkYXRhLnNwbGl0KCcsJylbMF0uc3BsaXQoJzonKVsxXS5zcGxpdCgnOycpWzBdXG5cbiAgICAvLyB3cml0ZSB0aGUgYnl0ZXMgb2YgdGhlIHN0cmluZyB0byBhbiBBcnJheUJ1ZmZlclxuICAgIGNvbnN0IGFycmF5QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHJhd0RhdGEubGVuZ3RoKVxuICAgIGNvbnN0IGludEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXdEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbnRBcnJheVtpXSA9IHJhd0RhdGFbaV1cbiAgICB9XG5cbiAgICAvLyB3cml0ZSB0aGUgQXJyYXlCdWZmZXIgdG8gYSBibG9iLCBhbmQgeW91J3JlIGRvbmVcbiAgICBjb25zdCBibG9iID0gbmV3IHJvb3QuQmxvYihbYXJyYXlCdWZmZXJdLCB7XG4gICAgICB0eXBlOiBtaW1lU3RyaW5nXG4gICAgfSlcbiAgICByZXR1cm4gcm9vdC5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpXG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgVVVJRFxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgZ2V0VVVJRCAoKSB7XG4gICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgIGxldCByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMFxuICAgICAgbGV0IHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpXG4gICAgICByZXR1cm4gdi50b1N0cmluZygxNilcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjYW52YXMgRE9NIGVsZW1lbnQgKGJyb3dzZXIpIG9yIGEgbm9kZS1jYW52YXMgY2FudmFzIChub2RlKVxuICAgKiBAcmV0dXJuIHtDYW52YXN9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlQ2FudmFzICgpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICB9XG4gIHN0YXRpYyBjb252ZXJ0SHRtbEltYWdlVG9SR0JBQ2FudmFzIChodG1sSW1hZ2UpIHtcbiAgICAvLyBXb3JrYXJvdW5kIGZybyBub24tUkdCIGltYWdlc1xuICAgIGNvbnN0IGNhbnZhcyA9IFV0aWxzLmNyZWF0ZUNhbnZhcygpXG4gICAgY2FudmFzLndpZHRoID0gaHRtbEltYWdlLndpZHRoXG4gICAgY2FudmFzLmhlaWdodCA9IGh0bWxJbWFnZS5oZWlnaHRcbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcbiAgICBjb250ZXh0LmRyYXdJbWFnZShodG1sSW1hZ2UsIDAsIDAsIGh0bWxJbWFnZS53aWR0aCwgaHRtbEltYWdlLmhlaWdodClcblxuICAgIHJldHVybiBjYW52YXNcbiAgfVxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBkaW1lbnNpb25zIGFyZSBQT1RcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSAgZGltZW5zaW9uc1xuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzUG93ZXJPZlR3byAoZGltZW5zaW9ucykge1xuICAgIHJldHVybiAoZGltZW5zaW9ucy54ICYgKGRpbWVuc2lvbnMueCAtIDEpKSA9PT0gMCAmJlxuICAgICAgKGRpbWVuc2lvbnMueSAmIChkaW1lbnNpb25zLnkgLSAxKSkgPT09IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBuZXh0IGxvd2VzdCBwb3dlciBvZiB0d28gb2YgdGhlIGdpdmVuIG51bWJlclxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHhcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKi9cbiAgc3RhdGljIG5leHRMb3dlc3RQT1QgKHgpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IDMyOyBpIDw8PSAxKSB7XG4gICAgICB4ID0geCB8IHggPj4gaVxuICAgIH1cbiAgICByZXR1cm4geCAtICh4ID4+IDEpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIHR3byBvZiB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAqIEBwYXJhbSAge051bWJlcn0geFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICBzdGF0aWMgbmV4dEhpZ2hlc3RQT1QgKHgpIHtcbiAgICB4LS1cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IDMyOyBpIDw8PSAxKSB7XG4gICAgICB4ID0geCB8IHggPj4gaVxuICAgIH1cbiAgICByZXR1cm4geCArIDFcbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZlcyB0aGUgYXJyYXkgaXRlbSBhdCBgb2xkSW5kZXhgIHRvIGBuZXdJbmRleGBcbiAgICogQHBhcmFtICB7QXJyYXl9IGFyclxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG9sZEluZGV4XG4gICAqIEBwYXJhbSAge051bWJlcn0gbmV3SW5kZXhcbiAgICovXG4gIHN0YXRpYyBtb3ZlQXJyYXlJdGVtIChhcnIsIG9sZEluZGV4LCBuZXdJbmRleCkge1xuICAgIGlmIChuZXdJbmRleCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICBsZXQgayA9IG5ld0luZGV4IC0gYXJyLmxlbmd0aFxuICAgICAgd2hpbGUgKChrLS0pICsgMSkge1xuICAgICAgICBhcnIucHVzaCh1bmRlZmluZWQpXG4gICAgICB9XG4gICAgfVxuICAgIGFyci5zcGxpY2UobmV3SW5kZXgsIDAsIGFyci5zcGxpY2Uob2xkSW5kZXgsIDEpWzBdKVxuICB9XG5cbiAgLyoqXG4gICAqIE1ha2VzIHN1cmUgdGhlIGdpdmVuIGNhbnZhcyBoYXMgdGhlIGdpdmVuIGRpbWVuc2lvbnMuIElmIG5vdCwgaXQgZG9lcyBub3QgY2hhbmdlIHRoZVxuICAgKiBjYW52YXMgZGltZW5zaW9ucy5cbiAgICogQHBhcmFtICB7Q2FudmFzfSBjYW52YXNcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBkaW1lbnNpb25zXG4gICAqL1xuICBzdGF0aWMgZW5zdXJlQ2FudmFzRGltZW5zaW9ucyAoY2FudmFzLCBkaW1lbnNpb25zKSB7XG4gICAgaWYgKGNhbnZhcy53aWR0aCAhPT0gZGltZW5zaW9ucy54IHx8XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgIT09IGRpbWVuc2lvbnMueSkge1xuICAgICAgY2FudmFzLndpZHRoID0gZGltZW5zaW9ucy54XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gZGltZW5zaW9ucy55XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBnaXZlbiBhcnJheSBvZiBieXRlcyB0byBhIHN0cmluZ1xuICAgKiBAcGFyYW0gIHtOdW1iZXJbXX0gYnl0ZUFycmF5XG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBieXRlQXJyYXlUb1N0cmluZyAoYnl0ZUFycmF5KSB7XG4gICAgcmV0dXJuIGJ5dGVBcnJheS5tYXAoKGJ5dGUpID0+IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSkpLmpvaW4oJycpXG4gIH1cblxuICAvKipcbiAgICogQ2xhbXBzIHRoZSBnaXZlbiBgbnVtYmVyYCBpbnRvIGBtaW5gIGFuZCBgbWF4YFxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG51bWJlclxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG1pblxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG1heFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICBzdGF0aWMgY2xhbXAgKG51bWJlciwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihudW1iZXIsIG1heCkpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBzdHJpbmcgbWF0Y2hlcyB0aGUgZ2l2ZW4gd2lsZGNhcmRcbiAgICogQHBhcmFtICB7U3RyaW5nfSBzdHJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBydWxlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgd2lsZENhcmRNYXRjaCAoc3RyLCBydWxlKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcnVsZS5zcGxpdCgnKicpLmpvaW4oJy4qJykgKyAnJCcpLnRlc3Qoc3RyKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgb2JqZWN0IHdpdGggZmxpcHBlZCB2YWx1ZXMgYW5kIGtleXNcbiAgICogQHBhcmFtICB7T2JqZWN0fSBvYmpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGZsaXBPYmplY3QgKG9iaikge1xuICAgIGNvbnN0IG5ld09iaiA9IHt9XG4gICAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgICAgbmV3T2JqW29ialtrZXldXSA9IGtleVxuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGNsb25lIG9mIHRoZSBnaXZlbiBvcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGNsb25lT3B0aW9ucyAob3B0aW9ucykge1xuICAgIGNvbnN0IG5ld09wdGlvbnMgPSB7fVxuICAgIGZvciAobGV0IGtleSBpbiBvcHRpb25zKSB7XG4gICAgICBsZXQgdmFsdWUgPSBvcHRpb25zW2tleV1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKClcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUuY2xvbmUpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5jbG9uZSgpXG4gICAgICB9XG4gICAgICBuZXdPcHRpb25zW2tleV0gPSB2YWx1ZVxuICAgIH1cbiAgICByZXR1cm4gbmV3T3B0aW9uc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGdpdmVuIGRhdGUgYXMgUkZDIDMzMzlcbiAgICogQHBhcmFtIHtEYXRlfSBkYXRlXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBJU09EYXRlU3RyaW5nIChkYXRlKSB7XG4gICAgZnVuY3Rpb24gcGFkIChuKSB7IHJldHVybiBuIDwgMTAgPyAnMCcgKyBuIDogbiB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArICctJyArXG4gICAgICBwYWQoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgKyAnLScgK1xuICAgICAgcGFkKGRhdGUuZ2V0VVRDRGF0ZSgpKSArICdUJyArXG4gICAgICBwYWQoZGF0ZS5nZXRVVENIb3VycygpKSArICc6JyArXG4gICAgICBwYWQoZGF0ZS5nZXRVVENNaW51dGVzKCkpICsgJzonICtcbiAgICAgIHBhZChkYXRlLmdldFVUQ1NlY29uZHMoKSkgKyAnWidcbiAgfVxuXG4gIHN0YXRpYyBnZXRDcm9zc09yaWdpblZhbHVlIChjcm9zc09yaWdpbikge1xuICAgIGlmICghY3Jvc3NPcmlnaW4pIHtcbiAgICAgIHJldHVybiAnYW5vbnltb3VzJ1xuICAgIH1cblxuICAgIGlmIChjcm9zc09yaWdpbiA9PT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgcmV0dXJuIGNyb3NzT3JpZ2luXG4gIH1cblxuICAvKipcbiAgICogU2hhbGxvdyBlcXVhbCBjb21wYXJlIHR3byBvYmplY3RzXG4gICAqIEBwYXJhbSB7Kn0gb2JqQVxuICAgKiBAcGFyYW0geyp9IG9iakJcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgc2hhbGxvd0VxdWFsIChvYmpBLCBvYmpCKSB7XG4gICAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKVxuICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpXG5cbiAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICAgIHZhciBiSGFzT3duUHJvcGVydHkgPSBoYXNPd25Qcm9wZXJ0eS5iaW5kKG9iakIpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFiSGFzT3duUHJvcGVydHkoa2V5c0FbaV0pIHx8IG9iakFba2V5c0FbaV1dICE9PSBvYmpCW2tleXNBW2ldXSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zICd2YWx1ZScgaWYgY29uZGl0aW9uIGlzIG1ldCBlbHNlIHJldHVybnMgJ3VuZGVmaW5lZCdcbiAgICogQHBhcmFtIHtCb29sZWFufSBjb25kaXRpb25cbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIHN0YXRpYyBlbmFibGVJZiAoY29uZGl0aW9uLCB2YWx1ZSkge1xuICAgIHJldHVybiBjb25kaXRpb24gPyB2YWx1ZSA6IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAgVGhyb3dzIGFuIGVycm9yIGlmIGNvbmRpdGlvbiBpcyBub3QgbWV0XG4gICAgQHBhcmFtIHtCb29sZWFufSBjb25kaXRpb25cbiAgICovXG4gIHN0YXRpYyBpbnZhcmlhbnQgKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKVxuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXhlY3R1ZXMgYWxsIFByb21pc2VzIGluIGFuIGFycmF5LCByZXR1cm5pbmcgYSBuZXcgUHJvbWlzZSB3aGljaFxuICAgKiB3aWxsIGZ1bGZpbGwgd2l0aCBhbiBhcnJheSBvZiB0aGUgdmFsdWVzIHJldHVybmVkIGJ5IGFsbCBwcm9taXNlcyBpblxuICAgKiB0aGUgY2FzZSBhbGwgb2YgdGhlbSBhcmUgcmVzb2x2ZWQsIG9yLCB3aXRoIG9uZSBvciBtb3JlIGFyZSByZWplY3RlZCxcbiAgICogcmVqZWN0cyB3aXRoIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIHRoZSBlcnJvciB2YWx1ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk8UHJvbWlzZT59IHByb21pc2VzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn1cbiAgICovXG4gIHN0YXRpYyBleGVjdXRlUHJvbWlzZXMgKHByb21pc2VzKSB7XG4gICAgbGV0IGNvdW50ID0gcHJvbWlzZXMubGVuZ3RoXG4gICAgbGV0IGNvdW50ZXIgPSAwXG5cbiAgICBsZXQgdmFsdWVzID0gW11cbiAgICBsZXQgZXJyb3JzID0gW11cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBvbkZpbm5pc2ggPSAoKSA9PiB7XG4gICAgICAgIGNvdW50ZXIrK1xuICAgICAgICBpZiAoY291bnRlciA+PSBjb3VudCkge1xuICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWVzKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3JzKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBvblN1Y2Nlc3MgPSB2YWx1ZSA9PiB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKVxuICAgICAgICBvbkZpbm5pc2goKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBvbkVycm9yID0gdmFsdWUgPT4ge1xuICAgICAgICBlcnJvcnMucHVzaCh2YWx1ZSlcbiAgICAgICAgb25GaW5uaXNoKClcbiAgICAgIH1cblxuICAgICAgcHJvbWlzZXMuZm9yRWFjaChwcm9taXNlID0+IHtcbiAgICAgICAgcHJvbWlzZS50aGVuKG9uU3VjY2VzcykuY2F0Y2gob25FcnJvcilcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuICBzdGF0aWMgQXJyYXkgPSBBcnJheVV0aWxzIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn1cblxuZXhwb3J0IGRlZmF1bHQgVXRpbHNcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2RrL2NvcmUvbGliL3V0aWxzLmpzIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gMTc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gMTgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1hc3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDE4MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qc1xuLy8gbW9kdWxlIGlkID0gMTg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAxODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDE4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMTg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qc1xuLy8gbW9kdWxlIGlkID0gMTg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmtleXM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKlxuICogRXh0cmFjdGVkIGZyb20gTWluaWZ5SnBlZyAoQ29weXJpZ2h0IChjKSAyMDE0IEhpcm9ha2kgTWF0b2JhLCBNSVQgTGljZW5zZSk6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vaE1hdG9iYS9NaW5pZnlKcGVnXG4gKiBAbGljZW5zZVxuICovXG5cbmNvbnN0IEtFWV9TVFIgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nXG5cbi8qKlxuICogUHJvdmlkZXMgQmFzZTY0IGVuY29kZSBhbmQgZGVjb2RlIG1ldGhvZHNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAaWdub3JlXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5jb25zdCBCYXNlNjQgPSB7XG4gIC8qKlxuICAgKiBFbmNvZGVzIHRoZSBnaXZlbiBpbnB1dCBpbnRvIGEgQmFzZTY0IHN0cmluZ1xuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGlucHV0XG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIGVuY29kZSAoaW5wdXQpIHtcbiAgICBsZXQgb3V0cHV0ID0gJydcbiAgICBsZXQgY2hyMSwgY2hyMiwgY2hyM1xuICAgIGxldCBlbmMxLCBlbmMyLCBlbmMzLCBlbmM0XG4gICAgbGV0IGkgPSAwXG5cbiAgICBkbyB7XG4gICAgICBjaHIxID0gaW5wdXRbaSsrXVxuICAgICAgY2hyMiA9IGlucHV0W2krK11cbiAgICAgIGNocjMgPSBpbnB1dFtpKytdXG5cbiAgICAgIGVuYzEgPSBjaHIxID4+IDJcbiAgICAgIGVuYzIgPSAoKGNocjEgJiAzKSA8PCA0KSB8IChjaHIyID4+IDQpXG4gICAgICBlbmMzID0gKChjaHIyICYgMTUpIDw8IDIpIHwgKGNocjMgPj4gNilcbiAgICAgIGVuYzQgPSBjaHIzICYgNjNcblxuICAgICAgaWYgKGlzTmFOKGNocjIpKSB7XG4gICAgICAgIGVuYzMgPSBlbmM0ID0gNjRcbiAgICAgIH0gZWxzZSBpZiAoaXNOYU4oY2hyMykpIHtcbiAgICAgICAgZW5jNCA9IDY0XG4gICAgICB9XG5cbiAgICAgIG91dHB1dCA9IG91dHB1dCArXG4gICAgICAgICBLRVlfU1RSLmNoYXJBdChlbmMxKSArXG4gICAgICAgICBLRVlfU1RSLmNoYXJBdChlbmMyKSArXG4gICAgICAgICBLRVlfU1RSLmNoYXJBdChlbmMzKSArXG4gICAgICAgICBLRVlfU1RSLmNoYXJBdChlbmM0KVxuICAgICAgY2hyMSA9IGNocjIgPSBjaHIzID0gJydcbiAgICAgIGVuYzEgPSBlbmMyID0gZW5jMyA9IGVuYzQgPSAnJ1xuICAgIH0gd2hpbGUgKGkgPCBpbnB1dC5sZW5ndGgpXG5cbiAgICByZXR1cm4gb3V0cHV0XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlY29kZXMgdGhlIGdpdmVuIEJhc2U2NCBzdHJpbmdcbiAgICogQHBhcmFtICB7U3RyaW5nfSBpbnB1dFxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuICBkZWNvZGUgKGlucHV0KSB7XG4gICAgbGV0IGNocjEsIGNocjIsIGNocjNcbiAgICBsZXQgZW5jMSwgZW5jMiwgZW5jMywgZW5jNFxuICAgIGxldCBpID0gMFxuICAgIGxldCBidWYgPSBbXVxuXG4gICAgLy8gcmVtb3ZlIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBBLVosIGEteiwgMC05LCArLCAvLCBvciA9XG4gICAgdmFyIGJhc2U2NHRlc3QgPSAvW15BLVphLXowLTkrLz1dL2dcbiAgICBpZiAoYmFzZTY0dGVzdC5leGVjKGlucHV0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSB3ZXJlIGludmFsaWQgYmFzZTY0IGNoYXJhY3RlcnMgaW4gdGhlIGlucHV0IHRleHQuXFxuJyArXG4gICAgICAgICAgICAnVmFsaWQgYmFzZTY0IGNoYXJhY3RlcnMgYXJlIEEtWiwgYS16LCAwLTksIFxcJytcXCcsIFxcJy9cXCcsYW5kIFxcJz1cXCdcXG4nICtcbiAgICAgICAgICAgICdFeHBlY3QgZXJyb3JzIGluIGRlY29kaW5nLicpXG4gICAgfVxuICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZSgvW15BLVphLXowLTkrLz1dL2csICcnKVxuXG4gICAgZG8ge1xuICAgICAgZW5jMSA9IEtFWV9TVFIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSlcbiAgICAgIGVuYzIgPSBLRVlfU1RSLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpXG4gICAgICBlbmMzID0gS0VZX1NUUi5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKVxuICAgICAgZW5jNCA9IEtFWV9TVFIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSlcblxuICAgICAgY2hyMSA9IChlbmMxIDw8IDIpIHwgKGVuYzIgPj4gNClcbiAgICAgIGNocjIgPSAoKGVuYzIgJiAxNSkgPDwgNCkgfCAoZW5jMyA+PiAyKVxuICAgICAgY2hyMyA9ICgoZW5jMyAmIDMpIDw8IDYpIHwgZW5jNFxuXG4gICAgICBidWYucHVzaChjaHIxKVxuXG4gICAgICBpZiAoZW5jMyAhPT0gNjQpIHtcbiAgICAgICAgYnVmLnB1c2goY2hyMilcbiAgICAgIH1cbiAgICAgIGlmIChlbmM0ICE9PSA2NCkge1xuICAgICAgICBidWYucHVzaChjaHIzKVxuICAgICAgfVxuXG4gICAgICBjaHIxID0gY2hyMiA9IGNocjMgPSAnJ1xuICAgICAgZW5jMSA9IGVuYzIgPSBlbmMzID0gZW5jNCA9ICcnXG4gICAgfSB3aGlsZSAoaSA8IGlucHV0Lmxlbmd0aClcblxuICAgIHJldHVybiBidWZcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXNlNjRcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2RrL2NvcmUvbGliL2Jhc2U2NC5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuY2xhc3MgQXJyYXlVdGlscyB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IGluIGFuIGFycmF5XG4gICAqIEBwYXJhbSB7QXJyYXk8QT59IGFyclxuICAgKiBAcmV0dXJucyB7QX1cbiAgICovXG4gIHN0YXRpYyBoZWFkIChhcnIpIHtcbiAgICByZXR1cm4gYXJyWzBdXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNoYWxsb3cgY29weSBvZiB0aGUgYXJyYXkgZXhjbHVkaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAqIEBwYXJhbSB7QXJyYXk8QT59IGFyclxuICAgKiBAcmV0dXJucyB7QXJyYXk8QT59XG4gICAqL1xuICBzdGF0aWMgdGFpbCAoYXJyKSB7XG4gICAgcmV0dXJuIGFyci5zbGljZSgxKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheVxuICAgKiBAcGFyYW0ge0FycmF5PEE+fSBhcnJcbiAgICogQHJldHVybnMge0F9XG4gICAqL1xuICBzdGF0aWMgbGFzdCAoYXJyKSB7XG4gICAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBhcnJheSBleGNsdWRpbmcgdGhlIGxhc3QgZWxlbWVudFxuICAgKiBAcGFyYW0ge0FycmF5PEE+fSBhcnJcbiAgICogQHJldHVybnMge0FycmF5PEE+fVxuICAgKi9cbiAgc3RhdGljIGluaXQgKGFycikge1xuICAgIHJldHVybiBhcnIuc2xpY2UoMCwgYXJyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNoYWxsb3cgY29weSBvZiB0aGUgYXJyYXkgd2l0aCB0aGUgZWxlbWVudHMgdGhhIHBhc3NcbiAgICogdGhlIHRlc3QgZnVuY3Rpb24gcmVtb3ZlZC5cbiAgICogQHBhcmFtIHtBcnJheTxBPn0gYXJyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgLSBBIHRlc3QgZnVuY3Rpb25cbiAgICovXG4gIHN0YXRpYyByZW1vdmUgKGFyciwgZnVuYykge1xuICAgIHJldHVybiBhcnIuZmlsdGVyKCh2LCBpLCBhcnIpID0+ICFmdW5jKHYsIGksIGFycikpXG4gIH1cblxuICAvKipcbiAgICogRmluZHMgdGhlIGluZGV4IGZpcnN0IGVsZW1lbnQgb2YgdGhlIEFycmF5IHRvIHdoaWNoIHRoZSBzdXBwbGllZCBmdW5jdGlvbiByZXR1cm5zXG4gICAqIGEgdHJ1ZSB2YWx1ZS4gSWYgdGhlIGVsZW1lbnQgaXMgbm90IGZvdW5kIGl0IHJldHVybnMgLTEuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmNcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHN0YXRpYyBmaW5kSW5kZXggKGFycmF5LCBmdW5jKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGZ1bmMoYXJyYXlbaV0pKSB7XG4gICAgICAgIHJldHVybiBpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xXG4gIH1cblxuICAvKipcbiAgICogRmluZHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhlIEFycmF5IHRvIHdoaWNoIHRoZSBzdXBwbGllZCBmdW5jdGlvbiByZXR1cm5zXG4gICAqIGEgdHJ1ZSB2YWx1ZSBhbmQgcmV0dXJucyBpdC4gT3RoZXJ3aXNlIGl0IHJldHVybnMgdW5kZWZpbmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jXG4gICAqIEByZXR1cm5zIHthbnl9XG4gICAqL1xuICBzdGF0aWMgZmluZCAoYXJyYXksIGZ1bmMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZnVuYyhhcnJheVtpXSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5W2ldXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIEZsYXR0ZW5zIHRoZSBnaXZlbiBtdWx0aWRpbWVuc2lvbmFsIGFycmF5XG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgc3RhdGljIGZsYXR0ZW4gKGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbiAoZmxhdCwgdG9GbGF0dGVuKSB7XG4gICAgICByZXR1cm4gZmxhdC5jb25jYXQoQXJyYXkuaXNBcnJheSh0b0ZsYXR0ZW4pID8gQXJyYXlVdGlscy5mbGF0dGVuKHRvRmxhdHRlbikgOiB0b0ZsYXR0ZW4pXG4gICAgfSwgW10pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbmQgYXJyYXkgY29udGFpbmluZyB0aGUgbnVtYmVycyBnb2luZyBmcm9tIGBzdGFydGAgKGluY2x1c2l2ZSkgdG9cbiAgICogYGVuZGAgKGV4Y2x1c2l2ZSlcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAgICogQHJldHVybnMgQXJyYXlcbiAgICovXG4gIHN0YXRpYyByYW5nZSAoc3RhcnQsIGVuZCkge1xuICAgIGxldCBhcnIgPSBbXVxuXG4gICAgaWYgKGVuZCA+IHN0YXJ0KSB7XG4gICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICBhcnIucHVzaChpKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhcnJcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IGNvbnNpc3Rpbmcgb2YgdGhlIHZhbHVlIGB2YWxgIHJlcGVhdGVkIGBuYCB0aW1lcy5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHZhbFxuICAgKiBAcGFyYW0ge251bWJlcn0gblxuICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgcmVwZWF0ICh2YWwsIG4pIHtcbiAgICBsZXQgYXJyID0gW11cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICBhcnJbaV0gPSB2YWxcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSB3aGljaCBpcyBhbiBhcnJheSBvZiBhcnJheXMgb2YgZXF1YWxseSBwb3NpdGlvbmVkIGl0ZW1zIGluIGJvdGggYXJyYXlzLFxuICAgKiBlLmcsIHppcChbMSwgMiwgM10sIFs0LCA1LCA2XSkgPSBbWzEsIDRdLCBbMiwgNV0sIFszLCA2XV1cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gYVxuICAgKiBAcGFyYW0ge0FycmF5fSBiXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyB6aXAgKGEsIGIpIHtcbiAgICBsZXQgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICAgIGxldCBhcnIgPSBbXVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJyW2ldID0gW2FbaV0sIGJbaV1dXG4gICAgfVxuXG4gICAgcmV0dXJuIGFyclxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFycmF5VXRpbHNcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2RrL2NvcmUvbGliL2FycmF5LXV0aWxzLmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbnRlcm5ldCBleHBsb3JlciB2ZXJzaW9uIG9yIGZhbHNlLCBpZiBicm93c2VyIGlzIG5vdCBhbiBJRVxuICAgKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAgICovXG4gIGdldElFVmVyc2lvbiAoKSB7XG4gICAgY29uc3QgeyB1c2VyQWdlbnQsIGFwcFZlcnNpb24gfSA9IG5hdmlnYXRvclxuICAgIGlmIChhcHBWZXJzaW9uLmluZGV4T2YoJ01TSUUnKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBhcHBWZXJzaW9uLm1hdGNoKC9NU0lFXFxzKz8oWzAtOV0rKS9pKVsxXVxuICAgIH0gZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiB1c2VyQWdlbnQubWF0Y2goL3J2OihbMC05XSspL2kpWzFdXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgYW4gSUUgMTBcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGlzSUUxMCAoKSB7XG4gICAgY29uc3QgdmVyc2lvbiA9IHRoaXMuZ2V0SUVWZXJzaW9uKClcbiAgICByZXR1cm4gdmVyc2lvbiAhPT0gZmFsc2UgJiYgdmVyc2lvbiA9PT0gMTBcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgYW4gSUUgMTFcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGlzSUUxMSAoKSB7XG4gICAgY29uc3QgdmVyc2lvbiA9IHRoaXMuZ2V0SUVWZXJzaW9uKClcbiAgICByZXR1cm4gdmVyc2lvbiAhPT0gZmFsc2UgJiYgdmVyc2lvbiA9PT0gMTFcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgYW4gSUUgd2l0aCBhIHZlcnNpb24gbnVtYmVyIGxvd2VyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuXG4gICAqIHZlcnNpb25cbiAgICogQHBhcmFtICB7U3RyaW5nfSAgdmVyc2lvblxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgaXNJRWx0ZSAodmVyc2lvbikge1xuICAgIGNvbnN0IGJyb3dzZXJWZXJzaW9uID0gdGhpcy5nZXRJRVZlcnNpb24oKVxuICAgIGlmIChicm93c2VyVmVyc2lvbiA9PT0gZmFsc2UpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiBicm93c2VyVmVyc2lvbiA8PSB2ZXJzaW9uXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvbGliL3V0aWxzL2Jyb3dzZXIuanMiLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vKiFcbiAqIE5hdGl2ZSBQcm9taXNlIE9ubHlcbiAqIHYwLjguMC1hIChjKSBLeWxlIFNpbXBzb25cbiAqIE1JVCBMaWNlbnNlOiBodHRwOi8vZ2V0aWZ5Lm1pdC1saWNlbnNlLm9yZ1xuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5jb25zdCBwcm9taXNlRmFjdG9yeSA9IGZ1bmN0aW9uIERFRigpe1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgYnVpbHRJblByb3AsIGN5Y2xlLCBzY2hlZHVsaW5nX3F1ZXVlLFxuICAgIFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcbiAgICB0aW1lciA9ICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9IFwidW5kZWZpbmVkXCIpID9cbiAgICAgIGZ1bmN0aW9uIHRpbWVyKGZuKSB7IHJldHVybiBzZXRJbW1lZGlhdGUoZm4pOyB9IDpcbiAgICAgIHNldFRpbWVvdXRcbiAgO1xuXG4gIC8vIGRhbW1pdCwgSUU4LlxuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcInhcIix7fSk7XG4gICAgYnVpbHRJblByb3AgPSBmdW5jdGlvbiBidWlsdEluUHJvcChvYmosbmFtZSx2YWwsY29uZmlnKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaixuYW1lLHtcbiAgICAgICAgdmFsdWU6IHZhbCxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogY29uZmlnICE9PSBmYWxzZVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuICBjYXRjaCAoZXJyKSB7XG4gICAgYnVpbHRJblByb3AgPSBmdW5jdGlvbiBidWlsdEluUHJvcChvYmosbmFtZSx2YWwpIHtcbiAgICAgIG9ialtuYW1lXSA9IHZhbDtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIC8vIE5vdGU6IHVzaW5nIGEgcXVldWUgaW5zdGVhZCBvZiBhcnJheSBmb3IgZWZmaWNpZW5jeVxuICBzY2hlZHVsaW5nX3F1ZXVlID0gKGZ1bmN0aW9uIFF1ZXVlKCkge1xuICAgIHZhciBmaXJzdCwgbGFzdCwgaXRlbTtcblxuICAgIGZ1bmN0aW9uIEl0ZW0oZm4sc2VsZikge1xuICAgICAgdGhpcy5mbiA9IGZuO1xuICAgICAgdGhpcy5zZWxmID0gc2VsZjtcbiAgICAgIHRoaXMubmV4dCA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQoZm4sc2VsZikge1xuICAgICAgICBpdGVtID0gbmV3IEl0ZW0oZm4sc2VsZik7XG4gICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgbGFzdC5uZXh0ID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBmaXJzdCA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgbGFzdCA9IGl0ZW07XG4gICAgICAgIGl0ZW0gPSB2b2lkIDA7XG4gICAgICB9LFxuICAgICAgZHJhaW46IGZ1bmN0aW9uIGRyYWluKCkge1xuICAgICAgICB2YXIgZiA9IGZpcnN0O1xuICAgICAgICBmaXJzdCA9IGxhc3QgPSBjeWNsZSA9IHZvaWQgMDtcblxuICAgICAgICB3aGlsZSAoZikge1xuICAgICAgICAgIGYuZm4uY2FsbChmLnNlbGYpO1xuICAgICAgICAgIGYgPSBmLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KSgpO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKGZuLHNlbGYpIHtcbiAgICBzY2hlZHVsaW5nX3F1ZXVlLmFkZChmbixzZWxmKTtcbiAgICBpZiAoIWN5Y2xlKSB7XG4gICAgICBjeWNsZSA9IHRpbWVyKHNjaGVkdWxpbmdfcXVldWUuZHJhaW4pO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb21pc2UgZHVjayB0eXBpbmdcbiAgZnVuY3Rpb24gaXNUaGVuYWJsZShvKSB7XG4gICAgdmFyIF90aGVuLCBvX3R5cGUgPSB0eXBlb2YgbztcblxuICAgIGlmIChvICE9IG51bGwgJiZcbiAgICAgIChcbiAgICAgICAgb190eXBlID09IFwib2JqZWN0XCIgfHwgb190eXBlID09IFwiZnVuY3Rpb25cIlxuICAgICAgKVxuICAgICkge1xuICAgICAgX3RoZW4gPSBvLnRoZW47XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgX3RoZW4gPT0gXCJmdW5jdGlvblwiID8gX3RoZW4gOiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5jaGFpbi5sZW5ndGg7IGkrKykge1xuICAgICAgbm90aWZ5SXNvbGF0ZWQoXG4gICAgICAgIHRoaXMsXG4gICAgICAgICh0aGlzLnN0YXRlID09PSAxKSA/IHRoaXMuY2hhaW5baV0uc3VjY2VzcyA6IHRoaXMuY2hhaW5baV0uZmFpbHVyZSxcbiAgICAgICAgdGhpcy5jaGFpbltpXVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5jaGFpbi5sZW5ndGggPSAwO1xuICB9XG5cbiAgLy8gTk9URTogVGhpcyBpcyBhIHNlcGFyYXRlIGZ1bmN0aW9uIHRvIGlzb2xhdGVcbiAgLy8gdGhlIGB0cnkuLmNhdGNoYCBzbyB0aGF0IG90aGVyIGNvZGUgY2FuIGJlXG4gIC8vIG9wdGltaXplZCBiZXR0ZXJcbiAgZnVuY3Rpb24gbm90aWZ5SXNvbGF0ZWQoc2VsZixjYixjaGFpbikge1xuICAgIHZhciByZXQsIF90aGVuO1xuICAgIHRyeSB7XG4gICAgICBpZiAoY2IgPT09IGZhbHNlKSB7XG4gICAgICAgIGNoYWluLnJlamVjdChzZWxmLm1zZyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGNiID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0ID0gc2VsZi5tc2c7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0ID0gY2IuY2FsbCh2b2lkIDAsc2VsZi5tc2cpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJldCA9PT0gY2hhaW4ucHJvbWlzZSkge1xuICAgICAgICAgIGNoYWluLnJlamVjdChUeXBlRXJyb3IoXCJQcm9taXNlLWNoYWluIGN5Y2xlXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfdGhlbiA9IGlzVGhlbmFibGUocmV0KSkge1xuICAgICAgICAgIF90aGVuLmNhbGwocmV0LGNoYWluLnJlc29sdmUsY2hhaW4ucmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjaGFpbi5yZXNvbHZlKHJldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgY2hhaW4ucmVqZWN0KGVycik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZShtc2cpIHtcbiAgICB2YXIgX3RoZW4sIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gYWxyZWFkeSB0cmlnZ2VyZWQ/XG4gICAgaWYgKHNlbGYudHJpZ2dlcmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VsZi50cmlnZ2VyZWQgPSB0cnVlO1xuXG4gICAgLy8gdW53cmFwXG4gICAgaWYgKHNlbGYuZGVmKSB7XG4gICAgICBzZWxmID0gc2VsZi5kZWY7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChfdGhlbiA9IGlzVGhlbmFibGUobXNnKSkge1xuICAgICAgICBzY2hlZHVsZShmdW5jdGlvbigpe1xuICAgICAgICAgIHZhciBkZWZfd3JhcHBlciA9IG5ldyBNYWtlRGVmV3JhcHBlcihzZWxmKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgX3RoZW4uY2FsbChtc2csXG4gICAgICAgICAgICAgIGZ1bmN0aW9uICRyZXNvbHZlJCgpeyByZXNvbHZlLmFwcGx5KGRlZl93cmFwcGVyLGFyZ3VtZW50cyk7IH0sXG4gICAgICAgICAgICAgIGZ1bmN0aW9uICRyZWplY3QkKCl7IHJlamVjdC5hcHBseShkZWZfd3JhcHBlcixhcmd1bWVudHMpOyB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QuY2FsbChkZWZfd3JhcHBlcixlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWxmLm1zZyA9IG1zZztcbiAgICAgICAgc2VsZi5zdGF0ZSA9IDE7XG4gICAgICAgIGlmIChzZWxmLmNoYWluLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBzY2hlZHVsZShub3RpZnksc2VsZik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgcmVqZWN0LmNhbGwobmV3IE1ha2VEZWZXcmFwcGVyKHNlbGYpLGVycik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVqZWN0KG1zZykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIGFscmVhZHkgdHJpZ2dlcmVkP1xuICAgIGlmIChzZWxmLnRyaWdnZXJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlbGYudHJpZ2dlcmVkID0gdHJ1ZTtcblxuICAgIC8vIHVud3JhcFxuICAgIGlmIChzZWxmLmRlZikge1xuICAgICAgc2VsZiA9IHNlbGYuZGVmO1xuICAgIH1cblxuICAgIHNlbGYubXNnID0gbXNnO1xuICAgIHNlbGYuc3RhdGUgPSAyO1xuICAgIGlmIChzZWxmLmNoYWluLmxlbmd0aCA+IDApIHtcbiAgICAgIHNjaGVkdWxlKG5vdGlmeSxzZWxmKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpdGVyYXRlUHJvbWlzZXMoQ29uc3RydWN0b3IsYXJyLHJlc29sdmVyLHJlamVjdGVyKSB7XG4gICAgZm9yICh2YXIgaWR4PTA7IGlkeDxhcnIubGVuZ3RoOyBpZHgrKykge1xuICAgICAgKGZ1bmN0aW9uIElJRkUoaWR4KXtcbiAgICAgICAgQ29uc3RydWN0b3IucmVzb2x2ZShhcnJbaWR4XSlcbiAgICAgICAgLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gJHJlc29sdmVyJChtc2cpe1xuICAgICAgICAgICAgcmVzb2x2ZXIoaWR4LG1zZyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZWplY3RlclxuICAgICAgICApO1xuICAgICAgfSkoaWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBNYWtlRGVmV3JhcHBlcihzZWxmKSB7XG4gICAgdGhpcy5kZWYgPSBzZWxmO1xuICAgIHRoaXMudHJpZ2dlcmVkID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBNYWtlRGVmKHNlbGYpIHtcbiAgICB0aGlzLnByb21pc2UgPSBzZWxmO1xuICAgIHRoaXMuc3RhdGUgPSAwO1xuICAgIHRoaXMudHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgdGhpcy5jaGFpbiA9IFtdO1xuICAgIHRoaXMubXNnID0gdm9pZCAwO1xuICB9XG5cbiAgZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fX05QT19fICE9PSAwKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBwcm9taXNlXCIpO1xuICAgIH1cblxuICAgIC8vIGluc3RhbmNlIHNoYWRvd2luZyB0aGUgaW5oZXJpdGVkIFwiYnJhbmRcIlxuICAgIC8vIHRvIHNpZ25hbCBhbiBhbHJlYWR5IFwiaW5pdGlhbGl6ZWRcIiBwcm9taXNlXG4gICAgdGhpcy5fX05QT19fID0gMTtcblxuICAgIHZhciBkZWYgPSBuZXcgTWFrZURlZih0aGlzKTtcblxuICAgIHRoaXNbXCJ0aGVuXCJdID0gZnVuY3Rpb24gdGhlbihzdWNjZXNzLGZhaWx1cmUpIHtcbiAgICAgIHZhciBvID0ge1xuICAgICAgICBzdWNjZXNzOiB0eXBlb2Ygc3VjY2VzcyA9PSBcImZ1bmN0aW9uXCIgPyBzdWNjZXNzIDogdHJ1ZSxcbiAgICAgICAgZmFpbHVyZTogdHlwZW9mIGZhaWx1cmUgPT0gXCJmdW5jdGlvblwiID8gZmFpbHVyZSA6IGZhbHNlXG4gICAgICB9O1xuICAgICAgLy8gTm90ZTogYHRoZW4oLi4pYCBpdHNlbGYgY2FuIGJlIGJvcnJvd2VkIHRvIGJlIHVzZWQgYWdhaW5zdFxuICAgICAgLy8gYSBkaWZmZXJlbnQgcHJvbWlzZSBjb25zdHJ1Y3RvciBmb3IgbWFraW5nIHRoZSBjaGFpbmVkIHByb21pc2UsXG4gICAgICAvLyBieSBzdWJzdGl0dXRpbmcgYSBkaWZmZXJlbnQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICBvLnByb21pc2UgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihmdW5jdGlvbiBleHRyYWN0Q2hhaW4ocmVzb2x2ZSxyZWplY3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNvbHZlICE9IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgcmVqZWN0ICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIk5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgby5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgby5yZWplY3QgPSByZWplY3Q7XG4gICAgICB9KTtcbiAgICAgIGRlZi5jaGFpbi5wdXNoKG8pO1xuXG4gICAgICBpZiAoZGVmLnN0YXRlICE9PSAwKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vdGlmeSxkZWYpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gby5wcm9taXNlO1xuICAgIH07XG4gICAgdGhpc1tcImNhdGNoXCJdID0gZnVuY3Rpb24gJGNhdGNoJChmYWlsdXJlKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxmYWlsdXJlKTtcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yLmNhbGwoXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgZnVuY3Rpb24gcHVibGljUmVzb2x2ZShtc2cpe1xuICAgICAgICAgIHJlc29sdmUuY2FsbChkZWYsbXNnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24gcHVibGljUmVqZWN0KG1zZykge1xuICAgICAgICAgIHJlamVjdC5jYWxsKGRlZixtc2cpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICByZWplY3QuY2FsbChkZWYsZXJyKTtcbiAgICB9XG4gIH1cblxuICB2YXIgUHJvbWlzZVByb3RvdHlwZSA9IGJ1aWx0SW5Qcm9wKHt9LFwiY29uc3RydWN0b3JcIixQcm9taXNlLFxuICAgIC8qY29uZmlndXJhYmxlPSovZmFsc2VcbiAgKTtcblxuICAvLyBOb3RlOiBBbmRyb2lkIDQgY2Fubm90IHVzZSBgT2JqZWN0LmRlZmluZVByb3BlcnR5KC4uKWAgaGVyZVxuICBQcm9taXNlLnByb3RvdHlwZSA9IFByb21pc2VQcm90b3R5cGU7XG5cbiAgLy8gYnVpbHQtaW4gXCJicmFuZFwiIHRvIHNpZ25hbCBhbiBcInVuaW5pdGlhbGl6ZWRcIiBwcm9taXNlXG4gIGJ1aWx0SW5Qcm9wKFByb21pc2VQcm90b3R5cGUsXCJfX05QT19fXCIsMCxcbiAgICAvKmNvbmZpZ3VyYWJsZT0qL2ZhbHNlXG4gICk7XG5cbiAgYnVpbHRJblByb3AoUHJvbWlzZSxcInJlc29sdmVcIixmdW5jdGlvbiBQcm9taXNlJHJlc29sdmUobXNnKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICAgIC8vIHNwZWMgbWFuZGF0ZWQgY2hlY2tzXG4gICAgLy8gbm90ZTogYmVzdCBcImlzUHJvbWlzZVwiIGNoZWNrIHRoYXQncyBwcmFjdGljYWwgZm9yIG5vd1xuICAgIGlmIChtc2cgJiYgdHlwZW9mIG1zZyA9PSBcIm9iamVjdFwiICYmIG1zZy5fX05QT19fID09PSAxKSB7XG4gICAgICByZXR1cm4gbXNnO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSxyZWplY3Qpe1xuICAgICAgaWYgKHR5cGVvZiByZXNvbHZlICE9IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgcmVqZWN0ICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZShtc2cpO1xuICAgIH0pO1xuICB9KTtcblxuICBidWlsdEluUHJvcChQcm9taXNlLFwicmVqZWN0XCIsZnVuY3Rpb24gUHJvbWlzZSRyZWplY3QobXNnKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUscmVqZWN0KXtcbiAgICAgIGlmICh0eXBlb2YgcmVzb2x2ZSAhPSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIHJlamVjdCAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiTm90IGEgZnVuY3Rpb25cIik7XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChtc2cpO1xuICAgIH0pO1xuICB9KTtcblxuICBidWlsdEluUHJvcChQcm9taXNlLFwiYWxsXCIsZnVuY3Rpb24gUHJvbWlzZSRhbGwoYXJyKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICAgIC8vIHNwZWMgbWFuZGF0ZWQgY2hlY2tzXG4gICAgaWYgKFRvU3RyaW5nLmNhbGwoYXJyKSAhPSBcIltvYmplY3QgQXJyYXldXCIpIHtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3Rvci5yZWplY3QoVHlwZUVycm9yKFwiTm90IGFuIGFycmF5XCIpKTtcbiAgICB9XG4gICAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3Rvci5yZXNvbHZlKFtdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUscmVqZWN0KXtcbiAgICAgIGlmICh0eXBlb2YgcmVzb2x2ZSAhPSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIHJlamVjdCAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiTm90IGEgZnVuY3Rpb25cIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoLCBtc2dzID0gQXJyYXkobGVuKSwgY291bnQgPSAwO1xuXG4gICAgICBpdGVyYXRlUHJvbWlzZXMoQ29uc3RydWN0b3IsYXJyLGZ1bmN0aW9uIHJlc29sdmVyKGlkeCxtc2cpIHtcbiAgICAgICAgbXNnc1tpZHhdID0gbXNnO1xuICAgICAgICBpZiAoKytjb3VudCA9PT0gbGVuKSB7XG4gICAgICAgICAgcmVzb2x2ZShtc2dzKTtcbiAgICAgICAgfVxuICAgICAgfSxyZWplY3QpO1xuICAgIH0pO1xuICB9KTtcblxuICBidWlsdEluUHJvcChQcm9taXNlLFwicmFjZVwiLGZ1bmN0aW9uIFByb21pc2UkcmFjZShhcnIpIHtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gICAgLy8gc3BlYyBtYW5kYXRlZCBjaGVja3NcbiAgICBpZiAoVG9TdHJpbmcuY2FsbChhcnIpICE9IFwiW29iamVjdCBBcnJheV1cIikge1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yLnJlamVjdChUeXBlRXJyb3IoXCJOb3QgYW4gYXJyYXlcIikpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSxyZWplY3Qpe1xuICAgICAgaWYgKHR5cGVvZiByZXNvbHZlICE9IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgcmVqZWN0ICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtcbiAgICAgIH1cblxuICAgICAgaXRlcmF0ZVByb21pc2VzKENvbnN0cnVjdG9yLGFycixmdW5jdGlvbiByZXNvbHZlcihpZHgsbXNnKXtcbiAgICAgICAgcmVzb2x2ZShtc2cpO1xuICAgICAgfSxyZWplY3QpO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gUHJvbWlzZTtcbn1cblxudmFyIHJvb3QgPSB0eXBlb2YgZ2xvYmFsID09PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbFxuY29uc3QgX1Byb21pc2UgPSAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnID8gUHJvbWlzZSA6IHByb21pc2VGYWN0b3J5KCkpXG5yb290LlByb21pc2UgPSByb290LlByb21pc2UgfHwgX1Byb21pc2VcbmV4cG9ydCBkZWZhdWx0IF9Qcm9taXNlXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC92ZW5kb3IvcHJvbWlzZS5qcyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zZXQtaW1tZWRpYXRlXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXQtaW1tZWRpYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLnNldEltbWVkaWF0ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc2V0LWltbWVkaWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5leHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7XG5leHBvcnRzLnJlc29sdmUgPSB1cmxSZXNvbHZlO1xuZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDtcbmV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0O1xuXG5leHBvcnRzLlVybCA9IFVybDtcblxuZnVuY3Rpb24gVXJsKCkge1xuICB0aGlzLnByb3RvY29sID0gbnVsbDtcbiAgdGhpcy5zbGFzaGVzID0gbnVsbDtcbiAgdGhpcy5hdXRoID0gbnVsbDtcbiAgdGhpcy5ob3N0ID0gbnVsbDtcbiAgdGhpcy5wb3J0ID0gbnVsbDtcbiAgdGhpcy5ob3N0bmFtZSA9IG51bGw7XG4gIHRoaXMuaGFzaCA9IG51bGw7XG4gIHRoaXMuc2VhcmNoID0gbnVsbDtcbiAgdGhpcy5xdWVyeSA9IG51bGw7XG4gIHRoaXMucGF0aG5hbWUgPSBudWxsO1xuICB0aGlzLnBhdGggPSBudWxsO1xuICB0aGlzLmhyZWYgPSBudWxsO1xufVxuXG4vLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTZcblxuLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmVcbi8vIGNvbXBpbGVkIG9uY2Ugb24gdGhlIGZpcnN0IG1vZHVsZSBsb2FkLlxudmFyIHByb3RvY29sUGF0dGVybiA9IC9eKFthLXowLTkuKy1dKzopL2ksXG4gICAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuICAgIHNpbXBsZVBhdGhQYXR0ZXJuID0gL14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gICAgLy8gV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS5cbiAgICBkZWxpbXMgPSBbJzwnLCAnPicsICdcIicsICdgJywgJyAnLCAnXFxyJywgJ1xcbicsICdcXHQnXSxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuXG4gICAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCddLmNvbmNhdChkZWxpbXMpLFxuXG4gICAgLy8gQWxsb3dlZCBieSBSRkNzLCBidXQgY2F1c2Ugb2YgWFNTIGF0dGFja3MuICBBbHdheXMgZXNjYXBlIHRoZXNlLlxuICAgIGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpLFxuICAgIC8vIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuXG4gICAgLy8gTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZVxuICAgIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAgIC8vIHRoZW0uXG4gICAgbm9uSG9zdENoYXJzID0gWyclJywgJy8nLCAnPycsICc7JywgJyMnXS5jb25jYXQoYXV0b0VzY2FwZSksXG4gICAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLFxuICAgIGhvc3RuYW1lTWF4TGVuID0gMjU1LFxuICAgIGhvc3RuYW1lUGFydFBhdHRlcm4gPSAvXlsrYS16MC05QS1aXy1dezAsNjN9JC8sXG4gICAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93IFwidW5zYWZlXCIgYW5kIFwidW53aXNlXCIgY2hhcnMuXG4gICAgdW5zYWZlUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gICAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuICAgIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAgICdodHRwJzogdHJ1ZSxcbiAgICAgICdodHRwcyc6IHRydWUsXG4gICAgICAnZnRwJzogdHJ1ZSxcbiAgICAgICdnb3BoZXInOiB0cnVlLFxuICAgICAgJ2ZpbGUnOiB0cnVlLFxuICAgICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAgICdodHRwczonOiB0cnVlLFxuICAgICAgJ2Z0cDonOiB0cnVlLFxuICAgICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICAgJ2ZpbGU6JzogdHJ1ZVxuICAgIH0sXG4gICAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgdXRpbC5pc09iamVjdCh1cmwpICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybDtcblxuICB2YXIgdSA9IG5ldyBVcmw7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIXV0aWwuaXNTdHJpbmcodXJsKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiICsgdHlwZW9mIHVybCk7XG4gIH1cblxuICAvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgLy8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXG4gIC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XG4gIHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKSxcbiAgICAgIHNwbGl0dGVyID1cbiAgICAgICAgICAocXVlcnlJbmRleCAhPT0gLTEgJiYgcXVlcnlJbmRleCA8IHVybC5pbmRleE9mKCcjJykpID8gJz8nIDogJyMnLFxuICAgICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICAgIHNsYXNoUmVnZXggPSAvXFxcXC9nO1xuICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpO1xuICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcmVzdDtcbiAgICAgIHRoaXMuaHJlZiA9IHJlc3Q7XG4gICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTtcbiAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTtcbiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAgIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvLyB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgLy8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAvL1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAvLyB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgLy8gVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgIC8vXG4gICAgLy8gZXg6XG4gICAgLy8gaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAvLyBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG5cbiAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgLy8gSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgLy8gaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvLyBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gIC8vIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgIC8vIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgIC8vIG5lZWQgdG8gYmUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIGlmIChyZXN0LmluZGV4T2YoYWUpID09PSAtMSlcbiAgICAgICAgY29udGludWU7XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgdGhpcy5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSB0aGlzLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgICAgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gdGhpcy5zZWFyY2ggfHwgJyc7XG4gICAgdGhpcy5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gIC8vIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgLy8gdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgaWYgKHV0aWwuaXNTdHJpbmcob2JqKSkgb2JqID0gdXJsUGFyc2Uob2JqKTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTtcbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgICAgaG9zdCA9IGZhbHNlLFxuICAgICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgOlxuICAgICAgICAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJlxuICAgICAgdXRpbC5pc09iamVjdCh0aGlzLnF1ZXJ5KSAmJlxuICAgICAgT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodGhpcy5xdWVyeSk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICAvLyBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy5cbiAgLy8gdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC5cbiAgaWYgKHRoaXMuc2xhc2hlcyB8fFxuICAgICAgKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xbcHJvdG9jb2xdKSAmJiBob3N0ICE9PSBmYWxzZSkge1xuICAgIGhvc3QgPSAnLy8nICsgKGhvc3QgfHwgJycpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTtcbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSAnJztcbiAgfVxuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIGhhc2ggPSAnIycgKyBoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoO1xuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoJyMnLCAnJTIzJyk7XG5cbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkge1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgaWYgKCFzb3VyY2UpIHJldHVybiByZWxhdGl2ZTtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICBpZiAodXRpbC5pc1N0cmluZyhyZWxhdGl2ZSkpIHtcbiAgICB2YXIgcmVsID0gbmV3IFVybCgpO1xuICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpO1xuICAgIHJlbGF0aXZlID0gcmVsO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTtcbiAgdmFyIHRrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gIGZvciAodmFyIHRrID0gMDsgdGsgPCB0a2V5cy5sZW5ndGg7IHRrKyspIHtcbiAgICB2YXIgdGtleSA9IHRrZXlzW3RrXTtcbiAgICByZXN1bHRbdGtleV0gPSB0aGlzW3RrZXldO1xuICB9XG5cbiAgLy8gaGFzaCBpcyBhbHdheXMgb3ZlcnJpZGRlbiwgbm8gbWF0dGVyIHdoYXQuXG4gIC8vIGV2ZW4gaHJlZj1cIlwiIHdpbGwgcmVtb3ZlIGl0LlxuICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7XG5cbiAgLy8gaWYgdGhlIHJlbGF0aXZlIHVybCBpcyBlbXB0eSwgdGhlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkbyBoZXJlLlxuICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHtcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuXG4gIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmVcbiAgICB2YXIgcmtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykge1xuICAgICAgdmFyIHJrZXkgPSBya2V5c1tya107XG4gICAgICBpZiAocmtleSAhPT0gJ3Byb3RvY29sJylcbiAgICAgICAgcmVzdWx0W3JrZXldID0gcmVsYXRpdmVbcmtleV07XG4gICAgfVxuXG4gICAgLy91cmxQYXJzZSBhcHBlbmRzIHRyYWlsaW5nIC8gdG8gdXJscyBsaWtlIGh0dHA6Ly93d3cuZXhhbXBsZS5jb21cbiAgICBpZiAoc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF0gJiZcbiAgICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAocmVsYXRpdmUucHJvdG9jb2wgJiYgcmVsYXRpdmUucHJvdG9jb2wgIT09IHJlc3VsdC5wcm90b2NvbCkge1xuICAgIC8vIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmdcbiAgICAvLyB0aGUgcHJvdG9jb2wgZG9lcyB3ZWlyZCB0aGluZ3NcbiAgICAvLyBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCxcbiAgICAvLyBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aFxuICAgIC8vIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC5cbiAgICAvLyBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLFxuICAgIC8vIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLlxuICAgIC8vIGFueXRoaW5nIGVsc2UgaXMgYXNzdW1lZCB0byBiZSBhYnNvbHV0ZS5cbiAgICBpZiAoIXNsYXNoZWRQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgIHZhciBrID0ga2V5c1t2XTtcbiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107XG4gICAgICB9XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgICBpc1JlbEFicyA9IChcbiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICAgICksXG4gICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gKHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKHJlbGF0aXZlLnNlYXJjaCkpIHtcbiAgICAvLyBqdXN0IHB1bGwgb3V0IHRoZSBzZWFyY2guXG4gICAgLy8gbGlrZSBocmVmPSc/Zm9vJy5cbiAgICAvLyBQdXQgdGhpcyBhZnRlciB0aGUgb3RoZXIgdHdvIGNhc2VzIGJlY2F1c2UgaXQgc2ltcGxpZmllcyB0aGUgYm9vbGVhbnNcbiAgICBpZiAocHN5Y2hvdGljKSB7XG4gICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTtcbiAgICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmXG4gICAgICAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8IGxhc3QgPT09ICcnKTtcblxuICAvLyBzdHJpcCBzaW5nbGUgZG90cywgcmVzb2x2ZSBkb3VibGUgZG90cyB0byBwYXJlbnQgZGlyXG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBzcmNQYXRoLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICBsYXN0ID0gc3JjUGF0aFtpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJlxuICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICB9XG4gIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aCB8fCByZXN1bHQuYXV0aDtcbiAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblVybC5wcm90b3R5cGUucGFyc2VIb3N0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgdGhpcy5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgdGhpcy5ob3N0bmFtZSA9IGhvc3Q7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL3VybC91cmwuanNcbi8vIG1vZHVsZSBpZCA9IDIwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qISBodHRwczovL210aHMuYmUvcHVueWNvZGUgdjEuNC4xIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGVzICovXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiZcblx0XHQhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0IW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChcblx0XHRmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC5zZWxmID09PSBmcmVlR2xvYmFsXG5cdCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBgcHVueWNvZGVgIG9iamVjdC5cblx0ICogQG5hbWUgcHVueWNvZGVcblx0ICogQHR5cGUgT2JqZWN0XG5cdCAqL1xuXHR2YXIgcHVueWNvZGUsXG5cblx0LyoqIEhpZ2hlc3QgcG9zaXRpdmUgc2lnbmVkIDMyLWJpdCBmbG9hdCB2YWx1ZSAqL1xuXHRtYXhJbnQgPSAyMTQ3NDgzNjQ3LCAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cblx0LyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqL1xuXHRiYXNlID0gMzYsXG5cdHRNaW4gPSAxLFxuXHR0TWF4ID0gMjYsXG5cdHNrZXcgPSAzOCxcblx0ZGFtcCA9IDcwMCxcblx0aW5pdGlhbEJpYXMgPSA3Mixcblx0aW5pdGlhbE4gPSAxMjgsIC8vIDB4ODBcblx0ZGVsaW1pdGVyID0gJy0nLCAvLyAnXFx4MkQnXG5cblx0LyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cblx0cmVnZXhQdW55Y29kZSA9IC9eeG4tLS8sXG5cdHJlZ2V4Tm9uQVNDSUkgPSAvW15cXHgyMC1cXHg3RV0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFyc1xuXHRyZWdleFNlcGFyYXRvcnMgPSAvW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nLCAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG5cblx0LyoqIEVycm9yIG1lc3NhZ2VzICovXG5cdGVycm9ycyA9IHtcblx0XHQnb3ZlcmZsb3cnOiAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnLFxuXHRcdCdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG5cdFx0J2ludmFsaWQtaW5wdXQnOiAnSW52YWxpZCBpbnB1dCdcblx0fSxcblxuXHQvKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG5cdGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbixcblx0Zmxvb3IgPSBNYXRoLmZsb29yLFxuXHRzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLFxuXG5cdC8qKiBUZW1wb3JhcnkgdmFyaWFibGUgKi9cblx0a2V5O1xuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuXG5cdCAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cblx0ICovXG5cdGZ1bmN0aW9uIGVycm9yKHR5cGUpIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0cmVzdWx0W2xlbmd0aF0gPSBmbihhcnJheVtsZW5ndGhdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcblx0ICogYWRkcmVzc2VzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0dmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7XG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHQvLyBJbiBlbWFpbCBhZGRyZXNzZXMsIG9ubHkgdGhlIGRvbWFpbiBuYW1lIHNob3VsZCBiZSBwdW55Y29kZWQuIExlYXZlXG5cdFx0XHQvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuXHRcdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0XHRzdHJpbmcgPSBwYXJ0c1sxXTtcblx0XHR9XG5cdFx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1xceDJFJyk7XG5cdFx0dmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuXHRcdHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcblx0XHRyZXR1cm4gcmVzdWx0ICsgZW5jb2RlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBkZWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS5cblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGNvdW50ZXIgPSAwLFxuXHRcdCAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuXHRcdCAgICB2YWx1ZSxcblx0XHQgICAgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGVuY29kZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0cmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cblx0ICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcblx0ICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSAyMjtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA2NTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA5Nztcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3Jcblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2Vcblx0ICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG5cdCAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG5cdCAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0XHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHRcdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRcdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG5cdH1cblxuXHQvKipcblx0ICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cblx0ICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuXHRcdHZhciBrID0gMDtcblx0XHRkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuXHRcdGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcblx0XHRmb3IgKC8qIG5vIGluaXRpYWxpemF0aW9uICovOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuXHRcdFx0ZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuXHRcdH1cblx0XHRyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuXHQgKiBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0XHQvLyBEb24ndCB1c2UgVUNTLTJcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoLFxuXHRcdCAgICBvdXQsXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBuID0gaW5pdGlhbE4sXG5cdFx0ICAgIGJpYXMgPSBpbml0aWFsQmlhcyxcblx0XHQgICAgYmFzaWMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIGluZGV4LFxuXHRcdCAgICBvbGRpLFxuXHRcdCAgICB3LFxuXHRcdCAgICBrLFxuXHRcdCAgICBkaWdpdCxcblx0XHQgICAgdCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGJhc2VNaW51c1Q7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0XHQvLyBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGRlbGltaXRlciwgb3IgYDBgIGlmIHRoZXJlIGlzIG5vbmUsIHRoZW4gY29weVxuXHRcdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdFx0YmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuXHRcdGlmIChiYXNpYyA8IDApIHtcblx0XHRcdGJhc2ljID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdFx0Ly8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG5cdFx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRcdGVycm9yKCdub3QtYmFzaWMnKTtcblx0XHRcdH1cblx0XHRcdG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcblx0XHQvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG5cdFx0Zm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7IC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi8pIHtcblxuXHRcdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdFx0Ly8gRGVjb2RlIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIgaW50byBgZGVsdGFgLFxuXHRcdFx0Ly8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcblx0XHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0XHQvLyB2YWx1ZSBhdCB0aGUgZW5kIHRvIG9idGFpbiBgZGVsdGFgLlxuXHRcdFx0Zm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXG5cdFx0XHRcdGlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRcdGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpICs9IGRpZ2l0ICogdztcblx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0IDwgdCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3ICo9IGJhc2VNaW51c1Q7XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0ID0gb3V0cHV0Lmxlbmd0aCArIDE7XG5cdFx0XHRiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuXHRcdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHRcdC8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6XG5cdFx0XHRpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRuICs9IGZsb29yKGkgLyBvdXQpO1xuXHRcdFx0aSAlPSBvdXQ7XG5cblx0XHRcdC8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXRcblx0XHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKG91dHB1dCk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcblx0ICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG5cdFx0dmFyIG4sXG5cdFx0ICAgIGRlbHRhLFxuXHRcdCAgICBoYW5kbGVkQ1BDb3VudCxcblx0XHQgICAgYmFzaWNMZW5ndGgsXG5cdFx0ICAgIGJpYXMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIG0sXG5cdFx0ICAgIHEsXG5cdFx0ICAgIGssXG5cdFx0ICAgIHQsXG5cdFx0ICAgIGN1cnJlbnRWYWx1ZSxcblx0XHQgICAgb3V0cHV0ID0gW10sXG5cdFx0ICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovXG5cdFx0ICAgIGlucHV0TGVuZ3RoLFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgaGFuZGxlZENQQ291bnRQbHVzT25lLFxuXHRcdCAgICBiYXNlTWludXNULFxuXHRcdCAgICBxTWludXNUO1xuXG5cdFx0Ly8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuXHRcdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0XHQvLyBDYWNoZSB0aGUgbGVuZ3RoXG5cdFx0aW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0XHQvLyBJbml0aWFsaXplIHRoZSBzdGF0ZVxuXHRcdG4gPSBpbml0aWFsTjtcblx0XHRkZWx0YSA9IDA7XG5cdFx0YmlhcyA9IGluaXRpYWxCaWFzO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50c1xuXHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuXHRcdC8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXHRcdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHRcdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuXHRcdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdFx0b3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdFx0d2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcblxuXHRcdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHRcdGZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuXHRcdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcblx0XHRcdGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRcdGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdFx0biA9IG07XG5cblx0XHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuXHRcdFx0XHRcdC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG5cdFx0XHRcdFx0Zm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXHRcdFx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cdFx0XHRcdFx0XHRpZiAocSA8IHQpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRxTWludXNUID0gcSAtIHQ7XG5cdFx0XHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChcblx0XHRcdFx0XHRcdFx0c3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG5cdFx0XHRcdFx0ZGVsdGEgPSAwO1xuXHRcdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0KytkZWx0YTtcblx0XHRcdCsrbjtcblxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3Ncblx0ICogdG8gVW5pY29kZS4gT25seSB0aGUgUHVueWNvZGVkIHBhcnRzIG9mIHRoZSBpbnB1dCB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLlxuXHQgKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW5cblx0ICogY29udmVydGVkIHRvIFVuaWNvZGUuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIGNvbnZlcnQgdG8gVW5pY29kZS5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG5cdCAqIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvVW5pY29kZShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gZGVjb2RlKHN0cmluZy5zbGljZSg0KS50b0xvd2VyQ2FzZSgpKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFVuaWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogUHVueWNvZGUuIE9ubHkgdGhlIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsXG5cdCAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuXHQgKiBBU0NJSS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG5cdCAqIFVuaWNvZGUgc3RyaW5nLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgUHVueWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIGRvbWFpbiBuYW1lIG9yXG5cdCAqIGVtYWlsIGFkZHJlc3MuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyAneG4tLScgKyBlbmNvZGUoc3RyaW5nKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKiBEZWZpbmUgdGhlIHB1YmxpYyBBUEkgKi9cblx0cHVueWNvZGUgPSB7XG5cdFx0LyoqXG5cdFx0ICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IFB1bnljb2RlLmpzIHZlcnNpb24gbnVtYmVyLlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIFN0cmluZ1xuXHRcdCAqL1xuXHRcdCd2ZXJzaW9uJzogJzEuNC4xJyxcblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3Qgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGZyb20gSmF2YVNjcmlwdCdzIGludGVybmFsIGNoYXJhY3RlclxuXHRcdCAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suXG5cdFx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgT2JqZWN0XG5cdFx0ICovXG5cdFx0J3VjczInOiB7XG5cdFx0XHQnZGVjb2RlJzogdWNzMmRlY29kZSxcblx0XHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdFx0fSxcblx0XHQnZGVjb2RlJzogZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J3RvQVNDSUknOiB0b0FTQ0lJLFxuXHRcdCd0b1VuaWNvZGUnOiB0b1VuaWNvZGVcblx0fTtcblxuXHQvKiogRXhwb3NlIGBwdW55Y29kZWAgKi9cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoJ3B1bnljb2RlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gcHVueWNvZGU7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkge1xuXHRcdGlmIChtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cykge1xuXHRcdFx0Ly8gaW4gTm9kZS5qcywgaW8uanMsIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gcHVueWNvZGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHRmb3IgKGtleSBpbiBwdW55Y29kZSkge1xuXHRcdFx0XHRwdW55Y29kZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIChmcmVlRXhwb3J0c1trZXldID0gcHVueWNvZGVba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnB1bnljb2RlID0gcHVueWNvZGU7XG5cdH1cblxufSh0aGlzKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvcHVueWNvZGUvcHVueWNvZGUuanNcbi8vIG1vZHVsZSBpZCA9IDIwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMjAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNTdHJpbmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGlzT2JqZWN0OiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSBudWxsO1xuICB9LFxuICBpc051bGxPclVuZGVmaW5lZDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PSBudWxsO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL3VybC91dGlsLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG5leHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8vIElmIG9iai5oYXNPd25Qcm9wZXJ0eSBoYXMgYmVlbiBvdmVycmlkZGVuLCB0aGVuIGNhbGxpbmdcbi8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MDdcbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIHZhciBvYmogPSB7fTtcblxuICBpZiAodHlwZW9mIHFzICE9PSAnc3RyaW5nJyB8fCBxcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IC9cXCsvZztcbiAgcXMgPSBxcy5zcGxpdChzZXApO1xuXG4gIHZhciBtYXhLZXlzID0gMTAwMDtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubWF4S2V5cyA9PT0gJ251bWJlcicpIHtcbiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzO1xuICB9XG5cbiAgdmFyIGxlbiA9IHFzLmxlbmd0aDtcbiAgLy8gbWF4S2V5cyA8PSAwIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsaW1pdCBrZXlzIGNvdW50XG4gIGlmIChtYXhLZXlzID4gMCAmJiBsZW4gPiBtYXhLZXlzKSB7XG4gICAgbGVuID0gbWF4S2V5cztcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgeCA9IHFzW2ldLnJlcGxhY2UocmVnZXhwLCAnJTIwJyksXG4gICAgICAgIGlkeCA9IHguaW5kZXhPZihlcSksXG4gICAgICAgIGtzdHIsIHZzdHIsIGssIHY7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpO1xuICAgICAgdnN0ciA9IHguc3Vic3RyKGlkeCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrc3RyID0geDtcbiAgICAgIHZzdHIgPSAnJztcbiAgICB9XG5cbiAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGtzdHIpO1xuICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodnN0cik7XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5KG9iaiwgaykpIHtcbiAgICAgIG9ialtrXSA9IHY7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgIG9ialtrXS5wdXNoKHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qc1xuLy8gbW9kdWxlIGlkID0gMjA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG1hcChvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBtYXAob2JqW2tdLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5mdW5jdGlvbiBtYXAgKHhzLCBmKSB7XG4gIGlmICh4cy5tYXApIHJldHVybiB4cy5tYXAoZik7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIHJlcy5wdXNoKGYoeHNbaV0sIGkpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHJlcy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qc1xuLy8gbW9kdWxlIGlkID0gMjA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwibW9kdWxlLmV4cG9ydHMgPSB7XCJwZXNkay5hZGp1c3RtZW50cy5idXR0b24ucmVzZXRcIjpcImVkaXRvci5jb250cm9scy5hZGp1c3RtZW50cy5yZXNldFwiLFwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5icmlnaHRuZXNzXCI6XCJlZGl0b3IuY29udHJvbHMuYWRqdXN0bWVudHMuaXRlbXMuYnJpZ2h0bmVzc1wiLFwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5jbGFyaXR5XCI6XCJlZGl0b3IuY29udHJvbHMuYWRqdXN0bWVudHMuaXRlbXMuY2xhcml0eVwiLFwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5jb250cmFzdFwiOlwiZWRpdG9yLmNvbnRyb2xzLmFkanVzdG1lbnRzLml0ZW1zLmNvbnRyYXN0XCIsXCJwZXNkay5hZGp1c3RtZW50cy50ZXh0LmV4cG9zdXJlXCI6XCJlZGl0b3IuY29udHJvbHMuYWRqdXN0bWVudHMuaXRlbXMuZXhwb3N1cmVcIixcInBlc2RrLmFkanVzdG1lbnRzLnRleHQuZ2FtbWFcIjpcImVkaXRvci5jb250cm9scy5hZGp1c3RtZW50cy5pdGVtcy5nYW1tYVwiLFwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5oaWdobGlnaHRzXCI6XCJlZGl0b3IuY29udHJvbHMuYWRqdXN0bWVudHMuaXRlbXMuaGlnaGxpZ2h0c1wiLFwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5zYXR1cmF0aW9uXCI6XCJlZGl0b3IuY29udHJvbHMuYWRqdXN0bWVudHMuaXRlbXMuc2F0dXJhdGlvblwiLFwicGVzZGsuYWRqdXN0bWVudHMudGV4dC5zaGFkb3dzXCI6XCJlZGl0b3IuY29udHJvbHMuYWRqdXN0bWVudHMuaXRlbXMuc2hhZG93c1wiLFwicGVzZGsuYWRqdXN0bWVudHMudGl0bGUuYmFzaWNzXCI6XCJlZGl0b3IuY29udHJvbHMuYWRqdXN0bWVudHMuc2VjdGlvbnMuYmFzaWNzXCIsXCJwZXNkay5hZGp1c3RtZW50cy50aXRsZS5uYW1lXCI6XCJlZGl0b3IuY29udHJvbHMuYWRqdXN0bWVudHMudGl0bGVcIixcInBlc2RrLmFkanVzdG1lbnRzLnRpdGxlLnJlZmluZW1lbnRzXCI6XCJlZGl0b3IuY29udHJvbHMuYWRqdXN0bWVudHMuc2VjdGlvbnMucmVmaW5lbWVudHNcIixcInBlc2RrLmJydXNoLnRpdGxlLmhhcmRuZXNzXCI6XCJlZGl0b3IuY29udHJvbHMuYnJ1c2guaGFyZG5lc3NcIixcInBlc2RrLmJydXNoLnRpdGxlLm5hbWVcIjpcImVkaXRvci5jb250cm9scy5icnVzaC50aXRsZVwiLFwicGVzZGsuYnJ1c2gudGl0bGUuc2V0dGluZ3NcIjpcImVkaXRvci5jb250cm9scy5icnVzaC5zZXR0aW5nc1wiLFwicGVzZGsuYnJ1c2gudGl0bGUud2lkdGhcIjpcImVkaXRvci5jb250cm9scy5icnVzaC53aWR0aFwiLFwicGVzZGsuY29tbW9uLmJ1dHRvbi5jYW5jZWxcIjpcImVkaXRvci5jYW5jZWxcIixcInBlc2RrLmNvbW1vbi50ZXh0LmxvYWRpbmdcIjpcImxvYWRpbmcubG9hZGluZ1wiLFwicGVzZGsuY29tbW9uLnRpdGxlLmVycm9yXCI6XCJlcnJvcnMudGl0bGVcIixcInBlc2RrLmVkaXRvci5idXR0b24uZGlzY2FyZENoYW5nZXNXYXJuaW5nRGlzY2FyZFwiOlwid2FybmluZ3MuZGlzY2FyZENoYW5nZXMuYnV0dG9ucy5kaXNjYXJkXCIsXCJwZXNkay5lZGl0b3IuYnV0dG9uLmRpc2NhcmRDaGFuZ2VzV2FybmluZ0tlZXBcIjpcIndhcm5pbmdzLmRpc2NhcmRDaGFuZ2VzLmJ1dHRvbnMua2VlcFwiLFwicGVzZGsuZWRpdG9yLmJ1dHRvbi5leHBvcnRcIjpcImVkaXRvci5leHBvcnRcIixcInBlc2RrLmVkaXRvci5idXR0b24ubmV3SW1hZ2VDaGFuZ2VzTG9zdFdhcm5pbmdOb1wiOlwid2FybmluZ3MubmV3SW1hZ2VfY2hhbmdlc0xvc3QuYnV0dG9ucy5ub1wiLFwicGVzZGsuZWRpdG9yLmJ1dHRvbi5uZXdJbWFnZUNoYW5nZXNMb3N0V2FybmluZ1llc1wiOlwid2FybmluZ3MubmV3SW1hZ2VfY2hhbmdlc0xvc3QuYnV0dG9ucy55ZXNcIixcInBlc2RrLmVkaXRvci50ZXh0LmRpc2NhcmRDaGFuZ2VzV2FybmluZ1wiOlwid2FybmluZ3MuZGlzY2FyZENoYW5nZXMudGV4dFwiLFwicGVzZGsuZWRpdG9yLnRleHQuZm9udExvYWRpbmdFcnJvclwiOlwiZXJyb3JzLmZvbnRMb2FkaW5nRXJyb3IudGV4dFwiLFwicGVzZGsuZWRpdG9yLnRleHQuaW1hZ2VMb2FkaW5nRXJyb3JcIjpcImVycm9ycy5pbWFnZUxvYWRpbmdFcnJvci50ZXh0XCIsXCJwZXNkay5lZGl0b3IudGV4dC5pbWFnZVJlc2l6ZWRXYXJuaW5nX21heERpbWVuc2lvbnNcIjpcIndhcm5pbmdzLmltYWdlUmVzaXplZF9tYXhEaW1lbnNpb25zLnRleHRcIixcInBlc2RrLmVkaXRvci50ZXh0LmltYWdlUmVzaXplZFdhcm5pbmdfbWF4TWVnYVBpeGVsc1wiOlwid2FybmluZ3MuaW1hZ2VSZXNpemVkX21heE1lZ2FQaXhlbHMudGV4dFwiLFwicGVzZGsuZWRpdG9yLnRleHQuaW52YWxpZEZpbGVUeXBlRXJyb3JcIjpcImVycm9ycy5pbnZhbGlkRmlsZVR5cGUudGV4dFwiLFwicGVzZGsuZWRpdG9yLnRleHQubG9hZGluZ0ZvbnRzXCI6XCJsb2FkaW5nLmZvbnRzXCIsXCJwZXNkay5lZGl0b3IudGV4dC5uZXdJbWFnZUNoYW5nZXNMb3N0V2FybmluZ1wiOlwid2FybmluZ3MubmV3SW1hZ2VfY2hhbmdlc0xvc3QudGV4dFwiLFwicGVzZGsuZWRpdG9yLnRleHQucmVuZGVyaW5nRXJyb3JcIjpcImVycm9ycy5yZW5kZXJpbmdFcnJvci50ZXh0XCIsXCJwZXNkay5lZGl0b3IudGV4dC5yZXNpemluZ1wiOlwibG9hZGluZy5yZXNpemluZ1wiLFwicGVzZGsuZWRpdG9yLnRleHQud2ViY2FtVW5hdmFpbGFibGVFcnJvclwiOlwiZXJyb3JzLndlYmNhbVVuYXZhaWxhYmxlLnRleHRcIixcInBlc2RrLmVkaXRvci50aXRsZS5kaXNjYXJkQ2hhbmdlc1dhcm5pbmdcIjpcIndhcm5pbmdzLmRpc2NhcmRDaGFuZ2VzLnRpdGxlXCIsXCJwZXNkay5lZGl0b3IudGl0bGUuZm9udExvYWRpbmdFcnJvclwiOlwiZXJyb3JzLmZvbnRMb2FkaW5nRXJyb3IudGl0bGVcIixcInBlc2RrLmVkaXRvci50aXRsZS5pbWFnZVJlc2l6ZWRXYXJuaW5nX21heERpbWVuc2lvbnNcIjpcIndhcm5pbmdzLmltYWdlUmVzaXplZF9tYXhEaW1lbnNpb25zLnRpdGxlXCIsXCJwZXNkay5lZGl0b3IudGl0bGUuaW1hZ2VSZXNpemVkV2FybmluZ19tYXhNZWdhUGl4ZWxzXCI6XCJ3YXJuaW5ncy5pbWFnZVJlc2l6ZWRfbWF4TWVnYVBpeGVscy50aXRsZVwiLFwicGVzZGsuZWRpdG9yLnRpdGxlLm5ld0ltYWdlQ2hhbmdlc0xvc3RXYXJuaW5nXCI6XCJ3YXJuaW5ncy5uZXdJbWFnZV9jaGFuZ2VzTG9zdC50aXRsZVwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmlkZW50aXR5XCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaWRlbnRpdHlcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfYWQxOTIwXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2FkMTkyMFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9hbmNpZW50XCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2FuY2llbnRcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfYmxlYWNoZWRcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfYmxlYWNoZWRcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfYmxlYWNoZWRibHVlXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2JsZWFjaGVkYmx1ZVwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9ibHVlc1wiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9ibHVlc1wiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9ibHVlc2hhZG93c1wiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9ibHVlc2hhZG93c1wiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9icmVlemVcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfYnJlZXplXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2J3XCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2J3XCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2NlbHNpdXNcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfY2Vsc2l1c1wiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9jaGVzdFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9jaGVzdFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9jbGFzc2ljXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2NsYXNzaWNcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfY29sb3JmdWxcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfY29sb3JmdWxcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfY29vbFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9jb29sXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2NvdHRvbmNhbmR5XCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2NvdHRvbmNhbmR5XCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2NyZWFteVwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9jcmVhbXlcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfZWlnaHRpZXNcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfZWlnaHRpZXNcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfZWxkZXJcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfZWxkZXJcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfZXZlbmluZ1wiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9ldmVuaW5nXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2ZhbGxcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfZmFsbFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9maXhpZVwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9maXhpZVwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9mb29kXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2Zvb2RcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfZnJpZGdlXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2ZyaWRnZVwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9mcm9udFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9mcm9udFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9nbGFtXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2dsYW1cIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfZ29iYmxpblwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9nb2JibGluXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2hpZ2hjYXJiXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2hpZ2hjYXJiXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2hpZ2hjb250cmFzdFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9oaWdoY29udHJhc3RcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfazFcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfazFcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfazJcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfazJcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfazZcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfazZcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfa2R5bmFtaWNcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfa2R5bmFtaWNcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfa2VlblwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9rZWVuXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2xlbmluXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2xlbmluXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2xpdGhvXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X2xpdGhvXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X2xvbW8xMDBcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfbG9tbzEwMFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9sdWNpZFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9sdWNpZFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9tZWxsb3dcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfbWVsbG93XCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X25lYXRcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfbmVhdFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9ub2dyZWVuXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X25vZ3JlZW5cIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfb3JjaGlkXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X29yY2hpZFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9wYWxlXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X3BhbGVcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfcGl0Y2hlZFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9waXRjaGVkXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3BsYXRlXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X3BsYXRlXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3BvbGE2NjlcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfcG9sYTY2OVwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9wb2xhc3hcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfcG9sYXN4XCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3BybzQwMFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9wcm80MDBcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfcXVvemlcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfcXVvemlcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfc2VwaWFoaWdoXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X3NlcGlhaGlnaFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9zZXR0bGVkXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X3NldHRsZWRcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfc2V2ZW50aWVzXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X3NldmVudGllc1wiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9zaW5cIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfc2luXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3NvZnRcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfc29mdFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9zdGVlbFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9zdGVlbFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF9zdW1tZXJcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfc3VtbWVyXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3N1bnNldFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF9zdW5zZXRcIixcInBlc2RrLmZpbHRlci5hc3NldC5pbWdseV9sdXRfdGVuZGVyXCI6XCJlZGl0b3IuY29udHJvbHMuZmlsdGVyLmZpbHRlcnMuaW1nbHlfbHV0X3RlbmRlclwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF90ZXhhc1wiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF90ZXhhc1wiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF90d2lsaWdodFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZpbHRlci5maWx0ZXJzLmltZ2x5X2x1dF90d2lsaWdodFwiLFwicGVzZGsuZmlsdGVyLmFzc2V0LmltZ2x5X2x1dF93aW50ZXJcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfd2ludGVyXCIsXCJwZXNkay5maWx0ZXIuYXNzZXQuaW1nbHlfbHV0X3g0MDBcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIuZmlsdGVycy5pbWdseV9sdXRfeDQwMFwiLFwicGVzZGsuZmlsdGVyLnRpdGxlLm5hbWVcIjpcImVkaXRvci5jb250cm9scy5maWx0ZXIudGl0bGVcIixcInBlc2RrLmZvY3VzLmJ1dHRvbi5nYXVzc2lhblwiOlwiZWRpdG9yLmNvbnRyb2xzLmZvY3VzLml0ZW1zLmdhdXNzaWFuXCIsXCJwZXNkay5mb2N1cy5idXR0b24ubGluZWFyXCI6XCJlZGl0b3IuY29udHJvbHMuZm9jdXMuaXRlbXMubGluZWFyXCIsXCJwZXNkay5mb2N1cy5idXR0b24ubWlycm9yZWRcIjpcImVkaXRvci5jb250cm9scy5mb2N1cy5pdGVtcy5taXJyb3JlZFwiLFwicGVzZGsuZm9jdXMuYnV0dG9uLm5vbmVcIjpcImVkaXRvci5jb250cm9scy5mb2N1cy5pdGVtcy5ub25lXCIsXCJwZXNkay5mb2N1cy5idXR0b24ucmFkaWFsXCI6XCJlZGl0b3IuY29udHJvbHMuZm9jdXMuaXRlbXMucmFkaWFsXCIsXCJwZXNkay5mb2N1cy50aXRsZS5uYW1lXCI6XCJlZGl0b3IuY29udHJvbHMuZm9jdXMudGl0bGVcIixcInBlc2RrLmZyYW1lLmFzc2V0LmltZ2x5X2ZyYW1lX2FydF9kZWNvclwiOlwiZWRpdG9yLmNvbnRyb2xzLmZyYW1lLmZyYW1lcy5pbWdseV9mcmFtZV9hcnRfZGVjb3JcIixcInBlc2RrLmZyYW1lLmFzc2V0LmltZ2x5X2ZyYW1lX2JsYWNrX3Bhc3NlcGFydG91dFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZyYW1lLmZyYW1lcy5pbWdseV9mcmFtZV9ibGFja19wYXNzZXBhcnRvdXRcIixcInBlc2RrLmZyYW1lLmFzc2V0LmltZ2x5X2ZyYW1lX2RpYVwiOlwiZWRpdG9yLmNvbnRyb2xzLmZyYW1lLmZyYW1lcy5pbWdseV9mcmFtZV9kaWFcIixcInBlc2RrLmZyYW1lLmFzc2V0LmltZ2x5X2ZyYW1lX2xvd3BvbHlfc2hhZG93XCI6XCJlZGl0b3IuY29udHJvbHMuZnJhbWUuZnJhbWVzLmltZ2x5X2ZyYW1lX2xvd3BvbHlfc2hhZG93XCIsXCJwZXNkay5mcmFtZS5hc3NldC5pbWdseV9mcmFtZV93b29kX3Bhc3NlcGFydG91dFwiOlwiZWRpdG9yLmNvbnRyb2xzLmZyYW1lLmZyYW1lcy5pbWdseV9mcmFtZV93b29kX3Bhc3NlcGFydG91dFwiLFwicGVzZGsuZnJhbWUuYnV0dG9uLmZpbGxcIjpcImVkaXRvci5jb250cm9scy5mcmFtZS5maWxsXCIsXCJwZXNkay5mcmFtZS5idXR0b24ucmVwbGFjZVwiOlwiZWRpdG9yLmNvbnRyb2xzLmZyYW1lLnJlcGxhY2VcIixcInBlc2RrLmZyYW1lLnRpdGxlLm5hbWVcIjpcImVkaXRvci5jb250cm9scy5mcmFtZS50aXRsZVwiLFwicGVzZGsuZnJhbWUudGl0bGUub3BhY2l0eVwiOlwiZWRpdG9yLmNvbnRyb2xzLmZyYW1lLm9wYWNpdHlcIixcInBlc2RrLmZyYW1lLnRpdGxlLndpZHRoXCI6XCJlZGl0b3IuY29udHJvbHMuZnJhbWUud2lkdGhcIixcInBlc2RrLmxpYnJhcnkuYnV0dG9uLmZpbGVEcm9wWm9uZVwiOlwiZWRpdG9yLmNvbnRyb2xzLmxpYnJhcnkuZmlsZURyb3Bab25lXCIsXCJwZXNkay5saWJyYXJ5LmJ1dHRvbi5maWxlRHJvcFpvbmVIb3ZlcmVkXCI6XCJlZGl0b3IuY29udHJvbHMubGlicmFyeS5maWxlRHJvcFpvbmVIb3ZlcmVkXCIsXCJwZXNkay5saWJyYXJ5LnBsYWNlaG9sZGVyLnNlYXJjaFwiOlwiZWRpdG9yLmNvbnRyb2xzLmxpYnJhcnkuc2VhcmNoXCIsXCJwZXNkay5saWJyYXJ5LnRleHQubm9SZXN1bHRzXCI6XCJlZGl0b3IuY29udHJvbHMubGlicmFyeS5ub1Jlc3VsdHNcIixcInBlc2RrLmxpYnJhcnkudGl0bGUubmFtZVwiOlwiZWRpdG9yLmNvbnRyb2xzLmxpYnJhcnkudGl0bGVcIixcInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV9ib2tlaFwiOlwiZWRpdG9yLmNvbnRyb2xzLm92ZXJsYXkub3ZlcmxheXMuaW1nbHlfb3ZlcmxheV9ib2tlaFwiLFwicGVzZGsub3ZlcmxheS5hc3NldC5pbWdseV9vdmVybGF5X2Nob3BcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5Lm92ZXJsYXlzLmltZ2x5X292ZXJsYXlfY2hvcFwiLFwicGVzZGsub3ZlcmxheS5hc3NldC5pbWdseV9vdmVybGF5X2Nsb3Vkc1wiOlwiZWRpdG9yLmNvbnRyb2xzLm92ZXJsYXkub3ZlcmxheXMuaW1nbHlfb3ZlcmxheV9jbG91ZHNcIixcInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV9nb2xkZW5cIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5Lm92ZXJsYXlzLmltZ2x5X292ZXJsYXlfZ29sZGVuXCIsXCJwZXNkay5vdmVybGF5LmFzc2V0LmltZ2x5X292ZXJsYXlfZ3JhaW5cIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5Lm92ZXJsYXlzLmltZ2x5X292ZXJsYXlfZ3JhaW5cIixcInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV9oZWFydHNcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5Lm92ZXJsYXlzLmltZ2x5X292ZXJsYXlfaGVhcnRzXCIsXCJwZXNkay5vdmVybGF5LmFzc2V0LmltZ2x5X292ZXJsYXlfbGlnaHRsZWFrMVwiOlwiZWRpdG9yLmNvbnRyb2xzLm92ZXJsYXkub3ZlcmxheXMuaW1nbHlfb3ZlcmxheV9saWdodGxlYWsxXCIsXCJwZXNkay5vdmVybGF5LmFzc2V0LmltZ2x5X292ZXJsYXlfbGlnaHRsZWFrMlwiOlwiZWRpdG9yLmNvbnRyb2xzLm92ZXJsYXkub3ZlcmxheXMuaW1nbHlfb3ZlcmxheV9saWdodGxlYWsyXCIsXCJwZXNkay5vdmVybGF5LmFzc2V0LmltZ2x5X292ZXJsYXlfbWV0YWxcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5Lm92ZXJsYXlzLmltZ2x5X292ZXJsYXlfbWV0YWxcIixcInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV9tb3NhaWNcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5Lm92ZXJsYXlzLmltZ2x5X292ZXJsYXlfbW9zYWljXCIsXCJwZXNkay5vdmVybGF5LmFzc2V0LmltZ2x5X292ZXJsYXlfcGFpbnRpbmdcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5Lm92ZXJsYXlzLmltZ2x5X292ZXJsYXlfcGFpbnRpbmdcIixcInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV9wYXBlclwiOlwiZWRpdG9yLmNvbnRyb2xzLm92ZXJsYXkub3ZlcmxheXMuaW1nbHlfb3ZlcmxheV9wYXBlclwiLFwicGVzZGsub3ZlcmxheS5hc3NldC5pbWdseV9vdmVybGF5X3JhaW5cIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5Lm92ZXJsYXlzLmltZ2x5X292ZXJsYXlfcmFpblwiLFwicGVzZGsub3ZlcmxheS5hc3NldC5pbWdseV9vdmVybGF5X3ZpbnRhZ2VcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5Lm92ZXJsYXlzLmltZ2x5X292ZXJsYXlfdmludGFnZVwiLFwicGVzZGsub3ZlcmxheS5hc3NldC5pbWdseV9vdmVybGF5X3dhbGwxXCI6XCJlZGl0b3IuY29udHJvbHMub3ZlcmxheS5vdmVybGF5cy5pbWdseV9vdmVybGF5X3dhbGwxXCIsXCJwZXNkay5vdmVybGF5LmFzc2V0LmltZ2x5X292ZXJsYXlfd2FsbDJcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5Lm92ZXJsYXlzLmltZ2x5X292ZXJsYXlfd2FsbDJcIixcInBlc2RrLm92ZXJsYXkuYXNzZXQuaW1nbHlfb3ZlcmxheV93b29kXCI6XCJlZGl0b3IuY29udHJvbHMub3ZlcmxheS5vdmVybGF5cy5pbWdseV9vdmVybGF5X3dvb2RcIixcInBlc2RrLm92ZXJsYXkuYnV0dG9uLm5vbmVcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5Lm92ZXJsYXlzLm5vbmVcIixcInBlc2RrLm92ZXJsYXkudGl0bGUuYmxlbmRpbmdcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5LmJsZW5kTW9kZXMuYmxlbmRpbmdcIixcInBlc2RrLm92ZXJsYXkudGl0bGUuY29sb3JCdXJuXCI6XCJlZGl0b3IuY29udHJvbHMub3ZlcmxheS5ibGVuZE1vZGVzLmNvbG9yQnVyblwiLFwicGVzZGsub3ZlcmxheS50aXRsZS5kYXJrZW5cIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5LmJsZW5kTW9kZXMuZGFya2VuXCIsXCJwZXNkay5vdmVybGF5LnRpdGxlLmhhcmRMaWdodFwiOlwiZWRpdG9yLmNvbnRyb2xzLm92ZXJsYXkuYmxlbmRNb2Rlcy5oYXJkTGlnaHRcIixcInBlc2RrLm92ZXJsYXkudGl0bGUubGlnaHRlblwiOlwiZWRpdG9yLmNvbnRyb2xzLm92ZXJsYXkuYmxlbmRNb2Rlcy5saWdodGVuXCIsXCJwZXNkay5vdmVybGF5LnRpdGxlLm11bHRpcGx5XCI6XCJlZGl0b3IuY29udHJvbHMub3ZlcmxheS5ibGVuZE1vZGVzLm11bHRpcGx5XCIsXCJwZXNkay5vdmVybGF5LnRpdGxlLm5hbWVcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5LnRpdGxlXCIsXCJwZXNkay5vdmVybGF5LnRpdGxlLm5vbmVcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5LmJsZW5kTW9kZXMubm9uZVwiLFwicGVzZGsub3ZlcmxheS50aXRsZS5ub3JtYWxcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5LmJsZW5kTW9kZXMubm9ybWFsXCIsXCJwZXNkay5vdmVybGF5LnRpdGxlLm92ZXJsYXlcIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5LmJsZW5kTW9kZXMub3ZlcmxheVwiLFwicGVzZGsub3ZlcmxheS50aXRsZS5zY3JlZW5cIjpcImVkaXRvci5jb250cm9scy5vdmVybGF5LmJsZW5kTW9kZXMuc2NyZWVuXCIsXCJwZXNkay5vdmVybGF5LnRpdGxlLnNvZnRMaWdodFwiOlwiZWRpdG9yLmNvbnRyb2xzLm92ZXJsYXkuYmxlbmRNb2Rlcy5zb2Z0TGlnaHRcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJDYXRlZ29yaWVzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FsaWVuXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbGllblwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbmdlbFwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW5nZWxcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW5ncnlcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FuZ3J5XCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FueGlvdXNcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FueGlvdXNcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYXNsZWVwXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19hc2xlZXBcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYXR0ZW50aW9uXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19hdHRlbnRpb25cIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmFieV9jaGlja2VuXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19iYWJ5X2NoaWNrZW5cIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmF0bWFuXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19iYXRtYW5cIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmVlclwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmVlclwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ibGFja1wiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmxhY2tcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmx1ZVwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmx1ZVwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ibHVzaFwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmx1c2hcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYm94ZXJcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JveGVyXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2J1c2luZXNzXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19idXNpbmVzc1wiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19jaGlja2VuXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19jaGlja2VuXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2Nvb2xcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2Nvb2xcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfY3J5XCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19jcnlcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZGVjZWFzZWRcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2RlY2Vhc2VkXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2RldmlsXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19kZXZpbFwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19kdWNrZmFjZVwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZHVja2ZhY2VcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZnVyaW91c1wiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZnVyaW91c1wiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ncmluXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ncmluXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2d1aXRhclwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZ3VpdGFyXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hhcnJ5X3BvdHRlclwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGFycnlfcG90dGVyXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hpcHBpZVwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGlwcGllXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hpdG1hblwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGl0bWFuXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2h1bW91cm91c1wiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaHVtb3Vyb3VzXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2lkZWFcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2lkZWFcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaW1wYXRpZW50XCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19pbXBhdGllbnRcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfa2lzc1wiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfa2lzc1wiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19raXNzZXNcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2tpc3Nlc1wiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19sYXVnaFwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbGF1Z2hcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbG91ZF9jcnlcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2xvdWRfY3J5XCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2xvdmluZ1wiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbG92aW5nXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX21hc2tlZFwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbWFza2VkXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX211c2ljXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19tdXNpY1wiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19uZXJkXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19uZXJkXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX25pbmphXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19uaW5qYVwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ub3Rfc3BlYWtpbmdfdG9feW91XCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19ub3Rfc3BlYWtpbmdfdG9feW91XCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3BpZ1wiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcGlnXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3B1bXBraW5cIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3B1bXBraW5cIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcXVlc3Rpb25cIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3F1ZXN0aW9uXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3JhYmJpdFwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcmFiYml0XCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NhZFwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2FkXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NpY2tcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NpY2tcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2thdGVib2FyZFwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2thdGVib2FyZFwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19za3VsbFwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2t1bGxcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2xlZXB5XCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zbGVlcHlcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc21pbGVcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NtaWxlXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3Ntb2tpbmdcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3Ntb2tpbmdcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc29iYmluZ1wiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc29iYmluZ1wiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zdGFyXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc19zdGFyXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3N0ZWFtaW5nX2Z1cmlvdXNcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3N0ZWFtaW5nX2Z1cmlvdXNcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3VuYmF0aGluZ1wiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3VuYmF0aGluZ1wiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc190aXJlZFwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfdGlyZWRcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfdG9uZ3VlX291dF93aW5rXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc190b25ndWVfb3V0X3dpbmtcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2F2ZVwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2F2ZVwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc193aWRlX2dyaW5cIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dpZGVfZ3JpblwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX2Vtb3RpY29uc193aW5rXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc193aW5rXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dyZXN0bGVyXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX2Vtb3RpY29uc193cmVzdGxlclwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc1wiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlckNhdGVnb3JpZXMuaW1nbHlfc3RpY2tlcl9zaGFwZXNcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYXJyb3dfMDJcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfc2hhcGVzX2Fycm93XzAyXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2Fycm93XzAzXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX3NoYXBlc19hcnJvd18wM1wiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wMVwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDFcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDRcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA0XCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA2XCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wNlwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wOFwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDhcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTFcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzExXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzEyXCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xMlwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xM1wiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTNcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTVcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE1XCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE4XCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xOFwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xOVwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTlcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMjBcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzIwXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzI4XCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8yOFwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8zMlwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMzJcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMzVcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzM1XCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzM2XCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8zNlwiLFwicGVzZGsuc3RpY2tlci5hc3NldC5pbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wMVwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuc3RpY2tlcnMuaW1nbHlfc3RpY2tlcl9zaGFwZXNfc3ByYXlfMDFcIixcInBlc2RrLnN0aWNrZXIuYXNzZXQuaW1nbHlfc3RpY2tlcl9zaGFwZXNfc3ByYXlfMDNcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnN0aWNrZXJzLmltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzAzXCIsXCJwZXNkay5zdGlja2VyLmFzc2V0LmltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzA0XCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5zdGlja2Vycy5pbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wNFwiLFwicGVzZGsuc3RpY2tlci5idXR0b24uZmlsbFwiOlwiZWRpdG9yLmNvbnRyb2xzLnN0aWNrZXIuZmlsbFwiLFwicGVzZGsuc3RpY2tlci5idXR0b24ubmV3XCI6XCJlZGl0b3IuY29udHJvbHMuc3RpY2tlci5uZXdcIixcInBlc2RrLnN0aWNrZXIuYnV0dG9uLnJlcGxhY2VcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnJlcGxhY2VcIixcInBlc2RrLnN0aWNrZXIudGV4dC5zdGlja2VyTG9hZGluZ0Vycm9yXCI6XCJlcnJvcnMuc3RpY2tlckxvYWRpbmdFcnJvci50ZXh0XCIsXCJwZXNkay5zdGlja2VyLnRpdGxlLm5hbWVcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLnRpdGxlXCIsXCJwZXNkay5zdGlja2VyLnRpdGxlLm9wYWNpdHlcIjpcImVkaXRvci5jb250cm9scy5zdGlja2VyLm9wYWNpdHlcIixcInBlc2RrLnRleHQuYnV0dG9uLm5ld1wiOlwiZWRpdG9yLmNvbnRyb2xzLnRleHQubmV3XCIsXCJwZXNkay50ZXh0LnBsYWNlaG9sZGVyLmRlZmF1bHRUZXh0XCI6XCJlZGl0b3IuY29udHJvbHMudGV4dC5kZWZhdWx0VGV4dFwiLFwicGVzZGsudGV4dC50aXRsZS5iYWNrZ3JvdW5kXCI6XCJlZGl0b3IuY29udHJvbHMudGV4dC5iYWNrZ3JvdW5kXCIsXCJwZXNkay50ZXh0LnRpdGxlLmZvbnRcIjpcImVkaXRvci5jb250cm9scy50ZXh0LmZvbnRcIixcInBlc2RrLnRleHQudGl0bGUubGluZVwiOlwiZWRpdG9yLmNvbnRyb2xzLnRleHQubGluZVwiLFwicGVzZGsudGV4dC50aXRsZS5uYW1lXCI6XCJlZGl0b3IuY29udHJvbHMudGV4dC50aXRsZVwiLFwicGVzZGsudGV4dC50aXRsZS5zaXplXCI6XCJlZGl0b3IuY29udHJvbHMudGV4dC5zaXplXCIsXCJwZXNkay50ZXh0LnRpdGxlLnNwYWNpbmdcIjpcImVkaXRvci5jb250cm9scy50ZXh0LnNwYWNpbmdcIixcInBlc2RrLnRleHRkZXNpZ24udGl0bGUubmFtZVwiOlwiZWRpdG9yLmNvbnRyb2xzLnRleHRkZXNpZ24udGl0bGVcIixcInBlc2RrLnRyYW5zZm9ybS5hc3NldC5pbWdseV90cmFuc2Zvcm1zX2NvbW1vbi5pbWdseV90cmFuc2Zvcm1fY29tbW9uXzE2LTlcIjpcImVkaXRvci5jb250cm9scy50cmFuc2Zvcm0ucmF0aW9zLmltZ2x5X3RyYW5zZm9ybXNfY29tbW9uLmltZ2x5X3RyYW5zZm9ybV9jb21tb25fMTYtOVwiLFwicGVzZGsudHJhbnNmb3JtLmFzc2V0LmltZ2x5X3RyYW5zZm9ybXNfY29tbW9uLmltZ2x5X3RyYW5zZm9ybV9jb21tb25fNC0zXCI6XCJlZGl0b3IuY29udHJvbHMudHJhbnNmb3JtLnJhdGlvcy5pbWdseV90cmFuc2Zvcm1zX2NvbW1vbi5pbWdseV90cmFuc2Zvcm1fY29tbW9uXzQtM1wiLFwicGVzZGsudHJhbnNmb3JtLmFzc2V0LmltZ2x5X3RyYW5zZm9ybXNfY29tbW9uLmltZ2x5X3RyYW5zZm9ybV9jb21tb25fY3VzdG9tXCI6XCJlZGl0b3IuY29udHJvbHMudHJhbnNmb3JtLnJhdGlvcy5pbWdseV90cmFuc2Zvcm1zX2NvbW1vbi5pbWdseV90cmFuc2Zvcm1fY29tbW9uX2N1c3RvbVwiLFwicGVzZGsudHJhbnNmb3JtLmFzc2V0LmltZ2x5X3RyYW5zZm9ybXNfY29tbW9uLmltZ2x5X3RyYW5zZm9ybV9jb21tb25fc3F1YXJlXCI6XCJlZGl0b3IuY29udHJvbHMudHJhbnNmb3JtLnJhdGlvcy5pbWdseV90cmFuc2Zvcm1zX2NvbW1vbi5pbWdseV90cmFuc2Zvcm1fY29tbW9uX3NxdWFyZVwiLFwicGVzZGsudHJhbnNmb3JtLmFzc2V0LmltZ2x5X3RyYW5zZm9ybXNfY29tbW9uLm5hbWVcIjpcImVkaXRvci5jb250cm9scy50cmFuc2Zvcm0ucmF0aW9zLmltZ2x5X3RyYW5zZm9ybXNfY29tbW9uLm5hbWVcIixcInBlc2RrLnRyYW5zZm9ybS5hc3NldC5pbWdseV90cmFuc2Zvcm1zX2ZhY2Vib29rLmltZ2x5X3RyYW5zZm9ybV9mYWNlYm9va19hZFwiOlwiZWRpdG9yLmNvbnRyb2xzLnRyYW5zZm9ybXMucmF0aW9zLmltZ2x5X3RyYW5zZm9ybXNfZmFjZWJvb2suaW1nbHlfdHJhbnNmb3JtX2ZhY2Vib29rX2FkXCIsXCJwZXNkay50cmFuc2Zvcm0uYXNzZXQuaW1nbHlfdHJhbnNmb3Jtc19mYWNlYm9vay5pbWdseV90cmFuc2Zvcm1fZmFjZWJvb2tfY292ZXJcIjpcImVkaXRvci5jb250cm9scy50cmFuc2Zvcm1zLnJhdGlvcy5pbWdseV90cmFuc2Zvcm1zX2ZhY2Vib29rLmltZ2x5X3RyYW5zZm9ybV9mYWNlYm9va19jb3ZlclwiLFwicGVzZGsudHJhbnNmb3JtLmFzc2V0LmltZ2x5X3RyYW5zZm9ybXNfZmFjZWJvb2suaW1nbHlfdHJhbnNmb3JtX2ZhY2Vib29rX3Bvc3RcIjpcImVkaXRvci5jb250cm9scy50cmFuc2Zvcm1zLnJhdGlvcy5pbWdseV90cmFuc2Zvcm1zX2ZhY2Vib29rLmltZ2x5X3RyYW5zZm9ybV9mYWNlYm9va19wb3N0XCIsXCJwZXNkay50cmFuc2Zvcm0uYXNzZXQuaW1nbHlfdHJhbnNmb3Jtc19mYWNlYm9vay5pbWdseV90cmFuc2Zvcm1fZmFjZWJvb2tfcHJvZmlsZVwiOlwiZWRpdG9yLmNvbnRyb2xzLnRyYW5zZm9ybXMucmF0aW9zLmltZ2x5X3RyYW5zZm9ybXNfZmFjZWJvb2suaW1nbHlfdHJhbnNmb3JtX2ZhY2Vib29rX3Byb2ZpbGVcIixcInBlc2RrLnRyYW5zZm9ybS5hc3NldC5pbWdseV90cmFuc2Zvcm1zX2ZhY2Vib29rLm5hbWVcIjpcImVkaXRvci5jb250cm9scy50cmFuc2Zvcm0ucmF0aW9zLmltZ2x5X3RyYW5zZm9ybXNfZmFjZWJvb2submFtZVwiLFwicGVzZGsudHJhbnNmb3JtLmJ1dHRvbi5yZXNldFwiOlwiZWRpdG9yLmNvbnRyb2xzLnRyYW5zZm9ybS5yZXNldFwiLFwicGVzZGsudHJhbnNmb3JtLnBsYWNlaG9sZGVyLmhlaWdodFwiOlwiZWRpdG9yLmNvbnRyb2xzLnRyYW5zZm9ybS5kaW1lbnNpb25zLmhlaWdodFwiLFwicGVzZGsudHJhbnNmb3JtLnBsYWNlaG9sZGVyLndpZHRoXCI6XCJlZGl0b3IuY29udHJvbHMudHJhbnNmb3JtLmRpbWVuc2lvbnMud2lkdGhcIixcInBlc2RrLnRyYW5zZm9ybS50aXRsZS5uYW1lXCI6XCJlZGl0b3IuY29udHJvbHMudHJhbnNmb3JtLnRpdGxlXCJ9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9jb3JlL2xpYi9uZXctdG8tb2xkLWxvY2FsaXphdGlvbi1rZXktbWFwLmpzb25cbi8vIG1vZHVsZSBpZCA9IDIwN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IEVWRU5UUyBmcm9tICcuL2V2ZW50cydcbmltcG9ydCBERUZBVUxUUyBmcm9tICcuL2RlZmF1bHRzJ1xuXG4vKipcbiAqIEB0b2RvIEhhcm1vbml6ZSBrZXlzOiBEb24ndCB3cmFwIHRoZW0gaW4gcXVvdGVzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgRVZFTlRTLFxuICBERUZBVUxUU1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9saWIvY29uc3RhbnRzL2luZGV4LmpzIiwiZXhwb3J0IGRlZmF1bHQge1xuICBFWFBPUlQ6ICdleHBvcnQnLFxuICBDTE9TRTogJ2Nsb3NlJyxcblxuICBPUEVSQVRJT05fQ1JFQVRFRDogJ29wZXJhdGlvbjpjcmVhdGVkJyxcbiAgT1BFUkFUSU9OX1VQREFURUQ6ICdvcGVyYXRpb246dXBkYXRlZCcsXG4gIE9QRVJBVElPTl9SRU1PVkVEOiAnb3BlcmF0aW9uOnJlbW92ZWQnLFxuXG4gIFdJTkRPV19SRVNJWkU6ICd3aW5kb3c6cmVzaXplJyxcbiAgRURJVE9SX1JFU0laRTogJ2VkaXRvcjpyZXNpemUnLFxuICBaT09NOiAnZWRpdG9yOnpvb20nLFxuICBaT09NX0NIQU5HRUQ6ICdlZGl0b3I6em9vbV9jaGFuZ2VkJyxcbiAgWk9PTV9ET05FOiAnZWRpdG9yOnpvb21fZG9uZScsXG5cbiAgSElTVE9SWV9VTkRPOiAnaGlzdG9yeTp1bmRvJyxcbiAgSElTVE9SWV9VUERBVEVEOiAnaGlzdG9yeTp1cGRhdGVkJyxcbiAgSElTVE9SWV9CRUZPUkVfVU5ETzogJ2hpc3Rvcnk6YmVmb3JlLXVuZG8nLFxuICBISVNUT1JZX1JFRE86ICdoaXN0b3J5OnJlZG8nLFxuICBISVNUT1JZX0JFRk9SRV9SRURPOiAnaGlzdG9yeTpiZWZvcmUtcmVkbycsXG5cbiAgRkVBVFVSRVNfRElTQUJMRUQ6ICdlZGl0b3I6ZmVhdHVyZXM6ZGlzYWJsZWQnLFxuICBGRUFUVVJFU19FTkFCTEVEOiAnZWRpdG9yOmZlYXR1cmVzOmVuYWJsZWQnLFxuICBGRUFUVVJFU19VUERBVEVEOiAnZWRpdG9yOmZlYXR1cmVzOnVwZGF0ZWQnLFxuXG4gIEVESVRPUl9SRUFEWTogJ2VkaXRvcjpyZWFkeScsXG5cbiAgVEVYVF9TQ0FMRUQ6ICdlZGl0b3I6dGV4dDpzY2FsZWQnLFxuXG4gIFRSQU5TRk9STV9SRVNJWkU6ICd0cmFuc2Zvcm06cmVzaXplJyxcbiAgVFJBTlNGT1JNX1JFQVBQTFlfUkFUSU86ICd0cmFuc2Zvcm06cmVhcHBseS1yYXRpbycsXG5cbiAgQURERURfU1RJQ0tFUjogJ3N0aWNrZXI6YWRkZWQtc3RpY2tlcidcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvbGliL2NvbnN0YW50cy9ldmVudHMuanMiLCJpbXBvcnQgUGhvdG9FZGl0b3JTREsgZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5pbXBvcnQgRk9OVFMgZnJvbSAnLi9mb250cydcbmltcG9ydCBURVhUX0RFU0lHTl9GT05UUyBmcm9tICcuL3RleHQtZGVzaWduLWZvbnRzJ1xuaW1wb3J0IFRSQU5TRk9STV9SQVRJT19DQVRFR09SSUVTIGZyb20gJy4vdHJhbnNmb3JtLXJhdGlvLWNhdGVnb3JpZXMnXG5cbmNvbnN0IEJSVVNIRVMgPSBbXVxuaWYgKHR5cGVvZiBQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgQlJVU0hFUy5wdXNoKFBob3RvRWRpdG9yU0RLLk9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLkJydXNoU3ByaXRlLkJydXNoZXMuUmFkaWFsQnJ1c2gpXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgVFJBTlNGT1JNX1JBVElPX0NBVEVHT1JJRVMsXG4gIEZPTlRTLFxuICBURVhUX0RFU0lHTl9GT05UUyxcbiAgQlJVU0hFU1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9saWIvY29uc3RhbnRzL2RlZmF1bHRzL2luZGV4LmpzIiwiZXhwb3J0IGRlZmF1bHQgW1xuICB7XG4gICAgZm9udEZhbWlseTogJ0FsZW8nLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfYWxlb19ib2xkJyxcbiAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ2ZvbnRzL2ltZ2x5X2ZvbnRfYWxlb19ib2xkLndvZmYnLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDIwNDgsXG4gICAgICAgICAgYXNjZW5kZXI6IDE5MTksXG4gICAgICAgICAgZGVzY2VuZGVyOiAtNDA5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnQW1hdGljIFNDJyxcbiAgICB2YXJpYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X2FtYXRpY3NjJyxcbiAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAnZm9udHMvaW1nbHlfZm9udF9hbWF0aWNzYy53b2ZmJyxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAyMDQ4LFxuICAgICAgICAgIGFzY2VuZGVyOiAyMzMyLFxuICAgICAgICAgIGRlc2NlbmRlcjogLTU4M1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgZm9udEZhbWlseTogJ0Jlcm5pZXInLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfYmVybmllcl9yZWd1bGFyJyxcbiAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAnZm9udHMvaW1nbHlfZm9udF9iZXJuaWVyX3JlZ3VsYXIud29mZicsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjA0OCxcbiAgICAgICAgICBhc2NlbmRlcjogMjAwNyxcbiAgICAgICAgICBkZXNjZW5kZXI6IC01NTJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIGZvbnRGYW1pbHk6ICdDaGVxdWUnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfY2hlcXVlX3JlZ3VsYXInLFxuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgcHJvdmlkZXI6ICdmaWxlJyxcbiAgICAgICAgZmlsZVBhdGg6ICdmb250cy9pbWdseV9mb250X2NoZXF1ZV9yZWd1bGFyLndvZmYnLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDIwNDgsXG4gICAgICAgICAgYXNjZW5kZXI6IDE4NTMsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtNDk1XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnT3BlbiBTYW5zJyxcbiAgICB2YXJpYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X29wZW5fc2Fuc19ib2xkJyxcbiAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ2ZvbnRzL2ltZ2x5X2ZvbnRfb3Blbl9zYW5zX2JvbGQud29mZicsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjA0OCxcbiAgICAgICAgICBhc2NlbmRlcjogMjE4OSxcbiAgICAgICAgICBkZXNjZW5kZXI6IC02NDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIGZvbnRGYW1pbHk6ICdHYWdhbGluJyxcbiAgICB2YXJpYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X2dhZ2FsaW5fcmVndWxhcicsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ2ZvbnRzL2ltZ2x5X2ZvbnRfZ2FnYWxpbl9yZWd1bGFyLndvZmYnLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDIwNDgsXG4gICAgICAgICAgYXNjZW5kZXI6IDE5ODcsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtNjI4XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnSGFnaW4nLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfaGFnaW5fY2Fwc190aGluJyxcbiAgICAgICAgZm9udFdlaWdodDogMjAwLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ2ZvbnRzL2ltZ2x5X2ZvbnRfaGFnaW5fY2Fwc190aGluLndvZmYnLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDIwNDgsXG4gICAgICAgICAgYXNjZW5kZXI6IDE5NjQsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtNDgyXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnSW50cm8nLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfaW50cm9faW5saW5lJyxcbiAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAnZm9udHMvaW1nbHlfZm9udF9pbnRyb19pbmxpbmUud29mZicsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjA0OCxcbiAgICAgICAgICBhc2NlbmRlcjogMTk0NCxcbiAgICAgICAgICBkZXNjZW5kZXI6IC01NDhcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIGZvbnRGYW1pbHk6ICdMb2JzdGVyJyxcbiAgICB2YXJpYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X2xvYnN0ZXInLFxuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgcHJvdmlkZXI6ICdmaWxlJyxcbiAgICAgICAgZmlsZVBhdGg6ICdmb250cy9pbWdseV9mb250X2xvYnN0ZXIud29mZicsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjA0OCxcbiAgICAgICAgICBhc2NlbmRlcjogMjA0OCxcbiAgICAgICAgICBkZXNjZW5kZXI6IC01NTJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIGZvbnRGYW1pbHk6ICdOZXhhJyxcbiAgICB2YXJpYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X25leGFfc2NyaXB0JyxcbiAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAnZm9udHMvaW1nbHlfZm9udF9uZXhhX3NjcmlwdC53b2ZmJyxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAyMDQ4LFxuICAgICAgICAgIGFzY2VuZGVyOiAxODM1LFxuICAgICAgICAgIGRlc2NlbmRlcjogLTY2M1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgZm9udEZhbWlseTogJ09zdHJpY2gnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfb3N0cmljaF9zYW5zX2JsYWNrJyxcbiAgICAgICAgZm9udFdlaWdodDogODAwLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ2ZvbnRzL2ltZ2x5X2ZvbnRfb3N0cmljaF9zYW5zX2JsYWNrLndvZmYnLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDIwNDgsXG4gICAgICAgICAgYXNjZW5kZXI6IDE1MTMsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtMjM1XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X29zdHJpY2hfc2Fuc19ib2xkJyxcbiAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ2ZvbnRzL2ltZ2x5X2ZvbnRfb3N0cmljaF9zYW5zX2JvbGQud29mZicsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjA0OCxcbiAgICAgICAgICBhc2NlbmRlcjogMTUxMyxcbiAgICAgICAgICBkZXNjZW5kZXI6IC0yMzVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIGZvbnRGYW1pbHk6ICdQYW50b24nLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfcGFudG9uX2JsYWNrX2l0YWxpY19jYXBzJyxcbiAgICAgICAgZm9udFdlaWdodDogODAwLFxuICAgICAgICBmb250U3R5bGU6ICdpdGFsaWMnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ2ZvbnRzL2ltZ2x5X2ZvbnRfcGFudG9uX2JsYWNraXRhbGljX2NhcHMud29mZicsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjA0OCxcbiAgICAgICAgICBhc2NlbmRlcjogMjAzMyxcbiAgICAgICAgICBkZXNjZW5kZXI6IC01NzJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfcGFudG9uX2xpZ2h0X2l0YWxpY19jYXBzJyxcbiAgICAgICAgZm9udFdlaWdodDogMjAwLFxuICAgICAgICBmb250U3R5bGU6ICdpdGFsaWMnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ2ZvbnRzL2ltZ2x5X2ZvbnRfcGFudG9uX2xpZ2h0aXRhbGljX2NhcHMud29mZicsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjA0OCxcbiAgICAgICAgICBhc2NlbmRlcjogMTk2MSxcbiAgICAgICAgICBkZXNjZW5kZXI6IC01NTZcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIGZvbnRGYW1pbHk6ICdQZXJmb2dyYW1hJyxcbiAgICB2YXJpYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X3BlcmZvZ3JhbWEnLFxuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgcHJvdmlkZXI6ICdmaWxlJyxcbiAgICAgICAgZmlsZVBhdGg6ICdmb250cy9pbWdseV9mb250X3BlcmZvZ3JhbWEud29mZicsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjA0OCxcbiAgICAgICAgICBhc2NlbmRlcjogMTk4MixcbiAgICAgICAgICBkZXNjZW5kZXI6IC04NDJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIGZvbnRGYW1pbHk6ICdUcmFzaGhhbmQnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfdHJhc2hfaGFuZCcsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ2ZvbnRzL2ltZ2x5X2ZvbnRfdHJhc2hfaGFuZC53b2ZmJyxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAyMDQ4LFxuICAgICAgICAgIGFzY2VuZGVyOiAxNTU0LFxuICAgICAgICAgIGRlc2NlbmRlcjogLTY2M1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9XG5dXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2xpYi9jb25zdGFudHMvZGVmYXVsdHMvZm9udHMuanMiLCJleHBvcnQgZGVmYXVsdCBbXG4gIHtcbiAgICBmb250RmFtaWx5OiAnT3BlbiBTYW5zJyxcbiAgICB2YXJpYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X29wZW5fc2Fuc19ib2xkJyxcbiAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ2ZvbnRzL2ltZ2x5X2ZvbnRfb3Blbl9zYW5zX2JvbGQud29mZicsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjA0OCxcbiAgICAgICAgICBhc2NlbmRlcjogMjE4OSxcbiAgICAgICAgICBkZXNjZW5kZXI6IC02NDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIGZvbnRGYW1pbHk6ICdHYWdhbGluJyxcbiAgICB2YXJpYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X2dhZ2FsaW5fcmVndWxhcicsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ2ZvbnRzL2ltZ2x5X2ZvbnRfZ2FnYWxpbl9yZWd1bGFyLndvZmYnLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDIwNDgsXG4gICAgICAgICAgYXNjZW5kZXI6IDE5ODcsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtNjI4XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnQWJyaWwgRmF0ZmFjZScsXG4gICAgdmFyaWF0aW9uczogW1xuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfZm9udF9hYnJpbF9mYXRmYWNlX3JlZ3VsYXInLFxuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgcHJvdmlkZXI6ICdmaWxlJyxcbiAgICAgICAgZmlsZVBhdGg6ICd0ZXh0LWRlc2lnbi9mb250cy9pbWdseV9mb250X2FicmlsX2ZhdGZhY2VfcmVndWxhci53b2ZmJyxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAxMDAwLFxuICAgICAgICAgIGFzY2VuZGVyOiAxMDU4LFxuICAgICAgICAgIGRlc2NlbmRlcjogLTI5MVxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgZm9udEZhbWlseTogJ01vbnRzZXJyYXQgTGlnaHQnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfbW9udHNlcnJhdF9saWdodCcsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ3RleHQtZGVzaWduL2ZvbnRzL2ltZ2x5X2ZvbnRfbW9udHNlcnJhdF9saWdodC53b2ZmJyxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAxMDAwLFxuICAgICAgICAgIGFzY2VuZGVyOiA5NjgsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtMjUxXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnSGVsbG8gU3Vuc2hpbmUnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfaGVsbG9fc3Vuc2hpbmUnLFxuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgcHJvdmlkZXI6ICdmaWxlJyxcbiAgICAgICAgZmlsZVBhdGg6ICd0ZXh0LWRlc2lnbi9mb250cy9pbWdseV9mb250X2hlbGxvX3N1bnNoaW5lLndvZmYnLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDEwMDAsXG4gICAgICAgICAgYXNjZW5kZXI6IDc1MCxcbiAgICAgICAgICBkZXNjZW5kZXI6IC0yNTBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfaGVsbG9fc3Vuc2hpbmVfaXRhbGljJyxcbiAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgIGZvbnRTdHlsZTogJ2l0YWxpYycsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAndGV4dC1kZXNpZ24vZm9udHMvaW1nbHlfZm9udF9oZWxsb19zdW5zaGluZV9pdGFsaWMud29mZicsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMTAwMCxcbiAgICAgICAgICBhc2NlbmRlcjogNzUwLFxuICAgICAgICAgIGRlc2NlbmRlcjogLTI1MFxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgZm9udEZhbWlseTogJ0hlbGxvIFN1bnNoaW5lIE1hcmtlcicsXG4gICAgdmFyaWF0aW9uczogW1xuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfZm9udF9oZWxsb19zdW5zaGluZV9tYXJrZXInLFxuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgcHJvdmlkZXI6ICdmaWxlJyxcbiAgICAgICAgZmlsZVBhdGg6ICd0ZXh0LWRlc2lnbi9mb250cy9pbWdseV9mb250X2hlbGxvX3N1bnNoaW5lX21hcmtlci53b2ZmJyxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAxMDAwLFxuICAgICAgICAgIGFzY2VuZGVyOiA3NTAsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtMjUwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnUGFudG9uIENhcHMnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfcGFudG9uX2xpZ2h0X2l0YWxpY19jYXBzJyxcbiAgICAgICAgZm9udFdlaWdodDogJ2xpZ2h0ZXInLFxuICAgICAgICBmb250U3R5bGU6ICdpdGFsaWMnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ3RleHQtZGVzaWduL2ZvbnRzL2ltZ2x5X2ZvbnRfcGFudG9uX2xpZ2h0X2l0YWxpY19jYXBzLndvZmYnLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDEwMDAsXG4gICAgICAgICAgYXNjZW5kZXI6IDk0MCxcbiAgICAgICAgICBkZXNjZW5kZXI6IC0yNjBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfcGFudG9uX2JsYWNrX2l0YWxpY19jYXBzJyxcbiAgICAgICAgZm9udFdlaWdodDogODAwLFxuICAgICAgICBmb250U3R5bGU6ICdpdGFsaWMnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ3RleHQtZGVzaWduL2ZvbnRzL2ltZ2x5X2ZvbnRfcGFudG9uX2JsYWNrX2l0YWxpY19jYXBzLndvZmYnLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDEwMDAsXG4gICAgICAgICAgYXNjZW5kZXI6IDk0MCxcbiAgICAgICAgICBkZXNjZW5kZXI6IC0yNjBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfcGFudG9uX2xpZ2h0X2NhcHMnLFxuICAgICAgICBmb250V2VpZ2h0OiAnbGlnaHRlcicsXG4gICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAndGV4dC1kZXNpZ24vZm9udHMvaW1nbHlfZm9udF9wYW50b25fbGlnaHRfY2Fwcy53b2ZmJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAxMDAwLFxuICAgICAgICAgIGFzY2VuZGVyOiA5NDAsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtMjYwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X3BhbnRvbl9ibGFja19jYXBzJyxcbiAgICAgICAgZm9udFdlaWdodDogODAwLFxuICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ3RleHQtZGVzaWduL2ZvbnRzL2ltZ2x5X2ZvbnRfcGFudG9uX2JsYWNrX2NhcHMud29mZicsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMTAwMCxcbiAgICAgICAgICBhc2NlbmRlcjogOTQwLFxuICAgICAgICAgIGRlc2NlbmRlcjogLTI2MFxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgZm9udEZhbWlseTogJ0FtYmVybGlnaHQnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfYW1iZXJsaWdodCcsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ3RleHQtZGVzaWduL2ZvbnRzL2ltZ2x5X2ZvbnRfYW1iZXJsaWdodC53b2ZmJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAxMDAwLFxuICAgICAgICAgIGFzY2VuZGVyOiA3NTAsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtMjUwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnVWx0cmEnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfdWx0cmEnLFxuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgcHJvdmlkZXI6ICdmaWxlJyxcbiAgICAgICAgZmlsZVBhdGg6ICd0ZXh0LWRlc2lnbi9mb250cy9pbWdseV9mb250X3VsdHJhLndvZmYnLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDIwNDgsXG4gICAgICAgICAgYXNjZW5kZXI6IDIwNjYsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtNTYxXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnR2FsYW5vIEdyb3Rlc3F1ZScsXG4gICAgdmFyaWF0aW9uczogW1xuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfZm9udF9nYWxhbm9fZ3JvdGVzcXVlX2JvbGQnLFxuICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAndGV4dC1kZXNpZ24vZm9udHMvaW1nbHlfZm9udF9nYWxhbm9fZ3JvdGVzcXVlX2JvbGQud29mZicsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMTAwMCxcbiAgICAgICAgICBhc2NlbmRlcjogODAwLFxuICAgICAgICAgIGRlc2NlbmRlcjogLTIwMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgZm9udEZhbWlseTogJ0J1bmdlZSBJbmxpbmUnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfYnVuZ2VlX2lubGluZScsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ3RleHQtZGVzaWduL2ZvbnRzL2ltZ2x5X2ZvbnRfYnVuZ2VlX2lubGluZS53b2ZmJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAxMDAwLFxuICAgICAgICAgIGFzY2VuZGVyOiA4NjAsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtMTQwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnUGV0aXQgRm9ybWFsIFNjcmlwdCcsXG4gICAgdmFyaWF0aW9uczogW1xuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfZm9udF9wZXRpdF9mb3JtYWxfc2NyaXB0JyxcbiAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAndGV4dC1kZXNpZ24vZm9udHMvaW1nbHlfZm9udF9wZXRpdF9mb3JtYWxfc2NyaXB0LndvZmYnLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDIwNDgsXG4gICAgICAgICAgYXNjZW5kZXI6IDIwMzMsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtNTI3XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnU3VtbWVyIEZvbnQnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfc3VtbWVyX2ZvbnRfbGlnaHQnLFxuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgcHJvdmlkZXI6ICdmaWxlJyxcbiAgICAgICAgZmlsZVBhdGg6ICd0ZXh0LWRlc2lnbi9mb250cy9pbWdseV9mb250X3N1bW1lcl9mb250X2xpZ2h0LndvZmYnLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0ZXh0TWV0cmljczoge1xuICAgICAgICAgIHVuaXRzUGVyRW06IDIwNDgsXG4gICAgICAgICAgYXNjZW5kZXI6IDIxODksXG4gICAgICAgICAgZGVzY2VuZGVyOiAtNjAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnSGFuZHljaGVlcmEnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfaGFuZHljaGVlcmFfcmVndWxhcicsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ3RleHQtZGVzaWduL2ZvbnRzL2ltZ2x5X2ZvbnRfaGFuZHljaGVlcmFfcmVndWxhci53b2ZmJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAyMDQ4LFxuICAgICAgICAgIGFzY2VuZGVyOiAyMTk5LFxuICAgICAgICAgIGRlc2NlbmRlcjogLTgwOFxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgZm9udEZhbWlseTogJ1Jhc2EnLFxuICAgIHZhcmlhdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfcmFzYV9yZWd1bGFyJyxcbiAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAndGV4dC1kZXNpZ24vZm9udHMvaW1nbHlfZm9udF9yYXNhX3JlZ3VsYXIud29mZicsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjc1MCxcbiAgICAgICAgICBhc2NlbmRlcjogMjMwMCxcbiAgICAgICAgICBkZXNjZW5kZXI6IC0xMDUwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X3Jhc2FfNTAwJyxcbiAgICAgICAgZm9udFdlaWdodDogNTAwLFxuICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICBwcm92aWRlcjogJ2ZpbGUnLFxuICAgICAgICBmaWxlUGF0aDogJ3RleHQtZGVzaWduL2ZvbnRzL2ltZ2x5X2ZvbnRfcmFzYV81MDAud29mZicsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjc1MCxcbiAgICAgICAgICBhc2NlbmRlcjogMjMwMCxcbiAgICAgICAgICBkZXNjZW5kZXI6IC0xMDUwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnQ2FtcHRvbiBCb29rJyxcbiAgICB2YXJpYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV9mb250X2NhbXB0b25fYm9sZCcsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgICAgcHJvdmlkZXI6ICdmaWxlJyxcbiAgICAgICAgZmlsZVBhdGg6ICd0ZXh0LWRlc2lnbi9mb250cy9pbWdseV9mb250X2NhbXB0b25fYm9sZC53b2ZmJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAxMDAwLFxuICAgICAgICAgIGFzY2VuZGVyOiA3NzAsXG4gICAgICAgICAgZGVzY2VuZGVyOiAtMjk0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBmb250RmFtaWx5OiAnT3N0cmljaCcsXG4gICAgdmFyaWF0aW9uczogW1xuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfZm9udF9vc3RyaWNoX3NhbnNfYmxhY2snLFxuICAgICAgICBmb250V2VpZ2h0OiA4MDAsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAnZm9udHMvaW1nbHlfZm9udF9vc3RyaWNoX3NhbnNfYmxhY2sud29mZicsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMjA0OCxcbiAgICAgICAgICBhc2NlbmRlcjogMTUxMyxcbiAgICAgICAgICBkZXNjZW5kZXI6IC0yMzVcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X2ZvbnRfb3N0cmljaF9zYW5zX2JvbGQnLFxuICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAnZm9udHMvaW1nbHlfZm9udF9vc3RyaWNoX3NhbnNfYm9sZC53b2ZmJyxcbiAgICAgICAgdGV4dE1ldHJpY3M6IHtcbiAgICAgICAgICB1bml0c1BlckVtOiAyMDQ4LFxuICAgICAgICAgIGFzY2VuZGVyOiAxNTEzLFxuICAgICAgICAgIGRlc2NlbmRlcjogLTIzNVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfZm9udF9vc3RyaWNoX3NhbnNfaGVhdnknLFxuICAgICAgICBmb250V2VpZ2h0OiA5MDAsXG4gICAgICAgIHByb3ZpZGVyOiAnZmlsZScsXG4gICAgICAgIGZpbGVQYXRoOiAndGV4dC1kZXNpZ24vZm9udHMvaW1nbHlfZm9udF9vc3RyaWNoX3NhbnNfaGVhdnkud29mZicsXG4gICAgICAgIHRleHRNZXRyaWNzOiB7XG4gICAgICAgICAgdW5pdHNQZXJFbTogMTAwMCxcbiAgICAgICAgICBhc2NlbmRlcjogNjc0LFxuICAgICAgICAgIGRlc2NlbmRlcjogMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9XG5dXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2xpYi9jb25zdGFudHMvZGVmYXVsdHMvdGV4dC1kZXNpZ24tZm9udHMuanMiLCJpbXBvcnQgUGhvdG9FZGl0b3JTREsgZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5cbmV4cG9ydCBkZWZhdWx0IFtcbiAge1xuICAgIGlkZW50aWZpZXI6ICdpbWdseV90cmFuc2Zvcm1zX2NvbW1vbicsXG4gICAgZGVmYXVsdE5hbWU6ICdDb21tb24gUmF0aW9zJyxcbiAgICByYXRpb3M6IFtcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3RyYW5zZm9ybV9jb21tb25fY3VzdG9tJyxcbiAgICAgICAgZGVmYXVsdE5hbWU6ICdDdXN0b20nLFxuICAgICAgICByYXRpbzogJyonLFxuICAgICAgICBzZWxlY3RlZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3RyYW5zZm9ybV9jb21tb25fc3F1YXJlJyxcbiAgICAgICAgZGVmYXVsdE5hbWU6ICdTcXVhcmUnLFxuICAgICAgICByYXRpbzogMVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3RyYW5zZm9ybV9jb21tb25fNC0zJyxcbiAgICAgICAgZGVmYXVsdE5hbWU6ICc0OjMnLFxuICAgICAgICByYXRpbzogNCAvIDNcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV90cmFuc2Zvcm1fY29tbW9uXzE2LTknLFxuICAgICAgICBkZWZhdWx0TmFtZTogJzE2OjknLFxuICAgICAgICByYXRpbzogMTYgLyA5XG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgaWRlbnRpZmllcjogJ2ltZ2x5X3RyYW5zZm9ybXNfZmFjZWJvb2snLFxuICAgIGRlZmF1bHROYW1lOiAnRmFjZWJvb2snLFxuICAgIHJhdGlvczogW1xuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfdHJhbnNmb3JtX2ZhY2Vib29rX3Byb2ZpbGUnLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ1Byb2ZpbGUgUGljJyxcbiAgICAgICAgcmF0aW86IDEgLyAxXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZGVudGlmaWVyOiAnaW1nbHlfdHJhbnNmb3JtX2ZhY2Vib29rX2FkJyxcbiAgICAgICAgZGVmYXVsdE5hbWU6ICdBZCcsXG4gICAgICAgIGRpbWVuc2lvbnM6IG5ldyBQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjIoMTIwMCwgNjI3KVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3RyYW5zZm9ybV9mYWNlYm9va19wb3N0JyxcbiAgICAgICAgZGVmYXVsdE5hbWU6ICdQb3N0JyxcbiAgICAgICAgZGltZW5zaW9uczogbmV3IFBob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMig5NDAsIDc4OClcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkZW50aWZpZXI6ICdpbWdseV90cmFuc2Zvcm1fZmFjZWJvb2tfY292ZXInLFxuICAgICAgICBkZWZhdWx0TmFtZTogJ0NvdmVyJyxcbiAgICAgICAgZGltZW5zaW9uczogbmV3IFBob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMig4NTEsIDMxNSlcbiAgICAgIH1cbiAgICBdXG4gIH1cbl1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvbGliL2NvbnN0YW50cy9kZWZhdWx0cy90cmFuc2Zvcm0tcmF0aW8tY2F0ZWdvcmllcy5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IFBob3RvRWRpdG9yU0RLIGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuY29uc3QgeyBFdmVudEVtaXR0ZXIsIExvZyB9ID0gUGhvdG9FZGl0b3JTREtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhcmVkU3RhdGUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvciAoc3RhdGUgPSB7fSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnNldE1heExpc3RlbmVycyg1MClcbiAgICB0aGlzLl9jYW5Ccm9hZGNhc3QgPSB0cnVlXG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZ2l2ZW4gc3RhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG5ld1N0YXRlXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gdXBkYXRlID0gdHJ1ZVxuICAgKi9cbiAgc2V0IChuZXdTdGF0ZSA9IHt9LCB1cGRhdGUgPSB0cnVlKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdTdGF0ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIExvZy5pbmZvKCdTaGFyZWRTdGF0ZSNzZXQgZXhwZWN0cyBhbiBvYmplY3QgYXMgZmlyc3QgcGFyYW1ldGVyJylcbiAgICB9XG5cbiAgICBjb25zdCBmaW5hbFN0YXRlID0gey4uLnRoaXMuc3RhdGUsIC4uLm5ld1N0YXRlfVxuXG4gICAgY29uc3Qgb2xkU3RhdGUgPSB7Li4udGhpcy5zdGF0ZX1cbiAgICB0aGlzLnN0YXRlID0gZmluYWxTdGF0ZVxuXG4gICAgaWYgKHVwZGF0ZSkge1xuICAgICAgdGhpcy5icm9hZGNhc3RVcGRhdGUob2xkU3RhdGUsIGZpbmFsU3RhdGUpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0YXRlIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuIElmIG5vIHByb3AgaXMgZ2l2ZW4sIHJldHVybiBhXG4gICAqIHNoYWxsb3cgY29weSBvZiB0aGUgc3RhdGUuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcF1cbiAgICovXG4gIGdldCAocHJvcCkge1xuICAgIHJldHVybiBwcm9wID8gdGhpcy5zdGF0ZVtwcm9wXSA6IHsgLi4udGhpcy5zdGF0ZSB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgd2hvbGUgc3RhdGVcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0U3RhdGUgKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlXG4gIH1cblxuICAvKipcbiAgICogQnJvYWRjYXN0cyBhbiB1cGRhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9sZFN0YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZXdTdGF0ZVxuICAgKi9cbiAgYnJvYWRjYXN0VXBkYXRlIChvbGRTdGF0ZSwgbmV3U3RhdGUgPSB7fSkge1xuICAgIGlmICghdGhpcy5fY2FuQnJvYWRjYXN0KSByZXR1cm5cblxuICAgIHRoaXMuZW1pdCgndXBkYXRlJywgb2xkU3RhdGUsIG5ld1N0YXRlKVxuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgdGhlIGJyb2FkY2FzdGluZ1xuICAgKi9cbiAgZW5hYmxlQnJvYWRjYXN0ICgpIHtcbiAgICB0aGlzLl9jYW5Ccm9hZGNhc3QgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGJyb2FkY2FzdGluZ1xuICAgKi9cbiAgZGlzYWJsZUJyb2FkY2FzdCAoKSB7XG4gICAgdGhpcy5fY2FuQnJvYWRjYXN0ID0gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIHN0YXRlXG4gICAqL1xuICBjbGVhciAoKSB7XG4gICAgY29uc3Qgb2xkU3RhdGUgPSB0aGlzLnN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHt9XG4gICAgdGhpcy5icm9hZGNhc3RVcGRhdGUob2xkU3RhdGUsIHRoaXMuc3RhdGUpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvbGliL3NoYXJlZC1zdGF0ZS5qcyIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvY29yZS5pcy1pdGVyYWJsZScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9pcy1pdGVyYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMjE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmlzSXRlcmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8gPSBPYmplY3QoaXQpO1xuICByZXR1cm4gT1tJVEVSQVRPUl0gIT09IHVuZGVmaW5lZFxuICAgIHx8ICdAQGl0ZXJhdG9yJyBpbiBPXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgIHx8IEl0ZXJhdG9ycy5oYXNPd25Qcm9wZXJ0eShjbGFzc29mKE8pKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5pcy1pdGVyYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMjE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvcicpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDIxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldCA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvciA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXRlckZuID0gZ2V0KGl0KTtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIHJldHVybiBhbk9iamVjdChpdGVyRm4uY2FsbChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMjE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIFByb3BUeXBlcywgVGhlbWVQcm92aWRlciwgYWRvbmlzIH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBNb2RhbE1hbmFnZXIgZnJvbSAnc2hhcmVkL21hbmFnZXJzL21vZGFsLW1hbmFnZXInXG5pbXBvcnQgTW9kYWxDb250YWluZXJDb21wb25lbnQgZnJvbSAnLi9tb2RhbC1jb250YWluZXItY29tcG9uZW50J1xuaW1wb3J0IEVkaXRvclNjcmVlbkNvbXBvbmVudCBmcm9tICcuL3NjcmVlbnMvZWRpdG9yLXNjcmVlbi1jb21wb25lbnQnXG5pbXBvcnQgTG9hZGluZ1NjcmVlbkNvbXBvbmVudCBmcm9tICcuL3NjcmVlbnMvbG9hZGluZy1zY3JlZW4tY29tcG9uZW50J1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudCdcblxuY29uc3QgU0NSRUVOUyA9IHtcbiAgbG9hZGluZzogTG9hZGluZ1NjcmVlbkNvbXBvbmVudCxcbiAgZWRpdG9yOiBFZGl0b3JTY3JlZW5Db21wb25lbnRcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgICB1aTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIG1lZGlhdG9yOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgb3B0aW9uczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGFwcENvbXBvbmVudDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGdsb2JhbFN0YXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfVxuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdWk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBtZWRpYXRvcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGdsb2JhbFN0YXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgb3B0aW9uczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH1cblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vbkxvYWRpbmdEb25lJyxcbiAgICAgICdfb25QcmVsb2FkZXJEb25lJyxcbiAgICAgICdfb25JbWFnZURvbmUnXG4gICAgKVxuXG4gICAgY29uc3QgeyBvcHRpb25zLCB1aSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgaW1hZ2UgfSA9IG9wdGlvbnMuZWRpdG9yXG5cbiAgICB0aGlzLl9wcmVsb2FkZXJJc0NvbXBsZXRlID0gIW9wdGlvbnMucHJlbG9hZGVyIC8vIElmIFByZWxvYWRlciBpcyBub3QgdXNlZCB0aGVuIHNldCB0byB0cnVlXG4gICAgaWYgKG9wdGlvbnMucHJlbG9hZGVyKSB7XG4gICAgICB0aGlzLl9wcmVsb2FkZXIgPSB1aS5nZXRQcmVsb2FkZXIoKVxuICAgICAgdGhpcy5fcHJlbG9hZGVyLm9uKCdkb25lJywgdGhpcy5fb25QcmVsb2FkZXJEb25lKVxuICAgIH1cblxuICAgIHRoaXMuX2ltYWdlSXNDb21wbGV0ZSA9IGltYWdlLmNvbXBsZXRlXG4gICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMuX29uSW1hZ2VEb25lKVxuXG4gICAgY29uc3QgbmVlZHNMb2FkaW5nID0gIXRoaXMuX3ByZWxvYWRlcklzQ29tcGxldGUgfHwgIXRoaXMuX2ltYWdlSXNDb21wbGV0ZVxuICAgIGNvbnN0IGluaXRpYWxTY3JlZW5Db21wb25lbnQgPSBuZWVkc0xvYWRpbmdcbiAgICAgID8gTG9hZGluZ1NjcmVlbkNvbXBvbmVudFxuICAgICAgOiBFZGl0b3JTY3JlZW5Db21wb25lbnRcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB0aGVtZTogdGhpcy5wcm9wcy51aS5nZXRUaGVtZSgpLFxuICAgICAgc2NyZWVuOiBpbml0aWFsU2NyZWVuQ29tcG9uZW50LFxuICAgICAgc2NyZWVuT3B0aW9uczoge31cbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogSW52b2tlZCBpbW1lZGlhdGVseSBhZnRlciBhIGNvbXBvbmVudCBpcyBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKVxuICAgIGlmICh0aGlzLl9wcmVsb2FkZXIpIHRoaXMuX3ByZWxvYWRlci5sb2FkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGltbWVkaWF0ZWx5IGJlZm9yZSBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYW5kIGRlc3Ryb3llZFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudFdpbGxVbm1vdW50KClcbiAgICBpZiAodGhpcy5fcHJlbG9hZGVyKSB0aGlzLl9wcmVsb2FkZXIub2ZmKCdkb25lJywgdGhpcy5fb25QcmVsb2FkZXJEb25lKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgX29uSW1hZ2VEb25lICgpIHtcbiAgICB0aGlzLl9pbWFnZUlzQ29tcGxldGUgPSB0cnVlXG4gICAgdGhpcy5fb25Mb2FkaW5nRG9uZSgpXG4gIH1cblxuICBfb25QcmVsb2FkZXJEb25lICgpIHtcbiAgICB0aGlzLl9wcmVsb2FkZXJJc0NvbXBsZXRlID0gdHJ1ZVxuICAgIHRoaXMuX29uTG9hZGluZ0RvbmUoKVxuICB9XG5cbiAgX29uTG9hZGluZ0RvbmUgKCkge1xuICAgIGNvbnN0IGFsbExvYWRlZCA9IHRoaXMuX3ByZWxvYWRlcklzQ29tcGxldGUgJiYgdGhpcy5faW1hZ2VJc0NvbXBsZXRlXG4gICAgaWYgKGFsbExvYWRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNjcmVlbjogRWRpdG9yU2NyZWVuQ29tcG9uZW50LFxuICAgICAgICBzY3JlZW5PcHRpb25zOiB7fVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDT05URVhUXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbnRleHQgcGFzc2VkIHRvIGFsbCBjaGlsZHJlblxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBnZXRDaGlsZENvbnRleHQgKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1aTogdGhpcy5wcm9wcy51aSxcbiAgICAgIG9wdGlvbnM6IHRoaXMucHJvcHMub3B0aW9ucyxcbiAgICAgIG1lZGlhdG9yOiB0aGlzLnByb3BzLm1lZGlhdG9yLFxuICAgICAgZ2xvYmFsU3RhdGU6IHRoaXMucHJvcHMuZ2xvYmFsU3RhdGUsXG4gICAgICBhcHBDb21wb25lbnQ6IHRoaXNcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTQ1JFRU5TXG5cbiAgc3dpdGNoVG9TY3JlZW4gKHNjcmVlbk5hbWUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNjcmVlbjogU0NSRUVOU1tzY3JlZW5OYW1lXSxcbiAgICAgIHNjcmVlbk9wdGlvbnM6IHt9XG4gICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBVQkxJQyBBUElcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZWRpdG9yXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5FZGl0b3J9XG4gICAqL1xuICBnZXRFZGl0b3IgKCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50U2NyZWVuLmdldEVkaXRvcigpXG4gIH1cblxuICAvKipcbiAgICogRXhwb3J0cyBhbiBpbWFnZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGRvd25sb2FkID0gZmFsc2VcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGV4cG9ydCAoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50U2NyZWVuLmV4cG9ydCguLi5hcmdzKVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGVkaXRvciBzdGF0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgc2VyaWFsaXplICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRTY3JlZW4uc2VyaWFsaXplKC4uLmFyZ3MpXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBkYXRhXG4gICAqIEBwYXJhbSAge09iamVjdH0gZGF0YVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgZGVzZXJpYWxpemUgKGRhdGEpIHtcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudFNjcmVlbi5kZXNlcmlhbGl6ZShkYXRhKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJvdW5kaW5nIHJlY3RhbmdsZSBmb3IgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7RE9NUmVjdH1cbiAgICovXG4gIGdldEJvdW5kcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGltYWdlIHRvIHRoZSBnaXZlbiBvbmVcbiAgICogQHBhcmFtIHtJbWFnZX0gaW1hZ2VcbiAgICovXG4gIHNldEltYWdlIChpbWFnZSkge1xuICAgIHRoaXMuZ2V0RWRpdG9yKCkuc2V0SW1hZ2UoaW1hZ2UpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgY3VycmVudCBzY3JlZW5cbiAgICogQHJldHVybiB7UmVhY3QuQ29tcG9uZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlckN1cnJlbnRTY3JlZW4gKCkge1xuICAgIGNvbnN0IHsgc2NyZWVuOiBTY3JlZW5Db21wb25lbnQsIHNjcmVlbk9wdGlvbnMgfSA9IHRoaXMuc3RhdGVcbiAgICByZXR1cm4gKDxTY3JlZW5Db21wb25lbnRcbiAgICAgIHsuLi5zY3JlZW5PcHRpb25zfVxuICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fY3VycmVudFNjcmVlbiA9IGVsIH19IC8+KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuQ29tcG9uZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKDxUaGVtZVByb3ZpZGVyIHRoZW1lPXt0aGlzLnN0YXRlLnRoZW1lfT5cbiAgICAgIDxBcHBDb250YWluZXIgY2xhc3NOYW1lPSdwaG90b2VkaXRvcnNkay1lZGl0b3InIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2NvbnRhaW5lciA9IGVsIH19PlxuICAgICAgICA8TW9kYWxDb250YWluZXJDb21wb25lbnRcbiAgICAgICAgICBtb2RhbE1hbmFnZXI9e01vZGFsTWFuYWdlci5pbnN0YW5jZX0gLz5cbiAgICAgICAge3RoaXMuX3JlbmRlckN1cnJlbnRTY3JlZW4oKX1cbiAgICAgIDwvQXBwQ29udGFpbmVyPlxuICAgIDwvVGhlbWVQcm92aWRlcj4pXG4gIH1cbn1cblxuY29uc3QgQXBwQ29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS5iYWNrZ3JvdW5kQ29sb3IsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICAnLXdlYmtpdC10b3VjaC1jYWxsb3V0JzogJ25vbmUnLFxuICAnLXdlYmtpdC11c2VyLXNlbGVjdCc6ICdub25lJyxcbiAgJy1raHRtbC11c2VyLXNlbGVjdCc6ICdub25lJyxcbiAgJy1tb3otdXNlci1zZWxlY3QnOiAnbm9uZScsXG4gICctbXMtdXNlci1zZWxlY3QnOiAnbm9uZScsXG4gICd1c2VyLXNlbGVjdCc6ICdub25lJyxcbiAgJ2ZvbnQtc21vb3RoJzogJ2FudGlhbGlhc2VkJyxcbiAgJy13ZWJraXQtZm9udC1zbW9vdGhpbmcnOiAnYW50aWFsaWFzZWQnLFxuICAnLW1vei1vc3gtZm9udC1zbW9vdGhpbmcnOiAnZ3JheXNjYWxlJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9hcHAtY29tcG9uZW50LmpzeCIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgcmV0dXJuICRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qc1xuLy8gbW9kdWxlIGlkID0gMjIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBCYXNlQ29tcG9uZW50LCBhZG9uaXMgfSBmcm9tICdnbG9iYWxzJ1xuaW1wb3J0IExvYWRpbmdNb2RhbENvbXBvbmVudCBmcm9tICcuL21vZGFscy9sb2FkaW5nLW1vZGFsLWNvbXBvbmVudCdcbmltcG9ydCBXYXJuaW5nTW9kYWxDb21wb25lbnQgZnJvbSAnLi9tb2RhbHMvd2FybmluZy1tb2RhbC1jb21wb25lbnQnXG5pbXBvcnQgRXJyb3JNb2RhbENvbXBvbmVudCBmcm9tICcuL21vZGFscy9lcnJvci1tb2RhbC1jb21wb25lbnQnXG5pbXBvcnQgUHJvZ3Jlc3NNb2RhbENvbXBvbmVudCBmcm9tICcuL21vZGFscy9wcm9ncmVzcy1tb2RhbC1jb21wb25lbnQnXG5pbXBvcnQgSW5wdXRNb2RhbENvbXBvbmVudCBmcm9tICcuL21vZGFscy9pbnB1dC1tb2RhbC1jb21wb25lbnQnXG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tICcuL3RyYW5zaXRpb24nXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsQ29udGFpbmVyQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX21vZGFsTWFuYWdlciA9IHRoaXMucHJvcHMubW9kYWxNYW5hZ2VyXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25Nb2RhbE1hbmFnZXJVcGRhdGUnXG4gICAgKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG92ZXJsYXlWaXNpYmxlOiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoaXMgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnREaWRNb3VudCgpXG4gICAgdGhpcy5fbW9kYWxNYW5hZ2VyLm9uKCd1cGRhdGUnLCB0aGlzLl9vbk1vZGFsTWFuYWdlclVwZGF0ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoaXMgY29tcG9uZW50IGlzIGFib3V0IHRvIGJlIHVubW91bnRlZFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudFdpbGxVbm1vdW50KClcbiAgICB0aGlzLl9tb2RhbE1hbmFnZXIub2ZmKCd1cGRhdGUnLCB0aGlzLl9vbk1vZGFsTWFuYWdlclVwZGF0ZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSBtb2RhbCBtYW5hZ2VyIHVwZGF0ZXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbk1vZGFsTWFuYWdlclVwZGF0ZSAoKSB7XG4gICAgY29uc3QgbW9kYWxzID0gdGhpcy5fbW9kYWxNYW5hZ2VyLmdldE1vZGFscygpXG4gICAgbGV0IG92ZXJsYXlWaXNpYmxlID0gbW9kYWxzXG4gICAgICAuZmlsdGVyKChtb2RhbCkgPT4gbW9kYWwudmlzaWJsZSlcbiAgICAgIC5maWx0ZXIoKG1vZGFsKSA9PiAhIW1vZGFsLm92ZXJsYXkpLmxlbmd0aCA+IDBcbiAgICB0aGlzLnN0YXRlLm92ZXJsYXlWaXNpYmxlID0gb3ZlcmxheVZpc2libGVcbiAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIGEgbW9kYWwgaXMgY2xvc2VkLiBSZW1vdmVzIGl0IGZyb20gdGhlIG1hbmFnZXIuXG4gICAqIEBwYXJhbSAge01vZGFsfSBtb2RhbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uTW9kYWxDbG9zZWQgKG1vZGFsKSB7XG4gICAgdGhpcy5fbW9kYWxNYW5hZ2VyLnJlbW92ZU1vZGFsKG1vZGFsKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIG1vZGFsc1xuICAgKiBAcmV0dXJuIHtBcnJheS48UmVhY3QuQ29tcG9uZW50Pn1cbiAgICovXG4gIF9yZW5kZXJNb2RhbHMgKCkge1xuICAgIGNvbnN0IG1vZGFscyA9IHRoaXMuX21vZGFsTWFuYWdlci5nZXRNb2RhbHMoKVxuICAgIHJldHVybiBtb2RhbHMubWFwKChtb2RhbCkgPT4ge1xuICAgICAgbGV0IE1vZGFsQ29tcG9uZW50XG5cbiAgICAgIHN3aXRjaCAobW9kYWwudHlwZSkge1xuICAgICAgICBjYXNlICdsb2FkaW5nJzpcbiAgICAgICAgICBNb2RhbENvbXBvbmVudCA9IExvYWRpbmdNb2RhbENvbXBvbmVudFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3dhcm5pbmcnOlxuICAgICAgICAgIE1vZGFsQ29tcG9uZW50ID0gV2FybmluZ01vZGFsQ29tcG9uZW50XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgIE1vZGFsQ29tcG9uZW50ID0gRXJyb3JNb2RhbENvbXBvbmVudFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgICBNb2RhbENvbXBvbmVudCA9IElucHV0TW9kYWxDb21wb25lbnRcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ3Byb2dyZXNzJzpcbiAgICAgICAgICBNb2RhbENvbXBvbmVudCA9IFByb2dyZXNzTW9kYWxDb21wb25lbnRcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKDxNb2RhbENvbXBvbmVudFxuICAgICAgICBtb2RhbD17bW9kYWx9XG4gICAgICAgIGtleT17bW9kYWwuaWR9XG4gICAgICAgIG9uQ2xvc2U9e3RoaXMuX29uTW9kYWxDbG9zZWQuYmluZCh0aGlzLCBtb2RhbCl9IC8+KVxuICAgIH0pXG4gIH1cblxuICBfb25PdmVybGF5Q2xpY2sgPSAoKSA9PiB7XG4gICAgY29uc3QgbW9kYWxzID0gdGhpcy5fbW9kYWxNYW5hZ2VyLmdldE1vZGFscygpXG4gICAgbW9kYWxzLmZvckVhY2gobW9kYWwgPT4ge1xuICAgICAgaWYgKG1vZGFsLmNsb3NlT25PdmVybGF5Q2xpY2spIHtcbiAgICAgICAgbW9kYWwuY2xvc2UoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKDxDb250YWluZXI+XG4gICAgICA8VHJhbnNpdGlvblxuICAgICAgICBhY3RpdmU9e3RoaXMuc3RhdGUub3ZlcmxheVZpc2libGV9XG4gICAgICAgIGVudGVyUHJvcD0ncmVuZGVyZWQnXG4gICAgICAgIGVudGVyRHVyYXRpb249e3RoaXMuY29udGV4dC50aGVtZS50cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfVxuICAgICAgICBhcHBlYXJQcm9wPSd2aXNpYmxlJ1xuICAgICAgICBhcHBlYXJEdXJhdGlvbj17dGhpcy5jb250ZXh0LnRoZW1lLnRyYW5zaXRpb25EdXJhdGlvbiAqIDEwMDB9XG4gICAgICAgIGxlYXZlRHVyYXRpb249e3RoaXMuY29udGV4dC50aGVtZS50cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfT5cbiAgICAgICAgPE92ZXJsYXkgb25DbGljaz17dGhpcy5fb25PdmVybGF5Q2xpY2t9IC8+XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgICA8ZGl2Pnt0aGlzLl9yZW5kZXJNb2RhbHMoKX08L2Rpdj5cbiAgICA8L0NvbnRhaW5lcj4pXG4gIH1cbn1cblxuY29uc3QgT3ZlcmxheSA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgYmFja2dyb3VuZDogdGhlbWUgPT4gYHJnYmEoJHt0aGVtZS5jb250cm9sc0JhY2tncm91bmRDb2xvclJHQn0sIC43KWAsXG4gIHpJbmRleDogdGhlbWUgPT4gdGhlbWUuekluZGV4KCdvdmVybGF5cycpLFxuICBvcGFjaXR5OiAwLFxuICBkaXNwbGF5OiAnbm9uZScsXG4gIHRyYW5zaXRpb246IHRoZW1lID0+IGBvcGFjaXR5ICR7dGhlbWUudHJhbnNpdGlvbkR1cmF0aW9ufXMgZWFzZS1vdXRgXG59LCB7XG4gIHZpc2libGU6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH0sXG4gIHJlbmRlcmVkOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJ1xuICB9XG59KVxuXG5jb25zdCBDb250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJSdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvbW9kYWwtY29udGFpbmVyLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tICdnbG9iYWxzJ1xuaW1wb3J0IE1vZGFsQ29tcG9uZW50IGZyb20gJy4vbW9kYWwtY29tcG9uZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2FkaW5nTW9kYWxDb21wb25lbnQgZXh0ZW5kcyBNb2RhbENvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL21vZGFscy9sb2FkaW5nLW1vZGFsLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tICdnbG9iYWxzJ1xuaW1wb3J0IE1vZGFsQ29tcG9uZW50IGZyb20gJy4vbW9kYWwtY29tcG9uZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYXJuaW5nTW9kYWxDb21wb25lbnQgZXh0ZW5kcyBNb2RhbENvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2J1dHRvbnMgPSB0aGlzLnByb3BzLm1vZGFsLmRhdGEuYnV0dG9ucyB8fCBbJ09LJ11cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBhIGJ1dHRvblxuICAgKiBAcGFyYW0ge051bWJlcn0gYnV0dG9uSW5kZXhcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkJ1dHRvbkNsaWNrIChidXR0b25JbmRleCkge1xuICAgIHRoaXMucHJvcHMubW9kYWwuZW1pdCgnYnV0dG9uJywgYnV0dG9uSW5kZXgpXG4gICAgdGhpcy5wcm9wcy5tb2RhbC5jbG9zZSgpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9tb2RhbHMvd2FybmluZy1tb2RhbC1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBCYXNlQ29tcG9uZW50IH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBNb2RhbENvbXBvbmVudCBmcm9tICcuL21vZGFsLWNvbXBvbmVudCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXJyb3JNb2RhbENvbXBvbmVudCBleHRlbmRzIE1vZGFsQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYnV0dG9ucyA9IFsnT2theSddXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgYSBidXR0b25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJ1dHRvbkluZGV4XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CdXR0b25DbGljayAoYnV0dG9uSW5kZXgpIHtcbiAgICBpZiAoYnV0dG9uSW5kZXggPT09IDApIHtcbiAgICAgIHRoaXMucHJvcHMubW9kYWwuY2xvc2UoKVxuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL21vZGFscy9lcnJvci1tb2RhbC1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBCYXNlQ29tcG9uZW50LCBQcm9wVHlwZXMsIGFkb25pcyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgTW9kYWxDb21wb25lbnQsIHsgVG9wLCBJY29uQ29udGFpbmVyLCBJY29uLCBUZXh0Q29udGFpbmVyLCBUaXRsZSwgVGV4dCB9IGZyb20gJy4vbW9kYWwtY29tcG9uZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9ncmVzc01vZGFsQ29tcG9uZW50IGV4dGVuZHMgTW9kYWxDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0geyBtb2RhbDogUHJvcFR5cGVzLm9iamVjdCB9XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIF9nZXRQcm9ncmVzc0JhclN0eWxlIChwcm9ncmVzcykge1xuICAgIGNvbnN0IGJvdHRvbVJpZ2h0Qm9yZGVyUmFkaXVzID0gcHJvZ3Jlc3MgPT09IDEuMCA/IDIgOiAwXG4gICAgcmV0dXJuIHtcbiAgICAgIHJpZ2h0OiBgJHsoMSAtIHByb2dyZXNzKSAqIDEwMH0lYCxcbiAgICAgIGJvcmRlclJhZGl1czogYDAgMCAke2JvdHRvbVJpZ2h0Qm9yZGVyUmFkaXVzfXB4IDJweGBcbiAgICB9XG4gIH1cblxuICBfcmVuZGVyQ29udGVudCAoKSB7XG4gICAgY29uc3QgeyBtb2RhbCB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb3A+XG4gICAgICAgIDxJY29uQ29udGFpbmVyPlxuICAgICAgICAgIDxJY29uIHNyYz17dGhpcy5fZ2V0QXNzZXRQYXRoKCdzaGFyZWQvbW9kYWxzL2ljb24ucG5nJywgdHJ1ZSl9IC8+XG4gICAgICAgIDwvSWNvbkNvbnRhaW5lcj5cbiAgICAgICAgPFRleHRDb250YWluZXI+XG4gICAgICAgICAgPFRpdGxlPnttb2RhbC50aXRsZX08L1RpdGxlPlxuICAgICAgICAgIDxUZXh0Pnttb2RhbC50ZXh0fTwvVGV4dD5cbiAgICAgICAgPC9UZXh0Q29udGFpbmVyPlxuICAgICAgICA8UHJvZ3Jlc3NCYXIgc3R5bGU9e3RoaXMuX2dldFByb2dyZXNzQmFyU3R5bGUobW9kYWwuZGF0YS5wcm9ncmVzcyl9IC8+XG4gICAgICA8L1RvcD5cbiAgICApXG4gIH1cbn1cblxuY29uc3QgUHJvZ3Jlc3NCYXIgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgekluZGV4OiAnMScsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBsZWZ0OiAnMCcsXG4gIGJvdHRvbTogJzAnLFxuICBoZWlnaHQ6ICcycHgnLFxuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiBgJHt0aGVtZS5oaWdobGlnaHRDb2xvcn1gLFxuICBib3JkZXI6ICdub25lJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9tb2RhbHMvcHJvZ3Jlc3MtbW9kYWwtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgQmFzZUNvbXBvbmVudCwgUmVhY3QsIGFkb25pcyB9IGZyb20gJy4uLy4uL2dsb2JhbHMnXG5pbXBvcnQgTW9kYWxDb21wb25lbnQgZnJvbSAnLi9tb2RhbC1jb21wb25lbnQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0TW9kYWxDb21wb25lbnQgZXh0ZW5kcyBNb2RhbENvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2J1dHRvbnMgPSB0aGlzLnByb3BzLm1vZGFsLmRhdGEuYnV0dG9ucyB8fCBbJ09LJ11cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgIGNvdW50OiAwLFxuICAgICAgbGFyZ2U6IHRydWVcbiAgICB9XG4gIH1cblxuICBfb25LZXlQcmVzcyA9IGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICB0aGlzLl9vbkFjY2VwdCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gKHsgY291bnQ6IHN0YXRlLmNvdW50ICsgMSB9KSlcbiAgICB9XG4gIH1cblxuICBfb25BY2NlcHQgPSAoKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5tb2RhbC5lbWl0KCdpbnB1dCcsIHRoaXMuX3RleHRBcmVhLnZhbHVlKVxuICAgIHRoaXMucHJvcHMubW9kYWwuY2xvc2UoKVxuICB9XG5cbiAgX29uQ2FuY2VsID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgbW9kYWwgfSA9IHRoaXMucHJvcHNcblxuICAgIG1vZGFsLmVtaXQoJ2lucHV0JywgbW9kYWwuZGF0YS50ZXh0IHx8ICcnKVxuICAgIG1vZGFsLmNsb3NlKClcbiAgfVxuXG4gIF9vbkNsaWNrT3ZlcmxheSA9ICgpID0+IHtcbiAgICB0aGlzLl9vbkNhbmNlbCgpXG4gIH1cblxuICBfcmVuZGVyQ29udGVudCAoKSB7XG4gICAgY29uc3QgeyBtb2RhbCB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuICg8Q29udGFpbmVyPlxuICAgICAgPElucHV0Q29udGFpbmVyPlxuICAgICAgICA8VGl0bGU+e21vZGFsLnRpdGxlfTwvVGl0bGU+XG4gICAgICAgIDxUZXh0QXJlYVxuICAgICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICAgIGlubmVyUmVmPXtjID0+IHsgdGhpcy5fdGV4dEFyZWEgPSBjIH19XG4gICAgICAgICAgZGVmYXVsdFZhbHVlPXttb2RhbC5kYXRhLnRleHQgfHwgJyd9XG4gICAgICAgICAgb25LZXlQcmVzcz17dGhpcy5fb25LZXlQcmVzc30gLz5cbiAgICAgIDwvSW5wdXRDb250YWluZXI+XG4gICAgICA8QnV0dG9uQmFyPlxuICAgICAgICA8SW1hZ2Ugb25DbGljaz17dGhpcy5fb25BY2NlcHR9IHJpZ2h0IHNyYz17dGhpcy5fZ2V0QXNzZXRQYXRoKCdzaGFyZWQvbW9kYWxzL2lucHV0LWFjY2VwdC5wbmcnLCB0cnVlKX0gLz5cbiAgICAgICAgPEltYWdlIG9uQ2xpY2s9e3RoaXMuX29uQ2FuY2VsfSBzcmM9e3RoaXMuX2dldEFzc2V0UGF0aCgnc2hhcmVkL21vZGFscy9pbnB1dC1jYW5jZWwucG5nJywgdHJ1ZSl9IC8+XG4gICAgICA8L0J1dHRvbkJhcj5cbiAgICA8L0NvbnRhaW5lcj4pXG4gIH1cbn1cblxuY29uc3QgQnV0dG9uQmFyID0gYWRvbmlzLmRpdih7XG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUgPT4gdGhlbWUuaW5wdXRNb2RhbEJ1dHRvbkJhckNvbG9yLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICc0MHB4JyxcbiAgcGFkZGluZzogJzAgMTJweCcsXG4gIG1hcmdpblRvcDogJzE4cHgnXG59KVxuXG5jb25zdCBJbnB1dENvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICB3aWR0aDogJzEwMCUnLFxuICBwYWRkaW5nTGVmdDogJzI0cHgnLFxuICBwYWRkaW5nUmlnaHQ6ICcyNHB4J1xufSlcblxuY29uc3QgSW1hZ2UgPSBhZG9uaXMuaW1nKHtcbiAgd2lkdGg6ICcxOHB4JyxcbiAgaGVpZ2h0OiAnMThweCcsXG4gIG1hcmdpblRvcDogJzExcHgnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgb3BhY2l0eTogMC43LFxuICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgYWxsICR7dGhlbWUudHJhbnNpdGlvbkR1cmF0aW9ufXMgZWFzZS1vdXRgLFxuICAnJjpob3Zlcic6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zaXRpb246IHRoZW1lID0+IGBhbGwgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259cyBlYXNlLWluYFxuICB9XG59LCB7XG4gIHJpZ2h0OiB7XG4gICAgZmxvYXQ6ICdyaWdodCdcbiAgfVxufSlcblxuY29uc3QgVGl0bGUgPSBhZG9uaXMuZGl2KHtcbiAgZm9udEZhbWlseTogdGhlbWUgPT4gdGhlbWUucmVndWxhckZvbnRGYW1pbHksXG4gIGNvbG9yOiB0aGVtZSA9PiB0aGVtZS5kaW1tZWRUZXh0Q29sb3IsXG4gIGxldHRlclNwYWNpbmc6IDEuMixcbiAgZm9udFNpemU6ICcxM3B4JyxcbiAgbWFyZ2luQm90dG9tOiAnMTRweCdcbn0pXG5cbmNvbnN0IFRleHRBcmVhID0gYWRvbmlzLnRleHRhcmVhKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnODBweCcsXG4gIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlcjogMCxcbiAgYm9yZGVyQm90dG9tOiAnMXB4IHNvbGlkIGdyZXknLFxuICByZXNpemU6ICdub25lJyxcbiAgb3V0bGluZTogJ25vbmUnLFxuICBmb250RmFtaWx5OiB0aGVtZSA9PiB0aGVtZS5yZWd1bGFyRm9udEZhbWlseSxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLnRleHRDb2xvcixcbiAgZm9udFNpemU6ICcxNHB4JyxcbiAgb3BhY2l0eTogMC43NVxufSlcblxuY29uc3QgTGV0dGVyQ291bnQgPSBhZG9uaXMuc3Bhbih7XG4gIGRpc3BsYXk6ICdibG9jaycsXG4gIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgZm9udEZhbWlseTogdGhlbWUgPT4gdGhlbWUucmVndWxhckZvbnRGYW1pbHksXG4gIGNvbG9yOiB0aGVtZSA9PiB0aGVtZS50ZXh0Q29sb3IsXG4gIGZvbnRTaXplOiAnMTNweCcsXG4gIGxpbmVIZWlnaHQ6ICcxMnB4JyxcbiAgbWFyZ2luVG9wOiAnMTRweCcsXG4gIG9wYWNpdHk6IDAuNDVcbn0pXG5cbmNvbnN0IENvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICBwYWRkaW5nVG9wOiAnMTZweCdcbiAgLy8gcGFkZGluZzogJzE2cHggMjRweCAxN3B4IDIzcHgnXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL21vZGFscy9pbnB1dC1tb2RhbC1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQge1xuICBSZWFjdCwgUHJvcFR5cGVzLCBhZG9uaXMsIENvbnN0YW50cywgVmVjdG9yMiwgTG9nLCB3aXRoVGhlbWUsIFNoYXJlZFN0YXRlLCBCYXNlQ29tcG9uZW50LCBTREtVdGlscywgVXRpbHNcbn0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBFZGl0b3IgZnJvbSAnLi4vLi4vbGliL2VkaXRvcidcbmltcG9ydCBOYXZpZ2F0aW9uQ29tcG9uZW50IGZyb20gJy4vZWRpdG9yL25hdmlnYXRpb24vbmF2aWdhdGlvbi1jb21wb25lbnQnXG5pbXBvcnQgQ2FudmFzQ29tcG9uZW50IGZyb20gJy4vZWRpdG9yL2NhbnZhcy1jb21wb25lbnQnXG5pbXBvcnQgTW9kYWxNYW5hZ2VyIGZyb20gJ3NoYXJlZC9tYW5hZ2Vycy9tb2RhbC1tYW5hZ2VyJ1xuaW1wb3J0IFRyYW5zZm9ybVJhdGlvTWFuYWdlciBmcm9tICdzaGFyZWQvbWFuYWdlcnMvdHJhbnNmb3JtLXJhdGlvLW1hbmFnZXInXG5cbmltcG9ydCBEZWZhdWx0Q29udHJvbHNDb21wb25lbnQgZnJvbSAnLi9lZGl0b3IvY29udHJvbHMvY29udHJvbHMtY29tcG9uZW50J1xuaW1wb3J0IERlZmF1bHRDYW52YXNDb250cm9sc0NvbXBvbmVudCBmcm9tICcuL2VkaXRvci9jb250cm9scy9jYW52YXMtY29udHJvbHMtY29tcG9uZW50J1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuY2xhc3MgRWRpdG9yU2NyZWVuQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuICBzdGF0aWMgY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICAgdWk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBlZGl0b3I6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBtZWRpYXRvcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIG9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzaGFyZWRTdGF0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHNjcmVlbjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGFwcENvbXBvbmVudDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGdsb2JhbFN0YXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfVxuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uUmVuZGVyRXJyb3InLFxuICAgICAgJ19vbkltYWdlUmVzaXplJyxcbiAgICAgICdfc3RhcnRFZGl0b3InLFxuICAgICAgJ19vbkVkaXRvclJlc2V0J1xuICAgIClcblxuICAgIGNvbnN0IHsgdWksIG9wdGlvbnMsIG1lZGlhdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICB0aGlzLl9lZGl0b3IgPSBuZXcgRWRpdG9yKHVpLCBvcHRpb25zLCBtZWRpYXRvcilcbiAgICB0aGlzLl9lZGl0b3Iub24oJ3JlYWR5JywgdGhpcy5fc3RhcnRFZGl0b3IpXG4gICAgdGhpcy5fZWRpdG9yLm9uKCdyZW5kZXItZXJyb3InLCB0aGlzLl9vblJlbmRlckVycm9yKVxuICAgIHRoaXMuX2VkaXRvci5vbigncmVzaXplJywgdGhpcy5fb25JbWFnZVJlc2l6ZSlcbiAgICB0aGlzLl9lZGl0b3Iub24oJ3Jlc2V0JywgdGhpcy5fb25FZGl0b3JSZXNldClcbiAgICB0aGlzLl9vbldpbmRvd1Jlc2l6ZSA9IFV0aWxzLmRlYm91bmNlKHRoaXMuX29uV2luZG93UmVzaXplLmJpbmQodGhpcyksIDI1MClcblxuICAgIHRoaXMuX29yaWdpbmFsVG9vbHNPcHRpb24gPSBudWxsXG5cbiAgICB0aGlzLl9uZWVkc0ZvcmNlQ3JvcCA9IGZhbHNlXG5cbiAgICB0aGlzLl9pc1JlYWR5ID0gZmFsc2VcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzaGFyZWRTdGF0ZTogbmV3IFNoYXJlZFN0YXRlKCksXG4gICAgICBjb250cm9sczogbnVsbCxcbiAgICAgIGNvbnRyb2xzT3B0aW9uczoge30sXG4gICAgICBjdXJyZW50Q29udHJvbDogbnVsbFxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoaXMgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnREaWRNb3VudCgpXG5cbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXMuY29udGV4dFxuICAgIGlmIChvcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9vbldpbmRvd1Jlc2l6ZSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZWRpdG9yLmlzUmVhZHkoKSkge1xuICAgICAgIXRoaXMuX2hhc1N3aXRjaGVkQ29udHJvbHMgJiYgdGhpcy5zd2l0Y2hUb0luaXRpYWxDb250cm9scygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2VkaXRvci5vbmNlKCdyZWFkeScsICgpID0+IHtcbiAgICAgICAgIXRoaXMuX2hhc1N3aXRjaGVkQ29udHJvbHMgJiYgdGhpcy5zd2l0Y2hUb0luaXRpYWxDb250cm9scygpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkXG4gICAqL1xuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50V2lsbFVubW91bnQoKVxuXG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzLmNvbnRleHRcbiAgICBpZiAob3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fb25XaW5kb3dSZXNpemUpXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgZWRpdG9yIGhhcyByZXNldC4gUmVzZXRzIHRoZSBVSSBhcyB3ZWxsLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uRWRpdG9yUmVzZXQgKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmN1cnJlbnRDb250cm9sICE9PSAnbGlicmFyeScpIHtcbiAgICAgIHRoaXMuc3dpdGNoVG9Jbml0aWFsQ29udHJvbHMoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSBlZGl0b3Igc3RhcnRzIHJlc2l6aW5nIGFuIGltYWdlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25JbWFnZVJlc2l6ZSAoKSB7XG4gICAgY29uc3QgbG9hZGluZ01vZGFsID0gTW9kYWxNYW5hZ2VyLmluc3RhbmNlLmRpc3BsYXlMb2FkaW5nKHRoaXMuX3QoJ3Blc2RrLmVkaXRvci50ZXh0LnJlc2l6aW5nJykpXG4gICAgdGhpcy5fZWRpdG9yLm9uY2UoJ3Jlc2l6ZWQnLCAoeyBkaW1lbnNpb25zLCByZWFzb24gfSkgPT4ge1xuICAgICAgbG9hZGluZ01vZGFsLmNsb3NlKClcblxuICAgICAgaWYgKHRoaXMuY29udGV4dC5vcHRpb25zLmVkaXRvci5kaXNwbGF5UmVzaXplTWVzc2FnZSkge1xuICAgICAgICBNb2RhbE1hbmFnZXIuaW5zdGFuY2UuZGlzcGxheVdhcm5pbmcoXG4gICAgICAgICAgdGhpcy5fdChgcGVzZGsuZWRpdG9yLnRpdGxlLmltYWdlUmVzaXplZFdhcm5pbmdfJHtyZWFzb259YCksXG4gICAgICAgICAgdGhpcy5fdChgcGVzZGsuZWRpdG9yLnRleHQuaW1hZ2VSZXNpemVkV2FybmluZ18ke3JlYXNvbn1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtYXhNZWdhUGl4ZWxzOiB0aGlzLl9lZGl0b3IuZ2V0TWF4TWVnYXBpeGVscygpLFxuICAgICAgICAgICAgICB3aWR0aDogZGltZW5zaW9ucy54LFxuICAgICAgICAgICAgICBoZWlnaHQ6IGRpbWVuc2lvbnMueVxuICAgICAgICAgICAgfVxuICAgICAgICAgICkpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gYW4gZXhjZXB0aW9uIHdhcyB0aHJvd24gb2NjdXJyZWQgd2hpbGUgcmVuZGVyaW5nXG4gICAqIEBwYXJhbSAge0Vycm9yfSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25SZW5kZXJFcnJvciAoZSkge1xuICAgIE1vZGFsTWFuYWdlci5pbnN0YW5jZS5kaXNwbGF5RXJyb3IoXG4gICAgICB0aGlzLl90KCdwZXNkay5jb21tb24udGl0bGUuZXJyb3InKSxcbiAgICAgIHRoaXMuX3QoJ3Blc2RrLmVkaXRvci50ZXh0LnJlbmRlcmluZ0Vycm9yJyksXG4gICAgICB0cnVlXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHdpbmRvdyBoYXMgYmVlbiByZXNpemVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25XaW5kb3dSZXNpemUgKCkge1xuICAgIHRoaXMuX2VtaXRFdmVudChDb25zdGFudHMuRVZFTlRTLldJTkRPV19SRVNJWkUpXG5cbiAgICBjb25zdCBkaW1lbnNpb25zID0gbmV3IFZlY3RvcjIoXG4gICAgICB0aGlzLl9jb250YWluZXIub2Zmc2V0V2lkdGgsXG4gICAgICB0aGlzLl9jb250YWluZXIub2Zmc2V0SGVpZ2h0XG4gICAgKVxuICAgIHRoaXMuX2VtaXRFdmVudChDb25zdGFudHMuRVZFTlRTLkVESVRPUl9SRVNJWkUsIGRpbWVuc2lvbnMpXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHRvIGVudGVyIHRoZSBpbml0YWwgZWRpdG9yIGNvbnRyb2xzIHRvb2wsIGRlcGVuZGluZyBvbiB0aGUgY3VycmVudFxuICAgKiBvcHRpb25zIGFuZCBpbnB1dCBpbWFnZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIHN3aXRjaFRvSW5pdGlhbENvbnRyb2xzIChjYWxsYmFjaykge1xuICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcy5jb250ZXh0XG5cbiAgICBsZXQgbmVlZHNSYXRpb0ZvcmNlQ3JvcCA9IGZhbHNlXG5cbiAgICAvLyBDaGVja3MgaWYgd2Ugc2hvdWxkIGVudGVyIGZvcmNlZCBjcm9wIG1vZGVcbiAgICBpZiAob3B0aW9ucy5lZGl0b3IuZm9yY2VDcm9wICYmIHRoaXMuX2VkaXRvci5jb250cm9scy5pc0VuYWJsZWQoJ3RyYW5zZm9ybScpICYmICF0aGlzLl9oYXNTd2l0Y2hlZENvbnRyb2xzKSB7XG4gICAgICBjb25zdCBpbWFnZURpbWVuc2lvbnMgPSB0aGlzLl9lZGl0b3IuZ2V0SW5wdXREaW1lbnNpb25zKClcbiAgICAgIGNvbnN0IHRyYW5zZm9ybVJhdGlvTWFuYWdlciA9IG5ldyBUcmFuc2Zvcm1SYXRpb01hbmFnZXIob3B0aW9ucy5lZGl0b3IuY29udHJvbHNPcHRpb25zLnRyYW5zZm9ybSB8fCB7fSlcbiAgICAgIGxldCByYXRpbyA9IGltYWdlRGltZW5zaW9ucy54IC8gaW1hZ2VEaW1lbnNpb25zLnlcblxuICAgICAgbmVlZHNSYXRpb0ZvcmNlQ3JvcCA9ICF0cmFuc2Zvcm1SYXRpb01hbmFnZXIuaGFzUmF0aW9WYWx1ZShyYXRpbylcbiAgICB9XG5cbiAgICBpZiAobmVlZHNSYXRpb0ZvcmNlQ3JvcCkge1xuICAgICAgdGhpcy5fbmVlZHNGb3JjZUNyb3AgPSB0cnVlXG4gICAgICB0aGlzLnN3aXRjaFRvRm9yY2VDcm9wQ29udHJvbHMoY2FsbGJhY2spXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX25lZWRzRm9yY2VDcm9wID0gZmFsc2VcbiAgICAgIHRoaXMuc3dpdGNoVG9EZWZhdWx0Q29udHJvbHMoY2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgc3dpdGNoVG9EZWZhdWx0Q29udHJvbHMgKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzLmNvbnRleHRcblxuICAgIGxldCBjb250cm9sTmFtZSA9IG9wdGlvbnMuZWRpdG9yLmRlZmF1bHRDb250cm9sXG5cbiAgICBpZiAodGhpcy5fb3JpZ2luYWxUb29sc09wdGlvbikge1xuICAgICAgb3B0aW9ucy5lZGl0b3IudG9vbHMgPSB0aGlzLl9vcmlnaW5hbFRvb2xzT3B0aW9uXG4gICAgICB0aGlzLl9vcmlnaW5hbFRvb2xzT3B0aW9uID0gbnVsbFxuICAgIH1cblxuICAgIGlmICghdGhpcy5fZWRpdG9yLmNvbnRyb2xzLmlzRW5hYmxlZChjb250cm9sTmFtZSkpIHtcbiAgICAgIExvZy53YXJuKGBUcnlpbmcgdG8gc3dpdGNoIHRvIGRlZmF1bHQgY29udHJvbCBcXGAke2NvbnRyb2xOYW1lfVxcYCB3aGljaCBpcyBub3QgYXZhaWxhYmxlLiBGYWxsaW5nIGJhY2sgdG8gZmlyc3QgYXZhaWxhYmxlIGNvbnRyb2wuYClcbiAgICAgIGNvbnRyb2xOYW1lID0gdGhpcy5fZWRpdG9yLmNvbnRyb2xzLmdldEZpcnN0RW5hYmxlZENvbnRyb2xOYW1lKClcbiAgICB9XG4gICAgdGhpcy5zd2l0Y2hUb0NvbnRyb2xzKGNvbnRyb2xOYW1lLCBudWxsLCBudWxsLCBjYWxsYmFjaylcbiAgfVxuXG4gIHN3aXRjaFRvRm9yY2VDcm9wQ29udHJvbHMgKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzLmNvbnRleHRcblxuICAgIGNvbnN0IG9sZFRvb2xzID0gb3B0aW9ucy5lZGl0b3IudG9vbHNcblxuICAgIC8vIFNhdmUgb3JpZ2luYWwgYXZhaWxhYmxlIHRvb2xzXG4gICAgaWYgKCF0aGlzLl9vcmlnaW5hbFRvb2xzT3B0aW9uKSB7XG4gICAgICB0aGlzLl9vcmlnaW5hbFRvb2xzT3B0aW9uID0gb2xkVG9vbHNcblxuICAgICAgLy8gUmVtb3ZlIGFsbCBidXQgdHJhbnNmb3JtIGFuZCBsaWJyYXJ5XG4gICAgICBvcHRpb25zLmVkaXRvci50b29scyA9IFNES1V0aWxzLkFycmF5LnJlbW92ZShvbGRUb29scywgZSA9PiBlICE9PSAndHJhbnNmb3JtJyAmJiBlICE9PSAnbGlicmFyeScpXG4gICAgfVxuXG4gICAgLy8gU3dpdGNoIHRvIHRyYW5zZm9ybSBjb250cm9sc1xuICAgIHRoaXMuc3dpdGNoVG9Db250cm9scygndHJhbnNmb3JtJywgeyBmb3JjZUNyb3A6IHRydWUgfSwgbnVsbCwgY2FsbGJhY2spXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgZWRpdG9yIHNob3VsZCBzd2l0Y2ggdG8gYSBuZXcgY29udHJvbFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGNvbnRyb2xOYW1lXG4gICAqIEBwYXJhbSAge09iamVjdH0gaW5pdGlhbFN0YXRlID0ge31cbiAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3dpdGNoVG9Db250cm9scyAoY29udHJvbE5hbWUsIGluaXRpYWxTdGF0ZSA9IHt9LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGlmICh0aGlzLnN0YXRlLmN1cnJlbnRDb250cm9sID09PSBjb250cm9sTmFtZSkgcmV0dXJuIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcblxuICAgIC8vIGlmICghdGhpcy5faGFzU3dpdGNoZWRDb250cm9scyAmJiBjb250cm9sTmFtZSAhPT0gJ2xpYnJhcnknICYmIGNvbnRyb2xOYW1lICE9PSAndHJhbnNmb3JtJyAmJiBjb250cm9sTmFtZSAhPT0gJ2RlZmF1bHQnKSB7XG4gICAgdGhpcy5faGFzU3dpdGNoZWRDb250cm9scyA9IHRydWVcbiAgICAvLyB9XG5cbiAgICBjb25zdCB7IHNoYXJlZFN0YXRlIH0gPSB0aGlzLnN0YXRlXG5cbiAgICBpZiAoY29udHJvbE5hbWUgPT09ICdkZWZhdWx0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuc3dpdGNoVG9EZWZhdWx0Q29udHJvbHMoY2FsbGJhY2spXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9lZGl0b3IuY29udHJvbHMuaXNFbmFibGVkKGNvbnRyb2xOYW1lKSkge1xuICAgICAgcmV0dXJuIExvZy53YXJuKGBUcmllZCB0byBvcGVuIGNvbnRyb2wgXFxgJHtjb250cm9sTmFtZX1cXGAgd2hpY2ggaXMgbm90IGF2YWlsYWJsZS5gKVxuICAgIH1cblxuICAgIGNvbnN0IGNvbnRyb2xzID0gdGhpcy5fZWRpdG9yLmNvbnRyb2xzLmdldEF2YWlsYWJsZSgpXG4gICAgY29uc3QgQ29udHJvbHNDbGFzcyA9IGNvbnRyb2xzW2NvbnRyb2xOYW1lXVxuICAgIGlmICghQ29udHJvbHNDbGFzcyAmJiBjb250cm9sTmFtZSAhPT0gJ292ZXJ2aWV3Jykge1xuICAgICAgcmV0dXJuIExvZy5lcnJvcihgQ29udHJvbCBcXGAke2NvbnRyb2xOYW1lfVxcYCBkb2VzIG5vdCBleGlzdCFgKVxuICAgIH1cblxuICAgIGxldCBsZWF2ZVByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodHJ1ZSlcbiAgICBpZiAodGhpcy5zdGF0ZS5jb250cm9scykge1xuICAgICAgbGVhdmVQcm9taXNlID0gdGhpcy5zdGF0ZS5jb250cm9scy5vbkxlYXZlKClcbiAgICB9XG5cbiAgICBsZWF2ZVByb21pc2UudGhlbihsZWF2YWJsZSA9PiB7XG4gICAgICBpZiAoIWxlYXZhYmxlKSByZXR1cm5cblxuICAgICAgc2hhcmVkU3RhdGUuZGlzYWJsZUJyb2FkY2FzdCgpXG5cbiAgICAgIGlmICghdGhpcy5faXNSZWFkeSkge1xuICAgICAgICB0aGlzLl9pc1JlYWR5ID0gdHJ1ZVxuICAgICAgICB0aGlzLmNvbnRleHQubWVkaWF0b3IuZW1pdChDb25zdGFudHMuRVZFTlRTLkVESVRPUl9SRUFEWSlcbiAgICAgIH1cblxuICAgICAgc2hhcmVkU3RhdGUuZGlzYWJsZUJyb2FkY2FzdCgpXG4gICAgICBzaGFyZWRTdGF0ZS5jbGVhcigpXG4gICAgICBzaGFyZWRTdGF0ZS5zZXQoaW5pdGlhbFN0YXRlKVxuXG4gICAgICBjb25zdCBjb250cm9sc09wdGlvbnMgPSBTREtVdGlscy5kZWZhdWx0cyhcbiAgICAgICAgb3B0aW9ucyB8fCB0aGlzLmNvbnRleHQub3B0aW9ucy5lZGl0b3IuY29udHJvbHNPcHRpb25zW0NvbnRyb2xzQ2xhc3MuaWRlbnRpZmllcl0sXG4gICAgICAgIENvbnRyb2xzQ2xhc3MuZGVmYXVsdE9wdGlvbnNcbiAgICAgIClcbiAgICAgIGNvbnN0IGNvbnRyb2xzID0gbmV3IENvbnRyb2xzQ2xhc3ModGhpcy5nZXRDaGlsZENvbnRleHQoKSwgdGhpcy5zdGF0ZS5zaGFyZWRTdGF0ZSwgY29udHJvbHNPcHRpb25zKVxuICAgICAgY29udHJvbHMub25FbnRlcigpXG5cbiAgICAgIHNoYXJlZFN0YXRlLmVuYWJsZUJyb2FkY2FzdCgpXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY29udHJvbHMsXG4gICAgICAgIGNvbnRyb2xzT3B0aW9ucyxcbiAgICAgICAgY3VycmVudENvbnRyb2w6IGNvbnRyb2xOYW1lXG4gICAgICB9LCBjYWxsYmFjaylcbiAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRURJVE9SXG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgZWRpdG9yIG9uY2UgaXQncyByZWFkeVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N0YXJ0RWRpdG9yICgpIHtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXMuY29udGV4dFxuXG4gICAgdGhpcy5fZWRpdG9yLnN0YXJ0KClcblxuICAgIGlmIChvcHRpb25zLmVkaXRvci5mb3JjZUNyb3ApIHtcbiAgICAgIHRoaXMuX2hhc1N3aXRjaGVkQ29udHJvbHMgPSBmYWxzZVxuICAgICAgdGhpcy5zd2l0Y2hUb0luaXRpYWxDb250cm9scygpXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ09OVEVYVFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb250ZXh0IHBhc3NlZCB0byBhbGwgY2hpbGRyZW5cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0Q2hpbGRDb250ZXh0ICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZWRpdG9yOiB0aGlzLl9lZGl0b3IsXG4gICAgICB1aTogdGhpcy5jb250ZXh0LnVpLFxuICAgICAgb3B0aW9uczogdGhpcy5jb250ZXh0Lm9wdGlvbnMsXG4gICAgICBtZWRpYXRvcjogdGhpcy5jb250ZXh0Lm1lZGlhdG9yLFxuICAgICAgc2hhcmVkU3RhdGU6IHRoaXMuc3RhdGUuc2hhcmVkU3RhdGUsXG4gICAgICBzY3JlZW46IHRoaXMsXG4gICAgICBhcHBDb21wb25lbnQ6IHRoaXMuY29udGV4dC5hcHBDb21wb25lbnQsXG4gICAgICBnbG9iYWxTdGF0ZTogdGhpcy5jb250ZXh0Lmdsb2JhbFN0YXRlXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBjb250cm9scywgY29udHJvbHNPcHRpb25zIH0gPSB0aGlzLnN0YXRlXG5cbiAgICBsZXQgY29udHJvbHNDb21wb25lbnQsIGNhbnZhc0NvbnRyb2xzQ29tcG9uZW50XG4gICAgaWYgKGNvbnRyb2xzKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGNvbnRyb2xzQ29tcG9uZW50OiBDb250cm9sc0NvbXBvbmVudCxcbiAgICAgICAgY2FudmFzQ29udHJvbHNDb21wb25lbnQ6IENhbnZhc0NvbnRyb2xzQ29tcG9uZW50XG4gICAgICB9ID0gY29udHJvbHMuY29uc3RydWN0b3JcblxuICAgICAgY29udHJvbHNDb21wb25lbnQgPSBDb250cm9sc0NvbXBvbmVudCA/ICg8Q29udHJvbHNDb21wb25lbnRcbiAgICAgICAgb3B0aW9ucz17Y29udHJvbHNPcHRpb25zfVxuICAgICAgICBjb250cm9scz17Y29udHJvbHN9XG4gICAgICAvPikgOiA8ZGl2IC8+XG4gICAgICBjYW52YXNDb250cm9sc0NvbXBvbmVudCA9IENhbnZhc0NvbnRyb2xzQ29tcG9uZW50ID8gKDxDYW52YXNDb250cm9sc0NvbXBvbmVudFxuICAgICAgICBvcHRpb25zPXtjb250cm9sc09wdGlvbnN9XG4gICAgICAgIGNvbnRyb2xzPXtjb250cm9sc31cbiAgICAgIC8+KSA6IDxkaXYgLz5cbiAgICB9IGVsc2Uge1xuICAgICAgY29udHJvbHNDb21wb25lbnQgPSA8RGVmYXVsdENvbnRyb2xzQ29tcG9uZW50IC8+XG4gICAgICBjYW52YXNDb250cm9sc0NvbXBvbmVudCA9IDxEZWZhdWx0Q2FudmFzQ29udHJvbHNDb21wb25lbnQgLz5cbiAgICB9XG5cbiAgICByZXR1cm4gKDxDb250YWluZXIgaW5uZXJSZWY9eyhlbCkgPT4geyBpZiAoZWwpIHsgdGhpcy5fY29udGFpbmVyID0gZWwgfSB9fSBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWVkaXRvclNjcmVlbicgOiB1bmRlZmluZWQpfT5cbiAgICAgIDxDYW52YXNDb21wb25lbnQgcmVmPSdjYW52YXMnIC8+XG4gICAgICA8VGFibGVDb250YWluZXIgaW5uZXJSZWY9eyhlbCkgPT4geyB0aGlzLl90YWJsZUNvbnRhaW5lciA9IGVsIH19PlxuICAgICAgICA8TmF2aWdhdGlvbkNvbXBvbmVudFxuICAgICAgICAgIG9uQ29udHJvbFN3aXRjaD17dGhpcy5zd2l0Y2hUb0NvbnRyb2xzLmJpbmQodGhpcyl9XG4gICAgICAgICAgY3VycmVudENvbnRyb2w9e3RoaXMuc3RhdGUuY3VycmVudENvbnRyb2x9IC8+XG4gICAgICAgIHtjb250cm9sc0NvbXBvbmVudH1cbiAgICAgICAge2NhbnZhc0NvbnRyb2xzQ29tcG9uZW50fVxuICAgICAgPC9UYWJsZUNvbnRhaW5lcj5cbiAgICA8L0NvbnRhaW5lcj4pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQVUJMSUMgQVBJXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVkaXRvclxuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuRWRpdG9yfVxuICAgKi9cbiAgZ2V0RWRpdG9yICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZWRpdG9yXG4gIH1cblxuICAvKipcbiAgICogRXhwb3J0cyBhbiBpbWFnZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGRvd25sb2FkID0gZmFsc2VcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGV4cG9ydCAoLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnN3aXRjaFRvQ29udHJvbHMoJ2RlZmF1bHQnLCBudWxsLCB7fSwgKCkgPT4ge1xuICAgICAgICB0aGlzLl9lZGl0b3IuZXhwb3J0KC4uLmFyZ3MpLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGVkaXRvciBzdGF0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgc2VyaWFsaXplICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VkaXRvci5zZXJpYWxpemUoLi4uYXJncylcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIGRhdGFcbiAgICogQHBhcmFtICB7T2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBkZXNlcmlhbGl6ZSAoZGF0YSkge1xuICAgIHJldHVybiB0aGlzLl9lZGl0b3IuZGVzZXJpYWxpemUoZGF0YSlcbiAgfVxufVxuXG5jb25zdCBDb250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG59KVxuXG5jb25zdCBUYWJsZUNvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgZGlzcGxheTogJ3RhYmxlJyxcbiAgdGFibGVMYXlvdXQ6ICdmaXhlZCcsXG4gIHpJbmRleDogMSxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nXG59KVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoRWRpdG9yU2NyZWVuQ29tcG9uZW50KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yLXNjcmVlbi1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZW5kZXJUeXBlLCBVdGlscyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgRmlsZURvd25sb2FkZXIgZnJvbSAnc2hhcmVkL2Rvd25sb2FkZXIvZmlsZS1kb3dubG9hZGVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHBvcnRlciB7XG4gIGNvbnN0cnVjdG9yIChzZGssIG9wdGlvbnMsIGRvd25sb2FkKSB7XG4gICAgdGhpcy5fc2RrID0gc2RrXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLl9kb3dubG9hZCA9IGRvd25sb2FkXG4gIH1cblxuICAvKipcbiAgICogRXhwb3J0cyB0aGUgaW1hZ2UgLyBkYXRhIHVybFxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgZXhwb3J0ICgpIHtcbiAgICBjb25zdCByZW5kZXJUeXBlID0gdGhpcy5fZ2V0UmVuZGVyVHlwZSgpXG5cbiAgICByZXR1cm4gdGhpcy5fc2RrLmV4cG9ydChyZW5kZXJUeXBlLCB0aGlzLl9vcHRpb25zLmZvcm1hdCwgdGhpcy5fb3B0aW9ucy5xdWFsaXR5KVxuICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX2Rvd25sb2FkKSB7XG4gICAgICAgICAgdGhpcy5fZG93bmxvYWREYXRhKHJlbmRlclR5cGUsIGRhdGEpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogRG93bmxvYWRzIHRoZSBkYXRhIHVzaW5nIHRoZSBnaXZlbiByZW5kZXIgdHlwZVxuICAgKiBAcGFyYW0gIHtSZW5kZXJUeXBlfSByZW5kZXJUeXBlXG4gICAqIEBwYXJhbSAge1N0cmluZ30gZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Rvd25sb2FkRGF0YSAocmVuZGVyVHlwZSwgZGF0YSkge1xuICAgIHN3aXRjaCAocmVuZGVyVHlwZSkge1xuICAgICAgY2FzZSBSZW5kZXJUeXBlLkRBVEFVUkw6XG4gICAgICAgIEZpbGVEb3dubG9hZGVyLmRvd25sb2FkRGF0YVVSTChkYXRhLCB0aGlzLl9vcHRpb25zLmZpbGVCYXNlbmFtZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgUmVuZGVyVHlwZS5NU0JMT0I6XG4gICAgICAgIEZpbGVEb3dubG9hZGVyLmRvd25sb2FkTVNCbG9iKGRhdGEsIHRoaXMuX29wdGlvbnMuZmlsZUJhc2VuYW1lKVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSByZW5kZXIgdHlwZSBmb3IgdGhpcyBleHBvcnRcbiAgICogQHJldHVybiB7UmVuZGVyVHlwZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRSZW5kZXJUeXBlICgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fb3B0aW9uc1xuICAgIGlmIChvcHRpb25zLnR5cGUgIT09IFJlbmRlclR5cGUuSU1BR0UgfHwgIXRoaXMuX2Rvd25sb2FkKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy50eXBlXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChVdGlscy5zdXBwb3J0c01TQmxvYigpKSB7XG4gICAgICAgIHJldHVybiBSZW5kZXJUeXBlLk1TQkxPQlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFJlbmRlclR5cGUuREFUQVVSTFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvZXhwb3J0ZXIuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IEJhc2U2NCB9IGZyb20gJ2dsb2JhbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbGVEb3dubG9hZGVyIHtcbiAgLyoqXG4gICAqIEV4cG9ydHMgdGhlIGdpdmVuIGRhdGEgdXJsXG4gICAqIEBwYXJhbSAge1N0cmluZ30gZGF0YVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGJhc2VOYW1lID0gJ3Bob3RvZWRpdG9yc2RrLWV4cG9ydCdcbiAgICovXG4gIHN0YXRpYyBkb3dubG9hZERhdGFVUkwgKGRhdGEsIGJhc2VOYW1lID0gJ3Bob3RvZWRpdG9yc2RrLWV4cG9ydCcpIHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmNyZWF0ZUJsb2JVUkxGcm9tRGF0YVVSTChkYXRhKVxuICAgIGNvbnN0IGV4dGVuc2lvbiA9IHRoaXMuZ2V0RXh0ZW5zaW9uRnJvbURhdGFVUkwoZGF0YSlcblxuICAgIGxldCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpXG4gICAgbGluay5kb3dubG9hZCA9IGAke2Jhc2VOYW1lfS4ke2V4dGVuc2lvbn1gXG4gICAgbGluay5ocmVmID0gdXJsXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKVxuICAgIGxpbmsuY2xpY2soKVxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluaylcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvcnRzIHRoZSBnaXZlbiBkYXRhIHVybCB1c2luZyBtc0Jsb2JcbiAgICogQHBhcmFtICB7U3RyaW5nfSBkYXRhXG4gICAqIEBwYXJhbSAge1N0cmluZ30gYmFzZU5hbWUgPSAncGhvdG9lZGl0b3JzZGstZXhwb3J0J1xuICAgKi9cbiAgc3RhdGljIGRvd25sb2FkTVNCbG9iIChkYXRhLCBiYXNlTmFtZSA9ICdwaG90b2VkaXRvcnNkay1leHBvcnQnKSB7XG4gICAgbmF2aWdhdG9yLm1zU2F2ZUJsb2IoZGF0YSwgYCR7YmFzZU5hbWV9LnBuZ2ApXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlsZSBleHRlbnNpb24gYnkgcmVhZGluZyB0aGUgZ2l2ZW4gZGF0YSB1cmxcbiAgICogQHBhcmFtICB7U3RyaW5nfSBkYXRhXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXRFeHRlbnNpb25Gcm9tRGF0YVVSTCAoZGF0YSkge1xuICAgIGNvbnN0IG1pbWVTdHJpbmcgPSBkYXRhLnNwbGl0KCcsJylbMF0uc3BsaXQoJzonKVsxXS5zcGxpdCgnOycpWzBdXG4gICAgcmV0dXJuIG1pbWVTdHJpbmcuc3BsaXQoJy8nKS5wb3AoKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBCbG9iIFVSSSBmcm9tIHRoZSBnaXZlbiBEYXRhIFVSSVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUJsb2JVUkxGcm9tRGF0YVVSTCAoZGF0YSkge1xuICAgIGlmICghd2luZG93LkJsb2IgfHwgIXdpbmRvdy5VUkwgfHwgIUFycmF5QnVmZmVyIHx8ICFVaW50OEFycmF5KSB7XG4gICAgICByZXR1cm4gZGF0YVxuICAgIH1cblxuICAgIGNvbnN0IHJhd0RhdGEgPSBCYXNlNjQuZGVjb2RlKGRhdGEuc3BsaXQoJywnKVsxXSlcbiAgICBjb25zdCBtaW1lU3RyaW5nID0gZGF0YS5zcGxpdCgnLCcpWzBdLnNwbGl0KCc6JylbMV0uc3BsaXQoJzsnKVswXVxuXG4gICAgLy8gd3JpdGUgdGhlIGJ5dGVzIG9mIHRoZSBzdHJpbmcgdG8gYW4gQXJyYXlCdWZmZXJcbiAgICBjb25zdCBhcnJheUJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihyYXdEYXRhLmxlbmd0aClcbiAgICBjb25zdCBpbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3RGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaW50QXJyYXlbaV0gPSByYXdEYXRhW2ldXG4gICAgfVxuXG4gICAgLy8gd3JpdGUgdGhlIEFycmF5QnVmZmVyIHRvIGEgYmxvYiwgYW5kIHlvdSdyZSBkb25lXG4gICAgY29uc3QgYmxvYiA9IG5ldyB3aW5kb3cuQmxvYihbYXJyYXlCdWZmZXJdLCB7XG4gICAgICB0eXBlOiBtaW1lU3RyaW5nXG4gICAgfSlcbiAgICByZXR1cm4gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYilcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvZG93bmxvYWRlci9maWxlLWRvd25sb2FkZXIuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFByb21pc2UsIFZlY3RvcjIgfSBmcm9tICcuLi9nbG9iYWxzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbWFnZVJlc2l6ZXIge1xuICBjb25zdHJ1Y3RvciAoaW1hZ2UsIG1heFBpeGVscywgbWF4RGltZW5zaW9ucykge1xuICAgIHRoaXMuX2ltYWdlID0gaW1hZ2VcbiAgICB0aGlzLl9tYXhQaXhlbHMgPSBtYXhQaXhlbHNcbiAgICB0aGlzLl9tYXhEaW1lbnNpb25zID0gbWF4RGltZW5zaW9uc1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgaW1hZ2UgbmVlZHMgdG8gYmUgcmVzaXplZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgbmVlZHNSZXNpemUgKCkge1xuICAgIGNvbnN0IGRpbWVuc2lvbnMgPSBuZXcgVmVjdG9yMih0aGlzLl9pbWFnZS53aWR0aCwgdGhpcy5faW1hZ2UuaGVpZ2h0KVxuICAgIGNvbnN0IHBpeGVscyA9IGRpbWVuc2lvbnMueCAqIGRpbWVuc2lvbnMueVxuICAgIGNvbnN0IGV4Y2VlZHNNYXhQaXhlbHMgPSBwaXhlbHMgPiB0aGlzLl9tYXhQaXhlbHNcbiAgICBjb25zdCBleGNlZWRzTWF4RGltZW5zaW9ucyA9ICh0aGlzLl9tYXhEaW1lbnNpb25zICE9PSBudWxsICYmXG4gICAgICAoZGltZW5zaW9ucy54ID4gdGhpcy5fbWF4RGltZW5zaW9ucyB8fCBkaW1lbnNpb25zLnkgPiB0aGlzLl9tYXhEaW1lbnNpb25zKSlcblxuICAgIHJldHVybiBleGNlZWRzTWF4UGl4ZWxzIHx8IGV4Y2VlZHNNYXhEaW1lbnNpb25zXG4gIH1cblxuICAvKipcbiAgICogUmVzaXplcyB0aGUgaW1hZ2UgdG8gbWF0Y2ggdGhlIG1heGltdW0gYW1vdW50IG9mIHBpeGVsc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgcmVzaXplICgpIHtcbiAgICBsZXQgcmVhc29uID0gbnVsbFxuICAgIGxldCBjYW52YXMgPSBudWxsXG4gICAgY29uc3QgbWF4RGltZW5zaW9ucyA9IHRoaXMuX21heERpbWVuc2lvbnNcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxEaW1lbnNpb25zID0gbmV3IFZlY3RvcjIodGhpcy5faW1hZ2Uud2lkdGgsIHRoaXMuX2ltYWdlLmhlaWdodClcbiAgICAgICAgY29uc3QgZGltZW5zaW9ucyA9IGluaXRpYWxEaW1lbnNpb25zLmNsb25lKClcblxuICAgICAgICAvLyBJZiBtYXggcGl4ZWxzIGlzIGV4Y2VlZGVkLCByZXNpemUgdG8gZml0IHRoZSBtYXggcGl4ZWxzXG4gICAgICAgIGlmIChkaW1lbnNpb25zLnggKiBkaW1lbnNpb25zLnkgPiB0aGlzLl9tYXhQaXhlbHMpIHtcbiAgICAgICAgICBkaW1lbnNpb25zLmNvcHkodGhpcy5fZ2V0RGltZW5zaW9uc0J5TWF4UGl4ZWxzKCkpXG4gICAgICAgICAgcmVhc29uID0gJ21heE1lZ2FQaXhlbHMnXG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBtYXggZGltZW5zaW9ucyAobWF4aW11bSB0ZXh0dXJlIHNpemUpIGlzIGV4Y2VlZGVkLFxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIHNob3J0ZXIgc2lkZSBlcXVhbHMgdGhlIG1heGltdW0gdGV4dHVyZVxuICAgICAgICAvLyBzaXplXG4gICAgICAgIGlmIChtYXhEaW1lbnNpb25zICE9PSBudWxsICYmXG4gICAgICAgICAgICAoZGltZW5zaW9ucy54ID4gbWF4RGltZW5zaW9ucyB8fFxuICAgICAgICAgICAgZGltZW5zaW9ucy55ID4gbWF4RGltZW5zaW9ucykpIHtcbiAgICAgICAgICBsZXQgc2NhbGUgPSBNYXRoLm1pbihcbiAgICAgICAgICAgIG1heERpbWVuc2lvbnMgLyBkaW1lbnNpb25zLngsXG4gICAgICAgICAgICBtYXhEaW1lbnNpb25zIC8gZGltZW5zaW9ucy55XG4gICAgICAgICAgKVxuICAgICAgICAgIGRpbWVuc2lvbnMubXVsdGlwbHkoc2NhbGUpXG4gICAgICAgICAgcmVhc29uID0gJ21heERpbWVuc2lvbnMnXG4gICAgICAgIH1cblxuICAgICAgICBkaW1lbnNpb25zLmZsb29yKClcbiAgICAgICAgY2FudmFzID0gdGhpcy5fY3JlYXRlUmVzaXplZEltYWdlQ2FudmFzKGRpbWVuc2lvbnMpXG5cbiAgICAgICAgcmVzb2x2ZSh7IGNhbnZhcywgZGltZW5zaW9ucywgcmVhc29uIH0pXG4gICAgICB9LCAxMDAwKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHJlc2l6ZWQgY2FudmFzIHdpdGggdGhlIGdpdmVuIGRpbWVuc2lvbnNcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBkaW1lbnNpb25zXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMn0gW2ltYWdlRGltZW5zaW9uc10gPSBkaW1lbnNpb25zXG4gICAqIEByZXR1cm4ge0NhbnZhc31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jcmVhdGVSZXNpemVkSW1hZ2VDYW52YXMgKGRpbWVuc2lvbnMsIGltYWdlRGltZW5zaW9ucyA9IGRpbWVuc2lvbnMpIHtcbiAgICBjb25zdCBpbWFnZSA9IHRoaXMuX2ltYWdlXG5cbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICAgIGNhbnZhcy53aWR0aCA9IGRpbWVuc2lvbnMueFxuICAgIGNhbnZhcy5oZWlnaHQgPSBkaW1lbnNpb25zLnlcblxuICAgIGNvbnN0IG9mZnNldCA9IGRpbWVuc2lvbnMuY2xvbmUoKVxuICAgICAgLnN1YnRyYWN0KGltYWdlRGltZW5zaW9ucylcbiAgICAgIC5kaXZpZGUoMilcblxuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuICAgIGNvbnRleHQuZHJhd0ltYWdlKGltYWdlLFxuICAgICAgMCwgMCxcbiAgICAgIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsXG4gICAgICBvZmZzZXQueCwgb2Zmc2V0LnksXG4gICAgICBpbWFnZURpbWVuc2lvbnMueCwgaW1hZ2VEaW1lbnNpb25zLnkpXG4gICAgcmV0dXJuIGNhbnZhc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRpbWVuc2lvbnMgdGhhdCBtYXRjaCB0aGUgbWF4IHBpeGVsIGNvdW50XG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0RGltZW5zaW9uc0J5TWF4UGl4ZWxzICgpIHtcbiAgICBjb25zdCBpbWFnZSA9IHRoaXMuX2ltYWdlXG4gICAgY29uc3QgbWF4UGl4ZWxzID0gdGhpcy5fbWF4UGl4ZWxzXG5cbiAgICBjb25zdCByYXRpb0hWID0gaW1hZ2Uud2lkdGggLyBpbWFnZS5oZWlnaHRcbiAgICBjb25zdCByYXRpb1ZIID0gaW1hZ2UuaGVpZ2h0IC8gaW1hZ2Uud2lkdGhcblxuICAgIHJldHVybiBuZXcgVmVjdG9yMihcbiAgICAgIE1hdGguc3FydChtYXhQaXhlbHMgKiByYXRpb0hWKSxcbiAgICAgIE1hdGguc3FydChtYXhQaXhlbHMgKiByYXRpb1ZIKVxuICAgICkuZmxvb3IoKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2xpYi9pbWFnZS1yZXNpemVyLmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgUGhvdG9FZGl0b3JTREsgZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5pbXBvcnQgeyBDb25zdGFudHMsIExvZyB9IGZyb20gJy4uLy4uL2dsb2JhbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRvck9wZXJhdGlvbnMge1xuICBjb25zdHJ1Y3RvciAoZWRpdG9yLCBzZGssIG1lZGlhdG9yKSB7XG4gICAgdGhpcy5fZWRpdG9yID0gZWRpdG9yXG4gICAgdGhpcy5fc2RrID0gc2RrXG4gICAgdGhpcy5fbWVkaWF0b3IgPSBtZWRpYXRvclxuXG4gICAgdGhpcy5fbWFwID0ge31cblxuICAgIC8vIGBlZGl0b3JgIG1pZ2h0IGJlIHNoYWxsb3cgKGUuZy4gZm9yIHByZWxvYWRpbmcpLCBzbyBfc2RrIG1pZ2h0IG5vdCBleGlzdC5cbiAgICB0aGlzLl9zdGFjayA9IHRoaXMuX3NkayAmJiB0aGlzLl9zZGsuZ2V0T3BlcmF0aW9uc1N0YWNrKClcbiAgICB0aGlzLl9wcmVmZXJyZWRPcmRlciA9IHRoaXMuX2VkaXRvci5nZXRPcHRpb25zKCkuZWRpdG9yLm9wZXJhdGlvbnNPcmRlclxuXG4gICAgdGhpcy5fYXZhaWxhYmxlID0ge31cblxuICAgIGNvbnN0IHsgT3BlcmF0aW9ucyB9ID0gUGhvdG9FZGl0b3JTREtcbiAgICBmb3IgKGxldCBvcGVyYXRpb25OYW1lIGluIE9wZXJhdGlvbnMpIHtcbiAgICAgIGNvbnN0IE9wZXJhdGlvbiA9IE9wZXJhdGlvbnNbb3BlcmF0aW9uTmFtZV1cbiAgICAgIHRoaXMuX2F2YWlsYWJsZVtPcGVyYXRpb24uaWRlbnRpZmllcl0gPSBPcGVyYXRpb25cbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25zID0gZWRpdG9yLmdldE9wdGlvbnMoKVxuICAgIGNvbnN0IHsgb3BlcmF0aW9ucyB9ID0gb3B0aW9ucy5leHRlbnNpb25zXG4gICAgZm9yIChsZXQga2V5IGluIG9wZXJhdGlvbnMpIHtcbiAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG9wZXJhdGlvbnNba2V5XVxuICAgICAgdGhpcy5fYXZhaWxhYmxlW29wZXJhdGlvbi5pZGVudGlmaWVyXSA9IG9wZXJhdGlvblxuICAgIH1cblxuICAgIGlmICh0aGlzLl9zdGFjaykge1xuICAgICAgdGhpcy5fZml4U3RhY2soKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBhbiBvcGVyYXRpb24gd2l0aCB0aGUgZ2l2ZW4gaWRlbnRpZmllciBleGlzdHNcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkZW50aWZpZXJcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGV4aXN0cyAoaWRlbnRpZmllcikge1xuICAgIHJldHVybiAhIXRoaXMuX21hcFtpZGVudGlmaWVyXVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGdpdmVuIG9wZXJhdGlvbiB0byB0aGUgc3RhY2tcbiAgICogQHBhcmFtIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb259IG9wZXJhdGlvblxuICAgKi9cbiAgYWRkIChvcGVyYXRpb24pIHtcbiAgICBjb25zdCBpZGVudGlmaWVyID0gb3BlcmF0aW9uLmNvbnN0cnVjdG9yLmlkZW50aWZpZXJcbiAgICBvcGVyYXRpb24ub24oJ3VwZGF0ZScsICgpID0+IHtcbiAgICAgIHRoaXMuX21lZGlhdG9yLmVtaXQoQ29uc3RhbnRzLkVWRU5UUy5PUEVSQVRJT05fVVBEQVRFRCwgb3BlcmF0aW9uKVxuICAgIH0pXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9wcmVmZXJyZWRPcmRlci5pbmRleE9mKGlkZW50aWZpZXIpXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFZGl0b3JPcGVyYXRpb25zI2FkZDogXFxgJHtpZGVudGlmaWVyfVxcYCBkb2VzIG5vdCBhcHBlYXIgaW4gXFxgb3BlcmF0aW9uc09yZGVyXFxgYClcbiAgICB9XG4gICAgdGhpcy5fc3RhY2suc2V0KGluZGV4LCBvcGVyYXRpb24pXG4gICAgdGhpcy5fbWFwW2lkZW50aWZpZXJdID0gb3BlcmF0aW9uXG5cbiAgICB0aGlzLl9tZWRpYXRvci5lbWl0KENvbnN0YW50cy5FVkVOVFMuT1BFUkFUSU9OX0NSRUFURUQsIG9wZXJhdGlvbilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBvcGVyYXRpb24gZnJvbSB0aGUgc3RhY2tcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gYnJvYWRjYXN0ID0gdHJ1ZVxuICAgKi9cbiAgcmVtb3ZlIChvcGVyYXRpb24sIGJyb2FkY2FzdCA9IHRydWUpIHtcbiAgICBjb25zdCBpZGVudGlmaWVyID0gdHlwZW9mIG9wZXJhdGlvbiA9PT0gJ29iamVjdCcgPyBvcGVyYXRpb24uY29uc3RydWN0b3IuaWRlbnRpZmllciA6IG9wZXJhdGlvblxuICAgIGNvbnN0IHN0YWNrID0gdGhpcy5fc3RhY2suZ2V0U3RhY2soKVxuICAgIG9wZXJhdGlvbiA9IHRoaXMuZ2V0KGlkZW50aWZpZXIpXG5cbiAgICAvLyBSZW1vdmUgb3BlcmF0aW9uIGZyb20gbWFwXG4gICAgZGVsZXRlIHRoaXMuX21hcFtpZGVudGlmaWVyXVxuXG4gICAgLy8gUmVtb3ZlIG9wZXJhdGlvbiBmcm9tIHN0YWNrXG4gICAgY29uc3QgaW5kZXggPSBzdGFja1xuICAgICAgLm1hcCgob3ApID0+IG9wLmNvbnN0cnVjdG9yLmlkZW50aWZpZXIpXG4gICAgICAuaW5kZXhPZihpZGVudGlmaWVyKVxuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fc3RhY2sucmVtb3ZlQXQoaW5kZXgpXG5cbiAgICAgIC8vIFNldCBhbGwgZm9sbG93aW5nIG9wZXJhdGlvbnMgdG8gZGlydHksIHNpbmNlIHRoZXkgbWlnaHRcbiAgICAgIC8vIGhhdmUgY2FjaGVkIHN0dWZmIGRyYXduIGJ5IHRoZSByZW1vdmVkIG9wZXJhdGlvblxuICAgICAgZm9yIChsZXQgaSA9IGluZGV4ICsgMTsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IHN0YWNrW2ldXG4gICAgICAgIGlmICghb3BlcmF0aW9uKSBjb250aW51ZVxuICAgICAgICBvcGVyYXRpb24uc2V0RGlydHkodHJ1ZSlcbiAgICAgIH1cblxuICAgICAgaWYgKGJyb2FkY2FzdCkge1xuICAgICAgICB0aGlzLl9tZWRpYXRvci5lbWl0KENvbnN0YW50cy5FVkVOVFMuT1BFUkFUSU9OX1JFTU9WRUQsIG9wZXJhdGlvbilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb3BlcmF0aW9uIHdpdGggdGhlIGdpdmVuIGlkZW50aWZpZXJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBpZGVudGlmaWVyXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbn1cbiAgICovXG4gIGdldCAoaWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9tYXBbaWRlbnRpZmllcl1cbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUgb3BlcmF0aW9uIHdpdGggdGhlIGdpdmVuIGlkZW50aWZpZXIgYWxyZWFkeSBleGlzdHMsIGl0IHJldHVybnNcbiAgICogdGhlIGV4aXN0aW5nIG9wZXJhdGlvbi4gT3RoZXJ3aXNlLCBpdCBjcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IG9uZS5cbiAgICogQHBhcmFtICB7U3RyaW5nfSBpZGVudGlmaWVyXG4gICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb259XG4gICAqL1xuICBnZXRPckNyZWF0ZSAoaWRlbnRpZmllciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKHRoaXMuX21hcFtpZGVudGlmaWVyXSkge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5fbWFwW2lkZW50aWZpZXJdXG4gICAgICBvcGVyYXRpb24uc2V0KG9wdGlvbnMsIGZhbHNlKVxuICAgICAgcmV0dXJuIG9wZXJhdGlvblxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBPcGVyYXRpb24gPSB0aGlzLl9hdmFpbGFibGVbaWRlbnRpZmllcl1cbiAgICAgIGlmICh0eXBlb2YgT3BlcmF0aW9uID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBMb2cud2FybihgVHJ5aW5nIHRvIGNyZWF0ZSBhbiBvcGVyYXRpb24gb2YgdHlwZSBcXGAke2lkZW50aWZpZXJ9XFxgIHRoYXQgaXMgbm90IGF2YWlsYWJsZS5gKVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IE9wZXJhdGlvbih0aGlzLl9zZGssIG9wdGlvbnMpXG4gICAgICB0aGlzLmFkZChvcGVyYXRpb24pXG4gICAgICByZXR1cm4gb3BlcmF0aW9uXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9wZXJhdGlvbnMgc3RhY2tcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9uc1N0YWNrfVxuICAgKi9cbiAgZ2V0U3RhY2sgKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGFja1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggYSBzbmFwc2hvdCBvZiB0aGUgY3VycmVudCBvcGVyYXRpb25zIHN0YXRlLlxuICAgKiBUaGUgcmV0dXJuZWQgb2JqZWN0IGlzIGEgZGljdGlvbmFyeSBvZiBvcGVyYXRpb24ncyBzZXJpYWxpemVkIG9wdGlvbnMsXG4gICAqIGluZGV4ZWQgYnkgdGhlIG9wZXJhdGlvbidzIGlkZW50aWZpZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqIEBtZW1iZXJvZiBFZGl0b3JPcGVyYXRpb25zXG4gICAqL1xuICBnZXRTbmFwc2hvdCAoKSB7XG4gICAgY29uc3Qgc25hcHNob3QgPSB7fVxuXG4gICAgT2JqZWN0LmtleXModGhpcy5fbWFwKS5mb3JFYWNoKGlkZW50aWZpZXIgPT4ge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5fbWFwW2lkZW50aWZpZXJdXG4gICAgICBzbmFwc2hvdFtpZGVudGlmaWVyXSA9IG9wZXJhdGlvbi5zZXJpYWxpemVPcHRpb25zKClcbiAgICB9KVxuXG4gICAgcmV0dXJuIHNuYXBzaG90XG4gIH1cblxuICByZW1vdmVVbnVzZWQgKCkge1xuICAgIE9iamVjdC5rZXlzKHRoaXMuX21hcCkuZm9yRWFjaChpZGVudGlmaWVyID0+IHtcbiAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuX21hcFtpZGVudGlmaWVyXVxuXG4gICAgICBpZiAoIW9wZXJhdGlvbi5oYXNDaGFuZ2VzKCkpIHtcbiAgICAgICAgdGhpcy5yZW1vdmUob3BlcmF0aW9uKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBoYXNDaGFuZ2VzIChzbmFwc2hvdCkge1xuICAgIGxldCBjaGFuZ2VzID0gZmFsc2VcblxuICAgIE9iamVjdC5rZXlzKHRoaXMuX21hcCkuZm9yRWFjaChpZGVudGlmaWVyID0+IHtcbiAgICAgIGlmICghc25hcHNob3RbaWRlbnRpZmllcl0pIHtcbiAgICAgICAgY2hhbmdlcyA9IHRydWVcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYgKGNoYW5nZXMpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMoc25hcHNob3QpLmZvckVhY2goaWRlbnRpZmllciA9PiB7XG4gICAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmdldChpZGVudGlmaWVyKVxuXG4gICAgICBpZiAoIW9wZXJhdGlvbikge1xuICAgICAgICBjaGFuZ2VzID0gdHJ1ZVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKCFvcGVyYXRpb24ub3B0aW9uc0VxdWFsKHNuYXBzaG90W2lkZW50aWZpZXJdKSkge1xuICAgICAgICBjaGFuZ2VzID0gdHJ1ZVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gY2hhbmdlc1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RvcmVzIHRoZSBvcGVyYXRpb25zIHN0YXRlIHRvIHRoZSBzdXBwbGllZCBzbmFwc2hvdC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHNuYXBzaG90XG4gICAqIEBtZW1iZXJvZiBFZGl0b3JPcGVyYXRpb25zXG4gICAqL1xuICByZXN0b3JlU25hcHNob3QgKHNuYXBzaG90KSB7XG4gICAgT2JqZWN0LmtleXMoc25hcHNob3QpLmZvckVhY2goaWRlbnRpZmllciA9PiB7XG4gICAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmdldE9yQ3JlYXRlKGlkZW50aWZpZXIpXG5cbiAgICAgIC8vIElmIG9wdGlvbnMgYXJlIGVxdWFsLCBubyB1cGRhdGUgbmVjZXNzYXJ5XG4gICAgICBpZiAob3BlcmF0aW9uLm9wdGlvbnNFcXVhbChzbmFwc2hvdFtpZGVudGlmaWVyXSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBvcGVyYXRpb24gaGFzIGEgY3VzdG9tIHJlc3RvcmVTbmFwc2hvdCwgdXNlIGl0OyBlbHNlIGp1c3Qgc2V0XG4gICAgICAvLyB0aGUgb3B0aW9uc1xuICAgICAgaWYgKG9wZXJhdGlvbi5yZXN0b3JlU25hcHNob3QpIHtcbiAgICAgICAgb3BlcmF0aW9uLnJlc3RvcmVTbmFwc2hvdChzbmFwc2hvdFtpZGVudGlmaWVyXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wZXJhdGlvbi5zZXQoc25hcHNob3RbaWRlbnRpZmllcl0pXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIFJlbW92ZSBhbnkgb3BlcmF0aW9ucyBpZiBuZWNlc3NhcnlcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9tYXApLmZvckVhY2goaWRlbnRpZmllciA9PiB7XG4gICAgICBpZiAoIXNuYXBzaG90W2lkZW50aWZpZXJdKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKGlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIG9wZXJhdGlvbiBpcyBhdmFpbGFibGVcbiAgICogQHBhcmFtIHtTdHJpbmd9XG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBpc0F2YWlsYWJsZSAoaWRlbnRpZmllcikge1xuICAgIHJldHVybiAhIXRoaXMuX2F2YWlsYWJsZVtpZGVudGlmaWVyXVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGF2YWlsYWJsZSBvcGVyYXRpb25zXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGdldEF2YWlsYWJsZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2F2YWlsYWJsZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgb3BlcmF0aW9uc1xuICAgKi9cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMuX21hcCA9IHt9XG4gIH1cblxuICAvKipcbiAgICogU2luY2UgdGhlIFNESyBtaWdodCBjcmVhdGUgc29tZSBvcGVyYXRpb25zIHVwZnJvbnQgKGUuZy4gdG8gZml4IHRoZSBFWElGIG9yaWVudGF0aW9uKSxcbiAgICogd2UgbWlnaHQgaGF2ZSBvcGVyYXRpb25zIGF0IGFycmF5IHBvc2l0aW9ucyB3aGVyZSB0aGV5IHNob3VsZCBub3QgYmUuIFRoaXMgbWV0aG9kXG4gICAqIG1vdmVzIHRoZW0gdG8gdGhlaXIgYXBwcm9wcmlhdGUgcG9zaXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9maXhTdGFjayAoKSB7XG4gICAgY29uc3Qgc3RhY2sgPSB0aGlzLl9zdGFjay5nZXRTdGFjaygpLnNsaWNlKClcbiAgICB0aGlzLl9zdGFjay5jbGVhcigpXG5cbiAgICBzdGFjay5mb3JFYWNoKChzKSA9PiB7XG4gICAgICB0aGlzLmFkZChzKVxuICAgIH0pXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvbGliL2VkaXRvci9vcGVyYXRpb25zLmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgUGhvdG9FZGl0b3JTREsgZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuLi8uLi9nbG9iYWxzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFZGl0b3JDb250cm9scyB7XG4gIGNvbnN0cnVjdG9yIChlZGl0b3IsIHNkaywgbWVkaWF0b3IpIHtcbiAgICB0aGlzLl9lZGl0b3IgPSBlZGl0b3JcbiAgICB0aGlzLl9zZGsgPSBzZGtcbiAgICB0aGlzLl9tZWRpYXRvciA9IG1lZGlhdG9yXG5cbiAgICB0aGlzLl9vcHRpb25zID0gdGhpcy5fZWRpdG9yLmdldE9wdGlvbnMoKVxuXG4gICAgdGhpcy5faW52YWxpZE9wZXJhdGlvbnNTZWVuID0gW11cbiAgICB0aGlzLl9hdmFpbGFibGUgPSB7XG5cbiAgICB9XG5cbiAgICBjb25zdCB7IENvbnRyb2xzIH0gPSBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUlcbiAgICBmb3IgKGxldCBjb250cm9sTmFtZSBpbiBDb250cm9scykge1xuICAgICAgY29uc3QgQ29udHJvbCA9IENvbnRyb2xzW2NvbnRyb2xOYW1lXVxuICAgICAgdGhpcy5fYXZhaWxhYmxlW0NvbnRyb2wuaWRlbnRpZmllcl0gPSBDb250cm9sXG4gICAgfVxuXG4gICAgKHRoaXMuX29wdGlvbnMuZXh0ZW5zaW9ucy5jb250cm9scyB8fCBbXSkuZm9yRWFjaChjb250cm9sID0+IHtcbiAgICAgIHRoaXMuX2F2YWlsYWJsZVtjb250cm9sLmlkZW50aWZpZXJdID0gY29udHJvbFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaWRlbnRpZmllciBvZiB0aGUgZmlyc3QgZW5hYmxlZCBjb250cm9sXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIGdldEZpcnN0RW5hYmxlZENvbnRyb2xOYW1lICgpIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5fYXZhaWxhYmxlKSB7XG4gICAgICBpZiAodGhpcy5pc0VuYWJsZWQoa2V5KSkge1xuICAgICAgICByZXR1cm4ga2V5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBjb250cm9sIHdpdGggdGhlIGdpdmVuIGlkZW50aWZpZXIgaXMgc2VsZWN0YWJsZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBpZGVudGlmaWVyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBpc0VuYWJsZWQgKGlkZW50aWZpZXIpIHtcbiAgICBjb25zdCBjb250cm9sID0gdGhpcy5nZXQoaWRlbnRpZmllcilcblxuICAgIGlmICghY29udHJvbCkge1xuICAgICAgTG9nLmluZm8oJ0VkaXRvckNvbnRyb2xzI2lzRW5hYmxlZDogVW5rbm93biBjb250cm9sOiAnICsgaWRlbnRpZmllcilcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IHJlcXVpcmVkT3BlcmF0aW9ucyA9IGNvbnRyb2wucmVxdWlyZWRPcGVyYXRpb25zIHx8IFtdXG4gICAgY29uc3QgbWlzc2luZ09wZXJhdGlvbnMgPSBbXVxuICAgIHJlcXVpcmVkT3BlcmF0aW9ucy5mb3JFYWNoKG9wZXJhdGlvbklkZW50aWZpZXIgPT4ge1xuICAgICAgaWYgKCF0aGlzLl9lZGl0b3Iub3BlcmF0aW9ucy5pc0F2YWlsYWJsZShvcGVyYXRpb25JZGVudGlmaWVyKSkge1xuICAgICAgICBtaXNzaW5nT3BlcmF0aW9ucy5wdXNoKG9wZXJhdGlvbklkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmIChtaXNzaW5nT3BlcmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgIC8vIE1ha2luZyBzdXJlIHdlIG9ubHkgc2hvdyBvbmUgZXJyb3IgcGVyIGNvbnRyb2xcbiAgICAgIGlmICh0aGlzLl9pbnZhbGlkT3BlcmF0aW9uc1NlZW4uaW5kZXhPZihpZGVudGlmaWVyKSA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5faW52YWxpZE9wZXJhdGlvbnNTZWVuLnB1c2goaWRlbnRpZmllcilcbiAgICAgICAgTG9nLmVycm9yKGBDb250cm9sIFxcYCR7aWRlbnRpZmllcn1cXGAgY2FuIG5vdCBiZSB1c2VkIGJlY2F1c2UgJHttaXNzaW5nT3BlcmF0aW9ucy5sZW5ndGggPT09IDEgPyAnb3BlcmF0aW9uIGlzJyA6ICdvcGVyYXRpb25zIGFyZSd9IG1pc3Npbmc6ICR7bWlzc2luZ09wZXJhdGlvbnMubWFwKG8gPT4gYFxcYCR7b31cXGBgKS5qb2luKCcsICcpfWApXG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJvbC5pc0VuYWJsZWQodGhpcy5fZWRpdG9yKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbnRyb2wgd2l0aCB0aGUgZ2l2ZW4gaWRlbnRpZmllclxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGlkZW50aWZpZXJcbiAgICogQHJldHVybiB7Q29udHJvbH1cbiAgICovXG4gIGdldCAoaWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLl9hdmFpbGFibGVbaWRlbnRpZmllcl1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhdmFpbGFibGUgY29udHJvbHNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0QXZhaWxhYmxlICgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXZhaWxhYmxlXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvbGliL2VkaXRvci9jb250cm9scy5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnLi4vLi4vZ2xvYmFscydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWRpdG9yRmVhdHVyZXMge1xuICBjb25zdHJ1Y3RvciAoZWRpdG9yLCBzZGssIG1lZGlhdG9yKSB7XG4gICAgdGhpcy5fZWRpdG9yID0gZWRpdG9yXG4gICAgdGhpcy5fc2RrID0gc2RrXG4gICAgdGhpcy5fbWVkaWF0b3IgPSBtZWRpYXRvclxuXG4gICAgdGhpcy5fb3B0aW9ucyA9IHRoaXMuX2VkaXRvci5nZXRPcHRpb25zKClcblxuICAgIHRoaXMucmVzZXQoKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgZmVhdHVyZSB3aXRoIHRoZSBnaXZlbiBpZGVudGlmaWVyIGlzIGVuYWJsZWRcbiAgICogQHBhcmFtICB7U3RyaW5nfSAgaWRlbnRpZmllclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgaXNFbmFibGVkIChpZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZlYXR1cmVzW2lkZW50aWZpZXJdICYmIHRoaXMuaXNFbmFibGVkQnlPcHRpb25zKGlkZW50aWZpZXIpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBmZWF0dXJlIHdpdGggdGhlIGdpdmVuIGlkZW50aWZpZXIgaXMgZW5hYmxlZCBieSBvcHRpb25zXG4gICAqIEBwYXJhbSAge1N0cmluZ30gIGlkZW50aWZpZXJcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGlzRW5hYmxlZEJ5T3B0aW9ucyAoaWRlbnRpZmllcikge1xuICAgIGNvbnN0IGNhcGl0YWxpemVkSWRlbnRpZmllciA9IGlkZW50aWZpZXIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBpZGVudGlmaWVyLnNsaWNlKDEpXG4gICAgbGV0IG9wdGlvbkVuYWJsZWQgPSB0aGlzLl9vcHRpb25zLmVkaXRvcltgZW5hYmxlJHtjYXBpdGFsaXplZElkZW50aWZpZXJ9YF1cbiAgICBpZiAodHlwZW9mIG9wdGlvbkVuYWJsZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBvcHRpb25FbmFibGVkID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gb3B0aW9uRW5hYmxlZFxuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgdGhlIGZlYXR1cmVzIHdpdGggdGhlIGdpdmVuIGlkZW50aWZpZXJzXG4gICAqIEBwYXJhbSAge1N0cmluZ1tdfSBpZGVudGlmaWVyc1xuICAgKi9cbiAgZW5hYmxlICguLi5pZGVudGlmaWVycykge1xuICAgIGlkZW50aWZpZXJzLmZvckVhY2goKGlkZW50aWZpZXIpID0+IHtcbiAgICAgIHRoaXMuX2ZlYXR1cmVzW2lkZW50aWZpZXJdID0gdHJ1ZVxuICAgIH0pXG4gICAgdGhpcy5fbWVkaWF0b3IuZW1pdChDb25zdGFudHMuRVZFTlRTLkZFQVRVUkVTX0VOQUJMRUQsIGlkZW50aWZpZXJzKVxuICAgIHRoaXMuX21lZGlhdG9yLmVtaXQoQ29uc3RhbnRzLkVWRU5UUy5GRUFUVVJFU19VUERBVEVELCBpZGVudGlmaWVycylcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgZmVhdHVyZXMgd2l0aCB0aGUgZ2l2ZW4gaWRlbnRpZmllcnNcbiAgICogQHBhcmFtICB7U3RyaW5nW119IGlkZW50aWZpZXJzXG4gICAqL1xuICBkaXNhYmxlICguLi5pZGVudGlmaWVycykge1xuICAgIGlkZW50aWZpZXJzLmZvckVhY2goKGlkZW50aWZpZXIpID0+IHtcbiAgICAgIHRoaXMuX2ZlYXR1cmVzW2lkZW50aWZpZXJdID0gZmFsc2VcbiAgICB9KVxuICAgIHRoaXMuX21lZGlhdG9yLmVtaXQoQ29uc3RhbnRzLkVWRU5UUy5GRUFUVVJFU19ESVNBQkxFRCwgaWRlbnRpZmllcnMpXG4gICAgdGhpcy5fbWVkaWF0b3IuZW1pdChDb25zdGFudHMuRVZFTlRTLkZFQVRVUkVTX1VQREFURUQsIGlkZW50aWZpZXJzKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgZmVhdHVyZXMgdG8gdGhlaXIgZGVmYXVsdCB2YWx1ZXNcbiAgICovXG4gIHJlc2V0ICgpIHtcbiAgICB0aGlzLl9mZWF0dXJlcyA9IHtcbiAgICAgIGRyYWc6IHRoaXMuX29wdGlvbnMuZWRpdG9yLmVuYWJsZURyYWcsXG4gICAgICB6b29tOiB0aGlzLl9vcHRpb25zLmVkaXRvci5lbmFibGVab29tLFxuICAgICAgZXhwb3J0OiB0cnVlLFxuICAgICAgbmV3OiB0cnVlXG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2xpYi9lZGl0b3IvZmVhdHVyZXMuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFNES1V0aWxzLCBWZWN0b3IyLCBFdmVudEVtaXR0ZXIsIENvbnN0YW50cyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tICdsaWIvdHJhbnNpdGlvbidcblxuY29uc3QgTUlOX1pPT01fRElNRU5TSU9OUyA9IDMwMFxuY29uc3QgWk9PTV9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRvclpvb20gZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvciAoZWRpdG9yLCBzZGssIG1lZGlhdG9yKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX2VkaXRvciA9IGVkaXRvclxuICAgIHRoaXMuX3NkayA9IHNka1xuICAgIHRoaXMuX21lZGlhdG9yID0gbWVkaWF0b3JcblxuICAgIHRoaXMuX2lzRGVmYXVsdFpvb20gPSBmYWxzZVxuICAgIHRoaXMuX3pvb20gPSB0aGlzLl9zZGsuZ2V0Wm9vbSgpXG4gICAgdGhpcy5fdGFyZ2V0Wm9vbSA9IHRoaXMuX3pvb21cbiAgICB0aGlzLl9vcHRpb25zID0gdGhpcy5fZWRpdG9yLmdldE9wdGlvbnMoKVxuXG4gICAgdGhpcy5fem9vbUxldmVscyA9IFtcbiAgICAgIDEsIDIsIDMsIDQsIDUsXG4gICAgICA2LjI1LCA4LjMzLCAxMi41LFxuICAgICAgMTYuNjYsIDI1LCAzMy4zMywgNTAsIDY2LjY2LCAxMDAsXG4gICAgICAyMDAsIDMwMCwgNDAwLCA1MDAsIDYwMCwgNzAwLCA4MDAsXG4gICAgICAxMjAwLCAxNjAwLCAzMjAwXG4gICAgXS5tYXAoKHopID0+IHogLyAxMDApXG5cbiAgICB0aGlzLl9lZGl0b3Iub24oJ3JlYWR5JywgKCkgPT4ge1xuICAgICAgdGhpcy5fZGVmYXVsdExldmVsID0gdGhpcy5fY2FsY3VsYXRlRGVmYXVsdFpvb21MZXZlbCgpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBab29tcyB0byB0aGUgZGVmYXVsdCB6b29tIGxldmVsXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVjYWxjdWxhdGVEZWZhdWx0TGV2ZWwgPSBmYWxzZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGluc3RhbnQgPSBmYWxzZVxuICAgKi9cbiAgYXV0byAocmVjYWxjdWxhdGVEZWZhdWx0TGV2ZWwgPSBmYWxzZSwgaW5zdGFudCA9IGZhbHNlLCBjYWxsYmFjaykge1xuICAgIGlmIChyZWNhbGN1bGF0ZURlZmF1bHRMZXZlbCkge1xuICAgICAgdGhpcy5fZGVmYXVsdExldmVsID0gdGhpcy5fY2FsY3VsYXRlRGVmYXVsdFpvb21MZXZlbCgpXG4gICAgfVxuXG4gICAgdGhpcy5zZXQodGhpcy5fZGVmYXVsdExldmVsLCBpbnN0YW50LCBjYWxsYmFjaylcbiAgfVxuXG4gIC8qKlxuICAgKiBab29tcyBpbiB0aGUgZWRpdG9yXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBpbiAoY2FsbGJhY2spIHtcbiAgICBsZXQgbmV3Wm9vbSA9IHRoaXMuX2dldENsb3Nlc3Rab29tTGV2ZWwodGhpcy5fdGFyZ2V0Wm9vbSArIDAuMDAxLCArMSlcbiAgICBuZXdab29tID0gdGhpcy5fY2xhbXAobmV3Wm9vbSlcbiAgICB0aGlzLnNldChuZXdab29tLCBjYWxsYmFjaylcbiAgfVxuXG4gIC8qKlxuICAgKiBab29tcyBvdXQgdGhlIGVkaXRvclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb3V0IChjYWxsYmFjaykge1xuICAgIGxldCBuZXdab29tID0gdGhpcy5fZ2V0Q2xvc2VzdFpvb21MZXZlbCh0aGlzLl90YXJnZXRab29tIC0gMC4wMDEsIC0xKVxuICAgIG5ld1pvb20gPSB0aGlzLl9jbGFtcChuZXdab29tKVxuICAgIHRoaXMuc2V0KG5ld1pvb20sIGNhbGxiYWNrKVxuICB9XG5cbiAgLyoqXG4gICAqIENsYW1wcyB0aGUgZ2l2ZW4gem9vbSBsZXZlbFxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHpvb21cbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NsYW1wICh6b29tKSB7XG4gICAgY29uc3QgZGVmYXVsdFpvb20gPSB0aGlzLl9jYWxjdWxhdGVEZWZhdWx0Wm9vbUxldmVsKClcbiAgICBjb25zdCBtYXhab29tID0gTWF0aC5tYXgoMSwgZGVmYXVsdFpvb20gKiAyKVxuICAgIGNvbnN0IG1pblpvb20gPSB0aGlzLm1pbmltdW1cbiAgICByZXR1cm4gTWF0aC5tYXgobWluWm9vbSwgTWF0aC5taW4obWF4Wm9vbSwgem9vbSkpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHRyYW5zaXRpb24gdG8gdGhlIGdpdmVuIHpvb20gbGV2ZWxcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHpvb21cbiAgICogQHBhcmFtIHtCb29sZWFufSBpbnN0YW50ID0gZmFsc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIHNldCAoem9vbSwgaW5zdGFudCA9IGZhbHNlLCBjYWxsYmFjaykge1xuICAgIHRoaXMuX3RhcmdldFpvb20gPSB6b29tXG4gICAgdGhpcy5fbWVkaWF0b3IuZW1pdChDb25zdGFudHMuRVZFTlRTLlpPT00sIHpvb20pXG5cbiAgICBpZiAodGhpcy5fem9vbSA9PT0gdGhpcy5fdGFyZ2V0Wm9vbSkge1xuICAgICAgaW5zdGFudCA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdHJhbnNpdGlvbikge1xuICAgICAgdGhpcy5fdHJhbnNpdGlvbi5zdG9wKClcbiAgICAgIHRoaXMuX3RyYW5zaXRpb24gPSBudWxsXG4gICAgfVxuXG4gICAgY29uc3Qgb25ab29tRG9uZSA9ICh6b29tKSA9PiB7XG4gICAgICB0aGlzLl9zZXQoem9vbSwgKCkgPT4ge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICAgIHRoaXMuX21lZGlhdG9yLmVtaXQoQ29uc3RhbnRzLkVWRU5UUy5aT09NX0RPTkUsIHRoaXMuX3pvb20pXG4gICAgICB9KVxuICAgICAgdGhpcy5fdHJhbnNpdGlvbiA9IG51bGxcbiAgICAgIHRoaXMuX3Nkay5zZXRUZXh0dXJlUXVhbGl0eShNYXRoLm1pbih0aGlzLl96b29tLCAxKSlcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFudCkge1xuICAgICAgcmV0dXJuIG9uWm9vbURvbmUoem9vbSlcbiAgICB9XG5cbiAgICB0aGlzLl90cmFuc2l0aW9uID0gbmV3IFRyYW5zaXRpb24oeyB6b29tOiB0aGlzLl96b29tIH0sIHsgem9vbTogem9vbSB9LCB7XG4gICAgICBkdXJhdGlvbjogWk9PTV9UUkFOU0lUSU9OX0RVUkFUSU9OLFxuICAgICAgZWFzaW5nOiAnZWFzZU91dFF1YXJ0JyxcbiAgICAgIG9uVXBkYXRlOiAob2JqKSA9PiB7XG4gICAgICAgIHRoaXMuX3NldChvYmouem9vbSlcbiAgICAgIH0sXG4gICAgICBvbkRvbmU6IChvYmopID0+IHtcbiAgICAgICAgb25ab29tRG9uZShvYmouem9vbSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMuX3RyYW5zaXRpb24uc3RhcnQoKVxuICB9XG5cbiAgLyoqXG4gICAqIExvb3AgbWV0aG9kXG4gICAqL1xuICB0aWNrICgpIHtcbiAgICBpZiAodGhpcy5fdHJhbnNpdGlvbikge1xuICAgICAgdGhpcy5fdHJhbnNpdGlvbi51cGRhdGUoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjbG9zZXN0IHpvb20gbGV2ZWwgdG8gdGhlIGdpdmVuIG9uZVxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHpvb21MZXZlbFxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGRpcmVjdGlvblxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0Q2xvc2VzdFpvb21MZXZlbCAoem9vbUxldmVsLCBkaXJlY3Rpb24pIHtcbiAgICBsZXQgY2xvc2VzdFxuICAgIGlmIChkaXJlY3Rpb24gPT09IC0xKSB7XG4gICAgICBjbG9zZXN0ID0gdGhpcy5fem9vbUxldmVsc1xuICAgICAgICAuZmlsdGVyKChsKSA9PiBsIDwgem9vbUxldmVsKVxuICAgICAgICAucG9wKClcbiAgICAgIGlmICghY2xvc2VzdCkge1xuICAgICAgICBjbG9zZXN0ID0gdGhpcy5fem9vbUxldmVsc1t0aGlzLl96b29tTGV2ZWxzLmxlbmd0aCAtIDFdXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IDEpIHtcbiAgICAgIGNsb3Nlc3QgPSB0aGlzLl96b29tTGV2ZWxzXG4gICAgICAgIC5maWx0ZXIoKGwpID0+IGwgPiB6b29tTGV2ZWwpWzBdXG4gICAgICBpZiAoIWNsb3Nlc3QpIHtcbiAgICAgICAgY2xvc2VzdCA9IHRoaXMuX3pvb21MZXZlbHNbMF1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvc2VzdFxuICB9XG5cbiAgLyoqXG4gICAqIFN3aXRjaGVzIHRvIHRoZSBwcmV2aW91cyB6b29tXG4gICAqL1xuICB1bmRvICgpIHtcbiAgICBpZiAoIXRoaXMuX3ByZXZpb3VzWm9vbSkgcmV0dXJuXG4gICAgdGhpcy5zZXQodGhpcy5fcHJldmlvdXNab29tKVxuICAgIHRoaXMuX3ByZXZpb3VzWm9vbSA9IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhY3R1YWwgem9vbSBsZXZlbFxuICAgKiBAcGFyYW0ge051bWJlcn0gbmV3Wm9vbVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldCAobmV3Wm9vbSwgY2FsbGJhY2spIHtcbiAgICB0aGlzLl96b29tID0gbmV3Wm9vbVxuICAgIHRoaXMuX3Nkay5zZXRab29tKHRoaXMuX3pvb20pXG4gICAgdGhpcy5fbWVkaWF0b3IuZW1pdChDb25zdGFudHMuRVZFTlRTLlpPT01fQ0hBTkdFRCwgdGhpcy5fem9vbSlcbiAgICB0aGlzLmVtaXQoJ3NldCcsIHRoaXMuX3pvb20sIGNhbGxiYWNrKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRlZmF1bHQgem9vbSBsZXZlbFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICBfY2FsY3VsYXRlRGVmYXVsdFpvb21MZXZlbCAoKSB7XG4gICAgY29uc3QgZmluYWxEaW1lbnNpb25zID0gdGhpcy5fZWRpdG9yLmdldEZpbmFsRGltZW5zaW9ucyhmYWxzZSlcbiAgICBjb25zdCBjYW52YXNEaW1lbnNpb25zID0gdGhpcy5fZWRpdG9yLmdldENhbnZhc0RpbWVuc2lvbnMoKVxuICAgIGNvbnN0IGRlZmF1bHREaW1lbnNpb25zID0gU0RLVXRpbHMucmVzaXplVmVjdG9yVG9GaXQoZmluYWxEaW1lbnNpb25zLCBjYW52YXNEaW1lbnNpb25zKVxuXG4gICAgcmV0dXJuIGRlZmF1bHREaW1lbnNpb25zXG4gICAgICAuZGl2aWRlKGZpbmFsRGltZW5zaW9ucylcbiAgICAgIC54XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbWluaW11bSB6b29tIGxldmVsXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBnZXQgbWluaW11bSAoKSB7XG4gICAgY29uc3QgZmluYWxEaW1lbnNpb25zID0gdGhpcy5fZWRpdG9yLmdldEZpbmFsRGltZW5zaW9ucygpXG4gICAgY29uc3QgbWluaW11bURpbWVuc2lvbnMgPSBTREtVdGlscy5yZXNpemVWZWN0b3JUb0ZpdChcbiAgICAgIGZpbmFsRGltZW5zaW9ucyxcbiAgICAgIG5ldyBWZWN0b3IyKE1JTl9aT09NX0RJTUVOU0lPTlMsIE1JTl9aT09NX0RJTUVOU0lPTlMpXG4gICAgKVxuXG4gICAgcmV0dXJuIG1pbmltdW1EaW1lbnNpb25zXG4gICAgICAuZGl2aWRlKGZpbmFsRGltZW5zaW9ucylcbiAgICAgIC54XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCB6b29tIGxldmVsXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBnZXQgbGV2ZWwgKCkge1xuICAgIHJldHVybiB0aGlzLl96b29tXG4gIH1cblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgem9vbSBsZXZlbFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgZ2V0IGRlZmF1bHRMZXZlbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRMZXZlbFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdGFyZ2V0IHpvb20gbGV2ZWxcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIGdldCB0YXJnZXRMZXZlbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldFpvb21cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBzbmFwc2hvdCB0byB0aGUgY3VycmVudCB6b29tIHN0YXRlXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBnZXRTbmFwc2hvdCAoKSB7XG4gICAgcmV0dXJuIHsgem9vbTogdGhpcy5fdGFyZ2V0Wm9vbSB9XG4gIH1cblxuICAvKipcbiAgICogUmVzdG9yZSB0aGUgem9vbSBzdGF0ZSB0byB0aGUgZ2l2ZW4gc25hcHNob3RcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHNuYXBzaG90XG4gICAqL1xuICByZXN0b3JlU25hcHNob3QgKHNuYXBzaG90KSB7XG4gICAgdGhpcy5zZXQoc25hcHNob3Quem9vbSwgdHJ1ZSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9saWIvZWRpdG9yL3pvb20uanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFV0aWxzIGFzIFNES1V0aWxzIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5cbmNvbnN0IEVhc2luZ0Z1bmN0aW9ucyA9IHtcbiAgLy8gbm8gZWFzaW5nLCBubyBhY2NlbGVyYXRpb25cbiAgbGluZWFyICh0KSB7IHJldHVybiB0IH0sXG4gIC8vIGFjY2VsZXJhdGluZyBmcm9tIHplcm8gdmVsb2NpdHlcbiAgZWFzZUluUXVhZCAodCkgeyByZXR1cm4gdCAqIHQgfSxcbiAgLy8gZGVjZWxlcmF0aW5nIHRvIHplcm8gdmVsb2NpdHlcbiAgZWFzZU91dFF1YWQgKHQpIHsgcmV0dXJuIHQgKiAoMiAtIHQpIH0sXG4gIC8vIGFjY2VsZXJhdGlvbiB1bnRpbCBoYWxmd2F5LCB0aGVuIGRlY2VsZXJhdGlvblxuICBlYXNlSW5PdXRRdWFkICh0KSB7IHJldHVybiB0IDwgMC41ID8gMiAqIHQgKiB0IDogLTEgKyAoNCAtIDIgKiB0KSAqIHQgfSxcbiAgLy8gYWNjZWxlcmF0aW5nIGZyb20gemVybyB2ZWxvY2l0eVxuICBlYXNlSW5DdWJpYyAodCkgeyByZXR1cm4gdCAqIHQgKiB0IH0sXG4gIC8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG4gIGVhc2VPdXRDdWJpYyAodCkgeyByZXR1cm4gKC0tdCkgKiB0ICogdCArIDEgfSxcbiAgLy8gYWNjZWxlcmF0aW9uIHVudGlsIGhhbGZ3YXksIHRoZW4gZGVjZWxlcmF0aW9uXG4gIGVhc2VJbk91dEN1YmljICh0KSB7IHJldHVybiB0IDwgMC41ID8gNCAqIHQgKiB0ICogdCA6ICh0IC0gMSkgKiAoMiAqIHQgLSAyKSAqICgyICogdCAtIDIpICsgMSB9LFxuICAvLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG4gIGVhc2VJblF1YXJ0ICh0KSB7IHJldHVybiB0ICogdCAqIHQgKiB0IH0sXG4gIC8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG4gIGVhc2VPdXRRdWFydCAodCkgeyByZXR1cm4gMSAtICgtLXQpICogdCAqIHQgKiB0IH0sXG4gIC8vIGFjY2VsZXJhdGlvbiB1bnRpbCBoYWxmd2F5LCB0aGVuIGRlY2VsZXJhdGlvblxuICBlYXNlSW5PdXRRdWFydCAodCkgeyByZXR1cm4gdCA8IDAuNSA/IDggKiB0ICogdCAqIHQgKiB0IDogMSAtIDggKiAoLS10KSAqIHQgKiB0ICogdCB9LFxuICAvLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG4gIGVhc2VJblF1aW50ICh0KSB7IHJldHVybiB0ICogdCAqIHQgKiB0ICogdCB9LFxuICAvLyBkZWNlbGVyYXRpbmcgdG8gemVybyB2ZWxvY2l0eVxuICBlYXNlT3V0UXVpbnQgKHQpIHsgcmV0dXJuIDEgKyAoLS10KSAqIHQgKiB0ICogdCAqIHQgfSxcbiAgLy8gYWNjZWxlcmF0aW9uIHVudGlsIGhhbGZ3YXksIHRoZW4gZGVjZWxlcmF0aW9uXG4gIGVhc2VJbk91dFF1aW50ICh0KSB7IHJldHVybiB0IDwgMC41ID8gMTYgKiB0ICogdCAqIHQgKiB0ICogdCA6IDEgKyAxNiAqICgtLXQpICogdCAqIHQgKiB0ICogdCB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zaXRpb24ge1xuICBjb25zdHJ1Y3RvciAob2JqLCB0YXJnZXRWYWx1ZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLl9vYmogPSBvYmpcbiAgICB0aGlzLl9pbml0aWFsT2JqID0gU0RLVXRpbHMuY2xvbmUob2JqKVxuICAgIHRoaXMuX3RhcmdldFZhbHVlcyA9IHRhcmdldFZhbHVlc1xuXG4gICAgdGhpcy5fb3B0aW9ucyA9IFNES1V0aWxzLmRlZmF1bHRzKG9wdGlvbnMsIHtcbiAgICAgIGR1cmF0aW9uOiAxMDAwLFxuICAgICAgZWFzaW5nOiAnZWFzZU91dFF1YWQnLFxuICAgICAgb25VcGRhdGU6ICgpID0+IHt9LFxuICAgICAgb25Eb25lOiAoKSA9PiB7fVxuICAgIH0pXG5cbiAgICB0aGlzLl9zdGFydGVkQXQgPSBudWxsXG4gICAgdGhpcy5fcnVubmluZyA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoaXMgdHJhbnNpdGlvblxuICAgKi9cbiAgc3RhcnQgKCkge1xuICAgIHRoaXMuX3N0YXJ0ZWRBdCA9ICtuZXcgRGF0ZSgpXG4gICAgdGhpcy5fcnVubmluZyA9IHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB2YWx1ZXMgb2YgdGhpcyB0cmFuc2l0aW9uXG4gICAqL1xuICB1cGRhdGUgKCkge1xuICAgIGlmICghdGhpcy5fcnVubmluZykgcmV0dXJuXG5cbiAgICBjb25zdCB0aW1lUGFzc2VkID0gKCtuZXcgRGF0ZSgpKSAtIHRoaXMuX3N0YXJ0ZWRBdFxuICAgIGNvbnN0IGVhc2luZ0ZuID0gRWFzaW5nRnVuY3Rpb25zW3RoaXMuX29wdGlvbnMuZWFzaW5nXVxuICAgIGNvbnN0IHRpbWVQcm9ncmVzcyA9IE1hdGgubWluKDEsIHRpbWVQYXNzZWQgLyB0aGlzLl9vcHRpb25zLmR1cmF0aW9uKVxuICAgIGNvbnN0IHByb2dyZXNzID0gZWFzaW5nRm4odGltZVByb2dyZXNzKVxuXG4gICAgZm9yIChsZXQga2V5IGluIHRoaXMuX2luaXRpYWxPYmopIHtcbiAgICAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IHRoaXMuX2luaXRpYWxPYmpba2V5XVxuICAgICAgY29uc3QgdGFyZ2V0VmFsdWUgPSB0aGlzLl90YXJnZXRWYWx1ZXNba2V5XVxuICAgICAgdGhpcy5fb2JqW2tleV0gPSBpbml0aWFsVmFsdWUgKyAodGFyZ2V0VmFsdWUgLSBpbml0aWFsVmFsdWUpICogcHJvZ3Jlc3NcbiAgICB9XG5cbiAgICB0aGlzLl9vcHRpb25zLm9uVXBkYXRlKHRoaXMuX29iailcblxuICAgIGlmICh0aW1lUHJvZ3Jlc3MgPj0gMSkge1xuICAgICAgdGhpcy5fb3B0aW9ucy5vbkRvbmUodGhpcy5fb2JqKVxuICAgICAgdGhpcy5zdG9wKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgdGhpcyB0cmFuc2l0aW9uXG4gICAqL1xuICBzdG9wICgpIHtcbiAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2VcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9saWIvdHJhbnNpdGlvbi5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgVXRpbHMgYXMgU0RLVXRpbHMgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCB7IENvbnN0YW50cywgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi4vLi4vZ2xvYmFscydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWRpdG9ySGlzdG9yeSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yIChlZGl0b3IsIHNkaywgbWVkaWF0b3IpIHtcbiAgICBzdXBlcigpXG5cbiAgICB0aGlzLl9lZGl0b3IgPSBlZGl0b3JcbiAgICB0aGlzLl9zZGsgPSBzZGtcbiAgICB0aGlzLl9tZWRpYXRvciA9IG1lZGlhdG9yXG5cbiAgICB0aGlzLl91bmRvSXRlbXMgPSBbXVxuICAgIHRoaXMuX3JlZG9JdGVtcyA9IFtdXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBFZGl0b3JIaXN0b3J5IGhhcyBhbiBpbml0aWFsIHN0YXRlIHN0b3JlZC5cbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqIEBtZW1iZXJvZiBFZGl0b3JIaXN0b3J5XG4gICAqL1xuICBoYXNJbml0aWFsU3RhdGUgKCkge1xuICAgIHJldHVybiAoU0RLVXRpbHMuQXJyYXkuZmxhdHRlbih0aGlzLmdldFVuZG9JdGVtcygpKS5sZW5ndGggPiAwKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhbiB1bmRvIG9wZXJhdGlvbiBpcyBwb3NzaWJsZS5cbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGlzVW5kb0F2YWlsYWJsZSAoKSB7XG4gICAgcmV0dXJuIChTREtVdGlscy5BcnJheS5mbGF0dGVuKHRoaXMuZ2V0VW5kb0l0ZW1zKCkpLmxlbmd0aCA+IDEpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgcmVkbyBvcGVyYXRpb24gaXMgcG9zc2libGUuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBpc1JlZG9BdmFpbGFibGUgKCkge1xuICAgIHJldHVybiAoU0RLVXRpbHMuQXJyYXkuZmxhdHRlbih0aGlzLmdldFJlZG9JdGVtcygpKS5sZW5ndGggPiAwKVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHN0YXRlIHNuYXBzaG90IHRvIHRoZSBFZGl0b3JIaXN0b3J5XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbc2NvcGU9J2dsb2JhbCddXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2dyb3VwZWQ9ZmFsc2VdXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbaWRlbnRpZmllcj0nJ11cbiAgICogQHBhcmFtIHtPYmplY3R9IFtkYXRhPW51bGxdXG4gICAqIEBtZW1iZXJvZiBFZGl0b3JIaXN0b3J5XG4gICAqL1xuICBhZGRTbmFwc2hvdCAoc2NvcGUgPSAnZ2xvYmFsJywgZ3JvdXBlZCA9IGZhbHNlLCBpZGVudGlmaWVyID0gJycsIGNvbnRyb2xzID0gJycsIGRhdGEgPSBudWxsKSB7XG4gICAgY29uc3Qgc25hcHNob3QgPSB0aGlzLl9lZGl0b3IuZ2V0U25hcHNob3QoKVxuXG4gICAgY29uc3QgaXRlbSA9IHsgc25hcHNob3QsIHNjb3BlLCBpZGVudGlmaWVyLCBjb250cm9scywgZGF0YSB9XG5cbiAgICBjb25zdCBsYXN0SXRlbSA9IFNES1V0aWxzLkFycmF5Lmxhc3QodGhpcy5fdW5kb0l0ZW1zKVxuXG4gICAgLy8gSW4gdGhlIGNhc2Ugb2YgZ3JvdXBlZCBpdGVtcywga2VlcCBvbmx5IHRoZSBsYXN0ZXN0IHNuYXBzaG90XG4gICAgaWYgKGxhc3RJdGVtICYmIGdyb3VwZWQgJiYgKGl0ZW0uaWRlbnRpZmllciA9PT0gbGFzdEl0ZW0uaWRlbnRpZmllcikpIHtcbiAgICAgIHRoaXMuX3VuZG9JdGVtcy5wb3AoKVxuICAgIH1cblxuICAgIHRoaXMuX3VuZG9JdGVtcy5wdXNoKGl0ZW0pXG4gICAgdGhpcy5fbWVkaWF0b3IuZW1pdChDb25zdGFudHMuRVZFTlRTLkhJU1RPUllfVVBEQVRFRCwgaXRlbS5vcGVyYXRpb24pXG5cbiAgICB0aGlzLl9yZWRvSXRlbXMgPSBbXVxuICB9XG5cbiAgdW5kbyAoKSB7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLl91bmRvSXRlbXNcbiAgICBjb25zdCBjdXJyZW50SXRlbSA9IGl0ZW1zLnBvcCgpXG4gICAgY29uc3QgdW5kb0l0ZW0gPSBTREtVdGlscy5BcnJheS5sYXN0KGl0ZW1zKVxuXG4gICAgaWYgKCF1bmRvSXRlbSB8fCAhY3VycmVudEl0ZW0pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2VkaXRvci5yZXN0b3JlU25hcHNob3QodW5kb0l0ZW0uc25hcHNob3QpXG4gICAgdGhpcy5fbWVkaWF0b3IuZW1pdChDb25zdGFudHMuRVZFTlRTLkhJU1RPUllfVU5ETywgdW5kb0l0ZW0sIGN1cnJlbnRJdGVtKVxuICAgIHRoaXMuX3JlZG9JdGVtcy5wdXNoKGN1cnJlbnRJdGVtKVxuICAgIHRoaXMuZW1pdCgndW5kbycpXG4gIH1cblxuICByZWRvICgpIHtcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMuX3JlZG9JdGVtc1xuICAgIGNvbnN0IHJlZG9JdGVtID0gaXRlbXMucG9wKClcblxuICAgIGlmICghcmVkb0l0ZW0pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2VkaXRvci5yZXN0b3JlU25hcHNob3QocmVkb0l0ZW0uc25hcHNob3QpXG5cbiAgICB0aGlzLl9tZWRpYXRvci5lbWl0KENvbnN0YW50cy5FVkVOVFMuSElTVE9SWV9SRURPLCByZWRvSXRlbSlcbiAgICB0aGlzLl91bmRvSXRlbXMucHVzaChyZWRvSXRlbSlcbiAgICB0aGlzLmVtaXQoJ3JlZG8nKVxuICB9XG5cbiAgcmVtb3ZlICh7IHNjb3BlLCBpZGVudGlmaWVyLCBjb250cm9scyB9KSB7XG4gICAgY29uc3QgZmlsdGVyRnVuYyA9IChpdGVtLCBpbmRleCwgYXJyYXkpID0+XG4gICAgICAoc2NvcGUgPyBzY29wZSA9PT0gaXRlbS5zY29wZSA6IHRydWUpICYmXG4gICAgICAoaWRlbnRpZmllciA/IGlkZW50aWZpZXIgPT09IGl0ZW0uaWRlbnRpZmllciA6IHRydWUpICYmXG4gICAgICAoY29udHJvbHMgPyBjb250cm9scyA9PT0gaXRlbS5jb250cm9scyA6IHRydWUpXG5cbiAgICB0aGlzLl91bmRvSXRlbXMgPSBTREtVdGlscy5BcnJheS5yZW1vdmUodGhpcy5fdW5kb0l0ZW1zLCBmaWx0ZXJGdW5jKVxuICAgIHRoaXMuX3JlZG9JdGVtcyA9IFNES1V0aWxzLkFycmF5LnJlbW92ZSh0aGlzLl9yZWRvSXRlbXMsIGZpbHRlckZ1bmMpXG4gIH1cblxuICByZW1vdmVMb2NhbCAoaWRlbnRpZmllciA9IG51bGwsIGNvbnRyb2xzID0gbnVsbCkge1xuICAgIHRoaXMucmVtb3ZlKHsgc2NvcGU6ICdsb2NhbCcsIGlkZW50aWZpZXIsIGNvbnRyb2xzIH0pXG4gIH1cblxuICByZW1vdmVHbG9iYWwgKGlkZW50aWZpZXIgPSBudWxsLCBjb250cm9scyA9IG51bGwpIHtcbiAgICB0aGlzLnJlbW92ZSh7IHNjb3BlOiAnZ2xvYmFsJywgaWRlbnRpZmllciwgY29udHJvbHMgfSlcbiAgfVxuXG4gIHJlbW92ZUNvbnRyb2xzIChjb250cm9scywgc2NvcGUgPSBudWxsLCBpZGVudGlmaWVyID0gbnVsbCkge1xuICAgIHRoaXMucmVtb3ZlKHsgc2NvcGUsIGNvbnRyb2xzLCBpZGVudGlmaWVyIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBoaXN0b3J5XG4gICAqL1xuICByZXNldCAoKSB7XG4gICAgdGhpcy5fdW5kb0l0ZW1zID0gW10gLy8gU0RLVXRpbHMuQXJyYXkudGFpbCh0aGlzLl91bmRvSXRlbXMpXG4gICAgdGhpcy5fcmVkb0l0ZW1zID0gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBoaXN0b3J5IHVuZG8gaXRlbXNcbiAgICogQHJldHVybiB7T2JqZWN0W119XG4gICAqL1xuICBnZXRVbmRvSXRlbXMgKCkge1xuICAgIHJldHVybiBbLi4udGhpcy5fdW5kb0l0ZW1zXVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIGhpc3RvcnkgdW5kbyBpdGVtc1xuICAgKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAgICovXG4gIGdldEl0ZW1zICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRVbmRvSXRlbXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIHRoZSByZWRvIGhpc3RvcnkgcmVkbyBpdGVtc1xuICAgKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAgICovXG4gIGdldFJlZG9JdGVtcyAoKSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLl9yZWRvSXRlbXNdXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvbGliL2VkaXRvci9oaXN0b3J5LmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgU2VyaWFsaXplciBmcm9tICcuL3NlcmlhbGl6ZXInXG5pbXBvcnQgRGVzZXJpYWxpemVyIGZyb20gJy4vZGVzZXJpYWxpemVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJpYWxpemF0aW9uIHtcbiAgY29uc3RydWN0b3IgKGVkaXRvcikge1xuICAgIHRoaXMuX2VkaXRvciA9IGVkaXRvclxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGVkaXRvciBzdGF0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgc2VyaWFsaXplICguLi5hcmdzKSB7XG4gICAgY29uc3Qgc2VyaWFsaXplciA9IG5ldyBTZXJpYWxpemVyKHRoaXMuX2VkaXRvcilcbiAgICByZXR1cm4gc2VyaWFsaXplci5zZXJpYWxpemUoLi4uYXJncylcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIGRhdGFcbiAgICogQHBhcmFtICB7T2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBkZXNlcmlhbGl6ZSAoZGF0YSkge1xuICAgIGNvbnN0IGRlc2VyaWFsaXplciA9IG5ldyBEZXNlcmlhbGl6ZXIodGhpcy5fZWRpdG9yLCBkYXRhKVxuICAgIHJldHVybiBkZXNlcmlhbGl6ZXIuZGVzZXJpYWxpemUoKVxuICB9XG59XG5cblNlcmlhbGl6YXRpb24udmVyc2lvbiA9ICcxLjAuMCdcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL3NlcmlhbGl6YXRpb24vMS4wLjAvaW5kZXguanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMjM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEluIHNsb3BweSBtb2RlLCB1bmJvdW5kIGB0aGlzYCByZWZlcnMgdG8gdGhlIGdsb2JhbCBvYmplY3QsIGZhbGxiYWNrIHRvXG4gIC8vIEZ1bmN0aW9uIGNvbnN0cnVjdG9yIGlmIHdlJ3JlIGluIGdsb2JhbCBzdHJpY3QgbW9kZS4gVGhhdCBpcyBzYWRseSBhIGZvcm1cbiAgLy8gb2YgaW5kaXJlY3QgZXZhbCB3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeS5cbiAgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcyB9KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKVxuKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanNcbi8vIG1vZHVsZSBpZCA9IDI0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgT3B0aW9uVHlwZSwgQ29uZmlndXJhYmxlIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvbnQgZXh0ZW5kcyBDb25maWd1cmFibGUge31cblxuLyoqXG4gKiBTcGVjaWZpZXMgdGhlIGF2YWlsYWJsZSBvcHRpb25zIGZvciB0aGUgRm9udCBjbGFzc1xuICogQHR5cGUge09iamVjdH1cbiAqIEBpZ25vcmVcbiAqL1xuRm9udC5wcm90b3R5cGUuYXZhaWxhYmxlT3B0aW9ucyA9IHtcbiAgZm9udEZhbWlseTogeyB0eXBlOiBPcHRpb25UeXBlLlNUUklORywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgdmFyaWF0aW9uczogeyB0eXBlOiBPcHRpb25UeXBlLkFSUkFZLCByZXF1aXJlZDogdHJ1ZSB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9hc3NldHMvZm9udC5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IEJhc2VGb250TG9hZGVyIGZyb20gJy4vYmFzZS1mb250LWxvYWRlcidcblxuY29uc3QgRk9OVF9TVFlMRVMgPSB7XG4gIGl0YWxpYzogJ2knXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdvb2dsZUZvbnRMb2FkZXIgZXh0ZW5kcyBCYXNlRm9udExvYWRlciB7XG4gIGxvYWQgKCkge1xuICAgIGlmICh0aGlzLl9mb250cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2FkZFN0eWxlc2hlZXRUYWcoKVxuICAgIH1cbiAgICByZXR1cm4gc3VwZXIubG9hZCgpXG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgPGxpbms+IHRhZyB0byB0aGUgaGVhZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZFN0eWxlc2hlZXRUYWcgKCkge1xuICAgIGNvbnN0IGZhbWlsaWVzID0gdGhpcy5fZ2V0RmFtaWxpZXNTdHJpbmcoKVxuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJylcbiAgICBsaW5rLnJlbCA9ICdzdHlsZXNoZWV0J1xuICAgIGxpbmsuaHJlZiA9IGBodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9JHtmYW1pbGllc31gXG5cbiAgICBjb25zdCBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXVxuICAgIGhlYWQuYXBwZW5kQ2hpbGQobGluaylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYWxsIEdvb2dsZSBGb250cyBmYW1pbGllcyB0aGF0XG4gICAqIHNob3VsZCBiZSBsb2FkZWRcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldEZhbWlsaWVzU3RyaW5nICgpIHtcbiAgICBjb25zdCBmYW1pbGllcyA9IHt9XG4gICAgdGhpcy5fZm9udHMuZm9yRWFjaCgoZm9udCkgPT4ge1xuICAgICAgY29uc3QgZm9udEZhbWlseSA9IGZvbnQuZ2V0Rm9udEZhbWlseSgpXG4gICAgICBjb25zdCBmb250U3R5bGUgPSBmb250LmdldEZvbnRTdHlsZSgpXG4gICAgICBjb25zdCBmb250V2VpZ2h0ID0gZm9udC5nZXRGb250V2VpZ2h0KClcbiAgICAgIGZhbWlsaWVzW2ZvbnRGYW1pbHldID0gZmFtaWxpZXNbZm9udEZhbWlseV0gfHwgW11cbiAgICAgIGlmICh0eXBlb2YgZm9udFdlaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZmFtaWxpZXNbZm9udEZhbWlseV0ucHVzaChcbiAgICAgICAgICBgJHtmb250V2VpZ2h0fSR7Rk9OVF9TVFlMRVNbZm9udFN0eWxlXSB8fCAnJ31gXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZhbWlsaWVzW2ZvbnRGYW1pbHldLnB1c2goNDAwKSAvLyBkZWZhdWx0IHdlaWdodFxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBmYW1pbHlTdHJpbmdzID0gW11cbiAgICBmb3IgKGxldCBuYW1lIGluIGZhbWlsaWVzKSB7XG4gICAgICBjb25zdCB2YXJpYW50cyA9IGZhbWlsaWVzW25hbWVdXG4gICAgICBjb25zdCB2YXJpYW50c1N0cmluZyA9ICh2YXJpYW50cy5sZW5ndGggPyBgOiR7dmFyaWFudHMuam9pbignLCcpfWAgOiAnJylcbiAgICAgIGNvbnN0IG5hbWVTdHJpbmcgPSBuYW1lLnJlcGxhY2UoJyAnLCAnKycpICsgdmFyaWFudHNTdHJpbmdcbiAgICAgIGZhbWlseVN0cmluZ3MucHVzaChuYW1lU3RyaW5nKVxuICAgIH1cblxuICAgIHJldHVybiBmYW1pbHlTdHJpbmdzLmpvaW4oJ3wnKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2xpYi9mb250LWxvYWRlci9sb2FkZXJzL2dvb2dsZS1mb250LWxvYWRlci5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IEZvbnRSdWxlciBmcm9tICcuL2ZvbnQtcnVsZXInXG5cbmNvbnN0IG5vdyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vd1xuICA/IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cuYmluZCh3aW5kb3cucGVyZm9ybWFuY2UpXG4gIDogcmVxdWlyZSgncGVyZm9ybWFuY2Utbm93JykpXG5cbmNvbnN0IE9CU0VSVkVfSU5URVJWQUwgPSA1MFxuY29uc3QgT0JTRVJWRV9USU1FT1VUID0gNTAwMFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb250T2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3RvciAoZm9udFZhcmlhdGlvbikge1xuICAgIHRoaXMuX2ZvbnRWYXJpYXRpb24gPSBmb250VmFyaWF0aW9uXG5cbiAgICB0aGlzLl9kZWZhdWx0Rm9udFJ1bGVyID0gbmV3IEZvbnRSdWxlcigpXG4gICAgdGhpcy5fY3VzdG9tRm9udFJ1bGVyID0gbmV3IEZvbnRSdWxlcih0aGlzLl9mb250VmFyaWF0aW9uKVxuICB9XG5cbiAgb2JzZXJ2ZSAoKSB7XG4gICAgY29uc3Qgc3RhcnRlZEF0ID0gbm93KClcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLl9kZWZhdWx0Rm9udFJ1bGVyLmdldFdpZHRoKCkgIT09IHRoaXMuX2N1c3RvbUZvbnRSdWxlci5nZXRXaWR0aCgpXG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChub3coKSAtIHN0YXJ0ZWRBdCA+PSBPQlNFUlZFX1RJTUVPVVQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBGYWlsZWQgdG8gbG9hZCBmb250ICR7dGhpcy5fZm9udFZhcmlhdGlvbi5nZXRGb250RmFtaWx5KCl9LmApXG4gICAgICAgICAgICBlcnJvci5mb250ID0gdGhpcy5fZm9udFZhcmlhdGlvblxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcilcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIE9CU0VSVkVfSU5URVJWQUwpXG4gICAgfSlcbiAgfVxuXG4gIGRpc3Bvc2UgKCkge1xuICAgIHRoaXMuX2RlZmF1bHRGb250UnVsZXIuZGlzcG9zZSgpXG4gICAgdGhpcy5fY3VzdG9tRm9udFJ1bGVyLmRpc3Bvc2UoKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2xpYi9mb250LWxvYWRlci9mb250LW9ic2VydmVyLmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgRm9udFZhcmlhdGlvbiBmcm9tICdzaGFyZWQvYXNzZXRzL2ZvbnQtdmFyaWF0aW9uJ1xuXG5jb25zdCBGT05UX1NJWkUgPSAzMFxuY29uc3QgQ0hBUkFDVEVSUyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h6eSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9udFJ1bGVyIHtcbiAgY29uc3RydWN0b3IgKGZvbnRWYXJpYXRpb24pIHtcbiAgICB0aGlzLl9mb250VmFyaWF0aW9uID0gZm9udFZhcmlhdGlvbiB8fCBuZXcgRm9udFZhcmlhdGlvbih7XG4gICAgICBmb250RmFtaWx5OiAnVGltZXMgTmV3IFJvbWFuJyxcbiAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJ1xuICAgIH0pXG5cbiAgICB0aGlzLl9jcmVhdGVSdWxlcigpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgcnVsZXIgYW5kIGF0dGFjaGVzIGl0IHRvIHRoZSBET01cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jcmVhdGVSdWxlciAoKSB7XG4gICAgdGhpcy5fcnVsZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMuX3J1bGVyLmlubmVyVGV4dCA9IENIQVJBQ1RFUlNcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX3J1bGVyKVxuICAgIHRoaXMuX3NldFJ1bGVyU3R5bGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIFN0eWxlcyB0aGUgcnVsZXJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRSdWxlclN0eWxlICgpIHtcbiAgICB0aGlzLl9ydWxlci5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAtOTk5OXB4O1xuICAgICAgbGVmdDogLTk5OTlweDtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBmb250OiAke3RoaXMuX2ZvbnRWYXJpYXRpb24uZ2V0Rm9udFN0eWxlKCl9ICR7dGhpcy5fZm9udFZhcmlhdGlvbi5nZXRGb250V2VpZ2h0KCl9ICR7Rk9OVF9TSVpFfXB4ICR7dGhpcy5fZm9udFZhcmlhdGlvbi5nZXRGb250RmFtaWx5KCl9O1xuICAgIGBcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBmb250IHZhcmlhdGlvbiB0byB0aGUgZ2l2ZW4gb25lXG4gICAqIEBwYXJhbSB7UGhvdG9FZGl0b3JTREsuVUkuUmVhY3RVSS5Gb250VmFyaWF0aW9ufSBmb250VmFyaWF0aW9uXG4gICAqL1xuICBzZXRGb250VmFyaWF0aW9uIChmb250VmFyaWF0aW9uKSB7XG4gICAgdGhpcy5fZm9udFZhcmlhdGlvbiA9IGZvbnRWYXJpYXRpb25cbiAgICB0aGlzLl9zZXRSdWxlclN0eWxlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB3aWR0aCBvZiB0aGlzIHJ1bGVyXG4gICAqIEByZXR1cm4ge051bWJlcn1cbiAgICovXG4gIGdldFdpZHRoICgpIHtcbiAgICByZXR1cm4gIXRoaXMuX3J1bGVyID8gLTEgOiB0aGlzLl9ydWxlci5vZmZzZXRXaWR0aFxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhpcyBydWxlciBmcm9tIHRoZSBET01cbiAgICovXG4gIGRpc3Bvc2UgKCkge1xuICAgIGlmICh0aGlzLl9ydWxlcikge1xuICAgICAgdGhpcy5fcnVsZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLl9ydWxlcilcbiAgICAgIHRoaXMuX3J1bGVyID0gbnVsbFxuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9saWIvZm9udC1sb2FkZXIvZm9udC1ydWxlci5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgYWRvbmlzIH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBCYXNlRm9udExvYWRlciBmcm9tICcuL2Jhc2UtZm9udC1sb2FkZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbGVGb250TG9hZGVyIGV4dGVuZHMgQmFzZUZvbnRMb2FkZXIge1xuICBsb2FkICgpIHtcbiAgICBjb25zdCBmb250RmFjZXNDU1MgPSBbXVxuXG4gICAgdGhpcy5fZm9udHMuZm9yRWFjaCh2YXJpYXRpb24gPT4ge1xuICAgICAgY29uc3QgZm9udFBhdGggPSB0aGlzLl91aS5nZXRBc3NldFBhdGgodmFyaWF0aW9uLmdldEZpbGVQYXRoKCksIGZhbHNlLCB0cnVlKVxuICAgICAgZm9udEZhY2VzQ1NTLnB1c2goYEBmb250LWZhY2Uge1xuICAgICAgICBmb250LWZhbWlseTogXCIke3ZhcmlhdGlvbi5nZXRGb250RmFtaWx5KCl9XCI7XG4gICAgICAgIHNyYzogdXJsKCcke2ZvbnRQYXRofScpIGZvcm1hdCgnd29mZicpO1xuICAgICAgICBmb250LXdlaWdodDogJHt2YXJpYXRpb24uZ2V0Rm9udFdlaWdodCgpfTtcbiAgICAgICAgZm9udC1zdHlsZTogJHt2YXJpYXRpb24uZ2V0Rm9udFN0eWxlKCl9O1xuICAgICAgfWApXG4gICAgfSlcbiAgICBhZG9uaXMuZ2xvYmFsKGZvbnRGYWNlc0NTUy5qb2luKCdcXG4nKSwgdHJ1ZSlcbiAgICByZXR1cm4gc3VwZXIubG9hZCgpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvbGliL2ZvbnQtbG9hZGVyL2xvYWRlcnMvZmlsZS1mb250LWxvYWRlci5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IFNlcmlhbGl6ZXIgZnJvbSAnLi9zZXJpYWxpemVyJ1xuaW1wb3J0IERlc2VyaWFsaXplciBmcm9tICcuL2Rlc2VyaWFsaXplcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VyaWFsaXphdGlvbiB7XG4gIGNvbnN0cnVjdG9yIChlZGl0b3IpIHtcbiAgICB0aGlzLl9lZGl0b3IgPSBlZGl0b3JcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBlZGl0b3Igc3RhdGVcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIHNlcmlhbGl6ZSAoLi4uYXJncykge1xuICAgIGNvbnN0IHNlcmlhbGl6ZXIgPSBuZXcgU2VyaWFsaXplcih0aGlzLl9lZGl0b3IpXG4gICAgcmV0dXJuIHNlcmlhbGl6ZXIuc2VyaWFsaXplKC4uLmFyZ3MpXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBkYXRhXG4gICAqIEBwYXJhbSAge09iamVjdH0gZGF0YVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgZGVzZXJpYWxpemUgKGRhdGEpIHtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZXIgPSBuZXcgRGVzZXJpYWxpemVyKHRoaXMuX2VkaXRvciwgZGF0YSlcbiAgICByZXR1cm4gZGVzZXJpYWxpemVyLmRlc2VyaWFsaXplKClcbiAgfVxufVxuXG5TZXJpYWxpemF0aW9uLnZlcnNpb24gPSAnMS4wLjEnXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzEuMC4xL2luZGV4LmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgU2VyaWFsaXplciBmcm9tICcuL3NlcmlhbGl6ZXInXG5pbXBvcnQgRGVzZXJpYWxpemVyIGZyb20gJy4vZGVzZXJpYWxpemVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJpYWxpemF0aW9uIHtcbiAgY29uc3RydWN0b3IgKGVkaXRvcikge1xuICAgIHRoaXMuX2VkaXRvciA9IGVkaXRvclxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGVkaXRvciBzdGF0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgc2VyaWFsaXplICguLi5hcmdzKSB7XG4gICAgY29uc3Qgc2VyaWFsaXplciA9IG5ldyBTZXJpYWxpemVyKHRoaXMuX2VkaXRvcilcbiAgICByZXR1cm4gc2VyaWFsaXplci5zZXJpYWxpemUoLi4uYXJncylcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIGRhdGFcbiAgICogQHBhcmFtICB7T2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBkZXNlcmlhbGl6ZSAoZGF0YSkge1xuICAgIGNvbnN0IGRlc2VyaWFsaXplciA9IG5ldyBEZXNlcmlhbGl6ZXIodGhpcy5fZWRpdG9yLCBkYXRhKVxuICAgIHJldHVybiBkZXNlcmlhbGl6ZXIuZGVzZXJpYWxpemUoKVxuICB9XG59XG5cblNlcmlhbGl6YXRpb24udmVyc2lvbiA9ICcyLjAuMCdcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL3NlcmlhbGl6YXRpb24vMi4wLjAvaW5kZXguanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCBTZXJpYWxpemVyIGZyb20gJy4vc2VyaWFsaXplcidcbmltcG9ydCBEZXNlcmlhbGl6ZXIgZnJvbSAnLi9kZXNlcmlhbGl6ZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlcmlhbGl6YXRpb24ge1xuICBjb25zdHJ1Y3RvciAoZWRpdG9yKSB7XG4gICAgdGhpcy5fZWRpdG9yID0gZWRpdG9yXG4gIH1cblxuICAvKipcbiAgICogU2VyaWFsaXplcyB0aGUgZWRpdG9yIHN0YXRlXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBzZXJpYWxpemUgKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBzZXJpYWxpemVyID0gbmV3IFNlcmlhbGl6ZXIodGhpcy5fZWRpdG9yKVxuICAgIHJldHVybiBzZXJpYWxpemVyLnNlcmlhbGl6ZSguLi5hcmdzKVxuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplcyB0aGUgZ2l2ZW4gZGF0YVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGRhdGFcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGRlc2VyaWFsaXplIChkYXRhKSB7XG4gICAgY29uc3QgZGVzZXJpYWxpemVyID0gbmV3IERlc2VyaWFsaXplcih0aGlzLl9lZGl0b3IsIGRhdGEpXG4gICAgcmV0dXJuIGRlc2VyaWFsaXplci5kZXNlcmlhbGl6ZSgpXG4gIH1cbn1cblxuU2VyaWFsaXphdGlvbi52ZXJzaW9uID0gJzIuMC4xJ1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8yLjAuMS9pbmRleC5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IFByZXZpb3VzU2VyaWFsaXplciBmcm9tICcuLi8yLjAuMC9zZXJpYWxpemVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB2MjAxU2VyaWFsaXplciBleHRlbmRzIFByZXZpb3VzU2VyaWFsaXplciB7IH1cblxudjIwMVNlcmlhbGl6ZXIudmVyc2lvbiA9ICcyLjAuMCdcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL3NlcmlhbGl6YXRpb24vMi4wLjEvc2VyaWFsaXplci5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IFByZXZpb3VzRGVzZXJpYWxpemVyIGZyb20gJy4uLzIuMC4wL2Rlc2VyaWFsaXplcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgdjIwMURlc2VyaWFsaXplciBleHRlbmRzIFByZXZpb3VzRGVzZXJpYWxpemVyIHsgfVxuXG52MjAxRGVzZXJpYWxpemVyLnZlcnNpb24gPSAnMi4wLjEnXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzIuMC4xL2Rlc2VyaWFsaXplci5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IFNlcmlhbGl6ZXIgZnJvbSAnLi9zZXJpYWxpemVyJ1xuaW1wb3J0IERlc2VyaWFsaXplciBmcm9tICcuL2Rlc2VyaWFsaXplcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VyaWFsaXphdGlvbiB7XG4gIGNvbnN0cnVjdG9yIChlZGl0b3IpIHtcbiAgICB0aGlzLl9lZGl0b3IgPSBlZGl0b3JcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBlZGl0b3Igc3RhdGVcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIHNlcmlhbGl6ZSAoLi4uYXJncykge1xuICAgIGNvbnN0IHNlcmlhbGl6ZXIgPSBuZXcgU2VyaWFsaXplcih0aGlzLl9lZGl0b3IpXG4gICAgcmV0dXJuIHNlcmlhbGl6ZXIuc2VyaWFsaXplKC4uLmFyZ3MpXG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemVzIHRoZSBnaXZlbiBkYXRhXG4gICAqIEBwYXJhbSAge09iamVjdH0gZGF0YVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgZGVzZXJpYWxpemUgKGRhdGEpIHtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZXIgPSBuZXcgRGVzZXJpYWxpemVyKHRoaXMuX2VkaXRvciwgZGF0YSlcbiAgICByZXR1cm4gZGVzZXJpYWxpemVyLmRlc2VyaWFsaXplKClcbiAgfVxufVxuXG5TZXJpYWxpemF0aW9uLnZlcnNpb24gPSAnMy4wLjAnXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzMuMC4wL2luZGV4LmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgU2VyaWFsaXplciBmcm9tICcuL3NlcmlhbGl6ZXInXG5pbXBvcnQgRGVzZXJpYWxpemVyIGZyb20gJy4vZGVzZXJpYWxpemVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJpYWxpemF0aW9uIHtcbiAgY29uc3RydWN0b3IgKGVkaXRvcikge1xuICAgIHRoaXMuX2VkaXRvciA9IGVkaXRvclxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGVkaXRvciBzdGF0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgc2VyaWFsaXplICguLi5hcmdzKSB7XG4gICAgY29uc3Qgc2VyaWFsaXplciA9IG5ldyBTZXJpYWxpemVyKHRoaXMuX2VkaXRvcilcbiAgICByZXR1cm4gc2VyaWFsaXplci5zZXJpYWxpemUoLi4uYXJncylcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZXMgdGhlIGdpdmVuIGRhdGFcbiAgICogQHBhcmFtICB7T2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBkZXNlcmlhbGl6ZSAoZGF0YSkge1xuICAgIGNvbnN0IGRlc2VyaWFsaXplciA9IG5ldyBEZXNlcmlhbGl6ZXIodGhpcy5fZWRpdG9yLCBkYXRhKVxuICAgIHJldHVybiBkZXNlcmlhbGl6ZXIuZGVzZXJpYWxpemUoKVxuICB9XG59XG5cblNlcmlhbGl6YXRpb24udmVyc2lvbiA9ICczLjEuMCdcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL3NlcmlhbGl6YXRpb24vMy4xLjAvaW5kZXguanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFNES1V0aWxzLCBDb2xvciB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgUHJldmlvdXNTZXJpYWxpemVyIGZyb20gJy4uLzMuMC4wL3NlcmlhbGl6ZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHYzMTBTZXJpYWxpemVyIGV4dGVuZHMgUHJldmlvdXNTZXJpYWxpemVyIHtcbiAgX3NlcmlhbGl6ZVRleHREZXNpZ24gKG9wZXJhdGlvbiwgc3ByaXRlKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHNwcml0ZS5zZXJpYWxpemVPcHRpb25zKFtcbiAgICAgICdwb3NpdGlvbicsICdyb3RhdGlvbicsICdmbGlwSG9yaXpvbnRhbGx5JywgJ2ZsaXBWZXJ0aWNhbGx5JyxcbiAgICAgICd0ZXh0JywgJ2NvbG9yJywgJ3dpZHRoJywgJ3NlZWQnLCAnaW52ZXJ0ZWQnXG4gICAgXSwgdHJ1ZSlcblxuICAgIG9wdGlvbnMuY29sb3IgPSB7XG4gICAgICByZ2JhOiBvcHRpb25zLmNvbG9yXG4gICAgfVxuXG4gICAgY29uc3QgbGF5b3V0ID0gc3ByaXRlLmdldExheW91dCgpXG5cbiAgICBpZiAobGF5b3V0KSB7XG4gICAgICBvcHRpb25zLmlkZW50aWZpZXIgPSBsYXlvdXQuY29uc3RydWN0b3IuaWRlbnRpZmllclxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAndGV4dGRlc2lnbicsXG4gICAgICBvcHRpb25zXG4gICAgfVxuICB9XG59XG5cbnYzMTBTZXJpYWxpemVyLnZlcnNpb24gPSAnMy4xLjAnXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvc3JjL2pzL3NoYXJlZC9zZXJpYWxpemF0aW9uLzMuMS4wL3NlcmlhbGl6ZXIuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IENvbG9yLCBDb25zdGFudHMgfSBmcm9tICdnbG9iYWxzJ1xuaW1wb3J0IFByZXZpb3VzRGVzZXJpYWxpemVyIGZyb20gJy4uLzMuMC4wL2Rlc2VyaWFsaXplcidcbmltcG9ydCBUZXh0RGVzaWduTWFuYWdlciBmcm9tICdzaGFyZWQvbWFuYWdlcnMvdGV4dC1kZXNpZ24tbWFuYWdlcidcbmltcG9ydCBGb250TWFuYWdlciBmcm9tICdzaGFyZWQvbWFuYWdlcnMvZm9udC1tYW5hZ2VyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB2MzEwRGVzZXJpYWxpemVyIGV4dGVuZHMgUHJldmlvdXNEZXNlcmlhbGl6ZXIge1xuICBfZGVzZXJpYWxpemVUZXh0RGVzaWduIChvcGVyYXRpb24sIHNwcml0ZSkge1xuICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gc3ByaXRlXG4gICAgY29uc3QgeyBwb3NpdGlvbiwgcm90YXRpb24sIGZsaXBIb3Jpem9udGFsbHksIGZsaXBWZXJ0aWNhbGx5LFxuICAgICAgdGV4dCwgY29sb3IsIHdpZHRoLCBzZWVkLCBpbnZlcnRlZCwgaWRlbnRpZmllciB9ID0gb3B0aW9uc1xuXG4gICAgY29uc3QgdGV4dERlc2lnbk1hbmFnZXIgPSBuZXcgVGV4dERlc2lnbk1hbmFnZXIodGhpcy5fdWksIHRoaXMuX2dldE9wdGlvbnMoJ3RleHRkZXNpZ24nKSlcbiAgICBjb25zdCBmb250TWFuYWdlciA9IG5ldyBGb250TWFuYWdlcih0aGlzLl91aSwgeyBmb250czogQ29uc3RhbnRzLkRFRkFVTFRTLlRFWFRfREVTSUdOX0ZPTlRTLCByZXBsYWNlRm9udHM6IHRydWUgfSlcbiAgICBjb25zdCBBc3NldE1hbmFnZXIgPSBvcGVyYXRpb24uY29uc3RydWN0b3IuVGV4dERlc2lnblNwcml0ZS5Bc3NldE1hbmFnZXJcbiAgICBjb25zdCBmb250TG9hZGVyID0gdGhpcy5fdWkuZ2V0Rm9udExvYWRlcigpXG5cbiAgICBjb25zdCBMYXlvdXQgPSB0ZXh0RGVzaWduTWFuYWdlci5nZXRMYXlvdXRCeUlkZW50aWZpZXIoaWRlbnRpZmllcilcblxuICAgIGNvbnN0IGxheW91dCA9IG5ldyBMYXlvdXQoKVxuXG4gICAgZm9udExvYWRlci5zZXRGb250cyhmb250TWFuYWdlci5nZXRGb250cygpKVxuXG4gICAgQXNzZXRNYW5hZ2VyLnNldEZvbnRzKHtcbiAgICAgIC4uLkFzc2V0TWFuYWdlci5nZXRGb250cygpLFxuICAgICAgLi4uZm9udE1hbmFnZXIuZ2V0VmFyaWF0aW9uc0J5SWRlbnRpZmllcigpXG4gICAgfSlcblxuICAgIHJldHVybiBmb250TG9hZGVyXG4gICAgICAubG9hZCgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IGltYWdlcyA9IGxheW91dC5nZXRJbWFnZVBhdGhzKCkubWFwKHBhdGggPT4gKHsgcGF0aCwgZnVsbFBhdGg6IHRoaXMuX3VpLmdldEFzc2V0UGF0aChwYXRoKSwgaW1hZ2U6IG51bGwgfSkpXG4gICAgICAgIHJldHVybiBBc3NldE1hbmFnZXJcbiAgICAgICAgICAubG9hZEltYWdlcyhpbWFnZXMpXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgbGF5b3V0Lm9uSW1hZ2VzTG9hZGVkKClcblxuICAgICAgICAgICAgcmV0dXJuIG9wZXJhdGlvbi5jcmVhdGVUZXh0RGVzaWduKHtcbiAgICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgICAgICBmbGlwSG9yaXpvbnRhbGx5LFxuICAgICAgICAgICAgICBmbGlwVmVydGljYWxseSxcbiAgICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgICAgY29sb3I6IENvbG9yLmZyb21BcnJheShjb2xvci5yZ2JhKSxcbiAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgIHNlZWQsXG4gICAgICAgICAgICAgIGludmVydGVkLFxuICAgICAgICAgICAgICBsYXlvdXRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgIH0pXG4gIH1cbn1cblxudjMxMERlc2VyaWFsaXplci52ZXJzaW9uID0gJzMuMS4wJ1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC9tbnQvYy9GaWxlcy9Qcm9qZWN0cy9Xb3JrL0ltZ0x5L3Blc2RrLWh0bWw1L3NyYy9qcy9zaGFyZWQvc2VyaWFsaXphdGlvbi8zLjEuMC9kZXNlcmlhbGl6ZXIuanMiLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIEJhc2VDb21wb25lbnQsIFV0aWxzIH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBOYXZpZ2F0aW9uSXRlbUNvbXBvbmVudCBmcm9tICcuL25hdmlnYXRpb24taXRlbS1jb21wb25lbnQnXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZpZ2F0aW9uQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX25lZWRzU3R5bGVGaXhlcyA9IHRydWVcbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vbk1vdXNlRW50ZXInLFxuICAgICAgJ19vbk1vdXNlTGVhdmUnXG4gICAgKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzSG92ZXJpbmc6IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIHJlbmRlcmluZyB3aGVuIG5ldyBwcm9wcyBvciBzdGF0ZSBhcmUgYmVpbmcgcmVjZWl2ZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmV4dFN0YXRlXG4gICAqL1xuICBzaG91bGRDb21wb25lbnRVcGRhdGUgKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuIG5leHRQcm9wcy5jdXJyZW50Q29udHJvbCAhPT0gdGhpcy5wcm9wcy5jdXJyZW50Q29udHJvbCB8fFxuICAgICAgbmV4dFN0YXRlLmlzSG92ZXJpbmcgIT09IHRoaXMuc3RhdGUuaXNIb3ZlcmluZ1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gYW4gaXRlbSBoYXMgYmVlbiBjbGlja2VkXG4gICAqIEBwYXJhbSAge1N0cmluZ30gaXRlbVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uSXRlbUNsaWNrIChpdGVtKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHJldHVyblxuXG4gICAgdGhpcy5fb25Nb3VzZUxlYXZlKClcbiAgICB0aGlzLnByb3BzLm9uQ29udHJvbFN3aXRjaChpdGVtKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIG1vdXNlIGVudGVycyB0aGUgbmF2aWdhdGlvbiBiYXIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Nb3VzZUVudGVyICgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCkgcmV0dXJuXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzSG92ZXJpbmc6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIG1vdXNlIGxlYXZlcyB0aGUgbmF2aWdhdGlvbiBiYXIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Nb3VzZUxlYXZlICgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCkgcmV0dXJuXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzSG92ZXJpbmc6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBzdHlsZXMgbmVlZCB0byBiZSBmaXhlZCBieSB0aGUgSmF2YVNjcmlwdC5cbiAgICogVGhpcyBuZWVkcyB0byBiZSBkb25lIHRoYW5rcyB0byBvbGRlciBJbnRlcm5ldCBFeHBsb3JlciBicm93c2VycyB3aGljaCBoYXZlXG4gICAqIGEgYnVuY2ggb2YgQ1NTIGJ1Z3MuXG4gICAqL1xuICBmaXhTdHlsZXMgKCkge1xuICAgIGlmIChVdGlscy5Ccm93c2VyLmlzSUVsdGUoMTApKSB7XG4gICAgICBjb25zdCBuYXZIZWlnaHQgPSB0aGlzLl9uYXZpZ2F0aW9uLm9mZnNldEhlaWdodFxuICAgICAgdGhpcy5fZ3JhZGllbnQuc3R5bGUuaGVpZ2h0ID0gYCR7bmF2SGVpZ2h0fXB4YFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgbmF2aWdhdGlvbiBpdGVtcyBpbiB0aGVcbiAgICogZ2l2ZW4gc2VjdGlvbiBhcnJheS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRJdGVtQ291bnQgKHNlY3Rpb25zKSB7XG4gICAgcmV0dXJuIHNlY3Rpb25zLnJlZHVjZSgoY291bnQsIHNlY3Rpb24pID0+IHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBjb3VudCArIHRoaXMuX2dldEl0ZW1Db3VudChzZWN0aW9uKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvdW50ICsgMVxuICAgICAgfVxuICAgIH0sIDApXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgbmF2aWdhdGlvbiBsaXN0IGl0ZW1zXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyTGlzdEl0ZW1zICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3QgeyBpc0hvdmVyaW5nIH0gPSB0aGlzLnN0YXRlXG5cbiAgICBjb25zdCBtYWtlSXRlbSA9IChpdGVtLCBpbmRleCwgbWF4SW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyb2xzID0gZWRpdG9yLmNvbnRyb2xzLmdldChpdGVtKVxuICAgICAgbGV0IHNlbGVjdGVkID0gaXRlbSA9PT0gdGhpcy5wcm9wcy5jdXJyZW50Q29udHJvbFxuICAgICAgcmV0dXJuICg8TmF2aWdhdGlvbkl0ZW1Db21wb25lbnRcbiAgICAgICAga2V5PXtpdGVtfVxuICAgICAgICB0aXRsZT17aXRlbX1cbiAgICAgICAgc2hvd1RpdGxlPXtpc0hvdmVyaW5nfVxuICAgICAgICBpY29uUGF0aD17dGhpcy5fZ2V0QXNzZXRQYXRoKGNvbnRyb2xzLmljb25QYXRoLCB0cnVlKX1cbiAgICAgICAgYWN0aXZlSWNvblBhdGg9e3RoaXMuX2dldEFzc2V0UGF0aChjb250cm9scy5hY3RpdmVJY29uUGF0aCwgdHJ1ZSl9XG4gICAgICAgIHNlbGVjdGVkPXtzZWxlY3RlZH1cbiAgICAgICAgb25DbGljaz17dGhpcy5fb25JdGVtQ2xpY2suYmluZCh0aGlzLCBpdGVtKX1cbiAgICAgICAgYW5pbWF0aW9uRGVsYXk9ezAuMDIgKiBpbmRleH1cbiAgICAgICAgbWF4QW5pbWF0aW9uRGVsYXk9ezAuMDIgKiBtYXhJbmRleH1cbiAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9XG4gICAgICAvPilcbiAgICB9XG5cbiAgICBjb25zdCBtYWtlU2VwYXJhdG9yID0gKGtleSkgPT4ge1xuICAgICAgcmV0dXJuIDxOYXZpZ2F0aW9uSXRlbUNvbXBvbmVudCBrZXk9e2tleX0gaXNTZXBhcmF0b3IgLz5cbiAgICB9XG5cbiAgICBsZXQgZWxlbWVudHMgPSBbXVxuICAgIGNvbnN0IHNlY3Rpb25zID0gdGhpcy5jb250ZXh0Lm9wdGlvbnMuZWRpdG9yLmNvbnRyb2xzT3JkZXJcbiAgICBjb25zdCBtYXhJbmRleCA9IHRoaXMuX2dldEl0ZW1Db3VudChzZWN0aW9ucykgLSAxXG4gICAgc2VjdGlvbnMuZm9yRWFjaCgoc2VjdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlY3Rpb24pKSB7XG4gICAgICAgIHNlY3Rpb24uZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgIGlmICghZWRpdG9yLmNvbnRyb2xzLmlzRW5hYmxlZChpdGVtKSkgcmV0dXJuXG4gICAgICAgICAgZWxlbWVudHMucHVzaChtYWtlSXRlbShpdGVtLCBlbGVtZW50cy5sZW5ndGgsIG1heEluZGV4KSlcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoaW5kZXggIT09IHNlY3Rpb25zLmxlbmd0aCAtIDEgJiYgZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgZWxlbWVudHMucHVzaChtYWtlU2VwYXJhdG9yKGBzZXBhcmF0b3ItJHtpbmRleH1gKSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFlZGl0b3IuY29udHJvbHMuaXNFbmFibGVkKHNlY3Rpb24pKSByZXR1cm5cbiAgICAgICAgZWxlbWVudHMucHVzaChtYWtlSXRlbShzZWN0aW9uLCBlbGVtZW50cy5sZW5ndGgsIG1heEluZGV4KSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIGVsZW1lbnRzXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGlzSG92ZXJpbmcgfSA9IHRoaXMuc3RhdGVcblxuICAgIGxldCBiYWNrZ3JvdW5kSW1hZ2VQYXRoID0gdGhpcy5fZ2V0QXNzZXRQYXRoKCdlZGl0b3IvbmF2aWdhdGlvbi9uYXYtZ3JhZGllbnQucG5nJywgdHJ1ZSlcbiAgICBjb25zdCBncmFkaWVudFN0eWxlID0ge1xuICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7YmFja2dyb3VuZEltYWdlUGF0aH0pYFxuICAgIH1cbiAgICByZXR1cm4gKDxOYXZpZ2F0aW9uQ29udGFpbmVyIG9uTW91c2VMZWF2ZT17dGhpcy5fb25Nb3VzZUxlYXZlfSBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9uYXZpZ2F0aW9uID0gZWwgfX0+XG4gICAgICA8TmF2aWdhdGlvbiBvbk1vdXNlRW50ZXI9e3RoaXMuX29uTW91c2VFbnRlcn0gb25Nb3VzZUxlYXZlPXt0aGlzLl9vbk1vdXNlTGVhdmV9IGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfT5cbiAgICAgICAge3RoaXMuX3JlbmRlckxpc3RJdGVtcygpfVxuICAgICAgPC9OYXZpZ2F0aW9uPlxuICAgICAgPE5hdmlnYXRpb25PdmVybGF5XG4gICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtbmF2aWdhdGlvbk92ZXJsYXknIDogdW5kZWZpbmVkKX1cbiAgICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fZ3JhZGllbnQgPSBlbCB9fVxuICAgICAgICBzdHlsZT17Z3JhZGllbnRTdHlsZX1cbiAgICAgICAgdmlzaWJsZT17aXNIb3ZlcmluZ30gLz5cbiAgICA8L05hdmlnYXRpb25Db250YWluZXI+KVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxFU1xuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIHpJbmRleDogdGhlbWUgPT4gdGhlbWUuekluZGV4KCduYXZpZ2F0aW9uJyksXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gIHdpZHRoOiAnNTVweCcsXG4gIGhlaWdodDogJzEwMCUnLFxuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS5uYXZpZ2F0aW9uQmFja2dyb3VuZENvbG9yXG59KVxuXG5jb25zdCBOYXZpZ2F0aW9uID0gYWRvbmlzLnVsKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHBhZGRpbmc6ICc1cHggMCcsXG4gIGxpc3RTdHlsZVR5cGU6ICdub25lJyxcbiAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ2NvbnRyb2xzJykgKyAxXG59KVxuXG5jb25zdCBOYXZpZ2F0aW9uT3ZlcmxheSA9IGFkb25pcy5kaXYoe1xuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAuNHMsIGxlZnQgLjRzJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGxlZnQ6ICctMjg1cHgnLFxuICB0b3A6IDAsXG4gIG1hcmdpbjogMCxcbiAgd2lkdGg6ICcyODVweCcsXG4gIGhlaWdodDogJzEwMHZoJyxcbiAgcGFkZGluZzogJzE3cHggMCcsXG4gIGxpc3RTdHlsZTogJ25vbmUnLFxuICBvcGFjaXR5OiAwLFxuICBiYWNrZ3JvdW5kUmVwZWF0OiAncmVwZWF0LXknLFxuICBiYWNrZ3JvdW5kUG9zaXRpb246ICdsZWZ0JyxcbiAgYmFja2dyb3VuZFNpemU6ICcxMDAlJ1xufSwge1xuICB2aXNpYmxlOiB7XG4gICAgdHJhbnNpdGlvbkRlbGF5OiAnMHMnLFxuICAgIGxlZnQ6IDAsXG4gICAgb3BhY2l0eTogMVxuICB9XG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL25hdmlnYXRpb24vbmF2aWdhdGlvbi1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgQmFzZUNvbXBvbmVudCwgYWRvbmlzIH0gZnJvbSAnZ2xvYmFscydcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdmlnYXRpb25JdGVtQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSByZW5kZXJpbmcgd2hlbiBuZXcgcHJvcHMgb3Igc3RhdGUgYXJlIGJlaW5nIHJlY2VpdmVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHJldHVybiBuZXh0UHJvcHMuc2hvd1RpdGxlICE9PSB0aGlzLnByb3BzLnNob3dUaXRsZSB8fFxuICAgICAgbmV4dFByb3BzLnNlbGVjdGVkICE9PSB0aGlzLnByb3BzLnNlbGVjdGVkXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5pc1NlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIDxTZXBhcmF0b3JJdGVtIC8+XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHRpdGxlQ29udGFpbmVyU3R5bGUgPSB7XG4gICAgICAgIHRyYW5zaXRpb25EZWxheTogKHRoaXMucHJvcHMuc2hvd1RpdGxlXG4gICAgICAgICAgPyB0aGlzLnByb3BzLmFuaW1hdGlvbkRlbGF5XG4gICAgICAgICAgOiB0aGlzLnByb3BzLm1heEFuaW1hdGlvbkRlbGF5IC0gdGhpcy5wcm9wcy5hbmltYXRpb25EZWxheSkgKyAncydcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICg8TmF2aWdhdGlvbkl0ZW1cbiAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfVxuICAgICAgICBzZWxlY3RlZD17dGhpcy5wcm9wcy5zZWxlY3RlZH1cbiAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1uYXZpZ2F0aW9uSXRlbScgOiB1bmRlZmluZWQpfVxuICAgICAgICBkYXRhLWlkZW50aWZpZXI9e3RoaXMucHJvcHMudGl0bGV9XG4gICAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfT5cbiAgICAgICAgPEluYWN0aXZlSWNvbiBzcmM9e3RoaXMucHJvcHMuaWNvblBhdGh9IHNlbGVjdGVkPXt0aGlzLnByb3BzLnNlbGVjdGVkfSAvPlxuICAgICAgICA8QWN0aXZlSWNvbiBzcmM9e3RoaXMucHJvcHMuYWN0aXZlSWNvblBhdGh9IHNlbGVjdGVkPXt0aGlzLnByb3BzLnNlbGVjdGVkfSAvPlxuICAgICAgICA8VGl0bGVDb250YWluZXJcbiAgICAgICAgICBzdHlsZT17dGl0bGVDb250YWluZXJTdHlsZX1cbiAgICAgICAgICB3aXRoVGl0bGU9e3RoaXMucHJvcHMuc2hvd1RpdGxlfT5cbiAgICAgICAgICA8VGl0bGU+e3RoaXMuX3QoYHBlc2RrLiR7dGhpcy5wcm9wcy50aXRsZX0udGl0bGUubmFtZWApfTwvVGl0bGU+XG4gICAgICAgIDwvVGl0bGVDb250YWluZXI+XG4gICAgICA8L05hdmlnYXRpb25JdGVtPilcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgQmFzZUl0ZW0gPSBhZG9uaXMubGkoe1xuICBoZWlnaHQ6ICc0OHB4JyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgY3Vyc29yOiAncG9pbnRlcidcbn0pXG5cbmNvbnN0IE5hdmlnYXRpb25JdGVtID0gYWRvbmlzKEJhc2VJdGVtKSh7XG4gIHpJbmRleDogNSxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGNvbG9yOiAnYmxhY2snLFxuXG4gICc6aG92ZXIgPiBpbWc6Zmlyc3QtY2hpbGQnOiB7XG4gICAgb3BhY2l0eTogMVxuICB9LFxuXG4gICc6aG92ZXIgPiBkaXYgPiBkaXYnOiB7XG4gICAgbWFyZ2luTGVmdDogJzhweCcsXG4gICAgb3BhY2l0eTogMVxuICB9XG59LCB7XG4gIHNlbGVjdGVkOiB7XG4gICAgY29sb3I6ICd3aGl0ZSdcbiAgfSxcbiAgZGlzYWJsZWQ6IHtcbiAgICBvcGFjaXR5OiAwLjUsXG5cbiAgICAnOmhvdmVyID4gaW1nOmZpcnN0LWNoaWxkJzoge1xuICAgICAgb3BhY2l0eTogMC41XG4gICAgfSxcblxuICAgICc6aG92ZXIgPiBkaXYgPiBkaXYnOiB7XG4gICAgICBtYXJnaW5MZWZ0OiAnOHB4JyxcbiAgICAgIG9wYWNpdHk6IDAuNVxuICAgIH1cbiAgfVxufSlcblxuY29uc3QgU2VwYXJhdG9ySXRlbSA9IGFkb25pcyhCYXNlSXRlbSkoe1xuICBoZWlnaHQ6ICcyNHB4J1xufSlcblxuY29uc3QgSWNvbiA9IGFkb25pcy5pbWcoe1xuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAwLjNzIGVhc2Utb3V0JyxcbiAgd2lkdGg6ICc0OHB4JyxcbiAgaGVpZ2h0OiAnNDhweCcsXG4gIG1hcmdpbkxlZnQ6ICc0cHgnXG59KVxuXG5jb25zdCBJbmFjdGl2ZUljb24gPSBhZG9uaXMoSWNvbikoe1xuICBvcGFjaXR5OiAwLjYsXG4gICc6aG92ZXInOiB7XG4gICAgb3BhY2l0eTogMVxuICB9XG59LCB7XG4gIHNlbGVjdGVkOiB7XG4gICAgb3BhY2l0eTogMCxcbiAgICAnOmhvdmVyJzoge1xuICAgICAgb3BhY2l0eTogMFxuICAgIH1cbiAgfVxufSlcblxuY29uc3QgQWN0aXZlSWNvbiA9IGFkb25pcyhJY29uKSh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBsZWZ0OiAwLFxuICB0b3A6IDAsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgb3BhY2l0eTogMFxufSwge1xuICBzZWxlY3RlZDoge1xuICAgIG9wYWNpdHk6IDFcbiAgfVxufSlcblxuY29uc3QgVGl0bGVDb250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAwLjI1cyBlYXNlLWluLW91dCwgbGVmdCAwLjI1cyBlYXNlLWluLW91dCwgdmlzaWJpbGl0eSAwLjI1cyBlYXNlLWluLW91dCcsXG4gIG9wYWNpdHk6IDAsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBsZWZ0OiAnMzVweCcsXG4gIHJpZ2h0OiAnLTIzMHB4JyxcbiAgYm90dG9tOiAwLFxuICB0b3A6IDAsXG4gIGhlaWdodDogJzEwMCUnLFxuICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xufSwge1xuICB3aXRoVGl0bGU6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIGxlZnQ6ICc1NXB4JyxcbiAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgfVxufSlcblxuY29uc3QgVGl0bGUgPSBhZG9uaXMuZGl2KHtcbiAgdHJhbnNpdGlvbjogJ21hcmdpbi1sZWZ0IDAuM3MgZWFzZS1pbi1vdXQsIG9wYWNpdHkgMC4zcyBlYXNlLWluLW91dCcsXG4gIG9wYWNpdHk6ICcwLjUnLFxuICBjb2xvcjogJ3doaXRlJyxcbiAgbGluZUhlaWdodDogJzQ4cHgnLFxuICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgZm9udFNpemU6ICcxM3B4JyxcbiAgdGV4dFNoYWRvdzogJzAgMCA0cHggcmdiYSgwLDAsMCwwLjUwKScsXG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnJlZ3VsYXJGb250RmFtaWx5XG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL25hdmlnYXRpb24vbmF2aWdhdGlvbi1pdGVtLWNvbXBvbmVudC5qc3giLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICoqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgQmFzZUNvbXBvbmVudCwgYWRvbmlzLCBWZWN0b3IyLCBDb25zdGFudHMgfSBmcm9tICdnbG9iYWxzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW52YXNDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbCgnX29uRWRpdG9yUmVzaXplJylcbiAgICB0aGlzLl9ldmVudHMgPSB7XG4gICAgICBbQ29uc3RhbnRzLkVWRU5UUy5FRElUT1JfUkVTSVpFXTogdGhpcy5fb25FZGl0b3JSZXNpemVcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgYWZ0ZXIgdGhlIHdpbmRvdyBhbmQgZWRpdG9yIGhhcyBiZWVuIHJlc2l6ZWRcbiAgICogQHBhcmFtIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9IGRpbWVuc2lvbnNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkVkaXRvclJlc2l6ZSAoZGltZW5zaW9ucykge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBzZGsgPSBlZGl0b3IuZ2V0U0RLKClcblxuICAgIHNkay5yZXNpemVUbyhkaW1lbnNpb25zKVxuICAgIGVkaXRvci56b29tLmF1dG8odHJ1ZSwgdHJ1ZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBhZnRlciB0aGlzIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKVxuXG4gICAgY29uc3QgeyBlZGl0b3IsIG9wdGlvbnMgfSA9IHRoaXMuY29udGV4dFxuXG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLl9jYW52YXMub2Zmc2V0V2lkdGhcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLl9jYW52YXMub2Zmc2V0SGVpZ2h0XG5cbiAgICBjb25zdCByZW5kZXJlciA9IGVkaXRvci5nZXRTREsoKS5nZXRSZW5kZXJlcigpXG4gICAgcmVuZGVyZXIuc2V0Q2FudmFzKHRoaXMuX2NhbnZhcylcbiAgICByZW5kZXJlci5yZXNpemVUbyhuZXcgVmVjdG9yMih3aWR0aCwgaGVpZ2h0KSlcblxuICAgIGNvbnN0IHsgaW1hZ2UgfSA9IG9wdGlvbnMuZWRpdG9yXG4gICAgZWRpdG9yLnNldFBhZGRpbmcoWzU1LCAzMCwgNTUsIDMxNV0pXG4gICAgZWRpdG9yLnNldEltYWdlKGltYWdlLCBmYWxzZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIHJldHVybiA8Q2FudmFzIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2NhbnZhcyA9IGVsIH19IC8+XG4gIH1cbn1cblxuY29uc3QgQ2FudmFzID0gYWRvbmlzLmNhbnZhcyh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NhbnZhcy1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCBDb25zdGFudHMgfSBmcm9tICdnbG9iYWxzJ1xuaW1wb3J0IE1vZGFsTWFuYWdlciBmcm9tICdzaGFyZWQvbWFuYWdlcnMvbW9kYWwtbWFuYWdlcidcbmltcG9ydCBDYW52YXNIZWFkZXJUZXh0QnV0dG9uQ29tcG9uZW50IGZyb20gJy4vaGVhZGVyL2NhbnZhcy1oZWFkZXItdGV4dC1idXR0b24tY29tcG9uZW50J1xuaW1wb3J0IENhbnZhc0hlYWRlckljb25CdXR0b25Db21wb25lbnQgZnJvbSAnLi9oZWFkZXIvY2FudmFzLWhlYWRlci1pY29uLWJ1dHRvbi1jb21wb25lbnQnXG5pbXBvcnQgQ2FudmFzSGVhZGVyWm9vbUNvbnRyb2xDb21wb25lbnQgZnJvbSAnLi9oZWFkZXIvY2FudmFzLWhlYWRlci16b29tLWNvbnRyb2wtY29tcG9uZW50J1xuLy8gaW1wb3J0IENhbnZhc0hlYWRlck5ld0J1dHRvbkNvbXBvbmVudCBmcm9tICcuL2hlYWRlci9jYW52YXMtaGVhZGVyLW5ldy1idXR0b24tY29tcG9uZW50J1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzSGVhZGVyQ29udHJvbHNDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25VbmRvQ2xpY2snLFxuICAgICAgJ19vbkV4cG9ydENsaWNrJyxcbiAgICAgICdfb25DbG9zZUNsaWNrJyxcbiAgICAgICdfb25IaXN0b3J5VXBkYXRlZCcsXG4gICAgICAnX29uRmVhdHVyZXNVcGRhdGVkJyxcbiAgICAgICdfb25SZWRvQ2xpY2snXG4gICAgKVxuXG4gICAgdGhpcy5fZXZlbnRzID0ge1xuICAgICAgW0NvbnN0YW50cy5FVkVOVFMuSElTVE9SWV9VUERBVEVEXTogdGhpcy5fb25IaXN0b3J5VXBkYXRlZCxcbiAgICAgIFtDb25zdGFudHMuRVZFTlRTLkZFQVRVUkVTX1VQREFURURdOiB0aGlzLl9vbkZlYXR1cmVzVXBkYXRlZFxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gYSBoaXN0b3J5IGl0ZW0gaGFzIGJlZW4gYWRkZWQgb3IgcmVtb3ZlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uSGlzdG9yeVVwZGF0ZWQgKCkge1xuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiBhIGZlYXR1cmUgaGFzIGJlbiBlbmFibGVkIG9yIGRpc2FibGVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25GZWF0dXJlc1VwZGF0ZWQgKCkge1xuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHVuZG8gYnV0dG9uIGhhcyBiZWVuIGNsaWNrZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblVuZG9DbGljayAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGVkaXRvci5oaXN0b3J5LnVuZG8oKVxuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHJlZG8gYnV0dG9uIGhhcyBiZWVuIGNsaWNrZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblJlZG9DbGljayAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGVkaXRvci5oaXN0b3J5LnJlZG8oKVxuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY2xvc2UgYnV0dG9uIGlzIGNsaWNrZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNsb3NlQ2xpY2sgKCkge1xuICAgIGNvbnN0IHsgbWVkaWF0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIG1lZGlhdG9yLmVtaXQoQ29uc3RhbnRzLkVWRU5UUy5DTE9TRSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSBleHBvcnQgYnV0dG9uIGhhcyBiZWVuIGNsaWNrZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkV4cG9ydENsaWNrICgpIHtcbiAgICBjb25zdCB7IG9wdGlvbnMsIGVkaXRvciwgc2NyZWVuIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBleHBvcnRPcHRpb25zID0gb3B0aW9ucy5lZGl0b3IuZXhwb3J0XG5cbiAgICBjb25zdCBsb2FkaW5nTW9kYWwgPSBNb2RhbE1hbmFnZXIuaW5zdGFuY2UuZGlzcGxheUxvYWRpbmcodGhpcy5fdCgnbG9hZGluZy5leHBvcnRpbmcnKSlcbiAgICBzY3JlZW4uc3dpdGNoVG9Db250cm9scygnZGVmYXVsdCcsIG51bGwsIHt9LCAoKSA9PiB7XG4gICAgICAvLyBHaXZlIGl0IHNvbWUgdGltZSB0byBkaXNwbGF5IHRoZSBsb2FkaW5nIG1vZGFsXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZWRpdG9yLmV4cG9ydChleHBvcnRPcHRpb25zLmRvd25sb2FkKVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGxvYWRpbmdNb2RhbC5jbG9zZSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIE1vZGFsTWFuYWdlci5pbnN0YW5jZS5kaXNwbGF5RXJyb3IodGhpcy5fdCgnZXJyb3JzLnRpdGxlJyksIGUubWVzc2FnZSlcbiAgICAgICAgICAgIGxvYWRpbmdNb2RhbC5jbG9zZSgpXG4gICAgICAgICAgfSlcbiAgICAgIH0sIDEwMClcbiAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIEFkZHMgYWxsIGNvbnRyb2wgaXRlbXMgdG8gdGhlIGhlYWRlci5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJJdGVtcyAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHsgaGlzdG9yeSwgZmVhdHVyZXMgfSA9IGVkaXRvclxuICAgIGNvbnN0IHsgZGlzcGxheUNsb3NlQnV0dG9uIH0gPSBlZGl0b3IuZ2V0T3B0aW9ucygpLmVkaXRvclxuXG4gICAgY29uc3QgdW5kb0J1dHRvbkNvbXBvbmVudCA9XG4gICAgICA8Q2FudmFzSGVhZGVySWNvbkJ1dHRvbkNvbXBvbmVudFxuICAgICAgICBkaXNhYmxlZD17IWhpc3RvcnkuaXNVbmRvQXZhaWxhYmxlKCl9XG4gICAgICAgIHNyYz17dGhpcy5fZ2V0QXNzZXRQYXRoKCdlZGl0b3IvY2FudmFzLWhlYWRlci91bmRvLnBuZycsIHRydWUpfVxuICAgICAgICBvbkNsaWNrPXt0aGlzLl9vblVuZG9DbGlja31cbiAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy11bmRvQnV0dG9uJyA6IHVuZGVmaW5lZCl9IC8+XG5cbiAgICBjb25zdCByZWRvQnV0dG9uQ29tcG9uZW50ID1cbiAgICAgIDxDYW52YXNIZWFkZXJJY29uQnV0dG9uQ29tcG9uZW50XG4gICAgICAgIGRpc2FibGVkPXshaGlzdG9yeS5pc1JlZG9BdmFpbGFibGUoKX1cbiAgICAgICAgc3JjPXt0aGlzLl9nZXRBc3NldFBhdGgoJ2VkaXRvci9jYW52YXMtaGVhZGVyL3JlZG8ucG5nJywgdHJ1ZSl9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uUmVkb0NsaWNrfVxuICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXJlZG9CdXR0b24nIDogdW5kZWZpbmVkKX0gLz5cblxuICAgIGNvbnN0IGxlZnQgPSAoPENvbnRyb2xHcm91cCBrZXk9J2xlZnQnIGxlZnQ+XG4gICAgICB7dW5kb0J1dHRvbkNvbXBvbmVudH1cbiAgICAgIHtyZWRvQnV0dG9uQ29tcG9uZW50fVxuICAgIDwvQ29udHJvbEdyb3VwPilcbiAgICBjb25zdCBjZW50ZXIgPSAoPENlbnRlcmVkQ29udHJvbEdyb3VwIGtleT0nY2VudGVyJz5cbiAgICAgIHtmZWF0dXJlcy5pc0VuYWJsZWRCeU9wdGlvbnMoJ3pvb20nKSAmJiA8Q2FudmFzSGVhZGVyWm9vbUNvbnRyb2xDb21wb25lbnQgLz59XG4gICAgPC9DZW50ZXJlZENvbnRyb2xHcm91cD4pXG4gICAgY29uc3QgcmlnaHQgPSAoPENvbnRyb2xHcm91cCBrZXk9J3JpZ2h0JyByaWdodD5cbiAgICAgIHsvKiA8Q2FudmFzSGVhZGVyTmV3QnV0dG9uQ29tcG9uZW50IGRpc2FibGVkPXshZmVhdHVyZXMuaXNFbmFibGVkKCduZXcnKX0gdGl0bGU9e3RoaXMuX3QoJ2VkaXRvci5uZXcnKX0gLz4gKi99XG4gICAgICB7ZmVhdHVyZXMuaXNFbmFibGVkKCdleHBvcnQnKSAmJiA8Q2FudmFzSGVhZGVyVGV4dEJ1dHRvbkNvbXBvbmVudFxuICAgICAgICB0aXRsZT17dGhpcy5fdCgncGVzZGsuZWRpdG9yLmJ1dHRvbi5leHBvcnQnKX1cbiAgICAgICAgb25DbGljaz17dGhpcy5fb25FeHBvcnRDbGlja31cbiAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1leHBvcnRCdXR0b24nIDogdW5kZWZpbmVkKX0gLz59XG4gICAgICB7ZGlzcGxheUNsb3NlQnV0dG9uICYmIDxDYW52YXNIZWFkZXJUZXh0QnV0dG9uQ29tcG9uZW50XG4gICAgICAgIHRpdGxlPXt0aGlzLl90KCdwZXNkay5lZGl0b3IuYnV0dG9uLmNsb3NlJyl9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uQ2xvc2VDbGlja31cbiAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1jbG9zZUJ1dHRvbicgOiB1bmRlZmluZWQpfSAvPn1cbiAgICA8L0NvbnRyb2xHcm91cD4pXG4gICAgcmV0dXJuIFtsZWZ0LCBjZW50ZXIsIHJpZ2h0XVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuICg8Q2FudmFzSGVhZGVyQ29udHJvbHMgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX0+XG4gICAgICB7dGhpcy5fcmVuZGVySXRlbXMoKX1cbiAgICA8L0NhbnZhc0hlYWRlckNvbnRyb2xzPilcbiAgfVxufVxuXG5jb25zdCBDYW52YXNIZWFkZXJDb250cm9scyA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBoZWlnaHQ6ICc0OHB4JyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgYmFja2dyb3VuZDogJ2xpbmVhci1ncmFkaWVudCh0byBib3R0b20sIHJnYmEoMjAsIDIwLCAyMSwgMC42KSAwJSwgcmdiYSgyMCwgMjAsIDIxLCAwLjE3KSA2MyUsIHJnYmEoMjAsIDIwLCAyMSwgMCkgMTAwJSknLFxuICB6SW5kZXg6IHRoZW1lID0+IHRoZW1lLnpJbmRleCgnY29udHJvbHNPdmVybGF5cycpXG59KVxuXG5jb25zdCBDZW50ZXJlZENvbnRyb2xHcm91cCA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogJzUwJScsXG4gIGhlaWdodDogJzEwMCUnXG59KVxuXG5jb25zdCBDb250cm9sR3JvdXAgPSBhZG9uaXMudWwoe1xuICBkaXNwbGF5OiAndGFibGUnLFxuICB0YWJsZUxheW91dDogJ2ZpeGVkJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIGxpc3RTdHlsZVR5cGU6ICdub25lJyxcbiAgcGFkZGluZzogMCxcbiAgbWFyZ2luOiAwXG59LCB7XG4gIGxlZnQ6IHsgZmxvYXQ6ICdsZWZ0JyB9LFxuICByaWdodDogeyBmbG9hdDogJ3JpZ2h0JyB9XG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2NhbnZhcy1oZWFkZXItY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgQ2FudmFzSGVhZGVyQnV0dG9uQ29tcG9uZW50IGZyb20gJy4vY2FudmFzLWhlYWRlci1idXR0b24tY29tcG9uZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW52YXNIZWFkZXJUZXh0QnV0dG9uQ29tcG9uZW50IGV4dGVuZHMgQ2FudmFzSGVhZGVyQnV0dG9uQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IENhbnZhc0hlYWRlckJ1dHRvbkNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKDxDYW52YXNIZWFkZXJCdXR0b25Db21wb25lbnQgb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfSBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfT5cbiAgICAgIDxCdXR0b24gZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9Pnt0aGlzLnByb3BzLnRpdGxlfTwvQnV0dG9uPlxuICAgIDwvQ2FudmFzSGVhZGVyQnV0dG9uQ29tcG9uZW50PilcbiAgfVxufVxuXG5jb25zdCBCdXR0b24gPSBhZG9uaXMuZGl2KHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLnRleHRDb2xvcixcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnVwcGVyY2FzZVNlbWlCb2xkRm9udEZhbWlseSxcbiAgZm9udFNpemU6ICcxM3B4JyxcbiAgcGFkZGluZzogJzAgMTdweCcsXG4gICc6Zm9jdXMnOiB7XG4gICAgb3V0bGluZTogJ25vbmUnXG4gIH1cbn0sIHtcbiAgZGlzYWJsZWQ6IHtcbiAgICBvcGFjaXR5OiAwLjNcbiAgfVxufSlcblxuQ2FudmFzSGVhZGVyVGV4dEJ1dHRvbkNvbXBvbmVudC5CdXR0b24gPSBCdXR0b25cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9oZWFkZXIvY2FudmFzLWhlYWRlci10ZXh0LWJ1dHRvbi1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzIH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBDYW52YXNIZWFkZXJCdXR0b25Db21wb25lbnQgZnJvbSAnLi9jYW52YXMtaGVhZGVyLWJ1dHRvbi1jb21wb25lbnQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhc0hlYWRlckljb25CdXR0b25Db21wb25lbnQgZXh0ZW5kcyBDYW52YXNIZWFkZXJCdXR0b25Db21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQ2FudmFzSGVhZGVyQnV0dG9uQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgb25DbGljaywgY2xhc3NOYW1lLCBkaXNhYmxlZCB9ID0gdGhpcy5wcm9wc1xuICAgIHJldHVybiAoPENhbnZhc0hlYWRlckJ1dHRvbkNvbXBvbmVudCBkaXNhYmxlZD17ZGlzYWJsZWR9IG9uQ2xpY2s9e2Rpc2FibGVkID8gdW5kZWZpbmVkIDogb25DbGlja30gY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgPEltYWdlIGRpc2FibGVkPXtkaXNhYmxlZH0gc3JjPXt0aGlzLnByb3BzLnNyY30gLz5cbiAgICA8L0NhbnZhc0hlYWRlckJ1dHRvbkNvbXBvbmVudD4pXG4gIH1cbn1cblxuY29uc3QgSW1hZ2UgPSBhZG9uaXMuaW1nKHtcbiAgd2lkdGg6ICcyNHB4JyxcbiAgaGVpZ2h0OiAnMjRweCdcbn0sIHtcbiAgZGlzYWJsZWQ6IHtcbiAgICBvcGFjaXR5OiAwLjI1LFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvaGVhZGVyL2NhbnZhcy1oZWFkZXItaWNvbi1idXR0b24tY29tcG9uZW50LmpzeCIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIEJhc2VDb21wb25lbnQsIENvbnN0YW50cywgYWRvbmlzIH0gZnJvbSAnZ2xvYmFscydcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhc0hlYWRlclpvb21Db250cm9sIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uWm9vbUluQ2xpY2snLFxuICAgICAgJ19vblpvb21PdXRDbGljaycsXG4gICAgICAnX29uWm9vbScsXG4gICAgICAnX29uRmVhdHVyZXNVcGRhdGVkJ1xuICAgIClcblxuICAgIHRoaXMuX2V2ZW50cyA9IHtcbiAgICAgIFtDb25zdGFudHMuRVZFTlRTLlpPT01dOiB0aGlzLl9vblpvb20sXG4gICAgICBbQ29uc3RhbnRzLkVWRU5UUy5GRUFUVVJFU19VUERBVEVEXTogdGhpcy5fb25GZWF0dXJlc1VwZGF0ZWRcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKVxuICAgIGlmICh0aGlzLl9yZW5kZXJab29tTGV2ZWwgJiYgdGhpcy5fcmVuZGVyWm9vbUxldmVsICE9PSB0aGlzLmNvbnRleHQuZWRpdG9yLnpvb20udGFyZ2V0TGV2ZWwpIHtcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSBmZWF0dXJlcyBzdGF0ZSBoYXMgYmVlbiBjaGFuZ2VkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25GZWF0dXJlc1VwZGF0ZWQgKCkge1xuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHRhcmdldCB6b29tIGxldmVsIGhhcyBiZWVuIGNoYW5nZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblpvb20gKCkge1xuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHpvb20gaW4gYnV0dG9uIGhhcyBiZWVuIGNsaWNrZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblpvb21JbkNsaWNrICgpIHtcbiAgICBpZiAodGhpcy5faXNab29tRGlzYWJsZWQoKSkgcmV0dXJuXG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGVkaXRvci56b29tLmluKClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB6b29tIG91dCBidXR0b24gaGFzIGJlZW4gY2xpY2tlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uWm9vbU91dENsaWNrICgpIHtcbiAgICBpZiAodGhpcy5faXNab29tRGlzYWJsZWQoKSkgcmV0dXJuXG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGVkaXRvci56b29tLm91dCgpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSB6b29tIGZlYXR1cmUgaXMgZGlzYWJsZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pc1pvb21EaXNhYmxlZCAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIHJldHVybiAhZWRpdG9yLmZlYXR1cmVzLmlzRW5hYmxlZCgnem9vbScpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3Qgem9vbUxldmVsID0gTWF0aC5yb3VuZChlZGl0b3Iuem9vbS50YXJnZXRMZXZlbCAqIDEwMClcbiAgICB0aGlzLl9yZW5kZXJab29tTGV2ZWwgPSBlZGl0b3Iuem9vbS50YXJnZXRMZXZlbFxuXG4gICAgcmV0dXJuICg8Wm9vbUNvbnRyb2wgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy16b29tQ29udHJvbHMnIDogdW5kZWZpbmVkKX0+XG4gICAgICA8QnV0dG9uXG4gICAgICAgIGRpc2FibGVkPXt0aGlzLl9pc1pvb21EaXNhYmxlZCgpfVxuICAgICAgICBkYXRhLWRpc2FibGVkPXt0aGlzLl9pc1pvb21EaXNhYmxlZCgpfVxuICAgICAgICBvbkNsaWNrPXt0aGlzLl9vblpvb21PdXRDbGlja31cbiAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy16b29tT3V0QnV0dG9uJyA6IHVuZGVmaW5lZCl9Pi08L0J1dHRvbj5cbiAgICAgIDxMYWJlbD57em9vbUxldmVsfSAlPC9MYWJlbD5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgZGlzYWJsZWQ9e3RoaXMuX2lzWm9vbURpc2FibGVkKCl9XG4gICAgICAgIGRhdGEtZGlzYWJsZWQ9e3RoaXMuX2lzWm9vbURpc2FibGVkKCl9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uWm9vbUluQ2xpY2t9XG4gICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtem9vbUluQnV0dG9uJyA6IHVuZGVmaW5lZCl9Pis8L0J1dHRvbj5cbiAgICA8L1pvb21Db250cm9sPilcbiAgfVxufVxuXG5jb25zdCBab29tQ29udHJvbCA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgbGVmdDogJy01MCUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLmRpbW1lZFRleHRDb2xvcixcbiAgZm9udFNpemU6ICcxM3B4JyxcbiAgZm9udEZhbWlseTogdGhlbWUgPT4gdGhlbWUucmVndWxhckZvbnRGYW1pbHksXG4gIGRpc3BsYXk6ICd0YWJsZScsXG4gIHRhYmxlTGF5b3V0OiAnZml4ZWQnXG59KVxuXG5jb25zdCBCdXR0b24gPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIGJvcmRlclN0eWxlOiAnbm9uZScsXG4gIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXG4gIGNvbG9yOiB0aGVtZSA9PiB0aGVtZS5kaW1tZWRUZXh0Q29sb3IsXG4gIGZvbnRTaXplOiAnMTZweCcsXG4gIHBhZGRpbmc6ICcwIDEwcHgnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgb3BhY2l0eTogMS4wLFxuXG4gICc6aG92ZXInOiB7XG4gICAgY29sb3I6IHRoZW1lID0+IHRoZW1lLnRleHRDb2xvclxuICB9LFxuXG4gICc6Zm9jdXMnOiB7XG4gICAgb3V0bGluZTogJ25vbmUnXG4gIH1cbn0sIHtcbiAgZGlzYWJsZWQ6IHtcbiAgICBvcGFjaXR5OiAwLjMsXG4gICAgJzpob3Zlcic6IHtcbiAgICAgIGNvbG9yOiB0aGVtZSA9PiB0aGVtZS5kaW1tZWRUZXh0Q29sb3JcbiAgICB9XG4gIH1cbn0pXG5cbmNvbnN0IExhYmVsID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvaGVhZGVyL2NhbnZhcy1oZWFkZXItem9vbS1jb250cm9sLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7XG4gIFJlYWN0LCBQcm9wVHlwZXMsIGFkb25pcywgd2l0aFRoZW1lLCBCYXNlQ29tcG9uZW50XG59IGZyb20gJ2dsb2JhbHMnXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuY29uc3QgU1RBUlRfRFVSQVRJT04gPSAxMzAwIC8vIDEuMyBzZWNvbmRzXG5cbmNsYXNzIExvYWRpbmdTY3JlZW5Db21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG4gIHN0YXRpYyBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgICB1aTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIG1lZGlhdG9yOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgb3B0aW9uczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGFwcENvbXBvbmVudDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH1cblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKClcblxuICAgIHRoaXMuX2NhbkhpZGVBZnRlckxvYWRlZCA9IGZhbHNlXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc3RhcnRJbWFnZVZpc2libGU6IHRydWUsXG4gICAgICBpZGxlSW1hZ2VWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGluZGljYXRvclZpc2libGU6IHRydWVcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogSW52b2tlZCBpbW1lZGlhdGVseSBhZnRlciBhIGNvbXBvbmVudCBpcyBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKVxuXG4gICAgdGhpcy5faW1hZ2VTd2l0Y2hUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN0YXJ0SW1hZ2VWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgaWRsZUltYWdlVmlzaWJsZTogdHJ1ZVxuICAgICAgfSlcbiAgICAgIHRoaXMuX2ltYWdlU3dpdGNoVGltZW91dCA9IG51bGxcbiAgICB9LCBTVEFSVF9EVVJBVElPTilcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGltbWVkaWF0ZWx5IGJlZm9yZSBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYW5kIGRlc3Ryb3llZFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudFdpbGxVbm1vdW50KClcblxuICAgIGlmICh0aGlzLl9pbWFnZVN3aXRjaFRpbWVvdXQpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5faW1hZ2VTd2l0Y2hUaW1lb3V0KVxuICAgICAgdGhpcy5faW1hZ2VTd2l0Y2hUaW1lb3V0ID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE1JU0NcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDT05URVhUXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbnRleHQgcGFzc2VkIHRvIGFsbCBjaGlsZHJlblxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBnZXRDaGlsZENvbnRleHQgKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1aTogdGhpcy5jb250ZXh0LnVpLFxuICAgICAgb3B0aW9uczogdGhpcy5jb250ZXh0Lm9wdGlvbnMsXG4gICAgICBtZWRpYXRvcjogdGhpcy5jb250ZXh0Lm1lZGlhdG9yLFxuICAgICAgYXBwQ29tcG9uZW50OiB0aGlzLmNvbnRleHQuYXBwQ29tcG9uZW50XG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBzdGFydEltYWdlVmlzaWJsZSwgaWRsZUltYWdlVmlzaWJsZSwgaW5kaWNhdG9yVmlzaWJsZSB9ID0gdGhpcy5zdGF0ZVxuICAgIHJldHVybiAoPENvbnRhaW5lciBpbm5lclJlZj17KGVsKSA9PiB7IHRoaXMuX2NvbnRhaW5lciA9IGVsIH19IGNsYXNzTmFtZT17KHRlc3QgPyAnanMtbG9hZGluZ1NjcmVlbicgOiB1bmRlZmluZWQpfT5cbiAgICAgIDxJbWFnZUNvbnRhaW5lciBoaWRkZW49eyFpbmRpY2F0b3JWaXNpYmxlfT5cbiAgICAgICAgPFN0YXJ0SW1hZ2UgdmlzaWJsZT17c3RhcnRJbWFnZVZpc2libGV9IHNyYz17dGhpcy5fZ2V0QXNzZXRQYXRoKCdsb2FkaW5nL3N0YXJ0LXNvbGlkLmdpZicsIHRydWUpfSAvPlxuICAgICAgICA8SWRsZUltYWdlIHZpc2libGU9e2lkbGVJbWFnZVZpc2libGV9IHNyYz17dGhpcy5fZ2V0QXNzZXRQYXRoKCdsb2FkaW5nL2lkbGUtc29saWQuZ2lmJywgdHJ1ZSl9IC8+XG4gICAgICA8L0ltYWdlQ29udGFpbmVyPlxuICAgIDwvQ29udGFpbmVyPilcbiAgfVxufVxuXG5jb25zdCBDb250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnXG59KVxuXG5jb25zdCBJbWFnZUNvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAwLjNzIGVhc2Utb3V0JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogJzUwJScsXG4gIGxlZnQ6ICc1MCUnLFxuICBtYXJnaW5MZWZ0OiAnLTUycHgnLFxuICBtYXJnaW5Ub3A6ICctNTJweCcsXG4gIHdpZHRoOiAnMTA0cHgnLFxuICBoZWlnaHQ6ICcxMDRweCcsXG4gIG9wYWNpdHk6IDFcbn0sIHtcbiAgaGlkZGVuOiB7XG4gICAgb3BhY2l0eTogMFxuICB9XG59KVxuXG5jb25zdCBJbWFnZSA9IGFkb25pcy5pbWcoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICB3aWR0aDogJzEwNHB4JyxcbiAgaGVpZ2h0OiAnMTA0cHgnLFxuICBvcGFjaXR5OiAwXG59LCB7XG4gIHZpc2libGU6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn0pXG5cbmNvbnN0IFN0YXJ0SW1hZ2UgPSBhZG9uaXMoSW1hZ2UpKHt9KVxuY29uc3QgSWRsZUltYWdlID0gYWRvbmlzKEltYWdlKSh7fSlcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKExvYWRpbmdTY3JlZW5Db21wb25lbnQpXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9sb2FkaW5nLXNjcmVlbi1jb21wb25lbnQuanN4IiwiZXhwb3J0IGRlZmF1bHQgKGFkb25pcywgc2VsZWN0b3IpID0+IHtcbiAgYWRvbmlzLmdsb2JhbChgJHtzZWxlY3Rvcn0gaHRtbCwke3NlbGVjdG9yfSBib2R5LCR7c2VsZWN0b3J9IGRpdiwke3NlbGVjdG9yfSBzcGFuLCR7c2VsZWN0b3J9IGFwcGxldCwke3NlbGVjdG9yfSBvYmplY3QsJHtzZWxlY3Rvcn0gaWZyYW1lLCR7c2VsZWN0b3J9IGgxLCR7c2VsZWN0b3J9IGgyLCR7c2VsZWN0b3J9IGgzLCR7c2VsZWN0b3J9IGg0LCR7c2VsZWN0b3J9IGg1LCR7c2VsZWN0b3J9IGg2LCR7c2VsZWN0b3J9IHAsJHtzZWxlY3Rvcn0gYmxvY2txdW90ZSwke3NlbGVjdG9yfSBwcmUsJHtzZWxlY3Rvcn0gYSwke3NlbGVjdG9yfSBhYmJyLCR7c2VsZWN0b3J9IGFjcm9ueW0sJHtzZWxlY3Rvcn0gYWRkcmVzcywke3NlbGVjdG9yfSBiaWcsJHtzZWxlY3Rvcn0gY2l0ZSwke3NlbGVjdG9yfSBjb2RlLCR7c2VsZWN0b3J9IGRlbCwke3NlbGVjdG9yfSBkZm4sJHtzZWxlY3Rvcn0gZW0sJHtzZWxlY3Rvcn0gaW1nLCR7c2VsZWN0b3J9IGlucywke3NlbGVjdG9yfSBrYmQsJHtzZWxlY3Rvcn0gcSwke3NlbGVjdG9yfSBzLCR7c2VsZWN0b3J9IHNhbXAsJHtzZWxlY3Rvcn0gc21hbGwsJHtzZWxlY3Rvcn0gc3RyaWtlLCR7c2VsZWN0b3J9IHN0cm9uZywke3NlbGVjdG9yfSBzdWIsJHtzZWxlY3Rvcn0gc3VwLCR7c2VsZWN0b3J9IHR0LCR7c2VsZWN0b3J9IHZhciwke3NlbGVjdG9yfSBiLCR7c2VsZWN0b3J9IHUsJHtzZWxlY3Rvcn0gaSwke3NlbGVjdG9yfSBjZW50ZXIsJHtzZWxlY3Rvcn0gZGwsJHtzZWxlY3Rvcn0gZHQsJHtzZWxlY3Rvcn0gZGQsJHtzZWxlY3Rvcn0gb2wsJHtzZWxlY3Rvcn0gdWwsJHtzZWxlY3Rvcn0gbGksJHtzZWxlY3Rvcn0gZmllbGRzZXQsJHtzZWxlY3Rvcn0gZm9ybSwke3NlbGVjdG9yfSBsYWJlbCwke3NlbGVjdG9yfSBsZWdlbmQsJHtzZWxlY3Rvcn0gdGFibGUsJHtzZWxlY3Rvcn0gY2FwdGlvbiwke3NlbGVjdG9yfSB0Ym9keSwke3NlbGVjdG9yfSB0Zm9vdCwke3NlbGVjdG9yfSB0aGVhZCwke3NlbGVjdG9yfSB0ciwke3NlbGVjdG9yfSB0aCwke3NlbGVjdG9yfSB0ZCwke3NlbGVjdG9yfSBhcnRpY2xlLCR7c2VsZWN0b3J9IGFzaWRlLCR7c2VsZWN0b3J9IGNhbnZhcywke3NlbGVjdG9yfSBkZXRhaWxzLCR7c2VsZWN0b3J9IGVtYmVkLCR7c2VsZWN0b3J9IGZpZ3VyZSwke3NlbGVjdG9yfSBmaWdjYXB0aW9uLCR7c2VsZWN0b3J9IGZvb3Rlciwke3NlbGVjdG9yfSBoZWFkZXIsJHtzZWxlY3Rvcn0gaGdyb3VwLCR7c2VsZWN0b3J9IG1lbnUsJHtzZWxlY3Rvcn0gbmF2LCR7c2VsZWN0b3J9IG91dHB1dCwke3NlbGVjdG9yfSBydWJ5LCR7c2VsZWN0b3J9IHNlY3Rpb24sJHtzZWxlY3Rvcn0gc3VtbWFyeSwke3NlbGVjdG9yfSB0aW1lLCR7c2VsZWN0b3J9IG1hcmssJHtzZWxlY3Rvcn0gYXVkaW8sJHtzZWxlY3Rvcn0gdmlkZW97bWFyZ2luOjA7cGFkZGluZzowO2JvcmRlcjowO2ZvbnQ6aW5oZXJpdDtmb250LXNpemU6MTAwJTt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX0ke3NlbGVjdG9yfSBodG1se2xpbmUtaGVpZ2h0OjF9JHtzZWxlY3Rvcn0gb2wsJHtzZWxlY3Rvcn0gdWx7bGlzdC1zdHlsZTpub25lfSR7c2VsZWN0b3J9IHRhYmxle2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTtib3JkZXItc3BhY2luZzowfSR7c2VsZWN0b3J9IGNhcHRpb24sJHtzZWxlY3Rvcn0gdGgsJHtzZWxlY3Rvcn0gdGR7dGV4dC1hbGlnbjpsZWZ0O2ZvbnQtd2VpZ2h0OjQwMDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9JHtzZWxlY3Rvcn0gcSwke3NlbGVjdG9yfSBibG9ja3F1b3Rle3F1b3Rlczpub25lfSR7c2VsZWN0b3J9IHE6YmVmb3JlLCR7c2VsZWN0b3J9IHE6YWZ0ZXIsJHtzZWxlY3Rvcn0gYmxvY2txdW90ZTpiZWZvcmUsJHtzZWxlY3Rvcn0gYmxvY2txdW90ZTphZnRlcntjb250ZW50OlwiXCI7Y29udGVudDpub25lfSR7c2VsZWN0b3J9IGEgaW1ne2JvcmRlcjpub25lfSR7c2VsZWN0b3J9IGFydGljbGUsJHtzZWxlY3Rvcn0gYXNpZGUsJHtzZWxlY3Rvcn0gZGV0YWlscywke3NlbGVjdG9yfSBmaWdjYXB0aW9uLCR7c2VsZWN0b3J9IGZpZ3VyZSwke3NlbGVjdG9yfSBmb290ZXIsJHtzZWxlY3Rvcn0gaGVhZGVyLCR7c2VsZWN0b3J9IGhncm91cCwke3NlbGVjdG9yfSBtYWluLCR7c2VsZWN0b3J9IG1lbnUsJHtzZWxlY3Rvcn0gbmF2LCR7c2VsZWN0b3J9IHNlY3Rpb24sJHtzZWxlY3Rvcn0gc3VtbWFyeXtkaXNwbGF5OmJsb2NrfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpeyR7c2VsZWN0b3J9ey13ZWJraXQtYm9yZGVyLXJhZGl1czo1cHg7LW1vei1ib3JkZXItcmFkaXVzOjVweDstbXMtYm9yZGVyLXJhZGl1czo1cHg7LW8tYm9yZGVyLXJhZGl1czo1cHg7Ym9yZGVyLXJhZGl1czo1cHh9fSR7c2VsZWN0b3J9LCR7c2VsZWN0b3J9ICp7Ym94LXNpemluZzpib3JkZXItYm94fWApXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2xpYi9jc3MtcmVzZXQuanMiLCJleHBvcnQgZGVmYXVsdCAoYWRvbmlzLCBzZWxlY3RvcikgPT4ge1xuICBhZG9uaXMuZ2xvYmFsKGBcbiAgICBALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNpbmdMb2FkaW5nSW5kaWNhdG9yIHtcbiAgICAgIDAlIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xuICAgICAgfVxuICAgICAgNDAlIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDEwcHgpO1xuICAgICAgfVxuICAgICAgNjAlIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01cHgpO1xuICAgICAgfVxuICAgICAgODAle1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XG4gICAgICB9XG4gICAgfVxuICBgKVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9saWIvZ2xvYmFsLWNzcy5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgU0RLVXRpbHMsIExvZywgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi4vZ2xvYmFscydcbmltcG9ydCBFZGl0b3IgZnJvbSAnLi9lZGl0b3InXG5cbmNvbnN0IExPQURfVElNRU9VVCA9IDUwMDBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IgKHVpLCBvcHRpb25zLCBtZWRpYXRvcikge1xuICAgIHN1cGVyKClcblxuICAgIHRoaXMuX3VpID0gdWlcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMuX21lZGlhdG9yID0gbWVkaWF0b3JcblxuICAgIHRoaXMuX2Fzc2V0cyA9IHt9XG5cbiAgICAvLyBBIHNoYWxsb3cgRWRpdG9yIGluc3RhbmNlIHRoYXQgaXMgb25seSB0aGVyZSB0byBjaGVjayBmb3IgZmVhdHVyZXMgZXRjLlxuICAgIHRoaXMuX2VkaXRvciA9IG5ldyBFZGl0b3IodWksIG9wdGlvbnMsIG1lZGlhdG9yLCB0cnVlKVxuXG4gICAgLy8gR2VuZXJpYyBhc3NldHMgdGhhdCBhcmUgcHJldHR5IG11Y2ggYWx3YXlzIHJlcXVpcmVkXG4gICAgdGhpcy5fYXNzZXRzID0gW1xuICAgICAgJ2VkaXRvci9jYW52YXMtaGVhZGVyL3VuZG8ucG5nJyxcbiAgICAgICdlZGl0b3IvbmF2aWdhdGlvbi9uYXYtZ3JhZGllbnQucG5nJyxcbiAgICAgICdlZGl0b3IvY29udHJvbHMvc2hhcmVkL2NoZWNrYm94LnBuZycsXG4gICAgICAnZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jaGVja2JveC1hY3RpdmUucG5nJyxcbiAgICAgICdlZGl0b3IvY29udHJvbHMvc2hhcmVkL3RpbGVkLWJhY2tncm91bmQucG5nJ1xuICAgIF1cbiAgICB0aGlzLl9hcHBlbmRDb250cm9sc0Fzc2V0cygpXG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgY29udHJvbC1zcGVjaWZpYyBhc3NldHMgaWYgbmVjZXNzYXJ5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYXBwZW5kQ29udHJvbHNBc3NldHMgKCkge1xuICAgIGNvbnN0IGNvbnRyb2xzID0gdGhpcy5fZWRpdG9yLmNvbnRyb2xzLmdldEF2YWlsYWJsZSgpXG4gICAgZm9yIChsZXQga2V5IGluIGNvbnRyb2xzKSB7XG4gICAgICBjb25zdCBDb250cm9sID0gY29udHJvbHNba2V5XVxuICAgICAgaWYgKHRoaXMuX2VkaXRvci5jb250cm9scy5pc0VuYWJsZWQoa2V5KSkge1xuICAgICAgICB0aGlzLl9hc3NldHMgPSB0aGlzLl9hc3NldHMuY29uY2F0KENvbnRyb2wuZ2V0UHJlbG9hZEFzc2V0cyh0aGlzLl9lZGl0b3IpKVxuICAgICAgICB0aGlzLl9hc3NldHMucHVzaChDb250cm9sLmljb25QYXRoKVxuICAgICAgICB0aGlzLl9hc3NldHMucHVzaChDb250cm9sLmFjdGl2ZUljb25QYXRoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgYXNzZXRzLCBlbWl0cyBwcm9ncmVzcyBldmVudHNcbiAgICovXG4gIGxvYWQgKCkge1xuICAgIGNvbnN0IGFzc2V0cyA9IHRoaXMuX2Fzc2V0cy5zbGljZSgpXG4gICAgY29uc3QgYXNzZXRzQ291bnQgPSBhc3NldHMubGVuZ3RoXG4gICAgbGV0IGFzc2V0c0xvYWRlZCA9IDBcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGFuIGFzc2V0IGhhcyBiZWVuIGxvYWRlZC4gSW5jcmVhc2VzIHRoZSBhc3NldCBjb3VudGVyIGFuZCBlbWl0cyBhIHByb2dyZXNzXG4gICAgICogZXZlbnRcbiAgICAgKi9cbiAgICBjb25zdCBhc3NldExvYWRlZCA9ICgpID0+IHtcbiAgICAgIGFzc2V0c0xvYWRlZCsrXG4gICAgICB0aGlzLmVtaXQoJ3Byb2dyZXNzJywgYXNzZXRzTG9hZGVkIC8gYXNzZXRzQ291bnQpXG4gICAgICBpZiAoYXNzZXRzTG9hZGVkID09PSBhc3NldHNDb3VudCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2RvbmUnKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgYSB3YXJuaW5nIG1lc3NhZ2UgdGhhdCB0aGUgZ2l2ZW4gYXNzZXQgZmFpbGVkIHRvIGxvYWQgZm9yIHRoZSBnaXZlbiByZWFzb25cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHBhdGhcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHJlYXNvblxuICAgICAqL1xuICAgIGNvbnN0IGFzc2V0TG9hZEZhaWxlZCA9IChwYXRoLCByZWFzb24gPSAndGltZWQgb3V0JykgPT4ge1xuICAgICAgTG9nLndhcm4oJ1ByZWxvYWRlcicsIGAke3BhdGh9ICR7cmVhc29ufS5gKVxuICAgICAgYXNzZXRMb2FkZWQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aW1lb3V0IGZvciB0aGUgZ2l2ZW4gYXNzZXQgcGF0aC4gQXNzdW1lcyBhbiBhc3NldCBmYWlsZWQgdG8gbG9hZCB3aGVuIHRpbWVvdXRcbiAgICAgKiBydW5zIG91dFxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gcGF0aFxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBjb25zdCBsb2FkVGltZW91dCA9IChwYXRoKSA9PiB7XG4gICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBhc3NldExvYWRGYWlsZWQocGF0aClcbiAgICAgIH0sIExPQURfVElNRU9VVClcbiAgICB9XG5cbiAgICBhc3NldHMuZm9yRWFjaCgoYXNzZXQpID0+IHtcbiAgICAgIGxldCB1aUFzc2V0ID0gdHJ1ZVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXNzZXQpKSB7XG4gICAgICAgIHVpQXNzZXQgPSBhc3NldFsxXVxuICAgICAgICBhc3NldCA9IGFzc2V0WzBdXG4gICAgICB9XG4gICAgICBsZXQgcmV0aW5hQXNzZXQgPSB0cnVlXG4gICAgICBpZiAoU0RLVXRpbHMuaXNBcnJheShhc3NldCkpIHtcbiAgICAgICAgcmV0aW5hQXNzZXQgPSBhc3NldFsxXVxuICAgICAgICBhc3NldCA9IGFzc2V0WzBdXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFzc2V0UGF0aCA9IHRoaXMuX3VpLmdldEFzc2V0UGF0aChhc3NldCwgdWlBc3NldCwgIXJldGluYUFzc2V0KVxuICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKClcbiAgICAgIGNvbnN0IHRpbWVvdXQgPSBsb2FkVGltZW91dChhc3NldFBhdGgpXG4gICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXQpXG4gICAgICAgIHRoaXMuX2Fzc2V0c1thc3NldF0gPSBpbWFnZVxuICAgICAgICBhc3NldExvYWRlZCgpXG4gICAgICB9KVxuICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dClcbiAgICAgICAgYXNzZXRMb2FkRmFpbGVkKGFzc2V0UGF0aCwgJ3dhcyBub3QgZm91bmQnKVxuICAgICAgfSlcbiAgICAgIGltYWdlLmNyb3NzT3JpZ2luID0gU0RLVXRpbHMuZ2V0Q3Jvc3NPcmlnaW5WYWx1ZSh0aGlzLl9vcHRpb25zLmNyb3NzT3JpZ2luKVxuICAgICAgaW1hZ2Uuc3JjID0gYXNzZXRQYXRoXG4gICAgfSlcbiAgfVxuXG4gIGdldEFzc2V0IChhc3NldFBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXNzZXRzW2Fzc2V0UGF0aF1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9saWIvcHJlbG9hZGVyLmpzIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgKiBhcyBMaWJyYXJ5IGZyb20gJy4vbGliL2xpYnJhcnknXG5pbXBvcnQgTW9kYWxNYW5hZ2VyIGZyb20gJ3NoYXJlZC9tYW5hZ2Vycy9tb2RhbC1tYW5hZ2VyJ1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUJTXG5cbmltcG9ydCBEZWxheWVkSm9iUXVldWUgZnJvbSAnLi9saWIvZGVsYXllZC1qb2ItcXVldWUuanMnXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxFU1xuXG5pbXBvcnQgKiBhcyBHcm91cGVkQ29udHJvbHNTdHlsZXMgZnJvbSAnLi9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2dyb3VwZWQtY29udHJvbC1zdHlsZXMnXG5pbXBvcnQgKiBhcyBDb250cm9sc1N0eWxlcyBmcm9tICcuL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvY29udHJvbHMtc3R5bGVzJ1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBBU1NFVFNcblxuaW1wb3J0IEZyYW1lIGZyb20gJy4vbGliL2ZyYW1lJ1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBBU1NFVCBNQU5BR0VSU1xuXG5pbXBvcnQgRm9udE1hbmFnZXIgZnJvbSAnc2hhcmVkL21hbmFnZXJzL2ZvbnQtbWFuYWdlcidcbmltcG9ydCBTdGlja2VyTWFuYWdlciBmcm9tICdzaGFyZWQvbWFuYWdlcnMvc3RpY2tlci1tYW5hZ2VyJ1xuaW1wb3J0IEJydXNoTWFuYWdlciBmcm9tICdzaGFyZWQvbWFuYWdlcnMvYnJ1c2gtbWFuYWdlcidcbmltcG9ydCBGaWx0ZXJNYW5hZ2VyIGZyb20gJ3NoYXJlZC9tYW5hZ2Vycy9maWx0ZXItbWFuYWdlcidcbmltcG9ydCBGcmFtZU1hbmFnZXIgZnJvbSAnc2hhcmVkL21hbmFnZXJzL2ZyYW1lLW1hbmFnZXInXG5pbXBvcnQgT3ZlcmxheU1hbmFnZXIgZnJvbSAnc2hhcmVkL21hbmFnZXJzL292ZXJsYXktbWFuYWdlcidcbmltcG9ydCBUcmFuc2Zvcm1SYXRpb01hbmFnZXIgZnJvbSAnc2hhcmVkL21hbmFnZXJzL3RyYW5zZm9ybS1yYXRpby1tYW5hZ2VyJ1xuaW1wb3J0IFRleHREZXNpZ25NYW5hZ2VyIGZyb20gJ3NoYXJlZC9tYW5hZ2Vycy90ZXh0LWRlc2lnbi1tYW5hZ2VyJ1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDT01QT05FTlRTXG5cbmltcG9ydCBCYXNlQ29udHJvbHMgZnJvbSAnLi9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2Jhc2UtY29udHJvbHMnXG5pbXBvcnQgTG9hZGluZ0luZGljYXRvckNvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2xvYWRpbmctaW5kaWNhdG9yLWNvbXBvbmVudCdcbmltcG9ydCBTdWZmaXhlZFRleHRJbnB1dENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudHMvc3VmZml4ZWQtdGV4dC1pbnB1dC1jb21wb25lbnQnXG5pbXBvcnQgU2hhcmVkU3RhdGVDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC1zdGF0ZS1jb21wb25lbnQnXG5pbXBvcnQgQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL2NvbnRyb2xzLWNvbXBvbmVudCdcbmltcG9ydCBDb2xsYXBzZVNlY3Rpb25Db21wb25lbnQgZnJvbSAnLi9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jb2xsYXBzZS1zZWN0aW9uLWNvbXBvbmVudCdcbmltcG9ydCBTY3JvbGxhYmxlTGlzdENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL3Njcm9sbGFibGUtbGlzdC1jb21wb25lbnQnXG5pbXBvcnQgU2xpZGVyQ29udHJvbENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL3NsaWRlci1jb250cm9sLWNvbXBvbmVudCdcbmltcG9ydCBDYW52YXNDb250cm9sc0NvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvY2FudmFzLWNvbnRyb2xzLWNvbXBvbmVudCdcbmltcG9ydCBWYWx1ZVNlbGVjdGlvbkNvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL3ZhbHVlLXNlbGVjdGlvbi1jb21wb25lbnQnXG5pbXBvcnQgQ29sb3JTZWxlY3Rpb25Db21wb25lbnQgZnJvbSAnLi9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jb2xvci1zZWxlY3Rpb24tY29tcG9uZW50J1xuaW1wb3J0IEJ1dHRvbkNvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2J1dHRvbi1jb21wb25lbnQnXG5pbXBvcnQgRHJvcGRvd25Db21wb25lbnQgZnJvbSAnLi9jb21wb25lbnRzL3NoYXJlZC9mb3Jtcy9kcm9wZG93bi1jb21wb25lbnQnXG5pbXBvcnQgVGV4dElucHV0Q29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50cy9zaGFyZWQvZm9ybXMvdGV4dC1pbnB1dC1jb21wb25lbnQnXG5pbXBvcnQgRHJhZ2dhYmxlQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50cy9kcmFnZ2FibGUtY29tcG9uZW50J1xuaW1wb3J0IEludmlzaWJsZVVwbG9hZENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudHMvc2hhcmVkL2ludmlzaWJsZS11cGxvYWQtY29tcG9uZW50J1xuaW1wb3J0IENhbnZhc092ZXJsYXlDb250cm9sc0NvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2NhbnZhcy1vdmVybGF5LWNvbnRyb2xzLWNvbXBvbmVudCdcbmltcG9ydCBUcmFuc2l0aW9uIGZyb20gJy4vY29tcG9uZW50cy90cmFuc2l0aW9uJ1xuaW1wb3J0IENoZWNrYm94Q29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvY2hlY2tib3gtY29tcG9uZW50LmpzeCdcblxuLyoqIEV4cG9ydHMgKiovXG5leHBvcnQgeyBGcmFtZSB9XG5leHBvcnQgeyBTaGFyZWRTdGF0ZUNvbXBvbmVudCB9XG5leHBvcnQgeyBDb250cm9sc0NvbXBvbmVudCB9XG5leHBvcnQgeyBDb2xsYXBzZVNlY3Rpb25Db21wb25lbnQgfVxuZXhwb3J0IHsgU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQgfVxuZXhwb3J0IHsgU2xpZGVyQ29udHJvbENvbXBvbmVudCB9XG5leHBvcnQgeyBDYW52YXNDb250cm9sc0NvbXBvbmVudCB9XG5leHBvcnQgeyBWYWx1ZVNlbGVjdGlvbkNvbXBvbmVudCB9XG5leHBvcnQgeyBDb2xvclNlbGVjdGlvbkNvbXBvbmVudCB9XG5leHBvcnQgeyBCdXR0b25Db21wb25lbnQgfVxuZXhwb3J0IHsgRHJvcGRvd25Db21wb25lbnQgfVxuZXhwb3J0IHsgVGV4dElucHV0Q29tcG9uZW50IH1cbmV4cG9ydCB7IERyYWdnYWJsZUNvbXBvbmVudCB9XG5leHBvcnQgeyBJbnZpc2libGVVcGxvYWRDb21wb25lbnQgfVxuZXhwb3J0IHsgQ2FudmFzT3ZlcmxheUNvbnRyb2xzQ29tcG9uZW50IH1cbmV4cG9ydCB7IFRyYW5zaXRpb24gfVxuZXhwb3J0IHsgQ2hlY2tib3hDb21wb25lbnQgfVxuXG5leHBvcnQgeyBMaWJyYXJ5IH1cbmV4cG9ydCB7IE1vZGFsTWFuYWdlciB9XG5leHBvcnQgeyBEZWxheWVkSm9iUXVldWUgfVxuZXhwb3J0IHsgR3JvdXBlZENvbnRyb2xzU3R5bGVzIH1cbmV4cG9ydCB7IENvbnRyb2xzU3R5bGVzIH1cblxuZXhwb3J0IHsgRm9udE1hbmFnZXIgfVxuZXhwb3J0IHsgU3RpY2tlck1hbmFnZXIgfVxuZXhwb3J0IHsgQnJ1c2hNYW5hZ2VyIH1cbmV4cG9ydCB7IEZpbHRlck1hbmFnZXIgfVxuZXhwb3J0IHsgRnJhbWVNYW5hZ2VyIH1cbmV4cG9ydCB7IE92ZXJsYXlNYW5hZ2VyIH1cbmV4cG9ydCB7IFRleHREZXNpZ25NYW5hZ2VyIH1cbmV4cG9ydCB7IFRyYW5zZm9ybVJhdGlvTWFuYWdlciB9XG5cbmV4cG9ydCB7IEJhc2VDb250cm9scyB9XG5leHBvcnQgeyBMb2FkaW5nSW5kaWNhdG9yQ29tcG9uZW50IH1cbmV4cG9ydCB7IFN1ZmZpeGVkVGV4dElucHV0Q29tcG9uZW50IH1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvZXhwb3J0cy5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBQcm92aWRlciB9IGZyb20gJy4vcHJvdmlkZXInXG5leHBvcnQgeyBkZWZhdWx0IGFzIENhdGVnb3J5IH0gZnJvbSAnLi9jYXRlZ29yeSdcbmV4cG9ydCB7IGRlZmF1bHQgYXMgSW1hZ2UgfSBmcm9tICcuL2ltYWdlJ1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9saWIvbGlicmFyeS9pbmRleC5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBKU09OTG9hZGVyIGZyb20gJ3NoYXJlZC9sb2FkZXJzL2pzb24tbG9hZGVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaWJyYXJ5UHJvdmlkZXIge1xuICAvKipcbiAgICogTG9hZHMgdGhlIGdpdmVuIFVSTCB1c2luZyBKU09OKFApXG4gICAqIEBwYXJhbSAge1N0cmluZ30gdXJsXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbG9hZEpTT04gKHVybCkge1xuICAgIGNvbnN0IGxvYWRlciA9IG5ldyBKU09OTG9hZGVyKHVybClcbiAgICByZXR1cm4gbG9hZGVyLmxvYWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhdGVnb3JpZXNcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHJlc29sdmUge1Bob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5MaWJyYXJ5LkNhdGVnb3J5W119XG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgZ2V0Q2F0ZWdvcmllcyAoKSB7XG4gICAgTG9nLndhcm4odGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCAnYGdldENhdGVnb3JpZXNgIGlzIGFic3RyYWN0IGFuZCBub3QgaW1wbGVtZW50ZWQuJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGltYWdlcyBmb3IgdGhlIGdpdmVuIHNlYXJjaCBxdWVyeVxuICAgKiBAcGFyYW0ge1N0cmluZ30gcXVlcnlcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHJlc29sdmUge1Bob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5MaWJyYXJ5LkltYWdlW119XG4gICAqL1xuICBzZWFyY2hJbWFnZXMgKHF1ZXJ5KSB7XG4gICAgTG9nLndhcm4odGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCAnYHNlYXJjaEltYWdlc2AgaXMgYWJzdHJhY3QgYW5kIG5vdCBpbXBsZW1lbnRlZC4nKVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvbGliL2xpYnJhcnkvcHJvdmlkZXIuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFNESywgT3B0aW9uVHlwZSwgU0RLVXRpbHMgfSBmcm9tICdnbG9iYWxzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaWJyYXJ5Q2F0ZWdvcnkgZXh0ZW5kcyBTREsuQ29uZmlndXJhYmxlIHtcbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fY292ZXJJbWFnZSA9IG51bGxcbiAgICB0aGlzLl9jb3ZlckltYWdlTG9hZGVkID0gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgY292ZXIgaW1hZ2VcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHJlc29sdmUge0ltYWdlfVxuICAgKi9cbiAgbG9hZENvdmVySW1hZ2UgKGNyb3NzT3JpZ2luID0gJ2Fub255bW91cycpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKClcbiAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuX2NvdmVySW1hZ2VMb2FkZWQgPSB0cnVlXG4gICAgICAgIHJlc29sdmUoaW1hZ2UpXG4gICAgICB9KVxuICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIGltYWdlIGF0ICR7dGhpcy5nZXRDb3ZlckltYWdlKCl9YCkpXG4gICAgICB9KVxuXG4gICAgICBpbWFnZS5jcm9zc09yaWdpbiA9IFNES1V0aWxzLmdldENyb3NzT3JpZ2luVmFsdWUoY3Jvc3NPcmlnaW4pXG4gICAgICBpbWFnZS5zcmMgPSB0aGlzLmdldENvdmVySW1hZ2UoKVxuICAgICAgdGhpcy5fY292ZXJJbWFnZSA9IGltYWdlXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGNvdmVyIGltYWdlIGhhcyBiZWVuIGxvYWRlZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgaXNDb3ZlckltYWdlTG9hZGVkICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY292ZXJJbWFnZSAmJiB0aGlzLl9jb3ZlckltYWdlTG9hZGVkXG4gIH1cbn1cblxuLyoqXG4gKiBTcGVjaWZpZXMgdGhlIGF2YWlsYWJsZSBvcHRpb25zIGZvciB0aGlzIGZpbHRlclxuICogQHR5cGUge09iamVjdH1cbiAqIEBpZ25vcmVcbiAqL1xuTGlicmFyeUNhdGVnb3J5LnByb3RvdHlwZS5hdmFpbGFibGVPcHRpb25zID0ge1xuICBuYW1lOiB7IHR5cGU6IE9wdGlvblR5cGUuU1RSSU5HLCByZXF1aXJlZDogdHJ1ZSB9LFxuICBjb3ZlckltYWdlOiB7IHR5cGU6IE9wdGlvblR5cGUuU1RSSU5HLCByZXF1aXJlZDogdHJ1ZSB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2xpYi9saWJyYXJ5L2NhdGVnb3J5LmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBTREssIE9wdGlvblR5cGUsIFNES1V0aWxzIH0gZnJvbSAnZ2xvYmFscydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlicmFyeUltYWdlIGV4dGVuZHMgU0RLLkNvbmZpZ3VyYWJsZSB7XG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX3RodW1iSW1hZ2UgPSBudWxsXG4gICAgdGhpcy5fdGh1bWJJbWFnZUxvYWRlZCA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgdGhlIHRodW1iXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEByZXNvbHZlIHtJbWFnZX1cbiAgICovXG4gIGxvYWRUaHVtYiAoY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKVxuICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgICAgdGhpcy5fdGh1bWJJbWFnZUxvYWRlZCA9IHRydWVcbiAgICAgICAgcmVzb2x2ZShpbWFnZSlcbiAgICAgIH0pXG4gICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICgpID0+IHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgaW1hZ2UgYXQgJHt0aGlzLmdldFRodW1iVXJsKCl9YCkpXG4gICAgICB9KVxuXG4gICAgICBpbWFnZS5jcm9zc09yaWdpbiA9IFNES1V0aWxzLmdldENyb3NzT3JpZ2luVmFsdWUoY3Jvc3NPcmlnaW4pXG4gICAgICBpbWFnZS5zcmMgPSB0aGlzLmdldFRodW1iVXJsKClcbiAgICAgIHRoaXMuX3RodW1iSW1hZ2UgPSBpbWFnZVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSB0aHVtYiBoYXMgYmVlbiBsb2FkZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGlzVGh1bWJMb2FkZWQgKCkge1xuICAgIHJldHVybiB0aGlzLl90aHVtYkltYWdlICYmIHRoaXMuX3RodW1iSW1hZ2VMb2FkZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0aHVtYm5haWwgaW1hZ2VcbiAgICogQHJldHVybiB7SW1hZ2V9XG4gICAqL1xuICBnZXRUaHVtYkltYWdlICgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGh1bWJJbWFnZVxuICB9XG59XG5cbkxpYnJhcnlJbWFnZS5wcm90b3R5cGUuYXZhaWxhYmxlT3B0aW9ucyA9IHtcbiAgY2F0ZWdvcnk6IHsgdHlwZTogT3B0aW9uVHlwZS5PQkpFQ1QsIHJlcXVpcmVkOiB0cnVlIH0sXG4gIHRpdGxlOiB7IHR5cGU6IE9wdGlvblR5cGUuU1RSSU5HIH0sXG4gIHJhd1VybDogeyB0eXBlOiBPcHRpb25UeXBlLlNUUklORywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgdGh1bWJVcmw6IHsgdHlwZTogT3B0aW9uVHlwZS5TVFJJTkcgfSxcbiAgYXV0aG9yTmFtZTogeyB0eXBlOiBPcHRpb25UeXBlLlNUUklORyB9LFxuICBhdXRob3JBdmF0YXI6IHsgdHlwZTogT3B0aW9uVHlwZS5TVFJJTkcgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9saWIvbGlicmFyeS9pbWFnZS5qcyIsImltcG9ydCB7IFNES1V0aWxzLCBub3csIEV2ZW50RW1pdHRlciwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIH0gZnJvbSAnZ2xvYmFscydcblxuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaGFuZGxlcyBhIGxpc3Qgb2Ygam9icywgcHJvY2Vzc2VzIHRoZW0gb25lIGFmdGVyIGFub3RoZXJcbiAqIHdoaWxlIG1ha2luZyBzdXJlIHRoZSBqb2JzIGFyZSBub3QgZmluaXNoaW5nIHRvbyBxdWlja2x5IChkZWxheWVkKVxuICogQGlnbm9yZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZWxheWVkSm9iUXVldWUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtGdW5jdGlvbltdfSBqb2JzIC0gQW4gYXJyYXkgb2YgZnVuY3Rpb25zIHJldHVybmluZyBwcm9taXNlc1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5taW5EZWxheSA9IDQwMF1cbiAgICovXG4gIGNvbnN0cnVjdG9yIChqb2JzLCBvcHRpb25zKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuX2pvYnMgPSBqb2JzXG4gICAgdGhpcy5fb3B0aW9ucyA9IFNES1V0aWxzLmRlZmF1bHRzKG9wdGlvbnMsIHtcbiAgICAgIG1pbkRlbGF5OiA0MDBcbiAgICB9KVxuICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZVxuICAgIHRoaXMuX2N1cnJlbnRKb2IgPSBudWxsXG4gICAgdGhpcy5fY3VycmVudEpvYkluZGV4ID0gMFxuXG4gICAgdGhpcy5fdGljayA9IHRoaXMuX3RpY2suYmluZCh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgcXVldWUgcHJvY2Vzc2luZ1xuICAgKi9cbiAgc3RhcnQgKCkge1xuICAgIHRoaXMuX3J1bm5pbmcgPSB0cnVlXG4gICAgdGhpcy5fbGFzdEpvYkZpbmlzaGVkID0gbm93KClcblxuICAgIHRoaXMuX3RpY2soKVxuICB9XG5cbiAgLyoqXG4gICAqIEludGVybmFsIHRpY2sgZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF90aWNrICgpIHtcbiAgICBpZiAoIXRoaXMuX3J1bm5pbmcpIHJldHVyblxuXG4gICAgaWYgKCF0aGlzLl9jdXJyZW50Sm9iKSB7XG4gICAgICB0aGlzLl9jdXJyZW50Sm9iID0gdGhpcy5fam9ic1t0aGlzLl9jdXJyZW50Sm9iSW5kZXhdXG5cbiAgICAgIGlmICghdGhpcy5fY3VycmVudEpvYikge1xuICAgICAgICB0aGlzLmVtaXQoJ2RvbmUnKVxuICAgICAgICB0aGlzLnN0b3AoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcy5fY3VycmVudEpvYi5mbigpXG4gICAgICAgIC50aGVuKCguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgY29uc3QgZG9uZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnam9iLWRvbmUnLCB0aGlzLl9jdXJyZW50Sm9iLCAuLi5hcmdzKVxuICAgICAgICAgICAgdGhpcy5fbGFzdEpvYkZpbmlzaGVkID0gbm93KClcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRKb2IgPSBudWxsXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG5vdygpIC0gdGhpcy5fbGFzdEpvYkZpbmlzaGVkIDwgdGhpcy5fb3B0aW9ucy5taW5EZWxheSkge1xuICAgICAgICAgICAgY29uc3QgdGltZUxlZnQgPSB0aGlzLl9vcHRpb25zLm1pbkRlbGF5IC0gKG5vdygpIC0gdGhpcy5fbGFzdEpvYkZpbmlzaGVkKVxuICAgICAgICAgICAgc2V0VGltZW91dChkb25lLCB0aW1lTGVmdClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHRoaXMuX2N1cnJlbnRKb2IsIGUpXG4gICAgICAgICAgdGhpcy5fY3VycmVudEpvYiA9IG51bGxcbiAgICAgICAgfSlcblxuICAgICAgdGhpcy5fY3VycmVudEpvYkluZGV4KytcbiAgICB9XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5fdGljaylcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wcyB0aGUgcXVldWUgcHJvY2Vzc2luZ1xuICAgKi9cbiAgc3RvcCAoKSB7XG4gICAgdGhpcy5fcnVubmluZyA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgdGhlIHF1ZXVlLCBjbGVhbnMgdXBcbiAgICovXG4gIGRpc3Bvc2UgKCkge1xuICAgIHRoaXMuX2pvYnMgPSBbXVxuICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2xpYi9kZWxheWVkLWpvYi1xdWV1ZS5qcyIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6LyoqXG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgYWRvbmlzIH0gZnJvbSAnZ2xvYmFscydcblxuZXhwb3J0IGNvbnN0IEZ1bGxDb250YWluZXIgPSBhZG9uaXMuY3NzKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGxlZnQ6IDAsXG4gIHRvcDogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJSdcbn0pXG5cbmV4cG9ydCBjb25zdCBDb250cm9sSXRlbSA9IGFkb25pcy5jc3Moe1xuICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgY29sb3IgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259cyBlYXNlLW91dGAsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAnYmxvY2snLFxuICBoZWlnaHQ6ICc4MHB4JyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgbWFyZ2luQm90dG9tOiAnOHB4JyxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLnRleHRDb2xvcixcbiAgYm94U2hhZG93OiAnMCAycHggMnB4IDAgcmdiYSgwLDAsMCwwLjEwKSwgMCAzcHggNHB4IDAgcmdiYSgwLDAsMCwwLjMwKSwgMCA0cHggNnB4IDAgcmdiYSgwLDAsMCwwLjMwKScsXG4gIGJhY2tncm91bmQ6IHRoZW1lID0+IHRoZW1lLnNlY29uZGFyeUNvbnRyb2xzQmFja2dyb3VuZENvbG9yLFxuICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcblxuICAnOmFmdGVyJzoge1xuICAgIHRyYW5zaXRpb246IHRoZW1lID0+IGBhbGwgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259cyBlYXNlLW91dGAsXG4gICAgY29udGVudDogJ1wiXCInLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgekluZGV4OiAnMScsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgbGVmdDogJzAnLFxuICAgIHRvcDogJzAnLFxuICAgIHJpZ2h0OiAnMCcsXG4gICAgYm90dG9tOiAnMCcsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkIHdoaXRlJyxcbiAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICAgIG9wYWNpdHk6IDBcbiAgfSxcblxuICAnOmhvdmVyOmFmdGVyJzoge1xuICAgIHRyYW5zaXRpb246IHRoZW1lID0+IGBhbGwgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259cyBlYXNlLWluYCxcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn0sIHtcbiAgYW5pbWF0ZWQ6IHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgb3BhY2l0eTogMCxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgYWxsICR7dGhlbWUudHJhbnNpdGlvbkR1cmF0aW9ufXMgZWFzZS1vdXRgLFxuICAgIHRvcDogJzEwMHB4JyAvLyAxMDAgLSAxNlxuICB9LFxuICBzZWxlY3RlZDoge1xuICAgIGJveFNoYWRvdzogJzAgMnB4IDJweCAwIHJnYmEoMCwwLDAsMC4zMCksIDAgNHB4IDZweCAwIHJnYmEoMCwwLDAsMC4zMCksIDAgNnB4IDhweCAwIHJnYmEoMCwwLDAsMC4zMCksIDAgOHB4IDEwcHggMCByZ2JhKDAsMCwwLDAuMzApJyxcbiAgICB6SW5kZXg6IDIsXG4gICAgJzpob3ZlcjphZnRlcic6IHtcbiAgICAgIG9wYWNpdHk6IDBcbiAgICB9XG4gIH0sXG4gIHZpc2libGU6IHtcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC0xMDBweCknLFxuICAgIG9wYWNpdHk6IDFcbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IENvbnRyb2xJdGVtVGV4dFN0eWxlcyA9IGFkb25pcy5jc3Moe1xuICBsaW5lSGVpZ2h0OiAnMTNweCcsXG4gIGZvbnRTaXplOiAnMTNweCcsXG4gIGxldHRlclNwYWNpbmc6ICcwLjE4cHgnLFxuICB0ZXh0U2hhZG93OiAnMCAxcHggMnB4IHJnYmEoMCwwLDAsMC4yNCknLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICBmb250RmFtaWx5OiB0aGVtZSA9PiB0aGVtZS5yZWd1bGFyRm9udEZhbWlseVxufSlcblxuZXhwb3J0IGNvbnN0IENvbnRyb2xJdGVtVGl0bGUgPSBhZG9uaXMuY3NzKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgekluZGV4OiAnMicsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBsZWZ0OiAnMCcsXG4gIHJpZ2h0OiAnMCcsXG4gIGJvdHRvbTogJzEwcHgnLFxuICBsaW5lSGVpZ2h0OiAnMTNweCcsXG4gIGZvbnRTaXplOiAnMTNweCcsXG4gIGxldHRlclNwYWNpbmc6ICcwLjE4cHgnLFxuICB0ZXh0U2hhZG93OiAnMCAwIDRweCByZ2JhKDAsIDAsIDAsIDAuNSknLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICBvcGFjaXR5OiAwLjgsXG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnJlZ3VsYXJGb250RmFtaWx5LFxuICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2Utb3V0YFxufSwge1xuICBob3ZlcmVkOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2UtaW5gXG4gIH1cbn0pXG5cbmV4cG9ydCBjb25zdCBDb250cm9sSXRlbUFjdGl2ZU92ZXJsYXkgPSBhZG9uaXMuY3NzKHtcbiAgekluZGV4OiAnMScsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICcwJyxcbiAgcmlnaHQ6ICcwJyxcbiAgbGVmdDogJzAnLFxuICBib3R0b206ICcwJyxcbiAgYm9yZGVyOiB0aGVtZSA9PiBgMXB4IHNvbGlkICR7dGhlbWUuaGlnaGxpZ2h0Q29sb3J9YCxcbiAgYmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC42KScsXG4gIGJveFNoYWRvdzogJzAgMnB4IDJweCAwIHJnYmEoMCwgMCwgMCwgMC4xNSksIDAgMnB4IDEwcHggMCByZ2JhKDAsIDAsIDAsIDAuNjApJyxcbiAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcbiAgb3BhY2l0eTogMCxcbiAgZGlzcGxheTogJ25vbmUnLFxuICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2Utb3V0YFxufSwge1xuICB2aXNpYmxlOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2UtaW5gXG4gIH0sXG4gIHJlbmRlcmVkOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJ1xuICB9XG59KVxuXG5leHBvcnQgY29uc3QgQ29udHJvbEl0ZW1PdmVybGF5ID0gYWRvbmlzLmNzcyh7XG4gIHpJbmRleDogJzEnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIGJhY2tncm91bmRJbWFnZTogJ2xpbmVhci1ncmFkaWVudCgtMTgwZGVnLCByZ2JhKDAsMCwwLDAuMDApIDAlLCByZ2JhKDAsMCwwLDAuNjkpIDEwMCUpJyxcbiAgYm9yZGVyUmFkaXVzOiAnMnB4J1xufSlcblxuZXhwb3J0IGNvbnN0IEtub2IgPSBhZG9uaXMuY3NzKHtcbiAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgYmFja2dyb3VuZDogdGhlbWUgPT4gdGhlbWUuY29udHJvbHNLbm9iQ29sb3IsXG4gIGJveFNoYWRvdzogJzAgMnB4IDJweCAwIHJnYmEoMCwgMCwgMCwgMC4yNCknLFxuICB3aWR0aDogJzE2cHgnLFxuICBoZWlnaHQ6ICcxNnB4JyxcbiAgbWFyZ2luVG9wOiAnLThweCcsXG4gIG1hcmdpbkxlZnQ6ICctOHB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG59KVxuXG5leHBvcnQgY29uc3QgUGxhaW5Db250cm9sSXRlbSA9IGFkb25pcy5jc3Moe1xuICBvcGFjaXR5OiAnMScsXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBtYXJnaW5Cb3R0b206ICc4cHgnLFxuICBiYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA0KScsXG4gIGJvcmRlcjogJzFweCBzb2xpZCB0cmFuc3BhcmVudCcsXG4gIHRyYW5zaXRpb246IHRoZW1lID0+IGBhbGwgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259cyBlYXNlLW91dGAsXG4gICcmOmhvdmVyJzoge1xuICAgIGJvcmRlcjogJzFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgpJyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgYWxsICR7dGhlbWUudHJhbnNpdGlvbkR1cmF0aW9ufXMgZWFzZS1pbmBcbiAgfSxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLnRleHRDb2xvclxufSwge1xuICB0aHJlZUNvbHVtbnM6IHtcbiAgICB3aWR0aDogJzU1cHgnLFxuICAgIGhlaWdodDogJzU1cHgnLFxuICAgIG1hcmdpbkxlZnQ6ICc4cHgnLFxuICAgIG1hcmdpbkJvdHRvbTogJzhweCdcbiAgfSxcbiAgdHdvQ29sdW1uczoge1xuICAgIHdpZHRoOiAnODBweCcsXG4gICAgaGVpZ2h0OiAnODBweCcsXG4gICAgbWFyZ2luTGVmdDogJzhweCcsXG4gICAgbWFyZ2luQm90dG9tOiAnOHB4J1xuICB9LFxuICB3aXRoVGV4dDoge1xuICAgIHZlcnRpY2FsQWxpZ246ICdjZW50ZXInLFxuICAgIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnJlZ3VsYXJGb250RmFtaWx5LFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgcGFkZGluZ1RvcDogJzMycHgnXG4gIH0sXG4gIHNlbGVjdGVkOiB7XG4gICAgdHJhbnNpdGlvbjogdGhlbWUgPT4gYGFsbCAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2UtaW5gLFxuICAgIGJvcmRlcjogdGhlbWUgPT4gYDFweCBzb2xpZCAke3RoZW1lLnByaW1hcnlDb2xvcn1gLFxuICAgIGJhY2tncm91bmQ6IHRoZW1lID0+IGByZ2JhKCR7dGhlbWUucHJpbWFyeUNvbG9yUkdCfSwgMC4xNClgLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYm9yZGVyOiB0aGVtZSA9PiBgMXB4IHNvbGlkICR7dGhlbWUucHJpbWFyeUNvbG9yfWAsXG4gICAgICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiBgcmdiYSgke3RoZW1lLnByaW1hcnlDb2xvclJHQn0sIDAuMTQpYFxuICAgIH1cbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IFBsYWluQ29udHJvbEl0ZW1CYWNrZ3JvdW5kID0gYWRvbmlzLmNzcyh7XG4gIHBhZGRpbmc6ICcxMHB4JyxcbiAgYm9yZGVyUmFkaXVzOiAnMXB4JyxcbiAgYm9yZGVyOiAnMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuXG4gICc6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNCknXG4gIH1cbn0sIHtcbiAgc2VsZWN0ZWQ6IHtcbiAgICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiBgcmdiYSgke3RoZW1lLmhpZ2hsaWdodENvbG9yUkdCfSwgLjIpYCxcbiAgICBib3JkZXJDb2xvcjogdGhlbWUgPT4gYCR7dGhlbWUuaGlnaGxpZ2h0Q29sb3J9YCxcblxuICAgICc6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiBgcmdiYSgke3RoZW1lLmhpZ2hsaWdodENvbG9yUkdCfSwgLjIpYFxuICAgIH1cbiAgfVxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9jb250cm9scy1zdHlsZXMuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgeyBVdGlscyBhcyBTREtVdGlscyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuaW1wb3J0IENhbnZhc0NvbnRyb2xzQ29tcG9uZW50IGZyb20gJy4vY2FudmFzLWNvbnRyb2xzLWNvbXBvbmVudCdcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgdG9vbCBjb250cm9scy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUlcbiAqL1xuY2xhc3MgQmFzZUNvbnRyb2xzIHtcbiAgY29uc3RydWN0b3IgKGNvbnRleHQsIHNoYXJlZFN0YXRlLCBvcHRpb25zKSB7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dFxuICAgIHRoaXMuc2hhcmVkU3RhdGUgPSBzaGFyZWRTdGF0ZVxuXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLl9tZWRpYXRvciA9IGNvbnRleHQubWVkaWF0b3JcbiAgICB0aGlzLnNraXBIaXN0b3J5ID0gZmFsc2VcblxuICAgIHRoaXMuX2luaXRpYWxPcHRpb25zID0ge31cblxuICAgIHRoaXMuX29uT3BlcmF0aW9uUmVtb3ZlZCA9IHRoaXMuX29uT3BlcmF0aW9uUmVtb3ZlZC5iaW5kKHRoaXMpXG4gICAgdGhpcy5fb25PcGVyYXRpb25VcGRhdGVkID0gdGhpcy5fb25PcGVyYXRpb25VcGRhdGVkLmJpbmQodGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGlkZW50aWZpZXIgPSBudWxsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250cm9scyBjb21wb25lbnQgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtSZWFjdC5Db21wb25lbnR9XG4gICAqL1xuICBzdGF0aWMgY29udHJvbHNDb21wb25lbnQgPSBudWxsXG5cbiAgLyoqXG4gICAqIFRoZSBjYW52YXMgY29tcG9uZW50IGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7UmVhY3QuQ29tcG9uZW50fVxuICAgKi9cbiAgc3RhdGljIGNhbnZhc0NvbnRyb2xzQ29tcG9uZW50ID0gQ2FudmFzQ29udHJvbHNDb21wb25lbnRcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgb3B0aW9ucyBvZiB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRPcHRpb25zID0ge31cblxuICAvKipcbiAgICogVGhlIG9wZXJhdGlvbnMgdGhhdCBhcmUgcmVxdWlyZWQgZm9yIHRoaXMgY29udHJvbCB0byBmdW5jdGlvbi5cbiAgICogQHR5cGUge1N0cmluZ1tdfVxuICAgKi9cbiAgc3RhdGljIHJlcXVpcmVkT3BlcmF0aW9ucyA9IFtdXG5cbiAgLyoqXG4gICAqIE9wZXJhdGlvbnMgd2hpY2ggd2lsbCB0cmlnZ2VyIFVJIHVwZGF0ZXMgb24gdGhpcyBjb250cm9scy5cbiAgICogQHR5cGUge1N0cmluZ1tdfVxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgdXBkYXRhYmxlT3BlcmF0aW9ucyA9IFtdXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBlZGl0b3Igd2lsbCBzd2l0Y2ggdG8gdGhlIGRlZmF1bHQgY29udHJvbHMgd2hlbiBhbnkgb2YgdGhlIHVwZGF0YWJsZU9wZXJhdGlvbnMgaXMgcmVtb3ZlZC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHN0YXRpYyBzd2l0Y2hUb0RlZmF1bHRDb250cm9sc09uUmVtb3ZhbCA9IHRydWVcblxuICAvKipcbiAgICogTWFwcyB0aGUgb3BlcmF0aW9ucyBzdGF0ZSB0byBhIHNoYXJlZCBzdGF0ZSBvYmplY3QuIENhbGxlZCB3aGVuZXZlciBvbmUgb2ZcbiAgICogdGhlIHVwZGF0YWJsZU9wZXJhdGlvbnMgaXMgbW9kaWZpZWQsIGNyZWF0ZWQgb3IgcmVtb3ZlZC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3BlcmF0aW9uc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpbml0aWFsPWZhbHNlXVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIEFuIG9iamVjdCB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHNoYXJlZFN0YXRlLnNldFxuICAgKi9cbiAgc3RhdGljIG1hcE9wZXJhdGlvbnNUb1NoYXJlZFN0YXRlIChvcGVyYXRpb25zLCBpbml0aWFsID0gZmFsc2UsIHByZXZpb3VzU3RhdGUgPSB7fSkgeyB9XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIG1ldGhvZCBmb3IgVUkuaGVscGVycy5hc3NldFBhdGhcbiAgICogQHBhcmFtIHs/fSAuLi5hcmdzXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9nZXRBc3NldFBhdGggKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnVpLmdldEFzc2V0UGF0aCguLi5hcmdzKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHRyYW5zbGF0aW9uIGZvciBga2V5YFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGtleVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IFtpbnRlcnBvbGF0aW9uT3B0aW9uc11cbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgX3QgKGtleSwgaW50ZXJwb2xhdGlvbk9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnVpLnRyYW5zbGF0ZShrZXksIGludGVycG9sYXRpb25PcHRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gYW4gb3BlcmF0aW9uIGhhcyBiZWVuIHJlbW92ZWQuIElmIGl0IGlzIHRoZSBzYW1lIG9wZXJhdGlvbiB0aGF0XG4gICAqIHRoaXMgY29udHJvbCBiZWxvbmdzIHRvLCBpdCBzd2l0Y2hlcyBiYWNrIHRvIHRoZSBvdmVydmlldywgbGVhdmluZyB0aGlzIGNvbnRyb2xcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbk9wZXJhdGlvblJlbW92ZWQgKG9wZXJhdGlvbikge1xuICAgIGNvbnN0IGlkZW50aWZpZXIgPSBvcGVyYXRpb24uY29uc3RydWN0b3IuaWRlbnRpZmllclxuXG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3IudXBkYXRhYmxlT3BlcmF0aW9ucy5pbmRleE9mKGlkZW50aWZpZXIpID49IDApIHtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLnN3aXRjaFRvRGVmYXVsdENvbnRyb2xzT25SZW1vdmFsKSB7XG4gICAgICAgIHRoaXMuc2tpcEhpc3RvcnkgPSB0cnVlXG4gICAgICAgIHRoaXMuY29udGV4dC5zY3JlZW4uc3dpdGNoVG9Db250cm9scygnZGVmYXVsdCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uT3BlcmF0aW9uUmVtb3ZlZChvcGVyYXRpb24pXG4gICAgICAgIHRoaXMudXBkYXRlU2hhcmVkU3RhdGUodHJ1ZSlcbiAgICAgICAgdGhpcy5jb250ZXh0LmVkaXRvci5yZW5kZXIoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBvbmUgb2YgdGhlIHVwZGF0YWJsZU9wZXJhdGlvbnMgaXMgcmVtb3ZlZCBhbmQgaWZcbiAgICogYHN3aXRjaFRvRGVmYXVsdENvbnRyb2xzT25SZW1vdmFsYCBpcyBmYWxzZS5cbiAgICpcbiAgICogQHBhcmFtIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb259IG9wZXJhdGlvblxuICAgKi9cbiAgb25PcGVyYXRpb25SZW1vdmVkIChvcGVyYXRpb24pIHsgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGFuIGFueSBvcGVyYXRpb24gaXMgdXBkYXRlZFxuICAgKlxuICAgKiBAcGFyYW0ge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqL1xuICBfb25PcGVyYXRpb25VcGRhdGVkIChvcGVyYXRpb24sIG5ld09wdGlvbnMpIHtcbiAgICBjb25zdCBpZGVudGlmaWVyID0gb3BlcmF0aW9uLmNvbnN0cnVjdG9yLmlkZW50aWZpZXJcblxuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLnVwZGF0YWJsZU9wZXJhdGlvbnMuaW5kZXhPZihpZGVudGlmaWVyKSA+PSAwKSB7XG4gICAgICB0aGlzLm9uT3BlcmF0aW9uVXBkYXRlZChvcGVyYXRpb24sIG5ld09wdGlvbnMpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgc2hhcmVkIHN0YXRlIGZvciB0aGUgY3VycmVudCBvcGVyYXRpb24gc3RhdGUuXG4gICAqL1xuICB1cGRhdGVTaGFyZWRTdGF0ZSAoaW5pdGlhbCA9IGZhbHNlKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IG5ld1NoYXJlZFN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5tYXBPcGVyYXRpb25zVG9TaGFyZWRTdGF0ZShlZGl0b3Iub3BlcmF0aW9ucywgaW5pdGlhbCwgey4uLnRoaXMuc2hhcmVkU3RhdGUuZ2V0U3RhdGUoKX0pXG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXQobmV3U2hhcmVkU3RhdGUpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiBvbmUgb2YgdGhlIG9wZXJhdGlvbnMgaW4gYHVwZGF0YWJsZU9wZXJhdGlvbnNgIGlzIHVwZGF0ZWRcbiAgICpcbiAgICogQHBhcmFtIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb259IG9wZXJhdGlvblxuICAgKi9cbiAgb25PcGVyYXRpb25VcGRhdGVkIChvcGVyYXRpb24pIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgdGhpcy51cGRhdGVTaGFyZWRTdGF0ZShmYWxzZSlcbiAgICBlZGl0b3IucmVuZGVyKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyBjYWxsZWQgd2hlbiBhIGNvbnRyb2wgaXMgZW50ZXJlZFxuICAgKi9cbiAgb25FbnRlciAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHsgaGlzdG9yeSB9ID0gZWRpdG9yXG4gICAgY29uc3QgZm9yY2VDcm9wID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ2ZvcmNlQ3JvcCcpIC8vIG9wdGlvbnMuZWRpdG9yLmZvcmNlQ3JvcFxuXG4gICAgLy8gT24gdGhlIGZpcnN0IHRpbWUgd2UgZW50ZXIgYSBjb250cm9sLCB3ZSBzaG91bGQgc2V0IGFuIGluaXRpYWwgdW5kbyBzdGF0ZSxcbiAgICAvLyB1bmxlc3MgZm9yY2VDcm9wIGlzIGVuYWJsZWRcbiAgICBpZiAoIWhpc3RvcnkuaGFzSW5pdGlhbFN0YXRlKCkgJiYgIWZvcmNlQ3JvcCkge1xuICAgICAgaGlzdG9yeS5hZGRTbmFwc2hvdCgnZ2xvYmFsJylcbiAgICB9XG5cbiAgICAvLyBTYXZlIHRoZSBpbml0aWFsIG9wdGlvbnMgb2YgdGhlIHVwZGF0YWJsZSBvcGVyYXRpb25zXG4gICAgdGhpcy5fc2F2ZU9wZXJhdGlvbnNPcHRpb25zKClcblxuICAgIHRoaXMudXBkYXRlU2hhcmVkU3RhdGUodHJ1ZSlcbiAgICB0aGlzLl9vbkVudGVyKClcbiAgICB0aGlzLnVwZGF0ZVNoYXJlZFN0YXRlKGZhbHNlKVxuXG4gICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyc1xuICAgIHRoaXMuX21lZGlhdG9yLm9uKENvbnN0YW50cy5FVkVOVFMuT1BFUkFUSU9OX1JFTU9WRUQsIHRoaXMuX29uT3BlcmF0aW9uUmVtb3ZlZClcbiAgICB0aGlzLl9tZWRpYXRvci5vbihDb25zdGFudHMuRVZFTlRTLk9QRVJBVElPTl9VUERBVEVELCB0aGlzLl9vbk9wZXJhdGlvblVwZGF0ZWQpXG4gICAgdGhpcy5fbWVkaWF0b3Iub24oQ29uc3RhbnRzLkVWRU5UUy5PUEVSQVRJT05fQ1JFQVRFRCwgdGhpcy5fb25PcGVyYXRpb25VcGRhdGVkKVxuICB9XG5cbiAgLyoqXG4gICAqIFNhdmVzIHRoZSBvcHRpb25zIG9mIHRoZSByZXF1aXJlZCBvcGVyYXRpb25zIGZvciB0aGlzIGNvbnRyb2xcbiAgICogQHByaXZhdGVcbiAgICogQG1lbWJlcm9mIEJhc2VDb250cm9sc1xuICAgKi9cbiAgX3NhdmVPcGVyYXRpb25zT3B0aW9ucyAoKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9ucyA9IHRoaXMuY29udGV4dC5lZGl0b3Iub3BlcmF0aW9uc1xuICAgIHRoaXMuX2luaXRpYWxPcHRpb25zID0ge31cbiAgICB0aGlzLmNvbnN0cnVjdG9yLnVwZGF0YWJsZU9wZXJhdGlvbnMuZm9yRWFjaChpZGVudGlmaWVyID0+IHtcbiAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG9wZXJhdGlvbnMuZ2V0KGlkZW50aWZpZXIpXG4gICAgICBpZiAob3BlcmF0aW9uKSB7XG4gICAgICAgIHRoaXMuX2luaXRpYWxPcHRpb25zW2lkZW50aWZpZXJdID0gb3BlcmF0aW9uLnNlcmlhbGl6ZU9wdGlvbnMoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgZ2xvYmFsIGhpc3Rvcnkgc25hcHNob3Qgc2hvdWxkIGJlIGFkZGVkIG9yIG5vdCB3aGVuIGV4aXRpbmcgdGhlIGNvbnRyb2xzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICogQG1lbWJlcm9mIEJhc2VDb250cm9sc1xuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfc2hvdWxkQWRkR2xvYmFsSGlzdG9yeVNuYXBzaG90ICgpIHtcbiAgICBjb25zdCB7IGhpc3RvcnksIG9wZXJhdGlvbnMgfSA9IHRoaXMuY29udGV4dC5lZGl0b3JcbiAgICBjb25zdCBsYXN0SXRlbSA9IFNES1V0aWxzLkFycmF5Lmxhc3QoaGlzdG9yeS5nZXRJdGVtcygpLmZpbHRlcihpdGVtID0+IGl0ZW0uc2NvcGUgPT09ICdnbG9iYWwnKSlcblxuICAgIGNvbnN0IG9wZXJhdGlvbkhhc0NoYW5nZXMgPSAob3BlcmF0aW9uLCBvcHRpb25zKSA9PiB7XG4gICAgICBpZiAoIW9wZXJhdGlvbiAmJiAhb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYgKG9wZXJhdGlvbiAmJiAhb3B0aW9ucyAmJiBvcGVyYXRpb24uaGFzQ2hhbmdlcygpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmICghb3BlcmF0aW9uICYmIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKG9wZXJhdGlvbiAmJiBvcHRpb25zICYmICFvcGVyYXRpb24ub3B0aW9uc0VxdWFsKG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnVwZGF0YWJsZU9wZXJhdGlvbnMuc29tZShpZGVudGlmaWVyID0+IHtcbiAgICAgIGNvbnN0IGluaXRpYWxPcHRpb25zID0gdGhpcy5faW5pdGlhbE9wdGlvbnNbaWRlbnRpZmllcl1cbiAgICAgIGNvbnN0IHNuYXBzaG90T3B0aW9ucyA9IGxhc3RJdGVtID8gbGFzdEl0ZW0uc25hcHNob3Qub3BlcmF0aW9uc1tpZGVudGlmaWVyXSA6IG51bGxcbiAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG9wZXJhdGlvbnMuZ2V0KGlkZW50aWZpZXIpXG5cbiAgICAgIGxldCByZXN1bHQgPSBvcGVyYXRpb25IYXNDaGFuZ2VzKG9wZXJhdGlvbiwgaW5pdGlhbE9wdGlvbnMpICYmIG9wZXJhdGlvbkhhc0NoYW5nZXMob3BlcmF0aW9uLCBzbmFwc2hvdE9wdGlvbnMpXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyBjYWxsZWQgd2hlbiBhIGNvbnRyb2wgaXMgZW50ZXJlZFxuICAgKiBAYWJzdHJhY3RcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX29uRW50ZXIgKCkge31cblxuICAvKipcbiAgICogSXMgY2FsbGVkIHdoZW4gYSBjb250cm9sIGlzIGxlZnRcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIG9uTGVhdmUgKCkge1xuICAgIHJldHVybiB0aGlzLm9uQmVmb3JlTGVhdmUoKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2UgPT09ICdib29sZWFuJykge1xuICAgICAgICAgIHJlc3BvbnNlID0geyBsZWF2ZTogcmVzcG9uc2UgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgbGVhdmUsIGRhdGEgfSA9IHJlc3BvbnNlXG5cbiAgICAgICAgaWYgKCFsZWF2ZSkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgdGhpcy5fbWVkaWF0b3Iub2ZmKENvbnN0YW50cy5FVkVOVFMuT1BFUkFUSU9OX1JFTU9WRUQsIHRoaXMuX29uT3BlcmF0aW9uUmVtb3ZlZClcbiAgICAgICAgdGhpcy5fbWVkaWF0b3Iub2ZmKENvbnN0YW50cy5FVkVOVFMuT1BFUkFUSU9OX1VQREFURUQsIHRoaXMuX29uT3BlcmF0aW9uVXBkYXRlZClcbiAgICAgICAgdGhpcy5fbWVkaWF0b3Iub2ZmKENvbnN0YW50cy5FVkVOVFMuT1BFUkFUSU9OX0NSRUFURUQsIHRoaXMuX29uT3BlcmF0aW9uVXBkYXRlZClcblxuICAgICAgICB0aGlzLl9vbkxlYXZlKGRhdGEgfHwge30pXG5cbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzLmNvbnRleHRcbiAgICAgICAgY29uc3QgeyBoaXN0b3J5LCBvcGVyYXRpb25zIH0gPSB0aGlzLmNvbnRleHQuZWRpdG9yXG5cbiAgICAgICAgLy8gSWYgYW55IGNoYW5nZXMgb2N1cnJlZCwgYWRkIGEgaGlzdG9yeSBzbmFwc2hvdFxuICAgICAgICBpZiAodGhpcy5fc2hvdWxkQWRkR2xvYmFsSGlzdG9yeVNuYXBzaG90KCkpIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fZ2V0R2xvYmFsSGlzdG9yeURhdGEgPyB0aGlzLl9nZXRHbG9iYWxIaXN0b3J5RGF0YSgpIDogbnVsbFxuICAgICAgICAgIHRoaXMuYWRkR2xvYmFsSGlzdG9yeVNuYXBzaG90KHVuZGVmaW5lZCwgZmFsc2UsIGRhdGEpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbGVhbiB1cCBhbnkgb3BlcmF0aW9ucyB3aGljaCBoYXZlIGRlZmF1bHQgb3B0aW9uc1xuICAgICAgICBvcGVyYXRpb25zLnJlbW92ZVVudXNlZCgpXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZWRpdG9yLnVuZG9Nb2RlID09PSAnZ2xvYmFsJykge1xuICAgICAgICAgIGhpc3RvcnkucmVtb3ZlQ29udHJvbHModGhpcy5jb25zdHJ1Y3Rvci5pZGVudGlmaWVyLCAnbG9jYWwnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZWRpdG9yLnVuZG9Nb2RlID09PSAnbG9jYWwnKSB7XG4gICAgICAgICAgaGlzdG9yeS5yZW1vdmVDb250cm9scyh0aGlzLmNvbnN0cnVjdG9yLmlkZW50aWZpZXIsICdnbG9iYWwnKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0pXG4gIH1cblxuICBfZ2V0R2xvYmFsSGlzdG9yeURhdGEgKCkge31cblxuICAvKipcbiAgICogSXMgY2FsbGVkIHdoZW4gYSBjb250cm9sIGlzIGxlZnRcbiAgICogQGFic3RyYWN0XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9vbkxlYXZlICgpIHt9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIGEgY29udHJvbCBpcyBsZWZ0LiBDYW4gY29udHJvbCB3aGV0aGVyIG9yIG5vdCB0aGUgY29udHJvbCBpcyBsZWZ0LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxCb29sZWFuPn1cbiAgICovXG4gIG9uQmVmb3JlTGVhdmUgKCkge1xuICAgIHJldHVybiB0aGlzLl9vbkJlZm9yZUxlYXZlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSBhIGNvbnRyb2wgaXMgbGVmdC4gQ2FuIGNvbnRyb2wgd2hldGhlciBvciBub3QgdGhlIGNvbnRyb2wgaXMgbGVmdC5cbiAgICogQHJldHVybiB7UHJvbWlzZS48Qm9vbGVhbj59XG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfb25CZWZvcmVMZWF2ZSAoKSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSkgfVxuXG4gIC8qKlxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIGJlZm9yZSBhIGNoYW5nZSB0aGF0IHNob3VsZCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBpcyBhcHBsaWVkLiBUaGUgZmlyc3RcbiAgICogYXJndW1lbnQgaWRlbnRpZmllcyB0aGUgaGlzdG9yeSBpdGVtLiBJZiBncm91cGVkIGlzIHNldCB0byB0cnVlLCB3ZSBtYWtlIHN1cmUgdG8gb25seSBjcmVhdGVcbiAgICogYSBoaXN0b3J5IGl0ZW0gaWYgdGhlIHByZXZpb3VzIGl0ZW0gZGlkIG5vdCBoYXZlIHRoZSBzYW1lIGlkZW50aWZpZXJcbiAgICogQHBhcmFtICB7U3RyaW5nfSAgaWRlbnRpZmllclxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBncm91cGVkXG4gICAqIEBwYXJhbSAge1N0cmluZ30gIG9wZXJhdGlvbklkZW50aWZpZXJcbiAgICogQHJldHVybnMge0hpc3RvcnlJdGVtfVxuICAgKi9cbiAgYWRkTG9jYWxIaXN0b3J5U25hcHNob3QgKGlkZW50aWZpZXIsIGdyb3VwZWQgPSBmYWxzZSwgZGF0YSA9IG51bGwpIHtcbiAgICBjb25zdCB7IGhpc3RvcnkgfSA9IHRoaXMuY29udGV4dC5lZGl0b3JcbiAgICBoaXN0b3J5LmFkZFNuYXBzaG90KCdsb2NhbCcsIGdyb3VwZWQsIGlkZW50aWZpZXIsIHRoaXMuY29uc3RydWN0b3IuaWRlbnRpZmllciwgZGF0YSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIGJlZm9yZSBhIGNoYW5nZSB0aGF0IHNob3VsZCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBpcyBhcHBsaWVkLiBUaGUgZmlyc3RcbiAgICogYXJndW1lbnQgaWRlbnRpZmllcyB0aGUgaGlzdG9yeSBpdGVtLiBJZiBncm91cGVkIGlzIHNldCB0byB0cnVlLCB3ZSBtYWtlIHN1cmUgdG8gb25seSBjcmVhdGVcbiAgICogYSBoaXN0b3J5IGl0ZW0gaWYgdGhlIHByZXZpb3VzIGl0ZW0gZGlkIG5vdCBoYXZlIHRoZSBzYW1lIGlkZW50aWZpZXJcbiAgICogQHBhcmFtICB7U3RyaW5nfSAgaWRlbnRpZmllclxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBncm91cGVkXG4gICAqL1xuICBhZGRHbG9iYWxIaXN0b3J5U25hcHNob3QgKGlkZW50aWZpZXIsIGdyb3VwZWQgPSBmYWxzZSwgZGF0YSA9IG51bGwpIHtcbiAgICBjb25zdCB7IGhpc3RvcnkgfSA9IHRoaXMuY29udGV4dC5lZGl0b3JcbiAgICBoaXN0b3J5LmFkZFNuYXBzaG90KCdnbG9iYWwnLCBncm91cGVkLCBpZGVudGlmaWVyLCB0aGlzLmNvbnN0cnVjdG9yLmlkZW50aWZpZXIsIGRhdGEpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZ2xvYmFsIGVkaXRvciBzdGF0ZSBkYXRhIGZvciB0aGlzIHRvb2wuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBnZXRHbG9iYWxUb29sU3RhdGUgKCkge1xuICAgIGNvbnN0IHsgZ2xvYmFsU3RhdGUgfSA9IHRoaXMuY29udGV4dFxuICAgIHJldHVybiBnbG9iYWxTdGF0ZS5nZXQodGhpcy5jb25zdHJ1Y3Rvci5pZGVudGlmaWVyKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdsb2JhbCBlZGl0b3Igc3RhdGUgZGF0YSBmb3IgdGhpcyB0b29sLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgc2V0R2xvYmFsVG9vbFN0YXRlIChzdGF0ZSkge1xuICAgIGNvbnN0IHsgZ2xvYmFsU3RhdGUgfSA9IHRoaXMuY29udGV4dFxuICAgIGdsb2JhbFN0YXRlLnNldCh7IFt0aGlzLmNvbnN0cnVjdG9yLmlkZW50aWZpZXJdOiBzdGF0ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFzc2V0cyB0aGF0IHNob3VsZCBiZSBwcmVsb2FkZWQgZm9yIHRoaXMgY29udHJvbFxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuRWRpdG9yfSBlZGl0b3JcbiAgICogQHJldHVybiB7U3RyaW5nW119XG4gICAqL1xuICBzdGF0aWMgZ2V0UHJlbG9hZEFzc2V0cyAoKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgY29udHJvbCByZWFjdHMgdG8gYSBjbGljayBhdCB0aGUgZ2l2ZW4gKHJlbGF0aXZlIHRvIGNhbnZhcykgcG9zaXRpb24uIElmIGl0XG4gICAqIGRvZXMsIGl0IHJldHVybnMgYW4gb2JqZWN0IHdpdGggYSBwcmVwYXJlZCBzaGFyZWQgc3RhdGUgKGUuZy4gc2VsZWN0ZWQgc3ByaXRlKSB0aGF0IGlzIHBhc3NlZFxuICAgKiB0byB0aGlzIGNvbnRyb2wgb24gY3JlYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBjbGlja1Bvc2l0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBjbGlja0F0UG9zaXRpb24gKGNsaWNrUG9zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBjb250cm9sIGlzIGVuYWJsZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0VuYWJsZWQgKGVkaXRvcikge1xuICAgIGNvbnN0IGlkZW50aWZpZXIgPSB0aGlzLmNvbnN0cnVjdG9yLmlkZW50aWZpZXJcbiAgICByZXR1cm4gZWRpdG9yLmlzVG9vbEVuYWJsZWQoaWRlbnRpZmllcikgJiYgZWRpdG9yLmlzVG9vbEFsbG93ZWQoaWRlbnRpZmllcilcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXNlQ29udHJvbHNcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9iYXNlLWNvbnRyb2xzLmpzIiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazovKipcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50IH0gZnJvbSAnZ2xvYmFscydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9hZGluZ0luZGljYXRvckNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQmFzZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgYnVpbGRTdHlsZXMgPSAoaW5kZXgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFuaW1hdGlvbkRlbGF5OiBgJHtpbmRleCAqIDAuMX1zYFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoPExvYWRpbmdJbmRpY2F0b3JDb250YWluZXIgc3R5bGVzPXt0aGlzLnByb3BzLnN0eWxlc30+XG4gICAgICA8QmFsbCBzdHlsZT17YnVpbGRTdHlsZXMoMCl9IC8+XG4gICAgICA8QmFsbCBzdHlsZT17YnVpbGRTdHlsZXMoMSl9IC8+XG4gICAgICA8QmFsbCBzdHlsZT17YnVpbGRTdHlsZXMoMil9IC8+XG4gICAgPC9Mb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyPilcbiAgfVxufVxuXG5jb25zdCBMb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzUwcHgnLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICBtYXJnaW5Ub3A6ICcyNHB4J1xufSlcbkxvYWRpbmdJbmRpY2F0b3JDb21wb25lbnQuUm9vdEVsZW1lbnQgPSBMb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyXG5cbmNvbnN0IEJhbGwgPSBhZG9uaXMuZGl2KHtcbiAgYW5pbWF0aW9uTmFtZTogJ2JvdW5jaW5nTG9hZGluZ0luZGljYXRvcicsXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiAnMS4ycycsXG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAnaW5maW5pdGUnLFxuICB3aWR0aDogJzJweCcsXG4gIGhlaWdodDogJzJweCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIGJveFNoYWRvdzogdGhlbWUgPT4gdGhlbWUuZGVmYXVsdFNoYWRvdyxcbiAgbWFyZ2luUmlnaHQ6ICc3cHgnLFxuICAnJjpsYXN0LWNoaWxkJzoge1xuICAgIG1hcmdpblJpZ2h0OiAwXG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2xvYWRpbmctaW5kaWNhdG9yLWNvbXBvbmVudC5qc3giLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICoqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgQmFzZUNvbXBvbmVudCwgYWRvbmlzIH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBBdXRvU2l6ZU51bWVyaWNJbnB1dENvbXBvbmVudCBmcm9tICcuL3NoYXJlZC9mb3Jtcy9hdXRvLXNpemUtbnVtZXJpYy1pbnB1dC1jb21wb25lbnQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN1ZmZpeGVkVGV4dElucHV0Q29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uQ2xpY2snXG4gICAgKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIHJlbmRlcmluZyB3aGVuIG5ldyBwcm9wcyBvciBzdGF0ZSBhcmUgYmVpbmcgcmVjZWl2ZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmV4dFN0YXRlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBzaG91bGRDb21wb25lbnRVcGRhdGUgKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSB8fFxuICAgICAgdGhpcy5wcm9wcy5kaXNhYmxlZCAhPT0gbmV4dFByb3BzLmRpc2FibGVkXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGNvbnRhaW5lclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ2xpY2sgKCkge1xuICAgIHRoaXMuX2lucHV0LmZvY3VzKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIHJldHVybiAoPENvbnRhaW5lciBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfSBvbkNsaWNrPXt0aGlzLl9vbkNsaWNrfT5cbiAgICAgIDxJbnB1dFxuICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX1cbiAgICAgICAgb25MaXZlQ2hhbmdlPXt0aGlzLnByb3BzLm9uTGl2ZUNoYW5nZX1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMub25DaGFuZ2V9XG4gICAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfVxuICAgICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9pbnB1dCA9IGVsIH19XG4gICAgICAgIG5hbWU9e3RoaXMucHJvcHMubmFtZX0gLz5cbiAgICAgIDxTdWZmaXg+e3RoaXMucHJvcHMuc3VmZml4fTwvU3VmZml4PlxuICAgIDwvQ29udGFpbmVyPilcbiAgfVxufVxuXG5jb25zdCBDb250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSknLFxuICBwYWRkaW5nOiAnNXB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcidcbn0pXG5TdWZmaXhlZFRleHRJbnB1dENvbXBvbmVudC5Sb290RWxlbWVudCA9IENvbnRhaW5lclxuXG5jb25zdCBTdWZmaXggPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIGNvbG9yOiB0aGVtZSA9PiB0aGVtZS5kaW1tZWRUZXh0Q29sb3IsXG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnJlZ3VsYXJGb250RmFtaWx5LFxuICBmb250U2l6ZTogJzE0cHgnLFxuICBtYXJnaW5MZWZ0OiAnNXB4J1xufSlcblxuY29uc3QgSW5wdXQgPSBhZG9uaXMoQXV0b1NpemVOdW1lcmljSW5wdXRDb21wb25lbnQpKHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXJCb3R0b206ICdub25lJyxcbiAgcGFkZGluZ0JvdHRvbTogMCxcbiAgZm9udFNpemU6ICcxNHB4JyxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLnRleHRDb2xvcixcblxuICAnOmZvY3VzJzoge1xuICAgIG91dGxpbmU6ICdub25lJ1xuICB9XG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3N1ZmZpeGVkLXRleHQtaW5wdXQtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgQmFzZUNvbXBvbmVudCwgVXRpbHMsIGFkb25pcyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgTnVtZXJpY0lucHV0Q29tcG9uZW50IGZyb20gJy4vbnVtZXJpYy1pbnB1dC1jb21wb25lbnQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9TaXplTnVtZXJpY0lucHV0Q29tcG9uZW50IGV4dGVuZHMgTnVtZXJpY0lucHV0Q29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5zdGF0ZS53aWR0aCA9IDBcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgdHlwZWQgc29tZXRoaW5nIGluc2lkZSB0aGUgaW5wdXRcbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbklucHV0Q2hhbmdlIChlKSB7XG4gICAgc3VwZXIuX29uSW5wdXRDaGFuZ2UoZSlcblxuICAgIHRoaXMuX2FkanVzdFdpZHRoKGUudGFyZ2V0LnZhbHVlKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIHJlbmRlcmluZyB3aGVuIG5ldyBwcm9wcyBvciBzdGF0ZSBhcmUgYmVpbmcgcmVjZWl2ZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmV4dFN0YXRlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBzaG91bGRDb21wb25lbnRVcGRhdGUgKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuIHN1cGVyLnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkgfHxcbiAgICAgIHRoaXMuc3RhdGUud2lkdGggIT09IG5leHRTdGF0ZS53aWR0aFxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIGEgbW91bnRlZCBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzXG4gICAqIEBwYXJhbSAge09iamVjdH0gbmV4dFByb3BzXG4gICAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcbiAgICB0aGlzLl9hZGp1c3RXaWR0aChuZXh0UHJvcHMudmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKVxuXG4gICAgdGhpcy5fdGV4dFJ1bGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBVdGlscy5zdHlsZUVsZW1lbnQodGhpcy5fdGV4dFJ1bGVyLCB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICB6SW5kZXg6IDEwXG4gICAgfSlcblxuICAgIHRoaXMuX2FkanVzdFdpZHRoKHRoaXMucHJvcHMudmFsdWUpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3R5bGUgb2JqZWN0IGZvciB0aGUgaW5wdXRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldElucHV0U3R5bGUgKCkge1xuICAgIGNvbnN0IHsgd2lkdGggfSA9IHRoaXMuc3RhdGVcbiAgICByZXR1cm4geyB3aWR0aCwgbWluV2lkdGg6IHdpZHRoIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGp1c3RzIHRoZSB3aXRoIGFjY29yZGluZyB0byB0aGUgY3VycmVudCB0ZXh0IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkanVzdFdpZHRoICh2YWx1ZSkge1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fdGV4dFJ1bGVyKVxuXG4gICAgLy8gQ29weSBzdHlsZXMgZnJvbSBpbnB1dFxuICAgIGNvbnN0IHN0eWxlcyA9IFV0aWxzLmdldFN0eWxlT2JqZWN0KHRoaXMuX2lucHV0KVxuICAgIFV0aWxzLnN0eWxlRWxlbWVudCh0aGlzLl90ZXh0UnVsZXIsIHtcbiAgICAgIGZvbnQ6IHN0eWxlcy5mb250XG4gICAgfSlcbiAgICB0aGlzLl90ZXh0UnVsZXIuaW5uZXJUZXh0ID0gdmFsdWVcblxuICAgIHRoaXMuc2V0U3RhdGUoeyB3aWR0aDogdGhpcy5fdGV4dFJ1bGVyLm9mZnNldFdpZHRoIH0pXG5cbiAgICB0aGlzLl90ZXh0UnVsZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLl90ZXh0UnVsZXIpXG4gIH1cbn1cblxuQXV0b1NpemVOdW1lcmljSW5wdXRDb21wb25lbnQuUm9vdEVsZW1lbnQgPSBhZG9uaXMoTnVtZXJpY0lucHV0Q29tcG9uZW50LlJvb3RFbGVtZW50KSh7XG4gIGJveFNpemluZzogJ2luaXRpYWwnLFxuICBoZWlnaHQ6ICcxOXB4J1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zaGFyZWQvZm9ybXMvYXV0by1zaXplLW51bWVyaWMtaW5wdXQtY29tcG9uZW50LmpzeCIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgQmFzZUNvbXBvbmVudCB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgeyBDb250cm9sR3JvdXBUaXRsZSwgQ29udHJvbEdyb3VwIH0gZnJvbSAnLi4vZ3JvdXBlZC1jb250cm9sLXN0eWxlcydcbmltcG9ydCBUcmFuc2l0aW9uIGZyb20gJ2NvbXBvbmVudHMvdHJhbnNpdGlvbidcbmltcG9ydCBDaGVja2JveENvbXBvbmVudCBmcm9tICcuL2NoZWNrYm94LWNvbXBvbmVudCdcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbGxhcHNlU2VjdGlvbkNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQmFzZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXhwYW5kZWQ6IHRoaXMucHJvcHMuZXhwYW5kZWQgfHwgdGhpcy5wcm9wcy5hbHdheXNFeHBhbmRlZCB8fCBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIHNlY3Rpb24gaXMgc2VsZWN0ZWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25DbGljayAoKSB7XG4gICAgY29uc3QgbmV3RXhwYW5kZWQgPSAhdGhpcy5zdGF0ZS5leHBhbmRlZFxuICAgIGlmICghdGhpcy5wcm9wcy5hbHdheXNFeHBhbmRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGV4cGFuZGVkOiBuZXdFeHBhbmRlZFxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vblRvZ2dsZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vblRvZ2dsZShuZXdFeHBhbmRlZClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSBhIG1vdW50ZWQgY29tcG9uZW50IHJlY2VpdmVzIG5ldyBwcm9wc1xuICAgKiBAcGFyYW0gIHtPYmplY3R9IG5leHRQcm9wc1xuICAgKi9cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZXhwYW5kZWQgIT09IG5leHRQcm9wcy5leHBhbmRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGV4cGFuZGVkOiBuZXh0UHJvcHMuZXhwYW5kZWQgfSlcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGFsd2F5c0V4cGFuZGVkLCB0b2dnbGVhYmxlLCBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB7IGV4cGFuZGVkIH0gPSB0aGlzLnN0YXRlXG5cbiAgICByZXR1cm4gKDxTZWN0aW9uIHN0eWxlcz17dGhpcy5wcm9wcy5zdHlsZXN9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgIDxTZWN0aW9uSGVhZGVyIG9uQ2xpY2s9e3RoaXMuX29uQ2xpY2suYmluZCh0aGlzKX0+XG4gICAgICAgIHsgKCFhbHdheXNFeHBhbmRlZCAmJiAhdG9nZ2xlYWJsZSkgJiYgPEFycm93RG93biB0dXJuVXA9eyFleHBhbmRlZH0gLz4gfVxuICAgICAgICB7IHRvZ2dsZWFibGUgJiYgPENoZWNrYm94XG4gICAgICAgICAgY2hlY2tlZD17ZXhwYW5kZWR9XG4gICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1jaGVja2JveCcgOiB1bmRlZmluZWQpfSAvPiB9XG4gICAgICAgIDxTZWN0aW9uVGl0bGU+e3RoaXMucHJvcHMudGl0bGV9PC9TZWN0aW9uVGl0bGU+XG4gICAgICA8L1NlY3Rpb25IZWFkZXI+XG4gICAgICA8VHJhbnNpdGlvblxuICAgICAgICBhY3RpdmU9e2V4cGFuZGVkfVxuICAgICAgICBlbnRlclByb3A9J3JlbmRlcmVkJ1xuICAgICAgICBlbnRlckR1cmF0aW9uPXt0aGlzLmNvbnRleHQudGhlbWUudHJhbnNpdGlvbkR1cmF0aW9uICogMTAwMH1cbiAgICAgICAgYXBwZWFyUHJvcD0ndmlzaWJsZSdcbiAgICAgICAgYXBwZWFyRHVyYXRpb249e3RoaXMuY29udGV4dC50aGVtZS50cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfVxuICAgICAgICBsZWF2ZUR1cmF0aW9uPXt0aGlzLmNvbnRleHQudGhlbWUudHJhbnNpdGlvbkR1cmF0aW9uICogMTAwMH0+XG4gICAgICAgIDxTZWN0aW9uQ29udGVudFxuICAgICAgICAgIGRhdGEtZXhwYW5kZWQ9e2V4cGFuZGVkfVxuICAgICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtY29udGVudCcgOiB1bmRlZmluZWQpfT5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPC9TZWN0aW9uQ29udGVudD5cbiAgICAgIDwvVHJhbnNpdGlvbj5cbiAgICA8L1NlY3Rpb24+KVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxJTkdcblxuY29uc3QgU2VjdGlvbiA9IGFkb25pcyhDb250cm9sR3JvdXApLmRpdih7XG4gIG1hcmdpbkJvdHRvbTogJzEwcHgnLFxuICBwYWRkaW5nOiAnMjBweCdcbn0pXG5Db2xsYXBzZVNlY3Rpb25Db21wb25lbnQuUm9vdEVsZW1lbnQgPSBTZWN0aW9uXG5cbmNvbnN0IFNlY3Rpb25UaXRsZSA9IGFkb25pcyhDb250cm9sR3JvdXBUaXRsZSkuZGl2KHtcbiAgdHJhbnNpdGlvbjogJ21hcmdpbi1ib3R0b20gLjJzIDBzJyxcbiAgbWFyZ2luQm90dG9tOiAnMjBweCcsXG4gIHBhZGRpbmc6ICcwIDVweCdcbn0pXG5cbmNvbnN0IFNlY3Rpb25IZWFkZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGN1cnNvcjogJ3BvaW50ZXInXG59KVxuXG5jb25zdCBTZWN0aW9uQ29udGVudCA9IGFkb25pcy5kaXYoe1xuICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2Utb3V0YCxcbiAgcGFkZGluZzogJzVweCcsXG4gIG9wYWNpdHk6IDAsXG4gIGRpc3BsYXk6ICdub25lJ1xufSwge1xuICByZW5kZXJlZDoge1xuICAgIGRpc3BsYXk6ICdibG9jaydcbiAgfSxcbiAgdmlzaWJsZToge1xuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2UtaW5gXG4gIH1cbn0pXG5cbmNvbnN0IEFycm93RG93biA9IGFkb25pcy5kaXYoe1xuICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIC41cycsXG4gIHRyYW5zZm9ybTogJ3JvdGF0ZSgwZGVnKScsXG4gIGZsb2F0OiAncmlnaHQnLFxuICBib3JkZXJMZWZ0OiAnNnB4IHNvbGlkIHRyYW5zcGFyZW50JyxcbiAgYm9yZGVyUmlnaHQ6ICc2cHggc29saWQgdHJhbnNwYXJlbnQnLFxuICBib3JkZXJUb3A6IHRoZW1lID0+IGA4cHggc29saWQgJHt0aGVtZS5kaW1tZWRUZXh0Q29sb3J9YFxufSwge1xuICB0dXJuVXA6IHtcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoLTkwZGVnKSdcbiAgfVxufSlcblxuY29uc3QgQ2hlY2tib3ggPSBhZG9uaXMoQ2hlY2tib3hDb21wb25lbnQpKHtcbiAgZmxvYXQ6ICdyaWdodCcsXG4gIHRleHRBbGlnbjogJ3JpZ2h0J1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvY29sbGFwc2Utc2VjdGlvbi1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBhZG9uaXMsIFJlYWN0IH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBTY3JvbGxiYXJDb21wb25lbnQgZnJvbSAnY29tcG9uZW50cy9zY3JvbGxiYXItY29tcG9uZW50J1xuXG5jbGFzcyBTY3JvbGxhYmxlTGlzdENvbXBvbmVudCBleHRlbmRzIFNjcm9sbGJhckNvbXBvbmVudCB7XG4gIHN0YXRpYyBSb290RWxlbWVudCA9IFNjcm9sbGJhckNvbXBvbmVudC5Sb290RWxlbWVudFxuICBzdGF0aWMgY29udGV4dFR5cGVzID0gU2Nyb2xsYmFyQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjaGlsZCBlbGVtZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyQ2hpbGQgKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHN1cGVyLl9yZW5kZXJDaGlsZCg8TGlzdFdyYXBwZXIgaW5uZXJSZWY9e3RoaXMucHJvcHMuaW5uZXJMaXN0UmVmfT57Y2hpbGRyZW59PC9MaXN0V3JhcHBlcj4pXG4gIH1cbn1cblxuY29uc3QgTGlzdFdyYXBwZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIG92ZXJmbG93OiAnYXV0bydcbn0pXG5cbmNvbnN0IFNjcm9sbGFibGVMaXN0ID0gYWRvbmlzKFNjcm9sbGFibGVMaXN0Q29tcG9uZW50KSh7XG4gIGhlaWdodDogJzEwMCUnLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBkaXNwbGF5OiAndGFibGUtY2VsbCdcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbGFibGVMaXN0XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL3Njcm9sbGFibGUtbGlzdC1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuaW1wb3J0IHsgUmVhY3QgfSBmcm9tICdnbG9iYWxzJ1xuaW1wb3J0IFZhbHVlU2VsZWN0aW9uQ29tcG9uZW50IGZyb20gJy4vdmFsdWUtc2VsZWN0aW9uLWNvbXBvbmVudCdcbmltcG9ydCBTbGlkZXJDb21wb25lbnQgZnJvbSAnY29tcG9uZW50cy9zbGlkZXItY29tcG9uZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbGlkZXJDb250cm9sQ29tcG9uZW50IGV4dGVuZHMgVmFsdWVTZWxlY3Rpb25Db21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gVmFsdWVTZWxlY3Rpb25Db21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgcHJvcHMgb2JqZWN0IGZvciB0aGUgc2xpZGVyIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYnVpbGRTbGlkZXJQcm9wcyAoKSB7XG4gICAgbGV0IHsgbWluVmFsdWUsIG1heFZhbHVlLCBtaWRkbGVEb3QsIG9uU2xpZGVyVmFsdWVDaGFuZ2UsIHZhbHVlLCBkaXNhYmxlZCB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1pblZhbHVlOiBtaW5WYWx1ZSxcbiAgICAgIG1heFZhbHVlOiBtYXhWYWx1ZSxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIG1pZGRsZURvdDogbWlkZGxlRG90LFxuICAgICAgb25DaGFuZ2U6IG9uU2xpZGVyVmFsdWVDaGFuZ2UsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgbGVmdCBwYXJ0IG9mIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICBfcmVuZGVyTGVmdFBhcnQgKCkge1xuICAgIGNvbnN0IHsgLi4uc2xpZGVyUHJvcHMgfSA9IHRoaXMuX2J1aWxkU2xpZGVyUHJvcHMoKVxuICAgIHJldHVybiAoPFNsaWRlckNvbXBvbmVudFxuICAgICAgey4uLnNsaWRlclByb3BzfVxuICAgICAgZGFya0JhY2tncm91bmQgLz4pXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvc2xpZGVyLWNvbnRyb2wtY29tcG9uZW50LmpzeCIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9udW1iZXIvaXMtbmFuXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL21udC9jL0ZpbGVzL1Byb2plY3RzL1dvcmsvSW1nTHkvcGVzZGstaHRtbDUvbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9udW1iZXIvaXMtbmFuLmpzXG4vLyBtb2R1bGUgaWQgPSAyODBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5OdW1iZXIuaXNOYU47XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL251bWJlci9pcy1uYW4uanNcbi8vIG1vZHVsZSBpZCA9IDI4MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanNcbi8vIG1vZHVsZSBpZCA9IDI4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6LyoqXG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIFByb3BUeXBlcywgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCBDb2xvciB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgQ29sb3JQaWNrZXJDb21wb25lbnQgZnJvbSAnLi9jb2xvci1waWNrZXIvY29sb3ItcGlja2VyLWNvbXBvbmVudCdcbmltcG9ydCBUcmFuc2l0aW9uIGZyb20gJ2NvbXBvbmVudHMvdHJhbnNpdGlvbidcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbG9yU2VsZWN0aW9uQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbG9yczogUHJvcFR5cGVzLmFycmF5LFxuICAgIHZhbHVlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfVxuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uRG9jdW1lbnRDbGljaycsXG4gICAgICAnX29uQ29sb3JDaGFuZ2UnXG4gICAgKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbG9yUGlja2VyVmlzaWJsZTogZmFsc2UsXG4gICAgICBjb2xvcnM6IHRoaXMuX2dldERlZmF1bHRDb2xvcnModGhpcy5wcm9wcy52YWx1ZS5jbG9uZSgpKSxcbiAgICAgIHNlbGVjdGVkQ29sb3JJbmRleDogMFxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSBhIG1vdW50ZWQgY29tcG9uZW50IHJlY2VpdmVzIG5ldyBwcm9wc1xuICAgKiBAcGFyYW0gIHtPYmplY3R9IG5leHRQcm9wc1xuICAgKi9cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuY29sb3JQaWNrZXJWaXNpYmxlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy52YWx1ZS5lcXVhbHMobmV4dFByb3BzLnZhbHVlKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IHNlbGVjdGVkQ29sb3JJbmRleCA9IC0xXG4gICAgdGhpcy5zdGF0ZS5jb2xvcnMuZm9yRWFjaCgoY29sb3IsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoY29sb3IuZXF1YWxzKG5leHRQcm9wcy52YWx1ZSkpIHtcbiAgICAgICAgc2VsZWN0ZWRDb2xvckluZGV4ID0gaW5kZXhcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYgKHNlbGVjdGVkQ29sb3JJbmRleCA9PT0gLTEpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWxlY3RlZENvbG9ySW5kZXg6IDAsXG4gICAgICAgIGNvbG9yczogdGhpcy5fZ2V0RGVmYXVsdENvbG9ycyhuZXh0UHJvcHMudmFsdWUuY2xvbmUoKSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWxlY3RlZENvbG9ySW5kZXhcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgYSBjb21wb25lbnQgaXMgbW91bnRlZFxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuX29uRG9jdW1lbnRDbGljaylcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGltbWVkaWF0ZWx5IGJlZm9yZSBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYW5kIGRlc3Ryb3llZFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuX29uRG9jdW1lbnRDbGljaylcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBhbnl3aGVyZSBvbiB0aGUgc2NyZWVuLiBJZiB0aGUgY2xpY2sgaXMgb3V0c2lkZVxuICAgKiBvZiB0aGUgZHJvcGRvd24gYW5kIHRoZSBkcm9wZG93biBpcyBleHBhbmRlZCwgd2UgY29sbGFwc2UgaXQuXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Eb2N1bWVudENsaWNrIChlKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmNvbG9yUGlja2VyVmlzaWJsZSkgcmV0dXJuXG5cbiAgICBmb3IgKGxldCBlbGVtZW50ID0gZS50YXJnZXQ7IGVsZW1lbnQ7IGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChlbGVtZW50ID09PSB0aGlzLl9yb290KSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyBjb2xvclBpY2tlclZpc2libGU6IGZhbHNlIH0sICgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMub25Db2xvclBpY2tlclRvZ2dsZSAmJlxuICAgICAgICB0aGlzLnByb3BzLm9uQ29sb3JQaWNrZXJUb2dnbGUoZmFsc2UpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgYSBidWJibGUuXG4gICAqIEBwYXJhbSAgTnVtYmVyIC0gVGhlIGJ1YmJsZXMgaW5kZXhcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNsaWNrIChpbmRleCkge1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgY29sb3JQaWNrZXJWaXNpYmxlOiB0aGlzLnN0YXRlLmNvbG9yUGlja2VyVmlzaWJsZSxcbiAgICAgIHNlbGVjdGVkQ29sb3JJbmRleDogaW5kZXhcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPT09IHRoaXMuc3RhdGUuc2VsZWN0ZWRDb2xvckluZGV4KSB7XG4gICAgICBzdGF0ZS5jb2xvclBpY2tlclZpc2libGUgPSAhdGhpcy5zdGF0ZS5jb2xvclBpY2tlclZpc2libGVcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29sb3JQaWNrZXJWaXNpYmxlID0gZmFsc2VcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHRoaXMuc3RhdGUuY29sb3JzW2luZGV4XSlcblxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUsICgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMub25Db2xvclBpY2tlclRvZ2dsZSAmJlxuICAgICAgICB0aGlzLnByb3BzLm9uQ29sb3JQaWNrZXJUb2dnbGUoc3RhdGUuY29sb3JQaWNrZXJWaXNpYmxlKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb2xvciBoYXMgYmVlbiBjaGFuZ2VkLlxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5Db2xvcn0gbmV3Q29sb3JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNvbG9yQ2hhbmdlIChuZXdDb2xvcikge1xuICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiZcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UobmV3Q29sb3IpXG5cbiAgICB0aGlzLnN0YXRlLmNvbG9yc1t0aGlzLnN0YXRlLnNlbGVjdGVkQ29sb3JJbmRleF0uY29weShuZXdDb2xvcilcblxuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRlZmF1bHQgc2V0IG9mIGNvbG9ycywgd2hlcmUgdGhlIGZpcnN0IGNvbG9yIGlzXG4gICAqIHJlcGxhY2VkIHdpdGggYSBnaXZlbiBpbml0aWFsIGNvbG9yLlxuICAgKiBAcmV0dXJuIHtDb2xvcltdfVxuICAgKi9cbiAgX2dldERlZmF1bHRDb2xvcnMgKGluaXRpYWxDb2xvcikge1xuICAgIHJldHVybiBbXG4gICAgICBpbml0aWFsQ29sb3IsXG4gICAgICBDb2xvci5mcm9tSGV4KCc2Njg4RkEnKSxcbiAgICAgIENvbG9yLmZyb21IZXgoJzg3NjdGQScpLFxuICAgICAgQ29sb3IuZnJvbUhleCgnREM2N0ZBJyksXG4gICAgICBDb2xvci5mcm9tSGV4KCdGRTY4QzknKSxcbiAgICAgIENvbG9yLmZyb21IZXgoJ0ZFNjc4OCcpLFxuICAgICAgQ29sb3IuZnJvbUhleCgnRkU4OTZCJylcbiAgICBdXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgY29sb3JlZCBidWJibGVzLlxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50W119IEFuIGFycmF5IG9mIGVsZW1lbnRzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlckNvbG9yQnViYmxlcyAoKSB7XG4gICAgY29uc3QgdGlsZUltYWdlUGF0aCA9IHRoaXMuX2dldEFzc2V0UGF0aCgnZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC90aWxlZC1iYWNrZ3JvdW5kLnBuZycsIHRydWUpXG5cbiAgICBsZXQgZWxlbWVudHMgPSBbXVxuICAgIHRoaXMuc3RhdGUuY29sb3JzLmZvckVhY2goKGNvbG9yLCBpbmRleCkgPT4ge1xuICAgICAgbGV0IHNlbGVjdGVkID0gaW5kZXggPT09IHRoaXMuc3RhdGUuc2VsZWN0ZWRDb2xvckluZGV4XG4gICAgICBlbGVtZW50cy5wdXNoKDxDb2xvclNlbGVjdGlvbkJ1YmJsZVxuICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICBzZWxlY3RlZD17c2VsZWN0ZWR9XG4gICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtY29sb3JCdWJibGUnIDogdW5kZWZpbmVkKX0+XG4gICAgICAgIDxDb2xvclNlbGVjdGlvblByZXZpZXc+XG4gICAgICAgICAgPENvbG9yU2VsZWN0aW9uUHJldmlld0NvbnRlbnQgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7dGlsZUltYWdlUGF0aH0pYCB9fSAvPlxuICAgICAgICAgIDxDb2xvclNlbGVjdGlvbkJ1YmJsZUNvbnRlbnRcbiAgICAgICAgICAgIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogY29sb3IudG9SR0JBKCkgfX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uQ2xpY2suYmluZCh0aGlzLCBpbmRleCl9XG4gICAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWNvbG9yQnViYmxlQ29udGVudCcgOiB1bmRlZmluZWQpfT5cbiAgICAgICAgICAgIDxEb3Qgc2VsZWN0ZWQ9e3NlbGVjdGVkfSAvPlxuICAgICAgICAgICAgPERvdCBzZWxlY3RlZD17c2VsZWN0ZWR9IC8+XG4gICAgICAgICAgICA8RG90IHNlbGVjdGVkPXtzZWxlY3RlZH0gLz5cbiAgICAgICAgICA8L0NvbG9yU2VsZWN0aW9uQnViYmxlQ29udGVudD5cbiAgICAgICAgPC9Db2xvclNlbGVjdGlvblByZXZpZXc+XG4gICAgICAgIDxUcmFuc2l0aW9uXG4gICAgICAgICAgYWN0aXZlPXtzZWxlY3RlZCAmJiB0aGlzLnN0YXRlLmNvbG9yUGlja2VyVmlzaWJsZX1cbiAgICAgICAgICBlbnRlclByb3A9J3JlbmRlcmVkJ1xuICAgICAgICAgIGVudGVyRHVyYXRpb249e3RoaXMuY29udGV4dC50aGVtZS50cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfVxuICAgICAgICAgIGFwcGVhclByb3A9J3Zpc2libGUnXG4gICAgICAgICAgYXBwZWFyRHVyYXRpb249e3RoaXMuY29udGV4dC50aGVtZS50cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfVxuICAgICAgICAgIGxlYXZlRHVyYXRpb249e3RoaXMuY29udGV4dC50aGVtZS50cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfT5cbiAgICAgICAgICA8Q29sb3JQaWNrZXJDb21wb25lbnQgY29sb3I9e2NvbG9yfSBvbkNoYW5nZT17dGhpcy5fb25Db2xvckNoYW5nZX0gLz5cbiAgICAgICAgPC9UcmFuc2l0aW9uPlxuICAgICAgPC9Db2xvclNlbGVjdGlvbkJ1YmJsZT4pXG4gICAgfSlcblxuICAgIHJldHVybiBlbGVtZW50c1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIHJldHVybiAoPENvbG9yU2VsZWN0aW9uXG4gICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWNvbG9yU2VsZWN0aW9uJyA6IHVuZGVmaW5lZCl9XG4gICAgICBzdHlsZXM9e3RoaXMucHJvcHMuc3R5bGVzfVxuICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fcm9vdCA9IGVsIH19PlxuICAgICAge3RoaXMuX3JlbmRlckNvbG9yQnViYmxlcygpfVxuICAgIDwvQ29sb3JTZWxlY3Rpb24+KVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxFU1xuXG5jb25zdCBDb2xvclNlbGVjdGlvbiA9IGFkb25pcy5kaXYoe1xuICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgd2lkdGg6ICcxMDAlJ1xufSlcbkNvbG9yU2VsZWN0aW9uQ29tcG9uZW50LlJvb3RFbGVtZW50ID0gQ29sb3JTZWxlY3Rpb25cblxuY29uc3QgQ29sb3JTZWxlY3Rpb25CdWJibGUgPSBhZG9uaXMuZGl2KHtcbiAgdHJhbnNpdGlvbjogJ3dpZHRoIC4xcyBlYXNlLWluLW91dCAuMXMnLFxuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgd2lkdGg6ICcyMHB4JyxcbiAgaGVpZ2h0OiAnMjBweCcsXG4gIG1hcmdpblJpZ2h0OiAnNHB4JyxcbiAgYm9yZGVyUmFkaXVzOiAnMTBweCcsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBwYWRkaW5nOiAnMnB4JyxcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZSA9PiB0aGVtZS5jb250cm9sc0xpZ2h0QmFja2dyb3VuZENvbG9yLFxuXG4gICc6bGFzdC1jaGlsZCc6IHtcbiAgICBtYXJnaW5SaWdodDogMFxuICB9XG59LCB7XG4gIHNlbGVjdGVkOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZSA9PiB0aGVtZS5oaWdobGlnaHRDb2xvcixcbiAgICAnOmxhc3QtY2hpbGQnOiB7XG4gICAgICBtYXJnaW5SaWdodDogMFxuICAgIH0sXG4gICAgd2lkdGg6ICczNnB4J1xuICB9XG59KVxuXG5jb25zdCBDb2xvclNlbGVjdGlvblByZXZpZXcgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnXG59KVxuXG5jb25zdCBDb2xvclNlbGVjdGlvblByZXZpZXdDb250ZW50ID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBsZWZ0OiAwLFxuICB0b3A6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICBib3JkZXJSYWRpdXM6ICc4cHgnLFxuICBiYWNrZ3JvdW5kU2l6ZTogJzhweCdcbn0pXG5cbmNvbnN0IENvbG9yU2VsZWN0aW9uQnViYmxlQ29udGVudCA9IGFkb25pcyhDb2xvclNlbGVjdGlvblByZXZpZXdDb250ZW50KSh7XG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBib3hTaGFkb3c6ICcwIDFweCAxcHggMCByZ2JhKDAsIDAsIDAsIDAuMTEpLCAwIDFweCAzcHggMCByZ2JhKDAsIDAsIDAsIDAuNDYpJ1xufSlcblxuY29uc3QgRG90ID0gYWRvbmlzLmRpdih7XG4gIHRyYW5zaXRpb246ICdvcGFjaXR5IC4xcyBlYXNlLWluLW91dCcsXG4gIG9wYWNpdHk6IDAsXG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICB3aWR0aDogJzJweCcsXG4gIGhlaWdodDogJzJweCcsXG4gIGJvcmRlclJhZGl1czogJzFweCcsXG4gIG1hcmdpblJpZ2h0OiAnM3B4JyxcbiAgbWFyZ2luQm90dG9tOiAnM3B4JyxcbiAgYmFja2dyb3VuZDogJ3doaXRlJyxcbiAgYm94U2hhZG93OiAnMCAxcHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjYwKScsXG5cbiAgJzpsYXN0LWNoaWxkJzoge1xuICAgIG1hcmdpblJpZ2h0OiAwXG4gIH1cbn0sIHtcbiAgc2VsZWN0ZWQ6IHtcbiAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAuMXMgZWFzZS1pbi1vdXQgLjFzJyxcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2NvbG9yLXNlbGVjdGlvbi1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCBDb2xvciB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgSHVlU2xpZGVyQ29tcG9uZW50IGZyb20gJy4vaHVlLXNsaWRlci1jb21wb25lbnQnXG5pbXBvcnQgT3BhY2l0eVNsaWRlckNvbXBvbmVudCBmcm9tICcuL29wYWNpdHktc2xpZGVyLWNvbXBvbmVudCdcbmltcG9ydCBTYXR1cmF0aW9uVmFsdWVTbGlkZXJDb21wb25lbnQgZnJvbSAnLi9zYXR1cmF0aW9uLXZhbHVlLXNsaWRlci1jb21wb25lbnQnXG5pbXBvcnQgQ29sb3JDb21wb25lbnRJbnB1dENvbXBvbmVudCBmcm9tICcuL2NvbG9yLWNvbXBvbmVudC1pbnB1dC1jb21wb25lbnQnXG5pbXBvcnQgSGV4SW5wdXRDb21wb25lbnQgZnJvbSAnLi9oZXgtaW5wdXQtY29tcG9uZW50J1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sb3JQaWNrZXJDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25IZXhWYWx1ZUNoYW5nZScsXG4gICAgICAnX29uQWxwaGFDaGFuZ2UnLFxuICAgICAgJ19vbkh1ZUNoYW5nZScsXG4gICAgICAnX29uU2F0dXJhdGlvbkJyaWdodG5lc3NDaGFuZ2UnXG4gICAgKVxuXG4gICAgY29uc3QgY29sb3IgPSB0aGlzLnByb3BzLmNvbG9yLmNsb25lKClcbiAgICBjb25zdCBbIGh1ZSwgc2F0dXJhdGlvbiwgYnJpZ2h0bmVzcyBdID0gY29sb3IudG9IU1YoKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjb2xvcixcbiAgICAgIGh1ZSxcbiAgICAgIHNhdHVyYXRpb24sXG4gICAgICBicmlnaHRuZXNzXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBIZXggdmFsdWUgY2hhbmdlc1xuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHZhbHVlIFRoZSBuZXcgSGV4IFN0cmluZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uSGV4VmFsdWVDaGFuZ2UgKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZS5tYXRjaCgvXihbQS1GYS1mMC05XXs2fXxbQS1GYS1mMC05XXszfSkkL2kpKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgfVxuICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDMpIHZhbHVlICs9IHZhbHVlXG5cbiAgICBsZXQgbmV3Q29sb3IgPSBDb2xvci5mcm9tSGV4KHZhbHVlKVxuXG4gICAgY29uc3QgeyBjb2xvciB9ID0gdGhpcy5zdGF0ZVxuICAgIGNvbG9yLmNvcHkobmV3Q29sb3IpXG5cbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGNvbG9yLmNsb25lKCkpXG5cbiAgICBjb25zdCBbIGh1ZSwgc2F0dXJhdGlvbiwgYnJpZ2h0bmVzcyBdID0gY29sb3IudG9IU1YoKVxuICAgIHRoaXMuc2V0U3RhdGUoeyBodWUsIHNhdHVyYXRpb24sIGJyaWdodG5lc3MgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSBhbHBoYSB2YWx1ZS5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB2YWx1ZSBOZXcgYWxwaGEgdmFsdWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkFscGhhQ2hhbmdlICh2YWx1ZSkge1xuICAgIGNvbnN0IHsgY29sb3IgfSA9IHRoaXMuc3RhdGVcbiAgICBjb2xvci5hID0gdmFsdWVcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGNvbG9yLmNsb25lKCkpXG5cbiAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB1c2VyIGNoYW5nZXMgdGhlIGh1ZSB2YWx1ZS5cbiAgICogQHBhcmFtICB7TnVtYmVyfSBodWUgTmV3IGh1ZSB2YWx1ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uSHVlQ2hhbmdlIChodWUpIHtcbiAgICBjb25zdCB7IGNvbG9yIH0gPSB0aGlzLnN0YXRlXG4gICAgbGV0IFsgLCBzLCB2IF0gPSBjb2xvci50b0hTVigpXG4gICAgY29uc3QgYWxwaGEgPSBjb2xvci5hXG4gICAgY29sb3IuZnJvbUhTVihodWUsIHMsIHYpXG4gICAgY29sb3IuYSA9IGFscGhhXG5cbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGNvbG9yLmNsb25lKCkpXG5cbiAgICB0aGlzLnNldFN0YXRlKHsgY29sb3IsIGh1ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgc2F0dXJhdGlvbiBhbmQvb3IgYnJpZ2h0bmVzcyBoYXZlIGJlZW4gY2hhbmdlZFxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHNhdHVyYXRpb25cbiAgICogQHBhcmFtICB7TnVtYmVyfSBicmlnaHRuZXNzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25TYXR1cmF0aW9uQnJpZ2h0bmVzc0NoYW5nZSAoc2F0dXJhdGlvbiwgYnJpZ2h0bmVzcykge1xuICAgIGNvbnN0IHsgY29sb3IgfSA9IHRoaXMuc3RhdGVcbiAgICBjb25zdCBhbHBoYSA9IGNvbG9yLmFcbiAgICBjb2xvci5mcm9tSFNWKHRoaXMuc3RhdGUuaHVlLCBzYXR1cmF0aW9uLCBicmlnaHRuZXNzKVxuICAgIGNvbG9yLmEgPSBhbHBoYVxuXG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShjb2xvci5jbG9uZSgpKVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGNvbG9yLCBzYXR1cmF0aW9uLCBicmlnaHRuZXNzIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBNSVNDXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGdpdmVuIGNvbXBvbmVudCBvZiB0aGUgY3VycmVudCBjb2xvci5cbiAgICogQHBhcmFtICB7U3RyaW5nfSBjb21wb25lbnQgVGhlIGNvbXBvbmVudCwgZS5nLiAncidcbiAgICogQHBhcmFtICB7TnVtYmVyfSB2YWx1ZSAgICAgVGhlIG5ldyB2YWx1ZSBpbiB0aGUgcmFuZ2UgWzAsIDI1NV1cbiAgICovXG4gIF9jaGFuZ2VDb2xvckNvbXBvbmVudCAoY29tcG9uZW50LCB2YWx1ZSkge1xuICAgIGNvbnN0IHsgY29sb3IgfSA9IHRoaXMuc3RhdGVcbiAgICBjb2xvcltjb21wb25lbnRdID0gdmFsdWUgLyAyNTVcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGNvbG9yLmNsb25lKCkpXG5cbiAgICBjb25zdCBbIGh1ZSwgc2F0dXJhdGlvbiwgYnJpZ2h0bmVzcyBdID0gY29sb3IudG9IU1YoKVxuICAgIHRoaXMuc2V0U3RhdGUoeyBodWUsIHNhdHVyYXRpb24sIGJyaWdodG5lc3MgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIF9yZW5kZXJDb250ZW50ICgpIHtcbiAgICBjb25zdCB7IGh1ZSwgc2F0dXJhdGlvbiwgYnJpZ2h0bmVzcywgY29sb3IgfSA9IHRoaXMuc3RhdGVcbiAgICBjb25zdCBoc3ZQcm9wcyA9IHsgaHVlLCBzYXR1cmF0aW9uLCBicmlnaHRuZXNzIH1cbiAgICByZXR1cm4gW1xuICAgICAgPFRvcEFycm93IGtleT0nYXJyb3cnIC8+LFxuICAgICAgPENvbG9yUGlja2VyIGtleT0nY29sb3JQaWNrZXInIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtY29sb3JQaWNrZXInIDogdW5kZWZpbmVkKX0+XG4gICAgICAgIDxTYXR1cmF0aW9uVmFsdWVTbGlkZXJcbiAgICAgICAgICB7Li4uaHN2UHJvcHN9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuX29uU2F0dXJhdGlvbkJyaWdodG5lc3NDaGFuZ2V9XG4gICAgICAgIC8+XG4gICAgICAgIDxIdWVTbGlkZXJcbiAgICAgICAgICB7Li4uaHN2UHJvcHN9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuX29uSHVlQ2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgICA8T3BhY2l0eVNsaWRlclxuICAgICAgICAgIHZhbHVlPXtjb2xvci5hfVxuICAgICAgICAgIGNvbG9yPXtjb2xvcn1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5fb25BbHBoYUNoYW5nZX1cbiAgICAgICAgLz5cbiAgICAgICAgPENvbG9yVmFsdWVJbnB1dHM+XG4gICAgICAgICAgPEhleElucHV0Q29tcG9uZW50XG4gICAgICAgICAgICBpbnB1dExhYmVsPSdIZXgnXG4gICAgICAgICAgICB2YWx1ZT17Y29sb3IudG9IZXgoKS5zdWJzdHIoMSl9XG4gICAgICAgICAgICBpbnB1dENsYXNzTmFtZT17KHRlc3QgPyAnanMtaGV4SW5wdXQnIDogdW5kZWZpbmVkKX1cbiAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e3RoaXMuX29uSGV4VmFsdWVDaGFuZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8Q29sb3JDb21wb25lbnRJbnB1dENvbXBvbmVudFxuICAgICAgICAgICAgaW5wdXRMYWJlbD0nUidcbiAgICAgICAgICAgIHZhbHVlPXtjb2xvci50b1JHQigpWzBdfVxuICAgICAgICAgICAgbWluVmFsdWU9ezF9XG4gICAgICAgICAgICBtYXhWYWx1ZT17MjU1fVxuICAgICAgICAgICAgaW5wdXRDbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXJlZElucHV0JyA6IHVuZGVmaW5lZCl9XG4gICAgICAgICAgICBvblZhbHVlQ2hhbmdlPXt0aGlzLl9jaGFuZ2VDb2xvckNvbXBvbmVudC5iaW5kKHRoaXMsICdyJyl9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8Q29sb3JDb21wb25lbnRJbnB1dENvbXBvbmVudFxuICAgICAgICAgICAgaW5wdXRMYWJlbD0nRydcbiAgICAgICAgICAgIHZhbHVlPXtjb2xvci50b1JHQigpWzFdfVxuICAgICAgICAgICAgbWluVmFsdWU9ezF9XG4gICAgICAgICAgICBtYXhWYWx1ZT17MjU1fVxuICAgICAgICAgICAgaW5wdXRDbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWdyZWVuSW5wdXQnIDogdW5kZWZpbmVkKX1cbiAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e3RoaXMuX2NoYW5nZUNvbG9yQ29tcG9uZW50LmJpbmQodGhpcywgJ2cnKX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxDb2xvckNvbXBvbmVudElucHV0Q29tcG9uZW50XG4gICAgICAgICAgICBpbnB1dExhYmVsPSdCJ1xuICAgICAgICAgICAgdmFsdWU9e2NvbG9yLnRvUkdCKClbMl19XG4gICAgICAgICAgICBtaW5WYWx1ZT17MX1cbiAgICAgICAgICAgIG1heFZhbHVlPXsyNTV9XG4gICAgICAgICAgICBpbnB1dENsYXNzTmFtZT17KHRlc3QgPyAnanMtYmx1ZUlucHV0JyA6IHVuZGVmaW5lZCl9XG4gICAgICAgICAgICBvblZhbHVlQ2hhbmdlPXt0aGlzLl9jaGFuZ2VDb2xvckNvbXBvbmVudC5iaW5kKHRoaXMsICdiJyl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Db2xvclZhbHVlSW5wdXRzPlxuICAgICAgPC9Db2xvclBpY2tlcj5cbiAgICBdXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyByZW5kZXJlZCwgdmlzaWJsZSB9ID0gdGhpcy5wcm9wc1xuICAgIHJldHVybiA8Q29sb3JQaWNrZXJDb250YWluZXIgcmVuZGVyZWQ9e3JlbmRlcmVkfSB2aXNpYmxlPXt2aXNpYmxlfT5cbiAgICAgIHtyZW5kZXJlZCAmJiB0aGlzLl9yZW5kZXJDb250ZW50KCl9XG4gICAgPC9Db2xvclBpY2tlckNvbnRhaW5lcj5cbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTVFlMRVNcblxuY29uc3QgQ29sb3JQaWNrZXJDb250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ25vbmUnLFxuICBvcGFjaXR5OiAwLFxuICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2Utb3V0YFxufSwge1xuICByZW5kZXJlZDoge1xuICAgIGRpc3BsYXk6ICdibG9jaydcbiAgfSxcbiAgdmlzaWJsZToge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUgPT4gYG9wYWNpdHkgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259cyBlYXNlLWluYFxuICB9XG59KVxuXG5jb25zdCBUb3BBcnJvdyA9IGFkb25pcy5kaXYoe1xuICBoZWlnaHQ6ICcxMHB4JyxcbiAgd2lkdGg6ICczMnB4JyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG5cbiAgJzphZnRlcic6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBib3R0b206ICcwJyxcbiAgICBsZWZ0OiAnNTAlJyxcbiAgICBib3JkZXI6ICdzb2xpZCB0cmFuc3BhcmVudCcsXG4gICAgY29udGVudDogJ1wiXCInLFxuICAgIGhlaWdodDogMCxcbiAgICB3aWR0aDogMCxcbiAgICBib3JkZXJCb3R0b21Db2xvcjogdGhlbWUgPT4gdGhlbWUuY29udHJvbHNMaWdodEJhY2tncm91bmRDb2xvcixcbiAgICBib3JkZXJXaWR0aDogJzEzcHgnLFxuICAgIG1hcmdpbkxlZnQ6ICctMTNweCcsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gIH1cbn0pXG5cbmNvbnN0IENvbG9yUGlja2VyID0gYWRvbmlzLmRpdih7XG4gIGN1cnNvcjogJ2F1dG8nLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgcGFkZGluZzogJzI1cHgnLFxuICBib3hTaGFkb3c6ICcwIDJweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMzApLCAwIDRweCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMzApLCAwIDhweCA4cHggMCByZ2JhKDAsIDAsIDAsIDAuMzApLCAwIDE2cHggMTZweCAwIHJnYmEoMCwgMCwgMCwgMC4zMCknLFxuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS5jb250cm9sc0xpZ2h0QmFja2dyb3VuZENvbG9yLFxuICB3aWR0aDogJzIzMHB4JyxcbiAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ2NvbnRyb2xzT3ZlcmxheXMnKSxcbiAgb3ZlcmZsb3dZOiAnYXV0bydcbn0pXG5cbmNvbnN0IFNhdHVyYXRpb25WYWx1ZVNsaWRlciA9IGFkb25pcyhTYXR1cmF0aW9uVmFsdWVTbGlkZXJDb21wb25lbnQpKHtcblxufSlcblxuY29uc3QgSHVlU2xpZGVyID0gYWRvbmlzKEh1ZVNsaWRlckNvbXBvbmVudCkoe1xuICBtYXJnaW5Ub3A6ICcxNnB4J1xufSlcblxuY29uc3QgT3BhY2l0eVNsaWRlciA9IGFkb25pcyhPcGFjaXR5U2xpZGVyQ29tcG9uZW50KSh7XG4gIG1hcmdpblRvcDogJzEwcHgnXG59KVxuXG5jb25zdCBDb2xvclZhbHVlSW5wdXRzID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZScsXG4gIHRhYmxlTGF5b3V0OiAnZml4ZWQnLFxuICBtYXJnaW5Ub3A6ICczMHB4J1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvY29sb3ItcGlja2VyL2NvbG9yLXBpY2tlci1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCBDb2xvciB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgRHJhZ2dhYmxlQ29tcG9uZW50IGZyb20gJ2NvbXBvbmVudHMvZHJhZ2dhYmxlLWNvbXBvbmVudCdcbmltcG9ydCB7IENpcmNsZVNsaWRlciwgQ2lyY2xlU2xpZGVyQmFja2dyb3VuZCwgQ2lyY2xlU2xpZGVyS25vYiB9IGZyb20gJy4vY2lyY2xlLXNsaWRlci1zdHlsZXMnXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIdWVTbGlkZXJDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uS25vYkRyYWdTdGFydCcsXG4gICAgICAnX29uS25vYkRyYWcnLFxuICAgICAgJ19zZXRWYWx1ZSdcbiAgICApXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHRoaXMucHJvcHMuaHVlXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGFmdGVyIHRoaXMgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnREaWRNb3VudCgpXG4gICAgdGhpcy5fcmVuZGVyQ2FudmFzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSBhIG1vdW50ZWQgY29tcG9uZW50IHJlY2VpdmVzIG5ldyBwcm9wc1xuICAgKiBAcGFyYW0gIHtPYmplY3R9IHByb3BzXG4gICAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChwcm9wcykge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdmFsdWU6IHByb3BzLmh1ZVxuICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBEUkFHIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBkcmFnZ2luZyB0aGUga25vYlxuICAgKiBAcGFyYW0gIHtWZWN0b3IyfSBwb3NpdGlvblxuICAgKiBAcGFyYW0gIHtFdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uS25vYkRyYWdTdGFydCAocG9zaXRpb24sIF8sIGUpIHtcbiAgICB0aGlzLl9zbGlkZXJXaWR0aCA9IHRoaXMuX3NsaWRlci5vZmZzZXRXaWR0aFxuXG4gICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzLl9rbm9iKSB7XG4gICAgICB0aGlzLl9pbml0aWFsVmFsdWUgPSB0aGlzLnN0YXRlLnZhbHVlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2luaXRpYWxWYWx1ZSA9IHBvc2l0aW9uLnggLyB0aGlzLl9zbGlkZXJXaWR0aFxuICAgICAgdGhpcy5fc2V0VmFsdWUodGhpcy5faW5pdGlhbFZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGlsZSB0aGUgdXNlciBkcmFncyB0aGUga25vYlxuICAgKiBAcGFyYW0gIHtWZWN0b3IyfSBvZmZzZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbktub2JEcmFnIChvZmZzZXQpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLl9pbml0aWFsVmFsdWUgKyAob2Zmc2V0LnggLyB0aGlzLl9zbGlkZXJXaWR0aClcbiAgICB0aGlzLl9zZXRWYWx1ZSh2YWx1ZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE1JU0NcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgY3VycmVudCB2YWx1ZSBjYWxscyBjYWxsYmFja3MuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBUaGUgbmV3IGh1ZVxuICAgKi9cbiAgX3NldFZhbHVlICh2YWx1ZSkge1xuICAgIGxldCBjbGFtcGVkVmFsdWUgPSBNYXRoLm1pbigxLCBNYXRoLm1heCgwLCB2YWx1ZSkpXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB2YWx1ZTogY2xhbXBlZFZhbHVlXG4gICAgfSlcblxuICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiZcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoY2xhbXBlZFZhbHVlKVxuXG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgaHVlIGNvbG9ycyB0byB0aGUgY2FudmFzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyQ2FudmFzICgpIHtcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLl9jYW52YXNcbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcblxuICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhcy5vZmZzZXRXaWR0aFxuICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMub2Zmc2V0SGVpZ2h0XG5cbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGNhbnZhcy53aWR0aDsgeCsrKSB7XG4gICAgICBjb25zdCByYXRpbyA9IHggLyBjYW52YXMud2lkdGhcbiAgICAgIGNvbnN0IGNvbG9yID0gQ29sb3IuZnJvbUhTVihyYXRpbywgMSwgMSlcblxuICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGNvbG9yLnRvUkdCQSgpXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpXG4gICAgICBjb250ZXh0Lm1vdmVUbyh4LCAwKVxuICAgICAgY29udGV4dC5saW5lVG8oeCwgY2FudmFzLmhlaWdodClcbiAgICAgIGNvbnRleHQuc3Ryb2tlKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuICg8RHJhZ2dhYmxlQ29tcG9uZW50XG4gICAgICBvblN0YXJ0PXt0aGlzLl9vbktub2JEcmFnU3RhcnR9XG4gICAgICBvbkRyYWc9e3RoaXMuX29uS25vYkRyYWd9PlxuICAgICAgPEh1ZVNsaWRlclxuICAgICAgICBzdHlsZXM9e3RoaXMucHJvcHMuc3R5bGVzfVxuICAgICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9zbGlkZXIgPSBlbCB9fVxuICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWh1ZUNvbnRyb2wnIDogdW5kZWZpbmVkKX0+XG4gICAgICAgIDxCYWNrZ3JvdW5kIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2NhbnZhcyA9IGVsIH19IC8+XG4gICAgICAgIDxLbm9iXG4gICAgICAgICAgc3R5bGU9e3RoaXMuX2dldEtub2JTdHlsZSgpfVxuICAgICAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2tub2IgPSBlbCB9fVxuICAgICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMta25vYicgOiB1bmRlZmluZWQpfSAvPlxuICAgICAgPC9IdWVTbGlkZXI+XG4gICAgPC9EcmFnZ2FibGVDb21wb25lbnQ+KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0eWxlIGZvciB0aGUga25vYi5cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldEtub2JTdHlsZSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6ICh0aGlzLnByb3BzLmh1ZSAqIDEwMCkudG9GaXhlZCgyKSArICclJ1xuICAgIH1cbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTVFlMRVNcblxuY29uc3QgSHVlU2xpZGVyID0gYWRvbmlzKENpcmNsZVNsaWRlcikuZGl2KHt9KVxuSHVlU2xpZGVyQ29tcG9uZW50LlJvb3RFbGVtZW50ID0gSHVlU2xpZGVyXG5cbmNvbnN0IEtub2IgPSBhZG9uaXMoQ2lyY2xlU2xpZGVyS25vYikuZGl2KHt9KVxuXG5jb25zdCBCYWNrZ3JvdW5kID0gYWRvbmlzKENpcmNsZVNsaWRlckJhY2tncm91bmQpLmNhbnZhcyh7XG4gIG1hcmdpblRvcDogJzFweCcsXG4gIGhlaWdodDogJzhweCdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2NvbG9yLXBpY2tlci9odWUtc2xpZGVyLWNvbXBvbmVudC5qc3giLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIEJhc2VDb21wb25lbnQgfSBmcm9tICdnbG9iYWxzJ1xuaW1wb3J0IERyYWdnYWJsZUNvbXBvbmVudCBmcm9tICdjb21wb25lbnRzL2RyYWdnYWJsZS1jb21wb25lbnQnXG5pbXBvcnQgeyBDaXJjbGVTbGlkZXIsIENpcmNsZVNsaWRlckJhY2tncm91bmQsIENpcmNsZVNsaWRlcktub2IgfSBmcm9tICcuL2NpcmNsZS1zbGlkZXItc3R5bGVzJ1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BhY2l0eVNsaWRlckNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQmFzZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vbktub2JEcmFnU3RhcnQnLFxuICAgICAgJ19vbktub2JEcmFnJyxcbiAgICAgICdfdXBkYXRlQmFja2dyb3VuZENvbG9ycycsXG4gICAgICAnX3NldFZhbHVlJ1xuICAgIClcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjb2xvcjogdGhpcy5wcm9wcy5jb2xvci5jbG9uZSgpLFxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgc2xpZGVycyBiYWNrZ3JvdW5kIGNvbG9ycy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGVCYWNrZ3JvdW5kQ29sb3JzICgpIHtcbiAgICB0aGlzLl90cmFuc3BhcmVudENvbG9yID0gdGhpcy5zdGF0ZS5jb2xvci5jbG9uZSgpXG4gICAgdGhpcy5fdHJhbnNwYXJlbnRDb2xvci5hID0gMFxuXG4gICAgdGhpcy5fb3BhcXVlQ29sb3IgPSB0aGlzLnN0YXRlLmNvbG9yLmNsb25lKClcbiAgICB0aGlzLl9vcGFxdWVDb2xvci5hID0gMVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIGEgbW91bnRlZCBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzXG4gICAqIEBwYXJhbSAge09iamVjdH0gcHJvcHNcbiAgICovXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKHByb3BzKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb2xvcjogcHJvcHMuY29sb3IuY2xvbmUoKSxcbiAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZVxuICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBEUkFHIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBkcmFnZ2luZyB0aGUga25vYlxuICAgKiBAcGFyYW0gIHtWZWN0b3IyfSBwb3NpdGlvblxuICAgKiBAcGFyYW0gIHtFdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uS25vYkRyYWdTdGFydCAocG9zaXRpb24sIF8sIGUpIHtcbiAgICB0aGlzLl9zbGlkZXJXaWR0aCA9IHRoaXMuX3NsaWRlci5vZmZzZXRXaWR0aFxuXG4gICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzLl9rbm9iKSB7XG4gICAgICB0aGlzLl9pbml0aWFsVmFsdWUgPSB0aGlzLnN0YXRlLnZhbHVlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2luaXRpYWxWYWx1ZSA9IDEgLSAocG9zaXRpb24ueCAvIHRoaXMuX3NsaWRlcldpZHRoKVxuICAgICAgdGhpcy5fc2V0VmFsdWUodGhpcy5faW5pdGlhbFZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGlsZSB0aGUgdXNlciBkcmFncyB0aGUga25vYlxuICAgKiBAcGFyYW0gIHtWZWN0b3IyfSBvZmZzZXRcbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbktub2JEcmFnIChvZmZzZXQsIGUpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLl9pbml0aWFsVmFsdWUgLSAob2Zmc2V0LnggLyB0aGlzLl9zbGlkZXJXaWR0aClcbiAgICB0aGlzLl9zZXRWYWx1ZSh2YWx1ZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE1JU0NcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgY3VycmVudCB2YWx1ZSBjYWxscyBjYWxsYmFja3MuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBUaGUgbmV3IG9wYWNpdHlcbiAgICovXG4gIF9zZXRWYWx1ZSAodmFsdWUpIHtcbiAgICBsZXQgY2xpcHBlZFZhbHVlID0gTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgdmFsdWUpKVxuXG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShjbGlwcGVkVmFsdWUpXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHZhbHVlOiBjbGlwcGVkVmFsdWVcbiAgICB9KVxuXG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgdGhpcy5fdXBkYXRlQmFja2dyb3VuZENvbG9ycygpXG4gICAgY29uc3QgdGlsZUltYWdlUGF0aCA9IHRoaXMuX2dldEFzc2V0UGF0aCgnZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC90aWxlZC1iYWNrZ3JvdW5kLnBuZycsIHRydWUpXG5cbiAgICByZXR1cm4gKDxEcmFnZ2FibGVDb21wb25lbnRcbiAgICAgIG9uU3RhcnQ9e3RoaXMuX29uS25vYkRyYWdTdGFydH1cbiAgICAgIG9uRHJhZz17dGhpcy5fb25Lbm9iRHJhZ30+XG4gICAgICA8T3BhY2l0eVNsaWRlclxuICAgICAgICBzdHlsZXM9e3RoaXMucHJvcHMuc3R5bGVzfVxuICAgICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9zbGlkZXIgPSBlbCB9fVxuICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLW9wYWNpdHlDb250cm9sJyA6IHVuZGVmaW5lZCl9PlxuICAgICAgICA8VGlsZWRCYWNrZ3JvdW5kIHN0eWxlPXt7IGJhY2tncm91bmRJbWFnZTogYHVybCgke3RpbGVJbWFnZVBhdGh9KWAgfX0gLz5cbiAgICAgICAgPEJhY2tncm91bmQgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgbGluZWFyLWdyYWRpZW50KDkwZGVnLCAke3RoaXMuX29wYXF1ZUNvbG9yLnRvUkdCQSgpfSAwJSwgJHt0aGlzLl90cmFuc3BhcmVudENvbG9yLnRvUkdCQSgpfSAxMDAlKWAgfX0gLz5cbiAgICAgICAgPEtub2JcbiAgICAgICAgICBzdHlsZT17dGhpcy5fZ2V0S25vYlN0eWxlKCl9XG4gICAgICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fa25vYiA9IGVsIH19XG4gICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1rbm9iJyA6IHVuZGVmaW5lZCl9IC8+XG4gICAgICA8L09wYWNpdHlTbGlkZXI+XG4gICAgPC9EcmFnZ2FibGVDb21wb25lbnQ+KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0eWxlIGZvciB0aGUga25vYi5cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldEtub2JTdHlsZSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6ICgoMSAtIHRoaXMuc3RhdGUudmFsdWUpICogMTAwKS50b0ZpeGVkKDIpICsgJyUnXG4gICAgfVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxFU1xuXG5jb25zdCBPcGFjaXR5U2xpZGVyID0gYWRvbmlzKENpcmNsZVNsaWRlcikuZGl2KHt9KVxuT3BhY2l0eVNsaWRlckNvbXBvbmVudC5Sb290RWxlbWVudCA9IE9wYWNpdHlTbGlkZXJcblxuY29uc3QgS25vYiA9IGFkb25pcyhDaXJjbGVTbGlkZXJLbm9iKS5kaXYoe30pXG5cbmNvbnN0IEJhY2tncm91bmQgPSBhZG9uaXMoQ2lyY2xlU2xpZGVyQmFja2dyb3VuZCkuZGl2KHt9KVxuXG5jb25zdCBUaWxlZEJhY2tncm91bmQgPSBhZG9uaXMoQmFja2dyb3VuZCkoe1xuICBiYWNrZ3JvdW5kUmVwZWF0OiAneScsXG4gIGJhY2tncm91bmRTaXplOiAnY29udGFpbicsXG4gIGJhY2tncm91bmRQb3NpdGlvbjogJ3JpZ2h0J1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvY29sb3ItcGlja2VyL29wYWNpdHktc2xpZGVyLWNvbXBvbmVudC5qc3giLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIEJhc2VDb21wb25lbnQsIENvbG9yIH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBEcmFnZ2FibGVDb21wb25lbnQgZnJvbSAnY29tcG9uZW50cy9kcmFnZ2FibGUtY29tcG9uZW50J1xuaW1wb3J0IHsgQ2lyY2xlU2xpZGVyLCBDaXJjbGVTbGlkZXJCYWNrZ3JvdW5kLCBDaXJjbGVTbGlkZXJLbm9iIH0gZnJvbSAnLi9jaXJjbGUtc2xpZGVyLXN0eWxlcydcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNhdHVyYXRpb25WYWx1ZVNsaWRlckNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQmFzZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vbktub2JEcmFnU3RhcnQnLFxuICAgICAgJ19vbktub2JEcmFnJ1xuICAgIClcblxuICAgIHRoaXMuX2xhc3RIdWUgPSBudWxsXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZFxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudERpZE1vdW50KClcbiAgICB0aGlzLl9yZW5kZXJDYW52YXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdXBkYXRpbmcgb2NjdXJzXG4gICAqL1xuICBjb21wb25lbnREaWRVcGRhdGUgKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmh1ZSAhPT0gdGhpcy5fbGFzdEh1ZSkge1xuICAgICAgdGhpcy5fcmVuZGVyQ2FudmFzKClcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBEUkFHIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBkcmFnZ2luZyB0aGUga25vYlxuICAgKiBAcGFyYW0gIHtWZWN0b3IyfSBwb3NpdGlvblxuICAgKiBAcGFyYW0gIHtFdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uS25vYkRyYWdTdGFydCAocG9zaXRpb24sIF8sIGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMuX2tub2IpIHtcbiAgICAgIHRoaXMuX2luaXRpYWxCcmlnaHRuZXNzID0gdGhpcy5wcm9wcy5icmlnaHRuZXNzXG4gICAgICB0aGlzLl9pbml0aWFsU2F0dXJhdGlvbiA9IHRoaXMucHJvcHMuc2F0dXJhdGlvblxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9pbml0aWFsU2F0dXJhdGlvbiA9IHBvc2l0aW9uLnggLyB0aGlzLl9jYW52YXMub2Zmc2V0V2lkdGhcbiAgICAgIHRoaXMuX2luaXRpYWxCcmlnaHRuZXNzID0gMSAtIChwb3NpdGlvbi55IC8gdGhpcy5fY2FudmFzLm9mZnNldEhlaWdodClcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiZcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh0aGlzLl9pbml0aWFsU2F0dXJhdGlvbiwgdGhpcy5faW5pdGlhbEJyaWdodG5lc3MpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoaWxlIHRoZSB1c2VyIGRyYWdzIHRoZSBrbm9iXG4gICAqIEBwYXJhbSAge1ZlY3RvcjJ9IG9mZnNldFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uS25vYkRyYWcgKG9mZnNldCkge1xuICAgIGlmICh0aGlzLl9jYW52YXMgPT0gbnVsbCkgcmV0dXJuXG4gICAgY29uc3QgY2FudmFzV2lkdGggPSB0aGlzLl9jYW52YXMub2Zmc2V0V2lkdGhcbiAgICBjb25zdCBjYW52YXNIZWlnaHQgPSB0aGlzLl9jYW52YXMub2Zmc2V0SGVpZ2h0XG5cbiAgICBsZXQgc2F0dXJhdGlvbiA9IHRoaXMuX2luaXRpYWxTYXR1cmF0aW9uICsgb2Zmc2V0LnggLyBjYW52YXNXaWR0aFxuICAgIHNhdHVyYXRpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBzYXR1cmF0aW9uKSlcbiAgICBsZXQgYnJpZ2h0bmVzcyA9IHRoaXMuX2luaXRpYWxCcmlnaHRuZXNzICsgb2Zmc2V0LnkgLyBjYW52YXNIZWlnaHQgKiAtMVxuICAgIGJyaWdodG5lc3MgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBicmlnaHRuZXNzKSlcblxuICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiZcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2Uoc2F0dXJhdGlvbiwgYnJpZ2h0bmVzcylcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBodWUgY29sb3JzIHRvIHRoZSBjYW52YXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJDYW52YXMgKCkge1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuX2NhbnZhc1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuXG4gICAgY2FudmFzLndpZHRoID0gY2FudmFzLm9mZnNldFdpZHRoXG4gICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy5vZmZzZXRIZWlnaHRcblxuICAgIGxldCBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXG5cbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGNhbnZhcy5oZWlnaHQ7IHkrKykge1xuICAgICAgY29uc3QgdmFsdWUgPSAoY2FudmFzLmhlaWdodCAtIHkpIC8gY2FudmFzLmhlaWdodFxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBjYW52YXMud2lkdGg7IHgrKykge1xuICAgICAgICBjb25zdCBzYXR1cmF0aW9uID0geCAvIGNhbnZhcy53aWR0aFxuICAgICAgICBjb25zdCBjb2xvciA9IENvbG9yLmZyb21IU1YodGhpcy5wcm9wcy5odWUsIHNhdHVyYXRpb24sIHZhbHVlKVxuICAgICAgICBjb25zdCB7IHIsIGcsIGIsIGEgfSA9IGNvbG9yXG5cbiAgICAgICAgY29uc3QgaW5kZXggPSAoeSAqIGNhbnZhcy53aWR0aCArIHgpICogNFxuXG4gICAgICAgIGltYWdlRGF0YS5kYXRhW2luZGV4XSA9IHIgKiAyNTVcbiAgICAgICAgaW1hZ2VEYXRhLmRhdGFbaW5kZXggKyAxXSA9IGcgKiAyNTVcbiAgICAgICAgaW1hZ2VEYXRhLmRhdGFbaW5kZXggKyAyXSA9IGIgKiAyNTVcbiAgICAgICAgaW1hZ2VEYXRhLmRhdGFbaW5kZXggKyAzXSA9IGEgKiAyNTVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb250ZXh0LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApXG5cbiAgICB0aGlzLl9sYXN0SHVlID0gdGhpcy5wcm9wcy5odWVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgICBvblN0YXJ0PXt0aGlzLl9vbktub2JEcmFnU3RhcnR9XG4gICAgICAgIG9uRHJhZz17dGhpcy5fb25Lbm9iRHJhZ30+XG4gICAgICAgIDxTYXR1cmF0aW9uVmFsdWVTbGlkZXJcbiAgICAgICAgICBzdHlsZXM9e3RoaXMucHJvcHMuc3R5bGVzfVxuICAgICAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX3NsaWRlciA9IGVsIH19XG4gICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1zYXR1cmF0aW9uQnJpZ2h0bmVzc0NvbnRyb2wnIDogdW5kZWZpbmVkKX0+XG4gICAgICAgICAgPEJhY2tncm91bmQgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fY2FudmFzID0gZWwgfX0gLz5cbiAgICAgICAgICA8S25vYlxuICAgICAgICAgICAgc3R5bGU9e3RoaXMuX2dldEtub2JTdHlsZSgpfVxuICAgICAgICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fa25vYiA9IGVsIH19XG4gICAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWtub2InIDogdW5kZWZpbmVkKX0gLz5cbiAgICAgICAgPC9TYXR1cmF0aW9uVmFsdWVTbGlkZXI+XG4gICAgICA8L0RyYWdnYWJsZUNvbXBvbmVudD4pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3R5bGUgZm9yIHRoZSBrbm9iLlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0S25vYlN0eWxlICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogKHRoaXMucHJvcHMuc2F0dXJhdGlvbiAqIDEwMCkudG9GaXhlZCgyKSArICclJyxcbiAgICAgIHRvcDogKCgxIC0gdGhpcy5wcm9wcy5icmlnaHRuZXNzKSAqIDEwMCkudG9GaXhlZCgyKSArICclJ1xuICAgIH1cbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTVFlMRVNcblxuY29uc3QgU2F0dXJhdGlvblZhbHVlU2xpZGVyID0gYWRvbmlzKENpcmNsZVNsaWRlcikuZGl2KHtcbiAgaGVpZ2h0OiAnMTUwcHgnLFxuICBjdXJzb3I6ICdwb2ludGVyJ1xufSlcblNhdHVyYXRpb25WYWx1ZVNsaWRlckNvbXBvbmVudC5Sb290RWxlbWVudCA9IFNhdHVyYXRpb25WYWx1ZVNsaWRlclxuXG5jb25zdCBLbm9iID0gYWRvbmlzKENpcmNsZVNsaWRlcktub2IpLmRpdih7XG4gIG1hcmdpblRvcDogJy02cHgnLFxuICBtYXJnaW5MZWZ0OiAnLThweCdcbn0pXG5cbmNvbnN0IEJhY2tncm91bmQgPSBhZG9uaXMoQ2lyY2xlU2xpZGVyQmFja2dyb3VuZCkuY2FudmFzKHtcbiAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcbiAgYmFja2dyb3VuZDogJ3doaXRlJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zY3JlZW5zL2VkaXRvci9jb250cm9scy9zaGFyZWQvY29sb3ItcGlja2VyL3NhdHVyYXRpb24tdmFsdWUtc2xpZGVyLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOi8qKlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMgfSBmcm9tICdnbG9iYWxzJ1xuaW1wb3J0IENvbG9yQ29tcG9uZW50SW5wdXRDb21wb25lbnQgZnJvbSAnLi9jb2xvci1jb21wb25lbnQtaW5wdXQtY29tcG9uZW50J1xuaW1wb3J0IE51bWVyaWNJbnB1dENvbXBvbmVudCBmcm9tICdjb21wb25lbnRzL3NoYXJlZC9mb3Jtcy9udW1lcmljLWlucHV0LWNvbXBvbmVudCdcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhleElucHV0Q29tcG9uZW50IGV4dGVuZHMgQ29sb3JDb21wb25lbnRJbnB1dENvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBDb2xvckNvbXBvbmVudElucHV0Q29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhbiBpbnB1dCBjaGFuZ2VzLlxuICAgKiBAcGFyYW0gIHtFdmVudH0gZXZlbnRcbiAgICogQHJldHVybiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uSW5wdXRDaGFuZ2UgKGV2ZW50KSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gZXZlbnQudGFyZ2V0XG4gICAgaWYgKHZhbHVlLm1hdGNoKC9eIyhbQS1GYS1mMC05XXs2fSkkLykpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUgfSlcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uVmFsdWVDaGFuZ2UgJiZcbiAgICAgIHRoaXMucHJvcHMub25WYWx1ZUNoYW5nZSh2YWx1ZSlcblxuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIHJpZ2h0IHBhcnQgb2YgdGhpcyBjb250cm9sIChlLmcuIGFuIGlucHV0KVxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlclJpZ2h0UGFydCAoKSB7XG4gICAgbGV0IGNsYXNzTmFtZXMgPSB0ZXN0ID8gWydqcy12YWx1ZVNlbGVjdGlvbi1pbnB1dCddIDogW11cbiAgICBpZiAodGhpcy5wcm9wcy5pbnB1dENsYXNzTmFtZSkge1xuICAgICAgY2xhc3NOYW1lcy5wdXNoKHRoaXMucHJvcHMuaW5wdXRDbGFzc05hbWUpXG4gICAgfVxuXG4gICAgcmV0dXJuICg8SW5wdXRGaWVsZFxuICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9XG4gICAgICBvbkxpdmVDaGFuZ2U9e3RoaXMuX29uSW5wdXRMaXZlQ2hhbmdlfVxuICAgICAgb25DaGFuZ2U9e3RoaXMuX29uSW5wdXRDaGFuZ2V9XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMuam9pbignICcpfVxuICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5faW5wdXQgPSBlbCB9fVxuICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IC8+KVxuICB9XG59XG5cbmNvbnN0IElucHV0RmllbGQgPSBhZG9uaXMoTnVtZXJpY0lucHV0Q29tcG9uZW50KSh7XG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIHdpZHRoOiAnNjJweCcsXG4gIG1pbldpZHRoOiAnYXV0bycsXG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3NjcmVlbnMvZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jb2xvci1waWNrZXIvaGV4LWlucHV0LWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOi8qKlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIEJhc2VDb21wb25lbnQgfSBmcm9tICdnbG9iYWxzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdXR0b25Db21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIHJldHVybiAoPEJ1dHRvblxuICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5kaXNhYmxlZCA/IHVuZGVmaW5lZCA6IHRoaXMucHJvcHMub25DbGlja31cbiAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfVxuICAgICAgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX0+XG4gICAgICB7dGhpcy5wcm9wcy50aXRsZX1cbiAgICA8L0J1dHRvbj4pXG4gIH1cbn1cblxuY29uc3QgQnV0dG9uID0gYWRvbmlzLmJ1dHRvbih7XG4gIHRyYW5zaXRpb246ICdjb2xvciAwLjJzIGVhc2Utb3V0JyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnNDBweCcsXG4gIGJhY2tncm91bmQ6IHRoZW1lID0+IGAke3RoZW1lLmNvbnRyb2xzTGlnaHRCYWNrZ3JvdW5kQ29sb3J9YCxcbiAgYm94U2hhZG93OiAnMCAycHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjEwKSwgMCAzcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjMwKSwgMCA0cHggNnB4IDAgcmdiYSgwLCAwLCAwLCAwLjMwKScsXG4gIGJvcmRlclJhZGl1czogJzJweCcsXG4gIGJvcmRlcjogdGhlbWUgPT4gYDFweCBzb2xpZCAke3RoZW1lLmJ1dHRvbkJvcmRlckNvbG9yfWAsXG4gIGZvbnRTaXplOiAnMTNweCcsXG4gIGxldHRlclNwYWNpbmc6ICcxLjRweCcsXG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICBmb250RmFtaWx5OiB0aGVtZSA9PiB0aGVtZS51cHBlcmNhc2VTZW1pQm9sZEZvbnRGYW1pbHksXG4gIGNvbG9yOiB0aGVtZSA9PiB0aGVtZS5kaW1tZWRUZXh0Q29sb3IsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuXG4gICc6aG92ZXInOiB7XG4gICAgY29sb3I6IHRoZW1lID0+IHRoZW1lLnRleHRDb2xvclxuICB9LFxuXG4gICc6Zm9jdXMnOiB7XG4gICAgb3V0bGluZTogJ25vbmUnXG4gIH1cbn0sIHtcbiAgZGlzYWJsZWQ6IHtcbiAgICBvcGFjaXR5OiAwLjMsXG4gICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgJzpob3Zlcic6IHtcbiAgICAgIGNvbG9yOiB0aGVtZSA9PiB0aGVtZS5kaW1tZWRUZXh0Q29sb3JcbiAgICB9XG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2J1dHRvbi1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIFByb3BUeXBlcywgQmFzZUNvbXBvbmVudCwgYWRvbmlzLCBTREtVdGlscyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJy4uL3N0eWxlcydcbmltcG9ydCBTY3JvbGxiYXJDb21wb25lbnQgZnJvbSAnY29tcG9uZW50cy9zY3JvbGxiYXItY29tcG9uZW50J1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJvcGRvd25Db21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZW5hYmxlTWVudTogUHJvcFR5cGVzLmJvb2wsIC8qIEVuYWJsZSBvciBkaXNhYmxlIHRoZSBtZW51ICovXG4gICAgc3R5bGVzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuY1xuICB9XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgZW5hYmxlTWVudTogdHJ1ZVxuICB9XG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uRHJvcGRvd25DbGljaycsXG4gICAgICAnX29uRG9jdW1lbnRDbGljaydcbiAgICApXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXhwYW5kZWQ6IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZFxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudERpZE1vdW50KClcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25Eb2N1bWVudENsaWNrKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnRXaWxsVW5tb3VudCgpXG5cbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uRG9jdW1lbnRDbGljaylcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBhbnl3aGVyZSBvbiB0aGUgc2NyZWVuLiBJZiB0aGUgY2xpY2sgaXMgb3V0c2lkZVxuICAgKiBvZiB0aGUgZHJvcGRvd24gYW5kIHRoZSBkcm9wZG93biBpcyBleHBhbmRlZCwgd2UgY29sbGFwc2UgaXQuXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Eb2N1bWVudENsaWNrIChlKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmV4cGFuZGVkKSByZXR1cm5cblxuICAgIGZvciAobGV0IGVsZW1lbnQgPSBlLnRhcmdldDsgZWxlbWVudDsgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgaWYgKGVsZW1lbnQgPT09IHRoaXMuX3Jvb3QpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoeyBleHBhbmRlZDogZmFsc2UgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBkcm9wZG93blxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uRHJvcGRvd25DbGljayAoKSB7XG4gICAgY29uc3QgeyBleHBhbmRlZCB9ID0gdGhpcy5zdGF0ZVxuICAgIHRoaXMuc2V0U3RhdGUoeyBleHBhbmRlZDogIWV4cGFuZGVkIH0pXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIGEgZHJvcGRvd24gaXRlbSBoYXMgYmVlbiBjbGlja2VkXG4gICAqIEBwYXJhbSB7T2JlamN0fSB2YWx1ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uSXRlbUNsaWNrICh2YWx1ZSkge1xuICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiZcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UodmFsdWUpXG5cbiAgICB0aGlzLnNldFN0YXRlKHsgZXhwYW5kZWQ6IGZhbHNlIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgaXRlbXMgZm9yIHRoaXMgZHJvcGRvd25cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudFtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlckRyb3Bkb3duSXRlbXMgKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuLm1hcChpdGVtID0+IHtcbiAgICAgIGNvbnN0IHByb3BzID0gU0RLVXRpbHMuZXh0ZW5kKHt9LCBpdGVtLnByb3BzLCB7XG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuX29uSXRlbUNsaWNrLmJpbmQodGhpcywgaXRlbS5wcm9wcy52YWx1ZSksXG4gICAgICAgIHNlbGVjdGVkOiB0aGlzLnByb3BzLnZhbHVlID09PSBpdGVtLnByb3BzLnZhbHVlLFxuICAgICAgICBjbGFzc05hbWU6ICh0ZXN0ID8gJ2pzLWRyb3Bkb3duSXRlbScgOiB1bmRlZmluZWQpXG4gICAgICB9KVxuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChpdGVtLCBwcm9wcylcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgbGV0IGxhYmVsID0gbnVsbFxuICAgIHRoaXMucHJvcHMuY2hpbGRyZW4uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGlmIChpdGVtLnByb3BzLnZhbHVlID09PSB0aGlzLnByb3BzLnZhbHVlKSB7XG4gICAgICAgIGxhYmVsID0gaXRlbS5wcm9wcy5jaGlsZHJlblxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBlbmFibGVEcm9wZG93bk1lbnUgPSB0aGlzLnByb3BzLmVuYWJsZU1lbnVcbiAgICByZXR1cm4gKDxEcm9wZG93bkNvbnRhaW5lciBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9yb290ID0gZWwgfX0gY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX0+XG4gICAgICA8RHJvcGRvd25cbiAgICAgICAgb25DbGljaz17ZW5hYmxlRHJvcGRvd25NZW51ID8gdGhpcy5fb25Ecm9wZG93bkNsaWNrIDogbnVsbH1cbiAgICAgICAgc3R5bGVzPXt0aGlzLnByb3BzLnN0eWxlc31cbiAgICAgICAgc3R5bGU9e3RoaXMucHJvcHMuc3R5bGV9PlxuICAgICAgICB7bGFiZWx9XG4gICAgICAgIHtlbmFibGVEcm9wZG93bk1lbnUgPyA8QXJyb3dEb3duIC8+IDogbnVsbH1cbiAgICAgIDwvRHJvcGRvd24+XG4gICAgICB7IHRoaXMuc3RhdGUuZXhwYW5kZWQgJiYgKDxEcm9wZG93bk92ZXJsYXkgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1kcm9wZG93bk92ZXJsYXknIDogdW5kZWZpbmVkKX0+XG4gICAgICAgIDxTY3JvbGxiYXJDb21wb25lbnQgZGlyZWN0aW9uPSd2ZXJ0aWNhbCcgbm9HcmFkaWVudD5cbiAgICAgICAgICA8RHJvcGRvd25MaXN0PlxuICAgICAgICAgICAge3RoaXMuX3JlbmRlckRyb3Bkb3duSXRlbXMoKX1cbiAgICAgICAgICA8L0Ryb3Bkb3duTGlzdD5cbiAgICAgICAgPC9TY3JvbGxiYXJDb21wb25lbnQ+XG4gICAgICA8L0Ryb3Bkb3duT3ZlcmxheT4pIH1cbiAgICA8L0Ryb3Bkb3duQ29udGFpbmVyPilcbiAgfVxufVxuXG5jb25zdCBEcm9wZG93bkNvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSlcblxuY29uc3QgRHJvcGRvd24gPSBhZG9uaXMoSW5wdXQpLmRpdih7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnXG59KVxuRHJvcGRvd25Db21wb25lbnQuUm9vdEVsZW1lbnQgPSBEcm9wZG93blxuXG5jb25zdCBEcm9wZG93bk92ZXJsYXkgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJveFNoYWRvdzogJzAgMnB4IDJweCAwIHJnYmEoMCwgMCwgMCwgMC4zMCksIDAgNHB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4zMCksIDAgOHB4IDhweCAwIHJnYmEoMCwgMCwgMCwgMC4zMCksIDAgMTZweCAxNnB4IDAgcmdiYSgwLCAwLCAwLCAwLjMwKScsXG4gIGJhY2tncm91bmQ6IHRoZW1lID0+IHRoZW1lLmNvbnRyb2xzTGlnaHRCYWNrZ3JvdW5kQ29sb3IsXG4gIHdpZHRoOiAnMTAwJScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ2NvbnRyb2xzT3ZlcmxheXMnKVxufSlcblxuY29uc3QgRHJvcGRvd25MaXN0ID0gYWRvbmlzLnVsKHtcbiAgbGlzdFN0eWxlOiAnbm9uZScsXG4gIHBhZGRpbmc6IDAsXG4gIG1hcmdpbjogMCxcbiAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gIG1heEhlaWdodDogJzIwMHB4J1xufSlcblxuY29uc3QgQXJyb3dEb3duID0gYWRvbmlzLmRpdih7XG4gIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gLjVzJyxcbiAgdHJhbnNmb3JtOiAncm90YXRlKDBkZWcpJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHJpZ2h0OiAnNHB4JyxcbiAgYm90dG9tOiAnMTBweCcsXG4gIGJvcmRlckxlZnQ6ICc1cHggc29saWQgdHJhbnNwYXJlbnQnLFxuICBib3JkZXJSaWdodDogJzVweCBzb2xpZCB0cmFuc3BhcmVudCcsXG4gIGJvcmRlclRvcDogdGhlbWUgPT4gYDVweCBzb2xpZCAke3RoZW1lLmRpbW1lZFRleHRDb2xvcn1gXG59LCB7XG4gIHR1cm5VcDoge1xuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgtOTBkZWcpJ1xuICB9XG59KVxuXG5jb25zdCBEcm9wZG93bkl0ZW0gPSBhZG9uaXMubGkoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLnRleHRDb2xvcixcbiAgZm9udFNpemU6ICcxNHB4JyxcbiAgbGluZUhlaWdodDogJzMycHgnLFxuICBwYWRkaW5nOiAnMCAxNnB4JyxcbiAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNCknXG4gIH1cbn0sIHtcbiAgc2VsZWN0ZWQ6IHtcbiAgICAnJjpiZWZvcmUnOiB7XG4gICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzJweCcsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lID0+IHRoZW1lLmhpZ2hsaWdodENvbG9yLFxuICAgICAgYm94U2hhZG93OiAnMCAxcHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjY1KSdcbiAgICB9XG4gIH1cbn0pXG5cbkRyb3Bkb3duQ29tcG9uZW50Lkl0ZW0gPSBEcm9wZG93bkl0ZW1cblxuRHJvcGRvd25Db21wb25lbnQuUm9vdEVsZW1lbnQgPSBhZG9uaXMoSW5wdXQpLmlucHV0KHt9KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9jb21wb25lbnRzL3NoYXJlZC9mb3Jtcy9kcm9wZG93bi1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIEJhc2VDb21wb25lbnQsIGFkb25pcyB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgeyBJbnB1dCBhcyBJbnB1dFN0eWxlIH0gZnJvbSAnLi4vc3R5bGVzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0SW5wdXRDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25LZXlEb3duJyxcbiAgICAgICdfb25JbnB1dEJsdXInLFxuICAgICAgJ19vbklucHV0Q2hhbmdlJ1xuICAgIClcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB2YWx1ZTogJydcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogSW52b2tlZCBiZWZvcmUgcmVuZGVyaW5nIHdoZW4gbmV3IHByb3BzIG9yIHN0YXRlIGFyZSBiZWluZyByZWNlaXZlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZXh0U3RhdGVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlIHx8XG4gICAgICB0aGlzLnByb3BzLmRpc2FibGVkICE9PSBuZXh0UHJvcHMuZGlzYWJsZWQgfHxcbiAgICAgIHRoaXMuc3RhdGUudmFsdWUgIT09IG5leHRTdGF0ZS52YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIGEgbW91bnRlZCBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzXG4gICAqIEBwYXJhbSAge09iamVjdH0gbmV4dFByb3BzXG4gICAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IG5leHRQcm9wcy52YWx1ZSB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXRcbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbklucHV0Q2hhbmdlIChlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBlLnRhcmdldC52YWx1ZSB9KVxuXG4gICAgdGhpcy5wcm9wcy5vbkxpdmVDaGFuZ2UgJiZcbiAgICAgIHRoaXMucHJvcHMub25MaXZlQ2hhbmdlKGUpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBpbnB1dCBsb3NlcyBmb2N1c1xuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25JbnB1dEJsdXIgKGUpIHtcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGUpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIHJlbGVhc2VzIGEga2V5Ym9hcmQga2V5XG4gICAqIEBwYXJhbSAge0V2ZW50fSBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uS2V5RG93biAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMTMgfHwgLy8gRU5URVJcbiAgICAgICAgZXZlbnQua2V5Q29kZSA9PT0gMjcpIHsgLy8gRVNDXG4gICAgICB0aGlzLl9pbnB1dC5ibHVyKClcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vbktleURvd24gJiZcbiAgICAgIHRoaXMucHJvcHMub25LZXlEb3duKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBVQkxJQyBBUElcblxuICAvKipcbiAgICogRm9jdXNlcyB0aGlzIGlucHV0XG4gICAqL1xuICBmb2N1cyAoKSB7XG4gICAgdGhpcy5faW5wdXQuZm9jdXMoKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0eWxlIG9iamVjdCBmb3IgdGhlIGlucHV0XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRJbnB1dFN0eWxlICgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgUm9vdEVsZW1lbnQgfSA9IHRoaXMuY29uc3RydWN0b3JcbiAgICByZXR1cm4gKDxSb290RWxlbWVudFxuICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9XG4gICAgICBwbGFjZWhvbGRlcj17dGhpcy5wcm9wcy5wbGFjZWhvbGRlcn1cbiAgICAgIG9uQ2hhbmdlPXt0aGlzLl9vbklucHV0Q2hhbmdlfVxuICAgICAgb25CbHVyPXt0aGlzLl9vbklucHV0Qmx1cn1cbiAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2lucHV0ID0gZWwgfX1cbiAgICAgIG9uS2V5RG93bj17dGhpcy5fb25LZXlEb3dufVxuICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lfVxuICAgICAgc3R5bGVzPXt0aGlzLnByb3BzLnN0eWxlc31cbiAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9XG4gICAgICBzdHlsZT17dGhpcy5fZ2V0SW5wdXRTdHlsZSgpfVxuICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IC8+KVxuICB9XG59XG5cblRleHRJbnB1dENvbXBvbmVudC5Sb290RWxlbWVudCA9IGFkb25pcyhJbnB1dFN0eWxlKS5pbnB1dCh7fSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvY29tcG9uZW50cy9zaGFyZWQvZm9ybXMvdGV4dC1pbnB1dC1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuaW1wb3J0IHsgQmFzZUNvbXBvbmVudCwgYWRvbmlzLCBSZWFjdCB9IGZyb20gJ2dsb2JhbHMnXG5pbXBvcnQgRmlsZUxvYWRlciBmcm9tICdzaGFyZWQvbG9hZGVycy9maWxlLWxvYWRlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52aXNpYmxlVXBsb2FkQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uTmV3RmlsZSdcbiAgICApXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgdGhpcy5fZmlsZUxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKHRoaXMuX2ZpbGVJbnB1dClcbiAgICB0aGlzLl9maWxlTG9hZGVyLm9uKCdmaWxlJywgdGhpcy5fb25OZXdGaWxlKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgdW5tb3VudGVkXG4gICAqL1xuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgdGhpcy5fZmlsZUxvYWRlci5vZmYoJ2ZpbGUnLCB0aGlzLl9vbk5ld0ZpbGUpXG4gICAgdGhpcy5fZmlsZUxvYWRlci5kaXNwb3NlKClcbiAgICB0aGlzLl9maWxlTG9hZGVyID0gbnVsbFxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIEZpbGVMb2FkZXIgZW1pdHMgYSBuZXcgZmlsZVxuICAgKiBAcGFyYW0gIHtGaWxlfSBmaWxlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25OZXdGaWxlIChmaWxlKSB7XG4gICAgdGhpcy5wcm9wcy5vbk5ld0ZpbGUgJiZcbiAgICAgIHRoaXMucHJvcHMub25OZXdGaWxlKGZpbGUpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQVUJMSUMgQVBJXG5cbiAgLyoqXG4gICAqIFB1YmxpYyBtZXRob2QgZm9yIG9wZW5pbmcgdGhlIGZpbGUgbG9hZGVyXG4gICAqL1xuICBvcGVuICgpIHtcbiAgICB0aGlzLl9maWxlTG9hZGVyLm9wZW4oKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuICg8SGlkZGVuRmlsZUlucHV0XG4gICAgICB0eXBlPSdmaWxlJ1xuICAgICAgYWNjZXB0PSdpbWFnZS8qJ1xuICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fZmlsZUlucHV0ID0gZWwgfX0gLz4pXG4gIH1cbn1cblxuY29uc3QgSGlkZGVuRmlsZUlucHV0ID0gYWRvbmlzLmlucHV0KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gIHdpZHRoOiAwLFxuICBoZWlnaHQ6IDBcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2hhcmVkL2ludmlzaWJsZS11cGxvYWQtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZ2xvYmFscydcbmltcG9ydCBNb2RhbE1hbmFnZXIgZnJvbSAnc2hhcmVkL21hbmFnZXJzL21vZGFsLW1hbmFnZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbGVMb2FkZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvciAoaW5wdXQpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5faW5wdXQgPSBpbnB1dFxuICAgIHRoaXMuX29uRmlsZUNoYW5nZSA9IHRoaXMuX29uRmlsZUNoYW5nZS5iaW5kKHRoaXMpXG4gICAgdGhpcy5faW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5fb25GaWxlQ2hhbmdlKVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBmaWxlIGRpYWxvZ1xuICAgKi9cbiAgb3BlbiAoKSB7XG4gICAgdGhpcy5faW5wdXQudmFsdWUgPSBudWxsXG4gICAgdGhpcy5faW5wdXQuY2xpY2soKVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBmaWxlIGludG8gYW4gaW1hZ2VcbiAgICogQHBhcmFtICB7RmlsZX0gZmlsZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2hhbmRsZUZpbGUgKGZpbGUpIHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgd2luZG93LkZpbGVSZWFkZXIoKVxuICAgIHJlYWRlci5vbmxvYWQgPSAoKCkgPT4ge1xuICAgICAgcmV0dXJuIChlKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBlLnRhcmdldC5yZXN1bHRcbiAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKClcblxuICAgICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZW1pdCgnZmlsZScsIGltYWdlKVxuICAgICAgICB9KVxuXG4gICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZSA9PiB7XG4gICAgICAgICAgcmV0dXJuIE1vZGFsTWFuYWdlci5pbnN0YW5jZS5kaXNwbGF5RXJyb3IoXG4gICAgICAgICAgICB0aGlzLl90KCdlcnJvcnMudGl0bGUnKSxcbiAgICAgICAgICAgIHRoaXMuX3QoJ2Vycm9ycy5pbWFnZUxvYWRpbmdFcnJvci50ZXh0JylcbiAgICAgICAgICApXG4gICAgICAgIH0pXG5cbiAgICAgICAgaW1hZ2Uuc3JjID0gZGF0YVxuICAgICAgfVxuICAgIH0pKGZpbGUpXG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSBmaWxlIGlucHV0IHZhbHVlIGNoYW5nZXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkZpbGVDaGFuZ2UgKCkge1xuICAgIGNvbnN0IHsgZmlsZXMgfSA9IHRoaXMuX2lucHV0XG4gICAgaWYgKCFmaWxlcy5sZW5ndGgpIHJldHVyblxuXG4gICAgdGhpcy5faGFuZGxlRmlsZShmaWxlc1swXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwb3NlcyBhbGwgbGlzdGVuZXJzXG4gICAqL1xuICBkaXNwb3NlICgpIHtcbiAgICB0aGlzLl9pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLl9vbkZpbGVDaGFuZ2UpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvbW50L2MvRmlsZXMvUHJvamVjdHMvV29yay9JbWdMeS9wZXNkay1odG1sNS9zcmMvanMvc2hhcmVkL2xvYWRlcnMvZmlsZS1sb2FkZXIuanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOi8qKlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIEJhc2VDb21wb25lbnQgfSBmcm9tICdnbG9iYWxzJ1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzT3ZlcmxheUNvbnRyb2xDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgLyoqXG4gICAqIENhbmNlbHMgdGhlIHRvdWNoIGV2ZW50cyBzbyB0aGF0IHRoZSB1c2VyIGNhbid0IGRyYWcgdGhlIGl0ZW0gdXNpbmcgdGhlIG92ZXJsYXkgY29udHJvbHNcbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jYW5jZWxFdmVudCAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIF9vbkNsaWNrIChoYW5kbGVyLCBlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgaGFuZGxlcihlKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgYSBjb250cm9sIGl0ZW0uXG4gICAqIEBwYXJhbSAge1N0cmluZ30gaWNvbklkZW50aWZpZXIgVGhlIG5hbWUgb2YgdGhlIGNvcnJlc3BvbmRpbmcgaWNvblxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gb25DbGljayAgICAgIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgdXBvbiBjbGlja1xuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fSAgICAgICAgIFRoZSBpdGVtIGVsZW1lbnRcbiAgICovXG4gIF9yZW5kZXJDb250cm9sSXRlbSAoaWNvbklkZW50aWZpZXIsIG9uQ2xpY2spIHtcbiAgICBjb25zdCBpY29uUGF0aCA9IHRoaXMuX2dldEFzc2V0UGF0aChgZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jYW52YXMtb3ZlcmxheS1jb250cm9scy8ke2ljb25JZGVudGlmaWVyfS5wbmdgLCB0cnVlKVxuXG4gICAgY29uc3QgY2xpY2tIYW5kbGVyID0gZSA9PiB7IHRoaXMuX29uQ2xpY2sob25DbGljaywgZSkgfVxuXG4gICAgcmV0dXJuICg8Q29udHJvbEl0ZW1cbiAgICAgIHN0eWxlPXt7IGJhY2tncm91bmRJbWFnZTogYHVybCgke2ljb25QYXRofSlgIH19XG4gICAgICBvbkNsaWNrPXtjbGlja0hhbmRsZXJ9XG4gICAgICBvblRvdWNoRW5kPXtjbGlja0hhbmRsZXJ9XG4gICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWNhbnZhc092ZXJsYXlDb250cm9sSXRlbScgOiB1bmRlZmluZWQpfVxuICAgICAgZGF0YS1pZGVudGlmaWVyPXtpY29uSWRlbnRpZmllcn1cbiAgICAvPilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IHBvc2l0aW9uIH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuICg8Q2FudmFzT3ZlcmxheUNvbnRyb2xcbiAgICAgIHN0eWxlPXt7IGxlZnQ6IHBvc2l0aW9uLngsIHRvcDogcG9zaXRpb24ueSB9fVxuICAgICAgb25Nb3VzZURvd249e3RoaXMuX2NhbmNlbEV2ZW50fVxuICAgICAgb25Ub3VjaFN0YXJ0PXt0aGlzLl9jYW5jZWxFdmVudH1cbiAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtY2FudmFzT3ZlcmxheUNvbnRyb2wnIDogdW5kZWZpbmVkKX0+XG4gICAgICB7IHRoaXMucHJvcHMudGFrZVRvRnJvbnQgJiZcbiAgICAgICAgdGhpcy5fcmVuZGVyQ29udHJvbEl0ZW0oJ3RvLWZyb250JywgdGhpcy5wcm9wcy5vblRha2VUb0Zyb250KVxuICAgICAgfVxuICAgICAgeyB0aGlzLnByb3BzLmZsaXBIb3Jpem9udGFsbHkgJiZcbiAgICAgICAgdGhpcy5fcmVuZGVyQ29udHJvbEl0ZW0oJ2ZsaXAtaG9yaXpvbnRhbCcsIHRoaXMucHJvcHMub25GbGlwSG9yaXpvbnRhbGx5KVxuICAgICAgfVxuICAgICAgeyB0aGlzLnByb3BzLmR1cGxpY2F0ZSAmJlxuICAgICAgICB0aGlzLl9yZW5kZXJDb250cm9sSXRlbSgnZHVwbGljYXRlJywgdGhpcy5wcm9wcy5vbkR1cGxpY2F0ZSlcbiAgICAgIH1cbiAgICAgIHsgdGhpcy5wcm9wcy5kZWxldGUgJiZcbiAgICAgICAgdGhpcy5fcmVuZGVyQ29udHJvbEl0ZW0oJ2RlbGV0ZScsIHRoaXMucHJvcHMub25EZWxldGUpXG4gICAgICB9XG4gICAgPC9DYW52YXNPdmVybGF5Q29udHJvbD4pXG4gIH1cbn1cblxuY29uc3QgQ2FudmFzT3ZlcmxheUNvbnRyb2wgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknLFxuICBkaXNwbGF5OiAnYmxvY2snLFxuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS5zZWNvbmRhcnlDb250cm9sc0JhY2tncm91bmRDb2xvcixcbiAgcGFkZGluZzogJzhweCcsXG4gIGJvcmRlclJhZGl1czogJzJweCcsXG4gIGJveFNoYWRvdzogJzAgMnB4IDJweCAwIHJnYmEoMCwgMCwgMCwgMC4zMCksIDAgNHB4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4zMCksIDAgNnB4IDhweCAwIHJnYmEoMCwgMCwgMCwgMC4zMCksIDAgOHB4IDEwcHggMCByZ2JhKDAsIDAsIDAsIDAuMzApJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gIHpJbmRleDogdGhlbWUgPT4gdGhlbWUuekluZGV4KCdjb250cm9sc092ZXJsYXlzJykgKyAyXG59KVxuXG5jb25zdCBDb250cm9sSXRlbSA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgaGVpZ2h0OiAnMjRweCcsXG4gIHdpZHRoOiAnMjRweCcsXG4gIG1hcmdpblJpZ2h0OiAnOHB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGJhY2tncm91bmRTaXplOiAnY29udGFpbicsXG5cbiAgJzpsYXN0LWNoaWxkJzoge1xuICAgIG1hcmdpblJpZ2h0OiAwXG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb3JlL2NvbXBvbmVudHMvc2NyZWVucy9lZGl0b3IvY29udHJvbHMvc2hhcmVkL2NhbnZhcy1vdmVybGF5LWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCJtb2R1bGUuZXhwb3J0cyA9IHtcInBlc2RrXCI6e1wiY29tbW9uXCI6e1widGl0bGVcIjp7XCJlcnJvclwiOlwiRmVobGVyXCJ9LFwidGV4dFwiOntcImxvYWRpbmdcIjpcIkxhZGUuLi5cIn0sXCJidXR0b25cIjp7XCJjYW5jZWxcIjpcIkFiYnJlY2hlblwifX0sXCJlZGl0b3JcIjp7XCJidXR0b25cIjp7XCJleHBvcnRcIjpcIkV4cG9ydGllcmVuXCIsXCJuZXdJbWFnZUNoYW5nZXNMb3N0V2FybmluZ1llc1wiOlwiSmFcIixcIm5ld0ltYWdlQ2hhbmdlc0xvc3RXYXJuaW5nTm9cIjpcIk5laW5cIixcImRpc2NhcmRDaGFuZ2VzV2FybmluZ0tlZXBcIjpcIsOEbmRlcnVuZ2VuIGJlaWJlaGFsdGVuXCIsXCJkaXNjYXJkQ2hhbmdlc1dhcm5pbmdEaXNjYXJkXCI6XCLDhG5kZXJ1bmdlbiB2ZXJ3ZXJmZW5cIn0sXCJ0aXRsZVwiOntcIm5ld0ltYWdlQ2hhbmdlc0xvc3RXYXJuaW5nXCI6XCJOZXVlcyBCaWxkXCIsXCJpbWFnZVJlc2l6ZWRXYXJuaW5nX21heE1lZ2FQaXhlbHNcIjpcIkJpbGQgdmVya2xlaW5lcnRcIixcImltYWdlUmVzaXplZFdhcm5pbmdfbWF4RGltZW5zaW9uc1wiOlwiQmlsZCB2ZXJrbGVpbmVydFwiLFwiZm9udExvYWRpbmdFcnJvclwiOlwiTGFkZW4gdm9uIFNjaHJpZnRhcnRlbiBpc3QgZmVobGdlc2NobGFnZW4uXCIsXCJkaXNjYXJkQ2hhbmdlc1dhcm5pbmdcIjpcIsOEbmRlcnVuZ2VuIHZlcndlcmZlbj9cIn0sXCJ0ZXh0XCI6e1wibmV3SW1hZ2VDaGFuZ2VzTG9zdFdhcm5pbmdcIjpcIkFsbGUgbmljaHQgZ2VzcGVpY2hlcnRlbiDDhG5kZXJ1bmdlbiBnZWhlbiB2ZXJsb3Jlbi4gRm9ydGZhaHJlbj9cIixcImltYWdlUmVzaXplZFdhcm5pbmdfbWF4TWVnYVBpeGVsc1wiOlwiRGEgZGVpbiBCaWxkIGRpZSBtYXhpbWFsZSBHcsO2w59lIHZvbiAke21heE1lZ2FQaXhlbHN9IE1lZ2FwaXhlbG4gw7xiZXJzY2hyZWl0ZXQsIHd1cmRlIGVzIGF1ZiAke3dpZHRofXgke2hlaWdodH0gUGl4ZWwgdmVya2xlaW5lcnQuXCIsXCJpbWFnZVJlc2l6ZWRXYXJuaW5nX21heERpbWVuc2lvbnNcIjpcIkF1ZmdydW5kIHZvbiBIYXJkd2FyZS1CZXNjaHLDpG5rdW5nZW4gd3VyZGUgZGFzIEJpbGQgYXVmICR7d2lkdGh9eCR7aGVpZ2h0fSBQaXhlbCB2ZXJrbGVpbmVydC5cIixcInJlbmRlcmluZ0Vycm9yXCI6XCJCZWltIFJlbmRlcm4gZGVzIEJpbGRlcyBpc3QgZWluIEZlaGxlciBhdWZnZXRyZXRlbi5cIixcImV4cG9ydGluZ1wiOlwiRXhwb3J0aWVyZS4uLlwiLFwicmVzaXppbmdcIjpcIkJpbGQgd2lyZCBiZWFyYmVpdGV0Li4uXCIsXCJsb2FkaW5nRm9udHNcIjpcIkxhZGUgU2NocmlmdGFydGVuLi4uXCIsXCJmb250TG9hZGluZ0Vycm9yXCI6XCJEaWUgZm9sZ2VuZGVuIFNjaHJpZnRhcnRlbiBrb25udGVuIG5pY2h0IGdlbGFkZW4gd2VyZGVuOiAke2ZvbnRzfS5cIixcIndlYmNhbVVuYXZhaWxhYmxlRXJyb3JcIjpcIldlYmNhbS1CaWxkIGthbm4gbmljaHQgZGFyZ2VzdGVsbHQgd2VyZGVuLiAoRmVobGVyOiAke2Vycm9yfSlcIixcImludmFsaWRGaWxlVHlwZUVycm9yXCI6XCJEZXIgRGF0ZWl0eXAgJHtmaWxlVHlwZX0gd2lyZCBuaWNodCB1bnRlcnN0w7x0enQuXCIsXCJpbWFnZUxvYWRpbmdFcnJvclwiOlwiTGFkZW4gZGVzIEJpbGRlcyBmZWhsZ2VzY2hsYWdlbi4gRGllcyBrYW5uIHZlcnNjaGllZGVuZSBHcsO8bmRlIGhhYmVuLCBiZWlzcGllbHN3ZWlzZSBrYW5uIGRpZSBEYXRlaSBkZWZla3Qgc2VpbiBvZGVyIGRlciBEYXRlaXR5cCB3aXJkIG5pY2h0IHVudGVyc3TDvHR6dC5cIixcImRpc2NhcmRDaGFuZ2VzV2FybmluZ1wiOlwiU2luZCBTaWUgc2ljaGVyLCBkYXNzIFNpZSBkaWUgw4RuZGVydW5nZW4gdmVyd2VyZmVuIHdvbGxlbj9cIn19LFwibGlicmFyeVwiOntcInRpdGxlXCI6e1wibmFtZVwiOlwiQmlibGlvdGhla1wifSxcImJ1dHRvblwiOntcImZpbGVEcm9wWm9uZVwiOlwiRGF0ZWkgaGllciBoaW4gemllaGVuIG9kZXIga2xpY2tlbiB6dW0gRHVyY2hzdWNoZW4uXCIsXCJmaWxlRHJvcFpvbmVIb3ZlcmVkXCI6XCJadW0gSG9jaGxhZGVuIGxvc2xhc3Nlbi5cIn0sXCJwbGFjZWhvbGRlclwiOntcInNlYXJjaFwiOlwiQmlibGlvdGhlayBkdXJjaHN1Y2hlblwifSxcInRleHRcIjp7XCJub1Jlc3VsdHNcIjpcIktlaW5lIEVyZ2Vibmlzc2VcIn19LFwidHJhbnNmb3JtXCI6e1widGl0bGVcIjp7XCJuYW1lXCI6XCJadXNjaG5laWRlblwifSxcImJ1dHRvblwiOntcInJlc2V0XCI6XCJadXLDvGNrc2V0emVuXCJ9LFwiYXNzZXRcIjp7XCJpbWdseV90cmFuc2Zvcm1zX2NvbW1vblwiOntcIm5hbWVcIjpcIlN0YW5kYXJkXCIsXCJhc3NldFwiOntcImltZ2x5X3RyYW5zZm9ybV9jb21tb25fY3VzdG9tXCI6XCJGcmVpXCIsXCJpbWdseV90cmFuc2Zvcm1fY29tbW9uX3NxdWFyZVwiOlwiUXVhZHJhdGlzY2hcIixcImltZ2x5X3RyYW5zZm9ybV9jb21tb25fNC0zXCI6XCI0OjNcIixcImltZ2x5X3RyYW5zZm9ybV9jb21tb25fMTYtOVwiOlwiMTY6OVwifX0sXCJpbWdseV90cmFuc2Zvcm1zX2ZhY2Vib29rXCI6e1wibmFtZVwiOlwiRmFjZWJvb2tcIixcImFzc2V0XCI6e1wiaW1nbHlfdHJhbnNmb3JtX2ZhY2Vib29rX2FkXCI6XCJBZFwiLFwiaW1nbHlfdHJhbnNmb3JtX2ZhY2Vib29rX3Bvc3RcIjpcIlBvc3RcIixcImltZ2x5X3RyYW5zZm9ybV9mYWNlYm9va19jb3ZlclwiOlwiQ292ZXJcIixcImltZ2x5X3RyYW5zZm9ybV9mYWNlYm9va19wcm9maWxlXCI6XCJQcm9maWxlIFBpY1wifX19LFwicGxhY2Vob2xkZXJcIjp7XCJ3aWR0aFwiOlwiYlwiLFwiaGVpZ2h0XCI6XCJoXCJ9fSxcImZpbHRlclwiOntcImFzc2V0XCI6e1wiaWRlbnRpdHlcIjpcIktlaW4gRmlsdGVyXCIsXCJpbWdseV9sdXRfY2Vsc2l1c1wiOlwiQ2Vsc2l1c1wiLFwiaW1nbHlfbHV0X2NoZXN0XCI6XCJDaGVzdFwiLFwiaW1nbHlfbHV0X2ZpeGllXCI6XCJGaXhpZVwiLFwiaW1nbHlfbHV0X2ZyaWRnZVwiOlwiRnJpZGdlXCIsXCJpbWdseV9sdXRfZnJvbnRcIjpcIkZyb250XCIsXCJpbWdseV9sdXRfazJcIjpcIksyXCIsXCJpbWdseV9sdXRfbWVsbG93XCI6XCJNZWxsb3dcIixcImltZ2x5X2x1dF9zaW5cIjpcIlNpblwiLFwiaW1nbHlfbHV0X3RleGFzXCI6XCJUZXhhc1wiLFwiaW1nbHlfbHV0X2FkMTkyMFwiOlwiMTkyMCBBLkQuXCIsXCJpbWdseV9sdXRfYW5jaWVudFwiOlwiQW5jaWVudFwiLFwiaW1nbHlfbHV0X2JsZWFjaGVkXCI6XCJCbGVhY2hlZFwiLFwiaW1nbHlfbHV0X2JsZWFjaGVkYmx1ZVwiOlwiQmxlYWNoZWQgQmx1ZVwiLFwiaW1nbHlfbHV0X2JsdWVzXCI6XCJCbHVlc1wiLFwiaW1nbHlfbHV0X2JsdWVzaGFkb3dzXCI6XCJCbHVlIFNoYWRvd3NcIixcImltZ2x5X2x1dF9icmVlemVcIjpcIkJyZWV6ZVwiLFwiaW1nbHlfbHV0X2J3XCI6XCJCICYgV1wiLFwiaW1nbHlfbHV0X2NsYXNzaWNcIjpcIkNsYXNzaWNcIixcImltZ2x5X2x1dF9jb2xvcmZ1bFwiOlwiQ29sb3JmdWxcIixcImltZ2x5X2x1dF9jb29sXCI6XCJDb29sXCIsXCJpbWdseV9sdXRfY290dG9uY2FuZHlcIjpcIkNvdHRvbiBDYW5keVwiLFwiaW1nbHlfbHV0X2NyZWFteVwiOlwiQ3JlYW15XCIsXCJpbWdseV9sdXRfZWlnaHRpZXNcIjpcIkVpZ2h0aWVzXCIsXCJpbWdseV9sdXRfZWxkZXJcIjpcIkVsZGVyXCIsXCJpbWdseV9sdXRfZXZlbmluZ1wiOlwiRXZlbmluZ1wiLFwiaW1nbHlfbHV0X2ZhbGxcIjpcIkZhbGxcIixcImltZ2x5X2x1dF9mb29kXCI6XCJGb29kXCIsXCJpbWdseV9sdXRfZ2xhbVwiOlwiR2xhbVwiLFwiaW1nbHlfbHV0X2dvYmJsaW5cIjpcIkdvYmJsaW5cIixcImltZ2x5X2x1dF9oaWdoY2FyYlwiOlwiSGlnaCBDYXJiXCIsXCJpbWdseV9sdXRfaGlnaGNvbnRyYXN0XCI6XCJIaWdoIENvbnRyYXN0XCIsXCJpbWdseV9sdXRfazFcIjpcIksxXCIsXCJpbWdseV9sdXRfazZcIjpcIks2XCIsXCJpbWdseV9sdXRfa2R5bmFtaWNcIjpcIktEeW5hbWljXCIsXCJpbWdseV9sdXRfa2VlblwiOlwiS2VlblwiLFwiaW1nbHlfbHV0X2xlbmluXCI6XCJMZW5pblwiLFwiaW1nbHlfbHV0X2xpdGhvXCI6XCJMaXRob1wiLFwiaW1nbHlfbHV0X2xvbW8xMDBcIjpcIkxvbW8gMTAwXCIsXCJpbWdseV9sdXRfbHVjaWRcIjpcIkx1Y2lkXCIsXCJpbWdseV9sdXRfbmVhdFwiOlwiTmVhdFwiLFwiaW1nbHlfbHV0X25vZ3JlZW5cIjpcIk5vIEdyZWVuXCIsXCJpbWdseV9sdXRfb3JjaGlkXCI6XCJPcmNoaWRcIixcImltZ2x5X2x1dF9wYWxlXCI6XCJQYWxlXCIsXCJpbWdseV9sdXRfcGl0Y2hlZFwiOlwiUGl0Y2hlZFwiLFwiaW1nbHlfbHV0X3BsYXRlXCI6XCJQbGF0ZVwiLFwiaW1nbHlfbHV0X3BvbGE2NjlcIjpcIlBvbGEgNjY5XCIsXCJpbWdseV9sdXRfcG9sYXN4XCI6XCJQb2xhIFNYXCIsXCJpbWdseV9sdXRfcHJvNDAwXCI6XCJQcm8gNDAwXCIsXCJpbWdseV9sdXRfcXVvemlcIjpcIlF1b3ppXCIsXCJpbWdseV9sdXRfc2VwaWFoaWdoXCI6XCJTZXBpYSBIaWdoXCIsXCJpbWdseV9sdXRfc2V0dGxlZFwiOlwiU2V0dGxlZFwiLFwiaW1nbHlfbHV0X3NldmVudGllc1wiOlwiU2V2ZW50aWVzXCIsXCJpbWdseV9sdXRfc29mdFwiOlwiU29mdFwiLFwiaW1nbHlfbHV0X3N0ZWVsXCI6XCJTdGVlbFwiLFwiaW1nbHlfbHV0X3N1bW1lclwiOlwiU3VtbWVyXCIsXCJpbWdseV9sdXRfc3Vuc2V0XCI6XCJTdW5zZXRcIixcImltZ2x5X2x1dF90ZW5kZXJcIjpcIlRlbmRlclwiLFwiaW1nbHlfbHV0X3R3aWxpZ2h0XCI6XCJUd2lsaWdodFwiLFwiaW1nbHlfbHV0X3dpbnRlclwiOlwiV2ludGVyXCIsXCJpbWdseV9sdXRfeDQwMFwiOlwiWDQwMFwifSxcInRpdGxlXCI6e1wibmFtZVwiOlwiRmlsdGVyc1wifX0sXCJhZGp1c3RtZW50c1wiOntcImJ1dHRvblwiOntcInJlc2V0XCI6XCJadXLDvGNrc2V0emVuXCJ9LFwidGl0bGVcIjp7XCJuYW1lXCI6XCJLb3JyZWt0dXJlblwiLFwiYmFzaWNzXCI6XCJHcnVuZGxhZ2VuXCIsXCJyZWZpbmVtZW50c1wiOlwiRmVpbmhlaXRlblwifSxcInRleHRcIjp7XCJicmlnaHRuZXNzXCI6XCJIZWxsaWdrZWl0XCIsXCJzYXR1cmF0aW9uXCI6XCJTw6R0dGlndW5nXCIsXCJjb250cmFzdFwiOlwiS29udHJhc3RcIixcImdhbW1hXCI6XCJHYW1tYVwiLFwiY2xhcml0eVwiOlwiS2xhcmhlaXRcIixcImV4cG9zdXJlXCI6XCJCZWxpY2h0dW5nXCIsXCJzaGFkb3dzXCI6XCJTY2hhdHRlblwiLFwiaGlnaGxpZ2h0c1wiOlwiTGljaHRlclwifX0sXCJmb2N1c1wiOntcInRpdGxlXCI6e1wibmFtZVwiOlwiV2VpY2h6ZWljaG5lblwifSxcImJ1dHRvblwiOntcIm5vbmVcIjpcIk9yaWdpbmFsXCIsXCJyYWRpYWxcIjpcIktyZWlzZsO2cm1pZ1wiLFwibWlycm9yZWRcIjpcIkdlc3BpZWdlbHRcIixcImxpbmVhclwiOlwiTGluZWFyXCIsXCJnYXVzc2lhblwiOlwiR2F1w59zY2hcIn19LFwidGV4dFwiOntcInRpdGxlXCI6e1wibmFtZVwiOlwiVGV4dFwiLFwiZm9udFwiOlwiU2NocmlmdGFydFwiLFwic2l6ZVwiOlwiR3LDtsOfZVwiLFwic3BhY2luZ1wiOlwiQWJzdGFuZFwiLFwibGluZVwiOlwiWmVpbGVcIixcImJhY2tncm91bmRcIjpcIkhpbnRlcmdydW5kXCJ9LFwicGxhY2Vob2xkZXJcIjp7XCJkZWZhdWx0VGV4dFwiOlwiRG9wcGVsa2xpY2sgenVtIEJlYXJiZWl0ZW4hXCJ9LFwiYnV0dG9uXCI6e1wibmV3XCI6XCJOZXVlciBUZXh0XCJ9fSxcInRleHRkZXNpZ25cIjp7XCJ0aXRsZVwiOntcIm5hbWVcIjpcIlRleHQgRGVzaWduXCJ9LFwiYnV0dG9uXCI6e1wiaW52ZXJ0XCI6XCJUZXh0IGFscyBNYXNrZVwifX0sXCJzdGlja2VyXCI6e1widGl0bGVcIjp7XCJuYW1lXCI6XCJTdGlja2VyXCIsXCJvcGFjaXR5XCI6XCJUcmFuc3BhcmVuelwifSxcInRleHRcIjp7XCJzdGlja2VyTG9hZGluZ0Vycm9yXCI6XCJMYWRlbiBkZXMgU3RpY2tlcnMgJHtwYXRofSBmZWhsZ2VzY2hsYWdlbi5cIn0sXCJidXR0b25cIjp7XCJyZXBsYWNlXCI6XCJFcnNldHplblwiLFwibmV3XCI6XCJOZXVlciBTdGlja2VyXCIsXCJmaWxsXCI6XCJFaW5mw6RyYmVuXCJ9LFwiYXNzZXRcIjp7XCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc1wiOlwiRW1vdGljb25zXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbGllblwiOlwiQWxpZW5cIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FuZ2VsXCI6XCJBbmdlbFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW5ncnlcIjpcIkFuZ3J5XCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbnhpb3VzXCI6XCJBbnhpb3VzXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19hc2xlZXBcIjpcIkFzbGVlcFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYXR0ZW50aW9uXCI6XCJBdHRlbnRpb25cIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JhYnlfY2hpY2tlblwiOlwiQmFieSBDaGlja2VuXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19iYXRtYW5cIjpcIkJhdG1hblwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmVlclwiOlwiQmVlclwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmxhY2tcIjpcIkJsYWNrXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19ibHVlXCI6XCJCbHVlXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19ibHVzaFwiOlwiQmx1c2hcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JveGVyXCI6XCJCb3hlclwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYnVzaW5lc3NcIjpcIkJ1c2luZXNzXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19jaGlja2VuXCI6XCJDaGlja2VuXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19jb29sXCI6XCJDb29sXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19jcnlcIjpcIkNyeVwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZGVjZWFzZWRcIjpcIkRlY2Vhc2VkXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19kZXZpbFwiOlwiRGV2aWxcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2R1Y2tmYWNlXCI6XCJEdWNrZmFjZVwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZnVyaW91c1wiOlwiRnVyaW91c1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZ3JpblwiOlwiR3JpblwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZ3VpdGFyXCI6XCJHdWl0YXJcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hhcnJ5X3BvdHRlclwiOlwiSGFycnkgUG90dGVyXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19oaXBwaWVcIjpcIkhpcHBpZVwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGl0bWFuXCI6XCJIaXRtYW5cIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2h1bW91cm91c1wiOlwiSHVtb3Vyb3VzXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19pZGVhXCI6XCJJZGVhXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19pbXBhdGllbnRcIjpcIkltcGF0aWVudFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfa2lzc1wiOlwiS2lzc1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfa2lzc2VzXCI6XCJLaXNzZXNcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2xhdWdoXCI6XCJMYXVnaFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbG91ZF9jcnlcIjpcIkxvdWQgQ3J5XCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19sb3ZpbmdcIjpcIkxvdmluZ1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbWFza2VkXCI6XCJNYXNrZWRcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX211c2ljXCI6XCJNdXNpY1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmVyZFwiOlwiTmVyZFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmluamFcIjpcIk5pbmphXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19ub3Rfc3BlYWtpbmdfdG9feW91XCI6XCJOb3Qgc3BlYWtpbmcgdG8geW91XCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19waWdcIjpcIlBpZ1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcHVtcGtpblwiOlwiUHVtcGtpblwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcXVlc3Rpb25cIjpcIlF1ZXN0aW9uXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19yYWJiaXRcIjpcIlJhYmJpdFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2FkXCI6XCJTYWRcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NpY2tcIjpcIlNpY2tcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NrYXRlYm9hcmRcIjpcIlNrYXRlYm9hcmRcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NrdWxsXCI6XCJTa3VsbFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2xlZXB5XCI6XCJTbGVlcHlcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NtaWxlXCI6XCJTbWlsZVwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc21va2luZ1wiOlwiU21va2luZ1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc29iYmluZ1wiOlwiU29iYmluZ1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3RhclwiOlwiU3RhclwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3RlYW1pbmdfZnVyaW91c1wiOlwiU3RlYW1pbmcgRnVyaW91c1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3VuYmF0aGluZ1wiOlwiU3VuYmF0aGluZ1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfdGlyZWRcIjpcIlRpcmVkXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc190b25ndWVfb3V0X3dpbmtcIjpcIlRvbmd1ZSBvdXQgd2lua1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2F2ZVwiOlwiV2F2ZVwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2lkZV9ncmluXCI6XCJXaWRlIEdyaW5cIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dpbmtcIjpcIldpbmtcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dyZXN0bGVyXCI6XCJXcmVzdGxlclwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNcIjpcIlNoYXBlc1wiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYXJyb3dfMDJcIjpcIkFycm93IDFcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2Fycm93XzAzXCI6XCJBcnJvdyAyXCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wMVwiOlwiQmFkZ2UgMVwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTFcIjpcIkJhZGdlIDVcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzEyXCI6XCJCYWRnZSA2XCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xM1wiOlwiQmFkZ2UgN1wiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTVcIjpcIkJhZGdlIDhcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE4XCI6XCJCYWRnZSA5XCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xOVwiOlwiQmFkZ2UgMTBcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzIwXCI6XCJCYWRnZSAxMVwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMjhcIjpcIkJhZGdlIDEyXCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8zMlwiOlwiQmFkZ2UgMTNcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzM1XCI6XCJCYWRnZSAxNFwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMzZcIjpcIkJhZGdlIDE1XCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wNFwiOlwiQmFkZ2UgMlwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDZcIjpcIkJhZGdlIDNcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA4XCI6XCJCYWRnZSA0XCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wMVwiOlwiU3ByYXkgMVwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfc3ByYXlfMDNcIjpcIlNwcmF5IDJcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzA0XCI6XCJTcHJheSAzXCJ9fSxcImJydXNoXCI6e1widGl0bGVcIjp7XCJuYW1lXCI6XCJNYWxlblwiLFwid2lkdGhcIjpcIkRpY2tlXCIsXCJoYXJkbmVzc1wiOlwiSMOkcnRlXCIsXCJzZXR0aW5nc1wiOlwiUGluc2VsZWluc3RlbGx1bmdlblwifX0sXCJmcmFtZVwiOntcInRpdGxlXCI6e1wibmFtZVwiOlwiUmFobWVuXCIsXCJvcGFjaXR5XCI6XCJUcmFuc3BhcmVuelwiLFwid2lkdGhcIjpcIkRpY2tlXCJ9LFwiYnV0dG9uXCI6e1wiZmlsbFwiOlwiRWluZsOkcmJlblwiLFwicmVwbGFjZVwiOlwiRXJzZXR6ZW5cIixcIm5vbmVcIjpcIktlaW4gUmFobWVuXCJ9LFwiYXNzZXRcIjp7XCJpbWdseV9mcmFtZV9kaWFcIjpcIkRpYVwiLFwiaW1nbHlfZnJhbWVfYXJ0X2RlY29yXCI6XCJBcnQgRGVjb3JcIixcImltZ2x5X2ZyYW1lX2JsYWNrX3Bhc3NlcGFydG91dFwiOlwiQmxhY2sgUGFzc2VwYXJ0b3V0XCIsXCJpbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvd1wiOlwiTG93IFBvbHlcIixcImltZ2x5X2ZyYW1lX3dvb2RfcGFzc2VwYXJ0b3V0XCI6XCJXb29kIFBhc3NlcGFydG91dFwifX0sXCJvdmVybGF5XCI6e1widGl0bGVcIjp7XCJuYW1lXCI6XCJPdmVybGF5XCIsXCJibGVuZGluZ1wiOlwiTWlzY2h1bmdcIixcIm5vbmVcIjpcIktlaW5lXCIsXCJub3JtYWxcIjpcIk5vcm1hbFwiLFwib3ZlcmxheVwiOlwiT3ZlcmxheVwiLFwiaGFyZExpZ2h0XCI6XCJIYXJkIExpZ2h0XCIsXCJzb2Z0TGlnaHRcIjpcIlNvZnQgTGlnaHRcIixcIm11bHRpcGx5XCI6XCJNdWx0aXBseVwiLFwiZGFya2VuXCI6XCJEYXJrZW5cIixcImxpZ2h0ZW5cIjpcIkxpZ2h0ZW5cIixcInNjcmVlblwiOlwiU2NyZWVuXCIsXCJjb2xvckJ1cm5cIjpcIkNvbG9yIEJ1cm5cIn0sXCJidXR0b25cIjp7XCJub25lXCI6XCJLZWluIE92ZXJsYXlcIn0sXCJhc3NldFwiOntcImltZ2x5X292ZXJsYXlfYm9rZWhcIjpcIkJva2VoXCIsXCJpbWdseV9vdmVybGF5X2Nob3BcIjpcIkNob3BcIixcImltZ2x5X292ZXJsYXlfY2xvdWRzXCI6XCJDbG91ZHNcIixcImltZ2x5X292ZXJsYXlfZ29sZGVuXCI6XCJHb2xkZW5cIixcImltZ2x5X292ZXJsYXlfZ3JhaW5cIjpcIkdyYWluXCIsXCJpbWdseV9vdmVybGF5X2hlYXJ0c1wiOlwiSGVhcnRzXCIsXCJpbWdseV9vdmVybGF5X2xpZ2h0bGVhazFcIjpcIkxpZ2h0IExlYWsgMVwiLFwiaW1nbHlfb3ZlcmxheV9saWdodGxlYWsyXCI6XCJMaWdodCBMZWFrIDJcIixcImltZ2x5X292ZXJsYXlfbWV0YWxcIjpcIk1ldGFsXCIsXCJpbWdseV9vdmVybGF5X21vc2FpY1wiOlwiTW9zYWljXCIsXCJpbWdseV9vdmVybGF5X3BhaW50aW5nXCI6XCJQYWludGluZ1wiLFwiaW1nbHlfb3ZlcmxheV9wYXBlclwiOlwiUGFwZXJcIixcImltZ2x5X292ZXJsYXlfcmFpblwiOlwiUmFpblwiLFwiaW1nbHlfb3ZlcmxheV92aW50YWdlXCI6XCJWaW50YWdlXCIsXCJpbWdseV9vdmVybGF5X3dhbGwxXCI6XCJXYWxsXCIsXCJpbWdseV9vdmVybGF5X3dhbGwyXCI6XCJXYWxsIDJcIixcImltZ2x5X292ZXJsYXlfd29vZFwiOlwiV29vZFwifX19fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29yZS9sYW5nL2RlLmpzb25cbi8vIG1vZHVsZSBpZCA9IDI5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIm1vZHVsZS5leHBvcnRzID0ge1wicGVzZGtcIjp7XCJjb21tb25cIjp7XCJ0aXRsZVwiOntcImVycm9yXCI6XCJFcnJvclwifSxcInRleHRcIjp7XCJsb2FkaW5nXCI6XCJMb2FkaW5nLi4uXCJ9LFwiYnV0dG9uXCI6e1wiY2FuY2VsXCI6XCJDYW5jZWxcIn19LFwiZWRpdG9yXCI6e1wiYnV0dG9uXCI6e1wiZXhwb3J0XCI6XCJFeHBvcnRcIixcImNsb3NlXCI6XCJDbG9zZVwiLFwibmV3SW1hZ2VDaGFuZ2VzTG9zdFdhcm5pbmdZZXNcIjpcIlllc1wiLFwibmV3SW1hZ2VDaGFuZ2VzTG9zdFdhcm5pbmdOb1wiOlwiTm9cIixcImRpc2NhcmRDaGFuZ2VzV2FybmluZ0tlZXBcIjpcIktlZXAgY2hhbmdlc1wiLFwiZGlzY2FyZENoYW5nZXNXYXJuaW5nRGlzY2FyZFwiOlwiRGlzY2FyZCBjaGFuZ2VzXCJ9LFwidGl0bGVcIjp7XCJuZXdJbWFnZUNoYW5nZXNMb3N0V2FybmluZ1wiOlwiTmV3IEltYWdlXCIsXCJpbWFnZVJlc2l6ZWRXYXJuaW5nX21heE1lZ2FQaXhlbHNcIjpcIkltYWdlIHJlc2l6ZWRcIixcImltYWdlUmVzaXplZFdhcm5pbmdfbWF4RGltZW5zaW9uc1wiOlwiSW1hZ2UgcmVzaXplZFwiLFwiZm9udExvYWRpbmdFcnJvclwiOlwiRmFpbGVkIHRvIGxvYWQgZm9udFwiLFwiZGlzY2FyZENoYW5nZXNXYXJuaW5nXCI6XCJEaXNjYXJkIGNoYW5nZXM/XCJ9LFwidGV4dFwiOntcIm5ld0ltYWdlQ2hhbmdlc0xvc3RXYXJuaW5nXCI6XCJBbnkgdW5zYXZlZCBjaGFuZ2VzIHdpbGwgYmUgbG9zdC4gQ29udGludWU/XCIsXCJpbWFnZVJlc2l6ZWRXYXJuaW5nX21heE1lZ2FQaXhlbHNcIjpcIllvdXIgaW1hZ2UgZXhjZWVkcyB0aGUgbWF4aW11bSBzaXplIG9mICR7bWF4TWVnYVBpeGVsc30gbWVnYXBpeGVscyBhbmQgaGFzIHRoZXJlZm9yZSBiZWVuIHJlc2l6ZWQgdG8gJHt3aWR0aH14JHtoZWlnaHR9IHBpeGVscy5cIixcImltYWdlUmVzaXplZFdhcm5pbmdfbWF4RGltZW5zaW9uc1wiOlwiRHVlIHRvIGhhcmR3YXJlIGxpbWl0YXRpb25zIHlvdXIgaW1hZ2UgaGFzIGJlZW4gcmVzaXplZCB0byAke3dpZHRofXgke2hlaWdodH0gcGl4ZWxzLlwiLFwicmVuZGVyaW5nRXJyb3JcIjpcIkFuIGVycm9yIGhhcyBvY2N1cnJlZCB3aGlsZSByZW5kZXJpbmcgdGhlIGltYWdlLlwiLFwiZXhwb3J0aW5nXCI6XCJFeHBvcnRpbmcuLi5cIixcInJlc2l6aW5nXCI6XCJSZXNpemluZy4uLlwiLFwibG9hZGluZ0ZvbnRzXCI6XCJMb2FkaW5nIGZvbnRzLi4uXCIsXCJmb250TG9hZGluZ0Vycm9yXCI6XCJUaGUgZm9sbG93aW5nIGZvbnRzIGNvdWxkIG5vdCBiZSBsb2FkZWQ6ICR7Zm9udHN9LlwiLFwid2ViY2FtVW5hdmFpbGFibGVFcnJvclwiOlwiVW5hYmxlIHRvIGRpc3BsYXkgd2ViY2FtIGltYWdlIChFcnJvcjogJHtlcnJvcn0pXCIsXCJpbnZhbGlkRmlsZVR5cGVFcnJvclwiOlwiVGhlIGZpbGUgdHlwZSAke2ZpbGVUeXBlfSBpcyBub3Qgc3VwcG9ydGVkLlwiLFwiaW1hZ2VMb2FkaW5nRXJyb3JcIjpcIkZhaWxlZCB0byBsb2FkIGltYWdlLiBUaGlzIGNhbiBoYXZlIG11bHRpcGxlIHJlYXNvbnMsIGUuZy4gdGhlIGZpbGUgaXMgY29ycnVwdGVkIG9yIHRoZSBmaWxlIHR5cGUgaXMgbm90IHN1cHBvcnRlZC5cIixcImRpc2NhcmRDaGFuZ2VzV2FybmluZ1wiOlwiWW91IGhhdmUgdW5zYXZlZCBjaGFuZ2VzLiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGlzY2FyZCB0aGUgY2hhbmdlcz9cIn19LFwibGlicmFyeVwiOntcInRpdGxlXCI6e1wibmFtZVwiOlwiTGlicmFyeVwifSxcImJ1dHRvblwiOntcImZpbGVEcm9wWm9uZVwiOlwiRHJhZyBpbWFnZSBoZXJlIG9yIGNsaWNrIHRvIGJyb3dzZSBmb3Igb25lLlwiLFwiZmlsZURyb3Bab25lSG92ZXJlZFwiOlwiRHJvcCB0byB1cGxvYWQuXCJ9LFwicGxhY2Vob2xkZXJcIjp7XCJzZWFyY2hcIjpcIlNlYXJjaCBMaWJyYXJ5XCJ9LFwidGV4dFwiOntcIm5vUmVzdWx0c1wiOlwiTm8gcmVzdWx0c1wifX0sXCJ0cmFuc2Zvcm1cIjp7XCJ0aXRsZVwiOntcIm5hbWVcIjpcIlRyYW5zZm9ybVwifSxcImJ1dHRvblwiOntcInJlc2V0XCI6XCJSZXNldCBEZWZhdWx0XCJ9LFwiYXNzZXRcIjp7XCJpbWdseV90cmFuc2Zvcm1zX2NvbW1vblwiOntcIm5hbWVcIjpcIkNvbW1vbiBDcm9wc1wiLFwiYXNzZXRcIjp7XCJpbWdseV90cmFuc2Zvcm1fY29tbW9uX2N1c3RvbVwiOlwiQ3VzdG9tXCIsXCJpbWdseV90cmFuc2Zvcm1fY29tbW9uX3NxdWFyZVwiOlwiU3F1YXJlXCIsXCJpbWdseV90cmFuc2Zvcm1fY29tbW9uXzQtM1wiOlwiNDozXCIsXCJpbWdseV90cmFuc2Zvcm1fY29tbW9uXzE2LTlcIjpcIjE2OjlcIn19LFwiaW1nbHlfdHJhbnNmb3Jtc19mYWNlYm9va1wiOntcIm5hbWVcIjpcIkZhY2Vib29rXCIsXCJhc3NldFwiOntcImltZ2x5X3RyYW5zZm9ybV9mYWNlYm9va19hZFwiOlwiQWRcIixcImltZ2x5X3RyYW5zZm9ybV9mYWNlYm9va19wb3N0XCI6XCJQb3N0XCIsXCJpbWdseV90cmFuc2Zvcm1fZmFjZWJvb2tfY292ZXJcIjpcIkNvdmVyXCIsXCJpbWdseV90cmFuc2Zvcm1fZmFjZWJvb2tfcHJvZmlsZVwiOlwiUHJvZmlsZSBQaWNcIn19fSxcInBsYWNlaG9sZGVyXCI6e1wid2lkdGhcIjpcIndcIixcImhlaWdodFwiOlwiaFwifX0sXCJmaWx0ZXJcIjp7XCJhc3NldFwiOntcImlkZW50aXR5XCI6XCJOb25lXCIsXCJpbWdseV9sdXRfY2Vsc2l1c1wiOlwiQ2Vsc2l1c1wiLFwiaW1nbHlfbHV0X2NoZXN0XCI6XCJDaGVzdFwiLFwiaW1nbHlfbHV0X2ZpeGllXCI6XCJGaXhpZVwiLFwiaW1nbHlfbHV0X2ZyaWRnZVwiOlwiRnJpZGdlXCIsXCJpbWdseV9sdXRfZnJvbnRcIjpcIkZyb250XCIsXCJpbWdseV9sdXRfazJcIjpcIksyXCIsXCJpbWdseV9sdXRfbWVsbG93XCI6XCJNZWxsb3dcIixcImltZ2x5X2x1dF9zaW5cIjpcIlNpblwiLFwiaW1nbHlfbHV0X3RleGFzXCI6XCJUZXhhc1wiLFwiaW1nbHlfbHV0X2FkMTkyMFwiOlwiMTkyMCBBLkQuXCIsXCJpbWdseV9sdXRfYW5jaWVudFwiOlwiQW5jaWVudFwiLFwiaW1nbHlfbHV0X2JsZWFjaGVkXCI6XCJCbGVhY2hlZFwiLFwiaW1nbHlfbHV0X2JsZWFjaGVkYmx1ZVwiOlwiQmxlYWNoZWQgQmx1ZVwiLFwiaW1nbHlfbHV0X2JsdWVzXCI6XCJCbHVlc1wiLFwiaW1nbHlfbHV0X2JsdWVzaGFkb3dzXCI6XCJCbHVlIFNoYWRvd3NcIixcImltZ2x5X2x1dF9icmVlemVcIjpcIkJyZWV6ZVwiLFwiaW1nbHlfbHV0X2J3XCI6XCJCICYgV1wiLFwiaW1nbHlfbHV0X2NsYXNzaWNcIjpcIkNsYXNzaWNcIixcImltZ2x5X2x1dF9jb2xvcmZ1bFwiOlwiQ29sb3JmdWxcIixcImltZ2x5X2x1dF9jb29sXCI6XCJDb29sXCIsXCJpbWdseV9sdXRfY290dG9uY2FuZHlcIjpcIkNvdHRvbiBDYW5keVwiLFwiaW1nbHlfbHV0X2NyZWFteVwiOlwiQ3JlYW15XCIsXCJpbWdseV9sdXRfZWlnaHRpZXNcIjpcIkVpZ2h0aWVzXCIsXCJpbWdseV9sdXRfZWxkZXJcIjpcIkVsZGVyXCIsXCJpbWdseV9sdXRfZXZlbmluZ1wiOlwiRXZlbmluZ1wiLFwiaW1nbHlfbHV0X2ZhbGxcIjpcIkZhbGxcIixcImltZ2x5X2x1dF9mb29kXCI6XCJGb29kXCIsXCJpbWdseV9sdXRfZ2xhbVwiOlwiR2xhbVwiLFwiaW1nbHlfbHV0X2dvYmJsaW5cIjpcIkdvYmJsaW5cIixcImltZ2x5X2x1dF9oaWdoY2FyYlwiOlwiSGlnaCBDYXJiXCIsXCJpbWdseV9sdXRfaGlnaGNvbnRyYXN0XCI6XCJIaWdoIENvbnRyYXN0XCIsXCJpbWdseV9sdXRfazFcIjpcIksxXCIsXCJpbWdseV9sdXRfazZcIjpcIks2XCIsXCJpbWdseV9sdXRfa2R5bmFtaWNcIjpcIktEeW5hbWljXCIsXCJpbWdseV9sdXRfa2VlblwiOlwiS2VlblwiLFwiaW1nbHlfbHV0X2xlbmluXCI6XCJMZW5pblwiLFwiaW1nbHlfbHV0X2xpdGhvXCI6XCJMaXRob1wiLFwiaW1nbHlfbHV0X2xvbW8xMDBcIjpcIkxvbW8gMTAwXCIsXCJpbWdseV9sdXRfbHVjaWRcIjpcIkx1Y2lkXCIsXCJpbWdseV9sdXRfbmVhdFwiOlwiTmVhdFwiLFwiaW1nbHlfbHV0X25vZ3JlZW5cIjpcIk5vIEdyZWVuXCIsXCJpbWdseV9sdXRfb3JjaGlkXCI6XCJPcmNoaWRcIixcImltZ2x5X2x1dF9wYWxlXCI6XCJQYWxlXCIsXCJpbWdseV9sdXRfcGl0Y2hlZFwiOlwiUGl0Y2hlZFwiLFwiaW1nbHlfbHV0X3BsYXRlXCI6XCJQbGF0ZVwiLFwiaW1nbHlfbHV0X3BvbGE2NjlcIjpcIlBvbGEgNjY5XCIsXCJpbWdseV9sdXRfcG9sYXN4XCI6XCJQb2xhIFNYXCIsXCJpbWdseV9sdXRfcHJvNDAwXCI6XCJQcm8gNDAwXCIsXCJpbWdseV9sdXRfcXVvemlcIjpcIlF1b3ppXCIsXCJpbWdseV9sdXRfc2VwaWFoaWdoXCI6XCJTZXBpYSBIaWdoXCIsXCJpbWdseV9sdXRfc2V0dGxlZFwiOlwiU2V0dGxlZFwiLFwiaW1nbHlfbHV0X3NldmVudGllc1wiOlwiU2V2ZW50aWVzXCIsXCJpbWdseV9sdXRfc29mdFwiOlwiU29mdFwiLFwiaW1nbHlfbHV0X3N0ZWVsXCI6XCJTdGVlbFwiLFwiaW1nbHlfbHV0X3N1bW1lclwiOlwiU3VtbWVyXCIsXCJpbWdseV9sdXRfc3Vuc2V0XCI6XCJTdW5zZXRcIixcImltZ2x5X2x1dF90ZW5kZXJcIjpcIlRlbmRlclwiLFwiaW1nbHlfbHV0X3R3aWxpZ2h0XCI6XCJUd2lsaWdodFwiLFwiaW1nbHlfbHV0X3dpbnRlclwiOlwiV2ludGVyXCIsXCJpbWdseV9sdXRfeDQwMFwiOlwiWDQwMFwifSxcInRpdGxlXCI6e1wibmFtZVwiOlwiRmlsdGVyc1wifX0sXCJhZGp1c3RtZW50c1wiOntcImJ1dHRvblwiOntcInJlc2V0XCI6XCJSZXNldCBEZWZhdWx0XCJ9LFwidGl0bGVcIjp7XCJuYW1lXCI6XCJBZGp1c3RcIixcImJhc2ljc1wiOlwiQmFzaWNzXCIsXCJyZWZpbmVtZW50c1wiOlwiUmVmaW5lbWVudHNcIn0sXCJ0ZXh0XCI6e1wiYnJpZ2h0bmVzc1wiOlwiQnJpZ2h0bmVzc1wiLFwic2F0dXJhdGlvblwiOlwiU2F0dXJhdGlvblwiLFwiY29udHJhc3RcIjpcIkNvbnRyYXN0XCIsXCJnYW1tYVwiOlwiR2FtbWFcIixcImNsYXJpdHlcIjpcIkNsYXJpdHlcIixcImV4cG9zdXJlXCI6XCJFeHBvc3VyZVwiLFwic2hhZG93c1wiOlwiU2hhZG93c1wiLFwiaGlnaGxpZ2h0c1wiOlwiSGlnaGxpZ2h0c1wiLFwid2hpdGVzXCI6XCJXaGl0ZXNcIixcImJsYWNrc1wiOlwiQmxhY2tzXCIsXCJ0ZW1wZXJhdHVyZVwiOlwiVGVtcGVyYXR1cmVcIn19LFwiZm9jdXNcIjp7XCJ0aXRsZVwiOntcIm5hbWVcIjpcIkZvY3VzXCJ9LFwiYnV0dG9uXCI6e1wibm9uZVwiOlwiTm9uZVwiLFwicmFkaWFsXCI6XCJSYWRpYWxcIixcIm1pcnJvcmVkXCI6XCJNaXJyb3JlZFwiLFwibGluZWFyXCI6XCJMaW5lYXJcIixcImdhdXNzaWFuXCI6XCJHYXVzc2lhblwifX0sXCJ0ZXh0XCI6e1widGl0bGVcIjp7XCJuYW1lXCI6XCJUZXh0XCIsXCJmb250XCI6XCJGb250XCIsXCJzaXplXCI6XCJTaXplXCIsXCJzcGFjaW5nXCI6XCJTcGFjaW5nXCIsXCJsaW5lXCI6XCJMaW5lXCIsXCJiYWNrZ3JvdW5kXCI6XCJCYWNrZ3JvdW5kXCJ9LFwicGxhY2Vob2xkZXJcIjp7XCJkZWZhdWx0VGV4dFwiOlwiRG91YmxlLWNsaWNrIHRvIGVkaXQhXCJ9LFwiYnV0dG9uXCI6e1wibmV3XCI6XCJOZXcgVGV4dFwifX0sXCJ0ZXh0ZGVzaWduXCI6e1widGl0bGVcIjp7XCJuYW1lXCI6XCJUZXh0IERlc2lnblwifSxcImJ1dHRvblwiOntcImludmVydFwiOlwiVGV4dCBhcyBtYXNrXCJ9fSxcInN0aWNrZXJcIjp7XCJ0aXRsZVwiOntcIm5hbWVcIjpcIlN0aWNrZXJzXCIsXCJvcGFjaXR5XCI6XCJPcGFjaXR5XCJ9LFwidGV4dFwiOntcInN0aWNrZXJMb2FkaW5nRXJyb3JcIjpcIkZhaWxlZCB0byBsb2FkIHN0aWNrZXIgJHtwYXRofS5cIn0sXCJidXR0b25cIjp7XCJyZXBsYWNlXCI6XCJSZXBsYWNlXCIsXCJuZXdcIjpcIk5ldyBTdGlja2VyXCIsXCJmaWxsXCI6XCJGaWxsXCJ9LFwiYXNzZXRcIjp7XCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc1wiOlwiRW1vdGljb25zXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbGllblwiOlwiQWxpZW5cIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2FuZ2VsXCI6XCJBbmdlbFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYW5ncnlcIjpcIkFuZ3J5XCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19hbnhpb3VzXCI6XCJBbnhpb3VzXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19hc2xlZXBcIjpcIkFzbGVlcFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYXR0ZW50aW9uXCI6XCJBdHRlbnRpb25cIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JhYnlfY2hpY2tlblwiOlwiQmFieSBDaGlja2VuXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19iYXRtYW5cIjpcIkJhdG1hblwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmVlclwiOlwiQmVlclwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYmxhY2tcIjpcIkJsYWNrXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19ibHVlXCI6XCJCbHVlXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19ibHVzaFwiOlwiQmx1c2hcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2JveGVyXCI6XCJCb3hlclwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfYnVzaW5lc3NcIjpcIkJ1c2luZXNzXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19jaGlja2VuXCI6XCJDaGlja2VuXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19jb29sXCI6XCJDb29sXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19jcnlcIjpcIkNyeVwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZGVjZWFzZWRcIjpcIkRlY2Vhc2VkXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19kZXZpbFwiOlwiRGV2aWxcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2R1Y2tmYWNlXCI6XCJEdWNrZmFjZVwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZnVyaW91c1wiOlwiRnVyaW91c1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZ3JpblwiOlwiR3JpblwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfZ3VpdGFyXCI6XCJHdWl0YXJcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2hhcnJ5X3BvdHRlclwiOlwiSGFycnkgUG90dGVyXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19oaXBwaWVcIjpcIkhpcHBpZVwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfaGl0bWFuXCI6XCJIaXRtYW5cIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2h1bW91cm91c1wiOlwiSHVtb3Vyb3VzXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19pZGVhXCI6XCJJZGVhXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19pbXBhdGllbnRcIjpcIkltcGF0aWVudFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfa2lzc1wiOlwiS2lzc1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfa2lzc2VzXCI6XCJLaXNzZXNcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX2xhdWdoXCI6XCJMYXVnaFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbG91ZF9jcnlcIjpcIkxvdWQgQ3J5XCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19sb3ZpbmdcIjpcIkxvdmluZ1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbWFza2VkXCI6XCJNYXNrZWRcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX211c2ljXCI6XCJNdXNpY1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmVyZFwiOlwiTmVyZFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfbmluamFcIjpcIk5pbmphXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19ub3Rfc3BlYWtpbmdfdG9feW91XCI6XCJOb3Qgc3BlYWtpbmcgdG8geW91XCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19waWdcIjpcIlBpZ1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcHVtcGtpblwiOlwiUHVtcGtpblwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfcXVlc3Rpb25cIjpcIlF1ZXN0aW9uXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc19yYWJiaXRcIjpcIlJhYmJpdFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2FkXCI6XCJTYWRcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NpY2tcIjpcIlNpY2tcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NrYXRlYm9hcmRcIjpcIlNrYXRlYm9hcmRcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NrdWxsXCI6XCJTa3VsbFwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc2xlZXB5XCI6XCJTbGVlcHlcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3NtaWxlXCI6XCJTbWlsZVwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc21va2luZ1wiOlwiU21va2luZ1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc29iYmluZ1wiOlwiU29iYmluZ1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3RhclwiOlwiU3RhclwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3RlYW1pbmdfZnVyaW91c1wiOlwiU3RlYW1pbmcgRnVyaW91c1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfc3VuYmF0aGluZ1wiOlwiU3VuYmF0aGluZ1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfdGlyZWRcIjpcIlRpcmVkXCIsXCJpbWdseV9zdGlja2VyX2Vtb3RpY29uc190b25ndWVfb3V0X3dpbmtcIjpcIlRvbmd1ZSBvdXQgd2lua1wiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2F2ZVwiOlwiV2F2ZVwiLFwiaW1nbHlfc3RpY2tlcl9lbW90aWNvbnNfd2lkZV9ncmluXCI6XCJXaWRlIEdyaW5cIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dpbmtcIjpcIldpbmtcIixcImltZ2x5X3N0aWNrZXJfZW1vdGljb25zX3dyZXN0bGVyXCI6XCJXcmVzdGxlclwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNcIjpcIlNoYXBlc1wiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYXJyb3dfMDJcIjpcIkFycm93IDFcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2Fycm93XzAzXCI6XCJBcnJvdyAyXCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wMVwiOlwiQmFkZ2UgMVwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTFcIjpcIkJhZGdlIDVcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzEyXCI6XCJCYWRnZSA2XCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xM1wiOlwiQmFkZ2UgN1wiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMTVcIjpcIkJhZGdlIDhcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzE4XCI6XCJCYWRnZSA5XCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8xOVwiOlwiQmFkZ2UgMTBcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzIwXCI6XCJCYWRnZSAxMVwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMjhcIjpcIkJhZGdlIDEyXCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8zMlwiOlwiQmFkZ2UgMTNcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzM1XCI6XCJCYWRnZSAxNFwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMzZcIjpcIkJhZGdlIDE1XCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19iYWRnZV8wNFwiOlwiQmFkZ2UgMlwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfYmFkZ2VfMDZcIjpcIkJhZGdlIDNcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX2JhZGdlXzA4XCI6XCJCYWRnZSA0XCIsXCJpbWdseV9zdGlja2VyX3NoYXBlc19zcHJheV8wMVwiOlwiU3ByYXkgMVwiLFwiaW1nbHlfc3RpY2tlcl9zaGFwZXNfc3ByYXlfMDNcIjpcIlNwcmF5IDJcIixcImltZ2x5X3N0aWNrZXJfc2hhcGVzX3NwcmF5XzA0XCI6XCJTcHJheSAzXCJ9fSxcImJydXNoXCI6e1widGl0bGVcIjp7XCJuYW1lXCI6XCJCcnVzaFwiLFwid2lkdGhcIjpcIldpZHRoXCIsXCJoYXJkbmVzc1wiOlwiSGFyZG5lc3NcIixcInNldHRpbmdzXCI6XCJCcnVzaCBTZXR0aW5nc1wifX0sXCJmcmFtZVwiOntcInRpdGxlXCI6e1wibmFtZVwiOlwiRnJhbWVzXCIsXCJvcGFjaXR5XCI6XCJPcGFjaXR5XCIsXCJ3aWR0aFwiOlwiV2lkdGhcIn0sXCJidXR0b25cIjp7XCJmaWxsXCI6XCJGaWxsXCIsXCJyZXBsYWNlXCI6XCJSZXBsYWNlXCIsXCJub25lXCI6XCJOb25lXCJ9LFwiYXNzZXRcIjp7XCJpbWdseV9mcmFtZV9kaWFcIjpcIkRpYVwiLFwiaW1nbHlfZnJhbWVfYXJ0X2RlY29yXCI6XCJBcnQgRGVjb3JcIixcImltZ2x5X2ZyYW1lX2JsYWNrX3Bhc3NlcGFydG91dFwiOlwiQmxhY2sgUGFzc2VwYXJ0b3V0XCIsXCJpbWdseV9mcmFtZV9sb3dwb2x5X3NoYWRvd1wiOlwiTG93IFBvbHlcIixcImltZ2x5X2ZyYW1lX3dvb2RfcGFzc2VwYXJ0b3V0XCI6XCJXb29kIFBhc3NlcGFydG91dFwifX0sXCJvdmVybGF5XCI6e1widGl0bGVcIjp7XCJuYW1lXCI6XCJPdmVybGF5c1wiLFwiYmxlbmRpbmdcIjpcIkJsZW5kaW5nXCIsXCJub25lXCI6XCJOb25lXCIsXCJub3JtYWxcIjpcIk5vcm1hbFwiLFwib3ZlcmxheVwiOlwiT3ZlcmxheVwiLFwiaGFyZExpZ2h0XCI6XCJIYXJkIExpZ2h0XCIsXCJzb2Z0TGlnaHRcIjpcIlNvZnQgTGlnaHRcIixcIm11bHRpcGx5XCI6XCJNdWx0aXBseVwiLFwiZGFya2VuXCI6XCJEYXJrZW5cIixcImxpZ2h0ZW5cIjpcIkxpZ2h0ZW5cIixcInNjcmVlblwiOlwiU2NyZWVuXCIsXCJjb2xvckJ1cm5cIjpcIkNvbG9yIEJ1cm5cIn0sXCJidXR0b25cIjp7XCJub25lXCI6XCJOb25lXCJ9LFwiYXNzZXRcIjp7XCJpbWdseV9vdmVybGF5X2Jva2VoXCI6XCJCb2tlaFwiLFwiaW1nbHlfb3ZlcmxheV9jaG9wXCI6XCJDaG9wXCIsXCJpbWdseV9vdmVybGF5X2Nsb3Vkc1wiOlwiQ2xvdWRzXCIsXCJpbWdseV9vdmVybGF5X2dvbGRlblwiOlwiR29sZGVuXCIsXCJpbWdseV9vdmVybGF5X2dyYWluXCI6XCJHcmFpblwiLFwiaW1nbHlfb3ZlcmxheV9oZWFydHNcIjpcIkhlYXJ0c1wiLFwiaW1nbHlfb3ZlcmxheV9saWdodGxlYWsxXCI6XCJMaWdodCBMZWFrIDFcIixcImltZ2x5X292ZXJsYXlfbGlnaHRsZWFrMlwiOlwiTGlnaHQgTGVhayAyXCIsXCJpbWdseV9vdmVybGF5X21ldGFsXCI6XCJNZXRhbFwiLFwiaW1nbHlfb3ZlcmxheV9tb3NhaWNcIjpcIk1vc2FpY1wiLFwiaW1nbHlfb3ZlcmxheV9wYWludGluZ1wiOlwiUGFpbnRpbmdcIixcImltZ2x5X292ZXJsYXlfcGFwZXJcIjpcIlBhcGVyXCIsXCJpbWdseV9vdmVybGF5X3JhaW5cIjpcIlJhaW5cIixcImltZ2x5X292ZXJsYXlfdmludGFnZVwiOlwiVmludGFnZVwiLFwiaW1nbHlfb3ZlcmxheV93YWxsMVwiOlwiV2FsbFwiLFwiaW1nbHlfb3ZlcmxheV93YWxsMlwiOlwiV2FsbCAyXCIsXCJpbWdseV9vdmVybGF5X3dvb2RcIjpcIldvb2RcIn19fX1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvcmUvbGFuZy9lbi5qc29uXG4vLyBtb2R1bGUgaWQgPSAyOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCBEZXNrdG9wVUkgZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IExpYnJhcnlDb250cm9scyBmcm9tICcuL2xpYnJhcnknXG5pbXBvcnQgQWRqdXN0bWVudHNDb250cm9scyBmcm9tICcuL2FkanVzdG1lbnRzJ1xuaW1wb3J0IEJydXNoQ29udHJvbHMgZnJvbSAnLi9icnVzaCdcbmltcG9ydCBGaWx0ZXJDb250cm9scyBmcm9tICcuL2ZpbHRlcidcbmltcG9ydCBGb2N1c0NvbnRyb2xzIGZyb20gJy4vZm9jdXMnXG5pbXBvcnQgRnJhbWVDb250cm9scyBmcm9tICcuL2ZyYW1lJ1xuaW1wb3J0IE92ZXJsYXlDb250cm9scyBmcm9tICcuL292ZXJsYXknXG5pbXBvcnQgU3RpY2tlckNvbnRyb2xzIGZyb20gJy4vc3RpY2tlcidcbmltcG9ydCBUZXh0Q29udHJvbHMgZnJvbSAnLi90ZXh0J1xuaW1wb3J0IFRyYW5zZm9ybUNvbnRyb2xzIGZyb20gJy4vdHJhbnNmb3JtJ1xuaW1wb3J0IFRleHREZXNpZ25Db250cm9scyBmcm9tICcuL3RleHQtZGVzaWduJ1xuXG5jb25zdCBBbGxDb250cm9scyA9IFtcbiAgTGlicmFyeUNvbnRyb2xzLFxuICBBZGp1c3RtZW50c0NvbnRyb2xzLFxuICBCcnVzaENvbnRyb2xzLFxuICBGaWx0ZXJDb250cm9scyxcbiAgRm9jdXNDb250cm9scyxcbiAgRnJhbWVDb250cm9scyxcbiAgT3ZlcmxheUNvbnRyb2xzLFxuICBTdGlja2VyQ29udHJvbHMsXG4gIFRleHRDb250cm9scyxcbiAgVHJhbnNmb3JtQ29udHJvbHMsXG4gIFRleHREZXNpZ25Db250cm9sc1xuXVxuXG5EZXNrdG9wVUkuQWxsQ29udHJvbHMgPSBBbGxDb250cm9sc1xuXG5leHBvcnQgZGVmYXVsdCBBbGxDb250cm9sc1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvaW5kZXguanMiLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCBEZXNrdG9wVUksIHsgTW9kYWxNYW5hZ2VyLCBCYXNlQ29udHJvbHMgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgTGlicmFyeUNvbnRyb2xzQ29tcG9uZW50IGZyb20gJy4vbGlicmFyeS1jb250cm9scy1jb21wb25lbnQnXG5pbXBvcnQgTGlicmFyeUNhbnZhc0NvbnRyb2xzQ29tcG9uZW50IGZyb20gJy4vbGlicmFyeS1jYW52YXMtY29udHJvbHMtY29tcG9uZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaWJyYXJ5Q29udHJvbHMgZXh0ZW5kcyBCYXNlQ29udHJvbHMge1xuICBzdGF0aWMgY2xpY2tBdFBvc2l0aW9uID0gQmFzZUNvbnRyb2xzLmNsaWNrQXRQb3NpdGlvblxuICBzdGF0aWMgZ2V0UHJlbG9hZEFzc2V0cyA9IEJhc2VDb250cm9scy5nZXRQcmVsb2FkQXNzZXRzXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBjaGFuZ2VzIHNob3VsZCBiZSBrZXB0IGJ5IGFza2luZyB0aGUgdXNlci4gUmVtZW1iZXJzIHRoZSB1c2VyJ3MgY2hvaWNlXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBzaG91bGRLZWVwQ2hhbmdlcyAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IsIHVpIH0gPSB0aGlzLmNvbnRleHRcblxuICAgIGxldCBwcm9taXNlXG4gICAgaWYgKHR5cGVvZiB0aGlzLmtlZXBDaGFuZ2VzID09PSAndW5kZWZpbmVkJyAmJiAoIWVkaXRvci5pc1NoYWxsb3cgJiYgZWRpdG9yLmhpc3RvcnkuaXNVbmRvQXZhaWxhYmxlKCkpKSB7XG4gICAgICBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB2YXIgbW9kYWwgPSBNb2RhbE1hbmFnZXIuaW5zdGFuY2UuZGlzcGxheVdhcm5pbmcoXG4gICAgICAgICAgdWkudHJhbnNsYXRlKCdwZXNkay5lZGl0b3IudGl0bGUuZGlzY2FyZENoYW5nZXNXYXJuaW5nJyksXG4gICAgICAgICAgdWkudHJhbnNsYXRlKCdwZXNkay5lZGl0b3IudGV4dC5kaXNjYXJkQ2hhbmdlc1dhcm5pbmcnKSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICB1aS50cmFuc2xhdGUoJ3Blc2RrLmVkaXRvci5idXR0b24uZGlzY2FyZENoYW5nZXNXYXJuaW5nS2VlcCcpLFxuICAgICAgICAgICAgdWkudHJhbnNsYXRlKCdwZXNkay5lZGl0b3IuYnV0dG9uLmRpc2NhcmRDaGFuZ2VzV2FybmluZ0Rpc2NhcmQnKVxuICAgICAgICAgIF0sXG4gICAgICAgICAgdHJ1ZSlcbiAgICAgICAgbW9kYWwub24oJ2J1dHRvbicsIGJ1dHRvbkluZGV4ID0+IHtcbiAgICAgICAgICBjb25zdCBrZWVwQ2hhbmdlcyA9IGJ1dHRvbkluZGV4ID09PSAwXG4gICAgICAgICAgdGhpcy5rZWVwQ2hhbmdlcyA9IGtlZXBDaGFuZ2VzXG4gICAgICAgICAgcmVzb2x2ZShrZWVwQ2hhbmdlcylcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodGhpcy5rZWVwQ2hhbmdlcylcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgb25JbWFnZSAoaW1hZ2UpIHtcbiAgICB0aGlzLnNob3VsZEtlZXBDaGFuZ2VzKClcbiAgICAgIC50aGVuKGtlZXBDaGFuZ2VzID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc3dpdGNoU2NyZWVuT25JbWFnZSkge1xuICAgICAgICAgIHRoaXMuY29udGV4dC5vcHRpb25zLmVkaXRvci5pbWFnZSA9IGltYWdlXG4gICAgICAgICAgdGhpcy5jb250ZXh0LmFwcENvbXBvbmVudC5zd2l0Y2hUb1NjcmVlbignZWRpdG9yJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgICAgICAgZWRpdG9yLnNldEltYWdlKGltYWdlLCAha2VlcENoYW5nZXMpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ3dlYmNhbUVuYWJsZWQnKSkge1xuICAgICAgICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0KHsgd2ViY2FtRW5hYmxlZDogZmFsc2UgfSlcbiAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5vcHRpb25zLmVkaXRvci5mb3JjZUNyb3ApIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5zY3JlZW4uc3dpdGNoVG9Db250cm9scygnZGVmYXVsdCcpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWRlbnRpZmllciA9ICdsaWJyYXJ5J1xuXG4gIC8qKlxuICAgKiBUaGUgY29udHJvbHMgY29tcG9uZW50IGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7UmVhY3QuQ29tcG9uZW50fVxuICAgKi9cbiAgc3RhdGljIGNvbnRyb2xzQ29tcG9uZW50ID0gTGlicmFyeUNvbnRyb2xzQ29tcG9uZW50XG5cbiAgLyoqXG4gICAqIFRoZSBjYW52YXMgY29tcG9uZW50IGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7UmVhY3QuQ29tcG9uZW50fVxuICAgKi9cbiAgc3RhdGljIGNhbnZhc0NvbnRyb2xzQ29tcG9uZW50ID0gTGlicmFyeUNhbnZhc0NvbnRyb2xzQ29tcG9uZW50XG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHBhdGggb2YgdGhpcyBjb250cm9sXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWNvblBhdGggPSAnZWRpdG9yL2NvbnRyb2xzL2xpYnJhcnkvaWNvbi5wbmcnXG5cbiAgLyoqXG4gICAqIFRoZSBhY3RpdmUgaWNvbiBwYXRoIG9mIHRoaXMgY29udHJvbFxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGFjdGl2ZUljb25QYXRoID0gJ2VkaXRvci9jb250cm9scy9saWJyYXJ5L2ljb24tYWN0aXZlLnBuZydcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgb3B0aW9ucyBmb3IgdGhpcyBjb250cm9sXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2VuYWJsZVdlYmNhbSA9IGZhbHNlXVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIGVuYWJsZVdlYmNhbTogdHJ1ZSxcbiAgICBlbmFibGVVcGxvYWQ6IHRydWUsXG4gICAgZGlzcGxheVVwbG9hZEluQ2FudmFzOiBmYWxzZSxcbiAgICBzd2l0Y2hTY3JlZW5PbkltYWdlOiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIElzIGNhbGxlZCB3aGVuIGEgY29udHJvbCBpcyBlbnRlcmVkXG4gICAqL1xuICBfb25FbnRlciAoKSB7XG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXQoe1xuICAgICAgd2ViY2FtRW5hYmxlZDogZmFsc2VcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGxpYnJhcnkgcHJvdmlkZXIgaXMgZGVmaW5lZFxuICAgKiBAcGFyYW0ge1Bob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5FZGl0b3J9IGVkaXRvclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc3RhdGljIGhhc0xpYnJhcnlQcm92aWRlciAoZWRpdG9yKSB7XG4gICAgY29uc3QgeyBjb250cm9sc09wdGlvbnMgfSA9IGVkaXRvci5nZXRPcHRpb25zKCkuZWRpdG9yXG4gICAgaWYgKHR5cGVvZiBjb250cm9sc09wdGlvbnMubGlicmFyeSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0cnVlXG5cbiAgICBjb25zdCBsaWJyYXJ5T3B0aW9ucyA9IGNvbnRyb2xzT3B0aW9ucy5saWJyYXJ5XG4gICAgaWYgKGxpYnJhcnlPcHRpb25zLnByb3ZpZGVyIHx8IGxpYnJhcnlPcHRpb25zLmVuYWJsZVdlYmNhbSB8fCBsaWJyYXJ5T3B0aW9ucy5lbmFibGVVcGxvYWQpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgY29udHJvbCBpcyBlbmFibGVkXG4gICAqIEBwYXJhbSB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkVkaXRvcn0gZWRpdG9yXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNFbmFibGVkIChlZGl0b3IpIHtcbiAgICByZXR1cm4gTGlicmFyeUNvbnRyb2xzLmhhc0xpYnJhcnlQcm92aWRlcihlZGl0b3IpICYmIGVkaXRvci5pc1Rvb2xFbmFibGVkKCdsaWJyYXJ5JylcbiAgfVxufVxuXG5EZXNrdG9wVUkuQ29udHJvbHMuTGlicmFyeUNvbnRyb2xzID0gTGlicmFyeUNvbnRyb2xzXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9saWJyYXJ5L2luZGV4LmpzIiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgVXRpbHMsIE1vZGFsTWFuYWdlciwgQ29udHJvbHNDb21wb25lbnQgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgTGlicmFyeVJvb3RQYW5lbENvbXBvbmVudCBmcm9tICcuL2xpYnJhcnktcm9vdC1wYW5lbC1jb21wb25lbnQnXG5pbXBvcnQgTGlicmFyeVNlYXJjaFBhbmVsQ29tcG9uZW50IGZyb20gJy4vbGlicmFyeS1zZWFyY2gtcGFuZWwtY29tcG9uZW50J1xuaW1wb3J0IExpYnJhcnlTZWFyY2hIZWFkZXJDb21wb25lbnQgZnJvbSAnLi9saWJyYXJ5LXNlYXJjaC1oZWFkZXItY29tcG9uZW50J1xuXG5jb25zdCBQYW5lbEVudW0gPSB7XG4gIFJPT1Q6IDAsXG4gIFNFQVJDSDogMVxufVxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpYnJhcnlDb250cm9sc0NvbXBvbmVudCBleHRlbmRzIENvbnRyb2xzQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IENvbnRyb2xzQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuICBzdGF0aWMgcHJvcFR5cGVzID0gQ29udHJvbHNDb21wb25lbnQucHJvcFR5cGVzXG4gIHN0YXRpYyBSb290RWxlbWVudCA9IENvbnRyb2xzQ29tcG9uZW50LlJvb3RFbGVtZW50XG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgY29uc3QgeyBwcm92aWRlcjogUHJvdmlkZXIgfSA9IHRoaXMucHJvcHMub3B0aW9uc1xuICAgIGlmIChQcm92aWRlcikge1xuICAgICAgdGhpcy5fbGlicmFyeSA9IG5ldyBQcm92aWRlcigpXG4gICAgfVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25DYXRlZ29yeVNlbGVjdCcsXG4gICAgICAnX29uSW1hZ2VTZWxlY3QnLFxuICAgICAgJ19vblNlYXJjaFF1ZXJ5Q2hhbmdlJyxcbiAgICAgICdfb25XZWJjYW1BY3RpdmF0ZWQnXG4gICAgKVxuXG4gICAgdGhpcy5zdGF0ZS5jdXJyZW50UGFuZWwgPSBQYW5lbEVudW0uUk9PVFxuICAgIHRoaXMuc3RhdGUuc2VhcmNoUXVlcnkgPSAnJ1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGJhY2sgYnV0dG9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CYWNrQnV0dG9uQ2xpY2sgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudFBhbmVsOiBQYW5lbEVudW0uUk9PVCxcbiAgICAgIHNlYXJjaFF1ZXJ5OiAnJyxcbiAgICAgIGJhY2tCdXR0b246IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgaGFzIHNlbGVjdGVkIGEgY2F0ZWdvcnlcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkxpYnJhcnkuQ2F0ZWdvcnl9IGNhdGVnb3J5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25DYXRlZ29yeVNlbGVjdCAoY2F0ZWdvcnkpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRQYW5lbDogUGFuZWxFbnVtLlNFQVJDSCxcbiAgICAgIHNlYXJjaFF1ZXJ5OiBjYXRlZ29yeS5nZXROYW1lKCksXG4gICAgICBiYWNrQnV0dG9uOiB0cnVlXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgc2VsZWN0ZWQgYW4gaW1hZ2VcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkxpYnJhcnkuSW1hZ2V9IGltYWdlXG4gICAqIEBQcml2YXRlXG4gICAqL1xuICBfb25JbWFnZVNlbGVjdCAoaW1hZ2UpIHtcbiAgICAvLyBEaXNhYmxlIHdlYmNhbSBpbiBjYXNlIGl0IGlzIG9wZW5cbiAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHsgd2ViY2FtRW5hYmxlZDogZmFsc2UgfSlcbiAgICBjb25zdCBuZXdJbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKVxuXG4gICAgbGV0IGxvYWRpbmdNb2RhbFxuICAgIGxldCBsb2FkVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbG9hZGluZ01vZGFsID0gTW9kYWxNYW5hZ2VyLmluc3RhbmNlLmRpc3BsYXlMb2FkaW5nKHRoaXMuX3QoJ3Blc2RrLmNvbW1vbi50ZXh0LmxvYWRpbmcnKSlcbiAgICB9LCAyMDApXG5cbiAgICBuZXdJbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgaWYgKGxvYWRpbmdNb2RhbCkgbG9hZGluZ01vZGFsLmNsb3NlKClcbiAgICAgIGlmIChsb2FkVGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQobG9hZFRpbWVvdXQpXG4gICAgICAgIGxvYWRUaW1lb3V0ID0gbnVsbFxuICAgICAgfVxuXG4gICAgICB0aGlzLnByb3BzLmNvbnRyb2xzLm9uSW1hZ2UobmV3SW1hZ2UpXG4gICAgfSlcblxuICAgIG5ld0ltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgaWYgKGxvYWRpbmdNb2RhbCkgbG9hZGluZ01vZGFsLmNsb3NlKClcbiAgICAgIGlmIChsb2FkVGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQobG9hZFRpbWVvdXQpXG4gICAgICAgIGxvYWRUaW1lb3V0ID0gbnVsbFxuICAgICAgfVxuXG4gICAgICBNb2RhbE1hbmFnZXIuaW5zdGFuY2UuZGlzcGxheUVycm9yKFxuICAgICAgICB0aGlzLl90KCdwZXNkay5jb21tb24udGl0bGUuZXJyb3InKSxcbiAgICAgICAgdGhpcy5fdCgncGVzZGsuZWRpdG9yLnRleHQuaW1hZ2VMb2FkaW5nRXJyb3InKVxuICAgICAgKVxuICAgIH0pXG5cbiAgICBuZXdJbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuY29udGV4dC5lZGl0b3IuZ2V0Q3Jvc3NPcmlnaW4oKVxuICAgIG5ld0ltYWdlLnNyYyA9IGltYWdlLmdldFJhd1VybCgpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgdGhlIHNlYXJjaCBxdWVyeSB0ZXh0IGlucHV0XG4gICAqIEBwYXJhbSAge0V2ZW50fSBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uU2VhcmNoUXVlcnlDaGFuZ2UgKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzZWFyY2hRdWVyeTogdmFsdWUsXG4gICAgICBjdXJyZW50UGFuZWw6IFBhbmVsRW51bS5TRUFSQ0hcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBvcGVucyB0aGUgd2ViY2FtXG4gICAqIEBwYXJhbSAge1N0cmluZ30gdmFsdWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbldlYmNhbUFjdGl2YXRlZCAodmFsdWUpIHtcbiAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHtcbiAgICAgIHdlYmNhbUVuYWJsZWQ6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTElOR1xuXG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBzdHlsZXMgbmVlZCB0byBiZSBmaXhlZCBieSB0aGUgSmF2YVNjcmlwdC5cbiAgICogVGhpcyBuZWVkcyB0byBiZSBkb25lIHRoYW5rcyB0byBvbGRlciBJbnRlcm5ldCBFeHBsb3JlciBicm93c2VycyB3aGljaCBoYXZlXG4gICAqIGEgYnVuY2ggb2YgQ1NTIGJ1Z3MuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBmaXhTdHlsZXMgKCkge1xuICAgIGlmICghdGhpcy5fbGlzdCkgcmV0dXJuXG5cbiAgICB0aGlzLl9saXN0LnN0eWxlLmhlaWdodCA9ICcxMDAlJ1xuICAgIHJldHVybiBzdXBlci5maXhTdHlsZXMoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoVXRpbHMuQnJvd3Nlci5pc0lFbHRlKDEwKSkge1xuICAgICAgICAgIGNvbnN0IGNvbnRhaW5lckhlaWdodCA9IHRoaXMuX2NvbnRhaW5lci5vZmZzZXRIZWlnaHRcbiAgICAgICAgICB0aGlzLl9saXN0LnN0eWxlLmhlaWdodCA9IGAke2NvbnRhaW5lckhlaWdodH1weGBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnJlZnMucGFuZWwuZml4U3R5bGVzKClcbiAgICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgY3VycmVudCBwYW5lbFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlckN1cnJlbnRQYW5lbCAoKSB7XG4gICAgc3dpdGNoICh0aGlzLnN0YXRlLmN1cnJlbnRQYW5lbCkge1xuICAgICAgY2FzZSBQYW5lbEVudW0uUk9PVDpcbiAgICAgICAgcmV0dXJuICg8TGlicmFyeVJvb3RQYW5lbENvbXBvbmVudFxuICAgICAgICAgIGNvbnRyb2xzPXt0aGlzLnByb3BzLmNvbnRyb2xzfVxuICAgICAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2xpc3QgPSBlbCB9fVxuICAgICAgICAgIGxpYnJhcnk9e3RoaXMuX2xpYnJhcnl9XG4gICAgICAgICAgb25DYXRlZ29yeVNlbGVjdD17dGhpcy5fb25DYXRlZ29yeVNlbGVjdH1cbiAgICAgICAgICBvbldlYmNhbUFjdGl2YXRlZD17dGhpcy5fb25XZWJjYW1BY3RpdmF0ZWR9XG4gICAgICAgICAgb3B0aW9ucz17dGhpcy5wcm9wcy5vcHRpb25zfVxuICAgICAgICAgIGtleT0ncGFuZWwnXG4gICAgICAgICAgcmVmPSdwYW5lbCcgLz4pXG4gICAgICBjYXNlIFBhbmVsRW51bS5TRUFSQ0g6XG4gICAgICAgIHJldHVybiAoPExpYnJhcnlTZWFyY2hQYW5lbENvbXBvbmVudFxuICAgICAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2xpc3QgPSBlbCB9fVxuICAgICAgICAgIGxpYnJhcnk9e3RoaXMuX2xpYnJhcnl9XG4gICAgICAgICAgb25JbWFnZVNlbGVjdD17dGhpcy5fb25JbWFnZVNlbGVjdH1cbiAgICAgICAgICBzZWFyY2hRdWVyeT17dGhpcy5zdGF0ZS5zZWFyY2hRdWVyeX1cbiAgICAgICAgICBrZXk9J3BhbmVsJ1xuICAgICAgICAgIHJlZj0ncGFuZWwnIC8+KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0aWVzIGZvciB0aGUgcm9vdCBlbGVtZW50XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRSb290UHJvcHMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzc05hbWU6ICh0ZXN0ID8gJ2pzLWxpYnJhcnlDb250cm9scycgOiB1bmRlZmluZWQpLFxuICAgICAgd2l0aEJvcmRlclRvcDogZmFsc2VcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbnRyb2wncyBjb250ZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICBfcmVuZGVyQ29udGVudCAoKSB7XG4gICAgbGV0IGl0ZW1zID0gW11cbiAgICBpZiAodGhpcy5fbGlicmFyeSkge1xuICAgICAgaXRlbXMucHVzaCg8TGlicmFyeVNlYXJjaEhlYWRlckNvbXBvbmVudFxuICAgICAgICBrZXk9J3NlYXJjaEhlYWRlcidcbiAgICAgICAgb25DaGFuZ2U9e3RoaXMuX29uU2VhcmNoUXVlcnlDaGFuZ2V9XG4gICAgICAgIHNlYXJjaFF1ZXJ5PXt0aGlzLnN0YXRlLnNlYXJjaFF1ZXJ5fSAvPilcbiAgICB9XG4gICAgaXRlbXMucHVzaCh0aGlzLl9yZW5kZXJDdXJyZW50UGFuZWwoKSlcbiAgICByZXR1cm4gaXRlbXNcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvbGlicmFyeS9saWJyYXJ5LWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIFV0aWxzLCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIEJhc2VDb21wb25lbnQsIFNjcm9sbGFibGVMaXN0Q29tcG9uZW50LCBEZWxheWVkSm9iUXVldWUsIExvYWRpbmdJbmRpY2F0b3JDb21wb25lbnQgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgQ2F0ZWdvcnlMaXN0SXRlbUNvbXBvbmVudCBmcm9tICcuL2NhdGVnb3J5LWxpc3QtaXRlbS1jb21wb25lbnQnXG5pbXBvcnQgTGlicmFyeVVwbG9hZENvbXBvbmVudCBmcm9tICcuL2xpYnJhcnktdXBsb2FkLWNvbXBvbmVudCdcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpYnJhcnlSb290UGFuZWxDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25JbWFnZSdcbiAgICApXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgIGNhdGVnb3JpZXM6IFtdXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTElOR1xuXG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBzdHlsZXMgbmVlZCB0byBiZSBmaXhlZCBieSB0aGUgSmF2YVNjcmlwdC5cbiAgICogVGhpcyBuZWVkcyB0byBiZSBkb25lIHRoYW5rcyB0byBvbGRlciBJbnRlcm5ldCBFeHBsb3JlciBicm93c2VycyB3aGljaCBoYXZlXG4gICAqIGEgYnVuY2ggb2YgQ1NTIGJ1Z3MuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBmcm9tIHRoZSBTdGlja2VyQ29udHJvbHNDb21wb25lbnQgZHVlIHRvIHRpbWluZyBpc3N1ZXMuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBmaXhTdHlsZXMgKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoVXRpbHMuQnJvd3Nlci5pc0lFbHRlKDEwKSkge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxiYXIudXBkYXRlKClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3Njcm9sbGJhci51cGRhdGUoKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZFxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudERpZE1vdW50KClcblxuICAgIHRoaXMuX2xvYWRDYXRlZ29yaWVzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGltbWVkaWF0ZWx5IGJlZm9yZSBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYW5kIGRlc3Ryb3llZFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudFdpbGxVbm1vdW50KClcblxuICAgIGlmICh0aGlzLl9sb2FkQ292ZXJJbWFnZXNRdWV1ZSkge1xuICAgICAgdGhpcy5fbG9hZENvdmVySW1hZ2VzUXVldWUuZGlzcG9zZSgpXG4gICAgfVxuXG4gICAgdGhpcy5fZGlzcG9zZWQgPSB0cnVlXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBhIGNhdGVnb3J5XG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5MaWJyYXJ5LkNhdGVnb3J5fSBjYXRlZ29yeVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ2F0ZWdvcnlDbGljayAoY2F0ZWdvcnkpIHtcbiAgICB0aGlzLnByb3BzLm9uQ2F0ZWdvcnlTZWxlY3QgJiZcbiAgICAgIHRoaXMucHJvcHMub25DYXRlZ29yeVNlbGVjdChjYXRlZ29yeSlcbiAgfVxuXG4gIF9vbkltYWdlIChpbWFnZSkge1xuICAgIHRoaXMucHJvcHMuY29udHJvbHMub25JbWFnZShpbWFnZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExPQURJTkdcblxuICAvKipcbiAgICogTG9hZHMgdGhlIHRodW1ibmFpbHNcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkxpYnJhcnkuQ2F0ZWdvcnlbXX0gY2F0ZWdvcmllc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2xvYWRDb3ZlckltYWdlcyAoY2F0ZWdvcmllcykge1xuICAgIGNvbnN0IHsgdGhlbWUsIG9wdGlvbnMgfSA9IHRoaXMuY29udGV4dFxuXG4gICAgY29uc3Qgam9icyA9IGNhdGVnb3JpZXMubWFwKGkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZm46ICgpID0+IGkubG9hZENvdmVySW1hZ2Uob3B0aW9ucy5jcm9zc09yaWdpbiksXG4gICAgICAgIGluZGV4OiBpXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLl9sb2FkQ292ZXJJbWFnZXNRdWV1ZSA9IG5ldyBEZWxheWVkSm9iUXVldWUoam9icywge1xuICAgICAgbWluRGVsYXk6IHRoZW1lLmxpc3RJdGVtU2xpZGVJbkRlbGF5XG4gICAgfSlcbiAgICB0aGlzLl9sb2FkQ292ZXJJbWFnZXNRdWV1ZS5vbignam9iLWRvbmUnLCBqb2IgPT4ge1xuICAgICAgaWYgKHRoaXMuX2Rpc3Bvc2VkKSByZXR1cm5cblxuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgICB0aGlzLl9zY3JvbGxiYXIudXBkYXRlKClcbiAgICB9KVxuICAgIHRoaXMuX2xvYWRDb3ZlckltYWdlc1F1ZXVlLnN0YXJ0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgbGlicmFyeSdzIGNhdGVnb3JpZXNcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9sb2FkQ2F0ZWdvcmllcyAoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmxpYnJhcnkpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgY2F0ZWdvcmllczogW11cbiAgICAgIH0pXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5saWJyYXJ5LmdldENhdGVnb3JpZXMoKVxuICAgICAgLnRoZW4oY2F0ZWdvcmllcyA9PiB7XG4gICAgICAgIHRoaXMuX2xvYWRDb3ZlckltYWdlcyhjYXRlZ29yaWVzKVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICBjYXRlZ29yaWVzXG4gICAgICAgIH0pXG4gICAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGxpc3QgaXRlbXNcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudFtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlckxpc3RJdGVtcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuY2F0ZWdvcmllc1xuICAgICAgLm1hcChjYXRlZ29yeSA9PiB7XG4gICAgICAgIHJldHVybiAoPENhdGVnb3J5TGlzdEl0ZW1Db21wb25lbnRcbiAgICAgICAgICBrZXk9e2NhdGVnb3J5LmdldE5hbWUoKX1cbiAgICAgICAgICBjYXRlZ29yeT17Y2F0ZWdvcnl9XG4gICAgICAgICAgdmlzaWJsZT17Y2F0ZWdvcnkuaXNDb3ZlckltYWdlTG9hZGVkKCl9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5fb25DYXRlZ29yeUNsaWNrLmJpbmQodGhpcywgY2F0ZWdvcnkpfSAvPilcbiAgICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5sb2FkaW5nKSByZXR1cm4gPExvYWRpbmdJbmRpY2F0b3JDb21wb25lbnQgLz5cblxuICAgIGNvbnN0IHsgZW5hYmxlVXBsb2FkLCBkaXNwbGF5VXBsb2FkSW5DYW52YXMgfSA9IHRoaXMucHJvcHMub3B0aW9uc1xuICAgIGNvbnN0IHsgaW5uZXJSZWYgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKDxSb290UGFuZWxXcmFwcGVyXG4gICAgICBpbm5lclJlZj17ZWwgPT4geyBpbm5lclJlZiAmJiBpbm5lclJlZihlbCk7IHRoaXMuX3dyYXBwZXIgPSBlbCB9fVxuICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1yb290UGFuZWwnIDogdW5kZWZpbmVkKX0+XG4gICAgICA8U2Nyb2xsYWJsZUxpc3RDb21wb25lbnRcbiAgICAgICAgZGlyZWN0aW9uPSd2ZXJ0aWNhbCdcbiAgICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fc2Nyb2xsYmFyID0gZWwgfX0+XG4gICAgICAgIDxDYXRlZ29yeUxpc3Q+XG4gICAgICAgICAge2VuYWJsZVVwbG9hZCAmJiAhZGlzcGxheVVwbG9hZEluQ2FudmFzICYmIDxMaWJyYXJ5VXBsb2FkQ29tcG9uZW50XG4gICAgICAgICAgICBjb250cm9scz17dGhpcy5wcm9wcy5jb250cm9sc31cbiAgICAgICAgICAgIG9uSW1hZ2U9e3RoaXMuX29uSW1hZ2V9XG4gICAgICAgICAgICB3ZWJjYW1FbmFibGVkPXt0aGlzLnByb3BzLm9wdGlvbnMuZW5hYmxlV2ViY2FtfVxuICAgICAgICAgICAgb25XZWJjYW1BY3RpdmF0ZWQ9e3RoaXMucHJvcHMub25XZWJjYW1BY3RpdmF0ZWR9IC8+fVxuICAgICAgICAgIHt0aGlzLl9yZW5kZXJMaXN0SXRlbXMoKX1cbiAgICAgICAgPC9DYXRlZ29yeUxpc3Q+XG4gICAgICA8L1Njcm9sbGFibGVMaXN0Q29tcG9uZW50PlxuICAgIDwvUm9vdFBhbmVsV3JhcHBlcj4pXG4gIH1cbn1cblxuY29uc3QgUm9vdFBhbmVsV3JhcHBlciA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUnLFxuICB0YWJsZUxheW91dDogJ2ZpeGVkJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIGJvcmRlclRvcDogdGhlbWUgPT4gYDFweCBzb2xpZCAke3RoZW1lLmNvbnRyb2xzU2VwYXJhdG9yQ29sb3J9YFxufSlcblxuY29uc3QgQ2F0ZWdvcnlMaXN0ID0gYWRvbmlzLnVsKHtcbiAgbGlzdFN0eWxlOiAnbm9uZScsXG4gIG1hcmdpbjogMCxcbiAgcGFkZGluZzogJzI1cHgnLFxuICBwYWRkaW5nQm90dG9tOiAwXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvbGlicmFyeS9saWJyYXJ5LXJvb3QtcGFuZWwtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgQmFzZUNvbXBvbmVudCwgQ29udHJvbHNTdHlsZXMgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5jb25zdCB7IENvbnRyb2xJdGVtLCBDb250cm9sSXRlbVRpdGxlIH0gPSBDb250cm9sc1N0eWxlc1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2F0ZWdvcnlMaXN0SXRlbUNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgY2F0ZWdvcnksIG9uQ2xpY2ssIHZpc2libGUgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBsaXN0SXRlbVN0eWxlID0ge1xuICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCcke2NhdGVnb3J5LmdldENvdmVySW1hZ2UoKX0nKWBcbiAgICB9XG5cbiAgICByZXR1cm4gKDxMaXN0SXRlbVxuICAgICAgYW5pbWF0ZWRcbiAgICAgIHN0eWxlPXtsaXN0SXRlbVN0eWxlfVxuICAgICAgdmlzaWJsZT17dmlzaWJsZX1cbiAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtY2F0ZWdvcnlMaXN0SXRlbScgOiB1bmRlZmluZWQpfVxuICAgICAgb25DbGljaz17b25DbGlja30+XG4gICAgICA8TGlzdEl0ZW1UaXRsZT57Y2F0ZWdvcnkuZ2V0TmFtZSgpfTwvTGlzdEl0ZW1UaXRsZT5cbiAgICA8L0xpc3RJdGVtPilcbiAgfVxufVxuXG5jb25zdCBMaXN0SXRlbSA9IGFkb25pcyhDb250cm9sSXRlbSkubGkoe1xuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lID0+IHRoZW1lLmZvY3VzSXRlbUJhY2tncm91bmRDb2xvcixcbiAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXG4gIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxuXG4gICc6bGFzdC1jaGlsZCc6IHtcbiAgICBtYXJnaW5Cb3R0b206IDBcbiAgfVxufSlcblxuY29uc3QgTGlzdEl0ZW1UaXRsZSA9IGFkb25pcyhDb250cm9sSXRlbVRpdGxlKS5kaXYoe1xuICB0cmFuc2l0aW9uUHJvcGVydHk6ICdib3R0b20sIG1hcmdpbicsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogJy4ycycsXG4gIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogJ2Vhc2UtaW4tb3V0JyxcbiAgdHJhbnNpdGlvbkRlbGF5OiAnLjJzJyxcbiAgYm90dG9tOiAnNTAlJyxcbiAgbWFyZ2luQm90dG9tOiAnLTdweCcsXG4gIGxldHRlclNwYWNpbmc6ICczcHgnLFxuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgZm9udEZhbWlseTogdGhlbWUgPT4gdGhlbWUudXBwZXJjYXNlU2VtaUJvbGRGb250RmFtaWx5LFxuICB0ZXh0U2hhZG93OiAnMCAwIDZweCAjMDAwMDAwJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2xpYnJhcnkvY2F0ZWdvcnktbGlzdC1pdGVtLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIEJhc2VDb21wb25lbnQsIFV0aWxzLCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIERlbGF5ZWRKb2JRdWV1ZSwgU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQsIExvYWRpbmdJbmRpY2F0b3JDb21wb25lbnQgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgSW1hZ2VMaXN0SXRlbUNvbXBvbmVudCBmcm9tICcuL2ltYWdlLWxpc3QtaXRlbS1jb21wb25lbnQnXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaWJyYXJ5U2VhcmNoUGFuZWxDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICBpbWFnZXM6IFtdXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTElOR1xuXG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBzdHlsZXMgbmVlZCB0byBiZSBmaXhlZCBieSB0aGUgSmF2YVNjcmlwdC5cbiAgICogVGhpcyBuZWVkcyB0byBiZSBkb25lIHRoYW5rcyB0byBvbGRlciBJbnRlcm5ldCBFeHBsb3JlciBicm93c2VycyB3aGljaCBoYXZlXG4gICAqIGEgYnVuY2ggb2YgQ1NTIGJ1Z3MuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBmcm9tIHRoZSBTdGlja2VyQ29udHJvbHNDb21wb25lbnQgZHVlIHRvIHRpbWluZyBpc3N1ZXMuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBmaXhTdHlsZXMgKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoVXRpbHMuQnJvd3Nlci5pc0lFbHRlKDEwKSkge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxiYXIudXBkYXRlKClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3Njcm9sbGJhci51cGRhdGUoKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZFxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudERpZE1vdW50KClcblxuICAgIHRoaXMuX2xvYWRJbWFnZXModGhpcy5wcm9wcy5zZWFyY2hRdWVyeSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSBhIG1vdW50ZWQgY29tcG9uZW50IHJlY2VpdmVzIG5ldyBwcm9wc1xuICAgKiBAcGFyYW0gIHtPYmplY3R9IG5leHRQcm9wc1xuICAgKi9cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2VhcmNoUXVlcnkgIT09IG5leHRQcm9wcy5zZWFyY2hRdWVyeSkge1xuICAgICAgdGhpcy5fbG9hZEltYWdlcyhuZXh0UHJvcHMuc2VhcmNoUXVlcnkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgdW5tb3VudGVkXG4gICAqL1xuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50V2lsbFVubW91bnQoKVxuXG4gICAgdGhpcy5fbG9hZFRodW1ic1F1ZXVlLnN0b3AoKVxuICAgIHRoaXMuX2xvYWRUaHVtYnNRdWV1ZS5kaXNwb3NlKClcbiAgICB0aGlzLl9kaXNwb3NlZCA9IHRydWVcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdXNlIGNsaWNrcyBhbiBpbWFnZVxuICAgKiBAcGFyYW0gIHtJbWFnZX0gaW1hZ2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkltYWdlQ2xpY2sgKGltYWdlKSB7XG4gICAgdGhpcy5wcm9wcy5vbkltYWdlU2VsZWN0ICYmXG4gICAgICB0aGlzLnByb3BzLm9uSW1hZ2VTZWxlY3QoaW1hZ2UpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMT0FESU5HXG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSB0aHVtYm5haWxzXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5MaWJyYXJ5LkltYWdlW119IGltYWdlc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2xvYWRUaHVtYnMgKGltYWdlcykge1xuICAgIGNvbnN0IHsgdGhlbWUsIG9wdGlvbnMgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IGpvYnMgPSBpbWFnZXMubWFwKGkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZm46ICgpID0+IGkubG9hZFRodW1iKG9wdGlvbnMuY3Jvc3NPcmlnaW4pLFxuICAgICAgICBpbmRleDogaVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5fbG9hZFRodW1ic1F1ZXVlID0gbmV3IERlbGF5ZWRKb2JRdWV1ZShqb2JzLCB7XG4gICAgICBtaW5EZWxheTogdGhlbWUubGlzdEl0ZW1TbGlkZUluRGVsYXlcbiAgICB9KVxuICAgIHRoaXMuX2xvYWRUaHVtYnNRdWV1ZS5vbignam9iLWRvbmUnLCBqb2IgPT4ge1xuICAgICAgaWYgKHRoaXMuX2Rpc3Bvc2VkKSByZXR1cm5cblxuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgICB0aGlzLl9zY3JvbGxiYXIgJiYgdGhpcy5fc2Nyb2xsYmFyLnVwZGF0ZSgpXG4gICAgfSlcbiAgICB0aGlzLl9sb2FkVGh1bWJzUXVldWUuc3RhcnQoKVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBpbWFnZXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFF1ZXJ5XG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbG9hZEltYWdlcyAoc2VhcmNoUXVlcnkpIHtcbiAgICBpZiAoIXNlYXJjaFF1ZXJ5LnRyaW0oKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICBpbWFnZXM6IFtdXG4gICAgICB9LCAoKSA9PiB0aGlzLl9zY3JvbGxiYXIgJiYgdGhpcy5fc2Nyb2xsYmFyLnVwZGF0ZSgpKVxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiB0cnVlIH0pXG4gICAgcmV0dXJuIHRoaXMucHJvcHMubGlicmFyeS5zZWFyY2hJbWFnZXMoc2VhcmNoUXVlcnkpXG4gICAgICAudGhlbihpbWFnZXMgPT4ge1xuICAgICAgICB0aGlzLl9sb2FkVGh1bWJzKGltYWdlcylcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgaW1hZ2VzXG4gICAgICAgIH0sICgpID0+IHRoaXMuX3Njcm9sbGJhci51cGRhdGUoKSlcbiAgICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgbGlzdCBpdGVtc1xuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyTGlzdEl0ZW1zICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3QgZWRpdG9ySW1hZ2UgPSBlZGl0b3IuZ2V0SW1hZ2UoKVxuXG4gICAgaWYgKHRoaXMuc3RhdGUuaW1hZ2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIDxOb1Jlc3VsdHNUZXh0Pnt0aGlzLl90KCdwZXNkay5saWJyYXJ5LnRleHQubm9SZXN1bHRzJyl9PC9Ob1Jlc3VsdHNUZXh0PlxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0YXRlLmltYWdlc1xuICAgICAgLm1hcCgoaW1hZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuICg8SW1hZ2VMaXN0SXRlbUNvbXBvbmVudFxuICAgICAgICAgIGtleT17aW1hZ2UuZ2V0VGh1bWJVcmwoKX1cbiAgICAgICAgICBpbWFnZT17aW1hZ2V9XG4gICAgICAgICAgc2VsZWN0ZWQ9e2ltYWdlLmdldFJhd1VybCgpID09PSAoZWRpdG9ySW1hZ2UgJiYgZWRpdG9ySW1hZ2Uuc3JjKX1cbiAgICAgICAgICB2aXNpYmxlPXtpbWFnZS5pc1RodW1iTG9hZGVkKCl9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5fb25JbWFnZUNsaWNrLmJpbmQodGhpcywgaW1hZ2UpfSAvPilcbiAgICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5sb2FkaW5nKSByZXR1cm4gPExvYWRpbmdJbmRpY2F0b3JDb21wb25lbnQgLz5cblxuICAgIGNvbnN0IHsgaW5uZXJSZWYgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKDxSb290UGFuZWxXcmFwcGVyXG4gICAgICBpbm5lclJlZj17ZWwgPT4geyBpbm5lclJlZiAmJiBpbm5lclJlZihlbCk7IHRoaXMuX3dyYXBwZXIgPSBlbCB9fVxuICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1zZWFyY2hQYW5lbCcgOiB1bmRlZmluZWQpfT5cbiAgICAgIDxTY3JvbGxhYmxlTGlzdENvbXBvbmVudFxuICAgICAgICBkaXJlY3Rpb249J3ZlcnRpY2FsJ1xuICAgICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9zY3JvbGxiYXIgPSBlbCB9fT5cbiAgICAgICAgPEltYWdlTGlzdD5cbiAgICAgICAgICB7dGhpcy5fcmVuZGVyTGlzdEl0ZW1zKCl9XG4gICAgICAgIDwvSW1hZ2VMaXN0PlxuICAgICAgPC9TY3JvbGxhYmxlTGlzdENvbXBvbmVudD5cbiAgICA8L1Jvb3RQYW5lbFdyYXBwZXI+KVxuICB9XG59XG5cbmNvbnN0IFJvb3RQYW5lbFdyYXBwZXIgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlJyxcbiAgdGFibGVMYXlvdXQ6ICdmaXhlZCcsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICBib3JkZXJUb3A6IHRoZW1lID0+IGAxcHggc29saWQgJHt0aGVtZS5jb250cm9sc1NlcGFyYXRvckNvbG9yfWBcbn0pXG5cbmNvbnN0IEltYWdlTGlzdCA9IGFkb25pcy51bCh7XG4gIGxpc3RTdHlsZTogJ25vbmUnLFxuICBtYXJnaW46IDAsXG4gIHBhZGRpbmc6ICcyNXB4JyxcbiAgcGFkZGluZ0JvdHRvbTogMFxufSlcblxuY29uc3QgTm9SZXN1bHRzVGV4dCA9IGFkb25pcy5kaXYoe1xuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICBjb2xvcjogdGhlbWUgPT4gdGhlbWUudGV4dENvbG9yLFxuICBmb250RmFtaWx5OiB0aGVtZSA9PiB0aGVtZS5yZWd1bGFyRm9udEZhbWlseSxcbiAgZm9udFNpemU6ICcxNHB4J1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2xpYnJhcnkvbGlicmFyeS1zZWFyY2gtcGFuZWwtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgQmFzZUNvbXBvbmVudCwgQ29udHJvbHNTdHlsZXMsIFRyYW5zaXRpb24gfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5jb25zdCB7IENvbnRyb2xJdGVtLCBDb250cm9sSXRlbUFjdGl2ZU92ZXJsYXkgfSA9IENvbnRyb2xzU3R5bGVzXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbWFnZUxpc3RJdGVtQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc1BvcnRyYWl0OiBmYWxzZSxcbiAgICAgIGhvdmVyZWQ6IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIGEgbW91bnRlZCBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzXG4gICAqIEBwYXJhbSAge09iamVjdH0gbmV4dFByb3BzXG4gICAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy52aXNpYmxlICE9PSBuZXh0UHJvcHMudmlzaWJsZSkge1xuICAgICAgY29uc3QgaW1hZ2UgPSB0aGlzLnByb3BzLmltYWdlLmdldFRodW1iSW1hZ2UoKVxuICAgICAgaWYgKGltYWdlLmhlaWdodCA+IGltYWdlLndpZHRoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzUG9ydHJhaXQ6IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGltYWdlLCBvbkNsaWNrLCBzZWxlY3RlZCwgdmlzaWJsZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IGxpc3RJdGVtU3R5bGUgPSB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJyR7aW1hZ2UuZ2V0VGh1bWJVcmwoKX0nKWBcbiAgICB9XG5cbiAgICBjb25zdCBhdXRob3JBdmF0YXIgPSBpbWFnZS5nZXRBdXRob3JBdmF0YXIoKVxuICAgIGNvbnN0IHsgdHJhbnNpdGlvbkR1cmF0aW9uIH0gPSB0aGlzLmNvbnRleHQudGhlbWVcblxuICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBbKHRlc3QgPyAnanMtaW1hZ2VMaXN0SXRlbScgOiB1bmRlZmluZWQpLCBzZWxlY3RlZCAmJiAnaXMtc2VsZWN0ZWQnXS5maWx0ZXIoYyA9PiBjKVxuICAgIHJldHVybiAoPExpc3RJdGVtXG4gICAgICBhbmltYXRlZFxuICAgICAgc3R5bGU9e2xpc3RJdGVtU3R5bGV9XG4gICAgICBzZWxlY3RlZD17c2VsZWN0ZWR9XG4gICAgICB2aXNpYmxlPXt2aXNpYmxlfVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzLmpvaW4oJyAnKX1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBwb3J0cmFpdD17dGhpcy5zdGF0ZS5pc1BvcnRyYWl0fVxuICAgICAgb25Nb3VzZUVudGVyPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KX1cbiAgICAgIG9uTW91c2VMZWF2ZT17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pfT5cbiAgICAgIDxUcmFuc2l0aW9uXG4gICAgICAgIGFjdGl2ZT17dGhpcy5zdGF0ZS5ob3ZlcmVkfVxuICAgICAgICBlbnRlclByb3A9J3JlbmRlcmVkJ1xuICAgICAgICBlbnRlckR1cmF0aW9uPXt0cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfVxuICAgICAgICBhcHBlYXJQcm9wPSd2aXNpYmxlJ1xuICAgICAgICBhcHBlYXJEdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9uICogMTAwMH1cbiAgICAgICAgbGVhdmVEdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9uICogMTAwMH0+XG4gICAgICAgIDxBdXRob3Igc2VsZWN0ZWQ9e3NlbGVjdGVkfT5cbiAgICAgICAgICB7YXV0aG9yQXZhdGFyICYmIDxBdXRob3JBdmF0YXIgc3JjPXthdXRob3JBdmF0YXJ9IC8+fVxuICAgICAgICAgIDxBdXRob3JOYW1lPntpbWFnZS5nZXRBdXRob3JOYW1lKCl9PC9BdXRob3JOYW1lPlxuICAgICAgICA8L0F1dGhvcj5cbiAgICAgIDwvVHJhbnNpdGlvbj5cbiAgICAgIDxUcmFuc2l0aW9uXG4gICAgICAgIGFjdGl2ZT17c2VsZWN0ZWR9XG4gICAgICAgIGVudGVyUHJvcD0ncmVuZGVyZWQnXG4gICAgICAgIGVudGVyRHVyYXRpb249e3RyYW5zaXRpb25EdXJhdGlvbiAqIDEwMDB9XG4gICAgICAgIGFwcGVhclByb3A9J3Zpc2libGUnXG4gICAgICAgIGFwcGVhckR1cmF0aW9uPXt0cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfVxuICAgICAgICBsZWF2ZUR1cmF0aW9uPXt0cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfT5cbiAgICAgICAgPExpc3RJdGVtT3ZlcmxheSBzZWxlY3RlZCAvPlxuICAgICAgPC9UcmFuc2l0aW9uPlxuICAgIDwvTGlzdEl0ZW0+KVxuICB9XG59XG5cbmNvbnN0IExpc3RJdGVtID0gYWRvbmlzKENvbnRyb2xJdGVtKS5saSh7XG4gIHRyYW5zaXRpb246ICdvcGFjaXR5IDAuNXMgZWFzZS1vdXQsIHRyYW5zZm9ybSAwLjVzIGVhc2Utb3V0JyxcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZSA9PiB0aGVtZS5mb2N1c0l0ZW1CYWNrZ3JvdW5kQ29sb3IsXG4gIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICBiYWNrZ3JvdW5kU2l6ZTogJ2NvdmVyJyxcbiAgaGVpZ2h0OiAnMTEycHgnLFxuXG4gICc6bGFzdC1jaGlsZCc6IHtcbiAgICBtYXJnaW5Cb3R0b206IDBcbiAgfVxufSwge1xuICBwb3J0cmFpdDoge1xuICAgIGhlaWdodDogJzE4NHB4J1xuICB9XG59KVxuXG5jb25zdCBMaXN0SXRlbU92ZXJsYXkgPSBhZG9uaXMoQ29udHJvbEl0ZW1BY3RpdmVPdmVybGF5KS5kaXYoe1xuICB6SW5kZXg6IHRoZW1lID0+IHRoZW1lLnpJbmRleCgnY29udHJvbHNPdmVybGF5cycpXG59KVxuXG5jb25zdCBBdXRob3JBdmF0YXIgPSBhZG9uaXMuaW1nKHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIG1hcmdpblJpZ2h0OiAnMTBweCcsXG4gIGJvcmRlclJhZGl1czogJzUwJScsXG4gIHdpZHRoOiAnMjRweCcsXG4gIGhlaWdodDogJzI0cHgnLFxuICB2ZXJ0aWNhbEFsaWduOiAndG9wJ1xufSlcblxuY29uc3QgQXV0aG9yTmFtZSA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgbGluZUhlaWdodDogJzI0cHgnLFxuICBmb250RmFtaWx5OiB0aGVtZSA9PiB0aGVtZS5yZWd1bGFyRm9udEZhbWlseSxcbiAgZm9udFNpemU6ICcxM3B4JyxcbiAgb3BhY2l0eTogMSxcbiAgbWF4V2lkdGg6ICcxMjBweCcsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICB0ZXh0U2hhZG93OiAnMCAwIDRweCByZ2JhKDAsIDAsIDAsIDAuNSknXG59KVxuXG5jb25zdCBBdXRob3IgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnNTBweCcsXG4gIHBhZGRpbmc6ICcxMnB4JyxcbiAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ2NvbnRyb2xzT3ZlcmxheXMnKSArIDEsXG4gIGRpc3BsYXk6ICdub25lJyxcbiAgb3BhY2l0eTogMCxcbiAgdHJhbnNpdGlvbjogJ2FsbCAwLjNzIGVhc2Utb3V0JyxcbiAgbWFyZ2luQm90dG9tOiAnLTEwcHgnLFxuXG4gICc6YmVmb3JlJzoge1xuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBoZWlnaHQ6ICczMHB4JyxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMCxcbiAgICB6SW5kZXg6IDIsXG4gICAgb3BhY2l0eTogMC45LFxuICAgIGJhY2tncm91bmRJbWFnZTogJ2xpbmVhci1ncmFkaWVudCgtMTgwZGVnLCByZ2JhKDAsIDAsIDAsIDAuMDApIDAlLCByZ2JhKDAsIDAsIDAsIDAuMDApIDU0JSwgcmdiYSgwLCAwLCAwLCAwLjQ1KSAxMDAlKSdcbiAgfVxufSwge1xuICByZW5kZXJlZDoge1xuICAgIGRpc3BsYXk6ICdibG9jaydcbiAgfSxcbiAgdmlzaWJsZToge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNpdGlvbjogJ2FsbCAwLjNzIGVhc2UtaW4nLFxuICAgIG1hcmdpbkJvdHRvbTogMFxuICB9XG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvbGlicmFyeS9pbWFnZS1saXN0LWl0ZW0tY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgQmFzZUNvbXBvbmVudCwgVXRpbHMsIFRleHRJbnB1dENvbXBvbmVudCB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcblxuY29uc3QgU0VBUkNIX1FVRVJZX0RFQk9VTkNFX1RJTUUgPSAyNTBcbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaWJyYXJ5U2VhcmNoSGVhZGVyQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uSW5wdXRDaGFuZ2UnXG4gICAgKVxuXG4gICAgdGhpcy5fb25EZWJvdW5jZWRJbnB1dENoYW5nZSA9IFV0aWxzLmRlYm91bmNlKHRoaXMuX29uRGVib3VuY2VkSW5wdXRDaGFuZ2UsIFNFQVJDSF9RVUVSWV9ERUJPVU5DRV9USU1FKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNlYXJjaFF1ZXJ5SW5wdXRWYWx1ZTogJydcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogSW52b2tlZCBiZWZvcmUgYSBtb3VudGVkIGNvbXBvbmVudCByZWNlaXZlcyBuZXcgcHJvcHNcbiAgICogQHBhcmFtICB7T2JqZWN0fSBuZXh0UHJvcHNcbiAgICovXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLnNlYXJjaFF1ZXJ5ICE9PSBuZXh0UHJvcHMuc2VhcmNoUXVlcnkpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hRdWVyeUlucHV0VmFsdWU6IG5leHRQcm9wcy5zZWFyY2hRdWVyeSB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGltbWVkaWF0ZWx5IGJlZm9yZSBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYW5kIGRlc3Ryb3llZFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIHRoaXMuX2Rpc3Bvc2VkID0gdHJ1ZVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgaW5wdXQgdmFsdWUgaGFzIG5vdCBjaGFuZ2VkIGZvciAyNTBtc1xuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHZhbHVlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25EZWJvdW5jZWRJbnB1dENoYW5nZSAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5fZGlzcG9zZWQpIHJldHVyblxuXG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh2YWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGlucHV0IHZhbHVlIGhhcyBiZWVuIGNoYW5nZWRcbiAgICogQHBhcmFtICB7RXZlbnR9IGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25JbnB1dENoYW5nZSAoZXZlbnQpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBldmVudC50YXJnZXRcbiAgICB0aGlzLnNldFN0YXRlKHsgc2VhcmNoUXVlcnlJbnB1dFZhbHVlOiB2YWx1ZSB9KVxuICAgIHRoaXMuX29uRGVib3VuY2VkSW5wdXRDaGFuZ2UodmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKDxIZWFkZXIga2V5PSdoZWFkZXInPlxuICAgICAgPElucHV0Q29udGFpbmVyPlxuICAgICAgICA8VGV4dElucHV0XG4gICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMuX3QoJ3Blc2RrLmxpYnJhcnkucGxhY2Vob2xkZXIuc2VhcmNoJyl9XG4gICAgICAgICAgb25MaXZlQ2hhbmdlPXt0aGlzLl9vbklucHV0Q2hhbmdlfVxuICAgICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtc2VhcmNoSW5wdXQnIDogdW5kZWZpbmVkKX1cbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5zZWFyY2hRdWVyeUlucHV0VmFsdWV9IC8+XG4gICAgICA8L0lucHV0Q29udGFpbmVyPlxuICAgIDwvSGVhZGVyPilcbiAgfVxufVxuXG5jb25zdCBIZWFkZXIgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlLXJvdycsXG4gIGhlaWdodDogJzQ4cHgnLFxuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS5jb250cm9sc0xpZ2h0QmFja2dyb3VuZENvbG9yXG59KVxuXG5jb25zdCBJbnB1dENvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gIHBhZGRpbmc6ICc4cHggMjRweCdcbn0pXG5cbmNvbnN0IFRleHRJbnB1dCA9IGFkb25pcyhUZXh0SW5wdXRDb21wb25lbnQpKHtcbiAgd2lkdGg6ICcxMDAlJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2xpYnJhcnkvbGlicmFyeS1zZWFyY2gtaGVhZGVyLWNvbXBvbmVudC5qc3giLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIENhbnZhc0NvbnRyb2xzQ29tcG9uZW50IH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IFdlYmNhbUNvbXBvbmVudCBmcm9tICcuL3dlYmNhbS1jb21wb25lbnQnXG5pbXBvcnQgTGFyZ2VMaWJyYXJ5VXBsb2FkQ29tcG9uZW50IGZyb20gJy4vbGFyZ2UtbGlicmFyeS11cGxvYWQtY29tcG9uZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaWJyYXJ5Q2FudmFzQ29udHJvbHNDb21wb25lbnQgZXh0ZW5kcyBDYW52YXNDb250cm9sc0NvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBDYW52YXNDb250cm9sc0NvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vbkltYWdlJyxcbiAgICAgICdfb25XZWJjYW1CYWNrJyxcbiAgICAgICdfb25XZWJjYW1BY3RpdmF0ZWQnXG4gICAgKVxuXG4gICAgdGhpcy5zdGF0ZS5kaXNwbGF5SGVhZGVyID0gdHJ1ZVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBoYXMgc2hvdCBhbiBpbWFnZVxuICAgKiBAcGFyYW0gIHtJbWFnZX0gaW1hZ2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkltYWdlIChpbWFnZSkge1xuICAgIHRoaXMucHJvcHMuY29udHJvbHMub25JbWFnZShpbWFnZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHdlYmNhbSBkaXNhYmxlcyBkdWUgdG8gYW4gZXJyb3JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbldlYmNhbUJhY2sgKCkge1xuICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUoe1xuICAgICAgd2ViY2FtRW5hYmxlZDogZmFsc2VcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBvcGVucyB0aGUgd2ViY2FtXG4gICAqIEBwYXJhbSAge1N0cmluZ30gdmFsdWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbldlYmNhbUFjdGl2YXRlZCAodmFsdWUpIHtcbiAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHtcbiAgICAgIHdlYmNhbUVuYWJsZWQ6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgYWxsIGNvbnRyb2xzIG9udG8gdGhlIGNhbnZhcy5cbiAgICogQHJldHVybiBSZWFjdC5FbGVtZW50XG4gICAqL1xuICBfcmVuZGVyQ29udHJvbHMgKCkge1xuICAgIGNvbnN0IHdlYmNhbUVuYWJsZWQgPSB0aGlzLmdldFNoYXJlZFN0YXRlKCd3ZWJjYW1FbmFibGVkJylcbiAgICBjb25zdCB7IGRpc3BsYXlVcGxvYWRJbkNhbnZhcyB9ID0gdGhpcy5wcm9wcy5vcHRpb25zXG5cbiAgICBpZiAod2ViY2FtRW5hYmxlZCkge1xuICAgICAgcmV0dXJuICg8V2ViY2FtQ29tcG9uZW50XG4gICAgICAgIG9uSW1hZ2U9e3RoaXMuX29uSW1hZ2V9XG4gICAgICAgIG9uQmFjaz17dGhpcy5fb25XZWJjYW1CYWNrfSAvPilcbiAgICB9IGVsc2UgaWYgKGRpc3BsYXlVcGxvYWRJbkNhbnZhcykge1xuICAgICAgcmV0dXJuICg8TGlicmFyeVVwbG9hZENvbnRhaW5lcj5cbiAgICAgICAgPExhcmdlTGlicmFyeVVwbG9hZENvbXBvbmVudFxuICAgICAgICAgIGxhcmdlXG4gICAgICAgICAgY29udHJvbHM9e3RoaXMucHJvcHMuY29udHJvbHN9XG4gICAgICAgICAgd2ViY2FtRW5hYmxlZD17dGhpcy5wcm9wcy5vcHRpb25zLmVuYWJsZVdlYmNhbX1cbiAgICAgICAgICBvbldlYmNhbUFjdGl2YXRlZD17dGhpcy5fb25XZWJjYW1BY3RpdmF0ZWR9XG4gICAgICAgICAgb25JbWFnZT17dGhpcy5fb25JbWFnZX0gLz5cbiAgICAgIDwvTGlicmFyeVVwbG9hZENvbnRhaW5lcj4pXG4gICAgfVxuICB9XG59XG5cbmNvbnN0IExpYnJhcnlVcGxvYWRDb250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogJzEwMHB4JyxcbiAgbGVmdDogJzUwcHgnLFxuICByaWdodDogJzUwcHgnLFxuICBib3R0b206ICcxMDBweCdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9saWJyYXJ5L2xpYnJhcnktY2FudmFzLWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IE1hdGggYXMgUE1hdGgsIFV0aWxzIGFzIFNES1V0aWxzLCBMb2cgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIEJhc2VDb21wb25lbnQsIFV0aWxzLCBNb2RhbE1hbmFnZXIgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgV2ViY2FtVmlkZW9Db21wb25lbnQgZnJvbSAnLi93ZWJjYW0tdmlkZW8tY29tcG9uZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWJjYW1Db21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25XZWJjYW1SZWFkeScsXG4gICAgICAnX29uV2ViY2FtRXJyb3InLFxuICAgICAgJ19vbkJ1dHRvbkNsaWNrJyxcbiAgICAgICdfb25DYW5jZWxDbGljaydcbiAgICApXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgd2ViY2FtUmVhZHk6IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHdlYmNhbSBpcyByZWFkeSB0byBzZXJ2ZSBhIHZpZGVvXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25XZWJjYW1SZWFkeSAoKSB7XG4gICAgdGhpcy5wcm9wcy5vblJlYWR5ICYmIHRoaXMucHJvcHMub25SZWFkeSgpXG5cbiAgICB0aGlzLnNldFN0YXRlKHsgd2ViY2FtUmVhZHk6IHRydWUgfSlcbiAgfVxuXG4gIF9vbldlYmNhbUVycm9yIChtc2cpIHtcbiAgICBjb25zdCBlcnJvck1vZGFsID0gTW9kYWxNYW5hZ2VyLmluc3RhbmNlLmRpc3BsYXlFcnJvcihcbiAgICAgIHRoaXMuX3QoJ3Blc2RrLmNvbW1vbi50aXRsZS5lcnJvcicpLFxuICAgICAgdGhpcy5fdCgncGVzZGsuZWRpdG9yLnRleHQud2ViY2FtVW5hdmFpbGFibGVFcnJvcicsIHsgZXJyb3I6IG1zZyB9KVxuICAgIClcbiAgICBlcnJvck1vZGFsLm9uKCdjbG9zZScsICgpID0+IHRoaXMucHJvcHMub25CYWNrKCkpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgc2h1dHRlciBidXR0b25cbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkJ1dHRvbkNsaWNrIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgdGhpcy5fdGFrZVBob3RvKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBjYW5jZWwgYnV0dG9uXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25DYW5jZWxDbGljayAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMucHJvcHMub25CYWNrICYmXG4gICAgICB0aGlzLnByb3BzLm9uQmFjaygpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDQU1FUkFcblxuICAvKipcbiAgICogVGFrZXMgYSBwaG90b1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Rha2VQaG90byAoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLndlYmNhbVJlYWR5KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl93ZWJjYW0uY2FwdHVyZSgpXG4gICAgICAudGhlbihpbWFnZSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMub25JbWFnZSAmJlxuICAgICAgICAgIHRoaXMucHJvcHMub25JbWFnZShpbWFnZSlcbiAgICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuICg8Q29udGFpbmVyPlxuICAgICAgPEdyYWRpZW50PlxuICAgICAgICA8Q2FuY2VsQnV0dG9uXG4gICAgICAgICAgb25DbGljaz17dGhpcy5fb25DYW5jZWxDbGlja30+XG4gICAgICAgICAge3RoaXMuX3QoJ3Blc2RrLmNvbW1vbi5idXR0b24uY2FuY2VsJyl9XG4gICAgICAgIDwvQ2FuY2VsQnV0dG9uPlxuICAgICAgPC9HcmFkaWVudD5cbiAgICAgIDxPdXRlclZpZGVvQ29udGFpbmVyPlxuICAgICAgICA8VmlkZW9Db250YWluZXIgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fdmlkZW9Db250YWluZXIgPSBlbCB9fT5cbiAgICAgICAgICA8V2ViY2FtVmlkZW9Db21wb25lbnRcbiAgICAgICAgICAgIGZsYXNoVVJMPXt0aGlzLl9nZXRBc3NldFBhdGgoJ2ZhbGxiYWNrL3dlYmNhbS5zd2YnKX1cbiAgICAgICAgICAgIHJlZj17ZWwgPT4geyB0aGlzLl93ZWJjYW0gPSBlbCB9fVxuICAgICAgICAgICAgb25XZWJjYW1FcnJvcj17dGhpcy5fb25XZWJjYW1FcnJvcn1cbiAgICAgICAgICAgIG9uV2ViY2FtQXZhaWxhYmxlPXt0aGlzLl9vbldlYmNhbVJlYWR5fSAvPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uQnV0dG9uQ2xpY2t9IC8+XG4gICAgICAgIDwvVmlkZW9Db250YWluZXI+XG4gICAgICA8L091dGVyVmlkZW9Db250YWluZXI+XG4gICAgPC9Db250YWluZXI+KVxuICB9XG59XG5cbmNvbnN0IENvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgZGlzcGxheTogJ3RhYmxlJyxcbiAgdGFibGVMYXlvdXQ6ICdmaXhlZCcsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIGNvbG9yOiAnd2hpdGUnLFxuICB6SW5kZXg6IHRoZW1lID0+IHRoZW1lLnpJbmRleCgnY29udHJvbHNPdmVybGF5cycpLFxuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS5iYWNrZ3JvdW5kQ29sb3Jcbn0pXG5cbmNvbnN0IEdyYWRpZW50ID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzcycHgnLFxuICBiYWNrZ3JvdW5kSW1hZ2U6ICdsaW5lYXItZ3JhZGllbnQoMGRlZywgcmdiYSgwLDAsMCwwLjAwKSAyJSwgcmdiYSgwLDAsMCwwLjYwKSA1OSUsIHJnYmEoMCwwLDAsMC44NSkgMTAwJSknLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInXG59KVxuXG5jb25zdCBDYW5jZWxCdXR0b24gPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIHpJbmRleDogdGhlbWUgPT4gdGhlbWUuekluZGV4KCdjb250cm9sc092ZXJsYXlzJykgKyAyLFxuICBmb250RmFtaWx5OiB0aGVtZSA9PiB0aGVtZS51cHBlcmNhc2VTZW1pQm9sZEZvbnRGYW1pbHksXG4gIGNvbG9yOiB0aGVtZSA9PiB0aGVtZS50ZXh0Q29sb3IsXG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICBsZXR0ZXJTcGFjaW5nOiAnMnB4JyxcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gIHBhZGRpbmc6ICcxMHB4JyxcbiAgbWFyZ2luVG9wOiAnNnB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcidcbn0pXG5cbmNvbnN0IE91dGVyVmlkZW9Db250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlJyxcbiAgdGFibGVMYXlvdXQ6ICdmaXhlZCcsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICBwYWRkaW5nOiAnNzBweCA1MHB4IDUwcHggNTBweCdcbn0pXG5cbmNvbnN0IFZpZGVvQ29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIHRleHRBbGlnbjogJ2NlbnRlcidcbn0pXG5cbmNvbnN0IFZpZGVvID0gYWRvbmlzLnZpZGVvKHtcbiAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gIGJveFNoYWRvdzogJzAgMnB4IDJweCAwIHJnYmEoMCwwLDAsMC4zMCksIDAgNHB4IDRweCAwIHJnYmEoMCwwLDAsMC4zMCksIDAgOHB4IDhweCAwIHJnYmEoMCwwLDAsMC4zMCksIDAgMTZweCAxNnB4IDAgcmdiYSgwLDAsMCwwLjMwKSdcbn0sIHtcbiAgdmlzaWJsZToge1xuICAgIHZpc2liaWxpdHk6ICd2aXNpYmxlJ1xuICB9XG59KVxuXG5jb25zdCBCdXR0b24gPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvdHRvbTogJzMwcHgnLFxuICBsZWZ0OiAnNTAlJyxcbiAgbWFyZ2luTGVmdDogJy0zMHB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGJvcmRlclJhZGl1czogJzUwJScsXG4gIHdpZHRoOiAnNjBweCcsXG4gIGhlaWdodDogJzYwcHgnLFxuICBib3JkZXI6ICcycHggc29saWQgd2hpdGUnLFxuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS5wcmltYXJ5Q29sb3IsXG4gIGJveFNoYWRvdzogJzAgMnB4IDJweCAwIHJnYmEoMCwwLDAsMC4zMCksIDAgNHB4IDRweCAwIHJnYmEoMCwwLDAsMC4zMCksIDAgOHB4IDhweCAwIHJnYmEoMCwwLDAsMC4zMCksIDAgMTZweCAxNnB4IDAgcmdiYSgwLDAsMCwwLjMwKSdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9saWJyYXJ5L3dlYmNhbS1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuLyogZ2xvYmFsIEltYWdlICovXG5cbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGFkb25pcywgQmFzZUNvbXBvbmVudCB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2ViY2FtVmlkZW9Db21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmbGFzaFVSTDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbldlYmNhbUF2YWlsYWJsZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25XZWJjYW1FcnJvcjogUHJvcFR5cGVzLmZ1bmNcbiAgfVxuXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuXG4gICAgdGhpcy5fYmluZEFsbCgnX29uTG9hZGVkTWV0YWRhdGEnKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHdlYmNhbUF2YWlsYWJsZTogZmFsc2UsXG4gICAgICB1c2VGbGFzaEZhbGxiYWNrOiBmYWxzZVxuICAgIH1cblxuICAgIHRoaXMuX2dldFVzZXJNZWRpYSA9IG51bGxcbiAgICB0aGlzLl93ZWJjYW1TdHJlYW0gPSBudWxsXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgdGhpcy5faW5pdEdldFVzZXJNZWRpYSgpXG5cbiAgICBpZiAodGhpcy5fZ2V0VXNlck1lZGlhKSB7XG4gICAgICB0aGlzLl9nZXRVc2VyTWVkaWEoe1xuICAgICAgICB2aWRlbzoge1xuICAgICAgICAgIG9wdGlvbmFsOiBbXG4gICAgICAgICAgICB7bWluV2lkdGg6IDMyMH0sXG4gICAgICAgICAgICB7bWluV2lkdGg6IDY0MH0sXG4gICAgICAgICAgICB7bWluV2lkdGg6IDEwMjR9LFxuICAgICAgICAgICAge21pbldpZHRoOiAxMjgwfSxcbiAgICAgICAgICAgIHttaW5XaWR0aDogMTkyMH0sXG4gICAgICAgICAgICB7bWluV2lkdGg6IDI1NjB9XG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBhdWRpbzogZmFsc2VcbiAgICAgIH0pXG4gICAgICAgIC50aGVuKHN0cmVhbSA9PiB7XG4gICAgICAgICAgdGhpcy5fd2ViY2FtU3RyZWFtID0gc3RyZWFtXG4gICAgICAgICAgY29uc3QgdmlkZW8gPSB0aGlzLl92aWRlb0VsZW1lbnRcblxuICAgICAgICAgIGlmICgnc3JjT2JqZWN0JyBpbiB2aWRlbykge1xuICAgICAgICAgICAgdmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZpZGVvLnNyYyA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKHN0cmVhbSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMucHJvcHMub25XZWJjYW1FcnJvcikge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbldlYmNhbUVycm9yKGVycm9yKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRlbGV0ZVdlYmNhbSA9IGZhbHNlXG5cbiAgICAgIC8vIFNhZGx5IHdlIG5lZWQgdG8gcG9sdXRlIHRoZSBnbG9iYWwgbmFtZXNwYWNlIGZvciBmbGFzaC9qcyBjb21tdW5pY2F0aW9uXG4gICAgICAvLyBrZWVwaW5nIGl0IGF0IGEgbWluaW11bSBoZXJlXG4gICAgICBpZiAoIXdpbmRvdy5XZWJjYW0pIHtcbiAgICAgICAgd2luZG93LldlYmNhbSA9IHt9XG4gICAgICAgIGRlbGV0ZVdlYmNhbSA9IHRydWVcbiAgICAgIH1cblxuICAgICAgd2luZG93LldlYmNhbS5mbGFzaE5vdGlmeSA9ICh0eXBlLCBtc2cpID0+IHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSAnY2FtZXJhTGl2ZSc6XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgd2ViY2FtQXZhaWxhYmxlOiB0cnVlIH0sXG4gICAgICAgICAgICAgICgpID0+IHsgdGhpcy5wcm9wcy5vbldlYmNhbUF2YWlsYWJsZSAmJiB0aGlzLnByb3BzLm9uV2ViY2FtQXZhaWxhYmxlKCkgfSlcbiAgICAgICAgICAgIGRlbGV0ZSB3aW5kb3cuV2ViY2FtLmZsYXNoTm90aWZ5XG4gICAgICAgICAgICBpZiAoZGVsZXRlV2ViY2FtKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSB3aW5kb3cuV2ViY2FtXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25XZWJjYW1FcnJvciAmJiB0aGlzLnByb3BzLm9uV2ViY2FtRXJyb3IobXNnKVxuICAgICAgICAgICAgZGVsZXRlIHdpbmRvdy5XZWJjYW0uZmxhc2hOb3RpZnlcbiAgICAgICAgICAgIGlmIChkZWxldGVXZWJjYW0pIHtcbiAgICAgICAgICAgICAgZGVsZXRlIHdpbmRvdy5XZWJjYW1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgdGhpcy5fZGlzcG9zZVdlYmNhbSgpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBjdXJyZW50IGJyb3dzZXIgZW52aXJvbm1lbnQgZm9yIG1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgb2YgZm9yXG4gICAqIGxlZ2FjeSBuYXZpdGF0b3IuZ2V0VXNlck1lZGlhLCBhbmQgc2F2ZXMgYSBzaGltIGludG8gdGhlIF9nZXRVc2VyTWVkaWFcbiAgICogcHJvcGVydHkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBXZWJjYW1WaWRlb0NvbXBvbmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXRHZXRVc2VyTWVkaWEgKCkge1xuICAgIC8vIENoZWNrIGZvciBtZWRpYURldmljZXMjZ2V0VXNlck1lZGlhXG4gICAgaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMpIHtcbiAgICAgIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgICAgICB0aGlzLl9nZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYS5iaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTG9vayBmb3IgbGVnYWN5IG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgaW1wbGVtZW50YXRpb25zXG4gICAgaWYgKCF0aGlzLl9nZXRVc2VyTWVkaWEpIHtcbiAgICAgIGNvbnN0IGxlZ2FjeUdldFVzZXJNZWRpYSA9IG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgfHwgbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSB8fCBuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhIHx8IG5hdmlnYXRvci5tc0dldFVzZXJNZWRpYVxuXG4gICAgICBpZiAobGVnYWN5R2V0VXNlck1lZGlhKSB7XG4gICAgICAgIHRoaXMuX2dldFVzZXJNZWRpYSA9IG9wdGlvbnMgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gbGVnYWN5R2V0VXNlck1lZGlhLmNhbGwobmF2aWdhdG9yLCBvcHRpb25zLCByZXNvbHZlLCByZWplY3QpKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIG5vIGdldFVzZXJNZWRpYSBpcyBmb3VuZCwgdXNlIGZsYXNoIGZhbGxiY2FrXG4gICAgaWYgKCF0aGlzLl9nZXRVc2VyTWVkaWEpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB1c2VGbGFzaEZhbGxiYWNrOiB0cnVlIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERpc3Bvc2VzIHRoZSBjdXJyZW50IHdlYmNhbSBzdHJlYW0sIGlmIGF2YWlsYWJsZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIFdlYmNhbVZpZGVvQ29tcG9uZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGlzcG9zZVdlYmNhbSAoKSB7XG4gICAgaWYgKHRoaXMuX3dlYmNhbVN0cmVhbSkge1xuICAgICAgY29uc3Qgc3RyZWFtID0gdGhpcy5fd2ViY2FtU3RyZWFtXG4gICAgICBjb25zdCB0cmFjayA9IHN0cmVhbS5nZXRUcmFja3MoKVswXVxuICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgIHRyYWNrLnN0b3AoKVxuICAgICAgfSBlbHNlIGlmIChzdHJlYW0uc3RvcCkge1xuICAgICAgICBzdHJlYW0uc3RvcCgpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLl9mbGFzaFdlYmNhbSkge1xuICAgICAgdGhpcy5fZmxhc2hXZWJjYW0uX3JlbGVhc2VDYW1lcmEoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYXB0dXJlcyB0aGUgY3VycmVudCB3ZWJjYW0gaW1hZ2UgaW4gdGhlIHN0cmVhbSwgaWYgYXZhaWxhYmxlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxJbWFnZT59XG4gICAqIEBtZW1iZXJvZiBXZWJjYW1WaWRlb0NvbXBvbmVudFxuICAgKi9cbiAgY2FwdHVyZSAoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLndlYmNhbUF2YWlsYWJsZSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignV2ViY2FtIHZpZGVvIG5vdCBhdmFpbGFibGUnKSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdmlkZW9FbGVtZW50ICYmICF0aGlzLl9mbGFzaFdlYmNhbSkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdmlkZW8gPSB0aGlzLl92aWRlb0VsZW1lbnRcbiAgICAgICAgaWYgKHZpZGVvLnJlYWR5U3RhdGUgPT09IDApIHtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdXZWJjYW0gdmlkZW8gbm90IGF2YWlsYWJsZScpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gICAgICAgICAgY2FudmFzLndpZHRoID0gdmlkZW8udmlkZW9XaWR0aFxuICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSB2aWRlby52aWRlb0hlaWdodFxuXG4gICAgICAgICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UodmlkZW8sIDAsIDApXG5cbiAgICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKVxuICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGltYWdlKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgaW1hZ2Uuc3JjID0gY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvanBlZycpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmICh0aGlzLl9mbGFzaFdlYmNhbSkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgcmF3RGF0YSA9IHRoaXMuX2ZsYXNoV2ViY2FtLl9zbmFwKClcbiAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKVxuICAgICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7IHJlc29sdmUoaW1hZ2UpIH1cbiAgICAgICAgaW1hZ2Uuc3JjID0gYGRhdGE6aW1hZ2UvanBlZztiYXNlNjQsJHtyYXdEYXRhfWBcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignV2ViY2FtIHZpZGVvIG5vdCBhdmFpbGFibGUnKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgUmVhY3QgQ29tcG9uZW50IHdyYXBwaW5nIHRoZSBmbGFzaCB3ZWJjYW0gb2JqZWN0XG4gICAqIEByZXR1cm5zIHtSZWFjdC5Db21wb25lbnR9XG4gICAqIEBtZW1iZXJvZiBXZWJjYW1WaWRlb0NvbXBvbmVudFxuICAgKi9cbiAgX2dldEZsYXNoRmFsbGJhY2tDb21wb25lbnQgKCkge1xuICAgIGNvbnN0IHsgb2Zmc2V0V2lkdGgsIG9mZnNldEhlaWdodCB9ID0gdGhpcy5fY29udGFpbmVyXG5cbiAgICBsZXQgd2lkdGggPSA2NDBcbiAgICBsZXQgaGVpZ2h0ID0gNDgwXG5cbiAgICBpZiAob2Zmc2V0SGVpZ2h0ID4gb2Zmc2V0V2lkdGgpIHtcbiAgICAgIHdpZHRoID0gb2Zmc2V0V2lkdGggfHwgNjQwXG4gICAgICBoZWlnaHQgPSAoMyAvIDQpICogb2Zmc2V0V2lkdGhcbiAgICB9IGVsc2Uge1xuICAgICAgd2lkdGggPSAoNCAvIDMpICogb2Zmc2V0SGVpZ2h0XG4gICAgICBoZWlnaHQgPSBvZmZzZXRIZWlnaHQgfHwgNDgwXG4gICAgfVxuXG4gICAgY29uc3QgZmxhc2h2YXJzID0gYHdpZHRoPSR7d2lkdGh9JmhlaWdodD0ke2hlaWdodH0mZGVzdF93aWR0aD0xMDI0JmRlc3RfaGVpZ2h0PTc2OCZqcGVnX3F1YWxpdHk9MTAwJmZwcz0yNGBcblxuICAgIHJldHVybiAoXG4gICAgICA8b2JqZWN0IGNsYXNzSUQ9J2Nsc2lkOmQyN2NkYjZlLWFlNmQtMTFjZi05NmI4LTQ0NDU1MzU0MDAwMCcgdHlwZT0nYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2gnIHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9IHJlZj17ZSA9PiB7IHRoaXMuX2ZsYXNoV2ViY2FtID0gZSB9fSBhbGlnbj0nbWlkZGxlJz5cbiAgICAgICAgPHBhcmFtIG5hbWU9J3dtb2RlJyB2YWx1ZT0ndHJhbnNwYXJlbnQnIC8+XG4gICAgICAgIDxwYXJhbSBuYW1lPSdhbGxvd1NjcmlwdEFjY2VzcycgdmFsdWU9J2Fsd2F5cycgLz5cbiAgICAgICAgPHBhcmFtIG5hbWU9J2FsbG93RnVsbFNjcmVlbicgdmFsdWU9J2ZhbHNlJyAvPlxuICAgICAgICA8cGFyYW0gbmFtZT0nbW92aWUnIHZhbHVlPXt0aGlzLnByb3BzLmZsYXNoVVJMfSAvPlxuICAgICAgICA8cGFyYW0gbmFtZT0nbG9vcCcgdmFsdWU9J2ZhbHNlJyAvPlxuICAgICAgICA8cGFyYW0gbmFtZT0nbWVudScgdmFsdWU9J2ZhbHNlJyAvPlxuICAgICAgICA8cGFyYW0gbmFtZT0ncXVhbGl0eScgdmFsdWU9J2Jlc3QnIC8+XG4gICAgICAgIDxwYXJhbSBuYW1lPSdiZ2NvbG9yJyB2YWx1ZT0nI2ZmZmZmZicgLz5cbiAgICAgICAgPHBhcmFtIG5hbWU9J2ZsYXNodmFycycgdmFsdWU9e2ZsYXNodmFyc30gLz5cbiAgICAgIDwvb2JqZWN0PlxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgd2ViY2FtIHN0cmVhbSBtZXRhZGF0YSBpcyBsb2FkZWQgaW50byB0aGUgdmlkZW8gZWxlbWVudC5cbiAgICogQHByaXZhdGVcbiAgICogQG1lbWJlcm9mIFdlYmNhbVZpZGVvQ29tcG9uZW50XG4gICAqL1xuICBfb25Mb2FkZWRNZXRhZGF0YSAoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHdlYmNhbUF2YWlsYWJsZTogdHJ1ZSB9LFxuICAgICAgKCkgPT4geyB0aGlzLnByb3BzLm9uV2ViY2FtQXZhaWxhYmxlICYmIHRoaXMucHJvcHMub25XZWJjYW1BdmFpbGFibGUoKSB9KVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB2aWRlb0NvbXBvbmVudCA9IHRoaXMuc3RhdGUudXNlRmxhc2hGYWxsYmFja1xuICAgICAgPyB0aGlzLl9nZXRGbGFzaEZhbGxiYWNrQ29tcG9uZW50KClcbiAgICAgIDogPFZpZGVvXG4gICAgICAgIGF1dG9QbGF5XG4gICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUud2ViY2FtQXZhaWxhYmxlICYmICF0aGlzLnN0YXRlLnVzZUZsYXNoRmFsbGJhY2t9XG4gICAgICAgIGlubmVyUmVmPXtlID0+IHsgdGhpcy5fdmlkZW9FbGVtZW50ID0gZSB9fVxuICAgICAgICBvbkxvYWRlZE1ldGFkYXRhPXt0aGlzLl9vbkxvYWRlZE1ldGFkYXRhfSAvPlxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgc3R5bGU9e3t3aWR0aDogJzEwMCUnLCBoZWlnaHQ6ICcxMDAlJywgb3ZlcmZsb3c6ICdoaWRkZW4nfX1cbiAgICAgICAgcmVmPXtlbCA9PiB7IHRoaXMuX2NvbnRhaW5lciA9IGVsIH19PlxuICAgICAgICB7IHZpZGVvQ29tcG9uZW50IH1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5jb25zdCBWaWRlbyA9IGFkb25pcy52aWRlbyh7XG4gIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICB3aWR0aDogJzEwMCUnLFxuICBib3hTaGFkb3c6ICcwIDJweCAycHggMCByZ2JhKDAsMCwwLDAuMzApLCAwIDRweCA0cHggMCByZ2JhKDAsMCwwLDAuMzApLCAwIDhweCA4cHggMCByZ2JhKDAsMCwwLDAuMzApLCAwIDE2cHggMTZweCAwIHJnYmEoMCwwLDAsMC4zMCknXG59LCB7XG4gIHZpc2libGU6IHtcbiAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgfVxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2xpYnJhcnkvd2ViY2FtLXZpZGVvLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIENvbnRyb2xzU3R5bGVzLCBJbnZpc2libGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgTGlicmFyeVVwbG9hZENvbXBvbmVudCBmcm9tICcuL2xpYnJhcnktdXBsb2FkLWNvbXBvbmVudCdcbmNvbnN0IHsgUGxhaW5Db250cm9sSXRlbSwgUGxhaW5Db250cm9sSXRlbUJhY2tncm91bmQgfSA9IENvbnRyb2xzU3R5bGVzXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGFyZ2VMaWJyYXJ5VXBsb2FkQ29tcG9uZW50IGV4dGVuZHMgTGlicmFyeVVwbG9hZENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHdlYmNhbUJ1dHRvblN0eWxlID0ge1xuICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCcke3RoaXMuX2dldEFzc2V0UGF0aCgnZWRpdG9yL2NvbnRyb2xzL2xpYnJhcnkvd2ViY2FtLnBuZycsIHRydWUpfScpYFxuICAgIH1cbiAgICByZXR1cm4gKDxDb250YWluZXI+XG4gICAgICA8QmFja2dyb3VuZD5cbiAgICAgICAgPFJvdz5cbiAgICAgICAgICA8RHJvcFpvbmVcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uRHJvcFpvbmVDbGlja31cbiAgICAgICAgICAgIG9uRHJhZ0VudGVyPXt0aGlzLl9vbkRyb3Bab25lRHJhZ0VudGVyfVxuICAgICAgICAgICAgb25EcmFnT3Zlcj17dGhpcy5fb25Ecm9wWm9uZURyYWdPdmVyfVxuICAgICAgICAgICAgb25EcmFnTGVhdmU9e3RoaXMuX29uRHJvcFpvbmVEcmFnTGVhdmV9XG4gICAgICAgICAgICBvbkRyb3A9e3RoaXMuX29uRHJvcFpvbmVEcm9wfVxuICAgICAgICAgICAgaG92ZXJlZD17dGhpcy5zdGF0ZS5kcm9wWm9uZUhvdmVyZWR9PlxuICAgICAgICAgICAgPEludmlzaWJsZVVwbG9hZENvbXBvbmVudFxuICAgICAgICAgICAgICByZWY9J3VwbG9hZCdcbiAgICAgICAgICAgICAgb25OZXdGaWxlPXt0aGlzLl9vbk5ld0ZpbGV9IC8+XG4gICAgICAgICAgICB7dGhpcy5zdGF0ZS5kcm9wWm9uZUhvdmVyZWRcbiAgICAgICAgICAgICAgPyB0aGlzLl90KCdwZXNkay5saWJyYXJ5LmJ1dHRvbi5maWxlRHJvcFpvbmVIb3ZlcmVkJylcbiAgICAgICAgICAgICAgOiB0aGlzLl90KCdwZXNkay5saWJyYXJ5LmJ1dHRvbi5maWxlRHJvcFpvbmUnKX1cbiAgICAgICAgICA8L0Ryb3Bab25lPlxuICAgICAgICA8L1Jvdz5cbiAgICAgICAgeyF0aGlzLnN0YXRlLmRyb3Bab25lSG92ZXJlZCAmJiB0aGlzLnByb3BzLndlYmNhbUVuYWJsZWQgJiYgPFJvdz5cbiAgICAgICAgICA8V2ViY2FtQnV0dG9uXG4gICAgICAgICAgICBzdHlsZT17d2ViY2FtQnV0dG9uU3R5bGV9XG4gICAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXdlYmNhbUJ1dHRvbicgOiB1bmRlZmluZWQpfVxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5fb25XZWJjYW1DbGlja30gLz5cbiAgICAgICAgPC9Sb3c+fVxuICAgICAgPC9CYWNrZ3JvdW5kPlxuICAgIDwvQ29udGFpbmVyPilcbiAgfVxufVxuXG5jb25zdCBDb250YWluZXIgPSBhZG9uaXMoUGxhaW5Db250cm9sSXRlbSkuZGl2KHtcbiAgbWFyZ2luQm90dG9tOiAnMjRweCcsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICAnOmhvdmVyIConOiB7XG4gICAgb3BhY2l0eTogJzEnXG4gIH1cbn0pXG5cbmNvbnN0IEJhY2tncm91bmQgPSBhZG9uaXMoUGxhaW5Db250cm9sSXRlbUJhY2tncm91bmQpLmRpdih7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICBkaXNwbGF5OiAndGFibGUnLFxuICB0YWJsZUxheW91dDogJ2ZpeGVkJyxcbiAgcGFkZGluZzogJzAnXG59KVxuXG5jb25zdCBEcm9wWm9uZSA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gIGJvcmRlclJpZ2h0OiAnMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuICBwYWRkaW5nOiAnMThweCcsXG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnJlZ3VsYXJGb250RmFtaWx5LFxuICBmb250U2l6ZTogJzEzcHgnLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLmRpbW1lZFRleHRDb2xvclxufSwge1xuICBob3ZlcmVkOiB7XG4gICAgYmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNSknLFxuICAgIGJvcmRlclJpZ2h0OiAnbm9uZSdcbiAgfVxufSlcblxuY29uc3QgV2ViY2FtQnV0dG9uID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgaGVpZ2h0OiAnMTAwcHgnLFxuICBiYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjA2KSBuby1yZXBlYXQgY2VudGVyIGNlbnRlcicsXG4gIGJhY2tncm91bmRTaXplOiAnNDhweCA0OHB4J1xufSlcblxuY29uc3QgUm93ID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1yb3cnXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvbGlicmFyeS9sYXJnZS1saWJyYXJ5LXVwbG9hZC1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgRGVza3RvcFVJLCB7IEJhc2VDb250cm9scyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmltcG9ydCBBZGp1c3RtZW50c0NvbnRyb2xzQ29tcG9uZW50IGZyb20gJy4vYWRqdXN0bWVudHMtY29udHJvbHMtY29tcG9uZW50J1xuXG4vKipcbiAqIFRoZSBDb250cm9scyBmb3IgdGhlIEFkanVzdG1lbnRzIHRvb2wuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkNvbnRyb2xzXG4gKiBAZXh0ZW5kcyBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuQmFzZUNvbnRyb2xzXG4gKi9cbmNsYXNzIEFkanVzdG1lbnRzQ29udHJvbHMgZXh0ZW5kcyBCYXNlQ29udHJvbHMge1xuICBzdGF0aWMgY2xpY2tBdFBvc2l0aW9uID0gQmFzZUNvbnRyb2xzLmNsaWNrQXRQb3NpdGlvblxuICBzdGF0aWMgZ2V0UHJlbG9hZEFzc2V0cyA9IEJhc2VDb250cm9scy5nZXRQcmVsb2FkQXNzZXRzXG5cbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWRlbnRpZmllciA9ICdhZGp1c3RtZW50cydcblxuICAvKipcbiAgICogVGhlIGNvbnRyb2xzIGNvbXBvbmVudCBmb3IgdGhlc2UgY29udHJvbHNcbiAgICogQHR5cGUge1JlYWN0LkNvbXBvbmVudH1cbiAgICovXG4gIHN0YXRpYyBjb250cm9sc0NvbXBvbmVudCA9IEFkanVzdG1lbnRzQ29udHJvbHNDb21wb25lbnRcblxuICAvKipcbiAgICogVGhlIGNhbnZhcyBjb21wb25lbnQgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtSZWFjdC5Db21wb25lbnR9XG4gICAqL1xuICBzdGF0aWMgY2FudmFzQ29udHJvbHNDb21wb25lbnQgPSBCYXNlQ29udHJvbHMuY2FudmFzQ29udHJvbHNDb21wb25lbnRcblxuICAvKipcbiAgICogVGhlIGljb24gcGF0aCBvZiB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBpY29uUGF0aCA9ICdlZGl0b3IvY29udHJvbHMvYWRqdXN0bWVudHMvaWNvbi5wbmcnXG5cbiAgLyoqXG4gICAqIFRoZSBhY3RpdmUgaWNvbiBwYXRoIG9mIHRoaXMgY29udHJvbFxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGFjdGl2ZUljb25QYXRoID0gJ2VkaXRvci9jb250cm9scy9hZGp1c3RtZW50cy9pY29uLWFjdGl2ZS5wbmcnXG5cbiAgLyoqXG4gICAqIFRoZSBvcGVyYXRpb25zIHJlcXVpcmVkIGZvciB0aGlzIGNvbnRyb2wgdG8gd29yayBwcm9wZXJseVxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgcmVxdWlyZWRPcGVyYXRpb25zID0gWydhZGp1c3RtZW50cyddXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIHRoaXMgY29udHJvbFxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJvcGVydHkge1N0cmluZ1tdfSBbYXZhaWxhYmxlQWRqdXN0bWVudHMgPSBudWxsXVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIGF2YWlsYWJsZUFkanVzdG1lbnRzOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogT3BlcmF0aW9ucyB3aGljaCB3aWxsIHRyaWdnZXIgVUkgdXBkYXRlcyBvbiB0aGlzIGNvbnRyb2xzLlxuICAgKiBAdHlwZSB7U3RyaW5nW119XG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHN0YXRpYyB1cGRhdGFibGVPcGVyYXRpb25zID0gWydhZGp1c3RtZW50cyddXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBlZGl0b3Igd2lsbCBzd2l0Y2ggdG8gdGhlIGRlZmF1bHQgY29udHJvbHMgd2hlbiBhbnkgb2YgdGhlIHVwZGF0YWJsZU9wZXJhdGlvbnMgaXMgcmVtb3ZlZC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHN0YXRpYyBzd2l0Y2hUb0RlZmF1bHRDb250cm9sc09uUmVtb3ZhbCA9IGZhbHNlXG5cbiAgc3RhdGljIFNFQ1RJT05TID0gW1xuICAgIHtcbiAgICAgIGlkZW50aWZpZXI6ICdiYXNpY3MnLFxuICAgICAgaXRlbXM6IFsnYnJpZ2h0bmVzcycsICdzYXR1cmF0aW9uJywgJ2NvbnRyYXN0JywgJ2dhbW1hJ11cbiAgICB9LCB7XG4gICAgICBpZGVudGlmaWVyOiAncmVmaW5lbWVudHMnLFxuICAgICAgaXRlbXM6IFsnY2xhcml0eScsICdleHBvc3VyZScsICdzaGFkb3dzJywgJ2hpZ2hsaWdodHMnLCAnd2hpdGVzJywgJ2JsYWNrcycsICd0ZW1wZXJhdHVyZSddXG4gICAgfVxuICBdXG5cbiAgLyoqXG4gICAqIE1hcHMgdGhlIG9wZXJhdGlvbnMgc3RhdGUgdG8gYSBzaGFyZWQgc3RhdGUgb2JqZWN0XG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wZXJhdGlvbnNcbiAgICogQHBhcmFtIHtCb29sZWFufSBbaW5pdGlhbD1mYWxzZV1cbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBtYXBPcGVyYXRpb25zVG9TaGFyZWRTdGF0ZSAob3BlcmF0aW9ucywgaW5pdGlhbCA9IGZhbHNlKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gb3BlcmF0aW9ucy5nZXRPckNyZWF0ZSgnYWRqdXN0bWVudHMnKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIHByb3BzXG4gICAgICBicmlnaHRuZXNzOiBvcGVyYXRpb24uZ2V0QnJpZ2h0bmVzcygpLFxuICAgICAgc2F0dXJhdGlvbjogb3BlcmF0aW9uLmdldFNhdHVyYXRpb24oKSxcbiAgICAgIGNvbnRyYXN0OiBvcGVyYXRpb24uZ2V0Q29udHJhc3QoKSxcbiAgICAgIGdhbW1hOiBvcGVyYXRpb24uZ2V0R2FtbWEoKSxcbiAgICAgIGV4cG9zdXJlOiBvcGVyYXRpb24uZ2V0RXhwb3N1cmUoKSxcbiAgICAgIHNoYWRvd3M6IG9wZXJhdGlvbi5nZXRTaGFkb3dzKCksXG4gICAgICBoaWdobGlnaHRzOiBvcGVyYXRpb24uZ2V0SGlnaGxpZ2h0cygpLFxuICAgICAgY2xhcml0eTogb3BlcmF0aW9uLmdldENsYXJpdHkoKSxcbiAgICAgIHdoaXRlczogb3BlcmF0aW9uLmdldFdoaXRlcygpLFxuICAgICAgYmxhY2tzOiBvcGVyYXRpb24uZ2V0QmxhY2tzKCksXG4gICAgICB0ZW1wZXJhdHVyZTogb3BlcmF0aW9uLmdldFRlbXBlcmF0dXJlKCksXG5cbiAgICAgIC8vIHNldHRlcnMgLyBhY3Rpb25zXG4gICAgICBzZXRCcmlnaHRuZXNzOiB2YWx1ZSA9PiB7IG9wZXJhdGlvbi5zZXRCcmlnaHRuZXNzKHZhbHVlKSB9LFxuICAgICAgc2V0U2F0dXJhdGlvbjogdmFsdWUgPT4geyBvcGVyYXRpb24uc2V0U2F0dXJhdGlvbih2YWx1ZSkgfSxcbiAgICAgIHNldENvbnRyYXN0OiB2YWx1ZSA9PiB7IG9wZXJhdGlvbi5zZXRDb250cmFzdCh2YWx1ZSkgfSxcbiAgICAgIHNldEdhbW1hOiB2YWx1ZSA9PiB7IG9wZXJhdGlvbi5zZXRHYW1tYSh2YWx1ZSkgfSxcbiAgICAgIHNldEV4cG9zdXJlOiB2YWx1ZSA9PiB7IG9wZXJhdGlvbi5zZXRFeHBvc3VyZSh2YWx1ZSkgfSxcbiAgICAgIHNldFNoYWRvdzogdmFsdWUgPT4geyBvcGVyYXRpb24uc2V0U2hhZG93KHZhbHVlKSB9LFxuICAgICAgc2V0SGlnaGxpZ2h0czogdmFsdWUgPT4geyBvcGVyYXRpb24uc2V0SGlnaGxpZ2h0cyh2YWx1ZSkgfSxcbiAgICAgIHNldENsYXJpdHk6IHZhbHVlID0+IHsgb3BlcmF0aW9uLnNldENsYXJpdHkodmFsdWUpIH0sXG4gICAgICBzZXRXaGl0ZXM6IHZhbHVlID0+IHsgb3BlcmF0aW9uLnNldFdoaXRlcyh2YWx1ZSkgfSxcbiAgICAgIHNldEJsYWNrczogdmFsdWUgPT4geyBvcGVyYXRpb24uc2V0QmxhY2tzKHZhbHVlKSB9LFxuICAgICAgc2V0VGVtcGVyYXR1cmU6IHZhbHVlID0+IHsgb3BlcmF0aW9uLnNldFRlbXBlcmF0dXJlKHZhbHVlKSB9LFxuXG4gICAgICByZXNldDogKCkgPT4geyBvcGVyYXRpb24ucmVzZXRPcHRpb25zKCkgfSxcblxuICAgICAgc2V0T3BlcmF0aW9uT3B0aW9uczogb3B0cyA9PiB7IG9wZXJhdGlvbi5zZXQob3B0cykgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBjb250cm9sIGlzIGVuYWJsZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0VuYWJsZWQgKGVkaXRvcikge1xuICAgIHJldHVybiBlZGl0b3IuaXNUb29sQWxsb3dlZCgnYWRqdXN0bWVudCcpICYmIGVkaXRvci5pc1Rvb2xFbmFibGVkKCdhZGp1c3RtZW50cycpXG4gIH1cbn1cblxuRGVza3RvcFVJLkNvbnRyb2xzLkFkanVzdG1lbnRzQ29udHJvbHMgPSBBZGp1c3RtZW50c0NvbnRyb2xzXG5cbmV4cG9ydCBkZWZhdWx0IEFkanVzdG1lbnRzQ29udHJvbHNcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2FkanVzdG1lbnRzL2luZGV4LmpzIiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQge1xuICBSZWFjdCxcbiAgYWRvbmlzLFxuICBCdXR0b25Db21wb25lbnQsXG4gIENvbnN0YW50cyxcbiAgQ29udHJvbHNDb21wb25lbnQsXG4gIEdyb3VwZWRDb250cm9sc1N0eWxlcyxcbiAgQ29sbGFwc2VTZWN0aW9uQ29tcG9uZW50LFxuICBTY3JvbGxhYmxlTGlzdENvbXBvbmVudFxufSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgQWRqdXN0bWVudHNMaXN0SXRlbUNvbXBvbmVudCBmcm9tICcuL2FkanVzdG1lbnRzLWxpc3QtaXRlbS1jb21wb25lbnQnXG5cbmNvbnN0IHsgQ29udHJvbEdyb3VwTGlzdCB9ID0gR3JvdXBlZENvbnRyb2xzU3R5bGVzXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWRqdXN0bWVudHNDb250cm9sc0NvbXBvbmVudCBleHRlbmRzIENvbnRyb2xzQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IENvbnRyb2xzQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuICBzdGF0aWMgUm9vdEVsZW1lbnQgPSBDb250cm9sc0NvbXBvbmVudC5Sb290RWxlbWVudFxuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uUmVzZXREZWZhdWx0Q2xpY2snXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYWRqdXN0bWVudCBpcyBhdmFpbGFibGVcbiAgICogQHBhcmFtICB7U3RyaW59ICBpdGVtXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaXNBZGp1c3RtZW50QXZhaWxhYmxlIChpdGVtKSB7XG4gICAgY29uc3QgeyBhdmFpbGFibGVBZGp1c3RtZW50cyB9ID0gdGhpcy5wcm9wcy5vcHRpb25zXG4gICAgaWYgKGF2YWlsYWJsZUFkanVzdG1lbnRzID09PSBudWxsKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBhdmFpbGFibGVBZGp1c3RtZW50cy5pbmRleE9mKGl0ZW0pICE9PSAtMVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgJ3Jlc2V0IGRlZmF1bHQnIGJ1dHRvbjsgcmVzZXRzXG4gICAqIGFsbCBhZGp1c3RtZW50IHNldHRpbmdzIHRvIHRoZSBkZWZhdWx0IG9uZXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblJlc2V0RGVmYXVsdENsaWNrICgpIHtcbiAgICB0aGlzLnNoYXJlZFN0YXRlLnJlc2V0KClcbiAgICB0aGlzLnByb3BzLmNvbnRyb2xzLmFkZExvY2FsSGlzdG9yeVNuYXBzaG90KCdyZXNldCcsIHRydWUpXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHZhbHVlIGZvciBgaXRlbWAgaGFzIGJlZW4gY2hhbmdlZCBpbiB0aGUgVUkuXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpdGVtXG4gICAqIEBtZW1iZXJvZiBBZGp1c3RtZW50c0NvbnRyb2xzQ29tcG9uZW50XG4gICAqL1xuICBfb25WYWx1ZUNoYW5nZSAoaXRlbSwgdmFsdWUpIHtcbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldE9wZXJhdGlvbk9wdGlvbnMoeyBbaXRlbV06IHZhbHVlIH0pXG4gICAgdGhpcy5wcm9wcy5jb250cm9scy5hZGRMb2NhbEhpc3RvcnlTbmFwc2hvdChpdGVtLCB0cnVlKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGFkanVzdG1lbnRzIHNlY3Rpb25zIGFuZCB0aGVpciBpdGVtcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJBZGp1c3RtZW50c0NvbnRyb2xzICgpIHtcbiAgICBjb25zdCBtYWtlU2VjdGlvbiA9IChzZWN0aW9uKSA9PiB7XG4gICAgICByZXR1cm4gKDxDb2xsYXBzZVNlY3Rpb25Db21wb25lbnRcbiAgICAgICAga2V5PXtzZWN0aW9uLmlkZW50aWZpZXJ9XG4gICAgICAgIHRpdGxlPXt0aGlzLl90KGBwZXNkay5hZGp1c3RtZW50cy50aXRsZS4ke3NlY3Rpb24uaWRlbnRpZmllcn1gKX1cbiAgICAgICAgYWx3YXlzRXhwYW5kZWQ+XG4gICAgICAgIDxTZWN0aW9uSXRlbUxpc3RcbiAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXNlY3Rpb25JdGVtTGlzdC0nIDogdW5kZWZpbmVkKSArIHNlY3Rpb24uaWRlbnRpZmllcn0+XG4gICAgICAgICAge21ha2VJdGVtcyhzZWN0aW9uLml0ZW1zKX1cbiAgICAgICAgPC9TZWN0aW9uSXRlbUxpc3Q+XG4gICAgICA8L0NvbGxhcHNlU2VjdGlvbkNvbXBvbmVudD4pXG4gICAgfVxuXG4gICAgY29uc3QgbWFrZUl0ZW1zID0gKGl0ZW1zKSA9PlxuICAgICAgaXRlbXNcbiAgICAgICAgLmZpbHRlcihpdGVtID0+IHRoaXMuX2lzQWRqdXN0bWVudEF2YWlsYWJsZShpdGVtKSlcbiAgICAgICAgLm1hcChpdGVtID0+XG4gICAgICAgICAgdGhpcy5fbWFrZUl0ZW0oaXRlbSlcbiAgICAgICAgKVxuXG4gICAgY29uc3QgeyBTRUNUSU9OUyB9ID0gdGhpcy5wcm9wcy5jb250cm9scy5jb25zdHJ1Y3RvclxuICAgIHJldHVybiBTRUNUSU9OU1xuICAgICAgLmZpbHRlcihzZWN0aW9uID0+IHtcbiAgICAgICAgcmV0dXJuIHNlY3Rpb24uaXRlbXNcbiAgICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gdGhpcy5faXNBZGp1c3RtZW50QXZhaWxhYmxlKGl0ZW0pKVxuICAgICAgICAgIC5sZW5ndGggPiAwXG4gICAgICB9KVxuICAgICAgLm1hcChtYWtlU2VjdGlvbilcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGFkanVzdG1lbnRzIGl0ZW1cbiAgICogQHBhcmFtICB7T2JqZWN0fSBpdGVtXG4gICAqIEByZXR1cm4ge1NsaWRlckNvbnRyb2xDb21wb25lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbWFrZUl0ZW0gKGl0ZW0pIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc2hhcmVkU3RhdGVbaXRlbV1cbiAgICByZXR1cm4gKDxBZGp1c3RtZW50c0xpc3RJdGVtQ29tcG9uZW50XG4gICAgICBpdGVtPXtpdGVtfVxuICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgb25WYWx1ZUNoYW5nZT17dGhpcy5fb25WYWx1ZUNoYW5nZS5iaW5kKHRoaXMsIGl0ZW0pfVxuICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1zbGlkZXJDb250cm9sJyA6IHVuZGVmaW5lZCl9XG4gICAgICBrZXk9e2l0ZW19IC8+KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb3BlcnRpZXMgZm9yIHRoZSByb290IGVsZW1lbnRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFJvb3RQcm9wcyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzTmFtZTogKHRlc3QgPyAnanMtYWRqdXN0bWVudHNDb250cm9scycgOiB1bmRlZmluZWQpLFxuICAgICAgd2l0aEJvcmRlclRvcDogdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29udHJvbCdzIGNvbnRlbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIF9yZW5kZXJDb250ZW50ICgpIHtcbiAgICByZXR1cm4gKDxTY3JvbGxhYmxlTGlzdENvbXBvbmVudFxuICAgICAgZGlyZWN0aW9uPSd2ZXJ0aWNhbCdcbiAgICAgIGlubmVyTGlzdFJlZj17ZWwgPT4geyB0aGlzLl9saXN0ID0gZWwgfX1cbiAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX3Njcm9sbGJhciA9IGVsIH19PlxuICAgICAgPFNlY3Rpb25MaXN0PlxuICAgICAgICA8Qm90dG9tU2VjdGlvbj5cbiAgICAgICAgICA8QnV0dG9uQ29tcG9uZW50XG4gICAgICAgICAgICB0aXRsZT17dGhpcy5fdCgncGVzZGsuYWRqdXN0bWVudHMuYnV0dG9uLnJlc2V0Jyl9XG4gICAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWFkanVzdG1lbnRzUmVzZXREZWZhdWx0JyA6IHVuZGVmaW5lZCl9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLl9vblJlc2V0RGVmYXVsdENsaWNrfSAvPlxuICAgICAgICA8L0JvdHRvbVNlY3Rpb24+XG4gICAgICAgIHt0aGlzLl9yZW5kZXJBZGp1c3RtZW50c0NvbnRyb2xzKCl9XG4gICAgICA8L1NlY3Rpb25MaXN0PlxuICAgIDwvU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQ+KVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxFU1xuXG5jb25zdCBTZWN0aW9uTGlzdCA9IGFkb25pcyhDb250cm9sR3JvdXBMaXN0KS51bCh7XG4gIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gIG92ZXJmbG93WTogJ2F1dG8nLFxuICB3aWR0aDogJzEwMCUnXG59KVxuXG5jb25zdCBTZWN0aW9uSXRlbUxpc3QgPSBhZG9uaXMudWwoe1xuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgcGFkZGluZzogJzAnXG59KVxuXG5jb25zdCBCb3R0b21TZWN0aW9uID0gYWRvbmlzLmRpdih7XG4gIHBhZGRpbmc6ICcyNXB4JyxcbiAgcGFkZGluZ0JvdHRvbTogJzEwcHgnXG59KVxuXG4vLyBjb25zdCBTY2VuZXNMaXN0ID0gYWRvbmlzKENvbnRyb2xHcm91cExpc3QpLnVsKHtcbi8vICAgcGFkZGluZzogJzI1cHgnXG4vLyB9KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvYWRqdXN0bWVudHMvYWRqdXN0bWVudHMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IFNESyBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCB7IFJlYWN0LCBTaGFyZWRTdGF0ZUNvbXBvbmVudCwgU2xpZGVyQ29udHJvbENvbXBvbmVudCB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmNvbnN0IHsgQWRqdXN0bWVudHNPcGVyYXRpb24gfSA9IFNESy5PcGVyYXRpb25zXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFkanVzdG1lbnRzTGlzdEl0ZW1Db21wb25lbnQgZXh0ZW5kcyBTaGFyZWRTdGF0ZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBTaGFyZWRTdGF0ZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vblZhbHVlQ2hhbmdlJ1xuICAgIClcblxuICAgIHRoaXMuX29wdGlvbiA9IEFkanVzdG1lbnRzT3BlcmF0aW9uLnByb3RvdHlwZS5hdmFpbGFibGVPcHRpb25zW3RoaXMucHJvcHMuaXRlbV1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSByZW5kZXJpbmcgd2hlbiBuZXcgcHJvcHMgb3Igc3RhdGUgYXJlIGJlaW5nIHJlY2VpdmVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMpIHtcbiAgICByZXR1cm4gbmV4dFByb3BzLnZhbHVlICE9PSB0aGlzLnByb3BzLnZhbHVlXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkIGJ5IGVpdGhlciB0aGUgaW5wdXQgb3IgdGhlIHNsaWRlclxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHZhbHVlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25WYWx1ZUNoYW5nZSAodmFsdWUpIHtcbiAgICBjb25zdCB7IG1pblZhbHVlLCBtaWRWYWx1ZSwgbWF4VmFsdWUgfSA9IHRoaXMuX29wdGlvblxuXG4gICAgdmFsdWUgPSB2YWx1ZSA8IDBcbiAgICAgID8gKG1pZFZhbHVlICsgKG1pZFZhbHVlIC0gbWluVmFsdWUpICogdmFsdWUgLyAxMDApXG4gICAgICA6IChtaWRWYWx1ZSArIChtYXhWYWx1ZSAtIG1pZFZhbHVlKSAqIHZhbHVlIC8gMTAwKVxuXG4gICAgdGhpcy5wcm9wcy5vbkJlZm9yZVZhbHVlQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQmVmb3JlVmFsdWVDaGFuZ2UodmFsdWUpXG5cbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgZWRpdG9yLnJlbmRlcigpXG5cbiAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWUgfSlcblxuICAgIHRoaXMucHJvcHMub25WYWx1ZUNoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vblZhbHVlQ2hhbmdlKHZhbHVlKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGxldCB7IG1pblZhbHVlLCBtaWRWYWx1ZSwgbWF4VmFsdWUgfSA9IHRoaXMuX29wdGlvblxuXG4gICAgbGV0IHZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZVxuXG4gICAgbGV0IHNsaWRlclZhbHVlID0gKHZhbHVlIDw9IG1pZFZhbHVlXG4gICAgICA/ICh2YWx1ZSAtIG1pblZhbHVlKSAvIChtaWRWYWx1ZSAtIG1pblZhbHVlKSAtIDFcbiAgICAgIDogKHZhbHVlIC0gbWlkVmFsdWUpIC8gKG1heFZhbHVlIC0gbWlkVmFsdWUpKSAqIDEwMFxuXG4gICAgaWYgKHZhbHVlID09PSBtaW5WYWx1ZSkgc2xpZGVyVmFsdWUgPSAtMTAwIC8vIFBvb3IgbWFuJ3MgJ2RpdmlzaW9uIGJ5IHplcm8nIGhhbmRsaW5nXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNsaWRlckNvbnRyb2xDb21wb25lbnRcbiAgICAgICAga2V5PXt0aGlzLnByb3BzLml0ZW19XG4gICAgICAgIGxhYmVsPXt0aGlzLl90KGBwZXNkay5hZGp1c3RtZW50cy50ZXh0LiR7dGhpcy5wcm9wcy5pdGVtfWApfVxuICAgICAgICBtaW5WYWx1ZT17LTEwMH1cbiAgICAgICAgbWF4VmFsdWU9ezEwMH1cbiAgICAgICAgdmFsdWU9e3BhcnNlSW50KHNsaWRlclZhbHVlKX1cbiAgICAgICAgb25TbGlkZXJWYWx1ZUNoYW5nZT17dGhpcy5fb25WYWx1ZUNoYW5nZX1cbiAgICAgICAgb25WYWx1ZUNoYW5nZT17dGhpcy5fb25WYWx1ZUNoYW5nZX1cbiAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX1cbiAgICAgICAgbWlkZGxlRG90IC8+XG4gICAgKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9hZGp1c3RtZW50cy9hZGp1c3RtZW50cy1saXN0LWl0ZW0tY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgQ29sb3IsIE9wZXJhdGlvbnMgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCBEZXNrdG9wVUksIHsgQmFzZUNvbnRyb2xzIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IEJydXNoQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi9icnVzaC1jb250cm9scy1jb21wb25lbnQnXG5pbXBvcnQgQnJ1c2hDYW52YXNDb250cm9sc0NvbXBvbmVudCBmcm9tICcuL2JydXNoLWNhbnZhcy1jb250cm9scy1jb21wb25lbnQnXG5cbmNvbnN0IHsgQnJ1c2hTcHJpdGUgfSA9IE9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uID8gT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24gOiB7fVxuXG4vKipcbiAqIFRoZSBDb250cm9scyBmb3IgdGhlIEJydXNoIHRvb2wuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkNvbnRyb2xzXG4gKiBAZXh0ZW5kcyBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuQmFzZUNvbnRyb2xzXG4gKi9cbmNsYXNzIEJydXNoQ29udHJvbHMgZXh0ZW5kcyBCYXNlQ29udHJvbHMge1xuICBjb25zdHJ1Y3RvciAoY29udGV4dCwgc2hhcmVkU3RhdGUsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihjb250ZXh0LCBzaGFyZWRTdGF0ZSwgb3B0aW9ucylcbiAgICB0aGlzLl9vbk9wZXJhdGlvblJlbW92ZWQgPSB0aGlzLl9vbk9wZXJhdGlvblJlbW92ZWQuYmluZCh0aGlzKVxuICB9XG5cbiAgc3RhdGljIGNsaWNrQXRQb3NpdGlvbiA9IEJhc2VDb250cm9scy5jbGlja0F0UG9zaXRpb25cbiAgc3RhdGljIGdldFByZWxvYWRBc3NldHMgPSBCYXNlQ29udHJvbHMuZ2V0UHJlbG9hZEFzc2V0c1xuXG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGlkZW50aWZpZXIgPSAnYnJ1c2gnXG5cbiAgLyoqXG4gICAqIFRoZSBjb250cm9scyBjb21wb25lbnQgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtSZWFjdC5Db21wb25lbnR9XG4gICAqL1xuICBzdGF0aWMgY29udHJvbHNDb21wb25lbnQgPSBCcnVzaENvbnRyb2xzQ29tcG9uZW50XG5cbiAgLyoqXG4gICAqIFRoZSBjYW52YXMgY29udHJvbHMgY29tcG9uZW50IGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7UmVhY3QuQ29tcG9uZW50fVxuICAgKi9cbiAgc3RhdGljIGNhbnZhc0NvbnRyb2xzQ29tcG9uZW50ID0gQnJ1c2hDYW52YXNDb250cm9sc0NvbXBvbmVudFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiBwYXRoIG9mIHRoaXMgY29udHJvbFxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGljb25QYXRoID0gJ2VkaXRvci9jb250cm9scy9icnVzaC9pY29uLnBuZydcblxuICAvKipcbiAgICogVGhlIGFjdGl2ZSBpY29uIHBhdGggb2YgdGhpcyBjb250cm9sXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgYWN0aXZlSWNvblBhdGggPSAnZWRpdG9yL2NvbnRyb2xzL2JydXNoL2ljb24tYWN0aXZlLnBuZydcblxuICAvKipcbiAgICogVGhlIG9wZXJhdGlvbnMgcmVxdWlyZWQgZm9yIHRoaXMgY29udHJvbCB0byB3b3JrIHByb3Blcmx5XG4gICAqIEB0eXBlIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyByZXF1aXJlZE9wZXJhdGlvbnMgPSBbJ3Nwcml0ZSddXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIHRoaXMgY29udHJvbFxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJvcGVydHkge09iamVjdFtdfSBbYnJ1c2hlcyA9IFtdXVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtyZXBsYWNlQnJ1c2hlcyA9IGZhbHNlXVxuICAgKiBAcHJvcGVydHkge1N0cmluZ1tdfSBbYXZhaWxhYmxlQnJ1c2hlcyA9IG51bGxdXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgYnJ1c2hlczogW10sXG4gICAgcmVwbGFjZUJydXNoZXM6IGZhbHNlLFxuICAgIGF2YWlsYWJsZUJydXNoZXM6IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVyYXRpb25zIHdoaWNoIHdpbGwgdHJpZ2dlciBVSSB1cGRhdGVzIG9uIHRoaXMgY29udHJvbHMuXG4gICAqIEB0eXBlIHtTdHJpbmdbXX1cbiAgICogQHN0YXRpY1xuICAgKi9cbiAgc3RhdGljIHVwZGF0YWJsZU9wZXJhdGlvbnMgPSBbJ3Nwcml0ZSddXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBlZGl0b3Igd2lsbCBzd2l0Y2ggdG8gdGhlIGRlZmF1bHQgY29udHJvbHMgd2hlbiBhbnkgb2YgdGhlIHVwZGF0YWJsZU9wZXJhdGlvbnMgaXMgcmVtb3ZlZC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHN0YXRpYyBzd2l0Y2hUb0RlZmF1bHRDb250cm9sc09uUmVtb3ZhbCA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIE1hcHMgdGhlIG9wZXJhdGlvbnMgc3RhdGUgdG8gYSBzaGFyZWQgc3RhdGUgb2JqZWN0XG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wZXJhdGlvbnNcbiAgICogQHBhcmFtIHtCb29sZWFufSBbaW5pdGlhbD1mYWxzZV1cbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBtYXBPcGVyYXRpb25zVG9TaGFyZWRTdGF0ZSAob3BlcmF0aW9ucywgaW5pdGlhbCA9IGZhbHNlLCBwcmV2aW91c1N0YXRlID0ge30pIHtcbiAgICBsZXQgb3BlcmF0aW9uID0gb3BlcmF0aW9ucy5nZXRPckNyZWF0ZSgnc3ByaXRlJylcbiAgICByZXR1cm4geyBvcGVyYXRpb24gfVxuICB9XG5cbiAgLyoqXG4gICAqIElzIGNhbGxlZCB3aGVuIGEgY29udHJvbCBpcyBlbnRlcmVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25FbnRlciAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IG9wZXJhdGlvbiA9IGVkaXRvci5vcGVyYXRpb25zLmdldE9yQ3JlYXRlKCdzcHJpdGUnKVxuICAgIGNvbnN0IGJydXNoU3ByaXRlID0gb3BlcmF0aW9uLmNyZWF0ZUJydXNoKClcbiAgICBvcGVyYXRpb24uYWRkU3ByaXRlKGJydXNoU3ByaXRlKVxuXG4gICAgY29uc3QgZ2xvYmFsT3B0aW9ucyA9IHRoaXMuZ2V0R2xvYmFsVG9vbFN0YXRlKClcbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdsb2JhbE9wdGlvbnMgfHwge1xuICAgICAgYnJ1c2hDb2xvcjogQ29sb3IuV0hJVEUsXG4gICAgICBicnVzaFNpemU6IDAuMSxcbiAgICAgIGJydXNoSGFyZG5lc3M6IDUwXG4gICAgfVxuXG4gICAgZWRpdG9yLnpvb20uYXV0byhmYWxzZSwgZmFsc2UsICgpID0+IHtcbiAgICAgIGVkaXRvci5mZWF0dXJlcy5kaXNhYmxlKCd6b29tJywgJ2RyYWcnKVxuXG4gICAgICBjb25zdCBvdXRwdXREaW1lbnNpb25zID0gZWRpdG9yLmdldE91dHB1dERpbWVuc2lvbnMoKVxuICAgICAgbGV0IGJydXNoU2l6ZSA9IE1hdGgubWF4KG91dHB1dERpbWVuc2lvbnMubWluKCkgKiAwLjA1LCAxKVxuICAgICAgaWYgKHRoaXMuX29wdGlvbnMud2lkdGhQcmVzZXRzICYmIHRoaXMuX29wdGlvbnMud2lkdGhQcmVzZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYnJ1c2hTaXplID0gdGhpcy5fb3B0aW9ucy5zaXplUHJlc2V0c1swXVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNoYXJlZFN0YXRlLnNldCh7XG4gICAgICAgIGJydXNoU2l6ZTogZ2xvYmFsT3B0aW9ucyA/IGdsb2JhbE9wdGlvbnMuYnJ1c2hTaXplIDogTWF0aC5yb3VuZChicnVzaFNpemUpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldCh7XG4gICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIG9wZXJhdGlvbixcbiAgICAgIGJydXNoU3ByaXRlXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgbGVhdmVzIHRoaXMgY29udHJvbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uTGVhdmUgKCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBvcGVyYXRpb24gPSBlZGl0b3Iub3BlcmF0aW9ucy5nZXQoJ3Nwcml0ZScpXG5cbiAgICAvLyBSZW1vdmUgdW51c2VkIHNwcml0ZXNcbiAgICBpZiAob3BlcmF0aW9uKSB7XG4gICAgICBjb25zdCBzcHJpdGVzID0gWy4uLm9wZXJhdGlvbi5nZXRTcHJpdGVzKCldXG4gICAgICBzcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgaWYgKHNwcml0ZSBpbnN0YW5jZW9mIEJydXNoU3ByaXRlKSB7XG4gICAgICAgICAgaWYgKHNwcml0ZS5nZXRQYXRocygpLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICBvcGVyYXRpb24ucmVtb3ZlU3ByaXRlKHNwcml0ZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5zYXZlQnJ1c2hTZXR0aW5ncygpXG5cbiAgICBlZGl0b3IuZmVhdHVyZXMuZW5hYmxlKCd6b29tJywgJ2RyYWcnKVxuICAgIGVkaXRvci5yZW5kZXIoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gYW4gb3BlcmF0aW9uIGhhcyBiZWVuIHJlbW92ZWQuIElmIGl0IGlzIHRoZSBzYW1lIG9wZXJhdGlvbiB0aGF0XG4gICAqIHRoaXMgY29udHJvbCBiZWxvbmdzIHRvLCBpdCBzd2l0Y2hlcyBiYWNrIHRvIHRoZSBvdmVydmlldywgbGVhdmluZyB0aGlzIGNvbnRyb2xcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbk9wZXJhdGlvblJlbW92ZWQgKG9wZXJhdGlvbikge1xuICAgIGNvbnN0IGN1cnJlbnRPcGVyYXRpb24gPSB0aGlzLnNoYXJlZFN0YXRlLmdldCgnb3BlcmF0aW9uJylcbiAgICBpZiAob3BlcmF0aW9uID09PSBjdXJyZW50T3BlcmF0aW9uKSB7XG4gICAgICAvLyBUaGlzIGNvbnRyb2wgbmVlZHMgYW4gZXhpc3RlbnQgb3BlcmF0aW9uIGF0IGFsbCB0aW1lcywgc28gcmUtY3JlYXRlIGl0XG4gICAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmNvbnRleHQuZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ3Nwcml0ZScpXG4gICAgICBjb25zdCBicnVzaFNwcml0ZSA9IG9wZXJhdGlvbi5jcmVhdGVCcnVzaCgpXG4gICAgICBvcGVyYXRpb24uYWRkU3ByaXRlKGJydXNoU3ByaXRlKVxuXG4gICAgICB0aGlzLnNoYXJlZFN0YXRlLnNldCh7XG4gICAgICAgIG9wZXJhdGlvbixcbiAgICAgICAgYnJ1c2hTcHJpdGVcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgc2F2ZUJydXNoU2V0dGluZ3MgKCkge1xuICAgIHRoaXMuc2V0R2xvYmFsVG9vbFN0YXRlKHtcbiAgICAgIGJydXNoQ29sb3I6IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCdicnVzaENvbG9yJyksXG4gICAgICBicnVzaFNpemU6IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCdicnVzaFNpemUnKSxcbiAgICAgIGJydXNoSGFyZG5lc3M6IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCdicnVzaEhhcmRuZXNzJylcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGNvbnRyb2wgaXMgZW5hYmxlZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRW5hYmxlZCAoZWRpdG9yKSB7XG4gICAgcmV0dXJuIGVkaXRvci5pc1Rvb2xBbGxvd2VkKCdicnVzaCcpICYmIGVkaXRvci5pc1Rvb2xFbmFibGVkKCdicnVzaCcpXG4gIH1cbn1cblxuRGVza3RvcFVJLkNvbnRyb2xzLkJydXNoQ29udHJvbHMgPSBCcnVzaENvbnRyb2xzXG5cbmV4cG9ydCBkZWZhdWx0IEJydXNoQ29udHJvbHNcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2JydXNoL2luZGV4LmpzIiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBPcGVyYXRpb25zLCBVdGlscyBhcyBTREtVdGlscyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgQ29uc3RhbnRzLCBDb250cm9sc0NvbXBvbmVudCwgQ29sb3JTZWxlY3Rpb25Db21wb25lbnQsIFNsaWRlckNvbnRyb2xDb21wb25lbnQsIFNjcm9sbGFibGVMaXN0Q29tcG9uZW50LCBTY3JvbGxiYXJDb21wb25lbnQsIEdyb3VwZWRDb250cm9sc1N0eWxlcywgQnJ1c2hNYW5hZ2VyIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IEJydXNoTGlzdEl0ZW1Db21wb25lbnQgZnJvbSAnLi9icnVzaC1saXN0LWl0ZW0tY29tcG9uZW50J1xuXG5jb25zdCB7IFNwcml0ZU9wZXJhdGlvbiB9ID0gT3BlcmF0aW9uc1xubGV0IEJydXNoXG5pZiAoU3ByaXRlT3BlcmF0aW9uKSB7XG4gIEJydXNoID0gT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uQnJ1c2hTcHJpdGUuQnJ1c2hcbn1cbmNvbnN0IHsgQ29udHJvbEdyb3VwVGl0bGUsIENvbnRyb2xHcm91cCB9ID0gR3JvdXBlZENvbnRyb2xzU3R5bGVzXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcnVzaENvbnRyb2xzQ29tcG9uZW50IGV4dGVuZHMgQ29udHJvbHNDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQ29udHJvbHNDb21wb25lbnQuY29udGV4dFR5cGVzXG4gIHN0YXRpYyBSb290RWxlbWVudCA9IENvbnRyb2xzQ29tcG9uZW50LlJvb3RFbGVtZW50XG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25CcnVzaENvbG9yQ2hhbmdlZCcsXG4gICAgICAnX29uQnJ1c2hIYXJkbmVzc0NoYW5nZWQnLFxuICAgICAgJ19vbkJydXNoV2lkdGhDaGFuZ2VkJyxcbiAgICAgICdfb25PcGVyYXRpb25VcGRhdGVkJ1xuICAgIClcblxuICAgIHRoaXMuX2V2ZW50cyA9IHtcbiAgICAgIFtDb25zdGFudHMuRVZFTlRTLk9QRVJBVElPTl9VUERBVEVEXTogdGhpcy5fb25PcGVyYXRpb25VcGRhdGVkXG4gICAgfVxuXG4gICAgdGhpcy5faW5pdEJydXNoTWFuYWdlcigpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogSW52b2tlZCBpbW1lZGlhdGVseSBhZnRlciBhIGNvbXBvbmVudCBpcyBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKVxuICAgIHRoaXMuX29uQnJ1c2hTZWxlY3QodGhpcy5fYnJ1c2hNYW5hZ2VyLmdldEJydXNoZXMoKVswXSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEJSVVNIRVNcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGJydXNoIG1hbmFnZXJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0QnJ1c2hNYW5hZ2VyICgpIHtcbiAgICB0aGlzLl9icnVzaE1hbmFnZXIgPSBuZXcgQnJ1c2hNYW5hZ2VyKHRoaXMuY29udGV4dC51aSwgdGhpcy5wcm9wcy5vcHRpb25zKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSBjb2xvclxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5Db2xvcn0gY29sb3JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkJydXNoQ29sb3JDaGFuZ2VkIChjb2xvcikge1xuICAgIGxldCBicnVzaEluc3RhbmNlID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnYnJ1c2hJbnN0YW5jZScpLmNsb25lKClcbiAgICBicnVzaEluc3RhbmNlLnNldENvbG9yKGNvbG9yLmNsb25lKCkpXG5cbiAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHtcbiAgICAgIGJydXNoSW5zdGFuY2U6IGJydXNoSW5zdGFuY2UsXG4gICAgICBicnVzaENvbG9yOiBjb2xvci5jbG9uZSgpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgY2hhbmdlcyB0aGUgYnJ1c2ggaGFyZG5lc3NcbiAgICogQHBhcmFtICB7TnVtYmVyfSBoYXJkbmVzc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQnJ1c2hIYXJkbmVzc0NoYW5nZWQgKGhhcmRuZXNzKSB7XG4gICAgY29uc3QgYnJ1c2hJbnN0YW5jZSA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ2JydXNoSW5zdGFuY2UnKS5jbG9uZSgpXG4gICAgYnJ1c2hJbnN0YW5jZS5zZXRIYXJkbmVzcyhoYXJkbmVzcyAvIDEwMClcblxuICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUoe1xuICAgICAgYnJ1c2hJbnN0YW5jZSxcbiAgICAgIGJydXNoSGFyZG5lc3M6IE1hdGgucm91bmQoaGFyZG5lc3MpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSBzaGFyZWQgc3RhdGUgZGlkIGNoYW5nZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2xkU3RhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG5ld1N0YXRlXG4gICAqL1xuICBzaGFyZWRTdGF0ZURpZENoYW5nZSAob2xkU3RhdGUsIG5ld1N0YXRlKSB7XG4gICAgaWYgKG9sZFN0YXRlLmJydXNoU2l6ZSAhPT0gbmV3U3RhdGUuYnJ1c2hTaXplKSB7XG4gICAgICB0aGlzLl9vbkJydXNoV2lkdGhDaGFuZ2VkKG5ld1N0YXRlLmJydXNoU2l6ZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgdGhlIGJydXNoIHdpZHRoXG4gICAqIEBwYXJhbSAge051bWJlcn0gd2lkdGhcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkJydXNoV2lkdGhDaGFuZ2VkICh3aWR0aCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBvdXRwdXREaW1lbnNpb25zID0gZWRpdG9yLmdldE91dHB1dERpbWVuc2lvbnMoKVxuXG4gICAgY29uc3QgYnJ1c2hJbnN0YW5jZSA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ2JydXNoSW5zdGFuY2UnKS5jbG9uZSgpXG4gICAgYnJ1c2hJbnN0YW5jZS5zZXRTaXplKHdpZHRoIC8gb3V0cHV0RGltZW5zaW9ucy5taW4oKSlcblxuICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUoe1xuICAgICAgYnJ1c2hJbnN0YW5jZSxcbiAgICAgIGJydXNoU2l6ZTogTWF0aC5yb3VuZCh3aWR0aClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gYW4gb3BlcmF0aW9uIGhhcyBiZWVuIHVwZGF0ZWRcbiAgICogQHBhcmFtICB7T3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbk9wZXJhdGlvblVwZGF0ZWQgKG9wZXJhdGlvbikge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBpZiAob3BlcmF0aW9uID09PSB0aGlzLmdldFNoYXJlZFN0YXRlKCdvcGVyYXRpb24nKSkge1xuICAgICAgLy8gU3ByaXRlT3BlcmF0aW9uIHJlLWNyZWF0ZXMgYWxsIHNwcml0ZXMgd2hlbiB0aGV5J3JlIG1hc3MtYXNzaWduZWQsXG4gICAgICAvLyBzbyB3ZSBuZWVkIHRvIGZpbmQgdGhlIG5ldyBpbnN0YW5jZSBieSBtYXRjaGluZyBhZ2FpbnN0IHRoZSBwcmV2aW91cyBJRFxuICAgICAgY29uc3QgcHJldmlvdXNCcnVzaFNwcml0ZSA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ2JydXNoU3ByaXRlJylcbiAgICAgIGlmIChwcmV2aW91c0JydXNoU3ByaXRlKSB7XG4gICAgICAgIGNvbnN0IGJydXNoU3ByaXRlID0gb3BlcmF0aW9uLmdldFNwcml0ZXMoKVxuICAgICAgICAgIC5maWx0ZXIoKHMpID0+IHMuZ2V0SWQoKSA9PT0gcHJldmlvdXNCcnVzaFNwcml0ZS5nZXRJZCgpKVswXVxuICAgICAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHsgYnJ1c2hTcHJpdGUgfSlcbiAgICAgIH1cblxuICAgICAgLy8gVHJpZ2dlciBicnVzaCBjYW52YXMgcmVuZGVyaW5nXG4gICAgICBlZGl0b3IucmVuZGVyKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYSBicnVzaFxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5CcnVzaFNwcml0ZS5CcnVzaFtdfE9iamVjdFtdfSBicnVzaFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQnJ1c2hTZWxlY3QgKGJydXNoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IG91dHB1dERpbWVuc2lvbnMgPSBlZGl0b3IuZ2V0T3V0cHV0RGltZW5zaW9ucygpXG5cbiAgICBjb25zdCBzaXplID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnYnJ1c2hTaXplJykgLyBvdXRwdXREaW1lbnNpb25zLm1pbigpXG4gICAgY29uc3QgaGFyZG5lc3MgPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdicnVzaEhhcmRuZXNzJykgLyAxMDBcbiAgICBjb25zdCBjb2xvciA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ2JydXNoQ29sb3InKVxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHNpemUsIGNvbG9yXG4gICAgfVxuXG4gICAgbGV0IGJydXNoSW5zdGFuY2VcbiAgICBpZiAoYnJ1c2gucHJvdG90eXBlICYmIGJydXNoLnByb3RvdHlwZSBpbnN0YW5jZW9mIEJydXNoKSB7XG4gICAgICAvLyBDdXN0b20gQnJ1c2ggaW5zdGFuY2UsIHVzZWQgZm9yIHNwZWNpYWwgYnJ1c2hlcyBzdWNoIGFzIHJhZGlhbCBicnVzaCwgd2hpY2ggaGFzXG4gICAgICAvLyBhbiBhZGRpdGlvbmFsIGhhcmRuZXNzIG9wdGlvblxuICAgICAgY29uc3QgQnJ1c2hDbGFzcyA9IGJydXNoXG4gICAgICBicnVzaEluc3RhbmNlID0gbmV3IEJydXNoQ2xhc3Mob3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgX2JydXNoID0gU0RLVXRpbHMuZXh0ZW5kKHt9LCBicnVzaClcbiAgICAgIGRlbGV0ZSBfYnJ1c2guaW1hZ2VcblxuICAgICAgY2xhc3MgQnJ1c2hDbGFzcyBleHRlbmRzIEJydXNoIHt9XG4gICAgICBCcnVzaENsYXNzLmlkZW50aWZpZXIgPSBicnVzaC5pZGVudGlmaWVyXG5cbiAgICAgIC8vIFBsYWluIEpTIG9iamVjdCwgdXNlZCBmb3Igc2ltcGxlIGltYWdlIGJydXNoZXNcbiAgICAgIGJydXNoSW5zdGFuY2UgPSBuZXcgQnJ1c2hDbGFzcyhTREtVdGlscy5leHRlbmQoe30sIF9icnVzaCwgb3B0aW9ucykpXG4gICAgfVxuXG4gICAgaWYgKGJydXNoSW5zdGFuY2UuaGFzT3B0aW9uKCdoYXJkbmVzcycpKSB7XG4gICAgICBicnVzaEluc3RhbmNlLnNldEhhcmRuZXNzKGhhcmRuZXNzKVxuICAgIH1cblxuICAgIHRoaXMuX2xvYWRCcnVzaChicnVzaCwgYnJ1c2hJbnN0YW5jZSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTaGFyZWRTdGF0ZSh7IGJydXNoSW5zdGFuY2U6IGJydXNoSW5zdGFuY2UsIGJydXNoIH0pXG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBicnVzaCBpbWFnZSBmb3IgdGhlIGdpdmVuIGJydXNoIGNsYXNzIGFuZCBpbnN0YW5jZVxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gYnJ1c2hcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uQnJ1c2hTcHJpdGUuQnJ1c2h9IGJydXNoSW5zdGFuY2VcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9sb2FkQnJ1c2ggKGJydXNoLCBicnVzaEluc3RhbmNlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChicnVzaC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IGltYWdlID0gbmV3IHdpbmRvdy5JbWFnZSgpXG4gICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgYnJ1c2hJbnN0YW5jZS5zZXRJbWFnZShpbWFnZSlcbiAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgfSlcbiAgICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgaW1hZ2UgYXQgJHtpbWFnZS5zcmN9YCkpXG4gICAgICAgIH0pXG4gICAgICAgIGltYWdlLmNyb3NzT3JpZ2luID0gdGhpcy5jb250ZXh0LmVkaXRvci5nZXRDcm9zc09yaWdpbigpXG4gICAgICAgIGltYWdlLnNyYyA9IHRoaXMuX2dldEFzc2V0UGF0aChicnVzaC5pbWFnZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcHJvcGVydGllcyBmb3IgdGhlIHJvb3QgZWxlbWVudFxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0Um9vdFByb3BzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xhc3NOYW1lOiAodGVzdCA/ICdqcy1icnVzaENvbnRyb2xzJyA6IHVuZGVmaW5lZCksXG4gICAgICB3aXRoQm9yZGVyVG9wOiB0cnVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGJydXNoIGl0ZW1zXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnRbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJCcnVzaEl0ZW1zICgpIHtcbiAgICBjb25zdCBicnVzaGVzID0gdGhpcy5fYnJ1c2hNYW5hZ2VyLmdldEJydXNoZXMoKVxuICAgIGlmIChicnVzaGVzLmxlbmd0aCA8PSAxKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gYnJ1c2hlcy5tYXAoYnJ1c2ggPT5cbiAgICAgIDxCcnVzaExpc3RJdGVtQ29tcG9uZW50XG4gICAgICAgIGtleT17YnJ1c2guaWRlbnRpZmllcn1cbiAgICAgICAgYnJ1c2g9e2JydXNofVxuICAgICAgICBzZWxlY3RlZD17dGhpcy5nZXRTaGFyZWRTdGF0ZSgnYnJ1c2gnKSA9PT0gYnJ1c2h9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uQnJ1c2hTZWxlY3QuYmluZCh0aGlzLCBicnVzaCl9IC8+XG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIF9yZW5kZXJDb250ZW50ICgpIHtcbiAgICBjb25zdCBicnVzaEluc3RhbmNlID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnYnJ1c2hJbnN0YW5jZScpXG5cbiAgICByZXR1cm4gKDxTY3JvbGxhYmxlTGlzdENvbXBvbmVudFxuICAgICAgZGlyZWN0aW9uPSd2ZXJ0aWNhbCdcbiAgICAgIGlubmVyTGlzdFJlZj17ZWwgPT4geyB0aGlzLl9saXN0ID0gZWwgfX1cbiAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX3Njcm9sbGJhciA9IGVsIH19PlxuICAgICAgPFNldHRpbmdzPlxuICAgICAgICA8U2V0dGluZ3NUaXRsZT57dGhpcy5fdChgcGVzZGsuYnJ1c2gudGl0bGUuc2V0dGluZ3NgKX08L1NldHRpbmdzVGl0bGU+XG4gICAgICAgIDxDb2xvclNlbGVjdGlvbj5cbiAgICAgICAgICA8Q29sb3JTZWxlY3Rpb25Db21wb25lbnRcbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLmdldFNoYXJlZFN0YXRlKCdicnVzaENvbG9yJyl9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5fb25CcnVzaENvbG9yQ2hhbmdlZH0gLz5cbiAgICAgICAgPC9Db2xvclNlbGVjdGlvbj5cbiAgICAgICAgPFNsaWRlckNvbnRyb2xcbiAgICAgICAgICBsYWJlbD17dGhpcy5fdCgncGVzZGsuYnJ1c2gudGl0bGUud2lkdGgnKX1cbiAgICAgICAgICBtaW5WYWx1ZT17MX1cbiAgICAgICAgICBtYXhWYWx1ZT17MTAwfVxuICAgICAgICAgIHZhbHVlPXt0aGlzLmdldFNoYXJlZFN0YXRlKCdicnVzaFNpemUnKX1cbiAgICAgICAgICBvblNsaWRlclZhbHVlQ2hhbmdlPXt0aGlzLl9vbkJydXNoV2lkdGhDaGFuZ2VkfVxuICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e3RoaXMuX29uQnJ1c2hXaWR0aENoYW5nZWR9XG4gICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy13aWR0aENvbnRyb2wnIDogdW5kZWZpbmVkKX1cbiAgICAgICAgLz5cbiAgICAgICAgPFNsaWRlckNvbnRyb2xcbiAgICAgICAgICBsYWJlbD17dGhpcy5fdCgncGVzZGsuYnJ1c2gudGl0bGUuaGFyZG5lc3MnKX1cbiAgICAgICAgICBtaW5WYWx1ZT17MH1cbiAgICAgICAgICBtYXhWYWx1ZT17MTAwfVxuICAgICAgICAgIGRpc2FibGVkPXshKGJydXNoSW5zdGFuY2UgJiYgYnJ1c2hJbnN0YW5jZS5oYXNPcHRpb24oJ2hhcmRuZXNzJykpfVxuICAgICAgICAgIHZhbHVlPXt0aGlzLmdldFNoYXJlZFN0YXRlKCdicnVzaEhhcmRuZXNzJyl9XG4gICAgICAgICAgb25TbGlkZXJWYWx1ZUNoYW5nZT17dGhpcy5fb25CcnVzaEhhcmRuZXNzQ2hhbmdlZH1cbiAgICAgICAgICBvblZhbHVlQ2hhbmdlPXt0aGlzLl9vbkJydXNoSGFyZG5lc3NDaGFuZ2VkfVxuICAgICAgICAvPlxuICAgICAgPC9TZXR0aW5ncz5cbiAgICAgIDxCcnVzaGVzPlxuICAgICAgICA8U2Nyb2xsYmFyQ29tcG9uZW50IGRpcmVjdGlvbj0ndmVydGljYWwnPlxuICAgICAgICAgIDxCcnVzaExpc3Q+XG4gICAgICAgICAgICB7dGhpcy5fcmVuZGVyQnJ1c2hJdGVtcygpfVxuICAgICAgICAgIDwvQnJ1c2hMaXN0PlxuICAgICAgICA8L1Njcm9sbGJhckNvbXBvbmVudD5cbiAgICAgIDwvQnJ1c2hlcz5cbiAgICA8L1Njcm9sbGFibGVMaXN0Q29tcG9uZW50PilcbiAgfVxufVxuXG5jb25zdCBTbGlkZXJDb250cm9sID0gYWRvbmlzKFNsaWRlckNvbnRyb2xDb21wb25lbnQpKHtcbiAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICBtYXJnaW5Cb3R0b206IDBcbiAgfVxufSlcblxuY29uc3QgU2V0dGluZ3MgPSBhZG9uaXMoQ29udHJvbEdyb3VwKS5kaXYoe1xuICBwYWRkaW5nOiAnMjVweCcsXG4gIHBhZGRpbmdCb3R0b206ICcyNXB4JyxcbiAgYm9yZGVyQm90dG9tOiB0aGVtZSA9PiBgMXB4IHNvbGlkICR7dGhlbWUuZGFya1NsaWRlckJhY2tncm91bmRDb2xvcn1gXG59KVxuXG5jb25zdCBTZXR0aW5nc1RpdGxlID0gYWRvbmlzKENvbnRyb2xHcm91cFRpdGxlKS5kaXYoe30pXG5cbmNvbnN0IENvbG9yU2VsZWN0aW9uID0gYWRvbmlzLmRpdih7XG4gIG1hcmdpbkJvdHRvbTogJzE2cHgnXG59KVxuXG5jb25zdCBCcnVzaGVzID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICcyMTFweCcsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgYmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknXG59KVxuXG5jb25zdCBCcnVzaExpc3QgPSBhZG9uaXMudWwoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBib3R0b206IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gIG92ZXJmbG93WTogJ2F1dG8nLFxuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvYnJ1c2gvYnJ1c2gtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgT3BlcmF0aW9ucywgTWF0aCBhcyBQTWF0aCwgQ29sb3IsIFV0aWxzIGFzIFNES1V0aWxzIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCBDb250cm9sc1N0eWxlcyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcblxuY29uc3QgeyBQbGFpbkNvbnRyb2xJdGVtQmFja2dyb3VuZCB9ID0gQ29udHJvbHNTdHlsZXNcbmNvbnN0IHsgU3ByaXRlT3BlcmF0aW9uIH0gPSBPcGVyYXRpb25zXG5sZXQgQnJ1c2gsIFBhdGhcbmlmIChTcHJpdGVPcGVyYXRpb24pIHtcbiAgQnJ1c2ggPSBTcHJpdGVPcGVyYXRpb24uQnJ1c2hTcHJpdGUuQnJ1c2hcbiAgUGF0aCA9IFNwcml0ZU9wZXJhdGlvbi5CcnVzaFNwcml0ZS5QYXRoXG59XG5jb25zdCB7IFZlY3RvcjIgfSA9IFBNYXRoXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcnVzaExpc3RJdGVtQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEJSVVNIRVNcblxuICAvKipcbiAgICogTG9hZHMgdGhlIGJydXNoIGltYWdlIGZvciB0aGUgZ2l2ZW4gYnJ1c2hcbiAgICogQHBhcmFtICB7RnVuY3Rpb258T2JqZWN0fSBicnVzaFxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2xvYWRCcnVzaCAoYnJ1c2ggPSB0aGlzLnByb3BzLmJydXNoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChicnVzaC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IGltYWdlID0gbmV3IHdpbmRvdy5JbWFnZSgpXG4gICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fYnJ1c2guc2V0SW1hZ2UoaW1hZ2UpXG4gICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgIH0pXG4gICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIGltYWdlIGF0ICR7aW1hZ2Uuc3JjfWApKVxuICAgICAgICB9KVxuICAgICAgICBpbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuY29udGV4dC5lZGl0b3IuZ2V0Q3Jvc3NPcmlnaW4oKVxuICAgICAgICBpbWFnZS5zcmMgPSB0aGlzLl9nZXRBc3NldFBhdGgoYnJ1c2guaW1hZ2UpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBicnVzaCBwcmV2aWV3IG9udG8gdGhlIHByZXZpZXcgY2FudmFzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZHJhd0JydXNoICgpIHtcbiAgICBjb25zdCBwYXRoID0gbmV3IFBhdGgobnVsbCwgeyBicnVzaDogdGhpcy5fYnJ1c2ggfSwgdGhpcy5fY2FudmFzKVxuICAgIHBhdGguYWRkQ29udHJvbFBvaW50KG5ldyBWZWN0b3IyKDAuMSwgMC41KSlcbiAgICBwYXRoLmFkZENvbnRyb2xQb2ludChuZXcgVmVjdG9yMigwLjksIDAuNSkpXG4gICAgcGF0aC5yZW5kZXIobmV3IFZlY3RvcjIodGhpcy5fY2FudmFzLndpZHRoLCB0aGlzLl9jYW52YXMuaGVpZ2h0KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgdGhlIGdpdmVuIGJydXNoIHdpdGggdGhlIGRlZmF1bHQgb3B0aW9uc1xuICAgKiBAcGFyYW0gIHtGdW5jdGlvbnxPYmplY3R9IGJydXNoXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5zdGFudGlhdGVCcnVzaCAoYnJ1c2ggPSB0aGlzLnByb3BzLmJydXNoKSB7XG4gICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICBjb2xvcjogQ29sb3IuV0hJVEUsXG4gICAgICBzaXplOiAwLjI1XG4gICAgfVxuXG4gICAgaWYgKGJydXNoLnByb3RvdHlwZSAmJiBicnVzaC5wcm90b3R5cGUgaW5zdGFuY2VvZiBCcnVzaCkge1xuICAgICAgLy8gQ3VzdG9tIEJydXNoIGluc3RhbmNlLCB1c2VkIGZvciBzcGVjaWFsIGJydXNoZXMgc3VjaCBhcyByYWRpYWwgYnJ1c2gsIHdoaWNoIGhhc1xuICAgICAgLy8gYW4gYWRkaXRpb25hbCBoYXJkbmVzcyBvcHRpb25cbiAgICAgIGNvbnN0IEJydXNoQ2xhc3MgPSBicnVzaFxuICAgICAgdGhpcy5fYnJ1c2ggPSBuZXcgQnJ1c2hDbGFzcyhkZWZhdWx0T3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIHBhc3NpbmcgYSBzdHJpbmcgdG8gYSBgQ29uZmlndXJhYmxlYCdzIGltYWdlIG9wdGlvbiwgaXQgdHJpZXMgdG8gY3JlYXRlIGFuIGltYWdlXG4gICAgICAgKiBpbnN0YW5jZSBmcm9tIGl0LiBTaW5jZSB3ZSBkbyB0aGF0IG1hbnVhbGx5IGFmdGVyd2FyZHMgKGR1ZSB0byBwcmVwZW5kaW5nIHRoZSBhc3NldCBwYXRoKVxuICAgICAgICogd2Ugc2ltcGx5IGRlbGV0ZSB0aGF0IG9wdGlvblxuICAgICAgICovXG4gICAgICBjb25zdCBfYnJ1c2ggPSBTREtVdGlscy5leHRlbmQoe30sIGJydXNoKVxuICAgICAgZGVsZXRlIF9icnVzaC5pbWFnZVxuXG4gICAgICBjbGFzcyBCcnVzaENsYXNzIGV4dGVuZHMgQnJ1c2gge31cbiAgICAgIEJydXNoQ2xhc3MuaWRlbnRpZmllciA9IGJydXNoLmlkZW50aWZpZXJcblxuICAgICAgLy8gUGxhaW4gSlMgb2JqZWN0LCB1c2VkIGZvciBzaW1wbGUgaW1hZ2UgYnJ1c2hlc1xuICAgICAgdGhpcy5fYnJ1c2ggPSBuZXcgQnJ1c2hDbGFzcyhTREtVdGlscy5leHRlbmQoe30sIF9icnVzaCwgZGVmYXVsdE9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGltbWVkaWF0ZWx5IGFmdGVyIGEgY29tcG9uZW50IGlzIG1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnREaWRNb3VudCgpXG5cbiAgICB0aGlzLl9pbnN0YW50aWF0ZUJydXNoKClcblxuICAgIGNvbnN0IHsgb2Zmc2V0V2lkdGg6IHdpZHRoLCBvZmZzZXRIZWlnaHQ6IGhlaWdodCB9ID0gdGhpcy5fY2FudmFzXG5cbiAgICB0aGlzLl9jYW52YXMud2lkdGggPSB3aWR0aFxuICAgIHRoaXMuX2NhbnZhcy5oZWlnaHQgPSBoZWlnaHRcblxuICAgIHRoaXMuX2xvYWRCcnVzaCgpXG4gICAgICAudGhlbihpbWFnZSA9PiB7XG4gICAgICAgIHRoaXMuX2RyYXdCcnVzaCgpXG4gICAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuICg8QnJ1c2hMaXN0SXRlbVxuICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfVxuICAgICAgc2VsZWN0ZWQ9e3RoaXMucHJvcHMuc2VsZWN0ZWR9XG4gICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWJydXNoTGlzdEl0ZW0nIDogdW5kZWZpbmVkKX1cbiAgICAgIGRhdGEtc2VsZWN0ZWQ9e3RoaXMucHJvcHMuc2VsZWN0ZWR9PlxuICAgICAgPENhbnZhcyBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9jYW52YXMgPSBlbCB9fSAvPlxuICAgIDwvQnJ1c2hMaXN0SXRlbT4pXG4gIH1cbn1cblxuY29uc3QgQnJ1c2hMaXN0SXRlbSA9IGFkb25pcyhQbGFpbkNvbnRyb2xJdGVtQmFja2dyb3VuZCkubGkoe1xuICBoZWlnaHQ6ICc2NXB4JyxcbiAgcGFkZGluZzogMCxcbiAgYm9yZGVyUmFkaXVzOiAwLFxuICBib3JkZXJXaWR0aDogMCxcbiAgYm9yZGVyQm90dG9tV2lkdGg6ICcxcHgnLFxuICBib3JkZXJUb3A6ICcxcHggc29saWQgdHJhbnNwYXJlbnQnLFxuICAnJjpob3Zlcic6IHtcbiAgICBiYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA0KScsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknXG4gIH1cbn0sIHtcbiAgc2VsZWN0ZWQ6IHtcbiAgICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiBgcmdiYSgke3RoZW1lLmhpZ2hsaWdodENvbG9yUkdCfSwgLjIpYCxcbiAgICBib3JkZXI6IHRoZW1lID0+IGAxcHggc29saWQgJHt0aGVtZS5oaWdobGlnaHRDb2xvcn1gXG4gIH1cbn0pXG5cbmNvbnN0IENhbnZhcyA9IGFkb25pcy5jYW52YXMoe1xuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2JydXNoL2JydXNoLWxpc3QtaXRlbS1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBPcGVyYXRpb25zLCBVdGlscyBhcyBTREtVdGlscywgTWF0aCBhcyBQTWF0aCB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgVXRpbHMsIERyYWdnYWJsZUNvbXBvbmVudCB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmltcG9ydCBTcHJpdGVzQ2FudmFzQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi4vc2hhcmVkL3Nwcml0ZXMvc3ByaXRlcy1jYW52YXMtY29udHJvbHMtY29tcG9uZW50J1xuXG5jb25zdCB7IEJydXNoU3ByaXRlIH0gPSBPcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbiA/IE9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uIDoge31cblxuY29uc3QgeyBWZWN0b3IyIH0gPSBQTWF0aFxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJydXNoQ2FudmFzQ29udHJvbHNDb21wb25lbnQgZXh0ZW5kcyBTcHJpdGVzQ2FudmFzQ29udHJvbHNDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gU3ByaXRlc0NhbnZhc0NvbnRyb2xzQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uTW91c2VFbnRlcicsXG4gICAgICAnX29uTW91c2VMZWF2ZScsXG4gICAgICAnX29uTW91c2VNb3ZlJyxcbiAgICAgICdfb25EcmF3U3RhcnQnLFxuICAgICAgJ19vbkRyYXcnLFxuICAgICAgJ19vbkRyYXdTdG9wJ1xuICAgIClcblxuICAgIHRoaXMuc3RhdGUgPSBTREtVdGlscy5leHRlbmQodGhpcy5zdGF0ZSwge1xuICAgICAgY3Vyc29yUG9zaXRpb246IG5ldyBWZWN0b3IyKDAsIDApLFxuICAgICAgY2FudmFzQ2xpY2tEaXNhYmxlZDogdHJ1ZVxuICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICBfc2VsZWN0TmV4dFNwcml0ZSAoKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgc3RhcnRzIGRyYXdpbmdcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBwb3NpdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uRHJhd1N0YXJ0IChwb3NpdGlvbikge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBvdXRwdXREaW1lbnNpb25zID0gZWRpdG9yLmdldE91dHB1dERpbWVuc2lvbnMoKVxuICAgIHRoaXMuX2luaXRpYWxEcmF3UG9zaXRpb24gPSBwb3NpdGlvbi5jbG9uZSgpXG5cbiAgICBsZXQgYnJ1c2hTcHJpdGUgPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdicnVzaFNwcml0ZScpXG4gICAgY29uc3QgYnJ1c2hJbnN0YW5jZSA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ2JydXNoSW5zdGFuY2UnKVxuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ29wZXJhdGlvbicpXG5cbiAgICBpZiAoIWJydXNoU3ByaXRlKSB7XG4gICAgICBicnVzaFNwcml0ZSA9IG9wZXJhdGlvbi5jcmVhdGVCcnVzaCgpXG4gICAgICBvcGVyYXRpb24uYWRkU3ByaXRlKGJydXNoU3ByaXRlKVxuICAgICAgdGhpcy5zZXRTaGFyZWRTdGF0ZSh7IGJydXNoU3ByaXRlIH0pXG4gICAgfVxuXG4gICAgdGhpcy5fY3VycmVudFBhdGggPSBicnVzaFNwcml0ZS5jcmVhdGVQYXRoKGJydXNoSW5zdGFuY2UpXG4gICAgdGhpcy5fY3VycmVudFBhdGguYWRkQ29udHJvbFBvaW50KHBvc2l0aW9uLmNsb25lKCkuZGl2aWRlKG91dHB1dERpbWVuc2lvbnMpKVxuXG4gICAgdGhpcy5fbGFzdERyYXdQb3NpdGlvbiA9IHRoaXMuX2luaXRpYWxEcmF3UG9zaXRpb24uY2xvbmUoKVxuICAgIHRoaXMuX2xhc3RDdXJzb3JQb3NpdGlvbiA9IHRoaXMuX2luaXRpYWxEcmF3UG9zaXRpb24uY2xvbmUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhd2luZ1xuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9IHRvdGFsRGlzdGFuY2VcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBwb3NpdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9IGRpc3RhbmNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25EcmF3ICh0b3RhbERpc3RhbmNlLCBwb3NpdGlvbiwgZGlzdGFuY2UpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3Qgb3V0cHV0RGltZW5zaW9ucyA9IGVkaXRvci5nZXRPdXRwdXREaW1lbnNpb25zKClcbiAgICBjb25zdCBvdXRwdXRUZXh0dXJlRGltZW5zaW9ucyA9IGVkaXRvci5nZXRPdXRwdXRUZXh0dXJlRGltZW5zaW9ucygpXG4gICAgY29uc3QgY3Vyc29yUG9zaXRpb24gPSB0aGlzLl9sYXN0Q3Vyc29yUG9zaXRpb24uY2xvbmUoKS5hZGQoZGlzdGFuY2UpXG5cbiAgICBjb25zdCB7IGxldmVsOiB6b29tIH0gPSBlZGl0b3Iuem9vbVxuICAgIGNvbnN0IGJydXNoU2l6ZSA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ2JydXNoU2l6ZScpXG4gICAgY29uc3QgZGlzdGFuY2VUb0xhc3REcmF3ID0gY3Vyc29yUG9zaXRpb24uY2xvbmUoKS5zdWJ0cmFjdCh0aGlzLl9sYXN0RHJhd1Bvc2l0aW9uKS5hYnMoKS5sZW4oKVxuICAgIGlmIChkaXN0YW5jZVRvTGFzdERyYXcgLyB6b29tID49IGJydXNoU2l6ZSAvIDEwKSB7XG4gICAgICB0aGlzLl9jdXJyZW50UGF0aC5hZGRDb250cm9sUG9pbnQoY3Vyc29yUG9zaXRpb24uY2xvbmUoKS5kaXZpZGUob3V0cHV0RGltZW5zaW9ucykpXG5cbiAgICAgIHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ2JydXNoU3ByaXRlJykucmVuZGVyKG91dHB1dFRleHR1cmVEaW1lbnNpb25zKVxuXG4gICAgICB0aGlzLl9sYXN0RHJhd1Bvc2l0aW9uLmNvcHkoY3Vyc29yUG9zaXRpb24pXG4gICAgfVxuICAgIHRoaXMuX2xhc3RDdXJzb3JQb3NpdGlvbi5jb3B5KGN1cnNvclBvc2l0aW9uKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hpbGV3aGVuIHRoZSB1c2VyIHN0b3BzIGRyYXdpbmdcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBkaXN0YW5jZVxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9IHBvc2l0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25EcmF3U3RvcCAoKSB7XG4gICAgdGhpcy5fY3VycmVudFBhdGguc2V0Q2xvc2VkKHRydWUpXG5cbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3Qgb3V0cHV0VGV4dHVyZURpbWVuc2lvbnMgPSBlZGl0b3IuZ2V0T3V0cHV0VGV4dHVyZURpbWVuc2lvbnMoKVxuICAgIHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ2JydXNoU3ByaXRlJykucmVuZGVyKG91dHB1dFRleHR1cmVEaW1lbnNpb25zKVxuXG4gICAgdGhpcy5wcm9wcy5jb250cm9scy5hZGRMb2NhbEhpc3RvcnlTbmFwc2hvdCgpXG5cbiAgICB0aGlzLl9jdXJyZW50UGF0aCA9IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIG1vdXNlIGVudGVycyB0aGUgY2FudmFzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Nb3VzZUVudGVyICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnNvclZpc2libGU6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgbW91c2UgbGVhdmVzIHRoZSBjYW52YXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbk1vdXNlTGVhdmUgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3Vyc29yVmlzaWJsZTogZmFsc2VcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hpbGUgdGhlIHVzZXIgZHJhZ3MgdGhlIG1vdXNlIG92ZXIgdGhlIGNhbnZhc1xuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Nb3VzZU1vdmUgKGUpIHtcbiAgICBjb25zdCBjdXJzb3JQb3NpdGlvbiA9IFV0aWxzLmdldEV2ZW50UG9zaXRpb24oZSlcbiAgICBjb25zdCBjb250YWluZXJCb3VuZHMgPSB0aGlzLl9pbm5lckNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGN1cnNvclBvc2l0aW9uLnN1YnRyYWN0KGNvbnRhaW5lckJvdW5kcy5sZWZ0LCBjb250YWluZXJCb3VuZHMudG9wKVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXJzb3JQb3NpdGlvblxuICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcHJvcHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoZSBpdGVtIGNvbXBvbmVudCBvZiB0aGUgZ2l2ZW4gc3ByaXRlXG4gICAqIEBwYXJhbSAge1Nwcml0ZX0gc3ByaXRlXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRQcm9wc0ZvclNwcml0ZSAoc3ByaXRlKSB7XG4gICAgbGV0IHByb3BzID0gc3VwZXIuX2dldFByb3BzRm9yU3ByaXRlKHNwcml0ZSlcbiAgICBpZiAoc3ByaXRlIGluc3RhbmNlb2YgQnJ1c2hTcHJpdGUpIHtcbiAgICAgIHByb3BzLmhpZGVDb250ZW50ID0gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3RsZSBvYmplY3QgZm9yIHRoZSBjdXJzb3JcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldEN1cnNvclN0eWxlICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ2JydXNoU2l6ZScpICsgOCxcbiAgICAgIGhlaWdodDogdGhpcy5nZXRTaGFyZWRTdGF0ZSgnYnJ1c2hTaXplJykgKyA4LFxuICAgICAgbGVmdDogdGhpcy5zdGF0ZS5jdXJzb3JQb3NpdGlvbi54LFxuICAgICAgdG9wOiB0aGlzLnN0YXRlLmN1cnNvclBvc2l0aW9uLnksXG4gICAgICBtYXJnaW5MZWZ0OiAodGhpcy5nZXRTaGFyZWRTdGF0ZSgnYnJ1c2hTaXplJykgKyA4KSAqIC0wLjUsXG4gICAgICBtYXJnaW5Ub3A6ICh0aGlzLmdldFNoYXJlZFN0YXRlKCdicnVzaFNpemUnKSArIDgpICogLTAuNVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBvdmVybGF5IGNvbnRyb2xzXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyT3ZlcmxheUNvbnRyb2xzICgpIHtcbiAgICByZXR1cm4gKDxEcmFnZ2FibGVDb21wb25lbnRcbiAgICAgIG9uU3RhcnQ9e3RoaXMuX29uRHJhd1N0YXJ0fVxuICAgICAgb25EcmFnPXt0aGlzLl9vbkRyYXd9XG4gICAgICBvblN0b3A9e3RoaXMuX29uRHJhd1N0b3B9PlxuICAgICAgPEJydXNoQ2FudmFzQ29udHJvbHNcbiAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLl9vbk1vdXNlRW50ZXJ9XG4gICAgICAgIG9uTW91c2VMZWF2ZT17dGhpcy5fb25Nb3VzZUxlYXZlfVxuICAgICAgICBvbk1vdXNlTW92ZT17dGhpcy5fb25Nb3VzZU1vdmV9XG4gICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtYnJ1c2hDYW52YXNDb250cm9scycgOiB1bmRlZmluZWQpfT5cbiAgICAgICAgPEN1cnNvclxuICAgICAgICAgIHN0eWxlPXt0aGlzLl9nZXRDdXJzb3JTdHlsZSgpfVxuICAgICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUuY3Vyc29yVmlzaWJsZX0gLz5cbiAgICAgIDwvQnJ1c2hDYW52YXNDb250cm9scz5cbiAgICA8L0RyYWdnYWJsZUNvbXBvbmVudD4pXG4gIH1cbn1cblxuY29uc3QgQnJ1c2hDYW52YXNDb250cm9scyA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIGN1cnNvcjogJ25vbmUnLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSlcblxuY29uc3QgQ3Vyc29yID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBkaXNwbGF5OiAnbm9uZScsXG4gIGJvcmRlcjogdGhlbWUgPT4gYDJweCBzb2xpZCAke3RoZW1lLmNvbnRyb2xzS25vYkNvbG9yfWAsXG4gIGJveFNoYWRvdzogJzAgMnB4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4yMCksIGluc2V0IDAgMnB4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4yMCknLFxuICBib3JkZXJSYWRpdXM6ICc1MCUnXG59LCB7XG4gIHZpc2libGU6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snXG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9icnVzaC9icnVzaC1jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgYWRvbmlzIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IEl0ZW1Db21wb25lbnQgZnJvbSAnLi9pdGVtLWNvbXBvbmVudCdcbmltcG9ydCBJbWFnZUxvYWRlciBmcm9tICdzaGFyZWQvbG9hZGVycy9pbWFnZS1sb2FkZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0aWNrZXJJdGVtQ29tcG9uZW50IGV4dGVuZHMgSXRlbUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBJdGVtQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuICBzdGF0aWMgTUlOX1dJRFRIID0gSXRlbUNvbXBvbmVudC5NSU5fV0lEVEhcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcmVuZGVyQXNTVkc6IGZhbHNlLFxuICAgICAgc3ZnQXR0cmlidXRlczoge31cbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogSW52b2tlZCBpbW1lZGlhdGVseSBhZnRlciBhIGNvbXBvbmVudCBpcyBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKVxuXG4gICAgaWYgKHRoaXMucHJvcHMuaGlkZUNvbnRlbnQpIHJldHVybiBudWxsXG5cbiAgICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpcy5wcm9wc1xuICAgIGlmIChzcHJpdGUuZ2V0SW1hZ2UoKS5zcmMubWF0Y2goL1xcdytcXC5zdmcoPz1cXD98JCkvaSkgJiYgc3ByaXRlLmdldFRpbnRNb2RlKCkgIT09ICdub25lJykge1xuICAgICAgSW1hZ2VMb2FkZXIubG9hZFhIUihzcHJpdGUuZ2V0SW1hZ2UoKS5zcmMsICdpbWFnZS9zdmcreG1sJylcbiAgICAgICAgLnRoZW4oeGhyID0+IHtcbiAgICAgICAgICBjb25zdCBzdmdBdHRyaWJ1dGVzID0geGhyLnJlc3BvbnNlWE1MLmRvY3VtZW50RWxlbWVudC5hdHRyaWJ1dGVzXG4gICAgICAgICAgY29uc3QgYXR0cmlidXRlc09iamVjdCA9IHt9XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdmdBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgeyBuYW1lLCB2YWx1ZSB9ID0gc3ZnQXR0cmlidXRlc1tpXVxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICd4bWxuczp4bGluaycpIG5hbWUgPSAneG1sbnNYbGluaydcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNPYmplY3RbbmFtZV0gPSB2YWx1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCBzdmdDb250ZW50ID0geGhyLnJlc3BvbnNlVGV4dC5tYXRjaCgvPHN2Z1xcYltePl0qPihbXFxzXFxTXSo/KTxcXC9zdmc+L2ltKVsxXVxuICAgICAgICAgIHN2Z0NvbnRlbnQgPSBzdmdDb250ZW50LnJlcGxhY2UoL1xccys/ZmlsbD1bXCInXS4qP1tcIiddL2lnLCAnJykgLy8gTWFrZSBTVkdzIHRpbnRhYmxlXG5cbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHJlbmRlckFzU1ZHOiB0cnVlLFxuICAgICAgICAgICAgc3ZnQ29udGVudCxcbiAgICAgICAgICAgIHN2Z0F0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNPYmplY3RcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNDQUxJTkdcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBzY2FsaW5nIHRoZSBpdGVtXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CZWZvcmVTY2FsZSAoKSB7XG4gICAgY29uc3QgeyBzcHJpdGUgfSA9IHRoaXMucHJvcHNcbiAgICB0aGlzLl9pbml0aWFsT3B0aW9ucyA9IHtcbiAgICAgIGRpbWVuc2lvbnM6IHNwcml0ZS5nZXREaW1lbnNpb25zKCkuY2xvbmUoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoaWxlIHRoZSB1c2VyIGlzIHNjYWxpbmcgdGhlIGl0ZW1cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25TY2FsZSAoc2NhbGUpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3QgeyBkaW1lbnNpb25zIH0gPSB0aGlzLl9pbml0aWFsT3B0aW9uc1xuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG4gICAgc3ByaXRlLnNldCh7XG4gICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zLmNsb25lKCkubXVsdGlwbHkoc2NhbGUgLyBlZGl0b3Iuem9vbS5sZXZlbClcbiAgICB9KVxuXG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgZWRpdG9yLnJlbmRlcigpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3ByaXRlIGRpbWVuc2lvbnNcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFNwcml0ZURpbWVuc2lvbnMgKCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpcy5wcm9wc1xuICAgIHJldHVybiBzcHJpdGUuZ2V0RGltZW5zaW9ucygpLmNsb25lKClcbiAgICAgIC5tdWx0aXBseShlZGl0b3Iuem9vbS5sZXZlbClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdHlsZSBvYmplY3QgZm9yIHRoZSBpdGVtIGNvbnRhaW5lclxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0Q29udGFpbmVyU3R5bGUgKCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBvdXRwdXREaW1lbnNpb25zID0gZWRpdG9yLmdldE91dHB1dERpbWVuc2lvbnMoKVxuXG4gICAgY29uc3QgeyBzcHJpdGUgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBzdGlja2VyUG9zaXRpb24gPSBzcHJpdGUuZ2V0UG9zaXRpb24oKS5jbG9uZSgpXG4gICAgICAubXVsdGlwbHkob3V0cHV0RGltZW5zaW9ucylcblxuICAgIGNvbnN0IGRlZ3JlZXMgPSBzcHJpdGUuZ2V0Um90YXRpb24oKSAqIDE4MCAvIE1hdGguUElcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBgcm90YXRlWigke2RlZ3JlZXMudG9GaXhlZCgyKX1kZWcpYFxuICAgIGNvbnN0IHRyYW5zZm9ybU9yaWdpbiA9ICc1MCUgNTAlJ1xuXG4gICAgY29uc3QgZGltZW5zaW9ucyA9IHNwcml0ZS5nZXREaW1lbnNpb25zKCkuY2xvbmUoKVxuICAgICAgLm11bHRpcGx5KGVkaXRvci56b29tLmxldmVsKVxuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogZGltZW5zaW9ucy54LFxuICAgICAgaGVpZ2h0OiBkaW1lbnNpb25zLnksXG4gICAgICBsZWZ0OiBzdGlja2VyUG9zaXRpb24ueCxcbiAgICAgIHRvcDogc3RpY2tlclBvc2l0aW9uLnksXG4gICAgICBtYXJnaW5MZWZ0OiBkaW1lbnNpb25zLnggKiAtMC41LFxuICAgICAgbWFyZ2luVG9wOiBkaW1lbnNpb25zLnkgKiAtMC41LFxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICBNb3pUcmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIG1zVHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICBXZWJraXRUcmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogdHJhbnNmb3JtT3JpZ2luLFxuICAgICAgTW96VHJhbnNmb3JtT3JpZ2luOiB0cmFuc2Zvcm1PcmlnaW4sXG4gICAgICBtc1RyYW5zZm9ybU9yaWdpbjogdHJhbnNmb3JtT3JpZ2luLFxuICAgICAgV2Via2l0VHJhbnNmb3JtT3JpZ2luOiB0cmFuc2Zvcm1PcmlnaW5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3R5bGUgb2JqZWN0IGZvciB0aGUgY29udGVudCBlbGVtZW50XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRDb250ZW50U3R5bGUgKCkge1xuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgdHJhbnNmb3JtID0gYHJvdGF0ZVkoJHtzcHJpdGUuZ2V0RmxpcEhvcml6b250YWxseSgpID8gMTgwIDogMH1kZWcpIHJvdGF0ZVgoJHtzcHJpdGUuZ2V0RmxpcFZlcnRpY2FsbHkoKSA/IDE4MCA6IDB9ZGVnKWBcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIG9wYWNpdHk6IHNwcml0ZS5nZXRBbHBoYSgpLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgTW96VHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICBtc1RyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgV2Via2l0VHJhbnNmb3JtOiB0cmFuc2Zvcm1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5yZW5kZXJBc1NWRykge1xuICAgICAgc3R5bGUuZmlsbCA9IHNwcml0ZS5nZXRUaW50Q29sb3IoKS50b1JHQkEoKVxuICAgIH1cbiAgICByZXR1cm4gc3R5bGVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgaXRlbSdzIGNvbnRlbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIF9yZW5kZXJDb250ZW50ICgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5oaWRlQ29udGVudCkgcmV0dXJuIG51bGxcblxuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBzdmdBdHRyaWJ1dGVzIH0gPSB0aGlzLnN0YXRlXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUucmVuZGVyQXNTVkdcbiAgICAgID8gPFNWR0ltYWdlIHN0eWxlPXt0aGlzLl9nZXRDb250ZW50U3R5bGUoKX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLnN0YXRlLnN2Z0NvbnRlbnQgfX0gey4uLnN2Z0F0dHJpYnV0ZXN9IC8+XG4gICAgICA6IDxJbWFnZSBzcmM9e3Nwcml0ZS5nZXRJbWFnZSgpLnNyY30gc3R5bGU9e3RoaXMuX2dldENvbnRlbnRTdHlsZSgpfSAvPlxuICB9XG59XG5cbmNvbnN0IEltYWdlID0gYWRvbmlzLmltZyh7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnXG59KVxuXG5jb25zdCBTVkdJbWFnZSA9IGFkb25pcy5zdmcoe1xuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3NoYXJlZC9zcHJpdGVzL3Nwcml0ZXMvc3RpY2tlci1pdGVtLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IE1hdGggYXMgUE1hdGggfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMsIFV0aWxzLCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIENvbnN0YW50cywgRHJhZ2dhYmxlQ29tcG9uZW50IH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IEl0ZW1Db21wb25lbnQgZnJvbSAnLi9pdGVtLWNvbXBvbmVudCdcblxuY29uc3QgeyBWZWN0b3IyIH0gPSBQTWF0aFxuY29uc3QgdGVzdCA9IChwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0JylcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dEl0ZW1Db21wb25lbnQgZXh0ZW5kcyBJdGVtQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEl0ZW1Db21wb25lbnQuY29udGV4dFR5cGVzXG4gIHN0YXRpYyBNSU5fV0lEVEggPSAxMDBcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vblRleHRDaGFuZ2UnLFxuICAgICAgJ19vbkJsdXInLFxuICAgICAgJ19vbkl0ZW1Eb3VibGVDbGljaycsXG4gICAgICAnX29uV2lkdGhEcmFnJyxcbiAgICAgICdfb25XaWR0aERyYWdTdG9wJ1xuICAgIClcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlZGl0aW5nOiBmYWxzZSxcbiAgICAgIHVwZGF0ZUJlY2F1c2VJRVN1Y2tzOiBmYWxzZVxuICAgIH1cblxuICAgIC8vIERvdWJsZS10YXAgaGFuZGxpbmcgdmFyaWFibGVzXG4gICAgdGhpcy5faGFzVG91Y2hTdGFydGVkID0gZmFsc2VcbiAgICB0aGlzLl90b3VjaENvdW50ID0gMFxuICAgIHRoaXMuX3RvdWNoVGltZW91dCA9IG51bGxcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIElURU0gRFJBR0dJTkdcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgaXRlbSBpcyBkcmFnZ2FibGUgb3Igbm90XG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaXNEcmFnZ2luZ0Rpc2FibGVkICgpIHtcbiAgICByZXR1cm4gc3VwZXIuX2lzRHJhZ2dpbmdEaXNhYmxlZCgpIHx8IHRoaXMuc3RhdGUuZWRpdGluZ1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUFVCTElDIEFQSVxuXG4gIC8qKlxuICAgKiBFbnRlcnMgdGhlIGVkaXQgbW9kZVxuICAgKi9cbiAgZW50ZXJFZGl0TW9kZSAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG4gICAgc3ByaXRlLnNldFZpc2libGUoZmFsc2UpXG4gICAgZWRpdG9yLnJlbmRlcigpXG5cbiAgICB0aGlzLnNldFN0YXRlKHsgZWRpdGluZzogdHJ1ZSB9LCAoKSA9PiB7XG4gICAgICBpZiAoIXNwcml0ZS5fZWRpdGVkKSB7XG4gICAgICAgIHNwcml0ZS5zZXRUZXh0KCcnKVxuICAgICAgICB0aGlzLl90ZXh0RmllbGQudmFsdWUgPSAnJ1xuICAgICAgICBzcHJpdGUuX2VkaXRlZCA9IHRydWVcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RleHRGaWVsZC5mb2N1cygpXG4gICAgICB0aGlzLl90ZXh0RmllbGQuc2VsZWN0KClcbiAgICB9KVxuICB9XG5cbiAgbGVhdmVFZGl0TW9kZSAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG4gICAgc3ByaXRlLnNldFZpc2libGUodHJ1ZSlcbiAgICBlZGl0b3IucmVuZGVyKClcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0aW5nOiBmYWxzZSB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGB0YWtlIHRvIGZyb250YCBidXR0b25cbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblRha2VUb0Zyb250ICguLi5hcmdzKSB7XG4gICAgdGhpcy5sZWF2ZUVkaXRNb2RlKClcbiAgICBzdXBlci5fb25UYWtlVG9Gcm9udCguLi5hcmdzKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGBmbGlwIGhvcml6b250YWxseWAgYnV0dG9uXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25GbGlwSG9yaXpvbnRhbGx5ICguLi5hcmdzKSB7XG4gICAgdGhpcy5sZWF2ZUVkaXRNb2RlKClcbiAgICBzdXBlci5fb25GbGlwSG9yaXpvbnRhbGx5KC4uLmFyZ3MpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgYGR1cGxpY2F0ZWAgYnV0dG9uXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25EdXBsaWNhdGUgKC4uLmFyZ3MpIHtcbiAgICB0aGlzLmxlYXZlRWRpdE1vZGUoKVxuICAgIHN1cGVyLl9vbkR1cGxpY2F0ZSguLi5hcmdzKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgc3ByaXRlIGhhcyBiZWVuIHVwZGF0ZWRcbiAgICogQHBhcmFtIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5UZXh0U3ByaXRlfSB0ZXh0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25TcHJpdGVVcGRhdGUgKHRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoVXRpbHMuQnJvd3Nlci5pc0lFbHRlKDEwKSAmJlxuICAgICAgICBvcHRpb25zLmFsaWdubWVudCAmJlxuICAgICAgICB0ZXh0LmdldEFsaWdubWVudCgpICE9PSBvcHRpb25zLmFsaWdubWVudCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHVwZGF0ZUJlY2F1c2VJRVN1Y2tzOiB0cnVlXG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB1cGRhdGVCZWNhdXNlSUVTdWNrczogZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBzdXBlci5fb25TcHJpdGVVcGRhdGUoKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV0lEVEggUkVTSVpJTkdcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBkcmFnZ2luZyBvbmUgb2YgdGhlIHdpZHRoIGNvbnRyb2xzXG4gICAqIEBwYXJhbSAge1N0cmluZ30gc2lkZVxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9IHJlbGF0aXZlUG9zaXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBhYnNvbHV0ZVBvc2l0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25XaWR0aERyYWdTdGFydCAoc2lkZSwgcmVsYXRpdmVQb3NpdGlvbiwgYWJzb2x1dGVQb3NpdGlvbikge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgYW5jaG9yID0gc3ByaXRlLmdldEFuY2hvcigpXG5cbiAgICB0aGlzLl9pbWFnZUJvdW5kaW5nQm94ID0gdGhpcy5wcm9wcy5jYW52YXNDb250cm9scy5nZXRJbWFnZUJvdW5kaW5nUmVjdCgpXG4gICAgdGhpcy5fY29udGFpbmVyT2Zmc2V0ID0gdGhpcy5wcm9wcy5jYW52YXNDb250cm9scy5nZXRDb250YWluZXJPZmZzZXQoKVxuXG4gICAgY29uc3Qgc3ByaXRlUG9zaXRpb24gPSB0aGlzLl9nZXRBYnNvbHV0ZVNwcml0ZVBvc2l0aW9uKClcbiAgICAgIC5hZGQodGhpcy5faW1hZ2VCb3VuZGluZ0JveC54LCB0aGlzLl9pbWFnZUJvdW5kaW5nQm94LnkpXG4gICAgY29uc3Qgc3ByaXRlQm91bmRpbmdCb3ggPSBzcHJpdGUuZ2V0RGltZW5zaW9ucyhlZGl0b3IuZ2V0U0RLKCksIGVkaXRvci5nZXRPdXRwdXREaW1lbnNpb25zKCkpXG4gICAgY29uc3Qgc3ByaXRlRGltZW5zaW9ucyA9IG5ldyBWZWN0b3IyKHNwcml0ZUJvdW5kaW5nQm94LndpZHRoLCBzcHJpdGVCb3VuZGluZ0JveC5oZWlnaHQpXG5cbiAgICBjb25zdCBzcHJpdGVDZW50ZXJQb3NpdGlvbiA9IHNwcml0ZVBvc2l0aW9uLmNsb25lKClcbiAgICAgIC5zdWJ0cmFjdChzcHJpdGVEaW1lbnNpb25zLmNsb25lKCkubXVsdGlwbHkoYW5jaG9yKSlcbiAgICAgIC5hZGQoc3ByaXRlRGltZW5zaW9ucy5jbG9uZSgpLm11bHRpcGx5KDAuNSkpXG4gICAgICAucm91bmQoKVxuXG4gICAgY29uc3QgbW91c2VEaXN0YW5jZUZyb21DZW50ZXIgPSBhYnNvbHV0ZVBvc2l0aW9uLmNsb25lKClcbiAgICAgIC5zdWJ0cmFjdCh0aGlzLl9jb250YWluZXJPZmZzZXQpXG4gICAgICAuc3VidHJhY3Qoc3ByaXRlQ2VudGVyUG9zaXRpb24pXG5cbiAgICB0aGlzLl9pbml0aWFsU2NhbGVTZXR0aW5ncyA9IHtcbiAgICAgIG1heFdpZHRoOiBzcHJpdGUuZ2V0TWF4V2lkdGgoKSxcbiAgICAgIG1vdXNlRGlzdGFuY2VGcm9tQ2VudGVyXG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkJlZm9yZUNoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkJlZm9yZUNoYW5nZSgpXG5cbiAgICB0aGlzLnByb3BzLm9uQ2FudmFzQ2xpY2tEaXNhYmxlZCAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkNhbnZhc0NsaWNrRGlzYWJsZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhZ2dpbmcgb25lIG9mIHRoZSB3aWR0aCBjb250cm9sc1xuICAgKiBAcGFyYW0ge1Bob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMn0gZGlzdGFuY2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbldpZHRoRHJhZyAoZGlzdGFuY2UpIHtcbiAgICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHRleHRSb3RhdGlvbiA9IHNwcml0ZS5nZXRSb3RhdGlvbigpXG4gICAgY29uc3QgeyBtb3VzZURpc3RhbmNlRnJvbUNlbnRlciB9ID0gdGhpcy5faW5pdGlhbFNjYWxlU2V0dGluZ3NcbiAgICBjb25zdCBuZXdNb3VzZURpc3RhbmNlRnJvbUNlbnRlciA9IG1vdXNlRGlzdGFuY2VGcm9tQ2VudGVyLmNsb25lKClcbiAgICAgIC5hZGQoZGlzdGFuY2UpXG5cbiAgICBjb25zdCBjb3MgPSBNYXRoLmNvcyh0ZXh0Um90YXRpb24pXG4gICAgY29uc3Qgc2luID0gTWF0aC5zaW4odGV4dFJvdGF0aW9uKVxuXG4gICAgY29uc3QgbmV3TWF4V2lkdGggPSBNYXRoLm1heChcbiAgICAgIE1hdGguYWJzKChuZXdNb3VzZURpc3RhbmNlRnJvbUNlbnRlci54ICogY29zICsgbmV3TW91c2VEaXN0YW5jZUZyb21DZW50ZXIueSAqIHNpbikgKiAyKSxcbiAgICAgIDUwXG4gICAgKSAvIHRoaXMuX2ltYWdlQm91bmRpbmdCb3gud2lkdGhcbiAgICBzcHJpdGUuc2V0TWF4V2lkdGgobmV3TWF4V2lkdGgpXG5cbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgZWRpdG9yLnJlbmRlcigpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIHN0b3BzIGRyYWdnaW5nIHRoZSB3aWR0aCBjb250cm9sc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uV2lkdGhEcmFnU3RvcCAoKSB7XG4gICAgdGhpcy5wcm9wcy5vbkFmdGVyQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQWZ0ZXJDaGFuZ2UoKVxuXG4gICAgdGhpcy5wcm9wcy5vbkNhbnZhc0NsaWNrRW5hYmxlZCAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkNhbnZhc0NsaWNrRW5hYmxlZCgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB0ZXh0IGFyZWEgbG9zZXMgZm9jdXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkJsdXIgKCkge1xuICAgIHRoaXMubGVhdmVFZGl0TW9kZSgpXG5cbiAgICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpcy5wcm9wc1xuICAgIGlmIChzcHJpdGUgJiYgc3ByaXRlLmdldFRleHQoKSA9PT0gJycpIHtcbiAgICAgIHNwcml0ZS5zZXRUZXh0KHRoaXMuX3QoJ3Blc2RrLnRleHQucGxhY2Vob2xkZXIuZGVmYXVsdFRleHQnKSlcbiAgICAgIHNwcml0ZS5fZWRpdGVkID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGhhcyBjaGFuZ2VkIHRoZSB0ZXh0XG4gICAqIEBwYXJhbSAge0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25UZXh0Q2hhbmdlIChlKSB7XG4gICAgY29uc3QgeyBzcHJpdGUgfSA9IHRoaXMucHJvcHNcbiAgICBzcHJpdGUuc2V0VGV4dChlLnRhcmdldC52YWx1ZSlcblxuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBoYXMgZG91YmxlLWNsaWNrZWQgdGhlIGl0ZW1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkl0ZW1Eb3VibGVDbGljayAoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLnNlbGVjdGVkKSByZXR1cm5cblxuICAgIHRoaXMuZW50ZXJFZGl0TW9kZSgpXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgZm9yIHdoZW4gYSB0b3VjaCBldmVudCBzdGFydHMuXG4gICAqXG4gICAqL1xuICBfb25JdGVtVG91Y2hTdGFydCA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5faGFzVG91Y2hTdGFydGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBTdGFydCBkb3VibGUtdG91Y2ggZGV0ZWN0aW9uXG4gICAgaWYgKCF0aGlzLl9oYXNUb3VjaFN0YXJ0ZWQpIHtcbiAgICAgIHRoaXMuX2hhc1RvdWNoU3RhcnRlZCA9IHRydWVcbiAgICAgIHRoaXMuX3RvdWNoQ291bnQgPSAwXG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgZG91YmxlIHRvdWNoIGFmdGVyIDMwMG1zLFxuICAgIC8vIHdoaWNoIGlzIHRoZSBkb3VibGUgdG91Y2ggdGltZSBsaW1pdFxuICAgIHRoaXMuX3RvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5faGFzVG91Y2hTdGFydGVkID0gZmFsc2VcbiAgICAgIHRoaXMuX3RvdWNoQ291bnQgPSAwXG4gICAgfSwgMzAwKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZvciB0aGUgdG91Y2hlbmQgZXZlbnRcbiAgICpcbiAgICovXG4gIF9vbkl0ZW1Ub3VjaEVuZCA9ICgpID0+IHtcbiAgICBpZiAoIXRoaXMuX2hhc1RvdWNoU3RhcnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fdG91Y2hDb3VudCsrXG5cbiAgICAvLyBJZiBpdCBnZXRzIHRvIHRoaXMsIHdlIGhhdmUgYSBkb3VibGUtdG91Y2hcbiAgICAvLyBpbiBsZXNzIHRoYW4gMzAwbXNcbiAgICBpZiAodGhpcy5fdG91Y2hDb3VudCA+PSAyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdG91Y2hUaW1lb3V0KVxuXG4gICAgICB0aGlzLl9oYXNUb3VjaFN0YXJ0ZWQgPSBmYWxzZVxuICAgICAgdGhpcy5fdG91Y2hDb3VudCA9IDBcblxuICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZCAmJiB0aGlzLmVudGVyRWRpdE1vZGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNDQUxJTkdcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBzY2FsaW5nIHRoZSBpdGVtXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CZWZvcmVTY2FsZSAoKSB7XG4gICAgY29uc3QgeyBzcHJpdGUgfSA9IHRoaXMucHJvcHNcbiAgICB0aGlzLl9pbml0aWFsT3B0aW9ucyA9IHtcbiAgICAgIG1heFdpZHRoOiBzcHJpdGUuZ2V0TWF4V2lkdGgoKSxcbiAgICAgIGZvbnRTaXplOiBzcHJpdGUuZ2V0Rm9udFNpemUoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoaWxlIHRoZSB1c2VyIGlzIHNjYWxpbmcgdGhlIGl0ZW1cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25TY2FsZSAoc2NhbGUpIHtcbiAgICBjb25zdCB7IG1heFdpZHRoLCBmb250U2l6ZSB9ID0gdGhpcy5faW5pdGlhbE9wdGlvbnNcbiAgICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpcy5wcm9wc1xuICAgIHNwcml0ZS5zZXQoe1xuICAgICAgbWF4V2lkdGg6IG1heFdpZHRoICogc2NhbGUsXG4gICAgICBmb250U2l6ZTogZm9udFNpemUgKiBzY2FsZVxuICAgIH0pXG5cbiAgICBjb25zdCB7IG1lZGlhdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBtZWRpYXRvci5lbWl0KENvbnN0YW50cy5FVkVOVFMuVEVYVF9TQ0FMRUQsIHNwcml0ZSlcblxuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0eWxlIG9iamVjdCBmb3IgdGhlIGl0ZW0gY29udGFpbmVyXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRDb250YWluZXJTdHlsZSAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IG91dHB1dERpbWVuc2lvbnMgPSBlZGl0b3IuZ2V0T3V0cHV0RGltZW5zaW9ucygpXG5cbiAgICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHRleHRQb3NpdGlvbiA9IHNwcml0ZS5nZXRQb3NpdGlvbigpLmNsb25lKClcbiAgICAgIC5tdWx0aXBseShvdXRwdXREaW1lbnNpb25zKVxuXG4gICAgY29uc3QgZGVncmVlcyA9IHNwcml0ZS5nZXRSb3RhdGlvbigpICogMTgwIC8gTWF0aC5QSVxuICAgIGNvbnN0IHRyYW5zZm9ybSA9IGByb3RhdGVaKCR7ZGVncmVlcy50b0ZpeGVkKDIpfWRlZylgXG4gICAgY29uc3QgdHJhbnNmb3JtT3JpZ2luID0gJzUwJSA1MCUnXG5cbiAgICBjb25zdCBtYXhXaWR0aCA9IHNwcml0ZS5nZXRNYXhXaWR0aCgpICogb3V0cHV0RGltZW5zaW9ucy54XG4gICAgY29uc3QgaGVpZ2h0ID0gc3ByaXRlLmdldERpbWVuc2lvbnMoZWRpdG9yLmdldFNESygpLCBvdXRwdXREaW1lbnNpb25zKS55XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBtYXhXaWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGxlZnQ6IHRleHRQb3NpdGlvbi54LFxuICAgICAgdG9wOiB0ZXh0UG9zaXRpb24ueSxcbiAgICAgIG1hcmdpbkxlZnQ6IG1heFdpZHRoICogLTAuNSxcbiAgICAgIG1hcmdpblRvcDogaGVpZ2h0ICogLTAuNSxcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgTW96VHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICBtc1RyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgV2Via2l0VHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IHRyYW5zZm9ybU9yaWdpbixcbiAgICAgIE1velRyYW5zZm9ybU9yaWdpbjogdHJhbnNmb3JtT3JpZ2luLFxuICAgICAgbXNUcmFuc2Zvcm1PcmlnaW46IHRyYW5zZm9ybU9yaWdpbixcbiAgICAgIFdlYmtpdFRyYW5zZm9ybU9yaWdpbjogdHJhbnNmb3JtT3JpZ2luXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0eWxlIG9iamVjdCBmb3IgdGhpcyBzcHJpdGVcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFRleHRTdHlsZSAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3Qgc2RrID0gZWRpdG9yLmdldFNESygpXG4gICAgY29uc3Qgb3V0cHV0RGltZW5zaW9ucyA9IGVkaXRvci5nZXRPdXRwdXREaW1lbnNpb25zKClcbiAgICBjb25zdCBzdHlsZSA9IHNwcml0ZS5nZXRET01TdHlsZShzZGssIG91dHB1dERpbWVuc2lvbnMpXG5cbiAgICBjb25zdCBzcHJpdGVQb3NpdGlvbiA9IHRoaXMuX2dldEFic29sdXRlU3ByaXRlUG9zaXRpb24oKVxuICAgIGNvbnN0IGRpbWVuc2lvbnMgPSBzcHJpdGUuZ2V0RGltZW5zaW9ucyhzZGssIG91dHB1dERpbWVuc2lvbnMpXG4gICAgc3R5bGUuaGVpZ2h0ID0gTWF0aC5taW4oZGltZW5zaW9ucy55LCBvdXRwdXREaW1lbnNpb25zLnkgLSBzcHJpdGVQb3NpdGlvbi55ICsgZGltZW5zaW9ucy55IC8gMilcblxuICAgIHJldHVybiBzdHlsZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGNvcm5lciBrbm9ic1xuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyS25vYnMgKCkge1xuICAgIGNvbnN0IGtub2JzID0gc3VwZXIuX3JlbmRlcktub2JzKCk7XG5cbiAgICAvLyBBZGRpdGlvbmFsbHkgcmVuZGVyIHdpZHRoIGNvbnRyb2xzXG4gICAgWydsZWZ0JywgJ3JpZ2h0J10uZm9yRWFjaChzaWRlID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IGB3aWR0aC0ke3NpZGV9YFxuICAgICAgY29uc3QgY29udHJvbFByb3BzID0geyBbc2lkZV06IHRydWUgfVxuICAgICAga25vYnMucHVzaChcbiAgICAgICAgPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgICAgIGtleT17a2V5fVxuICAgICAgICAgIG9uU3RhcnQ9e3RoaXMuX29uV2lkdGhEcmFnU3RhcnQuYmluZCh0aGlzLCBzaWRlKX1cbiAgICAgICAgICBvbkRyYWc9e3RoaXMuX29uV2lkdGhEcmFnfVxuICAgICAgICAgIG9uU3RvcD17dGhpcy5fb25XaWR0aERyYWdTdG9wfT5cbiAgICAgICAgICA8V2lkdGhDb250cm9sIHsuLi5jb250cm9sUHJvcHN9IC8+XG4gICAgICAgIDwvRHJhZ2dhYmxlQ29tcG9uZW50PlxuICAgICAgKVxuICAgIH0pXG5cbiAgICByZXR1cm4ga25vYnNcbiAgfVxuXG4gIF9nZXRJdGVtQ29udHJvbHNQcm9wcyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRG91YmxlQ2xpY2s6IHRoaXMuX29uSXRlbURvdWJsZUNsaWNrLFxuICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLl9vbkl0ZW1Ub3VjaFN0YXJ0LFxuICAgICAgb25Ub3VjaEVuZDogdGhpcy5fb25JdGVtVG91Y2hFbmRcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGl0ZW0ncyBjb250ZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICBfcmVuZGVyQ29udGVudCAoKSB7XG4gICAgY29uc3QgeyBzcHJpdGUsIHNlbGVjdGVkIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBlZGl0aW5nLCB1cGRhdGVCZWNhdXNlSUVTdWNrcyB9ID0gdGhpcy5zdGF0ZVxuICAgIGxldCBjb250ZW50ID0gW11cblxuICAgIGlmICghKHRoaXMucHJvcHMuaGlkZUNvbnRlbnQgJiYgIXRoaXMuc3RhdGUuZWRpdGluZykpIHtcbiAgICAgIGNvbnRlbnQucHVzaCg8VGV4dEZpZWxkXG4gICAgICAgIGtleT0ndGV4dC1maWVsZCdcbiAgICAgICAgZWRpdGluZz17ZWRpdGluZ31cbiAgICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fdGV4dEZpZWxkID0gZWwgfX1cbiAgICAgICAgc3R5bGU9e3RoaXMuX2dldFRleHRTdHlsZSgpfVxuICAgICAgICBkZWZhdWx0VmFsdWU9e3Nwcml0ZS5nZXRUZXh0KCl9XG4gICAgICAgIG9uQmx1cj17dGhpcy5fb25CbHVyfVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5fb25UZXh0Q2hhbmdlfVxuICAgICAgICB1cGRhdGVCZWNhdXNlSUVTdWNrcz17dXBkYXRlQmVjYXVzZUlFU3Vja3N9IC8+KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5zdGF0ZS5lZGl0aW5nKSB7XG4gICAgICBjb250ZW50LnB1c2goPERpc2FibGVkT3ZlcmxheVxuICAgICAgICBrZXk9J2Rpc2FibGVkLW92ZXJsYXknXG4gICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtZGlzYWJsZWRPdmVybGF5JyA6IHVuZGVmaW5lZCl9XG4gICAgICAgIHNlbGVjdGVkPXtzZWxlY3RlZH0gLz4pXG4gICAgfVxuICAgIHJldHVybiBjb250ZW50XG4gIH1cbn1cblxuY29uc3QgVGV4dEZpZWxkID0gYWRvbmlzLnRleHRhcmVhKHtcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBib3JkZXI6ICdub25lJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgcmVzaXplOiAnbm9uZScsXG4gIHBhZGRpbmc6IDAsXG4gICc6Zm9jdXMnOiB7XG4gICAgb3V0bGluZTogJ25vbmUnXG4gIH1cbn0sIHtcbiAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjE3MDAzNC9keW5hbWljLWFsaWdubWVudC1mb3ItdGV4dGJveC1pbi1pZTEwLWlzLW5vdC13b3JraW5nXG4gIHVwZGF0ZUJlY2F1c2VJRVN1Y2tzOiB7XG4gICAgd2lkdGg6ICcwcHgnXG4gIH0sXG4gIGVkaXRpbmc6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB6SW5kZXg6IHRoZW1lID0+IHRoZW1lLnpJbmRleCgnY29udHJvbHNPdmVybGF5cycpICsgMVxuICB9XG59KVxuXG5jb25zdCBEaXNhYmxlZE92ZXJsYXkgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJSdcbn0pXG5cbmNvbnN0IFdpZHRoQ29udHJvbCA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICc4cHgnLFxuICBoZWlnaHQ6ICcyMHB4JyxcbiAgbWFyZ2luVG9wOiAnLTEwcHgnLFxuICBjdXJzb3I6ICdldy1yZXNpemUnLFxuICAnOmJlZm9yZSc6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBiYWNrZ3JvdW5kOiAnd2hpdGUnLFxuICAgIHdpZHRoOiAnNHB4JyxcbiAgICBoZWlnaHQ6ICcxMnB4JyxcbiAgICBtYXJnaW5MZWZ0OiAnLTJweCcsXG4gICAgbWFyZ2luVG9wOiAnLTZweCcsXG4gICAgdG9wOiAnNTAlJyxcbiAgICBsZWZ0OiAnNTAlJyxcbiAgICBib3hTaGFkb3c6IHRoZW1lID0+IHRoZW1lLmRlZmF1bHRTaGFkb3dcbiAgfVxufSwge1xuICBsZWZ0OiB7XG4gICAgbGVmdDogJy01cHgnLFxuICAgIHRvcDogJzUwJSdcbiAgfSxcbiAgcmlnaHQ6IHtcbiAgICByaWdodDogJy01cHgnLFxuICAgIHRvcDogJzUwJSdcbiAgfVxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3NoYXJlZC9zcHJpdGVzL3Nwcml0ZXMvdGV4dC1pdGVtLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFJlYWN0LCBhZG9uaXMgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgSXRlbUNvbXBvbmVudCBmcm9tICcuL2l0ZW0tY29tcG9uZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcnVzaEl0ZW1Db21wb25lbnQgZXh0ZW5kcyBJdGVtQ29tcG9uZW50IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZFxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudERpZE1vdW50KClcblxuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMucHJvcHMuc3ByaXRlLmdldENhbnZhcygpXG4gICAgaWYgKHRoaXMuX2JydXNoKSB7XG4gICAgICB0aGlzLl9hcHBlbmRDYW52YXMoY2FudmFzKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoaXMgY29tcG9uZW50IGlzIGFib3V0IHRvIHJlY2VpdmUgbmV3IHByb3BlcnRpZXNcbiAgICogQHBhcmFtICB7T2JqZWN0fSBuZXh0UHJvcHNcbiAgICovXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuc3ByaXRlICE9PSB0aGlzLnByb3BzLnNwcml0ZSkge1xuICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5wcm9wcy5zcHJpdGUuZ2V0Q2FudmFzKClcbiAgICAgIGNhbnZhcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNhbnZhcylcblxuICAgICAgaWYgKHRoaXMuX2JydXNoKSB7XG4gICAgICAgIGNvbnN0IG5ld0NhbnZhcyA9IG5leHRQcm9wcy5zcHJpdGUuZ2V0Q2FudmFzKClcbiAgICAgICAgdGhpcy5fYXBwZW5kQ2FudmFzKG5ld0NhbnZhcylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyBhbmQgc3R5bGVzIHRoZSBnaXZlbiBjYW52YXNcbiAgICogQHBhcmFtICB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FwcGVuZENhbnZhcyAoY2FudmFzKSB7XG4gICAgY2FudmFzLnN0eWxlLndpZHRoID0gJzEwMCUnXG4gICAgY2FudmFzLnN0eWxlLmhlaWdodCA9ICcxMDAlJ1xuICAgIHRoaXMuX2JydXNoLmFwcGVuZENoaWxkKGNhbnZhcylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBvdmVybGF5IGNvbnRyb2xzXG4gICAqIEByZXR1cm4ge1JlYWN0LkNvbXBvbmVudH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJPdmVybGF5Q29udHJvbHMgKCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5oaWRlQ29udGVudCkgcmV0dXJuIG51bGxcbiAgICByZXR1cm4gKDxCcnVzaEl0ZW0gaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fYnJ1c2ggPSBlbCB9fSAvPilcbiAgfVxufVxuXG5jb25zdCBCcnVzaEl0ZW0gPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJSdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9zaGFyZWQvc3ByaXRlcy9zcHJpdGVzL2JydXNoLWl0ZW0tY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgYWRvbmlzIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IEl0ZW1Db21wb25lbnQgZnJvbSAnLi9pdGVtLWNvbXBvbmVudCdcbmltcG9ydCBJbWFnZUxvYWRlciBmcm9tICdzaGFyZWQvbG9hZGVycy9pbWFnZS1sb2FkZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHREZXNpZ25JdGVtQ29tcG9uZW50IGV4dGVuZHMgSXRlbUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBJdGVtQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuICBzdGF0aWMgTUlOX1dJRFRIID0gSXRlbUNvbXBvbmVudC5NSU5fV0lEVEhcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLnN0YXRlID0geyB9XG5cbiAgICAvLyBEb3VibGUtdGFwIGhhbmRsaW5nIHZhcmlhYmxlc1xuICAgIHRoaXMuX2hhc1RvdWNoU3RhcnRlZCA9IGZhbHNlXG4gICAgdGhpcy5fdG91Y2hDb3VudCA9IDBcbiAgICB0aGlzLl90b3VjaFRpbWVvdXQgPSBudWxsXG4gIH1cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBzdGFydHMgc2NhbGluZyB0aGUgaXRlbVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQmVmb3JlU2NhbGUgKCkge1xuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG4gICAgdGhpcy5faW5pdGlhbE9wdGlvbnMgPSB7XG4gICAgICB3aWR0aDogc3ByaXRlLmdldFdpZHRoKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGlsZSB0aGUgdXNlciBpcyBzY2FsaW5nIHRoZSBpdGVtXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uU2NhbGUgKHNjYWxlKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHsgd2lkdGggfSA9IHRoaXMuX2luaXRpYWxPcHRpb25zXG4gICAgY29uc3QgeyBzcHJpdGUgfSA9IHRoaXMucHJvcHNcbiAgICBzcHJpdGUuc2V0KHtcbiAgICAgIHdpZHRoOiB3aWR0aCAqIChzY2FsZSAvIGVkaXRvci56b29tLmxldmVsKVxuICAgIH0pXG5cbiAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgICBlZGl0b3IucmVuZGVyKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzcHJpdGUgZGltZW5zaW9uc1xuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0U3ByaXRlRGltZW5zaW9ucyAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHsgc3ByaXRlIH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIHNwcml0ZS5nZXREaW1lbnNpb25zKCkuY2xvbmUoKVxuICAgICAgLm11bHRpcGx5KGVkaXRvci56b29tLmxldmVsKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0eWxlIG9iamVjdCBmb3IgdGhlIGl0ZW0gY29udGFpbmVyXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRDb250YWluZXJTdHlsZSAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IG91dHB1dERpbWVuc2lvbnMgPSBlZGl0b3IuZ2V0T3V0cHV0RGltZW5zaW9ucygpXG5cbiAgICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHN0aWNrZXJQb3NpdGlvbiA9IHNwcml0ZS5nZXRQb3NpdGlvbigpLmNsb25lKClcbiAgICAgIC5tdWx0aXBseShvdXRwdXREaW1lbnNpb25zKVxuXG4gICAgY29uc3QgZGVncmVlcyA9IHNwcml0ZS5nZXRSb3RhdGlvbigpICogMTgwIC8gTWF0aC5QSVxuICAgIGNvbnN0IHRyYW5zZm9ybSA9IGByb3RhdGVaKCR7ZGVncmVlcy50b0ZpeGVkKDIpfWRlZylgXG4gICAgY29uc3QgdHJhbnNmb3JtT3JpZ2luID0gJzUwJSA1MCUnXG5cbiAgICBjb25zdCBkaW1lbnNpb25zID0gc3ByaXRlLmdldERpbWVuc2lvbnMoKS5jbG9uZSgpXG4gICAgICAubXVsdGlwbHkoZWRpdG9yLnpvb20ubGV2ZWwpXG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBkaW1lbnNpb25zLngsXG4gICAgICBoZWlnaHQ6IGRpbWVuc2lvbnMueSxcbiAgICAgIGxlZnQ6IHN0aWNrZXJQb3NpdGlvbi54LFxuICAgICAgdG9wOiBzdGlja2VyUG9zaXRpb24ueSxcbiAgICAgIG1hcmdpbkxlZnQ6IGRpbWVuc2lvbnMueCAqIC0wLjUsXG4gICAgICBtYXJnaW5Ub3A6IGRpbWVuc2lvbnMueSAqIC0wLjUsXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIE1velRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgbXNUcmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIFdlYmtpdFRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiB0cmFuc2Zvcm1PcmlnaW4sXG4gICAgICBNb3pUcmFuc2Zvcm1PcmlnaW46IHRyYW5zZm9ybU9yaWdpbixcbiAgICAgIG1zVHJhbnNmb3JtT3JpZ2luOiB0cmFuc2Zvcm1PcmlnaW4sXG4gICAgICBXZWJraXRUcmFuc2Zvcm1PcmlnaW46IHRyYW5zZm9ybU9yaWdpblxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdHlsZSBvYmplY3QgZm9yIHRoZSBjb250ZW50IGVsZW1lbnRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldENvbnRlbnRTdHlsZSAoKSB7XG4gICAgLy8gY29uc3QgeyBzcHJpdGUgfSA9IHRoaXMucHJvcHNcbiAgICAvLyBjb25zdCB0cmFuc2Zvcm0gPSBgcm90YXRlWSgke3Nwcml0ZS5nZXRGbGlwSG9yaXpvbnRhbGx5KCkgPyAxODAgOiAwfWRlZykgcm90YXRlWCgke3Nwcml0ZS5nZXRGbGlwVmVydGljYWxseSgpID8gMTgwIDogMH1kZWcpYFxuICAgIC8vIGNvbnN0IHN0eWxlID0ge1xuICAgIC8vICAgb3BhY2l0eTogc3ByaXRlLmdldEFscGhhKCksXG4gICAgLy8gICB0cmFuc2Zvcm0sXG4gICAgLy8gICBNb3pUcmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAvLyAgIG1zVHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgLy8gICBXZWJraXRUcmFuc2Zvcm06IHRyYW5zZm9ybVxuICAgIC8vIH1cblxuICAgIC8vIGlmICh0aGlzLnN0YXRlLnJlbmRlckFzU1ZHKSB7XG4gICAgLy8gICBzdHlsZS5maWxsID0gc3ByaXRlLmdldFRpbnRDb2xvcigpLnRvUkdCQSgpXG4gICAgLy8gfVxuICAgIC8vIHJldHVybiBzdHlsZVxuICB9XG5cbiAgX29uSXRlbURvdWJsZUNsaWNrID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY2FudmFzQ29udHJvbHMgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCB7IGNvbnRyb2xzIH0gPSBjYW52YXNDb250cm9scy5wcm9wc1xuXG4gICAgcmV0dXJuIGNvbnRyb2xzLmVkaXRUZXh0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmb3Igd2hlbiBhIHRvdWNoIGV2ZW50IHN0YXJ0cy5cbiAgICpcbiAgICovXG4gIF9vbkl0ZW1Ub3VjaFN0YXJ0ID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLl9oYXNUb3VjaFN0YXJ0ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIFN0YXJ0IGRvdWJsZS10b3VjaCBkZXRlY3Rpb25cbiAgICBpZiAoIXRoaXMuX2hhc1RvdWNoU3RhcnRlZCkge1xuICAgICAgdGhpcy5faGFzVG91Y2hTdGFydGVkID0gdHJ1ZVxuICAgICAgdGhpcy5fdG91Y2hDb3VudCA9IDBcbiAgICB9XG5cbiAgICAvLyBDbGVhciBkb3VibGUgdG91Y2ggYWZ0ZXIgMzAwbXMsXG4gICAgLy8gd2hpY2ggaXMgdGhlIGRvdWJsZSB0b3VjaCB0aW1lIGxpbWl0XG4gICAgdGhpcy5fdG91Y2hUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLl9oYXNUb3VjaFN0YXJ0ZWQgPSBmYWxzZVxuICAgICAgdGhpcy5fdG91Y2hDb3VudCA9IDBcbiAgICB9LCAzMDApXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgZm9yIHRoZSB0b3VjaGVuZCBldmVudFxuICAgKlxuICAgKi9cbiAgX29uSXRlbVRvdWNoRW5kID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5faGFzVG91Y2hTdGFydGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB7IGNhbnZhc0NvbnRyb2xzIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBjb250cm9scyB9ID0gY2FudmFzQ29udHJvbHMucHJvcHNcblxuICAgIHRoaXMuX3RvdWNoQ291bnQrK1xuXG4gICAgLy8gSWYgaXQgZ2V0cyB0byB0aGlzLCB3ZSBoYXZlIGEgZG91YmxlLXRvdWNoXG4gICAgLy8gaW4gbGVzcyB0aGFuIDMwMG1zXG4gICAgaWYgKHRoaXMuX3RvdWNoQ291bnQgPj0gMikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RvdWNoVGltZW91dClcblxuICAgICAgdGhpcy5faGFzVG91Y2hTdGFydGVkID0gZmFsc2VcbiAgICAgIHRoaXMuX3RvdWNoQ291bnQgPSAwXG5cbiAgICAgIGNvbnRyb2xzLmVkaXRUZXh0KClcbiAgICB9XG4gIH1cblxuICBfZ2V0SXRlbUNvbnRyb2xzUHJvcHMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkRvdWJsZUNsaWNrOiB0aGlzLl9vbkl0ZW1Eb3VibGVDbGljayxcbiAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5fb25JdGVtVG91Y2hTdGFydCxcbiAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuX29uSXRlbVRvdWNoRW5kXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBpdGVtJ3MgY29udGVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgX3JlbmRlckNvbnRlbnQgKCkge1xuICAgIHJldHVybiBudWxsXG4gIC8vICAgaWYgKHRoaXMucHJvcHMuaGlkZUNvbnRlbnQpIHJldHVybiBudWxsXG5cbiAgLy8gICBjb25zdCB7IHNwcml0ZSB9ID0gdGhpcy5wcm9wc1xuICAvLyAgIGNvbnN0IHsgc3ZnQXR0cmlidXRlcyB9ID0gdGhpcy5zdGF0ZVxuICAvLyAgIHJldHVybiB0aGlzLnN0YXRlLnJlbmRlckFzU1ZHXG4gIC8vICAgICA/IDxTVkdJbWFnZSBzdHlsZT17dGhpcy5fZ2V0Q29udGVudFN0eWxlKCl9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogdGhpcy5zdGF0ZS5zdmdDb250ZW50IH19IHsuLi5zdmdBdHRyaWJ1dGVzfSAvPlxuICAvLyAgICAgOiA8SW1hZ2Ugc3JjPXtzcHJpdGUuZ2V0SW1hZ2UoKS5zcmN9IHN0eWxlPXt0aGlzLl9nZXRDb250ZW50U3R5bGUoKX0gLz5cbiAgLy9cbiAgfVxufVxuXG5jb25zdCBJbWFnZSA9IGFkb25pcy5pbWcoe1xuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSlcblxuY29uc3QgU1ZHSW1hZ2UgPSBhZG9uaXMuc3ZnKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJSdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9zaGFyZWQvc3ByaXRlcy9zcHJpdGVzL3RleHQtZGVzaWduLWl0ZW0tY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgVXRpbHMgYXMgU0RLVXRpbHMgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCBEZXNrdG9wVUksIHsgQmFzZUNvbnRyb2xzLCBGaWx0ZXJNYW5hZ2VyIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IEZpbHRlckNvbnRyb2xzQ29tcG9uZW50IGZyb20gJy4vZmlsdGVyLWNvbnRyb2xzLWNvbXBvbmVudCdcblxuLy8gbGV0IEZpbHRlcnMgPSBudWxsXG4vLyBpZiAoT3BlcmF0aW9ucy5GaWx0ZXJPcGVyYXRpb24pIHtcbi8vICAgRmlsdGVycyA9IE9wZXJhdGlvbnMuRmlsdGVyT3BlcmF0aW9uLkZpbHRlcnNcbi8vIH1cblxuLyoqXG4gKiBUaGUgQ29udHJvbHMgZm9yIHRoZSBGaWx0ZXIgdG9vbC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuQ29udHJvbHNcbiAqIEBleHRlbmRzIFBob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5CYXNlQ29udHJvbHNcbiAqL1xuY2xhc3MgRmlsdGVyQ29udHJvbHMgZXh0ZW5kcyBCYXNlQ29udHJvbHMge1xuICBzdGF0aWMgY2xpY2tBdFBvc2l0aW9uID0gQmFzZUNvbnRyb2xzLmNsaWNrQXRQb3NpdGlvblxuXG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGlkZW50aWZpZXIgPSAnZmlsdGVyJ1xuXG4gIC8qKlxuICAgKiBUaGUgY29udHJvbHMgY29tcG9uZW50IGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7UmVhY3QuQ29tcG9uZW50fVxuICAgKi9cbiAgc3RhdGljIGNvbnRyb2xzQ29tcG9uZW50ID0gRmlsdGVyQ29udHJvbHNDb21wb25lbnRcblxuICAvKipcbiAgICogVGhlIGNhbnZhcyBjb21wb25lbnQgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtSZWFjdC5Db21wb25lbnR9XG4gICAqL1xuICBzdGF0aWMgY2FudmFzQ29udHJvbHNDb21wb25lbnQgPSBCYXNlQ29udHJvbHMuY2FudmFzQ29udHJvbHNDb21wb25lbnRcblxuICAvKipcbiAgICogVGhlIGljb24gcGF0aCBvZiB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBpY29uUGF0aCA9ICdlZGl0b3IvY29udHJvbHMvZmlsdGVyL2ljb24ucG5nJ1xuXG4gIC8qKlxuICAgKiBUaGUgYWN0aXZlIGljb24gcGF0aCBvZiB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBhY3RpdmVJY29uUGF0aCA9ICdlZGl0b3IvY29udHJvbHMvZmlsdGVyL2ljb24tYWN0aXZlLnBuZydcblxuICAvKipcbiAgICogVGhlIG9wZXJhdGlvbnMgcmVxdWlyZWQgZm9yIHRoaXMgY29udHJvbCB0byB3b3JrIHByb3Blcmx5XG4gICAqIEB0eXBlIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyByZXF1aXJlZE9wZXJhdGlvbnMgPSBbJ2ZpbHRlcicsICd0cmFuc2Zvcm0nXVxuXG4gIC8qKlxuICAgKiBPcGVyYXRpb25zIHdoaWNoIHdpbGwgdHJpZ2dlciBVSSB1cGRhdGVzIG9uIHRoaXMgY29udHJvbHMuXG4gICAqIEB0eXBlIHtTdHJpbmdbXX1cbiAgICovXG4gIHN0YXRpYyB1cGRhdGFibGVPcGVyYXRpb25zID0gWydmaWx0ZXInXVxuXG4gIHN0YXRpYyBzd2l0Y2hUb0RlZmF1bHRDb250cm9sc09uUmVtb3ZhbCA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIHRoaXMgY29udHJvbFxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJvcGVydHkge09iamVjdFtdfSBbY2F0ZWdvcmllcyA9IFtdXVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtyZXBsYWNlQ2F0ZWdvcmllcyA9IGZhbHNlXVxuICAgKiBAcHJvcGVydHkge1N0cmluZ1tdfSBbYXZhaWxhYmxlRmlsdGVycyA9IG51bGxdXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgY2F0ZWdvcmllczogW10sXG4gICAgcmVwbGFjZUNhdGVnb3JpZXM6IGZhbHNlLFxuICAgIGF2YWlsYWJsZUZpbHRlcnM6IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXBzIHRoZSBvcGVyYXRpb25zIHN0YXRlIHRvIGEgc2hhcmVkIHN0YXRlIG9iamVjdFxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcGVyYXRpb25zXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2luaXRpYWw9ZmFsc2VdXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgbWFwT3BlcmF0aW9uc1RvU2hhcmVkU3RhdGUgKG9wZXJhdGlvbnMsIGluaXRpYWwgPSBmYWxzZSkge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IG9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ2ZpbHRlcicpXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIHByb3BzXG4gICAgICBpbnRlbnNpdHk6IG9wZXJhdGlvbiA/IG9wZXJhdGlvbi5nZXRJbnRlbnNpdHkoKSAqIDEwMCA6IDEwMCxcbiAgICAgIGlkZW50aWZpZXI6IG9wZXJhdGlvbiA/IG9wZXJhdGlvbi5nZXRJZGVudGlmaWVyKCkgOiBudWxsLFxuICAgICAgZmlsdGVyOiBvcGVyYXRpb24gPyBvcGVyYXRpb24uZmlsdGVyIDogbnVsbCxcblxuICAgICAgLy8gc2V0dGVyc1xuICAgICAgc2V0SW50ZW5zaXR5OiB2YWx1ZSA9PiB7IG9wZXJhdGlvbiAmJiBvcGVyYXRpb24uc2V0SW50ZW5zaXR5KHZhbHVlIC8gMTAwKSB9LFxuICAgICAgc2V0RmlsdGVyOiB2YWx1ZSA9PiB7IG9wZXJhdGlvbiAmJiBvcGVyYXRpb24uc2V0RmlsdGVyKHZhbHVlKSB9LFxuICAgICAgc2V0SWRlbnRpZmllcjogdmFsdWUgPT4geyBvcGVyYXRpb24gJiYgb3BlcmF0aW9uLnNldElkZW50aWZpZXIodmFsdWUpIH0sXG4gICAgICBzZXRPcGVyYXRpb25PcHRpb25zOiBvcHRzID0+IHsgb3BlcmF0aW9uLnNldChvcHRzKSB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGNvbnRyb2wgaXMgZW5hYmxlZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRW5hYmxlZCAoZWRpdG9yKSB7XG4gICAgcmV0dXJuIGVkaXRvci5pc1Rvb2xFbmFibGVkKCdmaWx0ZXInKSAmJiBlZGl0b3IuaXNUb29sQWxsb3dlZCgnZmlsdGVyJylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhc3NldHMgdGhhdCBzaG91bGQgYmUgcHJlbG9hZGVkIGZvciB0aGlzIGNvbnRyb2xcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkVkaXRvcn0gZWRpdG9yXG4gICAqIEByZXR1cm4ge1N0cmluZ1tdfVxuICAgKi9cbiAgc3RhdGljIGdldFByZWxvYWRBc3NldHMgKGVkaXRvcikge1xuICAgIGNvbnN0IGFzc2V0cyA9IFtdXG5cbiAgICBjb25zdCBvcHRpb25zID0gZWRpdG9yLmdldE9wdGlvbnMoKVxuICAgIGNvbnN0IGZpbHRlck9wdGlvbnMgPSBTREtVdGlscy5kZWZhdWx0cyhcbiAgICAgIG9wdGlvbnMuZWRpdG9yLmNvbnRyb2xzT3B0aW9ucy5maWx0ZXIsXG4gICAgICB0aGlzLmRlZmF1bHRPcHRpb25zXG4gICAgKVxuXG4gICAgLy8gQWRkIHJhdGlvc1xuICAgIGNvbnN0IGZpbHRlck1hbmFnZXIgPSBuZXcgRmlsdGVyTWFuYWdlcihlZGl0b3IuZ2V0VUkoKSwgZmlsdGVyT3B0aW9ucylcbiAgICBjb25zdCBhbGxGaWx0ZXJzID0gZmlsdGVyTWFuYWdlci5nZXRGaWx0ZXJzRm9yQ2F0ZWdvcnkoJ2FsbCcpXG5cbiAgICBhbGxGaWx0ZXJzLmZvckVhY2goZmlsdGVyID0+IHtcbiAgICAgIGlmICh0eXBlb2YgZmlsdGVyLmx1dEltYWdlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhc3NldHMucHVzaChbZmlsdGVyLmx1dEltYWdlLCBmYWxzZV0pXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiBhc3NldHNcbiAgfVxufVxuXG5EZXNrdG9wVUkuQ29udHJvbHMuRmlsdGVyQ29udHJvbHMgPSBGaWx0ZXJDb250cm9sc1xuXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJDb250cm9sc1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvZmlsdGVyL2luZGV4LmpzIiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgUGhvdG9FZGl0b3JTREssIHsgVXRpbHMgYXMgU0RLVXRpbHMsIE9wZXJhdGlvbnMgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCB7XG4gIFJlYWN0LCBhZG9uaXMsIENvbnN0YW50cywgQ29udHJvbHNDb21wb25lbnQsIFNjcm9sbGFibGVMaXN0Q29tcG9uZW50LFxuICBMb2FkaW5nSW5kaWNhdG9yQ29tcG9uZW50LCBGaWx0ZXJNYW5hZ2VyXG59IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmltcG9ydCBQcm9taXNlUXVldWUgZnJvbSAnc2hhcmVkL2FzeW5jL3Byb21pc2UtcXVldWUnXG5pbXBvcnQgeyBjYW5jZWxBbmltYXRpb25GcmFtZSwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIH0gZnJvbSAnc2hhcmVkL2FzeW5jL2FuaW1hdGlvbi1mcmFtZSdcbmltcG9ydCBGaWx0ZXJMaXN0SXRlbUNvbXBvbmVudCBmcm9tICcuL2ZpbHRlci1saXN0LWl0ZW0tY29tcG9uZW50J1xuaW1wb3J0IEZpbHRlclByZXZpZXdSZW5kZXJlciBmcm9tICcuL2ZpbHRlci1wcmV2aWV3LXJlbmRlcmVyJ1xuXG5sZXQgSWRlbnRpdHlGaWx0ZXJcbmlmIChPcGVyYXRpb25zLkZpbHRlck9wZXJhdGlvbikge1xuICBJZGVudGl0eUZpbHRlciA9IE9wZXJhdGlvbnMuRmlsdGVyT3BlcmF0aW9uLkZpbHRlcnMuSWRlbnRpdHlGaWx0ZXJcbn1cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWx0ZXJDb250cm9sc0NvbXBvbmVudCBleHRlbmRzIENvbnRyb2xzQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IENvbnRyb2xzQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuICBzdGF0aWMgcHJvcFR5cGVzID0gQ29udHJvbHNDb21wb25lbnQucHJvcFR5cGVzXG4gIHN0YXRpYyBSb290RWxlbWVudCA9IENvbnRyb2xzQ29tcG9uZW50LlJvb3RFbGVtZW50XG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25JbnRlbnNpdHlDaGFuZ2VkJyxcbiAgICAgICdfb25MaXN0U2Nyb2xsJ1xuICAgIClcblxuICAgIGNvbnN0IHsgdWksIGVkaXRvciwgdGhlbWUgfSA9IHRoaXMuY29udGV4dFxuXG4gICAgdGhpcy5fbG9hZGVkRmlsdGVycyA9IFtdXG4gICAgdGhpcy5fZmlsdGVyUHJldmlld1JlbmRlcmVyID0gbmV3IEZpbHRlclByZXZpZXdSZW5kZXJlcihlZGl0b3IpXG4gICAgdGhpcy5fcmVuZGVyUXVldWUgPSBuZXcgUHJvbWlzZVF1ZXVlKDEsIEluZmluaXR5LCB0aGVtZS5saXN0SXRlbVNsaWRlSW5EZWxheSlcbiAgICB0aGlzLl9maWx0ZXJNYW5hZ2VyID0gbmV3IEZpbHRlck1hbmFnZXIodWksIHRoaXMucHJvcHMub3B0aW9ucylcbiAgICB0aGlzLl9maWx0ZXJQcmV2aWV3UXVldWUgPSBbXVxuXG4gICAgdGhpcy5fZmlsdGVyUHJldmlld3MgPSBbXVxuICAgIHRoaXMuX2NhdGVnb3J5ID0gJ2FsbCdcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBzdHlsZXMgbmVlZCB0byBiZSBmaXhlZCBieSB0aGUgSmF2YVNjcmlwdC5cbiAgICogVGhpcyBuZWVkcyB0byBiZSBkb25lIHRoYW5rcyB0byBvbGRlciBJbnRlcm5ldCBFeHBsb3JlciBicm93c2VycyB3aGljaCBoYXZlXG4gICAqIGEgYnVuY2ggb2YgQ1NTIGJ1Z3MuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBmaXhTdHlsZXMgKCkge1xuICAgIHJldHVybiBzdXBlci5maXhTdHlsZXMoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLl9vbkxpc3RTY3JvbGwoKVxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoaXMgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnREaWRNb3VudCgpXG5cbiAgICB0aGlzLl9maWx0ZXJQcmV2aWV3UmVuZGVyZXIuaW5pdCgpXG5cbiAgICB0aGlzLl9yZW5kZXJQcmV2aWV3c0FuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHRoaXMuX3JlbmRlclByZXZpZXdzKClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnRXaWxsVW5tb3VudCgpXG4gICAgaWYgKHRoaXMuX3JlbmRlclByZXZpZXdzQW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3JlbmRlclByZXZpZXdzQW5pbWF0aW9uRnJhbWUpXG4gICAgfVxuXG4gICAgdGhpcy5fcmVuZGVyUXVldWUuZGlzcG9zZSgpXG4gICAgdGhpcy5fZmlsdGVyUHJldmlld1JlbmRlcmVyLmRpc3Bvc2UoKVxuICAgIHRoaXMuX2Rpc3Bvc2VkID0gdHJ1ZVxuICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUFJFVklFVyBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyBhbGwgZmlsdGVyIHByZXZpZXdzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyUHJldmlld3MgKCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCByZW5kZXJlciA9IGVkaXRvci5nZXRTREsoKS5nZXRSZW5kZXJlcigpXG5cbiAgICBjb25zdCBmaWx0ZXJzID0gdGhpcy5fZ2V0VmlzaWJsZUZpbHRlcnMoKVxuICAgICAgLmZpbHRlcihmaWx0ZXIgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZGVkRmlsdGVycy5pbmRleE9mKGZpbHRlcikgPT09IC0xXG4gICAgICB9KVxuXG4gICAgaWYgKHJlbmRlcmVyLmlzT2ZUeXBlKFBob3RvRWRpdG9yU0RLLlJlbmRlcmVyVHlwZS5XRUJHTCkpIHtcbiAgICAgIGZpbHRlcnMuZm9yRWFjaChmaWx0ZXIgPT4ge1xuICAgICAgICB0aGlzLl9sb2FkZWRGaWx0ZXJzLnB1c2goZmlsdGVyKVxuICAgICAgICB0aGlzLl9yZW5kZXJRdWV1ZS5hZGQoKCkgPT5cbiAgICAgICAgICB0aGlzLl9maWx0ZXJNYW5hZ2VyLmluc3RhbnRpYXRlRmlsdGVyV2l0aElkZW50aWZpZXIoZmlsdGVyLmlkZW50aWZpZXIpXG4gICAgICAgICAgICAudGhlbihmaWx0ZXJJbnN0YW5jZSA9PiB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9kaXNwb3NlZCkgcmV0dXJuXG5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlclByZXZpZXdSZW5kZXJlci5yZW5kZXIoZmlsdGVySW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgLnRoZW4ocHJldmlld1VybCA9PiB7XG4gICAgICAgICAgICAgICAgICB0aGlzLl9maWx0ZXJQcmV2aWV3c1tmaWx0ZXIuaWRlbnRpZmllcl0gPSBwcmV2aWV3VXJsXG4gICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbG9hZGVkRmlsdGVycyA9IHRoaXMuX2xvYWRlZEZpbHRlcnMuY29uY2F0KGZpbHRlcnMpXG4gICAgICBmaWx0ZXJzLmZvckVhY2goZmlsdGVyID0+IHtcbiAgICAgICAgdGhpcy5fcmVuZGVyUXVldWUuYWRkKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9maWx0ZXJQcmV2aWV3c1tmaWx0ZXIuaWRlbnRpZmllcl0gPVxuICAgICAgICAgICAgICB0aGlzLl9nZXRBc3NldFBhdGgoYGVkaXRvci9jb250cm9scy9maWx0ZXIvZmlsdGVycy8ke2ZpbHRlci5pZGVudGlmaWVyfS5wbmdgLCB0cnVlKVxuICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlsdGVycyB0aGF0IGFyZSBjdXJyZW50bHkgYmVpbmcgcmVuZGVyZWQgb24gc2NyZWVuXG4gICAqIEByZXR1cm4ge1Bob3RvRWRpdG9yU0RLLkZpbHRlcltdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFZpc2libGVGaWx0ZXJzICgpIHtcbiAgICBjb25zdCBmaWx0ZXJzID0gW0lkZW50aXR5RmlsdGVyXS5jb25jYXQoXG4gICAgICB0aGlzLl9maWx0ZXJNYW5hZ2VyLmdldEZpbHRlcnNGb3JDYXRlZ29yeSh0aGlzLl9jYXRlZ29yeSlcbiAgICApXG4gICAgY29uc3QgdmlzaWJsZUZpbHRlcnMgPSBbXVxuICAgIGNvbnN0IGNvbnRhaW5lclJlY3QgPSB0aGlzLl9jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGZpbHRlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCBmaWx0ZXIgPSBmaWx0ZXJzW2ldXG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5yZWZzW2BmaWx0ZXItJHtmaWx0ZXIuaWRlbnRpZmllcn1gXS5jb250YWluZXJcbiAgICAgIGNvbnN0IGVsZW1lbnRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgY29uc3QgdmlzaWJsZSA9ICEoZWxlbWVudFJlY3QudG9wID4gY29udGFpbmVyUmVjdC5ib3R0b20gKyBjb250YWluZXJSZWN0LmhlaWdodCB8fFxuICAgICAgICBlbGVtZW50UmVjdC5ib3R0b20gPCBjb250YWluZXJSZWN0LnRvcClcbiAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgIHZpc2libGVGaWx0ZXJzLnB1c2goZmlsdGVyKVxuICAgICAgfSBlbHNlIGlmICh2aXNpYmxlRmlsdGVycy5sZW5ndGgpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZpc2libGVGaWx0ZXJzXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgbGlzdCBpcyBzY3JvbGxpbmdcbiAgICogQHBhcmFtICB7TnVtYmVyfSBwb3NpdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uTGlzdFNjcm9sbCAocG9zaXRpb24pIHtcbiAgICB0aGlzLl9yZW5kZXJQcmV2aWV3cygpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiBhIGZpbHRlciBpdGVtIGlzIGNsaWNrZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IGlkZW50aWZpZXJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkl0ZW1DbGljayAoaWRlbnRpZmllcikge1xuICAgIGlmICh0aGlzLnNoYXJlZFN0YXRlLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2ZpbHRlck1hbmFnZXIuaW5zdGFudGlhdGVGaWx0ZXJXaXRoSWRlbnRpZmllcihpZGVudGlmaWVyKVxuICAgICAgLnRoZW4oZmlsdGVyID0+IHtcbiAgICAgICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXRPcGVyYXRpb25PcHRpb25zKHtcbiAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgICBpbnRlbnNpdHk6IDFcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgICAgIGVkaXRvci5yZW5kZXIoKVxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSBmaWx0ZXIgaW50ZW5zaXR5IGhhcyBiZWVuIGNoYW5nZWRcbiAgICogQHBhcmFtICB7TnVtYmVyfSB2YWx1ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uSW50ZW5zaXR5Q2hhbmdlZCAodmFsdWUpIHtcbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldEludGVuc2l0eSh2YWx1ZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBsaXN0IGl0ZW1zXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnRbXX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJMaXN0SXRlbXMgKCkge1xuICAgIGNvbnN0IGZpbHRlcnMgPSB0aGlzLl9maWx0ZXJNYW5hZ2VyLmdldEZpbHRlcnNGb3JDYXRlZ29yeSh0aGlzLl9jYXRlZ29yeSlcblxuICAgIGNvbnN0IGN1cnJlbnRGaWx0ZXJJZGVudGlmaWVyID0gdGhpcy5zaGFyZWRTdGF0ZS5pZGVudGlmaWVyXG4gICAgY29uc3QgaW50ZW5zaXR5ID0gdGhpcy5zaGFyZWRTdGF0ZS5pbnRlbnNpdHlcbiAgICBjb25zdCBmaWx0ZXJQcmV2aWV3cyA9IHRoaXMuX2ZpbHRlclByZXZpZXdzXG5cbiAgICByZXR1cm4gW0lkZW50aXR5RmlsdGVyXS5jb25jYXQoZmlsdGVycykubWFwKChmaWx0ZXIsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCB7IGlkZW50aWZpZXIgfSA9IGZpbHRlclxuICAgICAgY29uc3QgbG9hZGluZyA9ICFmaWx0ZXJQcmV2aWV3c1tpZGVudGlmaWVyXSAmJiBpbmRleCA9PT0gdGhpcy5fbG9hZGVkRmlsdGVycy5sZW5ndGhcbiAgICAgIGNvbnN0IHNlbGVjdGVkID0gaWRlbnRpZmllciA9PT0gY3VycmVudEZpbHRlcklkZW50aWZpZXJcblxuICAgICAgcmV0dXJuICg8TGlzdEl0ZW1Db250YWluZXJcbiAgICAgICAga2V5PXtpZGVudGlmaWVyfVxuICAgICAgICBkYXRhLXNlbGVjdGVkPXtzZWxlY3RlZH1cbiAgICAgICAgZGF0YS1pZGVudGlmaWVyPXtpZGVudGlmaWVyfVxuICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWZpbHRlckxpc3RJdGVtJyA6IHVuZGVmaW5lZCl9PlxuICAgICAgICA8RmlsdGVyTGlzdEl0ZW1Db21wb25lbnRcbiAgICAgICAgICByZWY9e2BmaWx0ZXItJHtpZGVudGlmaWVyfWB9XG4gICAgICAgICAgZmlsdGVyPXtmaWx0ZXJ9XG4gICAgICAgICAgaWRlbnRpZmllcj17aWRlbnRpZmllcn1cbiAgICAgICAgICBsYXN0Q2hpbGQ9e2ZpbHRlciA9PT0gZmlsdGVyc1tmaWx0ZXJzLmxlbmd0aCAtIDFdfVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uSXRlbUNsaWNrLmJpbmQodGhpcywgaWRlbnRpZmllcil9XG4gICAgICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkfVxuICAgICAgICAgIGludGVuc2l0eT17aW50ZW5zaXR5fVxuICAgICAgICAgIGRpc3BsYXlTbGlkZXI9e2ZpbHRlciAhPT0gSWRlbnRpdHlGaWx0ZXJ9XG4gICAgICAgICAgb25JbnRlbnNpdHlDaGFuZ2VkPXt0aGlzLl9vbkludGVuc2l0eUNoYW5nZWR9XG4gICAgICAgICAgdmlzaWJsZT17ISFmaWx0ZXJQcmV2aWV3c1tpZGVudGlmaWVyXX1cbiAgICAgICAgICBwcmV2aWV3VXJsPXtmaWx0ZXJQcmV2aWV3c1tpZGVudGlmaWVyXX0gLz5cbiAgICAgICAge2xvYWRpbmcgJiYgPExvYWRpbmdJbmRpY2F0b3IgLz59XG4gICAgICA8L0xpc3RJdGVtQ29udGFpbmVyPilcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb3BlcnRpZXMgZm9yIHRoZSByb290IGVsZW1lbnRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFJvb3RQcm9wcyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzTmFtZTogKHRlc3QgPyAnanMtZmlsdGVyQ29udHJvbHMnIDogdW5kZWZpbmVkKSxcbiAgICAgIHdpdGhCb3JkZXJUb3A6IHRydWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbnRyb2wncyBjb250ZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICBfcmVuZGVyQ29udGVudCAoKSB7XG4gICAgcmV0dXJuICg8U2Nyb2xsYWJsZUxpc3RDb21wb25lbnRcbiAgICAgIGRpcmVjdGlvbj0ndmVydGljYWwnXG4gICAgICBvblNjcm9sbD17dGhpcy5fb25MaXN0U2Nyb2xsfVxuICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fc2Nyb2xsYmFyID0gZWwgfX0+XG4gICAgICA8TGlzdD5cbiAgICAgICAge3RoaXMuX3JlbmRlckxpc3RJdGVtcygpfVxuICAgICAgPC9MaXN0PlxuICAgIDwvU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQ+KVxuICB9XG59XG5cbmNvbnN0IExpc3QgPSBhZG9uaXMudWwoe1xuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgbWFyZ2luOiAnMCcsXG4gIHBhZGRpbmc6ICcyNXB4J1xufSlcblxuY29uc3QgTGlzdEl0ZW1Db250YWluZXIgPSBhZG9uaXMubGkoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSlcblxuY29uc3QgTG9hZGluZ0luZGljYXRvciA9IGFkb25pcyhMb2FkaW5nSW5kaWNhdG9yQ29tcG9uZW50KSh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIG1hcmdpblRvcDogMFxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2ZpbHRlci9maWx0ZXItY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgQmFzZUNvbXBvbmVudCwgU2xpZGVyQ29tcG9uZW50LCBDb250cm9sc1N0eWxlcywgVHJhbnNpdGlvbiB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmNvbnN0IHsgQ29udHJvbEl0ZW0sIENvbnRyb2xJdGVtQWN0aXZlT3ZlcmxheSwgQ29udHJvbEl0ZW1UaXRsZSB9ID0gQ29udHJvbHNTdHlsZXNcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyTGlzdEl0ZW1Db21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBob3ZlcmVkOiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSByZW5kZXJpbmcgd2hlbiBuZXcgcHJvcHMgb3Igc3RhdGUgYXJlIGJlaW5nIHJlY2VpdmVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGlmICh0aGlzLnByb3BzLnByZXZpZXdVcmwgIT09IG5leHRQcm9wcy5wcmV2aWV3VXJsIHx8XG4gICAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWQgIT09IG5leHRQcm9wcy5zZWxlY3RlZCB8fFxuICAgICAgICB0aGlzLnByb3BzLnZpc2libGUgIT09IG5leHRQcm9wcy52aXNpYmxlIHx8XG4gICAgICAgIHRoaXMuc3RhdGUuaG92ZXJlZCAhPT0gbmV4dFN0YXRlLmhvdmVyZWQgfHxcbiAgICAgICAgdGhpcy5wcm9wcy5maWx0ZXIgIT09IG5leHRQcm9wcy5maWx0ZXIpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuaW50ZW5zaXR5ICE9PSBuZXh0UHJvcHMuaW50ZW5zaXR5KSB7XG4gICAgICBpZiAobmV4dFByb3BzLnNlbGVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGxhc3RDaGlsZCwgb25DbGljaywgb25JbnRlbnNpdHlDaGFuZ2VkLCBzZWxlY3RlZCwgaW50ZW5zaXR5LCBkaXNwbGF5U2xpZGVyLCB2aXNpYmxlLCBmaWx0ZXIgfSA9IHRoaXMucHJvcHNcbiAgICBsZXQgaW1hZ2UgPSBudWxsXG4gICAgaWYgKHRoaXMucHJvcHMucHJldmlld1VybCkge1xuICAgICAgaW1hZ2UgPSA8UHJldmlldyBzcmM9e3RoaXMucHJvcHMucHJldmlld1VybH0gLz5cbiAgICB9XG5cbiAgICBjb25zdCB7IHRyYW5zaXRpb25EdXJhdGlvbiB9ID0gdGhpcy5jb250ZXh0LnRoZW1lXG5cbiAgICBjb25zdCBpdGVtUHJvcHMgPSB7IGxhc3RDaGlsZCwgb25DbGljaywgdmlzaWJsZSB9XG4gICAgcmV0dXJuICg8SXRlbVxuICAgICAgey4uLml0ZW1Qcm9wc31cbiAgICAgIGFuaW1hdGVkXG4gICAgICBpbm5lclJlZj17KGVsKSA9PiB7IHRoaXMuX2NvbnRhaW5lciA9IGVsIH19XG4gICAgICBvbk1vdXNlRW50ZXI9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pfVxuICAgICAgb25Nb3VzZUxlYXZlPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSl9PlxuICAgICAgPEl0ZW1Db250YWluZXJcbiAgICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkfT5cbiAgICAgICAge2ltYWdlfVxuICAgICAgICA8VHJhbnNpdGlvblxuICAgICAgICAgIGFjdGl2ZT17c2VsZWN0ZWQgJiYgZGlzcGxheVNsaWRlcn1cbiAgICAgICAgICBlbnRlclByb3A9J3JlbmRlcmVkJ1xuICAgICAgICAgIGVudGVyRHVyYXRpb249e3RyYW5zaXRpb25EdXJhdGlvbiAqIDEwMDB9XG4gICAgICAgICAgYXBwZWFyUHJvcD0ndmlzaWJsZSdcbiAgICAgICAgICBhcHBlYXJEdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9uICogMTAwMH1cbiAgICAgICAgICBsZWF2ZUR1cmF0aW9uPXt0cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfT5cbiAgICAgICAgICB7c2VsZWN0ZWQgJiYgZGlzcGxheVNsaWRlciAmJiA8U2xpZGVyPlxuICAgICAgICAgICAgPFNsaWRlckNvbXBvbmVudFxuICAgICAgICAgICAgICBtaW5WYWx1ZT17MH1cbiAgICAgICAgICAgICAgbWF4VmFsdWU9ezEwMH1cbiAgICAgICAgICAgICAgdmFsdWVVbml0PScnXG4gICAgICAgICAgICAgIG1pZGRsZURvdD17ZmFsc2V9XG4gICAgICAgICAgICAgIHZhbHVlPXtpbnRlbnNpdHl9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkludGVuc2l0eUNoYW5nZWR9IC8+XG4gICAgICAgICAgPC9TbGlkZXI+fVxuICAgICAgICA8L1RyYW5zaXRpb24+XG4gICAgICAgIDxJdGVtVGl0bGUgaG92ZXJlZD17dGhpcy5zdGF0ZS5ob3ZlcmVkfT5cbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl90KGBwZXNkay5maWx0ZXIuYXNzZXQuJHtmaWx0ZXIuaWRlbnRpZmllcn1gKSB8fFxuICAgICAgICAgICAgZmlsdGVyLmRlZmF1bHROYW1lXG4gICAgICAgICAgfVxuICAgICAgICA8L0l0ZW1UaXRsZT5cbiAgICAgICAgPFRyYW5zaXRpb25cbiAgICAgICAgICBhY3RpdmU9e3NlbGVjdGVkfVxuICAgICAgICAgIGVudGVyUHJvcD0ncmVuZGVyZWQnXG4gICAgICAgICAgZW50ZXJEdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9uICogMTAwMH1cbiAgICAgICAgICBhcHBlYXJQcm9wPSd2aXNpYmxlJ1xuICAgICAgICAgIGFwcGVhckR1cmF0aW9uPXt0cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfVxuICAgICAgICAgIGxlYXZlRHVyYXRpb249e3RyYW5zaXRpb25EdXJhdGlvbiAqIDEwMDB9PlxuICAgICAgICAgIDxPdmVybGF5IHNlbGVjdGVkPXtzZWxlY3RlZH0gLz5cbiAgICAgICAgPC9UcmFuc2l0aW9uPlxuICAgICAgPC9JdGVtQ29udGFpbmVyPlxuICAgIDwvSXRlbT4pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGlzIGNvbXBvbmVudCdzIGNvbnRhaW5lclxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgZ2V0IGNvbnRhaW5lciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lclxuICB9XG59XG5cbmNvbnN0IEl0ZW0gPSBhZG9uaXMoQ29udHJvbEl0ZW0pLmRpdih7XG4gIGJhY2tncm91bmQ6IHRoZW1lID0+IHRoZW1lLmZpbHRlckl0ZW1CYWNrZ3JvdW5kQ29sb3Jcbn0sIHtcbiAgbGFzdENoaWxkOiB7XG4gICAgbWFyZ2luQm90dG9tOiAwXG4gIH1cbn0pXG5cbmNvbnN0IFNsaWRlciA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgekluZGV4OiAyLFxuICBoZWlnaHQ6ICcxNXB4JyxcbiAgdG9wOiAnNTAlJyxcbiAgbWFyZ2luVG9wOiAnLThweCcsXG4gIGxlZnQ6ICcxNXB4JyxcbiAgcmlnaHQ6ICcxNXB4JyxcbiAgb3BhY2l0eTogMCxcbiAgZGlzcGxheTogJ25vbmUnLFxuICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2Utb3V0YFxufSwge1xuICB2aXNpYmxlOiB7XG4gICAgb3BhY2l0eTogMVxuICB9LFxuICByZW5kZXJlZDoge1xuICAgIGRpc3BsYXk6ICdibG9jaydcbiAgfVxufSlcblxuY29uc3QgSXRlbUNvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICBoZWlnaHQ6ICcxMDAlJyxcblxuICAnOmJlZm9yZSc6IHtcbiAgICBjb250ZW50OiAnXCJcIicsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgaGVpZ2h0OiAnMzBweCcsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgekluZGV4OiAyLFxuICAgIG9wYWNpdHk6IDAuOSxcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICdsaW5lYXItZ3JhZGllbnQoLTE4MGRlZywgcmdiYSgwLCAwLCAwLCAwLjAwKSAwJSwgcmdiYSgwLCAwLCAwLCAwLjAwKSA1NCUsIHJnYmEoMCwgMCwgMCwgMC40NSkgMTAwJSknXG4gIH1cbn0pXG5cbmNvbnN0IEl0ZW1UaXRsZSA9IGFkb25pcyhDb250cm9sSXRlbVRpdGxlKS5zcGFuKHtcbiAgdGV4dFNoYWRvdzogJzAgMCA0cHggcmdiYSgwLCAwLCAwLCAwLjUpJ1xufSlcblxuY29uc3QgUHJldmlldyA9IGFkb25pcy5pbWcoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAnMCcsXG4gIGxlZnQ6ICcwJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgekluZGV4OiAnMScsXG4gIG9wYWNpdHk6ICcxJ1xufSlcblxuY29uc3QgT3ZlcmxheSA9IGFkb25pcyhDb250cm9sSXRlbUFjdGl2ZU92ZXJsYXkpLmRpdih7fSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2ZpbHRlci9maWx0ZXItbGlzdC1pdGVtLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCBQaG90b0VkaXRvclNESywgeyBNYXRoIGFzIFBNYXRoIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5cbmNvbnN0IHsgVmVjdG9yMiB9ID0gUE1hdGhcbmNvbnN0IFBSRVZJRVdfRElNRU5TSU9OUyA9IG5ldyBWZWN0b3IyKDE4MCwgODApXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbHRlclByZXZpZXdSZW5kZXJlciB7XG4gIGNvbnN0cnVjdG9yIChlZGl0b3IpIHtcbiAgICB0aGlzLl9lZGl0b3IgPSBlZGl0b3JcbiAgICB0aGlzLl9kaXNwb3NlZCA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGZpbHRlciBwcmV2aWV3IHJlbmRlcmVyXG4gICAqL1xuICBpbml0ICgpIHtcbiAgICB0aGlzLl9pbml0U0RLKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGFuZCByZXR1cm5zIGEgcHJldmlldyBmb3IgdGhlIGdpdmVuIGZpbHRlclxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5GaWx0ZXJ9IGZpbHRlclxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVuZGVyIChmaWx0ZXIpIHtcbiAgICB0aGlzLl9maWx0ZXJPcGVyYXRpb24uc2V0RmlsdGVyKGZpbHRlcilcbiAgICByZXR1cm4gdGhpcy5fc2RrLnJlbmRlcigpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuX3Nkay5nZXRDYW52YXMoKVxuICAgICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvcG5nJylcbiAgICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIFNES1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXRTREsgKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9lZGl0b3IuZ2V0T3B0aW9ucygpXG4gICAgY29uc3QgeyBsb2dMZXZlbCwgZGVidWcsIGxpY2Vuc2UgfSA9IG9wdGlvbnNcbiAgICBjb25zdCB7IHNtb290aERvd25zY2FsaW5nLCBzbW9vdGhVcHNjYWxpbmcsIHByZWZlcnJlZFJlbmRlcmVyIH0gPSBvcHRpb25zLmVkaXRvclxuICAgIGNvbnN0IGVkaXRvclNESyA9IHRoaXMuX2VkaXRvci5nZXRTREsoKVxuICAgIGNvbnN0IGV4aWZPcGVyYXRpb24gPSBlZGl0b3JTREsuZ2V0T3BlcmF0aW9uc1N0YWNrKCkuZ2V0QnlJZGVudGlmaWVyKCdleGlmLW9yaWVudGF0aW9uJylcbiAgICBjb25zdCByZW5kZXJlck9wdGlvbnMgPSB7XG4gICAgICBsb2dMZXZlbCxcbiAgICAgIGRlYnVnLFxuICAgICAgcGl4ZWxSYXRpbzogMSxcbiAgICAgIHNtb290aERvd25zY2FsaW5nLFxuICAgICAgc21vb3RoVXBzY2FsaW5nLFxuICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICBsaWNlbnNlLFxuICAgICAgaW1hZ2U6IHRoaXMuX2VkaXRvci5nZXRTREsoKS5nZXRJbWFnZSgpLFxuICAgICAgcmVuZGVyTW9kZTogJ2V4cG9ydCcsXG4gICAgICB2ZXJzaW9uQ2hlY2s6IGZhbHNlLFxuICAgICAgZGlzcGxheVdlbGNvbWVNZXNzYWdlOiBmYWxzZVxuICAgIH1cbiAgICB0aGlzLl9zZGsgPSBuZXcgUGhvdG9FZGl0b3JTREsocHJlZmVycmVkUmVuZGVyZXIsIHJlbmRlcmVyT3B0aW9ucylcbiAgICB0aGlzLl9zZGsucmVzaXplVG8oUFJFVklFV19ESU1FTlNJT05TKVxuICAgIHRoaXMuX2ZpbHRlck9wZXJhdGlvbiA9IHRoaXMuX3Nkay5jcmVhdGVPcGVyYXRpb24oJ2ZpbHRlcicpXG5cbiAgICBpZiAoZXhpZk9wZXJhdGlvbikge1xuICAgICAgdGhpcy5fc2RrLmNyZWF0ZU9wZXJhdGlvbignZXhpZi1vcmllbnRhdGlvbicsIGV4aWZPcGVyYXRpb24uc2VyaWFsaXplT3B0aW9ucygpKVxuICAgIH1cblxuICAgIHRoaXMuX3RyYW5zZm9ybU9wZXJhdGlvbiA9IHRoaXMuX3Nkay5jcmVhdGVPcGVyYXRpb24oJ3RyYW5zZm9ybScpXG4gICAgY29uc3QgeyBzdGFydCwgZW5kLCB0ZXh0dXJlU2NhbGUgfSA9IHRoaXMuX2NhbGN1bGF0ZVRyYW5zZm9ybU9wdGlvbnMoKVxuICAgIHRoaXMuX3RyYW5zZm9ybU9wZXJhdGlvbi5zZXQoeyBzdGFydCwgZW5kLCB0ZXh0dXJlU2NhbGUgfSlcblxuICAgIHRoaXMuX3Nkay5yZW5kZXIoKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIG9wdGlvbnMgZm9yIG91ciB0cmFuc2Zvcm0gb3BlcmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jYWxjdWxhdGVUcmFuc2Zvcm1PcHRpb25zICgpIHtcbiAgICBjb25zdCBpbnB1dERpbWVuc2lvbnMgPSB0aGlzLl90cmFuc2Zvcm1PcGVyYXRpb24uZ2V0SW5wdXREaW1lbnNpb25zKClcbiAgICBjb25zdCByYXRpbyA9IGlucHV0RGltZW5zaW9ucy54IC8gaW5wdXREaW1lbnNpb25zLnlcblxuICAgIGNvbnN0IHN0YXJ0ID0gbmV3IFZlY3RvcjIoKVxuICAgIGNvbnN0IGVuZCA9IG5ldyBWZWN0b3IyKClcblxuICAgIGNvbnN0IG91dHB1dFJhdGlvID0gUFJFVklFV19ESU1FTlNJT05TLnggLyBQUkVWSUVXX0RJTUVOU0lPTlMueVxuICAgIGlmIChyYXRpbyA8PSBvdXRwdXRSYXRpbykge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gMSAvIGlucHV0RGltZW5zaW9ucy55ICogKGlucHV0RGltZW5zaW9ucy54IC8gb3V0cHV0UmF0aW8pXG4gICAgICBzdGFydC5zZXQoMCwgKDEuMCAtIGhlaWdodCkgLyAyKVxuICAgICAgZW5kLnNldCgxLjAsIDEgLSBzdGFydC55KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB3aWR0aCA9IDEgLyBpbnB1dERpbWVuc2lvbnMueCAqIChvdXRwdXRSYXRpbyAqIGlucHV0RGltZW5zaW9ucy55KVxuICAgICAgc3RhcnQuc2V0KCgxIC0gd2lkdGgpIC8gMiwgMClcbiAgICAgIGVuZC5zZXQoMSAtIHN0YXJ0LngsIDEuMClcbiAgICB9XG5cbiAgICBjb25zdCBzaXplID0gZW5kLmNsb25lKCkuc3VidHJhY3Qoc3RhcnQpXG4gICAgY29uc3QgdHJhbnNmb3JtZWREaW1lbnNpb25zID0gaW5wdXREaW1lbnNpb25zLmNsb25lKCkubXVsdGlwbHkoc2l6ZSlcbiAgICBjb25zdCB0ZXh0dXJlU2NhbGUgPSBQUkVWSUVXX0RJTUVOU0lPTlMueCAvIHRyYW5zZm9ybWVkRGltZW5zaW9ucy54XG4gICAgcmV0dXJuIHsgZGltZW5zaW9uczogUFJFVklFV19ESU1FTlNJT05TLCBzdGFydCwgZW5kLCB0ZXh0dXJlU2NhbGUgfVxuICB9XG5cbiAgLyoqXG4gICAqIERpc3Bvc2VzIHRoaXMgcmVuZGVyZXJcbiAgICovXG4gIGRpc3Bvc2UgKCkge1xuICAgIGlmICh0aGlzLl9zZGspIHtcbiAgICAgIHRoaXMuX3Nkay5kaXNwb3NlKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSByZW5kZXJlciBpcyBkaXNwb3NlZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgaXNEaXNwb3NlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc3Bvc2VkXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2ZpbHRlci9maWx0ZXItcHJldmlldy1yZW5kZXJlci5qcyIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgQ29uc3RhbnRzLCBDb250cm9sc0NvbXBvbmVudCwgU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgRm9jdXNMaXN0SXRlbUNvbXBvbmVudCBmcm9tICcuL2ZvY3VzLWxpc3QtaXRlbS1jb21wb25lbnQnXG5pbXBvcnQgRm9jdXNDb250cm9scyBmcm9tICcuL2luZGV4J1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9jdXNDb250cm9sc0NvbXBvbmVudCBleHRlbmRzIENvbnRyb2xzQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IENvbnRyb2xzQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuICBzdGF0aWMgcHJvcFR5cGVzID0gQ29udHJvbHNDb21wb25lbnQucHJvcFR5cGVzXG4gIHN0YXRpYyBSb290RWxlbWVudCA9IENvbnRyb2xzQ29tcG9uZW50LlJvb3RFbGVtZW50XG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25CbHVyUmFkaXVzQ2hhbmdlZCdcbiAgICApXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJVEVNIFNFTEVDVElPTlxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGZvY3VzIG1vZGUgaXMgYXZhaWxhYmxlXG4gICAqIEBwYXJhbSAge1N0cmluZ30gIGlkZW50aWZpZXJcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pc01vZGVBdmFpbGFibGUgKGlkZW50aWZpZXIpIHtcbiAgICBjb25zdCB7IGF2YWlsYWJsZU1vZGVzIH0gPSB0aGlzLnByb3BzLm9wdGlvbnNcbiAgICBpZiAoaWRlbnRpZmllciA9PT0gJ25vbmUnIHx8IGF2YWlsYWJsZU1vZGVzID09PSBudWxsKSByZXR1cm4gdHJ1ZVxuXG4gICAgcmV0dXJuIGF2YWlsYWJsZU1vZGVzLmluZGV4T2YoaWRlbnRpZmllcikgIT09IC0xXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiBhbiBpdGVtIGhhcyBiZWVuIGNsaWNrZWRcbiAgICogQHBhcmFtICB7T2JqZWN0fSBpdGVtXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IGNyZWF0ZU9wZXJhdGlvbiA9IHRydWVcbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gaW5pdGlhbCA9IGZhbHNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25JdGVtQ2xpY2sgKGl0ZW0sIGNyZWF0ZU9wZXJhdGlvbiA9IHRydWUsIGluaXRpYWwgPSBmYWxzZSkge1xuICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0U2VsZWN0ZWRGb2N1cyhpdGVtKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIGZpbHRlciBpbnRlbnNpdHkgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHZhbHVlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CbHVyUmFkaXVzQ2hhbmdlZCAodmFsdWUpIHtcbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldEJsdXJSYWRpdXModmFsdWUpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgbGlzdCBpdGVtc1xuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyTGlzdEl0ZW1zICgpIHtcbiAgICBjb25zdCB7IGNvbnRyb2xzIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCBvcGVyYXRpb25JZGVudGlmaWVyID0gdGhpcy5zaGFyZWRTdGF0ZS5vcGVyYXRpb25JZGVudGlmaWVyXG4gICAgY29uc3Qgc2VsZWN0ZWRGb2N1cyA9IHRoaXMuc2hhcmVkU3RhdGUuc2VsZWN0ZWRGb2N1c1xuICAgIGNvbnN0IGJsdXJSYWRpdXMgPSB0aGlzLnNoYXJlZFN0YXRlLmJsdXJSYWRpdXNcblxuICAgIHJldHVybiBjb250cm9scy5jb25zdHJ1Y3Rvci5JVEVNU1xuICAgICAgLmZpbHRlcihpdGVtID0+IHRoaXMuX2lzTW9kZUF2YWlsYWJsZShpdGVtLmlkZW50aWZpZXIpKVxuICAgICAgLm1hcChpdGVtID0+IHtcbiAgICAgICAgbGV0IGJhY2tncm91bmRJbWFnZVBhdGggPSB0aGlzLl9nZXRBc3NldFBhdGgoaXRlbS5iYWNrZ3JvdW5kSW1hZ2VQYXRoLCB0cnVlKVxuICAgICAgICBsZXQgYWN0aXZlQmFja2dyb3VuZEltYWdlUGF0aCA9IHRoaXMuX2dldEFzc2V0UGF0aChpdGVtLmFjdGl2ZUJhY2tncm91bmRJbWFnZVBhdGgsIHRydWUpXG4gICAgICAgIGxldCBzZWxlY3RlZCA9IGl0ZW0uaWRlbnRpZmllciA9PT0gc2VsZWN0ZWRGb2N1c1xuICAgICAgICByZXR1cm4gKDxGb2N1c0xpc3RJdGVtQ29tcG9uZW50XG4gICAgICAgICAga2V5PXtpdGVtLmlkZW50aWZpZXJ9XG4gICAgICAgICAgdGl0bGU9e3RoaXMuX3QoYHBlc2RrLmZvY3VzLmJ1dHRvbi4ke2l0ZW0uaWRlbnRpZmllcn1gKX1cbiAgICAgICAgICBzZWxlY3RlZD17c2VsZWN0ZWR9XG4gICAgICAgICAgc2hvd1NsaWRlcj17ISFvcGVyYXRpb25JZGVudGlmaWVyfVxuICAgICAgICAgIGJsdXJSYWRpdXM9e2JsdXJSYWRpdXN9XG4gICAgICAgICAgb25CbHVyUmFkaXVzQ2hhbmdlZD17dGhpcy5fb25CbHVyUmFkaXVzQ2hhbmdlZH1cbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoPXtiYWNrZ3JvdW5kSW1hZ2VQYXRofVxuICAgICAgICAgIGFjdGl2ZUJhY2tncm91bmRJbWFnZVBhdGg9e2FjdGl2ZUJhY2tncm91bmRJbWFnZVBhdGh9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5fb25JdGVtQ2xpY2suYmluZCh0aGlzLCBpdGVtLCB0cnVlLCBmYWxzZSl9IC8+KVxuICAgICAgfSwgdGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0aWVzIGZvciB0aGUgcm9vdCBlbGVtZW50XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRSb290UHJvcHMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzc05hbWU6ICh0ZXN0ID8gJ2pzLWZvY3VzQ29udHJvbHMnIDogdW5kZWZpbmVkKSxcbiAgICAgIHdpdGhCb3JkZXJUb3A6IHRydWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbnRyb2wncyBjb250ZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICBfcmVuZGVyQ29udGVudCAoKSB7XG4gICAgcmV0dXJuICg8U2Nyb2xsYWJsZUxpc3RDb21wb25lbnRcbiAgICAgIGRpcmVjdGlvbj0ndmVydGljYWwnXG4gICAgICBpbm5lckxpc3RSZWY9e2VsID0+IHsgdGhpcy5fbGlzdCA9IGVsIH19XG4gICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9zY3JvbGxiYXIgPSBlbCB9fT5cbiAgICAgIDxMaXN0PlxuICAgICAgICB7dGhpcy5fcmVuZGVyTGlzdEl0ZW1zKCl9XG4gICAgICA8L0xpc3Q+XG4gICAgPC9TY3JvbGxhYmxlTGlzdENvbXBvbmVudD4pXG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTEVTXG5cbmNvbnN0IExpc3QgPSBhZG9uaXMudWwoe1xuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAnMjVweCdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9mb2N1cy9mb2N1cy1jb250cm9scy1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazovKipcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQge1xuICBSZWFjdCwgYWRvbmlzLCBTaGFyZWRTdGF0ZUNvbXBvbmVudCwgU2xpZGVyQ29tcG9uZW50LCBUcmFuc2l0aW9uLCBDb250cm9sc1N0eWxlc1xufSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5jb25zdCB7IENvbnRyb2xJdGVtLCBDb250cm9sSXRlbVRpdGxlLCBDb250cm9sSXRlbUFjdGl2ZU92ZXJsYXkgfSA9IENvbnRyb2xzU3R5bGVzXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb2N1c0xpc3RJdGVtQ29tcG9uZW50IGV4dGVuZHMgU2hhcmVkU3RhdGVDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gU2hhcmVkU3RhdGVDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbCgnX29uU2xpZGVyVmFsdWVDaGFuZ2VkJylcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSBzbGlkZXIgdmFsdWUgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHZhbHVlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25TbGlkZXJWYWx1ZUNoYW5nZWQgKHZhbHVlKSB7XG4gICAgY29uc3QgeyBvbkJsdXJSYWRpdXNDaGFuZ2VkIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgaW5wdXREaW1lbnNpb25zID0gdGhpcy5zaGFyZWRTdGF0ZS5pbnB1dERpbWVuc2lvbnNcbiAgICBjb25zdCBzaG9ydGVzdFNpZGUgPSBpbnB1dERpbWVuc2lvbnMubWluKClcbiAgICBvbkJsdXJSYWRpdXNDaGFuZ2VkICYmIG9uQmx1clJhZGl1c0NoYW5nZWQodmFsdWUgLyBzaG9ydGVzdFNpZGUpXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgc2xpZGVyIGlmIG5lY2Vzc2FyeVxuICAgKiBAcmV0dXJuIHtSZWFjdC5Db21wb25lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyU2xpZGVyICgpIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkLCBzaG93U2xpZGVyLCBibHVyUmFkaXVzIH0gPSB0aGlzLnByb3BzXG4gICAgaWYgKCEoc2VsZWN0ZWQgJiYgc2hvd1NsaWRlcikpIHJldHVybiBudWxsXG5cbiAgICBjb25zdCBpbnB1dERpbWVuc2lvbnMgPSB0aGlzLnNoYXJlZFN0YXRlLmlucHV0RGltZW5zaW9uc1xuICAgIGNvbnN0IG1heEJsdXJSYWRpdXMgPSBNYXRoLm1pbigxODAsIE1hdGgucm91bmQoaW5wdXREaW1lbnNpb25zLm1pbigpICogMC4xKSlcbiAgICBjb25zdCBzaG9ydGVzdFNpZGUgPSBpbnB1dERpbWVuc2lvbnMubWluKClcblxuICAgIHJldHVybiAoPFNsaWRlckNvbXBvbmVudFxuICAgICAgbWluVmFsdWU9ezB9XG4gICAgICBtYXhWYWx1ZT17bWF4Qmx1clJhZGl1c31cbiAgICAgIHZhbHVlVW5pdD0nJ1xuICAgICAgbWlkZGxlRG90PXtmYWxzZX1cbiAgICAgIHZhbHVlPXtibHVyUmFkaXVzICogc2hvcnRlc3RTaWRlfVxuICAgICAgb25DaGFuZ2U9e3RoaXMuX29uU2xpZGVyVmFsdWVDaGFuZ2VkfSAvPilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgdGl0bGUsIGJhY2tncm91bmRJbWFnZVBhdGgsIGFjdGl2ZUJhY2tncm91bmRJbWFnZVBhdGgsIHNlbGVjdGVkLCBvbkNsaWNrLCBzaG93U2xpZGVyIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgbGlzdEl0ZW1TdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgnJHtzZWxlY3RlZCA/IGFjdGl2ZUJhY2tncm91bmRJbWFnZVBhdGggOiBiYWNrZ3JvdW5kSW1hZ2VQYXRofScpYFxuICAgIH1cblxuICAgIGNvbnN0IHsgdHJhbnNpdGlvbkR1cmF0aW9uIH0gPSB0aGlzLmNvbnRleHQudGhlbWVcblxuICAgIHJldHVybiAoPExpc3RJdGVtXG4gICAgICBzZWxlY3RlZD17c2VsZWN0ZWR9XG4gICAgICBkYXRhLXNlbGVjdGVkPXtzZWxlY3RlZH1cbiAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtZm9jdXNMaXN0SXRlbScgOiB1bmRlZmluZWQpfVxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgIHN0eWxlPXtsaXN0SXRlbVN0eWxlfT5cbiAgICAgIDxMaXN0SXRlbVRpdGxlIHNlbGVjdGVkPXtzZWxlY3RlZH0gd2l0aFNsaWRlcj17c2VsZWN0ZWQgJiYgc2hvd1NsaWRlcn0+e3RpdGxlfTwvTGlzdEl0ZW1UaXRsZT5cbiAgICAgIDxTbGlkZXIgdmlzaWJsZT17c2VsZWN0ZWQgJiYgc2hvd1NsaWRlcn0+XG4gICAgICAgIHt0aGlzLl9yZW5kZXJTbGlkZXIoKX1cbiAgICAgIDwvU2xpZGVyPlxuICAgICAgPFRyYW5zaXRpb25cbiAgICAgICAgYWN0aXZlPXtzZWxlY3RlZH1cbiAgICAgICAgZW50ZXJQcm9wPSdyZW5kZXJlZCdcbiAgICAgICAgZW50ZXJEdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9uICogMTAwMH1cbiAgICAgICAgYXBwZWFyUHJvcD0ndmlzaWJsZSdcbiAgICAgICAgYXBwZWFyRHVyYXRpb249e3RyYW5zaXRpb25EdXJhdGlvbiAqIDEwMDB9XG4gICAgICAgIGxlYXZlRHVyYXRpb249e3RyYW5zaXRpb25EdXJhdGlvbiAqIDEwMDB9PlxuICAgICAgICA8TGlzdEl0ZW1PdmVybGF5IHNlbGVjdGVkIC8+XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgPC9MaXN0SXRlbT4pXG4gIH1cbn1cblxuY29uc3QgTGlzdEl0ZW0gPSBhZG9uaXMoQ29udHJvbEl0ZW0pLmxpKHtcbiAgdHJhbnNpdGlvbjogJ2JhY2tncm91bmQtaW1hZ2UgLjRzIGVhc2UtaW4tb3V0JyxcbiAgbWFyZ2luQm90dG9tOiAnOHB4JyxcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZSA9PiB0aGVtZS5mb2N1c0l0ZW1CYWNrZ3JvdW5kQ29sb3IsXG4gIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICBiYWNrZ3JvdW5kU2l6ZTogJ2NvdmVyJyxcblxuICAnOmxhc3QtY2hpbGQnOiB7XG4gICAgbWFyZ2luQm90dG9tOiAwXG4gIH1cbn0pXG5cbmNvbnN0IExpc3RJdGVtVGl0bGUgPSBhZG9uaXMoQ29udHJvbEl0ZW1UaXRsZSkuZGl2KHtcbiAgdHJhbnNpdGlvblByb3BlcnR5OiAnYm90dG9tLCBtYXJnaW4nLFxuICB0cmFuc2l0aW9uRHVyYXRpb246ICcuMnMnLFxuICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246ICdlYXNlLW91dCcsXG4gIGJvdHRvbTogJzUwJScsXG4gIG1hcmdpbkJvdHRvbTogJy03cHgnLFxuICBsZXR0ZXJTcGFjaW5nOiAnM3B4JyxcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnVwcGVyY2FzZVNlbWlCb2xkRm9udEZhbWlseSxcbiAgdGV4dFNoYWRvdzogJzAgMCA2cHggIzAwMDAwMCdcbn0sIHtcbiAgc2VsZWN0ZWQ6IHtcbiAgICB0cmFuc2l0aW9uRGVsYXk6IDAsXG4gICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiAnZWFzZS1pbidcbiAgfSxcbiAgd2l0aFNsaWRlcjoge1xuICAgIGJvdHRvbTogJzhweCcsXG4gICAgbWFyZ2luQm90dG9tOiAwXG4gIH1cbn0pXG5cbmNvbnN0IExpc3RJdGVtT3ZlcmxheSA9IGFkb25pcyhDb250cm9sSXRlbUFjdGl2ZU92ZXJsYXkpLmRpdih7XG4gIGJhY2tncm91bmRJbWFnZTogJ2xpbmVhci1ncmFkaWVudCgtMTgwZGVnLCByZ2JhKDIwLDQ1LDg3LDAuMTIpIDAlLCByZ2JhKDAsMCwwLDAuMTQpIDEwMCUpJyxcbiAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCdcbn0pXG5cbmNvbnN0IFNsaWRlciA9IGFkb25pcy5kaXYoe1xuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAuMnMgZWFzZS1vdXQsIHZpc2liaWxpdHkgLjJzIGVhc2Utb3V0JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHpJbmRleDogMixcbiAgaGVpZ2h0OiAnMTVweCcsXG4gIHRvcDogJzUwJScsXG4gIG1hcmdpblRvcDogJy04cHgnLFxuICBsZWZ0OiAnMTVweCcsXG4gIHJpZ2h0OiAnMTVweCcsXG4gIG9wYWNpdHk6IDAsXG4gIHZpc2liaWxpdHk6ICdoaWRkZW4nXG59LCB7XG4gIHZpc2libGU6IHtcbiAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAuMnMgZWFzZS1pbiwgdmlzaWJpbGl0eSAuMnMgZWFzZS1pbicsXG4gICAgb3BhY2l0eTogMSxcbiAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgfVxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2ZvY3VzL2ZvY3VzLWxpc3QtaXRlbS1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBVdGlscyBhcyBTREtVdGlscyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuaW1wb3J0IHsgUmVhY3QsIENvbnN0YW50cywgQ2FudmFzQ29udHJvbHNDb21wb25lbnQgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgUmFkaWFsRm9jdXNDYW52YXNDb250cm9sc0NvbXBvbmVudCBmcm9tICcuL3JhZGlhbC1mb2N1cy1jYW52YXMtY29udHJvbHMtY29tcG9uZW50J1xuaW1wb3J0IExpbmVhckZvY3VzQ2FudmFzQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi9saW5lYXItZm9jdXMtY2FudmFzLWNvbnRyb2xzLWNvbXBvbmVudCdcbmltcG9ydCBNaXJyb3JlZEZvY3VzQ2FudmFzQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi9taXJyb3JlZC1mb2N1cy1jYW52YXMtY29udHJvbHMtY29tcG9uZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb2N1c0NhbnZhc0NvbnRyb2xzQ29tcG9uZW50IGV4dGVuZHMgQ2FudmFzQ29udHJvbHNDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQ2FudmFzQ29udHJvbHNDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbCgnX29uWm9vbURvbmUnKVxuICAgIHRoaXMuX2V2ZW50cyA9IHtcbiAgICAgIFtDb25zdGFudHMuRVZFTlRTLlpPT01fRE9ORV06IHRoaXMuX29uWm9vbURvbmVcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlID0gU0RLVXRpbHMuZXh0ZW5kKHRoaXMuc3RhdGUsIHsgem9vbURvbmU6IGZhbHNlIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBlZGl0b3IgaGFzIGRvbmUgem9vbWluZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uWm9vbURvbmUgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB6b29tRG9uZTogdHJ1ZSB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGNvbnRyb2xzXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyQ29udHJvbHMgKCkge1xuICAgIGNvbnN0IHNlbGVjdGVkRm9jdXMgPSB0aGlzLnNoYXJlZFN0YXRlLnNlbGVjdGVkRm9jdXNcblxuICAgIGxldCBDYW52YXNDb250cm9sc1xuICAgIHN3aXRjaCAoc2VsZWN0ZWRGb2N1cykge1xuICAgICAgY2FzZSAncmFkaWFsJzpcbiAgICAgICAgQ2FudmFzQ29udHJvbHMgPSBSYWRpYWxGb2N1c0NhbnZhc0NvbnRyb2xzQ29tcG9uZW50XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdsaW5lYXInOlxuICAgICAgICBDYW52YXNDb250cm9scyA9IExpbmVhckZvY3VzQ2FudmFzQ29udHJvbHNDb21wb25lbnRcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ21pcnJvcmVkJzpcbiAgICAgICAgQ2FudmFzQ29udHJvbHMgPSBNaXJyb3JlZEZvY3VzQ2FudmFzQ29udHJvbHNDb21wb25lbnRcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiA8ZGl2IC8+XG4gICAgfVxuXG4gICAgcmV0dXJuIDxDYW52YXNDb250cm9scyB6b29tRG9uZT17dGhpcy5zdGF0ZS56b29tRG9uZX0gLz5cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvZm9jdXMvZm9jdXMtY2FudmFzLWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFV0aWxzIGFzIFNES1V0aWxzLCBNYXRoIGFzIFBNYXRoIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5pbXBvcnQge1xuICBSZWFjdCwgYWRvbmlzLCBDb25zdGFudHMsIFV0aWxzLCBEcmFnZ2FibGVDb21wb25lbnQsIFRyYW5zaXRpb24sIFNoYXJlZFN0YXRlQ29tcG9uZW50LFxuICBDb250cm9sc1N0eWxlc1xufSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgeyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfSBmcm9tICdzaGFyZWQvYXN5bmMvYW5pbWF0aW9uLWZyYW1lJ1xuXG5jb25zdCB7IEtub2I6IEtub2JTdHlsZSwgRnVsbENvbnRhaW5lcjogRnVsbENvbnRhaW5lclN0eWxlIH0gPSBDb250cm9sc1N0eWxlc1xuY29uc3QgeyBWZWN0b3IyLCBSZWN0YW5nbGUgfSA9IFBNYXRoXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYWRpYWxGb2N1c0NhbnZhc0NvbnRyb2xzQ29tcG9uZW50IGV4dGVuZHMgU2hhcmVkU3RhdGVDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gU2hhcmVkU3RhdGVDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25DaXJjbGVEcmFnU3RhcnQnLFxuICAgICAgJ19vbkNpcmNsZURyYWcnLFxuICAgICAgJ19vbktub2JEcmFnU3RhcnQnLFxuICAgICAgJ19vbktub2JEcmFnJyxcbiAgICAgICdfb25ab29tRG9uZSdcbiAgICApXG5cbiAgICB0aGlzLnN0YXRlID0gU0RLVXRpbHMuZXh0ZW5kKHRoaXMuc3RhdGUsIHtcbiAgICAgIGNpcmNsZVBvc2l0aW9uOiBuZXcgVmVjdG9yMigpLFxuICAgICAgY2lyY2xlRGltZW5zaW9uczogbmV3IFZlY3RvcjIoKSxcbiAgICAgIGtub2JQb3NpdGlvbjogbmV3IFZlY3RvcjIoKSxcbiAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgfSlcbiAgICB0aGlzLl9rbm9iQ2hhbmdlZE1hbnVhbGx5ID0gZmFsc2VcblxuICAgIHRoaXMuX2V2ZW50cyA9IHtcbiAgICAgIFtDb25zdGFudHMuRVZFTlRTLlpPT01fRE9ORV06IHRoaXMuX29uWm9vbURvbmVcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy56b29tRG9uZSkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgdGhpcy5fb25ab29tRG9uZSgpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnREaWRNb3VudCgpXG5cbiAgICB0aGlzLl91cGRhdGVPbkNhbnZhc0NvbnRyb2xzKClcbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbnNBbmREaW1lbnNpb25zKClcbiAgfVxuXG4gIHNoYXJlZFN0YXRlRGlkQ2hhbmdlIChvbGRTdGF0ZSwgbmV3U3RhdGUpIHtcbiAgICBpZiAoIXRoaXMuX29wZXJhdGlvbiB8fCAhbmV3U3RhdGUub3BlcmF0aW9uKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fb3BlcmF0aW9uICE9PSBuZXdTdGF0ZS5vcGVyYXRpb24gJiZcbiAgICAgICh0aGlzLl9vcGVyYXRpb24uY29uc3RydWN0b3IgPT09IG5ld1N0YXRlLm9wZXJhdGlvbi5jb25zdHJ1Y3RvcikpIHtcbiAgICAgIG5ld1N0YXRlLm9wZXJhdGlvbi5zZXQodGhpcy5fb3BlcmF0aW9uLnNlcmlhbGl6ZU9wdGlvbnMoKSlcbiAgICAgIHRoaXMuX29wZXJhdGlvbiA9IG5ld1N0YXRlLm9wZXJhdGlvblxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBhZnRlciBhIHpvb20gaGFzIGJlZW4gZG9uZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uWm9vbURvbmUgKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS52aXNpYmxlKSB7XG4gICAgICB0aGlzLnN0YXRlLnZpc2libGUgPSB0cnVlXG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZU9uQ2FudmFzQ29udHJvbHMoKVxuICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uc0FuZERpbWVuc2lvbnMoKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ0VOVEVSIERSQUdHSU5HXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgc3RhcnMgZHJhZ2dpbmcgdGhlIGNpcmNsZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ2lyY2xlRHJhZ1N0YXJ0ICgpIHtcbiAgICB0aGlzLl9pbml0aWFsUG9zaXRpb24gPSB0aGlzLnNoYXJlZFN0YXRlLnJhZGlhbEZvY3VzLnBvc2l0aW9uLmNsb25lKClcbiAgICB0aGlzLl9pbml0aWFsS25vYlBvc2l0aW9uID0gdGhpcy5zdGF0ZS5rbm9iUG9zaXRpb24uY2xvbmUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoaWxlIHRoZSB1c2VyIGRyYWdzIHRoZSBjaXJjbGVcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBvZmZzZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNpcmNsZURyYWcgKG9mZnNldCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcblxuICAgIGNvbnN0IG91dHB1dERpbWVuc2lvbnMgPSBlZGl0b3IuZ2V0T3V0cHV0RGltZW5zaW9ucygpXG4gICAgY29uc3QgcmVsYXRpdmVPZmZzZXQgPSBvZmZzZXQuY2xvbmUoKS5kaXZpZGUob3V0cHV0RGltZW5zaW9ucylcbiAgICBjb25zdCBuZXdQb3NpdGlvbiA9IHRoaXMuX2luaXRpYWxQb3NpdGlvblxuICAgICAgLmNsb25lKClcbiAgICAgIC5hZGQocmVsYXRpdmVPZmZzZXQpXG5cbiAgICBjb25zdCBuZXdLbm9iUG9zaXRpb24gPSB0aGlzLl9pbml0aWFsS25vYlBvc2l0aW9uLmNsb25lKClcbiAgICAgIC5hZGQob2Zmc2V0KVxuXG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXRQb3NpdGlvbihuZXdQb3NpdGlvbilcblxuICAgIHRoaXMuc3RhdGUua25vYlBvc2l0aW9uID0gbmV3S25vYlBvc2l0aW9uXG5cbiAgICBlZGl0b3IucmVuZGVyKClcbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbnNBbmREaW1lbnNpb25zKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEtOT0IgRFJBR1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHN0YXJzIGRyYWdnaW5nIHRoZSBncmFkaWVudCBrbm9iXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Lbm9iRHJhZ1N0YXJ0IChlKSB7XG4gICAgdGhpcy5fa25vYkNoYW5nZWRNYW51YWxseSA9IHRydWVcbiAgICB0aGlzLl9pbml0aWFsS25vYlBvc2l0aW9uID0gdGhpcy5zdGF0ZS5rbm9iUG9zaXRpb24uY2xvbmUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoaWxlIHRoZSB1c2VyIGRyYWdzIHRoZSBncmFkaWVudCBrbm9iXG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gb2Zmc2V0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Lbm9iRHJhZyAob2Zmc2V0KSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IG91dHB1dERpbWVuc2lvbnMgPSBlZGl0b3IuZ2V0T3V0cHV0RGltZW5zaW9ucygpXG5cbiAgICBjb25zdCBuZXdLbm9iUG9zaXRpb24gPSB0aGlzLl9pbml0aWFsS25vYlBvc2l0aW9uLmNsb25lKClcbiAgICAgIC5hZGQob2Zmc2V0KVxuICAgICAgLmNsYW1wKG5ldyBWZWN0b3IyKDAsIDApLCBvdXRwdXREaW1lbnNpb25zKVxuXG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLnNoYXJlZFN0YXRlLnJhZGlhbEZvY3VzLnBvc2l0aW9uLmNsb25lKClcbiAgICAgIC5tdWx0aXBseShvdXRwdXREaW1lbnNpb25zKVxuXG4gICAgY29uc3QgcmFkaXVzID0gbmV3S25vYlBvc2l0aW9uXG4gICAgICAuY2xvbmUoKVxuICAgICAgLnN1YnRyYWN0KHBvc2l0aW9uKVxuICAgICAgLmFicygpXG4gICAgICAubGVuKClcbiAgICBjb25zdCBncmFkaWVudFJhZGl1cyA9IHJhZGl1cyAvIDJcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAga25vYlBvc2l0aW9uOiBuZXdLbm9iUG9zaXRpb24sXG4gICAgICBjaXJjbGVEaW1lbnNpb25zOiBuZXcgVmVjdG9yMihcbiAgICAgICAgcmFkaXVzICogMixcbiAgICAgICAgcmFkaXVzICogMlxuICAgICAgKVxuICAgIH0pXG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXRPcGVyYXRpb25PcHRpb25zKHtcbiAgICAgIHJhZGl1czogcmFkaXVzIC8gb3V0cHV0RGltZW5zaW9ucy5taW4oKSxcbiAgICAgIGdyYWRpZW50UmFkaXVzOiBncmFkaWVudFJhZGl1cyAvIG91dHB1dERpbWVuc2lvbnMubWluKClcbiAgICB9KVxuXG4gICAgZWRpdG9yLnJlbmRlcigpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDQUxDVUxBVElPTlxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkaW1lbnNpb25zIGFuZCBwb3NpdGlvbiB2YWx1ZXMgZnJvbSB0aGUgY3VycmVudCBvcGVyYXRpb24gb3B0aW9uc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZVBvc2l0aW9uc0FuZERpbWVuc2lvbnMgKCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcblxuICAgIGNvbnN0IG91dHB1dERpbWVuc2lvbnMgPSBlZGl0b3IuZ2V0T3V0cHV0RGltZW5zaW9ucygpXG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLnNoYXJlZFN0YXRlLnJhZGlhbEZvY3VzLnBvc2l0aW9uLmNsb25lKClcbiAgICAgIC5tdWx0aXBseShvdXRwdXREaW1lbnNpb25zKVxuXG4gICAgY29uc3QgcmFkaXVzID0gdGhpcy5zaGFyZWRTdGF0ZS5yYWRpYWxGb2N1cy5yYWRpdXMgKiBvdXRwdXREaW1lbnNpb25zLm1pbigpXG4gICAgY29uc3QgZGlhbWV0ZXIgPSByYWRpdXMgKiAyXG4gICAgY29uc3QgYXJlYVNpemUgPSBuZXcgVmVjdG9yMihkaWFtZXRlciwgZGlhbWV0ZXIpXG5cbiAgICBsZXQgbmV3U3RhdGUgPSB7XG4gICAgICBjaXJjbGVEaW1lbnNpb25zOiBhcmVhU2l6ZSxcbiAgICAgIGNpcmNsZVBvc2l0aW9uOiBwb3NpdGlvblxuICAgIH1cblxuICAgIGlmICghdGhpcy5fa25vYkNoYW5nZWRNYW51YWxseSkge1xuICAgICAgbmV3U3RhdGUua25vYlBvc2l0aW9uID0gcG9zaXRpb24uY2xvbmUoKVxuICAgICAgICAuYWRkKHJhZGl1cywgMClcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHN0eWxlcyBmb3IgdGhlIGNhbnZhcyBjb250cm9sc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZU9uQ2FudmFzQ29udHJvbHMgKCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBpbWFnZUJvdW5kcyA9IGVkaXRvci5nZXRTREsoKS5nZXRTcHJpdGUoKS5nZXRCb3VuZHMoKVxuICAgIGNvbnN0IGNvbnRhaW5lckJvdW5kcyA9IHRoaXMuX2NvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGNvbnN0IGVkaXRvckJvdW5kcyA9IHRoaXMuY29udGV4dC5hcHBDb21wb25lbnQuZ2V0Qm91bmRzKClcblxuICAgIGNvbnN0IG9uQ2FudmFzQ29udHJvbHNSZWN0ID0gbmV3IFJlY3RhbmdsZShcbiAgICAgIE1hdGguZmxvb3IoaW1hZ2VCb3VuZHMueCAtIChjb250YWluZXJCb3VuZHMubGVmdCAtIGVkaXRvckJvdW5kcy5sZWZ0KSksXG4gICAgICBNYXRoLmZsb29yKGltYWdlQm91bmRzLnkgLSAoY29udGFpbmVyQm91bmRzLnRvcCAtIGVkaXRvckJvdW5kcy50b3ApKSxcbiAgICAgIE1hdGguY2VpbChpbWFnZUJvdW5kcy53aWR0aCkgKyAxLFxuICAgICAgTWF0aC5jZWlsKGltYWdlQm91bmRzLmhlaWdodCkgKyAxXG4gICAgKVxuXG4gICAgVXRpbHMuc3R5bGVFbGVtZW50KHRoaXMuX29uQ2FudmFzQ29udHJvbHMsIHtcbiAgICAgIGxlZnQ6IGAke29uQ2FudmFzQ29udHJvbHNSZWN0Lnh9cHhgLFxuICAgICAgdG9wOiBgJHtvbkNhbnZhc0NvbnRyb2xzUmVjdC55fXB4YCxcbiAgICAgIHdpZHRoOiBgJHtvbkNhbnZhc0NvbnRyb2xzUmVjdC53aWR0aH1weGAsXG4gICAgICBoZWlnaHQ6IGAke29uQ2FudmFzQ29udHJvbHNSZWN0LmhlaWdodH1weGBcbiAgICB9KVxuXG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTVFlMSU5HXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0eWxlcyBvYmplY3QgZm9yIHRoZSBjaXJjbGUgZGl2XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRDaXJjbGVTdHlsZXMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogdGhpcy5zdGF0ZS5jaXJjbGVEaW1lbnNpb25zLngsXG4gICAgICBoZWlnaHQ6IHRoaXMuc3RhdGUuY2lyY2xlRGltZW5zaW9ucy55LFxuICAgICAgbGVmdDogdGhpcy5zdGF0ZS5jaXJjbGVQb3NpdGlvbi54LFxuICAgICAgdG9wOiB0aGlzLnN0YXRlLmNpcmNsZVBvc2l0aW9uLnksXG4gICAgICBtYXJnaW5MZWZ0OiB0aGlzLnN0YXRlLmNpcmNsZURpbWVuc2lvbnMueCAqIC0wLjUsXG4gICAgICBtYXJnaW5Ub3A6IHRoaXMuc3RhdGUuY2lyY2xlRGltZW5zaW9ucy55ICogLTAuNVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBDU1Mgc3R5bGVzIGZvciB0aGUga25vYlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0S25vYlN0eWxlICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogdGhpcy5zdGF0ZS5rbm9iUG9zaXRpb24ueCxcbiAgICAgIHRvcDogdGhpcy5zdGF0ZS5rbm9iUG9zaXRpb24ueVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIHJldHVybiAoPENhbnZhc0NvbnRyb2xzIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2NvbnRhaW5lciA9IGVsIH19PlxuICAgICAgPFRyYW5zaXRpb25cbiAgICAgICAgYWN0aXZlPXt0aGlzLnN0YXRlLnZpc2libGV9XG4gICAgICAgIGVudGVyUHJvcD0ncmVuZGVyZWQnXG4gICAgICAgIGVudGVyRHVyYXRpb249e3RoaXMuY29udGV4dC50aGVtZS50cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfVxuICAgICAgICBhcHBlYXJQcm9wPSd2aXNpYmxlJ1xuICAgICAgICBhcHBlYXJEdXJhdGlvbj17dGhpcy5jb250ZXh0LnRoZW1lLnRyYW5zaXRpb25EdXJhdGlvbiAqIDEwMDB9XG4gICAgICAgIGxlYXZlRHVyYXRpb249e3RoaXMuY29udGV4dC50aGVtZS50cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfT5cbiAgICAgICAgPE9uQ2FudmFzQ29udHJvbHMgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fb25DYW52YXNDb250cm9scyA9IGVsIH19PlxuICAgICAgICAgIDxEcmFnZ2FibGVDb21wb25lbnRcbiAgICAgICAgICAgIG9uU3RhcnQ9e3RoaXMuX29uQ2lyY2xlRHJhZ1N0YXJ0fVxuICAgICAgICAgICAgb25EcmFnPXt0aGlzLl9vbkNpcmNsZURyYWd9PlxuICAgICAgICAgICAgPENpcmNsZVxuICAgICAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXJhZGlhbEZvY3VzRHJhZ2dhYmxlQ2lyY2xlJyA6IHVuZGVmaW5lZCl9XG4gICAgICAgICAgICAgIHN0eWxlPXt0aGlzLl9nZXRDaXJjbGVTdHlsZXMoKX0gLz5cbiAgICAgICAgICA8L0RyYWdnYWJsZUNvbXBvbmVudD5cbiAgICAgICAgICA8RHJhZ2dhYmxlQ29tcG9uZW50XG4gICAgICAgICAgICBvblN0YXJ0PXt0aGlzLl9vbktub2JEcmFnU3RhcnR9XG4gICAgICAgICAgICBvbkRyYWc9e3RoaXMuX29uS25vYkRyYWd9PlxuICAgICAgICAgICAgPEtub2JcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1yYWRpYWxGb2N1c0RyYWdnYWJsZUtub2InIDogdW5kZWZpbmVkKX1cbiAgICAgICAgICAgICAgc3R5bGU9e3RoaXMuX2dldEtub2JTdHlsZSgpfSAvPlxuICAgICAgICAgIDwvRHJhZ2dhYmxlQ29tcG9uZW50PlxuICAgICAgICA8L09uQ2FudmFzQ29udHJvbHM+XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgPC9DYW52YXNDb250cm9scz4pXG4gIH1cbn1cblxuY29uc3QgQ2FudmFzQ29udHJvbHMgPSBhZG9uaXMoRnVsbENvbnRhaW5lclN0eWxlKS5kaXYoe1xuICBvdmVyZmxvdzogJ2hpZGRlbidcbn0pXG5cbmNvbnN0IE9uQ2FudmFzQ29udHJvbHMgPSBhZG9uaXMuZGl2KHtcbiAgdHJhbnNpdGlvbjogdGhlbWUgPT4gYG9wYWNpdHkgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259cyBlYXNlLW91dGAsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAnbm9uZScsXG4gIG9wYWNpdHk6IDBcbn0sIHtcbiAgcmVuZGVyZWQ6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snXG4gIH0sXG4gIHZpc2libGU6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn0pXG5cbmNvbnN0IEtub2IgPSBhZG9uaXMoS25vYlN0eWxlKS5kaXYoe30pXG5cbmNvbnN0IENpcmNsZSA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgYm9yZGVyOiB0aGVtZSA9PiBgMnB4IHNvbGlkICR7dGhlbWUuY29udHJvbHNPdXRsaW5lQ29sb3J9YCxcbiAgYm94U2hhZG93OiAnMCAycHggNnB4IDAgcmdiYSgwLCAwLCAwLCAwLjIwKSwgaW5zZXQgMCAycHggNnB4IDAgcmdiYSgwLCAwLCAwLCAwLjIwKScsXG4gIGN1cnNvcjogJ21vdmUnXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvZm9jdXMvcmFkaWFsLWZvY3VzLWNhbnZhcy1jb250cm9scy1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBVdGlscyBhcyBTREtVdGlscywgTWF0aCBhcyBQTWF0aCB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuaW1wb3J0IHtcbiAgUmVhY3QsIGFkb25pcywgQ29uc3RhbnRzLCBVdGlscywgRHJhZ2dhYmxlQ29tcG9uZW50LCBUcmFuc2l0aW9uLCBTaGFyZWRTdGF0ZUNvbXBvbmVudCxcbiAgQ29udHJvbHNTdHlsZXNcbn0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IHsgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIH0gZnJvbSAnc2hhcmVkL2FzeW5jL2FuaW1hdGlvbi1mcmFtZSdcblxuY29uc3QgeyBLbm9iOiBLbm9iU3R5bGUsIEZ1bGxDb250YWluZXI6IEZ1bGxDb250YWluZXJTdHlsZSB9ID0gQ29udHJvbHNTdHlsZXNcbmNvbnN0IHsgVmVjdG9yMiwgUmVjdGFuZ2xlIH0gPSBQTWF0aFxuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGluZWFyRm9jdXNDYW52YXNDb250cm9sc0NvbXBvbmVudCBleHRlbmRzIFNoYXJlZFN0YXRlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IFNoYXJlZFN0YXRlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uS25vYkRyYWdTdGFydCcsXG4gICAgICAnX29uS25vYkRyYWcnLFxuICAgICAgJ19vblpvb21Eb25lJ1xuICAgIClcblxuICAgIHRoaXMuc3RhdGUgPSBTREtVdGlscy5leHRlbmQodGhpcy5zdGF0ZSwge1xuICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICB9KVxuXG4gICAgdGhpcy5fZXZlbnRzID0ge1xuICAgICAgW0NvbnN0YW50cy5FVkVOVFMuWk9PTV9ET05FXTogdGhpcy5fb25ab29tRG9uZVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnpvb21Eb25lKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB0aGlzLl9vblpvb21Eb25lKClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZFxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudERpZE1vdW50KClcblxuICAgIHRoaXMuX3VwZGF0ZU9uQ2FudmFzQ29udHJvbHMoKVxuICB9XG5cbiAgc2hhcmVkU3RhdGVEaWRDaGFuZ2UgKG9sZFN0YXRlLCBuZXdTdGF0ZSkge1xuICAgIGlmICghdGhpcy5fb3BlcmF0aW9uIHx8ICFuZXdTdGF0ZS5vcGVyYXRpb24pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLl9vcGVyYXRpb24gIT09IG5ld1N0YXRlLm9wZXJhdGlvbiAmJlxuICAgICAgKHRoaXMuX29wZXJhdGlvbi5jb25zdHJ1Y3RvciA9PT0gbmV3U3RhdGUub3BlcmF0aW9uLmNvbnN0cnVjdG9yKSkge1xuICAgICAgbmV3U3RhdGUub3BlcmF0aW9uLnNldCh0aGlzLl9vcGVyYXRpb24uc2VyaWFsaXplT3B0aW9ucygpKVxuICAgICAgdGhpcy5fb3BlcmF0aW9uID0gbmV3U3RhdGUub3BlcmF0aW9uXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGFmdGVyIGEgem9vbSBoYXMgYmVlbiBkb25lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25ab29tRG9uZSAoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnZpc2libGUpIHtcbiAgICAgIHRoaXMuc3RhdGUudmlzaWJsZSA9IHRydWVcbiAgICB9XG4gICAgdGhpcy5fdXBkYXRlT25DYW52YXNDb250cm9scygpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBLTk9CIERSQUdcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdXNlciBzdGFycyBkcmFnZ2luZyB0aGUgZ3JhZGllbnQga25vYlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uS25vYkRyYWdTdGFydCAoaW5kZXgsIGUpIHtcbiAgICB0aGlzLl9pbml0aWFsUG9zaXRpb24gPSB0aGlzLnNoYXJlZFN0YXRlLmxpbmVhckZvY3VzW2Bjb250cm9sUG9pbnQke2luZGV4fWBdXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hpbGUgdGhlIHVzZXIgZHJhZ3MgdGhlIGdyYWRpZW50IGtub2JcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gICAqIEBwYXJhbSB7VmVjdG9yMn0gb2Zmc2V0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Lbm9iRHJhZyAoaW5kZXgsIG9mZnNldCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcblxuICAgIGNvbnN0IGltYWdlQm91bmRzID0gZWRpdG9yLmdldFNESygpLmdldFNwcml0ZSgpLmdldEJvdW5kcygpXG4gICAgY29uc3QgY29udGFpbmVyQm91bmRzID0gdGhpcy5fY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgY29uc3QgZWRpdG9yQm91bmRzID0gdGhpcy5jb250ZXh0LmFwcENvbXBvbmVudC5nZXRCb3VuZHMoKVxuXG4gICAgY29uc3QgaW5pdGlhbEFic29sdXRlUG9zaXRpb24gPSB0aGlzLl9pbml0aWFsUG9zaXRpb24uY2xvbmUoKS5tdWx0aXBseShpbWFnZUJvdW5kcy53aWR0aCwgaW1hZ2VCb3VuZHMuaGVpZ2h0KVxuICAgIGNvbnN0IGFic29sdXRlUG9zaXRpb24gPSBpbml0aWFsQWJzb2x1dGVQb3NpdGlvblxuICAgICAgLmFkZChvZmZzZXQpXG4gICAgICAuY2xhbXAoXG4gICAgICAgIG5ldyBWZWN0b3IyKFxuICAgICAgICAgIChjb250YWluZXJCb3VuZHMubGVmdCAtIGVkaXRvckJvdW5kcy5sZWZ0KSAtIGltYWdlQm91bmRzLngsXG4gICAgICAgICAgKGNvbnRhaW5lckJvdW5kcy50b3AgLSBlZGl0b3JCb3VuZHMudG9wKSAtIGltYWdlQm91bmRzLnlcbiAgICAgICAgKSxcbiAgICAgICAgbmV3IFZlY3RvcjIoXG4gICAgICAgICAgY29udGFpbmVyQm91bmRzLndpZHRoIC0gKGltYWdlQm91bmRzLnggLSAoY29udGFpbmVyQm91bmRzLmxlZnQgLSBlZGl0b3JCb3VuZHMubGVmdCkpLFxuICAgICAgICAgIGNvbnRhaW5lckJvdW5kcy5oZWlnaHQgLSAoaW1hZ2VCb3VuZHMueSAtIChjb250YWluZXJCb3VuZHMudG9wIC0gZWRpdG9yQm91bmRzLnRvcCkpXG4gICAgICAgIClcbiAgICAgIClcblxuICAgIGNvbnN0IG5ld1Bvc2l0aW9uID0gYWJzb2x1dGVQb3NpdGlvbi5kaXZpZGUoaW1hZ2VCb3VuZHMud2lkdGgsIGltYWdlQm91bmRzLmhlaWdodClcbiAgICB0aGlzLnNoYXJlZFN0YXRlW2BzZXRDb250cm9sUG9pbnQke2luZGV4fWBdKG5ld1Bvc2l0aW9uKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ0FMQ1VMQVRJT05cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgc3R5bGVzIGZvciB0aGUgY2FudmFzIGNvbnRyb2xzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlT25DYW52YXNDb250cm9scyAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IGltYWdlQm91bmRzID0gZWRpdG9yLmdldFNESygpLmdldFNwcml0ZSgpLmdldEJvdW5kcygpXG4gICAgY29uc3QgY29udGFpbmVyQm91bmRzID0gdGhpcy5fY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgY29uc3QgZWRpdG9yQm91bmRzID0gdGhpcy5jb250ZXh0LmFwcENvbXBvbmVudC5nZXRCb3VuZHMoKVxuXG4gICAgY29uc3Qgb25DYW52YXNDb250cm9sc1JlY3QgPSBuZXcgUmVjdGFuZ2xlKFxuICAgICAgTWF0aC5mbG9vcihpbWFnZUJvdW5kcy54IC0gKGNvbnRhaW5lckJvdW5kcy5sZWZ0IC0gZWRpdG9yQm91bmRzLmxlZnQpKSxcbiAgICAgIE1hdGguZmxvb3IoaW1hZ2VCb3VuZHMueSAtIChjb250YWluZXJCb3VuZHMudG9wIC0gZWRpdG9yQm91bmRzLnRvcCkpLFxuICAgICAgTWF0aC5jZWlsKGltYWdlQm91bmRzLndpZHRoKSArIDEsXG4gICAgICBNYXRoLmNlaWwoaW1hZ2VCb3VuZHMuaGVpZ2h0KSArIDFcbiAgICApXG5cbiAgICBVdGlscy5zdHlsZUVsZW1lbnQodGhpcy5fb25DYW52YXNDb250cm9scywge1xuICAgICAgbGVmdDogYCR7b25DYW52YXNDb250cm9sc1JlY3QueH1weGAsXG4gICAgICB0b3A6IGAke29uQ2FudmFzQ29udHJvbHNSZWN0Lnl9cHhgLFxuICAgICAgd2lkdGg6IGAke29uQ2FudmFzQ29udHJvbHNSZWN0LndpZHRofXB4YCxcbiAgICAgIGhlaWdodDogYCR7b25DYW52YXNDb250cm9sc1JlY3QuaGVpZ2h0fXB4YFxuICAgIH0pXG5cbiAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxJTkdcXFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBDU1Mgc3R5bGVzIGZvciB0aGUga25vYiB3aXRoIHRoZSBnaXZlbiBpbmRleFxuICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXhcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldEtub2JTdHlsZSAoaW5kZXgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG5cbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuc2hhcmVkU3RhdGUubGluZWFyRm9jdXNbYGNvbnRyb2xQb2ludCR7aW5kZXh9YF1cbiAgICBjb25zdCBpbWFnZUJvdW5kcyA9IGVkaXRvci5nZXRTREsoKS5nZXRTcHJpdGUoKS5nZXRCb3VuZHMoKVxuXG4gICAgY29uc3QgYWJzb2x1dGVQb3NpdGlvbiA9IHBvc2l0aW9uLmNsb25lKCkubXVsdGlwbHkoaW1hZ2VCb3VuZHMud2lkdGgsIGltYWdlQm91bmRzLmhlaWdodClcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogYWJzb2x1dGVQb3NpdGlvbi54LFxuICAgICAgdG9wOiBhYnNvbHV0ZVBvc2l0aW9uLnlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgQ1NTIHN0eWxlcyBmb3IgdGhlIGxpbmVcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldExpbmVTdHlsZSAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IGltYWdlQm91bmRzID0gZWRpdG9yLmdldFNESygpLmdldFNwcml0ZSgpLmdldEJvdW5kcygpXG5cbiAgICBjb25zdCBjb250cm9sUG9pbnQxID0gdGhpcy5zaGFyZWRTdGF0ZS5saW5lYXJGb2N1cy5jb250cm9sUG9pbnQxLmNsb25lKClcbiAgICBjb25zdCBjb250cm9sUG9pbnQyID0gdGhpcy5zaGFyZWRTdGF0ZS5saW5lYXJGb2N1cy5jb250cm9sUG9pbnQyLmNsb25lKClcblxuICAgIGNvbnN0IGNvbnRyb2xQb2ludFBvc2l0aW9ucyA9IHtcbiAgICAgIDE6IGNvbnRyb2xQb2ludDEubXVsdGlwbHkoaW1hZ2VCb3VuZHMud2lkdGgsIGltYWdlQm91bmRzLmhlaWdodCksXG4gICAgICAyOiBjb250cm9sUG9pbnQyLm11bHRpcGx5KGltYWdlQm91bmRzLndpZHRoLCBpbWFnZUJvdW5kcy5oZWlnaHQpXG4gICAgfVxuXG4gICAgY29uc3QgZGlzdGFuY2UgPSBjb250cm9sUG9pbnRQb3NpdGlvbnNbMl0uY2xvbmUoKVxuICAgICAgLnN1YnRyYWN0KGNvbnRyb2xQb2ludFBvc2l0aW9uc1sxXSlcbiAgICBjb25zdCBkaXN0YW5jZUxlbmd0aCA9IGRpc3RhbmNlLmxlbigpXG5cbiAgICBjb25zdCByb3RhdGlvbiA9IE1hdGguYXRhbjIoZGlzdGFuY2UueSwgZGlzdGFuY2UueClcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IGAke2Rpc3RhbmNlTGVuZ3RofXB4YCxcbiAgICAgIGxlZnQ6IGAke2NvbnRyb2xQb2ludFBvc2l0aW9uc1sxXS54fXB4YCxcbiAgICAgIHRvcDogYCR7Y29udHJvbFBvaW50UG9zaXRpb25zWzFdLnl9cHhgLFxuICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKCR7cm90YXRpb259cmFkKSB0cmFuc2xhdGVZKC01MCUpYFxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBrbm9ic1xuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyS25vYnMgKCkge1xuICAgIGNvbnN0IGtub2JzID0gW11cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAyOyBpKyspIHtcbiAgICAgIGtub2JzLnB1c2goPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgICBvblN0YXJ0PXt0aGlzLl9vbktub2JEcmFnU3RhcnQuYmluZCh0aGlzLCBpKX1cbiAgICAgICAgb25EcmFnPXt0aGlzLl9vbktub2JEcmFnLmJpbmQodGhpcywgaSl9XG4gICAgICAgIGtleT17aX0+XG4gICAgICAgIDxLbm9iXG4gICAgICAgICAgc3R5bGU9e3RoaXMuX2dldEtub2JTdHlsZShpKX1cbiAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0XG4gICAgICAgICAgICA/IChpID09PSAxID8gJ2pzLWZpcnN0TGluZWFyRm9jdXNEcmFnZ2FibGVLbm9iJyA6ICdqcy1zZWNvbmRMaW5lYXJGb2N1c0RyYWdnYWJsZUtub2InKSA6IHVuZGVmaW5lZClcbiAgICAgICAgICB9IC8+XG4gICAgICA8L0RyYWdnYWJsZUNvbXBvbmVudD4pXG4gICAgfVxuICAgIHJldHVybiBrbm9ic1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuICg8Q2FudmFzQ29udHJvbHMgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fY29udGFpbmVyID0gZWwgfX0+XG4gICAgICA8VHJhbnNpdGlvblxuICAgICAgICBhY3RpdmU9e3RoaXMuc3RhdGUudmlzaWJsZX1cbiAgICAgICAgZW50ZXJQcm9wPSdyZW5kZXJlZCdcbiAgICAgICAgZW50ZXJEdXJhdGlvbj17dGhpcy5jb250ZXh0LnRoZW1lLnRyYW5zaXRpb25EdXJhdGlvbiAqIDEwMDB9XG4gICAgICAgIGFwcGVhclByb3A9J3Zpc2libGUnXG4gICAgICAgIGFwcGVhckR1cmF0aW9uPXt0aGlzLmNvbnRleHQudGhlbWUudHJhbnNpdGlvbkR1cmF0aW9uICogMTAwMH1cbiAgICAgICAgbGVhdmVEdXJhdGlvbj17dGhpcy5jb250ZXh0LnRoZW1lLnRyYW5zaXRpb25EdXJhdGlvbiAqIDEwMDB9PlxuICAgICAgICA8T25DYW52YXNDb250cm9scyBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9vbkNhbnZhc0NvbnRyb2xzID0gZWwgfX0+XG4gICAgICAgICAge3RoaXMuX3JlbmRlcktub2JzKCl9XG4gICAgICAgICAgPExpbmUgc3R5bGU9e3RoaXMuX2dldExpbmVTdHlsZSgpfSAvPlxuICAgICAgICA8L09uQ2FudmFzQ29udHJvbHM+XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgPC9DYW52YXNDb250cm9scz4pXG4gIH1cbn1cblxuY29uc3QgQ2FudmFzQ29udHJvbHMgPSBhZG9uaXMoRnVsbENvbnRhaW5lclN0eWxlKS5kaXYoe1xuICBvdmVyZmxvdzogJ2hpZGRlbidcbn0pXG5cbmNvbnN0IE9uQ2FudmFzQ29udHJvbHMgPSBhZG9uaXMuZGl2KHtcbiAgdHJhbnNpdGlvbjogdGhlbWUgPT4gYG9wYWNpdHkgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259cyBlYXNlLW91dGAsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAnbm9uZScsXG4gIG9wYWNpdHk6IDBcbn0sIHtcbiAgcmVuZGVyZWQ6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snXG4gIH0sXG4gIHZpc2libGU6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn0pXG5cbmNvbnN0IEtub2IgPSBhZG9uaXMoS25vYlN0eWxlKS5kaXYoe1xuICB6SW5kZXg6IHRoZW1lID0+IHRoZW1lLnpJbmRleCgnY29udHJvbHNPdmVybGF5cycpICsgMVxufSlcblxuY29uc3QgTGluZSA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgaGVpZ2h0OiAnMnB4JyxcbiAgYm94U2hhZG93OiAnMCAycHggNnB4IDAgcmdiYSgwLCAwLCAwLCAwLjIwKScsXG4gIGJhY2tncm91bmQ6IHRoZW1lID0+IHRoZW1lLmNvbnRyb2xzT3V0bGluZUNvbG9yLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJyxcbiAgdHJhbnNmb3JtT3JpZ2luOiAnMCAwJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2ZvY3VzL2xpbmVhci1mb2N1cy1jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgVXRpbHMgYXMgU0RLVXRpbHMsIE1hdGggYXMgUE1hdGggfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCB7XG4gIFJlYWN0LCBhZG9uaXMsIENvbnN0YW50cywgVXRpbHMsIERyYWdnYWJsZUNvbXBvbmVudCwgVHJhbnNpdGlvbiwgU2hhcmVkU3RhdGVDb21wb25lbnQsXG4gIENvbnRyb2xzU3R5bGVzXG59IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmltcG9ydCB7IHJlcXVlc3RBbmltYXRpb25GcmFtZSB9IGZyb20gJ3NoYXJlZC9hc3luYy9hbmltYXRpb24tZnJhbWUnXG5cbmNvbnN0IHsgS25vYjogS25vYlN0eWxlLCBGdWxsQ29udGFpbmVyOiBGdWxsQ29udGFpbmVyU3R5bGUgfSA9IENvbnRyb2xzU3R5bGVzXG5jb25zdCB7IFZlY3RvcjIsIFJlY3RhbmdsZSB9ID0gUE1hdGhcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1pcnJvcmVkRm9jdXNDYW52YXNDb250cm9sc0NvbXBvbmVudCBleHRlbmRzIFNoYXJlZFN0YXRlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IFNoYXJlZFN0YXRlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uQ2VudGVyRHJhZ1N0YXJ0JyxcbiAgICAgICdfb25DZW50ZXJEcmFnJyxcbiAgICAgICdfb25Lbm9iRHJhZ1N0YXJ0JyxcbiAgICAgICdfb25Lbm9iRHJhZycsXG4gICAgICAnX29uWm9vbURvbmUnXG4gICAgKVxuXG4gICAgdGhpcy5zdGF0ZSA9IFNES1V0aWxzLmV4dGVuZCh0aGlzLnN0YXRlLCB7XG4gICAgICBhcmVhUG9zaXRpb246IG5ldyBWZWN0b3IyKCksXG4gICAgICBhcmVhRGltZW5zaW9uczogbmV3IFZlY3RvcjIoKSxcbiAgICAgIGtub2JQb3NpdGlvbjogbmV3IFZlY3RvcjIoKSxcbiAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgfSlcblxuICAgIHRoaXMuX2V2ZW50cyA9IHtcbiAgICAgIFtDb25zdGFudHMuRVZFTlRTLlpPT01fRE9ORV06IHRoaXMuX29uWm9vbURvbmVcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy56b29tRG9uZSkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgdGhpcy5fb25ab29tRG9uZSgpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnREaWRNb3VudCgpXG5cbiAgICB0aGlzLl91cGRhdGVPbkNhbnZhc0NvbnRyb2xzKClcbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbnNBbmREaW1lbnNpb25zKClcbiAgfVxuXG4gIHNoYXJlZFN0YXRlRGlkQ2hhbmdlIChvbGRTdGF0ZSwgbmV3U3RhdGUpIHtcbiAgICBpZiAoIXRoaXMuX29wZXJhdGlvbiB8fCAhbmV3U3RhdGUub3BlcmF0aW9uKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fb3BlcmF0aW9uICE9PSBuZXdTdGF0ZS5vcGVyYXRpb24gJiZcbiAgICAgICh0aGlzLl9vcGVyYXRpb24uY29uc3RydWN0b3IgPT09IG5ld1N0YXRlLm9wZXJhdGlvbi5jb25zdHJ1Y3RvcikpIHtcbiAgICAgIG5ld1N0YXRlLm9wZXJhdGlvbi5zZXQodGhpcy5fb3BlcmF0aW9uLnNlcmlhbGl6ZU9wdGlvbnMoKSlcbiAgICAgIHRoaXMuX29wZXJhdGlvbiA9IG5ld1N0YXRlLm9wZXJhdGlvblxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBhZnRlciBhIHpvb20gaGFzIGJlZW4gZG9uZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uWm9vbURvbmUgKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS52aXNpYmxlKSB7XG4gICAgICB0aGlzLnN0YXRlLnZpc2libGUgPSB0cnVlXG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZU9uQ2FudmFzQ29udHJvbHMoKVxuICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uc0FuZERpbWVuc2lvbnMoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgc3RhcnMgZHJhZ2dpbmcgdGhlIGNlbnRlclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ2VudGVyRHJhZ1N0YXJ0ICgpIHtcbiAgICB0aGlzLl9pbml0aWFsU3RhcnQgPSB0aGlzLnNoYXJlZFN0YXRlLm1pcnJvcmVkRm9jdXMuc3RhcnRcbiAgICB0aGlzLl9pbml0aWFsRW5kID0gdGhpcy5zaGFyZWRTdGF0ZS5taXJyb3JlZEZvY3VzLmVuZFxuICAgIHRoaXMuX2luaXRpYWxEaXN0ID0gdGhpcy5faW5pdGlhbEVuZC5jbG9uZSgpXG4gICAgICAuc3VidHJhY3QodGhpcy5faW5pdGlhbFN0YXJ0KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoaWxlIHRoZSB1c2VyIGRyYWdzIHRoZSBjZW50ZXJcbiAgICogQHBhcmFtIHtWZWN0b3IyfSBvZmZzZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNlbnRlckRyYWcgKG9mZnNldCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcblxuICAgIGNvbnN0IG91dHB1dERpbWVuc2lvbnMgPSBlZGl0b3IuZ2V0T3V0cHV0RGltZW5zaW9ucygpXG4gICAgY29uc3QgcmVsYXRpdmVPZmZzZXQgPSBvZmZzZXQuY2xvbmUoKVxuICAgICAgLmRpdmlkZShvdXRwdXREaW1lbnNpb25zKVxuXG4gICAgY29uc3QgbmV3U3RhcnQgPSB0aGlzLl9pbml0aWFsU3RhcnQuY2xvbmUoKS5hZGQocmVsYXRpdmVPZmZzZXQpXG4gICAgICAuY2xhbXAoXG4gICAgICAgIG5ldyBWZWN0b3IyKDAsIDApLFxuICAgICAgICBuZXcgVmVjdG9yMigxLCAxKS5zdWJ0cmFjdCh0aGlzLl9pbml0aWFsRGlzdClcbiAgICAgIClcbiAgICBjb25zdCBuZXdFbmQgPSBuZXdTdGFydC5jbG9uZSgpLmFkZCh0aGlzLl9pbml0aWFsRGlzdClcblxuICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0T3BlcmF0aW9uT3B0aW9ucyh7XG4gICAgICBzdGFydDogbmV3U3RhcnQsXG4gICAgICBlbmQ6IG5ld0VuZFxuICAgIH0pXG5cbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbnNBbmREaW1lbnNpb25zKClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHN0YXJzIGRyYWdnaW5nIHRoZSBncmFkaWVudCBrbm9iXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Lbm9iRHJhZ1N0YXJ0IChlKSB7XG4gICAgdGhpcy5faW5pdGlhbEtub2JQb3NpdGlvbiA9IHRoaXMuc3RhdGUua25vYlBvc2l0aW9uLmNsb25lKClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGlsZSB0aGUgdXNlciBkcmFncyB0aGUgZ3JhZGllbnQga25vYlxuICAgKiBAcGFyYW0ge1ZlY3RvcjJ9IG9mZnNldFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uS25vYkRyYWcgKG9mZnNldCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBvdXRwdXREaW1lbnNpb25zID0gZWRpdG9yLmdldE91dHB1dERpbWVuc2lvbnMoKVxuXG4gICAgY29uc3QgbmV3S25vYlBvc2l0aW9uID0gdGhpcy5faW5pdGlhbEtub2JQb3NpdGlvbi5jbG9uZSgpXG4gICAgICAuYWRkKG9mZnNldClcbiAgICAgIC5jbGFtcChuZXcgVmVjdG9yMigwLCAwKSwgb3V0cHV0RGltZW5zaW9ucylcblxuICAgIGNvbnN0IGRpc3RhbmNlRnJvbUNlbnRlciA9IG5ld0tub2JQb3NpdGlvbi5jbG9uZSgpXG4gICAgICAuc3VidHJhY3QodGhpcy5zdGF0ZS5hcmVhUG9zaXRpb24pXG5cbiAgICBjb25zdCBzdGFydCA9IHRoaXMuc3RhdGUuYXJlYVBvc2l0aW9uLmNsb25lKClcbiAgICAgIC5hZGQoLWRpc3RhbmNlRnJvbUNlbnRlci55LCBkaXN0YW5jZUZyb21DZW50ZXIueClcbiAgICAgIC5kaXZpZGUob3V0cHV0RGltZW5zaW9ucylcbiAgICBjb25zdCBlbmQgPSB0aGlzLnN0YXRlLmFyZWFQb3NpdGlvbi5jbG9uZSgpXG4gICAgICAuYWRkKGRpc3RhbmNlRnJvbUNlbnRlci55LCAtZGlzdGFuY2VGcm9tQ2VudGVyLngpXG4gICAgICAuZGl2aWRlKG91dHB1dERpbWVuc2lvbnMpXG4gICAgY29uc3Qgc2l6ZSA9IGRpc3RhbmNlRnJvbUNlbnRlci5sZW4oKSAqIDJcblxuICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0T3BlcmF0aW9uT3B0aW9ucyh7XG4gICAgICBzdGFydCxcbiAgICAgIGVuZCxcbiAgICAgIHNpemU6IHNpemUgLyBvdXRwdXREaW1lbnNpb25zLm1pbigpLFxuICAgICAgZ3JhZGllbnRTaXplOiBzaXplIC8gb3V0cHV0RGltZW5zaW9ucy5taW4oKVxuICAgIH0pXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGtub2JQb3NpdGlvbjogbmV3S25vYlBvc2l0aW9uLFxuICAgICAgYXJlYURpbWVuc2lvbnM6IG5ldyBWZWN0b3IyKHRoaXMuc3RhdGUuYXJlYURpbWVuc2lvbnMueCwgc2l6ZSlcbiAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTElOR1xuXG4gIF9nZXRBcmVhU3R5bGUgKCkge1xuICAgIGNvbnN0IGRpc3QgPSB0aGlzLnN0YXRlLmtub2JQb3NpdGlvbi5jbG9uZSgpXG4gICAgICAuc3VidHJhY3QodGhpcy5zdGF0ZS5hcmVhUG9zaXRpb24pXG4gICAgY29uc3QgZGVncmVlcyA9IE1hdGguYXRhbjIoZGlzdC54LCBkaXN0LnkpICogKDE4MCAvIE1hdGguUEkpXG4gICAgY29uc3QgdHJhbnNmb3JtID0gYHJvdGF0ZSgkeygtZGVncmVlcykudG9GaXhlZCgyKX1kZWcpYFxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiB0aGlzLnN0YXRlLmFyZWFEaW1lbnNpb25zLngsXG4gICAgICBoZWlnaHQ6IHRoaXMuc3RhdGUuYXJlYURpbWVuc2lvbnMueSxcbiAgICAgIGxlZnQ6IHRoaXMuc3RhdGUuYXJlYVBvc2l0aW9uLngsXG4gICAgICB0b3A6IHRoaXMuc3RhdGUuYXJlYVBvc2l0aW9uLnksXG4gICAgICBtYXJnaW5MZWZ0OiB0aGlzLnN0YXRlLmFyZWFEaW1lbnNpb25zLnggKiAtMC41LFxuICAgICAgbWFyZ2luVG9wOiB0aGlzLnN0YXRlLmFyZWFEaW1lbnNpb25zLnkgKiAtMC41LFxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICBNb3pUcmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIG1zVHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICBXZWJraXRUcmFuc2Zvcm06IHRyYW5zZm9ybVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwb3NpdGlvbmluZyBzdHlsZXMgZm9yIHRoZSBrbm9iXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRLbm9iU3R5bGUgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiB0aGlzLnN0YXRlLmtub2JQb3NpdGlvbi54LFxuICAgICAgdG9wOiB0aGlzLnN0YXRlLmtub2JQb3NpdGlvbi55XG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQ0FMQ1VMQVRJT05cblxuICAvKipcbiAgICogU2V0cyB0aGUgZGltZW5zaW9ucyBhbmQgcG9zaXRpb24gdmFsdWVzIGZyb20gdGhlIGN1cnJlbnQgb3BlcmF0aW9uIG9wdGlvbnNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGVQb3NpdGlvbnNBbmREaW1lbnNpb25zICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3Qgb3V0cHV0RGltZW5zaW9ucyA9IGVkaXRvci5nZXRPdXRwdXREaW1lbnNpb25zKClcblxuICAgIGxldCB7IHN0YXJ0LCBlbmQsIHNpemUgfSA9IHRoaXMuc2hhcmVkU3RhdGUubWlycm9yZWRGb2N1c1xuXG4gICAgc3RhcnQgPSBzdGFydC5jbG9uZSgpLm11bHRpcGx5KG91dHB1dERpbWVuc2lvbnMpXG4gICAgZW5kID0gZW5kLmNsb25lKCkubXVsdGlwbHkob3V0cHV0RGltZW5zaW9ucylcbiAgICBzaXplID0gc2l6ZSAqIG91dHB1dERpbWVuc2lvbnMubWluKClcblxuICAgIGNvbnN0IGRpc3QgPSBlbmQuY2xvbmUoKS5zdWJ0cmFjdChzdGFydClcbiAgICBjb25zdCBtaWRkbGUgPSBzdGFydC5jbG9uZSgpXG4gICAgICAuYWRkKGRpc3QuY2xvbmUoKS5kaXZpZGUoMikpXG5cbiAgICBjb25zdCBhcmVhU2l6ZSA9IG5ldyBWZWN0b3IyKFxuICAgICAgb3V0cHV0RGltZW5zaW9ucy5sZW4oKSAqIDIsXG4gICAgICBzaXplXG4gICAgKVxuXG4gICAgY29uc3QgdG90YWxEaXN0ID0gZGlzdC5sZW4oKVxuICAgIGNvbnN0IGZhY3RvciA9IGRpc3QuY2xvbmUoKS5kaXZpZGUodG90YWxEaXN0KS5kaXZpZGUoMilcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGFyZWFEaW1lbnNpb25zOiBhcmVhU2l6ZSxcbiAgICAgIGFyZWFQb3NpdGlvbjogbWlkZGxlLmNsb25lKCksXG4gICAgICBrbm9iUG9zaXRpb246IG1pZGRsZS5jbG9uZSgpXG4gICAgICAgIC5hZGQoLXNpemUgKiBmYWN0b3IueSwgc2l6ZSAqIGZhY3Rvci54KVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgc3R5bGVzIGZvciB0aGUgY2FudmFzIGNvbnRyb2xzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlT25DYW52YXNDb250cm9scyAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IGltYWdlQm91bmRzID0gZWRpdG9yLmdldFNESygpLmdldFNwcml0ZSgpLmdldEJvdW5kcygpXG4gICAgY29uc3QgY29udGFpbmVyQm91bmRzID0gdGhpcy5fY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgY29uc3QgZWRpdG9yQm91bmRzID0gdGhpcy5jb250ZXh0LmFwcENvbXBvbmVudC5nZXRCb3VuZHMoKVxuXG4gICAgY29uc3Qgb25DYW52YXNDb250cm9sc1JlY3QgPSBuZXcgUmVjdGFuZ2xlKFxuICAgICAgTWF0aC5mbG9vcihpbWFnZUJvdW5kcy54IC0gKGNvbnRhaW5lckJvdW5kcy5sZWZ0IC0gZWRpdG9yQm91bmRzLmxlZnQpKSxcbiAgICAgIE1hdGguZmxvb3IoaW1hZ2VCb3VuZHMueSAtIChjb250YWluZXJCb3VuZHMudG9wIC0gZWRpdG9yQm91bmRzLnRvcCkpLFxuICAgICAgTWF0aC5jZWlsKGltYWdlQm91bmRzLndpZHRoKSArIDEsXG4gICAgICBNYXRoLmNlaWwoaW1hZ2VCb3VuZHMuaGVpZ2h0KSArIDFcbiAgICApXG5cbiAgICBVdGlscy5zdHlsZUVsZW1lbnQodGhpcy5fb25DYW52YXNDb250cm9scywge1xuICAgICAgbGVmdDogYCR7b25DYW52YXNDb250cm9sc1JlY3QueH1weGAsXG4gICAgICB0b3A6IGAke29uQ2FudmFzQ29udHJvbHNSZWN0Lnl9cHhgLFxuICAgICAgd2lkdGg6IGAke29uQ2FudmFzQ29udHJvbHNSZWN0LndpZHRofXB4YCxcbiAgICAgIGhlaWdodDogYCR7b25DYW52YXNDb250cm9sc1JlY3QuaGVpZ2h0fXB4YFxuICAgIH0pXG5cbiAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIHJldHVybiAoPENhbnZhc0NvbnRyb2xzIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2NvbnRhaW5lciA9IGVsIH19PlxuICAgICAgPFRyYW5zaXRpb25cbiAgICAgICAgYWN0aXZlPXt0aGlzLnN0YXRlLnZpc2libGV9XG4gICAgICAgIGVudGVyUHJvcD0ncmVuZGVyZWQnXG4gICAgICAgIGVudGVyRHVyYXRpb249e3RoaXMuY29udGV4dC50aGVtZS50cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfVxuICAgICAgICBhcHBlYXJQcm9wPSd2aXNpYmxlJ1xuICAgICAgICBhcHBlYXJEdXJhdGlvbj17dGhpcy5jb250ZXh0LnRoZW1lLnRyYW5zaXRpb25EdXJhdGlvbiAqIDEwMDB9XG4gICAgICAgIGxlYXZlRHVyYXRpb249e3RoaXMuY29udGV4dC50aGVtZS50cmFuc2l0aW9uRHVyYXRpb24gKiAxMDAwfT5cbiAgICAgICAgPE9uQ2FudmFzQ29udHJvbHMgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fb25DYW52YXNDb250cm9scyA9IGVsIH19PlxuICAgICAgICAgIDxEcmFnZ2FibGVDb21wb25lbnRcbiAgICAgICAgICAgIG9uU3RhcnQ9e3RoaXMuX29uQ2VudGVyRHJhZ1N0YXJ0fVxuICAgICAgICAgICAgb25EcmFnPXt0aGlzLl9vbkNlbnRlckRyYWd9PlxuICAgICAgICAgICAgPEFyZWFcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1taXJyb3JlZEZvY3VzRHJhZ2dhYmxlQXJlYScgOiB1bmRlZmluZWQpfVxuICAgICAgICAgICAgICBzdHlsZT17dGhpcy5fZ2V0QXJlYVN0eWxlKCl9IC8+XG4gICAgICAgICAgPC9EcmFnZ2FibGVDb21wb25lbnQ+XG4gICAgICAgICAgPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgICAgICAgb25TdGFydD17dGhpcy5fb25Lbm9iRHJhZ1N0YXJ0fVxuICAgICAgICAgICAgb25EcmFnPXt0aGlzLl9vbktub2JEcmFnfT5cbiAgICAgICAgICAgIDxLbm9iXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtbWlycm9yZWRGb2N1c0RyYWdnYWJsZUtub2InIDogdW5kZWZpbmVkKX1cbiAgICAgICAgICAgICAgc3R5bGU9e3RoaXMuX2dldEtub2JTdHlsZSgpfSAvPlxuICAgICAgICAgIDwvRHJhZ2dhYmxlQ29tcG9uZW50PlxuICAgICAgICA8L09uQ2FudmFzQ29udHJvbHM+XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgPC9DYW52YXNDb250cm9scz4pXG4gIH1cbn1cblxuY29uc3QgQ2FudmFzQ29udHJvbHMgPSBhZG9uaXMoRnVsbENvbnRhaW5lclN0eWxlKS5kaXYoe1xuICBvdmVyZmxvdzogJ2hpZGRlbidcbn0pXG5cbmNvbnN0IE9uQ2FudmFzQ29udHJvbHMgPSBhZG9uaXMuZGl2KHtcbiAgdHJhbnNpdGlvbjogdGhlbWUgPT4gYG9wYWNpdHkgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259cyBlYXNlLW91dGAsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAnbm9uZScsXG4gIG9wYWNpdHk6IDAsXG4gIG92ZXJmbG93OiAnaGlkZGVuJ1xufSwge1xuICByZW5kZXJlZDoge1xuICAgIGRpc3BsYXk6ICdibG9jaydcbiAgfSxcbiAgdmlzaWJsZToge1xuICAgIG9wYWNpdHk6IDFcbiAgfVxufSlcblxuY29uc3QgS25vYiA9IGFkb25pcyhLbm9iU3R5bGUpLmRpdih7XG4gIHpJbmRleDogdGhlbWUgPT4gdGhlbWUuekluZGV4KCdjb250cm9sc092ZXJsYXlzJykgKyAxXG59KVxuXG5jb25zdCBBcmVhID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBib3JkZXI6IHRoZW1lID0+IGAycHggc29saWQgJHt0aGVtZS5jb250cm9sc091dGxpbmVDb2xvcn1gLFxuICBib3hTaGFkb3c6ICcwIDJweCA2cHggMCByZ2JhKDAsIDAsIDAsIDAuMjApLCBpbnNldCAwIDJweCA2cHggMCByZ2JhKDAsIDAsIDAsIDAuMjApJyxcbiAgY3Vyc29yOiAnbW92ZSdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9mb2N1cy9taXJyb3JlZC1mb2N1cy1jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IERlc2t0b3BVSSwgeyBCYXNlQ29udHJvbHMsIEZyYW1lLCBNb2RhbE1hbmFnZXIgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgRnJhbWVDb250cm9sc0NvbXBvbmVudCBmcm9tICcuL2ZyYW1lLWNvbnRyb2xzLWNvbXBvbmVudCdcblxuLyoqXG4gKiBUaGUgQ29udHJvbHMgZm9yIHRoZSBGcmFtZSB0b29sLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5Db250cm9sc1xuICogQGV4dGVuZHMgUGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkJhc2VDb250cm9sc1xuICovXG5jbGFzcyBGcmFtZUNvbnRyb2xzIGV4dGVuZHMgQmFzZUNvbnRyb2xzIHtcbiAgc3RhdGljIGNsaWNrQXRQb3NpdGlvbiA9IEJhc2VDb250cm9scy5jbGlja0F0UG9zaXRpb25cbiAgc3RhdGljIGdldFByZWxvYWRBc3NldHMgPSBCYXNlQ29udHJvbHMuZ2V0UHJlbG9hZEFzc2V0c1xuXG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGlkZW50aWZpZXIgPSAnZnJhbWUnXG5cbiAgLyoqXG4gICAqIFRoZSBjb250cm9scyBjb21wb25lbnQgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtSZWFjdC5Db21wb25lbnR9XG4gICAqL1xuICBzdGF0aWMgY29udHJvbHNDb21wb25lbnQgPSBGcmFtZUNvbnRyb2xzQ29tcG9uZW50XG5cbiAgLyoqXG4gICAqIFRoZSBjYW52YXMgY29tcG9uZW50IGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7UmVhY3QuQ29tcG9uZW50fVxuICAgKi9cbiAgc3RhdGljIGNhbnZhc0NvbnRyb2xzQ29tcG9uZW50ID0gQmFzZUNvbnRyb2xzLmNhbnZhc0NvbnRyb2xzQ29tcG9uZW50XG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHBhdGggb2YgdGhpcyBjb250cm9sXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWNvblBhdGggPSAnZWRpdG9yL2NvbnRyb2xzL2ZyYW1lL2ljb24ucG5nJ1xuXG4gIC8qKlxuICAgKiBUaGUgYWN0aXZlIGljb24gcGF0aCBvZiB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBhY3RpdmVJY29uUGF0aCA9ICdlZGl0b3IvY29udHJvbHMvZnJhbWUvaWNvbi1hY3RpdmUucG5nJ1xuXG4gIC8qKlxuICAgKiBUaGUgb3BlcmF0aW9ucyByZXF1aXJlZCBmb3IgdGhpcyBjb250cm9sIHRvIHdvcmsgcHJvcGVybHlcbiAgICogQHR5cGUge0FycmF5fVxuICAgKi9cbiAgc3RhdGljIHJlcXVpcmVkT3BlcmF0aW9ucyA9IFsnZnJhbWUnXVxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBvcHRpb25zIGZvciB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByb3BlcnR5IHtPYmplY3RbXX0gW2NhdGVnb3JpZXMgPSBbXV1cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBbcmVwbGFjZUNhdGVnb3JpZXMgPSBmYWxzZV1cbiAgICogQHByb3BlcnR5IHtTdHJpbmdbXX0gW2F2YWlsYWJsZUZyYW1lcyA9IG51bGxdXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgY2F0ZWdvcmllczogW10sXG4gICAgcmVwbGFjZUNhdGVnb3JpZXM6IGZhbHNlLFxuICAgIGF2YWlsYWJsZUZyYW1lczogbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIE9wZXJhdGlvbnMgd2hpY2ggd2lsbCB0cmlnZ2VyIFVJIHVwZGF0ZXMgb24gdGhpcyBjb250cm9scy5cbiAgICogQHR5cGUge1N0cmluZ1tdfVxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgdXBkYXRhYmxlT3BlcmF0aW9ucyA9IFsnZnJhbWUnXVxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgZWRpdG9yIHdpbGwgc3dpdGNoIHRvIHRoZSBkZWZhdWx0IGNvbnRyb2xzIHdoZW4gYW55IG9mIHRoZSB1cGRhdGFibGVPcGVyYXRpb25zIGlzIHJlbW92ZWQuXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgc3dpdGNoVG9EZWZhdWx0Q29udHJvbHNPblJlbW92YWwgPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBNYXBzIHRoZSBvcGVyYXRpb25zIHN0YXRlIHRvIGEgc2hhcmVkIHN0YXRlIG9iamVjdFxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcGVyYXRpb25zXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2luaXRpYWw9ZmFsc2VdXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgbWFwT3BlcmF0aW9uc1RvU2hhcmVkU3RhdGUgKG9wZXJhdGlvbnMsIGluaXRpYWwgPSBmYWxzZSwgcHJldmlvdXNTdGF0ZSA9IHt9KSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gb3BlcmF0aW9ucy5nZXQoJ2ZyYW1lJykgfHwgbnVsbFxuICAgIGxldCBmcmFtZSA9IG51bGxcbiAgICBpZiAob3BlcmF0aW9uKSB7XG4gICAgICBmcmFtZSA9IG9wZXJhdGlvbi5nZXRGcmFtZSgpXG4gICAgfVxuICAgIGxldCBzdGF0ZSA9IHtcbiAgICAgIG9wZXJhdGlvbixcbiAgICAgIGZyYW1lLFxuICAgICAgZnJhbWVJZGVudGlmaWVyOiBmcmFtZSA/IGZyYW1lLmlkZW50aWZpZXIgOiBudWxsLFxuICAgICAgdGludENvbG9yOiBvcGVyYXRpb24gPyBvcGVyYXRpb24uZ2V0VGludENvbG9yKCkgOiBudWxsLFxuXG4gICAgICAvLyBhY3Rpb25zXG4gICAgICByZW1vdmVGcmFtZTogKCkgPT4geyBvcGVyYXRpb24gJiYgb3BlcmF0aW9ucy5yZW1vdmUob3BlcmF0aW9uKSB9LFxuICAgICAgc2V0VGludENvbG9yOiBjb2xvciA9PiB7IG9wZXJhdGlvbiAmJiBvcGVyYXRpb24uc2V0VGludENvbG9yKGNvbG9yLmNsb25lKCkpIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGVcbiAgfVxuXG4gIGxvYWRGcmFtZSAoZnJhbWVEYXRhKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IGZyYW1lID0gbmV3IEZyYW1lKHRoaXMuY29udGV4dC51aSwgZnJhbWVEYXRhKVxuICAgIGNvbnN0IG9wZXJhdGlvbiA9IGVkaXRvci5vcGVyYXRpb25zLmdldE9yQ3JlYXRlKCdmcmFtZScpXG5cbiAgICBsZXQgbG9hZGluZ01vZGFsXG4gICAgbGV0IGxvYWRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBsb2FkaW5nTW9kYWwgPSBNb2RhbE1hbmFnZXIuaW5zdGFuY2UuZGlzcGxheUxvYWRpbmcodGhpcy5fdCgncGVzZGsuY29tbW9uLnRleHQubG9hZGluZycpKVxuICAgIH0sIDEwMClcblxuICAgIHJldHVybiBmcmFtZS5sb2FkKClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKGxvYWRpbmdNb2RhbCkgbG9hZGluZ01vZGFsLmNsb3NlKClcbiAgICAgICAgaWYgKGxvYWRUaW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGxvYWRUaW1lb3V0KVxuICAgICAgICAgIGxvYWRUaW1lb3V0ID0gbnVsbFxuICAgICAgICB9XG4gICAgICAgIG9wZXJhdGlvbi5zZXRGcmFtZShmcmFtZS5nZXRGcmFtZSgpKVxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBjb250cm9sIGlzIGVuYWJsZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0VuYWJsZWQgKGVkaXRvcikge1xuICAgIHJldHVybiBlZGl0b3IuaXNUb29sQWxsb3dlZCgnZnJhbWUnKSAmJiBlZGl0b3IuaXNUb29sRW5hYmxlZCgnZnJhbWUnKVxuICB9XG59XG5cbkRlc2t0b3BVSS5Db250cm9scy5GcmFtZUNvbnRyb2xzID0gRnJhbWVDb250cm9sc1xuXG5leHBvcnQgZGVmYXVsdCBGcmFtZUNvbnRyb2xzXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9mcmFtZS9pbmRleC5qcyIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHtcbiAgUmVhY3QsIFV0aWxzLCBDb25zdGFudHMsIEZyYW1lTWFuYWdlciwgQ29udHJvbHNDb21wb25lbnQsIE1vZGFsTWFuYWdlciwgRnJhbWVcbn0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IEZyYW1lUm9vdFBhbmVsQ29tcG9uZW50IGZyb20gJy4vZnJhbWUtcm9vdC1wYW5lbC1jb21wb25lbnQnXG5pbXBvcnQgRnJhbWVPcHRpb25zUGFuZWxDb21wb25lbnQgZnJvbSAnLi9mcmFtZS1vcHRpb25zLXBhbmVsLWNvbXBvbmVudCdcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmNvbnN0IFBhbmVsRW51bSA9IHtcbiAgUk9PVDogMSxcbiAgQ0FURUdPUlk6IDIsXG4gIE9QVElPTlM6IDNcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJhbWVDb250cm9sc0NvbXBvbmVudCBleHRlbmRzIENvbnRyb2xzQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IENvbnRyb2xzQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuICBzdGF0aWMgUm9vdEVsZW1lbnQgPSBDb250cm9sc0NvbXBvbmVudC5Sb290RWxlbWVudFxuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uRnJhbWVDbGljaycsXG4gICAgICAnX29uUmVwbGFjZUNsaWNrJ1xuICAgIClcblxuICAgIHRoaXMuX2luaXRGcmFtZU1hbmFnZXIoKVxuICAgIHRoaXMuX25lZWRzU3R5bGVGaXhlcyA9IHRydWVcblxuICAgIGxldCBjdXJyZW50UGFuZWwgPSBQYW5lbEVudW0uUk9PVFxuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ29wZXJhdGlvbicpXG4gICAgaWYgKG9wZXJhdGlvbiAmJiBvcGVyYXRpb24uZ2V0RnJhbWUoKSkge1xuICAgICAgY3VycmVudFBhbmVsID0gUGFuZWxFbnVtLk9QVElPTlNcbiAgICB9XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGN1cnJlbnRQYW5lbFxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBzdHlsZXMgbmVlZCB0byBiZSBmaXhlZCBieSB0aGUgSmF2YVNjcmlwdC5cbiAgICogVGhpcyBuZWVkcyB0byBiZSBkb25lIHRoYW5rcyB0byBvbGRlciBJbnRlcm5ldCBFeHBsb3JlciBicm93c2VycyB3aGljaCBoYXZlXG4gICAqIGEgYnVuY2ggb2YgQ1NTIGJ1Z3MuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBmaXhTdHlsZXMgKCkge1xuICAgIHRoaXMuX2xpc3Quc3R5bGUuaGVpZ2h0ID0gJzEwMCUnXG4gICAgcmV0dXJuIHN1cGVyLmZpeFN0eWxlcygpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmIChVdGlscy5Ccm93c2VyLmlzSUVsdGUoMTApKSB7XG4gICAgICAgICAgY29uc3QgY29udGFpbmVySGVpZ2h0ID0gdGhpcy5fY29udGFpbmVyLm9mZnNldEhlaWdodFxuICAgICAgICAgIHRoaXMuX2xpc3Quc3R5bGUuaGVpZ2h0ID0gYCR7Y29udGFpbmVySGVpZ2h0fXB4YFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVmcy5wYW5lbC5maXhTdHlsZXMoKVxuICAgICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGltbWVkaWF0ZWx5IGFmdGVyIHVwZGF0aW5nIG9jY3Vyc1xuICAgKi9cbiAgY29tcG9uZW50RGlkVXBkYXRlIChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIGlmICh0aGlzLnN0YXRlLmN1cnJlbnRQYW5lbCAhPT0gcHJldlN0YXRlLmN1cnJlbnRQYW5lbCkge1xuICAgICAgdGhpcy5maXhTdHlsZXMoKVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZSQU1FIE1BTkFHRVJcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGZyYW1lIG1hbmFnZXJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0RnJhbWVNYW5hZ2VyICgpIHtcbiAgICB0aGlzLl9mcmFtZU1hbmFnZXIgPSBuZXcgRnJhbWVNYW5hZ2VyKHRoaXMuY29udGV4dC51aSwgdGhpcy5wcm9wcy5vcHRpb25zKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHNoYXJlZCBzdGF0ZSBkaWQgY2hhbmdlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRTdGF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbmV3U3RhdGVcbiAgICovXG4gIHNoYXJlZFN0YXRlRGlkQ2hhbmdlIChvbGRTdGF0ZSwgbmV3U3RhdGUpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG5cbiAgICBjb25zdCBvcGVyYXRpb24gPSBlZGl0b3Iub3BlcmF0aW9ucy5nZXQoJ2ZyYW1lJylcbiAgICBpZiAoIW9wZXJhdGlvbiB8fCAob3BlcmF0aW9uICYmICFvcGVyYXRpb24uZ2V0RnJhbWUoKSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFN0YXRlKHsgY3VycmVudFBhbmVsOiBQYW5lbEVudW0uUk9PVCB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnRQYW5lbDogUGFuZWxFbnVtLk9QVElPTlMgfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCBod2VuIHRoZSBgUmVwbGFjZWAgYnV0dG9uIGhhcyBiZWVuIGNsaWNrZWRcbiAgICogQHByaXZ0ZVxuICAgKi9cbiAgX29uUmVwbGFjZUNsaWNrICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRQYW5lbDogUGFuZWxFbnVtLlJPT1RcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBhIGNhdGVnb3J5IGl0ZW0uXG4gICAqIEBwYXJhbSAge0NhdGVnb3J5fSBjYXRlZ29yeVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ2F0ZWdvcnlDbGljayAoY2F0ZWdvcnkpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRQYW5lbDogUGFuZWxFbnVtLkNBVEVHT1JZLFxuICAgICAgY2F0ZWdvcnlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBhIGZyYW1lLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZnJhbWVEYXRhXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25GcmFtZUNsaWNrIChmcmFtZURhdGEpIHtcbiAgICBpZiAoIWZyYW1lRGF0YSkge1xuICAgICAgdGhpcy5zaGFyZWRTdGF0ZS5yZW1vdmVGcmFtZSgpXG4gICAgICB0aGlzLnByb3BzLmNvbnRyb2xzLmFkZExvY2FsSGlzdG9yeVNuYXBzaG90KCdmcmFtZS1pbWFnZScsIHRydWUpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLmNvbnRyb2xzLmxvYWRGcmFtZShmcmFtZURhdGEpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMuY29udHJvbHMuYWRkTG9jYWxIaXN0b3J5U25hcHNob3QoJ2ZyYW1lLWltYWdlJywgZmFsc2UpXG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY3VycmVudFBhbmVsOiBQYW5lbEVudW0uT1BUSU9OU1xuICAgICAgICB9KVxuICAgICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBjdXJyZW50IHBhbmVsIGFjY29yZGluZyB0b1xuICAgKiB0aGUgY29tcG9uZW50cyBzdGF0ZS5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH0gVGhlIHBhbmVsIGNvbXBvbmVudFxuICAgKi9cbiAgX3JlbmRlckN1cnJlbnRQYW5lbCAoKSB7XG4gICAgY29uc3QgeyBjb250cm9scyB9ID0gdGhpcy5wcm9wc1xuXG4gICAgc3dpdGNoICh0aGlzLnN0YXRlLmN1cnJlbnRQYW5lbCkge1xuICAgICAgY2FzZSBQYW5lbEVudW0uUk9PVDpcbiAgICAgICAgcmV0dXJuICg8RnJhbWVSb290UGFuZWxDb21wb25lbnRcbiAgICAgICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9saXN0ID0gZWwgfX1cbiAgICAgICAgICBmcmFtZU1hbmFnZXI9e3RoaXMuX2ZyYW1lTWFuYWdlcn1cbiAgICAgICAgICBvbkZyYW1lQ2xpY2s9e3RoaXMuX29uRnJhbWVDbGlja31cbiAgICAgICAgICBjb250cm9scz17Y29udHJvbHN9XG4gICAgICAgICAgcmVmPSdwYW5lbCdcbiAgICAgICAgLz4pXG4gICAgICBjYXNlIFBhbmVsRW51bS5PUFRJT05TOlxuICAgICAgICByZXR1cm4gKDxGcmFtZU9wdGlvbnNQYW5lbENvbXBvbmVudFxuICAgICAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2xpc3QgPSBlbCB9fVxuICAgICAgICAgIGZyYW1lTWFuYWdlcj17dGhpcy5fZnJhbWVNYW5hZ2VyfVxuICAgICAgICAgIG9uUmVwbGFjZUNsaWNrPXt0aGlzLl9vblJlcGxhY2VDbGlja31cbiAgICAgICAgICBvbk5ld0ZyYW1lQ2xpY2s9e3RoaXMuX29uTmV3RnJhbWVDbGlja31cbiAgICAgICAgICBjb250cm9scz17Y29udHJvbHN9XG4gICAgICAgICAgcmVmPSdwYW5lbCdcbiAgICAgICAgLz4pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb3BlcnRpZXMgZm9yIHRoZSByb290IGVsZW1lbnRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFJvb3RQcm9wcyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzTmFtZTogKHRlc3QgPyAnanMtZnJhbWVDb250cm9scycgOiB1bmRlZmluZWQpLFxuICAgICAgd2l0aEJvcmRlclRvcDogdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50J3MgY29udGVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlckNvbnRlbnQgKCkge1xuICAgIHJldHVybiB0aGlzLl9yZW5kZXJDdXJyZW50UGFuZWwoKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9mcmFtZS9mcmFtZS1jb250cm9scy1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazovKipcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCBVdGlscywgU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgeyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfSBmcm9tICdzaGFyZWQvYXN5bmMvYW5pbWF0aW9uLWZyYW1lJ1xuaW1wb3J0IEZyYW1lTGlzdENvbXBvbmVudCBmcm9tICcuL2ZyYW1lLWxpc3QtY29tcG9uZW50J1xuXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJhbWVSb290UGFuZWxDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTElOR1xuXG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBzdHlsZXMgbmVlZCB0byBiZSBmaXhlZCBieSB0aGUgSmF2YVNjcmlwdC5cbiAgICogVGhpcyBuZWVkcyB0byBiZSBkb25lIHRoYW5rcyB0byBvbGRlciBJbnRlcm5ldCBFeHBsb3JlciBicm93c2VycyB3aGljaCBoYXZlXG4gICAqIGEgYnVuY2ggb2YgQ1NTIGJ1Z3MuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBmcm9tIHRoZSBGcmFtZUNvbnRyb2xzQ29tcG9uZW50IGR1ZSB0byB0aW1pbmcgaXNzdWVzLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgZml4U3R5bGVzICgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKFV0aWxzLkJyb3dzZXIuaXNJRWx0ZSgxMCkpIHtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsYmFyLnVwZGF0ZSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zY3JvbGxiYXIudXBkYXRlKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGZyYW1lTWFuYWdlciwgaW5uZXJSZWYgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKDxXcmFwcGVyXG4gICAgICBpbm5lclJlZj17ZWwgPT4geyBpbm5lclJlZiAmJiBpbm5lclJlZihlbCk7IHRoaXMuX3dyYXBwZXIgPSBlbCB9fVxuICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1yb290UGFuZWwnIDogdW5kZWZpbmVkKX0+XG4gICAgICA8U2Nyb2xsYWJsZUxpc3RDb21wb25lbnRcbiAgICAgICAgZGlyZWN0aW9uPSd2ZXJ0aWNhbCdcbiAgICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fc2Nyb2xsYmFyID0gZWwgfX0+XG4gICAgICAgIDxGcmFtZUxpc3RDb21wb25lbnRcbiAgICAgICAgICBmcmFtZXM9e2ZyYW1lTWFuYWdlci5nZXRGcmFtZXNGb3JDYXRlZ29yeSgnYWxsJyl9XG4gICAgICAgICAgb25GcmFtZUNsaWNrPXt0aGlzLnByb3BzLm9uRnJhbWVDbGlja30gLz5cbiAgICAgIDwvU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQ+XG4gICAgPC9XcmFwcGVyPilcbiAgfVxufVxuXG5jb25zdCBXcmFwcGVyID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZScsXG4gIHRhYmxlTGF5b3V0OiAnZml4ZWQnLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2ZyYW1lL2ZyYW1lLXJvb3QtcGFuZWwtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6LyoqXG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgU2hhcmVkU3RhdGVDb21wb25lbnQsIENvbnRyb2xzU3R5bGVzIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuXG5jb25zdCB7IFBsYWluQ29udHJvbEl0ZW0gfSA9IENvbnRyb2xzU3R5bGVzXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJhbWVMaXN0Q29tcG9uZW50IGV4dGVuZHMgU2hhcmVkU3RhdGVDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gU2hhcmVkU3RhdGVDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgYSBmcmFtZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGZyYW1lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25GcmFtZUNsaWNrIChmcmFtZSkge1xuICAgIHRoaXMucHJvcHMub25GcmFtZUNsaWNrICYmXG4gICAgICB0aGlzLnByb3BzLm9uRnJhbWVDbGljayhmcmFtZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGFuIGFyYml0cmF5IG51bWJlciBvZiBmcmFtZSBpdGVtcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJMaXN0SXRlbXMgKCkge1xuICAgIGNvbnN0IHsgZnJhbWVzIH0gPSB0aGlzLnByb3BzXG5cbiAgICBsZXQgY3VycmVudEZyYW1lSWRlbnRpZmllciA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUuZnJhbWVJZGVudGlmaWVyXG5cbiAgICBjb25zdCBzZWxlY3RlZFNwcml0ZSA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3NlbGVjdGVkU3ByaXRlJylcbiAgICBpZiAoc2VsZWN0ZWRTcHJpdGUpIHtcbiAgICAgIGN1cnJlbnRGcmFtZUlkZW50aWZpZXIgPSBzZWxlY3RlZFNwcml0ZS5nZXRJZGVudGlmaWVyKClcbiAgICB9XG5cbiAgICByZXR1cm4gZnJhbWVzLm1hcChmcmFtZSA9PiB7XG4gICAgICBjb25zdCB0aHVtYlVSTCA9IHRoaXMuX2dldEFzc2V0UGF0aChmcmFtZS50aHVtYm5haWwpXG4gICAgICBjb25zdCBpdGVtU3R5bGUgPSB7XG4gICAgICAgIGJhY2tncm91bmQ6IGB1cmwoJyR7dGh1bWJVUkx9Jykgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXJgLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nXG4gICAgICB9XG4gICAgICByZXR1cm4gKDxGcmFtZUxpc3RJdGVtXG4gICAgICAgIHNlbGVjdGVkPXtmcmFtZS5pZGVudGlmaWVyID09PSBjdXJyZW50RnJhbWVJZGVudGlmaWVyfVxuICAgICAgICBrZXk9e2ZyYW1lLmlkZW50aWZpZXJ9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uRnJhbWVDbGljay5iaW5kKHRoaXMsIGZyYW1lKX1cbiAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1mcmFtZScgOiB1bmRlZmluZWQpfVxuICAgICAgICB0d29Db2x1bW5zPlxuICAgICAgICA8RnJhbWVJbWFnZSBzdHlsZT17aXRlbVN0eWxlfSAvPlxuICAgICAgPC9GcmFtZUxpc3RJdGVtPilcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IGZyYW1lID0gdGhpcy5zaGFyZWRTdGF0ZS5mcmFtZVxuXG4gICAgcmV0dXJuICg8RnJhbWVMaXN0PlxuICAgICAgPEZyYW1lTGlzdEl0ZW1cbiAgICAgICAgc2VsZWN0ZWQ9eyFmcmFtZX1cbiAgICAgICAgb25DbGljaz17dGhpcy5fb25GcmFtZUNsaWNrLmJpbmQodGhpcywgbnVsbCl9XG4gICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtZnJhbWUnIDogdW5kZWZpbmVkKX1cbiAgICAgICAgd2l0aFRleHRcbiAgICAgICAgdHdvQ29sdW1ucz5cbiAgICAgICAge3RoaXMuX3QoJ3Blc2RrLmZyYW1lLmJ1dHRvbi5ub25lJyl9XG4gICAgICA8L0ZyYW1lTGlzdEl0ZW0+XG4gICAgICB7dGhpcy5fcmVuZGVyTGlzdEl0ZW1zKCl9XG4gICAgPC9GcmFtZUxpc3Q+KVxuICB9XG59XG5cbmNvbnN0IEZyYW1lTGlzdCA9IGFkb25pcy51bCh7XG4gIGxpc3RTdHlsZTogJ25vbmUnLFxuICBtYXJnaW46IDAsXG4gIHBhZGRpbmc6IDAsXG4gIHBhZGRpbmdUb3A6ICcyNXB4JyxcbiAgcGFkZGluZ0xlZnQ6ICcxN3B4JyxcbiAgdGV4dEFsaWduOiAnbGVmdCdcbn0pXG5cbmNvbnN0IEZyYW1lTGlzdEl0ZW0gPSBhZG9uaXMoUGxhaW5Db250cm9sSXRlbSkubGkoe1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcblxuICAnOmxhc3QtY2hpbGQnOiB7XG4gICAgbWFyZ2luQm90dG9tOiAnMjVweCdcbiAgfVxufSlcblxuY29uc3QgRnJhbWVJbWFnZSA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAnNXB4JyxcbiAgcmlnaHQ6ICc1cHgnLFxuICBib3R0b206ICc1cHgnLFxuICBsZWZ0OiAnNXB4J1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL2ZyYW1lL2ZyYW1lLWxpc3QtY29tcG9uZW50LmpzeCIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHtcbiAgUmVhY3QsIGFkb25pcywgVXRpbHMsIENvbnN0YW50cywgU2hhcmVkU3RhdGVDb21wb25lbnQsIFNsaWRlckNvbnRyb2xDb21wb25lbnQsXG4gIENvbG9yU2VsZWN0aW9uQ29tcG9uZW50LCBTY3JvbGxhYmxlTGlzdENvbXBvbmVudCwgQ29sbGFwc2VTZWN0aW9uQ29tcG9uZW50LFxuICBDb250cm9sc1N0eWxlc1xufSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgeyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfSBmcm9tICdzaGFyZWQvYXN5bmMvYW5pbWF0aW9uLWZyYW1lJ1xuY29uc3QgeyBQbGFpbkNvbnRyb2xJdGVtQmFja2dyb3VuZCB9ID0gQ29udHJvbHNTdHlsZXNcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZyYW1lT3B0aW9uc1BhbmVsQ29tcG9uZW50IGV4dGVuZHMgU2hhcmVkU3RhdGVDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gU2hhcmVkU3RhdGVDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25UaW50VG9nZ2xlJyxcbiAgICAgICdfb25UaW50Q29sb3JDaGFuZ2UnLFxuICAgICAgJ19vbk9wYWNpdHlDaGFuZ2UnLFxuICAgICAgJ19vbldpZHRoQ2hhbmdlJ1xuICAgIClcblxuICAgIGNvbnN0IHRpbnRDb2xvciA9IHRoaXMuc2hhcmVkU3RhdGUudGludENvbG9yXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHRpbnRFbmFibGVkOiB0aW50Q29sb3IgPyB0aW50Q29sb3IuYSA+IDAgOiBmYWxzZSxcbiAgICAgIHRpbnRDb2xvcjogdGludENvbG9yXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdGludCBoYXMgYmVlbiB0dXJuZWQgb24gb3Igb2ZmXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IGVuYWJsZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblRpbnRUb2dnbGUgKGVuYWJsZWQpIHtcbiAgICBjb25zdCB7IHRpbnRFbmFibGVkIH0gPSB0aGlzLnN0YXRlXG5cbiAgICBjb25zdCB0aW50Q29sb3IgPSB0aGlzLnNoYXJlZFN0YXRlLnRpbnRDb2xvci5jbG9uZSgpXG4gICAgdGludENvbG9yLmEgPSB0aW50RW5hYmxlZCA/IDAgOiAxXG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXRUaW50Q29sb3IodGludENvbG9yKVxuXG4gICAgdGhpcy5wcm9wcy5jb250cm9scy5hZGRMb2NhbEhpc3RvcnlTbmFwc2hvdCgnZnJhbWUtdGludC1lbmFibGVkJylcblxuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBlZGl0b3IucmVuZGVyKClcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdGludEVuYWJsZWQ6ICF0aW50RW5hYmxlZFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB0aW50IGNvbG9yIGhhcyBiZWVuIGNoYW5nZWRcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuQ29sb3J9IGNvbG9yXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25UaW50Q29sb3JDaGFuZ2UgKGNvbG9yKSB7XG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXRUaW50Q29sb3IoY29sb3IuY2xvbmUoKSlcblxuICAgIHRoaXMucHJvcHMuY29udHJvbHMuYWRkTG9jYWxIaXN0b3J5U25hcHNob3QoJ2ZyYW1lLXRpbnQtY29sb3InLCB0cnVlKVxuXG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGVkaXRvci5yZW5kZXIoKVxuICB9XG5cbiAgc2hhcmVkU3RhdGVEaWRDaGFuZ2UgKCkge1xuICAgIGNvbnN0IHRpbnRDb2xvciA9IHRoaXMuc2hhcmVkU3RhdGUudGludENvbG9yXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHRpbnRFbmFibGVkOiB0aW50Q29sb3IgPyB0aW50Q29sb3IuYSA+IDAgOiBmYWxzZSxcbiAgICAgIHRpbnRDb2xvcjogdGludENvbG9yID8gdGludENvbG9yLmNsb25lKCkgOiBudWxsXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIG9wYWNpdHkgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG9wYWNpdHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbk9wYWNpdHlDaGFuZ2UgKG9wYWNpdHkpIHtcbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdvcGVyYXRpb24nKVxuICAgIG9wZXJhdGlvbi5zZXRBbHBoYShvcGFjaXR5IC8gMTAwKVxuXG4gICAgdGhpcy5wcm9wcy5jb250cm9scy5hZGRMb2NhbEhpc3RvcnlTbmFwc2hvdCgnZnJhbWUtb3BhY2l0eScsIHRydWUpXG5cbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgZWRpdG9yLnJlbmRlcigpXG5cbiAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHdpZHRoIGhhcyBiZWVuIGNoYW5nZWRcbiAgICogQHBhcmFtICB7TnVtYmVyfSB3aWR0aFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uV2lkdGhDaGFuZ2UgKHdpZHRoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ29wZXJhdGlvbicpXG4gICAgY29uc3Qgc2hvcnRlc3RTaWRlID0gb3BlcmF0aW9uLmdldElucHV0RGltZW5zaW9ucygpLm1pbigpXG4gICAgb3BlcmF0aW9uLnNldFNjYWxlKHdpZHRoIC8gc2hvcnRlc3RTaWRlKVxuXG4gICAgdGhpcy5wcm9wcy5jb250cm9scy5hZGRMb2NhbEhpc3RvcnlTbmFwc2hvdCgnZnJhbWUtd2lkdGgnLCB0cnVlKVxuXG4gICAgZWRpdG9yLnJlbmRlcigpXG5cbiAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxJTkdcblxuICAvKipcbiAgICogQSBtZXRob2QgdGhhdCBpcyBjYWxsZWQgd2hlbmV2ZXIgc3R5bGVzIG5lZWQgdG8gYmUgZml4ZWQgYnkgdGhlIEphdmFTY3JpcHQuXG4gICAqIFRoaXMgbmVlZHMgdG8gYmUgZG9uZSB0aGFua3MgdG8gb2xkZXIgSW50ZXJuZXQgRXhwbG9yZXIgYnJvd3NlcnMgd2hpY2ggaGF2ZVxuICAgKiBhIGJ1bmNoIG9mIENTUyBidWdzLlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgZnJvbSB0aGUgRnJhbWVDb250cm9sc0NvbXBvbmVudCBkdWUgdG8gdGltaW5nIGlzc3Vlcy5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGZpeFN0eWxlcyAoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmIChVdGlscy5Ccm93c2VyLmlzSUVsdGUoMTApKSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbGJhci51cGRhdGUoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fc2Nyb2xsYmFyLnVwZGF0ZSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBpbm5lclJlZiwgb25SZXBsYWNlQ2xpY2sgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdvcGVyYXRpb24nKVxuICAgIGNvbnN0IGZyYW1lID0gb3BlcmF0aW9uLmdldEZyYW1lKClcbiAgICBjb25zdCBpbnB1dERpbWVuc2lvbnMgPSBvcGVyYXRpb24uZ2V0SW5wdXREaW1lbnNpb25zKClcbiAgICBjb25zdCBzaG9ydGVzdFNpZGUgPSBpbnB1dERpbWVuc2lvbnMubWluKClcbiAgICBjb25zdCB0aW50YWJsZSA9IGZyYW1lLnRpbnRhYmxlXG5cbiAgICBjb25zdCB0aHVtYm5haWxTdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmQ6IGB1cmwoJyR7dGhpcy5fZ2V0QXNzZXRQYXRoKGZyYW1lLnRodW1ibmFpbCwgZmFsc2UpfScpIGNlbnRlciBjZW50ZXIgLyBjb250YWluIG5vLXJlcGVhdGBcbiAgICB9XG5cbiAgICByZXR1cm4gKDxXcmFwcGVyXG4gICAgICBpbm5lclJlZj17ZWwgPT4geyBpbm5lclJlZiAmJiBpbm5lclJlZihlbCk7IHRoaXMuX3dyYXBwZXIgPSBlbCB9fVxuICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1vcHRpb25zUGFuZWwnIDogdW5kZWZpbmVkKX0+XG4gICAgICA8U2Nyb2xsYWJsZUxpc3RDb21wb25lbnRcbiAgICAgICAgZGlyZWN0aW9uPSd2ZXJ0aWNhbCdcbiAgICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fc2Nyb2xsYmFyID0gZWwgfX0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPFRvcFNlY3Rpb24+XG4gICAgICAgICAgICA8RGV0YWlscz5cbiAgICAgICAgICAgICAgPFRodW1ibmFpbD5cbiAgICAgICAgICAgICAgICA8VGh1bWJuYWlsSW1hZ2VcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt0aHVtYm5haWxTdHlsZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUmVwbGFjZUNsaWNrfSAvPlxuICAgICAgICAgICAgICA8L1RodW1ibmFpbD5cbiAgICAgICAgICAgICAgPERldGFpbHNDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPFRpdGxlPnt0aGlzLl90KGBwZXNkay5mcmFtZS5hc3NldC4ke2ZyYW1lLmlkZW50aWZpZXJ9YCkgfHwgZnJhbWUuZGVmYXVsdE5hbWV9PC9UaXRsZT5cbiAgICAgICAgICAgICAgICA8UmVwbGFjZUJ1dHRvblxuICAgICAgICAgICAgICAgICAgb25DbGljaz17b25SZXBsYWNlQ2xpY2t9XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXJlcGxhY2VCdXR0b24nIDogdW5kZWZpbmVkKX0+XG4gICAgICAgICAgICAgICAgICB7dGhpcy5fdCgncGVzZGsuZnJhbWUuYnV0dG9uLnJlcGxhY2UnKX1cbiAgICAgICAgICAgICAgICA8L1JlcGxhY2VCdXR0b24+XG4gICAgICAgICAgICAgIDwvRGV0YWlsc0NvbnRhaW5lcj5cbiAgICAgICAgICAgIDwvRGV0YWlscz5cbiAgICAgICAgICAgIDxTbGlkZXJDb250cm9sQ29tcG9uZW50XG4gICAgICAgICAgICAgIG1pblZhbHVlPXswfVxuICAgICAgICAgICAgICB2YWx1ZT17TWF0aC5yb3VuZChvcGVyYXRpb24uZ2V0QWxwaGEoKSAqIDEwMCl9XG4gICAgICAgICAgICAgIG1heFZhbHVlPXsxMDB9XG4gICAgICAgICAgICAgIGxhYmVsPXt0aGlzLl90KCdwZXNkay5mcmFtZS50aXRsZS5vcGFjaXR5Jyl9XG4gICAgICAgICAgICAgIG9uU2xpZGVyVmFsdWVDaGFuZ2U9e3RoaXMuX29uT3BhY2l0eUNoYW5nZX1cbiAgICAgICAgICAgICAgb25WYWx1ZUNoYW5nZT17dGhpcy5fb25PcGFjaXR5Q2hhbmdlfVxuICAgICAgICAgICAgICBtaWRkbGVEb3Q9e2ZhbHNlfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLW9wYWNpdHlDb250cm9sJyA6IHVuZGVmaW5lZCl9IC8+XG4gICAgICAgICAgICA8U2xpZGVyQ29udHJvbENvbXBvbmVudFxuICAgICAgICAgICAgICBtaW5WYWx1ZT17c2hvcnRlc3RTaWRlICogMC4wNX1cbiAgICAgICAgICAgICAgdmFsdWU9e01hdGgucm91bmQob3BlcmF0aW9uLmdldFNjYWxlKCkgKiBzaG9ydGVzdFNpZGUpfVxuICAgICAgICAgICAgICBtYXhWYWx1ZT17c2hvcnRlc3RTaWRlICogMC4zfVxuICAgICAgICAgICAgICBsYWJlbD17dGhpcy5fdCgncGVzZGsuZnJhbWUudGl0bGUud2lkdGgnKX1cbiAgICAgICAgICAgICAgb25TbGlkZXJWYWx1ZUNoYW5nZT17dGhpcy5fb25XaWR0aENoYW5nZX1cbiAgICAgICAgICAgICAgb25WYWx1ZUNoYW5nZT17dGhpcy5fb25XaWR0aENoYW5nZX1cbiAgICAgICAgICAgICAgbWlkZGxlRG90PXtmYWxzZX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy13aWR0aENvbnRyb2wnIDogdW5kZWZpbmVkKX0gLz5cbiAgICAgICAgICA8L1RvcFNlY3Rpb24+XG4gICAgICAgICAge3RpbnRhYmxlICYmICg8Q29sbGFwc2VTZWN0aW9uQ29tcG9uZW50XG4gICAgICAgICAgICB0b2dnbGVhYmxlXG4gICAgICAgICAgICB0aXRsZT17dGhpcy5fdCgncGVzZGsuZnJhbWUuYnV0dG9uLmZpbGwnKX1cbiAgICAgICAgICAgIGV4cGFuZGVkPXt0aGlzLnN0YXRlLnRpbnRFbmFibGVkfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1maWxsQ29udHJvbCcgOiB1bmRlZmluZWQpfVxuICAgICAgICAgICAgb25Ub2dnbGU9e3RoaXMuX29uVGludFRvZ2dsZX0+XG4gICAgICAgICAgICA8Q29sb3JTZWxlY3Rpb25cbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudGludENvbG9yfVxuICAgICAgICAgICAgICBvbkNvbG9yUGlja2VyVG9nZ2xlPXt0aGlzLmZpeFN0eWxlc31cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuX29uVGludENvbG9yQ2hhbmdlfSAvPlxuICAgICAgICAgIDwvQ29sbGFwc2VTZWN0aW9uQ29tcG9uZW50Pil9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9TY3JvbGxhYmxlTGlzdENvbXBvbmVudD5cbiAgICA8L1dyYXBwZXI+KVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxFU1xuXG5jb25zdCBXcmFwcGVyID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZScsXG4gIHRhYmxlTGF5b3V0OiAnZml4ZWQnLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSlcblxuY29uc3QgVG9wU2VjdGlvbiA9IGFkb25pcy5kaXYoe1xuICBwYWRkaW5nOiAnMjVweCcsXG4gIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCAjMUIxQjFFJ1xufSlcblxuY29uc3QgRGV0YWlscyA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgbWFyZ2luQm90dG9tOiAnMjVweCcsXG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICBoZWlnaHQ6ICc3MnB4J1xufSlcblxuY29uc3QgVGh1bWJuYWlsID0gYWRvbmlzKFBsYWluQ29udHJvbEl0ZW1CYWNrZ3JvdW5kKS5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgdG9wOiAwLFxuICBoZWlnaHQ6ICc3MnB4JyxcbiAgd2lkdGg6ICc3MnB4JyxcbiAgcGFkZGluZzogMCxcbiAgY3Vyc29yOiAncG9pbnRlcidcbn0pXG5cbmNvbnN0IFRodW1ibmFpbEltYWdlID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICc1cHgnLFxuICByaWdodDogJzVweCcsXG4gIGJvdHRvbTogJzVweCcsXG4gIGxlZnQ6ICc1cHgnXG59KVxuXG5jb25zdCBEZXRhaWxzQ29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICByaWdodDogMCxcbiAgbGVmdDogJzg3cHgnLFxuICB0b3A6IDAsXG4gIGZvbnRTaXplOiAnMTNweCdcbn0pXG5cbmNvbnN0IFRpdGxlID0gYWRvbmlzLmRpdih7XG4gIGhlaWdodDogJ2F1dG8nLFxuICB3aWR0aDogJzEwMCUnLFxuICBtYXJnaW5Ub3A6ICcxMnB4JyxcbiAgbWFyZ2luQm90dG9tOiAnOHB4JyxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLmRpbW1lZFRleHRDb2xvcixcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICBmb250RmFtaWx5OiB0aGVtZSA9PiB0aGVtZS5yZWd1bGFyRm9udEZhbWlseVxufSlcblxuY29uc3QgUmVwbGFjZUJ1dHRvbiA9IGFkb25pcy5kaXYoe1xuICB3aWR0aDogJzEwMCUnLFxuICBjb2xvcjogdGhlbWUgPT4gdGhlbWUudGV4dENvbG9yLFxuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgbGV0dGVyU3BhY2luZzogJzJweCcsXG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnVwcGVyY2FzZVNlbWlCb2xkRm9udEZhbWlseSxcbiAgY3Vyc29yOiAncG9pbnRlcidcbn0pXG5cbmNvbnN0IENvbG9yU2VsZWN0aW9uID0gYWRvbmlzKENvbG9yU2VsZWN0aW9uQ29tcG9uZW50KSh7XG4gIHBhZGRpbmdUb3A6IDBcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9mcmFtZS9mcmFtZS1vcHRpb25zLXBhbmVsLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCBEZXNrdG9wVUksIHsgQmFzZUNvbnRyb2xzLCBNb2RhbE1hbmFnZXIgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgT3ZlcmxheUNvbnRyb2xzQ29tcG9uZW50IGZyb20gJy4vb3ZlcmxheS1jb250cm9scy1jb21wb25lbnQnXG5pbXBvcnQgSW1hZ2VMb2FkZXIgZnJvbSAnc2hhcmVkL2xvYWRlcnMvaW1hZ2UtbG9hZGVyJ1xuaW1wb3J0IEJsZW5kTW9kZXMgZnJvbSAnLi9ibGVuZC1tb2RlcydcblxuLyoqXG4gKiBUaGUgQ29udHJvbHMgZm9yIHRoZSBPdmVybGF5IHRvb2wuXG4gKlxuICogQGNsYXNzXG4gKiBAbWVtYmVyb2YgUGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkNvbnRyb2xzXG4gKiBAZXh0ZW5kcyBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuQmFzZUNvbnRyb2xzXG4gKi9cbmNsYXNzIE92ZXJsYXlDb250cm9scyBleHRlbmRzIEJhc2VDb250cm9scyB7XG4gIHN0YXRpYyBjbGlja0F0UG9zaXRpb24gPSBCYXNlQ29udHJvbHMuY2xpY2tBdFBvc2l0aW9uXG4gIHN0YXRpYyBnZXRQcmVsb2FkQXNzZXRzID0gQmFzZUNvbnRyb2xzLmdldFByZWxvYWRBc3NldHNcblxuICAvKipcbiAgICogQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlc2UgY29udHJvbHNcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBpZGVudGlmaWVyID0gJ292ZXJsYXknXG5cbiAgLyoqXG4gICAqIFRoZSBjb250cm9scyBjb21wb25lbnQgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtSZWFjdC5Db21wb25lbnR9XG4gICAqL1xuICBzdGF0aWMgY29udHJvbHNDb21wb25lbnQgPSBPdmVybGF5Q29udHJvbHNDb21wb25lbnRcblxuICAvKipcbiAgICogVGhlIGNhbnZhcyBjb21wb25lbnQgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtSZWFjdC5Db21wb25lbnR9XG4gICAqL1xuICBzdGF0aWMgY2FudmFzQ29udHJvbHNDb21wb25lbnQgPSBCYXNlQ29udHJvbHMuY2FudmFzQ29udHJvbHNDb21wb25lbnRcblxuICAvKipcbiAgICogVGhlIGljb24gcGF0aCBvZiB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBpY29uUGF0aCA9ICdlZGl0b3IvY29udHJvbHMvb3ZlcmxheS9pY29uLnBuZydcblxuICAvKipcbiAgICogVGhlIGFjdGl2ZSBpY29uIHBhdGggb2YgdGhpcyBjb250cm9sXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgYWN0aXZlSWNvblBhdGggPSAnZWRpdG9yL2NvbnRyb2xzL292ZXJsYXkvaWNvbi1hY3RpdmUucG5nJ1xuXG4gIC8qKlxuICAgKiBUaGUgb3BlcmF0aW9ucyByZXF1aXJlZCBmb3IgdGhpcyBjb250cm9sIHRvIHdvcmsgcHJvcGVybHlcbiAgICogQHR5cGUge0FycmF5fVxuICAgKi9cbiAgc3RhdGljIHJlcXVpcmVkT3BlcmF0aW9ucyA9IFsnb3ZlcmxheSddXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIHRoaXMgY29udHJvbFxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJvcGVydHkge09iamVjdFtdfSBbb3ZlcmxheXMgPSBbXV1cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBbcmVwbGFjZU92ZXJsYXlzID0gZmFsc2VdXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nW119IFthdmFpbGFibGVPdmVybGF5cyA9IG51bGxdXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgb3ZlcmxheXM6IFtdLFxuICAgIHJlcGxhY2VPdmVybGF5czogZmFsc2UsXG4gICAgYXZhaWxhYmxlT3ZlcmxheXM6IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVyYXRpb25zIHdoaWNoIHdpbGwgdHJpZ2dlciBVSSB1cGRhdGVzIG9uIHRoaXMgY29udHJvbHMuXG4gICAqIEB0eXBlIHtTdHJpbmdbXX1cbiAgICogQHN0YXRpY1xuICAgKi9cbiAgc3RhdGljIHVwZGF0YWJsZU9wZXJhdGlvbnMgPSBbJ292ZXJsYXknXVxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgZWRpdG9yIHdpbGwgc3dpdGNoIHRvIHRoZSBkZWZhdWx0IGNvbnRyb2xzIHdoZW4gYW55IG9mIHRoZSB1cGRhdGFibGVPcGVyYXRpb25zIGlzIHJlbW92ZWQuXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgc3dpdGNoVG9EZWZhdWx0Q29udHJvbHNPblJlbW92YWwgPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBNYXBzIHRoZSBvcGVyYXRpb25zIHN0YXRlIHRvIGEgc2hhcmVkIHN0YXRlIG9iamVjdFxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcGVyYXRpb25zXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2luaXRpYWw9ZmFsc2VdXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgbWFwT3BlcmF0aW9uc1RvU2hhcmVkU3RhdGUgKG9wZXJhdGlvbnMsIGluaXRpYWwgPSBmYWxzZSwgcHJldmlvdXNTdGF0ZSA9IHt9KSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gb3BlcmF0aW9ucy5nZXRPckNyZWF0ZSgnb3ZlcmxheScpXG5cbiAgICByZXR1cm4ge1xuICAgICAgb3BlcmF0aW9uLFxuICAgICAgaWRlbnRpZmllcjogb3BlcmF0aW9uID8gb3BlcmF0aW9uLmdldElkZW50aWZpZXIoKSA6IG51bGwsXG4gICAgICBhbHBoYTogb3BlcmF0aW9uID8gb3BlcmF0aW9uLmdldEFscGhhKCkgOiAxLFxuICAgICAgYmxlbmRNb2RlOiBvcGVyYXRpb24gPyBvcGVyYXRpb24uZ2V0QmxlbmRNb2RlKCkgOiBCbGVuZE1vZGVzWydub3JtYWwnXSxcblxuICAgICAgLy8gYWN0aW9uc1xuICAgICAgcmVtb3ZlT3ZlcmxheTogKCkgPT4geyBvcGVyYXRpb24gJiYgb3BlcmF0aW9uLnNldCh7IGltYWdlOiBudWxsLCBpZGVudGlmaWVyOiBudWxsLCBhbHBoYTogMSB9KSB9LFxuICAgICAgc2V0T3ZlcmxheU9wdGlvbnM6IG9wdHMgPT4geyBvcGVyYXRpb24gJiYgb3BlcmF0aW9uLnNldChvcHRzKSB9LFxuICAgICAgc2V0QWxwaGE6IHZhbHVlID0+IHsgb3BlcmF0aW9uICYmIG9wZXJhdGlvbi5zZXRBbHBoYSh2YWx1ZSkgfSxcbiAgICAgIHNldEJsZW5kTW9kZTogdmFsdWUgPT4geyBvcGVyYXRpb24gJiYgb3BlcmF0aW9uLnNldEJsZW5kTW9kZSh2YWx1ZSkgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgb3ZlcmxheSBpbWFnZSBhbmQgb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3ZlcmxheVxuICAgKi9cbiAgbG9hZE92ZXJsYXkgKG92ZXJsYXkpIHtcbiAgICBjb25zdCBpbWFnZVBhdGggPSB0aGlzLl9nZXRBc3NldFBhdGgob3ZlcmxheS5pbWFnZSlcbiAgICBjb25zdCBibGVuZE1vZGUgPSBCbGVuZE1vZGVzW292ZXJsYXkuYmxlbmRNb2RlXVxuXG4gICAgbGV0IGxvYWRpbmdNb2RhbFxuICAgIGxldCBsb2FkVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbG9hZGluZ01vZGFsID0gTW9kYWxNYW5hZ2VyLmluc3RhbmNlLmRpc3BsYXlMb2FkaW5nKHRoaXMuX3QoJ3Blc2RrLmNvbW1vbi50ZXh0LmxvYWRpbmcnKSlcbiAgICB9LCAxMDApXG5cbiAgICByZXR1cm4gSW1hZ2VMb2FkZXIubG9hZChpbWFnZVBhdGgpXG4gICAgICAudGhlbihpbWFnZSA9PiB7XG4gICAgICAgIGlmIChsb2FkaW5nTW9kYWwpIGxvYWRpbmdNb2RhbC5jbG9zZSgpXG4gICAgICAgIGlmIChsb2FkVGltZW91dCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChsb2FkVGltZW91dClcbiAgICAgICAgICBsb2FkVGltZW91dCA9IG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWRlbnRpZmllcjogb3ZlcmxheS5pZGVudGlmaWVyLFxuICAgICAgICAgIGltYWdlLFxuICAgICAgICAgIGJsZW5kTW9kZSxcbiAgICAgICAgICBhbHBoYTogdHlwZW9mIG92ZXJsYXkuaW50ZW5zaXR5ID09PSAndW5kZWZpbmVkJyA/IDEgOiBvdmVybGF5LmludGVuc2l0eVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGNvbnRyb2wgaXMgZW5hYmxlZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRW5hYmxlZCAoZWRpdG9yKSB7XG4gICAgcmV0dXJuIGVkaXRvci5pc1Rvb2xBbGxvd2VkKCdvdmVybGF5JykgJiYgZWRpdG9yLmlzVG9vbEVuYWJsZWQoJ292ZXJsYXknKVxuICB9XG59XG5cbkRlc2t0b3BVSS5Db250cm9scy5PdmVybGF5Q29udHJvbHMgPSBPdmVybGF5Q29udHJvbHNcblxuZXhwb3J0IGRlZmF1bHQgT3ZlcmxheUNvbnRyb2xzXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9vdmVybGF5L2luZGV4LmpzIiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQge1xuICBSZWFjdCwgYWRvbmlzLCBDb25zdGFudHMsIENvbnRyb2xzQ29tcG9uZW50LFxuICBPdmVybGF5TWFuYWdlciwgU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQsIE1vZGFsTWFuYWdlciwgQ29udHJvbHNTdHlsZXNcbn0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IEltYWdlTG9hZGVyIGZyb20gJ3NoYXJlZC9sb2FkZXJzL2ltYWdlLWxvYWRlcidcbmltcG9ydCBQcm9taXNlUXVldWUgZnJvbSAnc2hhcmVkL2FzeW5jL3Byb21pc2UtcXVldWUnXG5pbXBvcnQgT3ZlcmxheUxpc3RJdGVtQ29tcG9uZW50IGZyb20gJy4vb3ZlcmxheS1saXN0LWl0ZW0tY29tcG9uZW50J1xuaW1wb3J0IEJsZW5kTW9kZXMgZnJvbSAnLi9ibGVuZC1tb2RlcydcbmNvbnN0IHsgUGxhaW5Db250cm9sSXRlbSwgUGxhaW5Db250cm9sSXRlbUJhY2tncm91bmQsIENvbnRyb2xJdGVtVGl0bGUgfSA9IENvbnRyb2xzU3R5bGVzXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPdmVybGF5Q29udHJvbHNDb21wb25lbnQgZXh0ZW5kcyBDb250cm9sc0NvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBDb250cm9sc0NvbXBvbmVudC5jb250ZXh0VHlwZXNcbiAgc3RhdGljIHByb3BUeXBlcyA9IENvbnRyb2xzQ29tcG9uZW50LnByb3BUeXBlc1xuICBzdGF0aWMgUm9vdEVsZW1lbnQgPSBDb250cm9sc0NvbXBvbmVudC5Sb290RWxlbWVudFxuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIGNvbnN0IHsgdWksIHRoZW1lIH0gPSB0aGlzLmNvbnRleHRcblxuICAgIHRoaXMuX3RodW1ibmFpbExvYWRRdWV1ZSA9IG5ldyBQcm9taXNlUXVldWUoMSwgSW5maW5pdHksIHRoZW1lLmxpc3RJdGVtU2xpZGVJbkRlbGF5KVxuICAgIHRoaXMuX3RodW1ibmFpbHNMb2FkZWQgPSB7fVxuICAgIHRoaXMuX292ZXJsYXlNYW5hZ2VyID0gbmV3IE92ZXJsYXlNYW5hZ2VyKHVpLCB0aGlzLnByb3BzLm9wdGlvbnMpXG5cbiAgICB0aGlzLnN0YXRlID0ge31cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGltbWVkaWF0ZWx5IGFmdGVyIGEgY29tcG9uZW50IGlzIG1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnREaWRNb3VudCgpXG4gICAgdGhpcy5fbG9hZFRodW1ibmFpbHMoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnRXaWxsVW5tb3VudCgpXG4gICAgdGhpcy5fdGh1bWJuYWlsTG9hZFF1ZXVlLmRpc3Bvc2UoKVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIGFsbCB0aGUgb3ZlcmxheSB0aHVtYm5haWxzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbG9hZFRodW1ibmFpbHMgKCkge1xuICAgIGNvbnN0IG92ZXJsYXlzID0gdGhpcy5fb3ZlcmxheU1hbmFnZXIuZ2V0T3ZlcmxheXMoKVxuICAgIG92ZXJsYXlzLmZvckVhY2gob3ZlcmxheSA9PiB7XG4gICAgICB0aGlzLl90aHVtYm5haWxMb2FkUXVldWUuYWRkKCgpID0+XG4gICAgICAgIEltYWdlTG9hZGVyLmxvYWQoXG4gICAgICAgICAgdGhpcy5fZ2V0QXNzZXRQYXRoKG92ZXJsYXkudGh1bWJuYWlsKVxuICAgICAgICApLnRoZW4oaW1hZ2UgPT4ge1xuICAgICAgICAgIHRoaXMuX3RodW1ibmFpbHNMb2FkZWRbb3ZlcmxheS5pZGVudGlmaWVyXSA9IGltYWdlXG4gICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgYmxlbmQgbW9kZSBpcyBjaGFuZ2VkLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAbWVtYmVyb2YgT3ZlcmxheUNvbnRyb2xzQ29tcG9uZW50XG4gICAqL1xuICBfb25CbGVuZE1vZGVDaGFuZ2UgKCkge1xuICAgIHRoaXMucHJvcHMuY29udHJvbHMuYWRkTG9jYWxIaXN0b3J5U25hcHNob3QoJ292ZXJsYXktYmxlbmQtbW9kZScsIGZhbHNlKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBhbHBoYSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAbWVtYmVyb2YgT3ZlcmxheUNvbnRyb2xzQ29tcG9uZW50XG4gICAqL1xuICBfb25BbHBoYUNoYW5nZSAoKSB7XG4gICAgdGhpcy5wcm9wcy5jb250cm9scy5hZGRMb2NhbEhpc3RvcnlTbmFwc2hvdCgnb3ZlcmxheS1hbHBoYScsIHRydWUpXG4gIH1cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gYSBmaWx0ZXIgaXRlbSBpcyBjbGlja2VkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvdmVybGF5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25JdGVtQ2xpY2sgKG92ZXJsYXkpIHtcbiAgICBpZiAoIW92ZXJsYXkpIHtcbiAgICAgIHRoaXMuc2hhcmVkU3RhdGUucmVtb3ZlT3ZlcmxheSgpXG4gICAgICByZXR1cm4gdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgfVxuXG4gICAgaWYgKG92ZXJsYXkuaWRlbnRpZmllciA9PT0gdGhpcy5zaGFyZWRTdGF0ZS5pZGVudGlmaWVyKSByZXR1cm5cblxuICAgIHRoaXMucHJvcHMuY29udHJvbHMubG9hZE92ZXJsYXkob3ZlcmxheSlcbiAgICAgIC50aGVuKG9wdGlvbnMgPT4ge1xuICAgICAgICB0aGlzLnNoYXJlZFN0YXRlLnNldE92ZXJsYXlPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIHRoaXMucHJvcHMuY29udHJvbHMuYWRkTG9jYWxIaXN0b3J5U25hcHNob3QoJ292ZXJsYXktaW1hZ2UnLCBmYWxzZSlcbiAgICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgbGlzdCBpdGVtc1xuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyTGlzdEl0ZW1zICgpIHtcbiAgICBjb25zdCBpZGVudGlmaWVyID0gdGhpcy5zaGFyZWRTdGF0ZS5pZGVudGlmaWVyXG4gICAgY29uc3Qgb3ZlcmxheXMgPSB0aGlzLl9vdmVybGF5TWFuYWdlci5nZXRPdmVybGF5cygpXG5cbiAgICByZXR1cm4gb3ZlcmxheXMubWFwKG92ZXJsYXkgPT4ge1xuICAgICAgcmV0dXJuICg8T3ZlcmxheUxpc3RJdGVtQ29tcG9uZW50XG4gICAgICAgIGtleT17b3ZlcmxheS5pZGVudGlmaWVyfVxuICAgICAgICBvdmVybGF5PXtvdmVybGF5fVxuICAgICAgICBzZWxlY3RlZD17b3ZlcmxheS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyfVxuICAgICAgICB2aXNpYmxlPXshIXRoaXMuX3RodW1ibmFpbHNMb2FkZWRbb3ZlcmxheS5pZGVudGlmaWVyXX1cbiAgICAgICAgb25DbGljaz17dGhpcy5fb25JdGVtQ2xpY2suYmluZCh0aGlzLCBvdmVybGF5KX1cbiAgICAgICAgb25CbGVuZE1vZGVDaGFuZ2U9e3RoaXMuX29uQmxlbmRNb2RlQ2hhbmdlLmJpbmQodGhpcyl9XG4gICAgICAgIG9uQWxwaGFDaGFuZ2U9e3RoaXMuX29uQWxwaGFDaGFuZ2UuYmluZCh0aGlzKX1cbiAgICAgIC8+KVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcHJvcGVydGllcyBmb3IgdGhlIHJvb3QgZWxlbWVudFxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0Um9vdFByb3BzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xhc3NOYW1lOiAodGVzdCA/ICdqcy1vdmVybGF5Q29udHJvbHMnIDogdW5kZWZpbmVkKSxcbiAgICAgIHdpdGhCb3JkZXJUb3A6IHRydWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbnRyb2wncyBjb250ZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICBfcmVuZGVyQ29udGVudCAoKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnb3BlcmF0aW9uJylcbiAgICBjb25zdCBub25lSXRlbUFjdGl2ZSA9ICFvcGVyYXRpb24uZ2V0SWRlbnRpZmllcigpXG5cbiAgICByZXR1cm4gKDxTY3JvbGxhYmxlTGlzdENvbXBvbmVudFxuICAgICAgZGlyZWN0aW9uPSd2ZXJ0aWNhbCdcbiAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX3Njcm9sbGJhciA9IGVsIH19PlxuICAgICAgPExpc3Q+XG4gICAgICAgIDxOb25lSXRlbSBvbkNsaWNrPXt0aGlzLl9vbkl0ZW1DbGljay5iaW5kKHRoaXMsIG51bGwpfT5cbiAgICAgICAgICA8Tm9uZUl0ZW1CYWNrZ3JvdW5kIHNlbGVjdGVkPXtub25lSXRlbUFjdGl2ZX0+XG4gICAgICAgICAgICA8SXRlbVRpdGxlPnt0aGlzLl90KCdwZXNkay5vdmVybGF5LmJ1dHRvbi5ub25lJyl9PC9JdGVtVGl0bGU+XG4gICAgICAgICAgPC9Ob25lSXRlbUJhY2tncm91bmQ+XG4gICAgICAgIDwvTm9uZUl0ZW0+XG4gICAgICAgIHt0aGlzLl9yZW5kZXJMaXN0SXRlbXMoKX1cbiAgICAgIDwvTGlzdD5cbiAgICA8L1Njcm9sbGFibGVMaXN0Q29tcG9uZW50PilcbiAgfVxufVxuXG5jb25zdCBMaXN0ID0gYWRvbmlzLnVsKHtcbiAgbGlzdFN0eWxlOiAnbm9uZScsXG4gIG1hcmdpbjogJzAnLFxuICBwYWRkaW5nOiAnMjVweCdcbn0pXG5cbmNvbnN0IE5vbmVJdGVtID0gYWRvbmlzKFBsYWluQ29udHJvbEl0ZW0pLmRpdih7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzk2cHgnLFxuICBkaXNwbGF5OiAndGFibGUnXG59KVxuXG5jb25zdCBOb25lSXRlbUJhY2tncm91bmQgPSBhZG9uaXMoUGxhaW5Db250cm9sSXRlbUJhY2tncm91bmQpLmRpdih7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzk2cHgnLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xufSlcblxuY29uc3QgSXRlbVRpdGxlID0gYWRvbmlzKENvbnRyb2xJdGVtVGl0bGUpLnNwYW4oe1xuICBwb3NpdGlvbjogJ3N0YXRpYydcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9vdmVybGF5L292ZXJsYXktY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgU2xpZGVyQ29tcG9uZW50LCBTaGFyZWRTdGF0ZUNvbXBvbmVudCwgQ29udHJvbHNTdHlsZXMsIFRyYW5zaXRpb24sIENvbnN0YW50cyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmltcG9ydCBPdmVybGF5QmxlbmRpbmdDb250cm9sQ29tcG9uZW50IGZyb20gJy4vb3ZlcmxheS1ibGVuZGluZy1jb250cm9sLWNvbXBvbmVudCdcblxuY29uc3QgeyBDb250cm9sSXRlbSwgQ29udHJvbEl0ZW1BY3RpdmVPdmVybGF5LCBDb250cm9sSXRlbVRpdGxlIH0gPSBDb250cm9sc1N0eWxlc1xuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE92ZXJsYXlMaXN0SXRlbUNvbXBvbmVudCBleHRlbmRzIFNoYXJlZFN0YXRlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IFNoYXJlZFN0YXRlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaG92ZXJlZDogZmFsc2VcbiAgICB9XG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vbkJsZW5kTW9kZUNoYW5nZScsXG4gICAgICAnX29uQWxwaGFDaGFuZ2UnXG4gICAgKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgX29uQmxlbmRNb2RlQ2hhbmdlIChuZXdCbGVuZE1vZGUpIHtcbiAgICB0aGlzLnByb3BzLm9uQmVmb3JlQmxlbmRNb2RlQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQmVmb3JlQmxlbmRNb2RlQ2hhbmdlKClcblxuICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0QmxlbmRNb2RlKG5ld0JsZW5kTW9kZSlcblxuICAgIHRoaXMucHJvcHMub25CbGVuZE1vZGVDaGFuZ2UgJiZcbiAgICAgIHRoaXMucHJvcHMub25CbGVuZE1vZGVDaGFuZ2UoKVxuICB9XG5cbiAgX29uQWxwaGFDaGFuZ2UgKGFscGhhKSB7XG4gICAgdGhpcy5wcm9wcy5vbkJlZm9yZUFscGhhQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQmVmb3JlQWxwaGFDaGFuZ2UoKVxuXG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXRBbHBoYShhbHBoYSlcblxuICAgIHRoaXMucHJvcHMub25BbHBoYUNoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkFscGhhQ2hhbmdlKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSByZW5kZXJpbmcgd2hlbiBuZXcgcHJvcHMgb3Igc3RhdGUgYXJlIGJlaW5nIHJlY2VpdmVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkICE9PSBuZXh0UHJvcHMuc2VsZWN0ZWQgfHxcbiAgICAgICAgdGhpcy5wcm9wcy52aXNpYmxlICE9PSBuZXh0UHJvcHMudmlzaWJsZSB8fFxuICAgICAgICB0aGlzLnN0YXRlLmhvdmVyZWQgIT09IG5leHRTdGF0ZS5ob3ZlcmVkIHx8XG4gICAgICAgIHRoaXMucHJvcHMub3ZlcmxheSAhPT0gbmV4dFByb3BzLm92ZXJsYXkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuaW50ZW5zaXR5ICE9PSBuZXh0UHJvcHMuaW50ZW5zaXR5KSB7XG4gICAgICBpZiAobmV4dFByb3BzLnNlbGVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGxhc3RDaGlsZCwgb25DbGljaywgc2VsZWN0ZWQsIHZpc2libGUsIG92ZXJsYXkgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBhbHBoYSA9IHRoaXMuc2hhcmVkU3RhdGUuYWxwaGFcbiAgICBjb25zdCBibGVuZE1vZGUgPSB0aGlzLnNoYXJlZFN0YXRlLmJsZW5kTW9kZVxuXG4gICAgY29uc3QgaXRlbVByb3BzID0geyBsYXN0Q2hpbGQsIG9uQ2xpY2ssIHZpc2libGUgfVxuICAgIGl0ZW1Qcm9wcy5zdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgnJHt0aGlzLl9nZXRBc3NldFBhdGgob3ZlcmxheS50aHVtYm5haWwpfScpYFxuICAgIH1cbiAgICByZXR1cm4gKDxJdGVtXG4gICAgICB7Li4uaXRlbVByb3BzfVxuICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1vdmVybGF5JyA6IHVuZGVmaW5lZCl9XG4gICAgICBhbmltYXRlZFxuICAgICAgaW5uZXJSZWY9eyhlbCkgPT4geyB0aGlzLl9jb250YWluZXIgPSBlbCB9fVxuICAgICAgb25Nb3VzZUVudGVyPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KX1cbiAgICAgIG9uTW91c2VMZWF2ZT17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pfT5cbiAgICAgIDxJdGVtQ29udGFpbmVyXG4gICAgICAgIHNlbGVjdGVkPXtzZWxlY3RlZH0+XG4gICAgICAgIDxUcmFuc2l0aW9uIGFjdGl2ZT17IXNlbGVjdGVkfT5cbiAgICAgICAgICA8SXRlbUNvbnRlbnQ+XG4gICAgICAgICAgICA8SXRlbVRpdGxlIGhvdmVyZWQ9e3RoaXMuc3RhdGUuaG92ZXJlZH0+XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90KGBwZXNkay5vdmVybGF5LmFzc2V0LiR7b3ZlcmxheS5pZGVudGlmaWVyfWApIHx8XG4gICAgICAgICAgICAgICAgb3ZlcmxheS5kZWZhdWx0TmFtZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L0l0ZW1UaXRsZT5cbiAgICAgICAgICA8L0l0ZW1Db250ZW50PlxuICAgICAgICA8L1RyYW5zaXRpb24+XG4gICAgICAgIDxUcmFuc2l0aW9uIGFjdGl2ZT17c2VsZWN0ZWR9PlxuICAgICAgICAgIDxJdGVtQ29udGVudD5cbiAgICAgICAgICAgIDxCbGVuZGluZ0xhYmVsPnt0aGlzLl90KCdwZXNkay5vdmVybGF5LnRpdGxlLmJsZW5kaW5nJyl9PC9CbGVuZGluZ0xhYmVsPlxuICAgICAgICAgICAgPEJsZW5kaW5nQ29udHJvbFxuICAgICAgICAgICAgICB2YWx1ZT17YmxlbmRNb2RlfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5fb25CbGVuZE1vZGVDaGFuZ2V9IC8+XG4gICAgICAgICAgICB7c2VsZWN0ZWQgJiYgPFNsaWRlcj5cbiAgICAgICAgICAgICAgPFNsaWRlckNvbXBvbmVudFxuICAgICAgICAgICAgICAgIG1pblZhbHVlPXswfVxuICAgICAgICAgICAgICAgIG1heFZhbHVlPXsxfVxuICAgICAgICAgICAgICAgIHZhbHVlVW5pdD0nJ1xuICAgICAgICAgICAgICAgIG1pZGRsZURvdD17ZmFsc2V9XG4gICAgICAgICAgICAgICAgdmFsdWU9e2FscGhhfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLl9vbkFscGhhQ2hhbmdlfSAvPlxuICAgICAgICAgICAgPC9TbGlkZXI+fVxuICAgICAgICAgICAgPE92ZXJsYXkgcmVuZGVyZWQgdmlzaWJsZSAvPlxuICAgICAgICAgIDwvSXRlbUNvbnRlbnQ+XG4gICAgICAgIDwvVHJhbnNpdGlvbj5cbiAgICAgIDwvSXRlbUNvbnRhaW5lcj5cbiAgICA8L0l0ZW0+KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhpcyBjb21wb25lbnQncyBjb250YWluZXJcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIGdldCBjb250YWluZXIgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250YWluZXJcbiAgfVxufVxuXG5jb25zdCBJdGVtID0gYWRvbmlzKENvbnRyb2xJdGVtKS5kaXYoe1xuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS5maWx0ZXJJdGVtQmFja2dyb3VuZENvbG9yLFxuICBiYWNrZ3JvdW5kU2l6ZTogJ2NvdmVyJyxcbiAgaGVpZ2h0OiAnOTZweCdcbn0sIHtcbiAgbGFzdENoaWxkOiB7XG4gICAgbWFyZ2luQm90dG9tOiAwXG4gIH1cbn0pXG5cbmNvbnN0IFNsaWRlciA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ2NvbnRyb2xzJyksXG4gIGhlaWdodDogJzE1cHgnLFxuICBib3R0b206ICcxNnB4JyxcbiAgbGVmdDogJzI1cHgnLFxuICByaWdodDogJzI1cHgnXG59KVxuXG5jb25zdCBJdGVtQ29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIGhlaWdodDogJzEwMCUnLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcblxuICAnOmJlZm9yZSc6IHtcbiAgICBjb250ZW50OiAnXCJcIicsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgaGVpZ2h0OiAnMzBweCcsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ2NvbnRyb2xzJyksXG4gICAgb3BhY2l0eTogMC45LFxuICAgIGJhY2tncm91bmRJbWFnZTogJ2xpbmVhci1ncmFkaWVudCgtMTgwZGVnLCByZ2JhKDAsIDAsIDAsIDAuMDApIDAlLCByZ2JhKDAsIDAsIDAsIDAuMDApIDU0JSwgcmdiYSgwLCAwLCAwLCAwLjQ1KSAxMDAlKSdcbiAgfVxufSlcblxuY29uc3QgSXRlbVRpdGxlID0gYWRvbmlzKENvbnRyb2xJdGVtVGl0bGUpLnNwYW4oe30pXG5cbmNvbnN0IEJsZW5kaW5nTGFiZWwgPSBhZG9uaXMoSXRlbVRpdGxlKSh7XG4gIG9wYWNpdHk6IDAuNDUsXG4gIHRvcDogJzE3cHgnLFxuICBib3R0b206ICdhdXRvJyxcbiAgdGV4dFNoYWRvdzogJ25vbmUnXG59KVxuXG5jb25zdCBJdGVtQ29udGVudCA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgZGlzcGxheTogJ25vbmUnLFxuICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2Utb3V0YFxufSwge1xuICByZW5kZXJlZDoge1xuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgb3BhY2l0eTogMFxuICB9LFxuICB2aXNpYmxlOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zaXRpb246IHRoZW1lID0+IGBvcGFjaXR5ICR7dGhlbWUudHJhbnNpdGlvbkR1cmF0aW9ufXMgZWFzZS1pbmBcbiAgfVxufSlcblxuY29uc3QgT3ZlcmxheSA9IGFkb25pcyhDb250cm9sSXRlbUFjdGl2ZU92ZXJsYXkpLmRpdih7fSlcbmNvbnN0IEJsZW5kaW5nQ29udHJvbCA9IGFkb25pcyhPdmVybGF5QmxlbmRpbmdDb250cm9sQ29tcG9uZW50KSh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICczNHB4JyxcbiAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ2NvbnRyb2xzJylcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9vdmVybGF5L292ZXJsYXktbGlzdC1pdGVtLWNvbXBvbmVudC5qc3giLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IFV0aWxzIGFzIFNES1V0aWxzIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCBDb250cm9sc1N0eWxlcyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmltcG9ydCBCbGVuZE1vZGVzIGZyb20gJy4vYmxlbmQtbW9kZXMnXG5cbmNvbnN0IHsgQ29udHJvbEl0ZW1UaXRsZSB9ID0gQ29udHJvbHNTdHlsZXNcbmNvbnN0IEJsZW5kTW9kZUJ5SWQgPSBTREtVdGlscy5mbGlwT2JqZWN0KEJsZW5kTW9kZXMpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE92ZXJsYXlCbGVuZGluZ0NvbnRyb2xDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fYmluZEFsbChcbiAgICAgICdfb25QcmV2aW91c0NsaWNrJyxcbiAgICAgICdfb25OZXh0Q2xpY2snXG4gICAgKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGxlZnQgYXJyb3dcbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uUHJldmlvdXNDbGljayAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGNvbnN0IGJsZW5kTW9kZXMgPSBPYmplY3Qua2V5cyhCbGVuZE1vZGVCeUlkKVxuICAgIGNvbnN0IGluZGV4ID0gYmxlbmRNb2Rlcy5pbmRleE9mKHRoaXMucHJvcHMudmFsdWUudG9TdHJpbmcoKSlcbiAgICBjb25zdCBuZXdJbmRleCA9IChpbmRleCArIGJsZW5kTW9kZXMubGVuZ3RoIC0gMSkgJSBibGVuZE1vZGVzLmxlbmd0aFxuICAgIGNvbnN0IG5ld0JsZW5kTW9kZSA9IHBhcnNlSW50KGJsZW5kTW9kZXNbbmV3SW5kZXhdLCAxMClcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKG5ld0JsZW5kTW9kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSByaWdodCBhcnJvd1xuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25OZXh0Q2xpY2sgKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBjb25zdCBibGVuZE1vZGVzID0gT2JqZWN0LmtleXMoQmxlbmRNb2RlQnlJZClcbiAgICBjb25zdCBpbmRleCA9IGJsZW5kTW9kZXMuaW5kZXhPZih0aGlzLnByb3BzLnZhbHVlLnRvU3RyaW5nKCkpXG4gICAgY29uc3QgbmV3SW5kZXggPSAoaW5kZXggKyBibGVuZE1vZGVzLmxlbmd0aCArIDEpICUgYmxlbmRNb2Rlcy5sZW5ndGhcbiAgICBjb25zdCBuZXdCbGVuZE1vZGUgPSBwYXJzZUludChibGVuZE1vZGVzW25ld0luZGV4XSwgMTApXG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShuZXdCbGVuZE1vZGUpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBsZWZ0QXJyb3dTdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgnJHt0aGlzLl9nZXRBc3NldFBhdGgoJ2VkaXRvci9jb250cm9scy9vdmVybGF5L2Fycm93LWxlZnQucG5nJywgdHJ1ZSl9JylgXG4gICAgfVxuICAgIGNvbnN0IHJpZ2h0QXJyb3dTdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgnJHt0aGlzLl9nZXRBc3NldFBhdGgoJ2VkaXRvci9jb250cm9scy9vdmVybGF5L2Fycm93LXJpZ2h0LnBuZycsIHRydWUpfScpYFxuICAgIH1cblxuICAgIGNvbnN0IGJsZW5kTW9kZSA9IHRoaXMucHJvcHMudmFsdWVcbiAgICByZXR1cm4gKDxCbGVuZGluZ0NvbnRyb2xDb250YWluZXIgc3R5bGVzPXt0aGlzLnByb3BzLnN0eWxlc30+XG4gICAgICA8QXJyb3cgb25DbGljaz17dGhpcy5fb25QcmV2aW91c0NsaWNrfSBzdHlsZT17bGVmdEFycm93U3R5bGV9IC8+XG4gICAgICA8TGFiZWw+e3RoaXMuX3QoYHBlc2RrLm92ZXJsYXkudGl0bGUuJHtCbGVuZE1vZGVCeUlkW2JsZW5kTW9kZV19YCl9PC9MYWJlbD5cbiAgICAgIDxBcnJvdyBvbkNsaWNrPXt0aGlzLl9vbk5leHRDbGlja30gc3R5bGU9e3JpZ2h0QXJyb3dTdHlsZX0gLz5cbiAgICA8L0JsZW5kaW5nQ29udHJvbENvbnRhaW5lcj4pXG4gIH1cbn1cblxuY29uc3QgQmxlbmRpbmdDb250cm9sQ29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZScsXG4gIHRhYmxlTGF5b3V0OiAnZml4ZWQnLFxuICB3aWR0aDogJzEwMCUnLFxuICBwYWRkaW5nOiAnMCAxNXB4J1xufSlcbk92ZXJsYXlCbGVuZGluZ0NvbnRyb2xDb21wb25lbnQuUm9vdEVsZW1lbnQgPSBCbGVuZGluZ0NvbnRyb2xDb250YWluZXJcblxuY29uc3QgTGFiZWwgPSBhZG9uaXMoQ29udHJvbEl0ZW1UaXRsZSkuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICB0ZXh0U2hhZG93OiAnbm9uZScsXG4gIHBvc2l0aW9uOiAnc3RhdGljJyxcbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbn0pXG5cbmNvbnN0IEFycm93ID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgd2lkdGg6ICcyNHB4JyxcbiAgaGVpZ2h0OiAnMjRweCcsXG4gIGJhY2tncm91bmRTaXplOiAnY29udGFpbicsXG4gIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlciBjZW50ZXInLFxuICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgb3BhY2l0eTogMC44LFxuICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2Utb3V0YCxcbiAgJyY6aG92ZXInOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2UtaW5gXG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9vdmVybGF5L292ZXJsYXktYmxlbmRpbmctY29udHJvbC1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBNYXRoIGFzIFBNYXRoLCBVdGlscyBhcyBTREtVdGlscywgT3BlcmF0aW9ucyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuaW1wb3J0IERlc2t0b3BVSSwgeyBCYXNlQ29udHJvbHMsIE1vZGFsTWFuYWdlciwgU3RpY2tlck1hbmFnZXIsIENvbnN0YW50cyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmltcG9ydCBTdGlja2VyQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi9zdGlja2VyLWNvbnRyb2xzLWNvbXBvbmVudCdcbmltcG9ydCBTdGlja2VyQ2FudmFzQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi9zdGlja2VyLWNhbnZhcy1jb250cm9scy1jb21wb25lbnQnXG5cbmNvbnN0IHsgVmVjdG9yMiB9ID0gUE1hdGhcblxubGV0IFN0aWNrZXJTcHJpdGVcbmlmIChPcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbikge1xuICBTdGlja2VyU3ByaXRlID0gT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uU3RpY2tlclNwcml0ZVxufVxuXG4vKipcbiAqIFRoZSBDb250cm9scyBmb3IgdGhlIFN0aWNrZXIgdG9vbC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuQ29udHJvbHNcbiAqIEBleHRlbmRzIFBob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5CYXNlQ29udHJvbHNcbiAqL1xuY2xhc3MgU3RpY2tlckNvbnRyb2xzIGV4dGVuZHMgQmFzZUNvbnRyb2xzIHtcbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuICAgIHRoaXMuX3VwZGF0ZVN0aWNrZXJDYXRlZ29yaWVzID0gdGhpcy5fdXBkYXRlU3RpY2tlckNhdGVnb3JpZXMuYmluZCh0aGlzKVxuICB9XG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGlkZW50aWZpZXIgPSAnc3RpY2tlcidcblxuICAvKipcbiAgICogVGhlIGNvbnRyb2xzIGNvbXBvbmVudCBmb3IgdGhlc2UgY29udHJvbHNcbiAgICogQHR5cGUge1JlYWN0LkNvbXBvbmVudH1cbiAgICovXG4gIHN0YXRpYyBjb250cm9sc0NvbXBvbmVudCA9IFN0aWNrZXJDb250cm9sc0NvbXBvbmVudFxuXG4gIC8qKlxuICAgKiBUaGUgY2FudmFzIGNvbXBvbmVudCBmb3IgdGhlc2UgY29udHJvbHNcbiAgICogQHR5cGUge1JlYWN0LkNvbXBvbmVudH1cbiAgICovXG4gIHN0YXRpYyBjYW52YXNDb250cm9sc0NvbXBvbmVudCA9IFN0aWNrZXJDYW52YXNDb250cm9sc0NvbXBvbmVudFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiBwYXRoIG9mIHRoaXMgY29udHJvbFxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGljb25QYXRoID0gJ2VkaXRvci9jb250cm9scy9zdGlja2VyL2ljb24ucG5nJ1xuXG4gIC8qKlxuICAgKiBUaGUgYWN0aXZlIGljb24gcGF0aCBvZiB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBhY3RpdmVJY29uUGF0aCA9ICdlZGl0b3IvY29udHJvbHMvc3RpY2tlci9pY29uLWFjdGl2ZS5wbmcnXG5cbiAgLyoqXG4gICAqIFRoZSBvcGVyYXRpb25zIHJlcXVpcmVkIGZvciB0aGlzIGNvbnRyb2wgdG8gd29yayBwcm9wZXJseVxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgcmVxdWlyZWRPcGVyYXRpb25zID0gWydzcHJpdGUnXVxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBvcHRpb25zIGZvciB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByb3BlcnR5IHtPYmplY3RbXX0gW2NhdGVnb3JpZXMgPSBbXV1cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBbcmVwbGFjZUNhdGVnb3JpZXMgPSBmYWxzZV1cbiAgICogQHByb3BlcnR5IHtTdHJpbmdbXX0gW2F2YWlsYWJsZVN0aWNrZXJzID0gbnVsbF1cbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBjYXRlZ29yaWVzOiBbXSxcbiAgICByZXBsYWNlQ2F0ZWdvcmllczogZmFsc2UsXG4gICAgYXZhaWxhYmxlU3RpY2tlcnM6IG51bGwsXG4gICAgc25hcFJvdGF0aW9uOiA5MCxcbiAgICBzbmFwUm90YXRpb25Ub2xlcmFuY2U6IDVcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVyYXRpb25zIHdoaWNoIHdpbGwgdHJpZ2dlciBVSSB1cGRhdGVzIG9uIHRoaXMgY29udHJvbHMuXG4gICAqIEB0eXBlIHtTdHJpbmdbXX1cbiAgICogQHN0YXRpY1xuICAgKi9cbiAgc3RhdGljIHVwZGF0YWJsZU9wZXJhdGlvbnMgPSBbJ3Nwcml0ZSddXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBlZGl0b3Igd2lsbCBzd2l0Y2ggdG8gdGhlIGRlZmF1bHQgY29udHJvbHMgd2hlbiBhbnkgb2YgdGhlIHVwZGF0YWJsZU9wZXJhdGlvbnMgaXMgcmVtb3ZlZC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHN0YXRpYyBzd2l0Y2hUb0RlZmF1bHRDb250cm9sc09uUmVtb3ZhbCA9IHRydWVcblxuICAvKipcbiAgICogTWFwcyB0aGUgb3BlcmF0aW9ucyBzdGF0ZSB0byBhIHNoYXJlZCBzdGF0ZSBvYmplY3RcbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3BlcmF0aW9uc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpbml0aWFsPWZhbHNlXVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIG1hcE9wZXJhdGlvbnNUb1NoYXJlZFN0YXRlIChvcGVyYXRpb25zLCBpbml0aWFsID0gZmFsc2UsIHByZXZpb3VzU3RhdGUgPSB7fSkge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IG9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ3Nwcml0ZScpXG4gICAgY29uc3QgaW5wdXREaW1lbnNpb25zID0gb3BlcmF0aW9uLmdldElucHV0RGltZW5zaW9ucyhmYWxzZSlcbiAgICBsZXQgeyBzZWxlY3RlZFNwcml0ZSwgc3RpY2tlck1hbmFnZXIgfSA9IHByZXZpb3VzU3RhdGVcblxuICAgIGlmIChzZWxlY3RlZFNwcml0ZSAmJiBvcGVyYXRpb24uZ2V0U3ByaXRlcygpLmluZGV4T2Yoc2VsZWN0ZWRTcHJpdGUpIDwgMCkge1xuICAgICAgY29uc3QgbmV3U3ByaXRlID0gb3BlcmF0aW9uLmdldFNwcml0ZXMoKS5maWx0ZXIoc3ByaXRlID0+IHNwcml0ZS5nZXRJZCgpID09PSBzZWxlY3RlZFNwcml0ZS5nZXRJZCgpKVswXVxuICAgICAgaWYgKG5ld1Nwcml0ZSkge1xuICAgICAgICBzZWxlY3RlZFNwcml0ZSA9IG5ld1Nwcml0ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBvcGVyYXRpb24sXG4gICAgICBpbnB1dERpbWVuc2lvbnMsXG4gICAgICBzdGlja2VyTWFuYWdlcixcbiAgICAgIHNlbGVjdGVkU3ByaXRlLFxuICAgICAgc3RpY2tlck9iamVjdDogKHNlbGVjdGVkU3ByaXRlICYmIHN0aWNrZXJNYW5hZ2VyKSA/IHN0aWNrZXJNYW5hZ2VyLmdldFN0aWNrZXJCeUlkZW50aWZpZXIoc2VsZWN0ZWRTcHJpdGUuZ2V0SWRlbnRpZmllcigpKSA6IG51bGwsXG4gICAgICBpbWFnZTogc2VsZWN0ZWRTcHJpdGUgPyBzZWxlY3RlZFNwcml0ZS5nZXRJbWFnZSgpIDogbnVsbCxcbiAgICAgIGFscGhhOiBzZWxlY3RlZFNwcml0ZSA/IHNlbGVjdGVkU3ByaXRlLmdldEFscGhhKCkgKiAxMDAgOiAwLFxuICAgICAgdGludE1vZGU6IHNlbGVjdGVkU3ByaXRlID8gc2VsZWN0ZWRTcHJpdGUuZ2V0VGludE1vZGUoKSA6ICcnLFxuICAgICAgdGludENvbG9yOiBzZWxlY3RlZFNwcml0ZSA/IHNlbGVjdGVkU3ByaXRlLmdldFRpbnRDb2xvcigpIDogbnVsbCxcblxuICAgICAgLy8gYWN0aW9uc1xuICAgICAgc2V0U3RpY2tlck9wdGlvbnM6IG9wdHMgPT4geyBzZWxlY3RlZFNwcml0ZSAmJiBzZWxlY3RlZFNwcml0ZS5zZXQob3B0cykgfSxcbiAgICAgIHNldFN0aWNrZXJJbWFnZTogaW1hZ2UgPT4geyBzZWxlY3RlZFNwcml0ZSAmJiBzZWxlY3RlZFNwcml0ZS5zZXRJbWFnZShpbWFnZSkgfSxcbiAgICAgIHNldEFscGhhOiB2YWx1ZSA9PiB7IHNlbGVjdGVkU3ByaXRlICYmIHNlbGVjdGVkU3ByaXRlLnNldEFscGhhKHZhbHVlIC8gMTAwKSB9LFxuICAgICAgc2V0VGludE1vZGU6IHZhbHVlID0+IHsgc2VsZWN0ZWRTcHJpdGUgJiYgc2VsZWN0ZWRTcHJpdGUuc2V0VGludE1vZGUodmFsdWUpIH0sXG4gICAgICBzZXRUaW50Q29sb3I6IHZhbHVlID0+IHsgc2VsZWN0ZWRTcHJpdGUgJiYgc2VsZWN0ZWRTcHJpdGUuc2V0VGludENvbG9yKHZhbHVlKSB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBzdGlja2VyIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBzdGlja2VyIGRhdGFcbiAgICogQHBhcmFtICB7T2JqZWN0fSBzdGlja2VyXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVTdGlja2VyIChzdGlja2VyKSB7XG4gICAgcmV0dXJuIHRoaXMubG9hZFN0aWNrZXJJbWFnZShzdGlja2VyKSAvLyB0aGlzLl9sb2FkU3RpY2tlckltYWdlKHN0aWNrZXIpXG4gICAgICAudGhlbihpbWFnZSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ3Nwcml0ZScpXG5cbiAgICAgICAgY29uc3QgaW5wdXREaW1lbnNpb25zID0gb3BlcmF0aW9uLmdldElucHV0RGltZW5zaW9ucyhmYWxzZSlcbiAgICAgICAgY29uc3QgaW1hZ2VEaW1lbnNpb25zID0gbmV3IFZlY3RvcjIoaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodClcbiAgICAgICAgY29uc3QgbWF4RGltZW5zaW9ucyA9IG5ldyBWZWN0b3IyKGlucHV0RGltZW5zaW9ucy5taW4oKSAqIDAuNSwgaW5wdXREaW1lbnNpb25zLm1pbigpICogMC41KVxuXG4gICAgICAgIGNvbnN0IHNwcml0ZSA9IG9wZXJhdGlvbi5jcmVhdGVTdGlja2VyKHtcbiAgICAgICAgICBpZGVudGlmaWVyOiBzdGlja2VyLmlkZW50aWZpZXIsXG4gICAgICAgICAgaW1hZ2UsXG4gICAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IyKDAuNSwgMC41KSxcbiAgICAgICAgICBkaW1lbnNpb25zOiBTREtVdGlscy5yZXNpemVWZWN0b3JUb0ZpdChpbWFnZURpbWVuc2lvbnMsIG1heERpbWVuc2lvbnMpLFxuICAgICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICAgIHNtb290aERvd25zY2FsaW5nOiB0aGlzLl9vcHRpb25zLnNtb290aERvd25zY2FsaW5nXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0KHtcbiAgICAgICAgICBzZWxlY3RlZFNwcml0ZTogc3ByaXRlXG4gICAgICAgIH0pXG4gICAgICAgIG9wZXJhdGlvbi5hZGRTcHJpdGUoc3ByaXRlKVxuXG4gICAgICAgIHRoaXMuYWRkTG9jYWxIaXN0b3J5U25hcHNob3QoJ3N0aWNrZXItY3JlYXRpb24nLCBmYWxzZSlcblxuICAgICAgICByZXR1cm4gc3ByaXRlXG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIGFuZCByZXR1cm5zIHRoZSBpbWFnZSBmb3IgdGhlIGdpdmVuIHN0aWNrZXJcbiAgICogQHBhcmFtICB7T2JqZWN0fSBzdGlja2VyXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBsb2FkU3RpY2tlckltYWdlIChzdGlja2VyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHsgbWVkaWFCYXNlIH0gPSBzdGlja2VyLmltYWdlc1xuICAgICAgY29uc3QgdXJsID0gU3RpY2tlck1hbmFnZXIuZ2V0VVJMRm9yU3RpY2tlcihzdGlja2VyLCAnYmFzZScpXG4gICAgICBjb25zdCByZXNvbHZlZFN0aWNrZXJQYXRoID0gdGhpcy5fZ2V0QXNzZXRQYXRoKHVybClcbiAgICAgIGNvbnN0IGltYWdlID0gbmV3IHdpbmRvdy5JbWFnZSgpXG5cbiAgICAgIGxldCBsb2FkaW5nTW9kYWxcbiAgICAgIGxldCBsb2FkVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsb2FkaW5nTW9kYWwgPSBNb2RhbE1hbmFnZXIuaW5zdGFuY2UuZGlzcGxheUxvYWRpbmcodGhpcy5fdCgncGVzZGsuY29tbW9uLnRleHQubG9hZGluZycpKVxuICAgICAgfSwgMTAwKVxuXG4gICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICBpZiAobG9hZGluZ01vZGFsKSBsb2FkaW5nTW9kYWwuY2xvc2UoKVxuICAgICAgICBpZiAobG9hZFRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQobG9hZFRpbWVvdXQpXG4gICAgICAgICAgbG9hZFRpbWVvdXQgPSBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIG1lZGlhQmFzZS53aWR0aCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIHR5cGVvZiBtZWRpYUJhc2UuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGltYWdlLndpZHRoID0gbWVkaWFCYXNlLndpZHRoXG4gICAgICAgICAgaW1hZ2UuaGVpZ2h0ID0gbWVkaWFCYXNlLmhlaWdodFxuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZShpbWFnZSlcbiAgICAgIH0pXG5cbiAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgICBpZiAobG9hZGluZ01vZGFsKSBsb2FkaW5nTW9kYWwuY2xvc2UoKVxuICAgICAgICBpZiAobG9hZFRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQobG9hZFRpbWVvdXQpXG4gICAgICAgICAgbG9hZFRpbWVvdXQgPSBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBNb2RhbE1hbmFnZXIuaW5zdGFuY2UuZGlzcGxheUVycm9yKFxuICAgICAgICAgIHRoaXMuX3QoJ3Blc2RrLmNvbW1vbi50aXRsZS5lcnJvcicpLFxuICAgICAgICAgIHRoaXMuX3QoJ3Blc2RrLnN0aWNrZXIudGV4dC5zdGlja2VyTG9hZGluZ0Vycm9yJywgeyBwYXRoOiBpbWFnZS5zcmMgfSlcbiAgICAgICAgKVxuXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0xvYWRpbmcgc3RpY2tlciBmYWlsZWQnKSlcbiAgICAgIH0pXG5cbiAgICAgIGltYWdlLmNyb3NzT3JpZ2luID0gdGhpcy5jb250ZXh0LmVkaXRvci5nZXRDcm9zc09yaWdpbigpXG4gICAgICBpbWFnZS5zcmMgPSByZXNvbHZlZFN0aWNrZXJQYXRoXG4gICAgfSlcbiAgfVxuXG4gIF91cGRhdGVTdGlja2VyQ2F0ZWdvcmllcyAobmV3Q2F0ZWdvcmllcykge1xuICAgIGNvbnN0IHsgY2F0ZWdvcmllcywgcmVwbGFjZUNhdGVnb3JpZXMsIGF2YWlsYWJsZVN0aWNrZXJzIH0gPSB0aGlzLl9vcHRpb25zXG5cbiAgICBpZiAoIW5ld0NhdGVnb3JpZXMpIHtcbiAgICAgIG5ld0NhdGVnb3JpZXMgPSBjYXRlZ29yaWVzXG4gICAgfVxuXG4gICAgY29uc3Qgc3RpY2tlck1hbmFnZXIgPSBuZXcgU3RpY2tlck1hbmFnZXIodGhpcy5jb250ZXh0LnVpLCB7XG4gICAgICBjYXRlZ29yaWVzOiBuZXdDYXRlZ29yaWVzLFxuICAgICAgcmVwbGFjZUNhdGVnb3JpZXMsXG4gICAgICBhdmFpbGFibGVTdGlja2Vyc1xuICAgIH0pXG5cbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldCh7IHN0aWNrZXJNYW5hZ2VyIH0pXG4gIH1cblxuICAvKipcbiAgICogSXMgY2FsbGVkIHdoZW4gYSBjb250cm9sIGlzIGVudGVyZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkVudGVyICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG5cbiAgICB0aGlzLl91cGRhdGVTdGlja2VyQ2F0ZWdvcmllcygpXG5cbiAgICB0aGlzLl9tZWRpYXRvci5vbihDb25zdGFudHMuRVZFTlRTLkFEREVEX1NUSUNLRVIsIHRoaXMuX3VwZGF0ZVN0aWNrZXJDYXRlZ29yaWVzKVxuXG4gICAgZWRpdG9yLnpvb20uYXV0bygpXG4gICAgZWRpdG9yLmZlYXR1cmVzLmRpc2FibGUoJ3pvb20nLCAnZHJhZycpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGlzIGNvbnRyb2xcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkxlYXZlICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgdGhpcy5fbWVkaWF0b3Iub2ZmKENvbnN0YW50cy5FVkVOVFMuQURERURfU1RJQ0tFUiwgdGhpcy5fdXBkYXRlU3RpY2tlckNhdGVnb3JpZXMpXG4gICAgZWRpdG9yLmZlYXR1cmVzLmVuYWJsZSgnem9vbScsICdkcmFnJylcbiAgICBlZGl0b3IucmVuZGVyKClcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBjb250cm9sIHJlYWN0cyB0byBhIGNsaWNrIGF0IHRoZSBnaXZlbiAocmVsYXRpdmUgdG8gY2FudmFzKSBwb3NpdGlvbi4gSWYgaXRcbiAgICogZG9lcywgaXQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhIHByZXBhcmVkIHNoYXJlZCBzdGF0ZSAoZS5nLiBzZWxlY3RlZCBzcHJpdGUpIHRoYXQgaXMgcGFzc2VkXG4gICAqIHRvIHRoaXMgY29udHJvbCBvbiBjcmVhdGlvblxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9IGNsaWNrUG9zaXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkVkaXRvcn0gZWRpdG9yXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBjbGlja0F0UG9zaXRpb24gKGNsaWNrUG9zaXRpb24sIGVkaXRvcikge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IGVkaXRvci5vcGVyYXRpb25zLmdldCgnc3ByaXRlJylcblxuICAgIGlmICghb3BlcmF0aW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBsZXQgc3ByaXRlcyA9IG9wZXJhdGlvbi5nZXRTcHJpdGVzQXRQb3NpdGlvbihjbGlja1Bvc2l0aW9uLCBlZGl0b3IuZ2V0T3V0cHV0VGV4dHVyZURpbWVuc2lvbnMoKSlcbiAgICAgIC5maWx0ZXIoKHMpID0+IChzIGluc3RhbmNlb2YgU3RpY2tlclNwcml0ZSkpXG5cbiAgICByZXR1cm4gc3ByaXRlc1swXSA/IHsgc2VsZWN0ZWRTcHJpdGU6IHNwcml0ZXNbMF0gfSA6IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYXNzZXRzIHRoYXQgc2hvdWxkIGJlIHByZWxvYWRlZCBmb3IgdGhpcyBjb250cm9sXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5FZGl0b3J9IGVkaXRvclxuICAgKiBAcmV0dXJuIHtTdHJpbmdbXX1cbiAgICovXG4gIHN0YXRpYyBnZXRQcmVsb2FkQXNzZXRzIChlZGl0b3IpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ2VkaXRvci9jb250cm9scy9zaGFyZWQvY2FudmFzLW92ZXJsYXktY29udHJvbHMvdG8tZnJvbnQucG5nJyxcbiAgICAgICdlZGl0b3IvY29udHJvbHMvc2hhcmVkL2NhbnZhcy1vdmVybGF5LWNvbnRyb2xzL2R1cGxpY2F0ZS5wbmcnLFxuICAgICAgJ2VkaXRvci9jb250cm9scy9zaGFyZWQvY2FudmFzLW92ZXJsYXktY29udHJvbHMvZGVsZXRlLnBuZydcbiAgICBdXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgY29udHJvbCBpcyBlbmFibGVkXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNFbmFibGVkIChlZGl0b3IpIHtcbiAgICByZXR1cm4gZWRpdG9yLmlzVG9vbEFsbG93ZWQoJ3N0aWNrZXInKSAmJiBlZGl0b3IuaXNUb29sRW5hYmxlZCgnc3RpY2tlcicpXG4gIH1cbn1cblxuRGVza3RvcFVJLkNvbnRyb2xzLlN0aWNrZXJDb250cm9scyA9IFN0aWNrZXJDb250cm9sc1xuXG5leHBvcnQgZGVmYXVsdCBTdGlja2VyQ29udHJvbHNcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3N0aWNrZXIvaW5kZXguanMiLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICovXG4vKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IE1hdGggYXMgUE1hdGgsIFV0aWxzIGFzIFNES1V0aWxzIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5pbXBvcnQgeyBSZWFjdCwgVXRpbHMsIENvbnRyb2xzQ29tcG9uZW50IH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IFN0aWNrZXJSb290UGFuZWxDb21wb25lbnQgZnJvbSAnLi9zdGlja2VyLXJvb3QtcGFuZWwtY29tcG9uZW50J1xuaW1wb3J0IFN0aWNrZXJDYXRlZ29yeVBhbmVsQ29tcG9uZW50IGZyb20gJy4vc3RpY2tlci1jYXRlZ29yeS1wYW5lbC1jb21wb25lbnQnXG5pbXBvcnQgU3RpY2tlck9wdGlvbnNQYW5lbENvbXBvbmVudCBmcm9tICcuL3N0aWNrZXItb3B0aW9ucy1wYW5lbC1jb21wb25lbnQnXG5cbmNvbnN0IHsgVmVjdG9yMiB9ID0gUE1hdGhcbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5jb25zdCBQYW5lbEVudW0gPSB7XG4gIFJPT1Q6IDEsXG4gIENBVEVHT1JZOiAyLFxuICBPUFRJT05TOiAzXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0aWNrZXJDb250cm9sc0NvbXBvbmVudCBleHRlbmRzIENvbnRyb2xzQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IENvbnRyb2xzQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuICBzdGF0aWMgUm9vdEVsZW1lbnQgPSBDb250cm9sc0NvbXBvbmVudC5Sb290RWxlbWVudFxuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uQ2F0ZWdvcnlDbGljaycsXG4gICAgICAnX29uU3RpY2tlckNsaWNrJyxcbiAgICAgICdfb25CYWNrQ2xpY2snLFxuICAgICAgJ19vbk5ld1N0aWNrZXJDbGljaycsXG4gICAgICAnX29uUmVwbGFjZUNsaWNrJ1xuICAgIClcblxuICAgIHRoaXMuX25lZWRzU3R5bGVGaXhlcyA9IHRydWVcblxuICAgIGxldCBjdXJyZW50UGFuZWwgPSBQYW5lbEVudW0uUk9PVFxuICAgIGlmICh0aGlzLnNoYXJlZFN0YXRlLnNlbGVjdGVkU3ByaXRlKSB7XG4gICAgICBjdXJyZW50UGFuZWwgPSBQYW5lbEVudW0uT1BUSU9OU1xuICAgIH1cbiAgICB0aGlzLnN0YXRlLmN1cnJlbnRQYW5lbCA9IGN1cnJlbnRQYW5lbFxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEEgbWV0aG9kIHRoYXQgaXMgY2FsbGVkIHdoZW5ldmVyIHN0eWxlcyBuZWVkIHRvIGJlIGZpeGVkIGJ5IHRoZSBKYXZhU2NyaXB0LlxuICAgKiBUaGlzIG5lZWRzIHRvIGJlIGRvbmUgdGhhbmtzIHRvIG9sZGVyIEludGVybmV0IEV4cGxvcmVyIGJyb3dzZXJzIHdoaWNoIGhhdmVcbiAgICogYSBidW5jaCBvZiBDU1MgYnVncy5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGZpeFN0eWxlcyAoKSB7XG4gICAgdGhpcy5fbGlzdC5zdHlsZS5oZWlnaHQgPSAnMTAwJSdcbiAgICByZXR1cm4gc3VwZXIuZml4U3R5bGVzKClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKFV0aWxzLkJyb3dzZXIuaXNJRWx0ZSgxMCkpIHtcbiAgICAgICAgICBjb25zdCBjb250YWluZXJIZWlnaHQgPSB0aGlzLl9jb250YWluZXIub2Zmc2V0SGVpZ2h0XG4gICAgICAgICAgdGhpcy5fbGlzdC5zdHlsZS5oZWlnaHQgPSBgJHtjb250YWluZXJIZWlnaHR9cHhgXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5yZWZzLnBhbmVsLmZpeFN0eWxlcygpXG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdXBkYXRpbmcgb2NjdXJzXG4gICAqL1xuICBjb21wb25lbnREaWRVcGRhdGUgKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuY3VycmVudFBhbmVsICE9PSBwcmV2U3RhdGUuY3VycmVudFBhbmVsKSB7XG4gICAgICB0aGlzLmZpeFN0eWxlcygpXG4gICAgfVxuICB9XG5cbiAgc2hhcmVkU3RhdGVEaWRDaGFuZ2UgKG9sZFN0YXRlLCBuZXdTdGF0ZSkge1xuICAgIGlmIChvbGRTdGF0ZS5zdGlja2VyT2JqZWN0ICE9PSBuZXdTdGF0ZS5zdGlja2VyT2JqZWN0ICYmIG5ld1N0YXRlLnNlbGVjdGVkU3ByaXRlICYmIG5ld1N0YXRlLnN0aWNrZXJPYmplY3QpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50UGFuZWw6IFBhbmVsRW51bS5PUFRJT05TXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIGh3ZW4gdGhlIGBSZXBsYWNlYCBidXR0b24gaGFzIGJlZW4gY2xpY2tlZFxuICAgKiBAcHJpdnRlXG4gICAqL1xuICBfb25SZXBsYWNlQ2xpY2sgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudFBhbmVsOiBQYW5lbEVudW0uUk9PVFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBgTmV3IFN0aWNrZXJgIGJ1dHRvbiBoYXMgYmVlbiBjbGlja2VkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25OZXdTdGlja2VyQ2xpY2sgKCkge1xuICAgIHRoaXMuc3RhdGUuY3VycmVudFBhbmVsID0gUGFuZWxFbnVtLlJPT1RcbiAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHtcbiAgICAgIHNlbGVjdGVkU3ByaXRlOiBudWxsXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgYSBjYXRlZ29yeSBpdGVtLlxuICAgKiBAcGFyYW0gIHtDYXRlZ29yeX0gY2F0ZWdvcnlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNhdGVnb3J5Q2xpY2sgKGNhdGVnb3J5KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXJyZW50UGFuZWw6IFBhbmVsRW51bS5DQVRFR09SWSxcbiAgICAgIGNhdGVnb3J5XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGJhY2sgYnV0dG9uXG4gICAqIGluIGEgY2F0ZWdvcnkgcGFuZWwuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CYWNrQ2xpY2sgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudFBhbmVsOiBQYW5lbEVudW0uUk9PVFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIGEgc3RpY2tlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IHN0aWNrZXJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblN0aWNrZXJDbGljayAoc3RpY2tlcikge1xuICAgIGxldCBzZWxlY3RlZFNwcml0ZSA9IHRoaXMuc2hhcmVkU3RhdGUuc2VsZWN0ZWRTcHJpdGVcblxuICAgIGNvbnN0IHN3aXRjaFRvT3B0aW9ucyA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50UGFuZWw6IFBhbmVsRW51bS5PUFRJT05TXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBpZiAoIXNlbGVjdGVkU3ByaXRlKSB7XG4gICAgICB0aGlzLnByb3BzLmNvbnRyb2xzLmNyZWF0ZVN0aWNrZXIoc3RpY2tlcilcbiAgICAgICAgLnRoZW4oc2VsZWN0ZWRTcHJpdGUgPT4ge1xuICAgICAgICAgIHN3aXRjaFRvT3B0aW9ucygpXG4gICAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJvcHMuY29udHJvbHMubG9hZFN0aWNrZXJJbWFnZShzdGlja2VyKVxuICAgICAgICAudGhlbihpbWFnZSA9PiB7XG4gICAgICAgICAgbGV0IGRpbWVuc2lvbnMgPSBzZWxlY3RlZFNwcml0ZS5nZXREaW1lbnNpb25zKCkuY2xvbmUoKVxuICAgICAgICAgIGNvbnN0IGxvbmdlc3RTaWRlID0gZGltZW5zaW9ucy5tYXgoKVxuICAgICAgICAgIGNvbnN0IGJvdW5kaW5nUmVjdGFuZ2xlID0gbmV3IFZlY3RvcjIobG9uZ2VzdFNpZGUsIGxvbmdlc3RTaWRlKVxuICAgICAgICAgIGNvbnN0IGltYWdlRGltZW5zaW9ucyA9IG5ldyBWZWN0b3IyKGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpXG5cbiAgICAgICAgICBjb25zdCBzdGlja2VyT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGltYWdlLFxuICAgICAgICAgICAgaWRlbnRpZmllcjogc3RpY2tlci5pZGVudGlmaWVyLFxuICAgICAgICAgICAgZGltZW5zaW9uczogU0RLVXRpbHMucmVzaXplVmVjdG9yVG9GaXQoaW1hZ2VEaW1lbnNpb25zLCBib3VuZGluZ1JlY3RhbmdsZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VsZWN0ZWRTcHJpdGUuZ2V0VGludE1vZGUoKSAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFNwcml0ZS5zZXRUaW50TW9kZShzdGlja2VyLnRpbnRNb2RlIHx8ICdub25lJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnNoYXJlZFN0YXRlLnNldFN0aWNrZXJPcHRpb25zKHN0aWNrZXJPcHRpb25zKVxuICAgICAgICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0U3RpY2tlckltYWdlKGltYWdlKVxuXG4gICAgICAgICAgdGhpcy5wcm9wcy5jb250cm9scy5hZGRMb2NhbEhpc3RvcnlTbmFwc2hvdCgnc3RpY2tlci1pbWFnZScsIHRydWUpXG5cbiAgICAgICAgICBlZGl0b3IucmVuZGVyKClcblxuICAgICAgICAgIHN3aXRjaFRvT3B0aW9ucygpXG4gICAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGN1cnJlbnQgcGFuZWwgYWNjb3JkaW5nIHRvXG4gICAqIHRoZSBjb21wb25lbnRzIHN0YXRlLlxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fSBUaGUgcGFuZWwgY29tcG9uZW50XG4gICAqL1xuICBfcmVuZGVyQ3VycmVudFBhbmVsICgpIHtcbiAgICBjb25zdCB7IGNvbnRyb2xzIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBzdGlja2VyTWFuYWdlciB9ID0gdGhpcy5zaGFyZWRTdGF0ZVxuXG4gICAgY29uc3QgY3VycmVudFBhbmVsID0gdGhpcy5zdGF0ZS5jdXJyZW50UGFuZWxcblxuICAgIC8vIGNvbnN0IGN1cnJlbnRQYW5lbCA9ICh0aGlzLnNoYXJlZFN0YXRlLnNlbGVjdGVkU3ByaXRlICYmIHRoaXMuc2hhcmVkU3RhdGUuc3RpY2tlck9iamVjdClcbiAgICAvLyAgID8gUGFuZWxFbnVtLk9QVElPTlMgOiB0aGlzLnN0YXRlLmN1cnJlbnRQYW5lbFxuXG4gICAgc3dpdGNoIChjdXJyZW50UGFuZWwpIHtcbiAgICAgIGNhc2UgUGFuZWxFbnVtLlJPT1Q6XG4gICAgICAgIHJldHVybiAoPFN0aWNrZXJSb290UGFuZWxDb21wb25lbnRcbiAgICAgICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9saXN0ID0gZWwgfX1cbiAgICAgICAgICBzdGlja2VyTWFuYWdlcj17c3RpY2tlck1hbmFnZXJ9XG4gICAgICAgICAgb25DYXRlZ29yeUNsaWNrPXt0aGlzLl9vbkNhdGVnb3J5Q2xpY2t9XG4gICAgICAgICAgb25TdGlja2VyQ2xpY2s9e3RoaXMuX29uU3RpY2tlckNsaWNrfVxuICAgICAgICAgIGNvbnRyb2xzPXtjb250cm9sc31cbiAgICAgICAgICByZWY9J3BhbmVsJ1xuICAgICAgICAvPilcbiAgICAgIGNhc2UgUGFuZWxFbnVtLkNBVEVHT1JZOlxuICAgICAgICByZXR1cm4gKDxTdGlja2VyQ2F0ZWdvcnlQYW5lbENvbXBvbmVudFxuICAgICAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX2xpc3QgPSBlbCB9fVxuICAgICAgICAgIGNhdGVnb3J5PXt0aGlzLnN0YXRlLmNhdGVnb3J5fVxuICAgICAgICAgIHN0aWNrZXJNYW5hZ2VyPXtzdGlja2VyTWFuYWdlcn1cbiAgICAgICAgICBvbkJhY2tDbGljaz17dGhpcy5fb25CYWNrQ2xpY2t9XG4gICAgICAgICAgb25TdGlja2VyQ2xpY2s9e3RoaXMuX29uU3RpY2tlckNsaWNrfVxuICAgICAgICAgIGNvbnRyb2xzPXtjb250cm9sc31cbiAgICAgICAgICByZWY9J3BhbmVsJ1xuICAgICAgICAvPilcbiAgICAgIGNhc2UgUGFuZWxFbnVtLk9QVElPTlM6XG4gICAgICAgIHJldHVybiAoPFN0aWNrZXJPcHRpb25zUGFuZWxDb21wb25lbnRcbiAgICAgICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9saXN0ID0gZWwgfX1cbiAgICAgICAgICBzdGlja2VyTWFuYWdlcj17c3RpY2tlck1hbmFnZXJ9XG4gICAgICAgICAgb25SZXBsYWNlQ2xpY2s9e3RoaXMuX29uUmVwbGFjZUNsaWNrfVxuICAgICAgICAgIG9uTmV3U3RpY2tlckNsaWNrPXt0aGlzLl9vbk5ld1N0aWNrZXJDbGlja31cbiAgICAgICAgICBjb250cm9scz17Y29udHJvbHN9XG4gICAgICAgICAgcmVmPSdwYW5lbCdcbiAgICAgICAgLz4pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb3BlcnRpZXMgZm9yIHRoZSByb290IGVsZW1lbnRcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFJvb3RQcm9wcyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzTmFtZTogKHRlc3QgPyAnanMtc3RpY2tlckNvbnRyb2xzJyA6IHVuZGVmaW5lZCksXG4gICAgICB3aXRoQm9yZGVyVG9wOiB0cnVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnQncyBjb250ZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyQ29udGVudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlckN1cnJlbnRQYW5lbCgpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3N0aWNrZXIvc3RpY2tlci1jb250cm9scy1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazovKipcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIFV0aWxzLCBTY3JvbGxhYmxlTGlzdENvbXBvbmVudCB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmltcG9ydCBTdGlja2VyQ2F0ZWdvcnlJdGVtQ29tcG9uZW50IGZyb20gJy4vc3RpY2tlci1jYXRlZ29yeS1pdGVtLWNvbXBvbmVudCdcbmltcG9ydCBTdGlja2VyTGlzdENvbXBvbmVudCBmcm9tICcuL3N0aWNrZXItbGlzdC1jb21wb25lbnQnXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGlja2VyUm9vdFBhbmVsQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjYXRlZ29yeTogJ2FsbCdcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBhIGNhdGVnb3J5XG4gICAqIEBwYXJhbSAge09iamVjdH0gY2F0ZWdvcnlcbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNhdGVnb3J5Q2xpY2sgKGNhdGVnb3J5LCBlKSB7XG4gICAgdGhpcy5wcm9wcy5vbkNhdGVnb3J5Q2xpY2sgJiZcbiAgICAgIHRoaXMucHJvcHMub25DYXRlZ29yeUNsaWNrKGNhdGVnb3J5KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTElOR1xuXG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBzdHlsZXMgbmVlZCB0byBiZSBmaXhlZCBieSB0aGUgSmF2YVNjcmlwdC5cbiAgICogVGhpcyBuZWVkcyB0byBiZSBkb25lIHRoYW5rcyB0byBvbGRlciBJbnRlcm5ldCBFeHBsb3JlciBicm93c2VycyB3aGljaCBoYXZlXG4gICAqIGEgYnVuY2ggb2YgQ1NTIGJ1Z3MuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBmcm9tIHRoZSBTdGlja2VyQ29udHJvbHNDb21wb25lbnQgZHVlIHRvIHRpbWluZyBpc3N1ZXMuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBmaXhTdHlsZXMgKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoVXRpbHMuQnJvd3Nlci5pc0lFbHRlKDEwKSkge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxiYXIudXBkYXRlKClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3Njcm9sbGJhci51cGRhdGUoKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgYW4gaXRlbSBmb3IgZWFjaCBjYXRlZ29yeVxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50W119IEFuIGFycmF5IG9mIGl0ZW1zLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlckxpc3RJdGVtcyAoKSB7XG4gICAgY29uc3QgeyBzdGlja2VyTWFuYWdlciB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IGNhdGVnb3JpZXMgPSBzdGlja2VyTWFuYWdlci5nZXRDYXRlZ29yaWVzKClcblxuICAgIHJldHVybiBjYXRlZ29yaWVzLm1hcCgoY2F0ZWdvcnkpID0+IHtcbiAgICAgIHJldHVybiAoPFN0aWNrZXJDYXRlZ29yeUl0ZW1Db21wb25lbnRcbiAgICAgICAga2V5PXtjYXRlZ29yeS5pZGVudGlmaWVyfVxuICAgICAgICBjYXRlZ29yeT17Y2F0ZWdvcnl9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uQ2F0ZWdvcnlDbGljay5iaW5kKHRoaXMsIGNhdGVnb3J5KX1cbiAgICAgIC8+KVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBzdGlja2VyTWFuYWdlciwgaW5uZXJSZWYgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKDxXcmFwcGVyXG4gICAgICBpbm5lclJlZj17ZWwgPT4geyBpbm5lclJlZiAmJiBpbm5lclJlZihlbCk7IHRoaXMuX3dyYXBwZXIgPSBlbCB9fVxuICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1yb290UGFuZWwnIDogdW5kZWZpbmVkKX0+XG4gICAgICA8U2Nyb2xsYWJsZUxpc3RDb21wb25lbnRcbiAgICAgICAgZGlyZWN0aW9uPSd2ZXJ0aWNhbCdcbiAgICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fc2Nyb2xsYmFyID0gZWwgfX0+XG4gICAgICAgIDxDYXRlZ29yeUxpc3Q+XG4gICAgICAgICAge3RoaXMuX3JlbmRlckxpc3RJdGVtcygpfVxuICAgICAgICA8L0NhdGVnb3J5TGlzdD5cbiAgICAgICAgPFN0aWNrZXJMaXN0Q29tcG9uZW50XG4gICAgICAgICAgc3RpY2tlcnM9e3N0aWNrZXJNYW5hZ2VyLmdldFN0aWNrZXJzRm9yQ2F0ZWdvcnkoJ2FsbCcpfVxuICAgICAgICAgIG9uU3RpY2tlckNsaWNrPXt0aGlzLnByb3BzLm9uU3RpY2tlckNsaWNrfSAvPlxuICAgICAgPC9TY3JvbGxhYmxlTGlzdENvbXBvbmVudD5cbiAgICA8L1dyYXBwZXI+KVxuICB9XG59XG5cbmNvbnN0IFdyYXBwZXIgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlJyxcbiAgdGFibGVMYXlvdXQ6ICdmaXhlZCcsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnXG59KVxuXG5jb25zdCBDYXRlZ29yeUxpc3QgPSBhZG9uaXMudWwoe1xuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAnMjVweCcsXG4gIHBhZGRpbmdCb3R0b206IDBcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy9zdGlja2VyL3N0aWNrZXItcm9vdC1wYW5lbC1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazovKipcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCBDb250cm9sc1N0eWxlcyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcblxuY29uc3QgeyBDb250cm9sSXRlbSwgQ29udHJvbEl0ZW1UaXRsZSB9ID0gQ29udHJvbHNTdHlsZXNcbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGlja2VyQ2F0ZWdvcnlJdGVtQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGNhdGVnb3J5IH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgYmFja2dyb3VuZEltYWdlUGF0aCA9IHRoaXMuX2dldEFzc2V0UGF0aChjYXRlZ29yeS5tZXRhRGF0YS5iYWNrZ3JvdW5kSW1hZ2UpXG5cbiAgICBjb25zdCBpdGVtU3R5bGUgPSB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJyR7YmFja2dyb3VuZEltYWdlUGF0aH0nKWBcbiAgICB9XG4gICAgcmV0dXJuICg8U3RpY2tlckNhdGVnb3J5SXRlbVxuICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfVxuICAgICAgc3R5bGU9e2l0ZW1TdHlsZX1cbiAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtY2F0ZWdvcnknIDogdW5kZWZpbmVkKX0+XG4gICAgICA8VGl0bGU+e3RoaXMuX3QoYHBlc2RrLnN0aWNrZXIuYXNzZXQuJHtjYXRlZ29yeS5pZGVudGlmaWVyfWApIHx8IGNhdGVnb3J5LmRlZmF1bHROYW1lfTwvVGl0bGU+XG4gICAgICA8R3JhZGllbnQgLz5cbiAgICA8L1N0aWNrZXJDYXRlZ29yeUl0ZW0+KVxuICB9XG59XG5cbmNvbnN0IFN0aWNrZXJDYXRlZ29yeUl0ZW0gPSBhZG9uaXMoQ29udHJvbEl0ZW0pLmxpKHtcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZSA9PiB0aGVtZS5maWx0ZXJJdGVtQmFja2dyb3VuZENvbG9yLFxuICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgYmFja2dyb3VuZFNpemU6ICdjb3Zlcidcbn0pXG5cbmNvbnN0IEdyYWRpZW50ID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBoZWlnaHQ6ICczMHB4JyxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogMCxcbiAgYmFja2dyb3VuZEltYWdlOiAnbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLDAsMCwwLjAwKSAwJSwgcmdiYSgwLDAsMCwwLjUpIDEwMCUpJ1xufSlcblxuY29uc3QgVGl0bGUgPSBhZG9uaXMoQ29udHJvbEl0ZW1UaXRsZSkuZGl2KHt9KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvc3RpY2tlci9zdGlja2VyLWNhdGVnb3J5LWl0ZW0tY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6LyoqXG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgQmFzZUNvbXBvbmVudCwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLCBVdGlscywgU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQsIENvbnRyb2xzU3R5bGVzIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IFN0aWNrZXJMaXN0Q29tcG9uZW50IGZyb20gJy4vc3RpY2tlci1saXN0LWNvbXBvbmVudCdcblxuY29uc3QgeyBDb250cm9sSXRlbVRleHRTdHlsZXMgfSA9IENvbnRyb2xzU3R5bGVzXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RpY2tlckNhdGVnb3J5UGFuZWxDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IEJhc2VDb21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTElOR1xuXG4gIC8qKlxuICAgKiBBIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuZXZlciBzdHlsZXMgbmVlZCB0byBiZSBmaXhlZCBieSB0aGUgSmF2YVNjcmlwdC5cbiAgICogVGhpcyBuZWVkcyB0byBiZSBkb25lIHRoYW5rcyB0byBvbGRlciBJbnRlcm5ldCBFeHBsb3JlciBicm93c2VycyB3aGljaCBoYXZlXG4gICAqIGEgYnVuY2ggb2YgQ1NTIGJ1Z3MuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBmcm9tIHRoZSBTdGlja2VyQ29udHJvbHNDb21wb25lbnQgZHVlIHRvIHRpbWluZyBpc3N1ZXMuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBmaXhTdHlsZXMgKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoVXRpbHMuQnJvd3Nlci5pc0lFbHRlKDEwKSkge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxiYXIudXBkYXRlKClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3Njcm9sbGJhci51cGRhdGUoKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgc3RpY2tlck1hbmFnZXIsIGNhdGVnb3J5LCBvbkJhY2tDbGljaywgb25TdGlja2VyQ2xpY2ssIGlubmVyUmVmIH0gPSB0aGlzLnByb3BzXG5cbiAgICBsZXQgYmFja2dyb3VuZEltYWdlUGF0aCA9IHRoaXMuX2dldEFzc2V0UGF0aChjYXRlZ29yeS5tZXRhRGF0YS5iYWNrZ3JvdW5kSW1hZ2UpXG4gICAgY29uc3QgaGVhZGVyU3R5bGUgPSB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJyR7YmFja2dyb3VuZEltYWdlUGF0aH0nKWAsXG4gICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvdmVyJ1xuICAgIH1cbiAgICBjb25zdCBiYWNrQnV0dG9uU3R5bGUgPSB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJyR7dGhpcy5fZ2V0QXNzZXRQYXRoKCdlZGl0b3IvY29udHJvbHMvc2hhcmVkL2JhY2sucG5nJywgdHJ1ZSl9JylgXG4gICAgfVxuXG4gICAgY29uc3Qgc3RpY2tlcnMgPSBzdGlja2VyTWFuYWdlci5nZXRTdGlja2Vyc0ZvckNhdGVnb3J5KGNhdGVnb3J5LmlkZW50aWZpZXIpXG4gICAgcmV0dXJuICg8U3RpY2tlckNhdGVnb3J5UGFuZWxcbiAgICAgIGlubmVyUmVmPXtlbCA9PiBpbm5lclJlZiAmJiBpbm5lclJlZihlbCl9XG4gICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWNhdGVnb3J5UGFuZWwnIDogdW5kZWZpbmVkKX0+XG4gICAgICA8SGVhZGVyIHN0eWxlPXtoZWFkZXJTdHlsZX0+XG4gICAgICAgIDxIZWFkZXJDb250ZW50PlxuICAgICAgICAgIDxUaXRsZT57dGhpcy5fdChgcGVzZGsuc3RpY2tlci5hc3NldC4ke2NhdGVnb3J5LmlkZW50aWZpZXJ9YCkgfHwgY2F0ZWdvcnkuZGVmYXVsdE5hbWV9PC9UaXRsZT5cbiAgICAgICAgICB7Y2F0ZWdvcnkubWV0YURhdGEuYXV0aG9yICYmIChcbiAgICAgICAgICAgIDxTdWJ0aXRsZT5cbiAgICAgICAgICAgICAgPHNwYW4+YnkgPC9zcGFuPlxuICAgICAgICAgICAgICB7Y2F0ZWdvcnkubWV0YURhdGEuYXV0aG9yfVxuICAgICAgICAgICAgPC9TdWJ0aXRsZT5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxCYWNrQnV0dG9uXG4gICAgICAgICAgICBzdHlsZT17YmFja0J1dHRvblN0eWxlfVxuICAgICAgICAgICAgb25DbGljaz17b25CYWNrQ2xpY2suYmluZCh0aGlzKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtYmFja0J1dHRvbicgOiB1bmRlZmluZWQpfSAvPlxuICAgICAgICA8L0hlYWRlckNvbnRlbnQ+XG4gICAgICA8L0hlYWRlcj5cbiAgICAgIDxDb250ZW50IGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX3dyYXBwZXIgPSBlbCB9fT5cbiAgICAgICAgPFNjcm9sbGFibGVMaXN0Q29tcG9uZW50XG4gICAgICAgICAgZGlyZWN0aW9uPSd2ZXJ0aWNhbCdcbiAgICAgICAgICBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9zY3JvbGxiYXIgPSBlbCB9fT5cbiAgICAgICAgICA8U3RpY2tlckxpc3RDb21wb25lbnRcbiAgICAgICAgICAgIHN0aWNrZXJzPXtzdGlja2Vyc31cbiAgICAgICAgICAgIG9uU3RpY2tlckNsaWNrPXtvblN0aWNrZXJDbGlja30gLz5cbiAgICAgICAgPC9TY3JvbGxhYmxlTGlzdENvbXBvbmVudD5cbiAgICAgIDwvQ29udGVudD5cbiAgICA8L1N0aWNrZXJDYXRlZ29yeVBhbmVsPilcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTVFlMRVNcblxuY29uc3QgU3RpY2tlckNhdGVnb3J5UGFuZWwgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlJyxcbiAgdGFibGVMYXlvdXQ6ICdmaXhlZCcsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICBwYWRkaW5nVG9wOiAnMCdcbn0pXG5cbmNvbnN0IEhlYWRlciA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUtcm93JyxcbiAgekluZGV4OiAyLFxuICBiYWNrZ3JvdW5kOiAnZ3JlZW4nLFxuICBoZWlnaHQ6ICc3MHB4JyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLnRleHRDb2xvcixcbiAgYm94U2hhZG93OiAnMCAycHggOHB4IDAgcmdiYSgwLDAsMCwwLjUwKSdcbn0pXG5cbmNvbnN0IEhlYWRlckNvbnRlbnQgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICBwYWRkaW5nVG9wOiAnMjBweCdcbn0pXG5cbmNvbnN0IENvbnRlbnQgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlLXJvdycsXG4gIGxlZnQ6IDBcbn0pXG5cbmNvbnN0IFRpdGxlID0gYWRvbmlzKENvbnRyb2xJdGVtVGV4dFN0eWxlcykuZGl2KHtcbiAgbWFyZ2luQm90dG9tOiAnNHB4J1xufSlcblxuY29uc3QgU3VidGl0bGUgPSBhZG9uaXMoQ29udHJvbEl0ZW1UZXh0U3R5bGVzKS5kaXYoe1xuICBmb250U3R5bGU6ICdpdGFsaWMnLFxuICBvcGFjaXR5OiAwLjc1LFxuXG4gICc+IConOiB7XG4gICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICBvcGFjaXR5OiAwLjVcbiAgfVxufSlcblxuY29uc3QgQmFja0J1dHRvbiA9IGFkb25pcy5idXR0b24oe1xuICBoZWlnaHQ6ICcxNHB4JyxcbiAgd2lkdGg6ICcxNHB4JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGxlZnQ6ICcxNnB4JyxcbiAgdG9wOiAnMjBweCcsXG4gIG9wYWNpdHk6IDAuNyxcbiAgYm9yZGVyOiAnbm9uZScsXG4gIGJhY2tncm91bmQ6ICduby1yZXBlYXQgY2VudGVyJyxcbiAgYmFja2dyb3VuZFNpemU6ICdjb250YWluJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG5cbiAgJzpmb2N1cyc6IHtcbiAgICBvdXRsaW5lOiAnbm9uZSdcbiAgfVxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3N0aWNrZXIvc3RpY2tlci1jYXRlZ29yeS1wYW5lbC1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQge1xuICBSZWFjdCwgYWRvbmlzLCBVdGlscywgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLCBTaGFyZWRTdGF0ZUNvbXBvbmVudCxcbiAgQnV0dG9uQ29tcG9uZW50LCBTbGlkZXJDb250cm9sQ29tcG9uZW50LCBDb2xsYXBzZVNlY3Rpb25Db21wb25lbnQsXG4gIENvbG9yU2VsZWN0aW9uQ29tcG9uZW50LCBTY3JvbGxhYmxlTGlzdENvbXBvbmVudCwgQ29udHJvbHNTdHlsZXNcbn0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuXG5jb25zdCB7IFBsYWluQ29udHJvbEl0ZW1CYWNrZ3JvdW5kIH0gPSBDb250cm9sc1N0eWxlc1xuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0aWNrZXJPcHRpb25zUGFuZWxDb21wb25lbnQgZXh0ZW5kcyBTaGFyZWRTdGF0ZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBTaGFyZWRTdGF0ZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vblRpbnRUb2dnbGUnLFxuICAgICAgJ19vblRpbnRDb2xvckNoYW5nZScsXG4gICAgICAnX29uT3BhY2l0eUNoYW5nZSdcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3RpY2tlciBvYmplY3RcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFN0aWNrZXJPYmplY3QgKCkge1xuICAgIHJldHVybiB0aGlzLnNoYXJlZFN0YXRlLnN0aWNrZXJPYmplY3RcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgYWZ0ZXIgYSBvcGVyYXRpb24gb3B0aW9uIGhhcyBiZWVuIGNoYW5nZWQgb24gdGhlIFVJLCBzbyB3ZSBjYW4gY3JlYXRlXG4gICAqIGEgaGlzdG9yeSBpdGVtIGFuZCB1cGRhdGUgdGhlIGVkaXRvciBvdXRwdXQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZ3JvdXBlZFxuICAgKi9cbiAgX29uQ2hhbmdlZE9wdGlvbiAobmFtZSwgZ3JvdXBlZCkge1xuICAgIG5hbWUgJiYgdGhpcy5wcm9wcy5jb250cm9scy5hZGRMb2NhbEhpc3RvcnlTbmFwc2hvdChuYW1lLCBncm91cGVkKVxuXG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGVkaXRvci5yZW5kZXIoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgb3BhY2l0eSBoYXMgYmVlbiBjaGFuZ2VkXG4gICAqIEBwYXJhbSAge051bWJlcn0gb3BhY2l0eVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uT3BhY2l0eUNoYW5nZSAob3BhY2l0eSkge1xuICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0QWxwaGEob3BhY2l0eSlcbiAgICB0aGlzLl9vbkNoYW5nZWRPcHRpb24oJ3N0aWNrZXItb3BhY2l0eScsIHRydWUpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB0aW50IGhhcyBiZWVuIHR1cm5lZCBvbiBvciBvZmZcbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gZW5hYmxlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uVGludFRvZ2dsZSAoZW5hYmxlZCkge1xuICAgIGNvbnN0IHN0aWNrZXIgPSB0aGlzLl9nZXRTdGlja2VyT2JqZWN0KClcbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldFRpbnRNb2RlKGVuYWJsZWQgPyBzdGlja2VyLnRpbnRNb2RlIDogJ25vbmUnKVxuICAgIHRoaXMuX29uQ2hhbmdlZE9wdGlvbignc3RpY2tlci10aW50LXRvZ2dsZScsIHRydWUpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB0aW50IGNvbG9yIGhhcyBiZWVuIGNoYW5nZWRcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuQ29sb3J9IGNvbG9yXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25UaW50Q29sb3JDaGFuZ2UgKGNvbG9yKSB7XG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXRUaW50Q29sb3IoY29sb3IuY2xvbmUoKSlcbiAgICB0aGlzLl9vbkNoYW5nZWRPcHRpb24oJ3N0aWNrZXItdGludCcsIHRydWUpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTVFlMSU5HXG5cbiAgLyoqXG4gICAqIEEgbWV0aG9kIHRoYXQgaXMgY2FsbGVkIHdoZW5ldmVyIHN0eWxlcyBuZWVkIHRvIGJlIGZpeGVkIGJ5IHRoZSBKYXZhU2NyaXB0LlxuICAgKiBUaGlzIG5lZWRzIHRvIGJlIGRvbmUgdGhhbmtzIHRvIG9sZGVyIEludGVybmV0IEV4cGxvcmVyIGJyb3dzZXJzIHdoaWNoIGhhdmVcbiAgICogYSBidW5jaCBvZiBDU1MgYnVncy5cbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGZyb20gdGhlIFN0aWNrZXJDb250cm9sc0NvbXBvbmVudCBkdWUgdG8gdGltaW5nIGlzc3Vlcy5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGZpeFN0eWxlcyAoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmIChVdGlscy5Ccm93c2VyLmlzSUVsdGUoMTApKSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbGJhci51cGRhdGUoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fc2Nyb2xsYmFyLnVwZGF0ZSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBpbm5lclJlZiwgb25OZXdTdGlja2VyQ2xpY2ssIG9uUmVwbGFjZUNsaWNrIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBhbHBoYSwgdGludE1vZGUsIHRpbnRDb2xvciwgc2VsZWN0ZWRTcHJpdGUgfSA9IHRoaXMuc2hhcmVkU3RhdGVcbiAgICBpZiAoIXNlbGVjdGVkU3ByaXRlKSByZXR1cm4gbnVsbFxuXG4gICAgY29uc3Qgc3RpY2tlciA9IHRoaXMuX2dldFN0aWNrZXJPYmplY3QoKVxuICAgIGNvbnN0IGNyb3NzT3JpZ2luID0gdGhpcy5jb250ZXh0LmVkaXRvci5nZXRDcm9zc09yaWdpbigpXG4gICAgY29uc3QgdGludGFibGUgPSAhIXN0aWNrZXIudGludE1vZGUgJiYgc3RpY2tlci50aW50TW9kZSAhPT0gJ25vbmUnXG5cbiAgICByZXR1cm4gKDxXcmFwcGVyXG4gICAgICBpbm5lclJlZj17ZWwgPT4geyBpbm5lclJlZiAmJiBpbm5lclJlZihlbCk7IHRoaXMuX3dyYXBwZXIgPSBlbCB9fVxuICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1vcHRpb25zUGFuZWwnIDogdW5kZWZpbmVkKX0+XG4gICAgICA8U2Nyb2xsYWJsZUxpc3RDb21wb25lbnRcbiAgICAgICAgZGlyZWN0aW9uPSd2ZXJ0aWNhbCdcbiAgICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fc2Nyb2xsYmFyID0gZWwgfX0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPFRvcFNlY3Rpb24+XG4gICAgICAgICAgICA8QnV0dG9uQ29tcG9uZW50XG4gICAgICAgICAgICAgIHRpdGxlPXt0aGlzLl90KCdwZXNkay5zdGlja2VyLmJ1dHRvbi5uZXcnKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1uZXdTdGlja2VyQnV0dG9uJyA6IHVuZGVmaW5lZCl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uTmV3U3RpY2tlckNsaWNrfSAvPlxuICAgICAgICAgICAgPERldGFpbHM+XG4gICAgICAgICAgICAgIDxUaHVtYm5haWw+XG4gICAgICAgICAgICAgICAgPFRodW1ibmFpbEltYWdlXG4gICAgICAgICAgICAgICAgICBjcm9zc09yaWdpbj17Y3Jvc3NPcmlnaW59XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblJlcGxhY2VDbGlja31cbiAgICAgICAgICAgICAgICAgIHNyYz17c2VsZWN0ZWRTcHJpdGUuZ2V0SW1hZ2UoKS5zcmN9IC8+XG4gICAgICAgICAgICAgIDwvVGh1bWJuYWlsPlxuICAgICAgICAgICAgICA8RGV0YWlsc0NvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8VGl0bGU+e3RoaXMuX3QoYHBlc2RrLnN0aWNrZXIuYXNzZXQuJHtzdGlja2VyLmlkZW50aWZpZXJ9YCkgfHwgc3RpY2tlci5kZWZhdWx0TmFtZX08L1RpdGxlPlxuICAgICAgICAgICAgICAgIDxSZXBsYWNlQnV0dG9uXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblJlcGxhY2VDbGlja31cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtcmVwbGFjZUJ1dHRvbicgOiB1bmRlZmluZWQpfT5cbiAgICAgICAgICAgICAgICAgIHt0aGlzLl90KCdwZXNkay5zdGlja2VyLmJ1dHRvbi5yZXBsYWNlJyl9XG4gICAgICAgICAgICAgICAgPC9SZXBsYWNlQnV0dG9uPlxuICAgICAgICAgICAgICA8L0RldGFpbHNDb250YWluZXI+XG4gICAgICAgICAgICA8L0RldGFpbHM+XG4gICAgICAgICAgICA8U2xpZGVyQ29udHJvbENvbXBvbmVudFxuICAgICAgICAgICAgICBtaW5WYWx1ZT17MH1cbiAgICAgICAgICAgICAgdmFsdWU9e01hdGgucm91bmQoYWxwaGEpfVxuICAgICAgICAgICAgICBtYXhWYWx1ZT17MTAwfVxuICAgICAgICAgICAgICBsYWJlbD17dGhpcy5fdCgncGVzZGsuc3RpY2tlci50aXRsZS5vcGFjaXR5Jyl9XG4gICAgICAgICAgICAgIG9uU2xpZGVyVmFsdWVDaGFuZ2U9e3RoaXMuX29uT3BhY2l0eUNoYW5nZX1cbiAgICAgICAgICAgICAgb25WYWx1ZUNoYW5nZT17dGhpcy5fb25PcGFjaXR5Q2hhbmdlfVxuICAgICAgICAgICAgICBtaWRkbGVEb3Q9e2ZhbHNlfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLW9wYWNpdHlDb250cm9sJyA6IHVuZGVmaW5lZCl9IC8+XG4gICAgICAgICAgPC9Ub3BTZWN0aW9uPlxuICAgICAgICAgIHt0aW50YWJsZSAmJiAoPENvbGxhcHNlU2VjdGlvbkNvbXBvbmVudFxuICAgICAgICAgICAgdG9nZ2xlYWJsZVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMuX3QoJ3Blc2RrLnN0aWNrZXIuYnV0dG9uLmZpbGwnKX1cbiAgICAgICAgICAgIGV4cGFuZGVkPXt0aW50TW9kZSAhPT0gJ25vbmUnfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1maWxsQ29udHJvbCcgOiB1bmRlZmluZWQpfVxuICAgICAgICAgICAgb25Ub2dnbGU9e3RoaXMuX29uVGludFRvZ2dsZX0+XG4gICAgICAgICAgICA8Q29sb3JTZWxlY3Rpb25cbiAgICAgICAgICAgICAgdmFsdWU9e3RpbnRDb2xvcn1cbiAgICAgICAgICAgICAgb25Db2xvclBpY2tlclRvZ2dsZT17dGhpcy5maXhTdHlsZXN9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLl9vblRpbnRDb2xvckNoYW5nZX0gLz5cbiAgICAgICAgICA8L0NvbGxhcHNlU2VjdGlvbkNvbXBvbmVudD4pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQ+XG4gICAgPC9XcmFwcGVyPilcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTVFlMRVNcblxuY29uc3QgV3JhcHBlciA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUnLFxuICB0YWJsZUxheW91dDogJ2ZpeGVkJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJSdcbn0pXG5cbmNvbnN0IFRvcFNlY3Rpb24gPSBhZG9uaXMuZGl2KHtcbiAgcGFkZGluZzogJzI1cHgnLFxuICBib3JkZXJCb3R0b206ICcxcHggc29saWQgIzFCMUIxRSdcbn0pXG5cbmNvbnN0IERldGFpbHMgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIG1hcmdpbjogJzI1cHggMCcsXG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICBoZWlnaHQ6ICc3MnB4J1xufSlcblxuY29uc3QgVGh1bWJuYWlsID0gYWRvbmlzKFBsYWluQ29udHJvbEl0ZW1CYWNrZ3JvdW5kKS5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgdG9wOiAwLFxuICBoZWlnaHQ6ICc3MnB4JyxcbiAgd2lkdGg6ICc3MnB4JyxcbiAgcGFkZGluZzogMCxcbiAgY3Vyc29yOiAncG9pbnRlcidcbn0pXG5cbmNvbnN0IFRodW1ibmFpbEltYWdlID0gYWRvbmlzLmltZyh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBwYWRkaW5nOiAnNXB4JyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJSdcbn0pXG5cbmNvbnN0IERldGFpbHNDb250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHJpZ2h0OiAwLFxuICBsZWZ0OiAnODdweCcsXG4gIHRvcDogMCxcbiAgZm9udFNpemU6ICcxM3B4J1xufSlcblxuY29uc3QgVGl0bGUgPSBhZG9uaXMuZGl2KHtcbiAgaGVpZ2h0OiAnYXV0bycsXG4gIHdpZHRoOiAnMTAwJScsXG4gIG1hcmdpblRvcDogJzEycHgnLFxuICBtYXJnaW5Cb3R0b206ICc4cHgnLFxuICBjb2xvcjogdGhlbWUgPT4gdGhlbWUuZGltbWVkVGV4dENvbG9yLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLnJlZ3VsYXJGb250RmFtaWx5XG59KVxuXG5jb25zdCBSZXBsYWNlQnV0dG9uID0gYWRvbmlzLmRpdih7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGNvbG9yOiB0aGVtZSA9PiB0aGVtZS50ZXh0Q29sb3IsXG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICBsZXR0ZXJTcGFjaW5nOiAnMnB4JyxcbiAgZm9udEZhbWlseTogdGhlbWUgPT4gdGhlbWUudXBwZXJjYXNlU2VtaUJvbGRGb250RmFtaWx5LFxuICBjdXJzb3I6ICdwb2ludGVyJ1xufSlcblxuY29uc3QgQ29sb3JTZWxlY3Rpb24gPSBhZG9uaXMoQ29sb3JTZWxlY3Rpb25Db21wb25lbnQpKHtcbiAgcGFkZGluZ1RvcDogMFxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3N0aWNrZXIvc3RpY2tlci1vcHRpb25zLXBhbmVsLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7IE9wZXJhdGlvbnMgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCBTcHJpdGVzQ2FudmFzQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi4vc2hhcmVkL3Nwcml0ZXMvc3ByaXRlcy1jYW52YXMtY29udHJvbHMtY29tcG9uZW50J1xuXG5jb25zdCB7IFNwcml0ZU9wZXJhdGlvbiB9ID0gT3BlcmF0aW9uc1xubGV0IFN0aWNrZXJTcHJpdGVcbmlmIChTcHJpdGVPcGVyYXRpb24pIHtcbiAgU3RpY2tlclNwcml0ZSA9IE9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlN0aWNrZXJTcHJpdGVcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RpY2tlckNhbnZhc0NvbnRyb2xzQ29tcG9uZW50IGV4dGVuZHMgU3ByaXRlc0NhbnZhc0NvbnRyb2xzQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IFNwcml0ZXNDYW52YXNDb250cm9sc0NvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgc3ByaXRlIGl0ZW1zXG4gICAqIEBwYXJhbSB7U3ByaXRlW119IHNwcml0ZXNcbiAgICogQHJldHVybiB7UmVhY3QuQ29tcG9uZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyU3ByaXRlSXRlbXMgKHNwcml0ZXMpIHtcbiAgICAvLyBPbmx5IHJlbmRlciBzdGlja2VyIGl0ZW1zXG4gICAgcmV0dXJuIHN1cGVyLl9yZW5kZXJTcHJpdGVJdGVtcyhzcHJpdGVzLmZpbHRlcihzID0+IHMgaW5zdGFuY2VvZiBTdGlja2VyU3ByaXRlKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3RzIHRoZSBuZXh0IHNwcml0ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NlbGVjdE5leHRTcHJpdGUgKCkge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ29wZXJhdGlvbicpXG4gICAgY29uc3Qgc3ByaXRlcyA9IG9wZXJhdGlvbi5nZXRTcHJpdGVzKCkuc2xpY2UoMCkucmV2ZXJzZSgpXG5cbiAgICBsZXQgc3ByaXRlLCBuZXh0U3ByaXRlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcHJpdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzcHJpdGUgPSBzcHJpdGVzW2ldXG4gICAgICBpZiAoc3ByaXRlIGluc3RhbmNlb2YgU3RpY2tlclNwcml0ZSkge1xuICAgICAgICBuZXh0U3ByaXRlID0gc3ByaXRlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFuZXh0U3ByaXRlKSB7XG4gICAgICB0aGlzLnByb3BzLmNvbnRyb2xzLnNraXBIaXN0b3J5ID0gdHJ1ZVxuICAgICAgdGhpcy5jb250ZXh0LnNjcmVlbi5zd2l0Y2hUb0NvbnRyb2xzKCdkZWZhdWx0JylcbiAgICB9XG4gICAgdGhpcy5zZXRTaGFyZWRTdGF0ZSh7IHNlbGVjdGVkU3ByaXRlOiBuZXh0U3ByaXRlIH0pXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBzcHJpdGUgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9uc1xuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uU3ByaXRlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NyZWF0ZVNwcml0ZSAob3B0aW9ucykge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ29wZXJhdGlvbicpXG4gICAgcmV0dXJuIG9wZXJhdGlvbi5jcmVhdGVTdGlja2VyKG9wdGlvbnMpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3N0aWNrZXIvc3RpY2tlci1jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgT3BlcmF0aW9ucywgTWF0aCBhcyBQTWF0aCwgQ29sb3IgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCBEZXNrdG9wVUksIHsgQmFzZUNvbnRyb2xzLCBGb250TWFuYWdlciB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmltcG9ydCBUZXh0Q29udHJvbHNDb21wb25lbnQgZnJvbSAnLi90ZXh0LWNvbnRyb2xzLWNvbXBvbmVudCdcbmltcG9ydCBUZXh0Q2FudmFzQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi90ZXh0LWNhbnZhcy1jb250cm9scy1jb21wb25lbnQnXG5cbmNvbnN0IHsgVmVjdG9yMiB9ID0gUE1hdGhcblxubGV0IFRleHRTcHJpdGUsIEJydXNoU3ByaXRlXG5pZiAoT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24pIHtcbiAgVGV4dFNwcml0ZSA9IE9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlRleHRTcHJpdGVcbiAgQnJ1c2hTcHJpdGUgPSBPcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5CcnVzaFNwcml0ZVxufVxuXG4vKipcbiAqIFRoZSBDb250cm9scyBmb3IgdGhlIFRleHQgdG9vbC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuQ29udHJvbHNcbiAqIEBleHRlbmRzIFBob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5CYXNlQ29udHJvbHNcbiAqL1xuY2xhc3MgVGV4dENvbnRyb2xzIGV4dGVuZHMgQmFzZUNvbnRyb2xzIHtcbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWRlbnRpZmllciA9ICd0ZXh0J1xuXG4gIC8qKlxuICAgKiBUaGUgY29udHJvbHMgY29tcG9uZW50IGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7UmVhY3QuQ29tcG9uZW50fVxuICAgKi9cbiAgc3RhdGljIGNvbnRyb2xzQ29tcG9uZW50ID0gVGV4dENvbnRyb2xzQ29tcG9uZW50XG5cbiAgLyoqXG4gICAqIFRoZSBjYW52YXMgY29tcG9uZW50IGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7UmVhY3QuQ29tcG9uZW50fVxuICAgKi9cbiAgc3RhdGljIGNhbnZhc0NvbnRyb2xzQ29tcG9uZW50ID0gVGV4dENhbnZhc0NvbnRyb2xzQ29tcG9uZW50XG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHBhdGggb2YgdGhpcyBjb250cm9sXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWNvblBhdGggPSAnZWRpdG9yL2NvbnRyb2xzL3RleHQvaWNvbi5wbmcnXG5cbiAgLyoqXG4gICAqIFRoZSBhY3RpdmUgaWNvbiBwYXRoIG9mIHRoaXMgY29udHJvbFxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGFjdGl2ZUljb25QYXRoID0gJ2VkaXRvci9jb250cm9scy90ZXh0L2ljb24tYWN0aXZlLnBuZydcblxuICAvKipcbiAgICogVGhlIG9wZXJhdGlvbnMgcmVxdWlyZWQgZm9yIHRoaXMgY29udHJvbCB0byB3b3JrIHByb3Blcmx5XG4gICAqIEB0eXBlIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyByZXF1aXJlZE9wZXJhdGlvbnMgPSBbJ3Nwcml0ZSddXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIHRoaXMgY29udHJvbFxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJvcGVydHkge09iamVjdFtdfSBbZm9udHMgPSBbXV1cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBbcmVwbGFjZUZvbnRzID0gZmFsc2VdXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nW119IFthdmFpbGFibGVWYXJpYXRpb25zID0gbnVsbF1cbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBmb250czogW10sXG4gICAgcmVwbGFjZUZvbnRzOiBmYWxzZSxcbiAgICBhdmFpbGFibGVWYXJpYXRpb25zOiBudWxsLFxuICAgIHNuYXBSb3RhdGlvbjogOTAsXG4gICAgc25hcFJvdGF0aW9uVG9sZXJhbmNlOiA1XG4gIH1cblxuICAvKipcbiAgICogT3BlcmF0aW9ucyB3aGljaCB3aWxsIHRyaWdnZXIgVUkgdXBkYXRlcyBvbiB0aGlzIGNvbnRyb2xzLlxuICAgKiBAdHlwZSB7U3RyaW5nW119XG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHN0YXRpYyB1cGRhdGFibGVPcGVyYXRpb25zID0gWydzcHJpdGUnXVxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgZWRpdG9yIHdpbGwgc3dpdGNoIHRvIHRoZSBkZWZhdWx0IGNvbnRyb2xzIHdoZW4gYW55IG9mIHRoZSB1cGRhdGFibGVPcGVyYXRpb25zIGlzIHJlbW92ZWQuXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgc3dpdGNoVG9EZWZhdWx0Q29udHJvbHNPblJlbW92YWwgPSB0cnVlXG5cbiAgLyoqXG4gICAqIE1hcHMgdGhlIG9wZXJhdGlvbnMgc3RhdGUgdG8gYSBzaGFyZWQgc3RhdGUgb2JqZWN0XG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wZXJhdGlvbnNcbiAgICogQHBhcmFtIHtCb29sZWFufSBbaW5pdGlhbD1mYWxzZV1cbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBtYXBPcGVyYXRpb25zVG9TaGFyZWRTdGF0ZSAob3BlcmF0aW9ucywgaW5pdGlhbCA9IGZhbHNlLCBwcmV2aW91c1N0YXRlID0ge30pIHtcbiAgICBjb25zdCBvcGVyYXRpb24gPSBvcGVyYXRpb25zLmdldE9yQ3JlYXRlKCdzcHJpdGUnKVxuICAgIGNvbnN0IGlucHV0RGltZW5zaW9ucyA9IG9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoKVxuICAgIGxldCB7IHNlbGVjdGVkU3ByaXRlIH0gPSBwcmV2aW91c1N0YXRlXG5cbiAgICBpZiAoc2VsZWN0ZWRTcHJpdGUgJiYgb3BlcmF0aW9uLmdldFNwcml0ZXMoKS5pbmRleE9mKHNlbGVjdGVkU3ByaXRlKSA8IDApIHtcbiAgICAgIGNvbnN0IG5ld1Nwcml0ZSA9IG9wZXJhdGlvbi5nZXRTcHJpdGVzKCkuZmlsdGVyKHNwcml0ZSA9PiBzcHJpdGUuZ2V0SWQoKSA9PT0gc2VsZWN0ZWRTcHJpdGUuZ2V0SWQoKSlbMF1cbiAgICAgIGlmIChuZXdTcHJpdGUpIHtcbiAgICAgICAgc2VsZWN0ZWRTcHJpdGUgPSBuZXdTcHJpdGVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgb3BlcmF0aW9uLFxuICAgICAgc2VsZWN0ZWRTcHJpdGUsXG4gICAgICBpbnB1dERpbWVuc2lvbnMsXG4gICAgICBjb2xvcjogc2VsZWN0ZWRTcHJpdGUgPyBzZWxlY3RlZFNwcml0ZS5nZXRDb2xvcigpLmNsb25lKCkgOiBudWxsLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBzZWxlY3RlZFNwcml0ZSA/IHNlbGVjdGVkU3ByaXRlLmdldEJhY2tncm91bmRDb2xvcigpLmNsb25lKCkgOiBudWxsLFxuICAgICAgYWxpZ25tZW50OiBzZWxlY3RlZFNwcml0ZSA/IHNlbGVjdGVkU3ByaXRlLmdldEFsaWdubWVudCgpIDogbnVsbCxcbiAgICAgIGxpbmVIZWlnaHQ6IHNlbGVjdGVkU3ByaXRlID8gc2VsZWN0ZWRTcHJpdGUuZ2V0TGluZUhlaWdodCgpIDogMCxcbiAgICAgIGZvbnRGYW1pbHk6IHNlbGVjdGVkU3ByaXRlID8gc2VsZWN0ZWRTcHJpdGUuZ2V0Rm9udEZhbWlseSgpIDogbnVsbCxcblxuICAgICAgLy8gYWN0aW9uc1xuICAgICAgc2V0Rm9udFNpemU6IGZvbnRTaXplID0+IHsgc2VsZWN0ZWRTcHJpdGUgJiYgc2VsZWN0ZWRTcHJpdGUuc2V0Rm9udFNpemUoZm9udFNpemUgLyBpbnB1dERpbWVuc2lvbnMubWluKCkpIH0sXG4gICAgICBzZXRDb2xvcjogY29sb3IgPT4geyBzZWxlY3RlZFNwcml0ZSAmJiBzZWxlY3RlZFNwcml0ZS5zZXRDb2xvcihjb2xvci5jbG9uZSgpKSB9LFxuICAgICAgc2V0QmFja2dyb3VuZENvbG9yOiBjb2xvciA9PiB7IHNlbGVjdGVkU3ByaXRlICYmIHNlbGVjdGVkU3ByaXRlLnNldEJhY2tncm91bmRDb2xvcihjb2xvci5jbG9uZSgpKSB9LFxuICAgICAgc2V0Q2hhcmFjdGVyU3BhY2luZzogdmFsdWUgPT4geyBzZWxlY3RlZFNwcml0ZSAmJiBzZWxlY3RlZFNwcml0ZS5zZXRDaGFyYWN0ZXJTcGFjaW5nKHZhbHVlKSB9LFxuICAgICAgc2V0TGluZUhlaWdodDogdmFsdWUgPT4geyBzZWxlY3RlZFNwcml0ZSAmJiBzZWxlY3RlZFNwcml0ZS5zZXRMaW5lSGVpZ2h0KHZhbHVlKSB9LFxuICAgICAgc2V0QWxpZ25tZW50OiB2YWx1ZSA9PiB7IHNlbGVjdGVkU3ByaXRlICYmIHNlbGVjdGVkU3ByaXRlLnNldEFsaWdubWVudCh2YWx1ZSkgfSxcbiAgICAgIHNldFRleHRPcHRpb25zOiBvcHRzID0+IHsgc2VsZWN0ZWRTcHJpdGUgJiYgc2VsZWN0ZWRTcHJpdGUuc2V0KG9wdHMpIH0sXG4gICAgICBzZXRWYXJpYXRpb246IHZhcmlhdGlvbiA9PiB7XG4gICAgICAgIHNlbGVjdGVkU3ByaXRlICYmIHNlbGVjdGVkU3ByaXRlLnNldCh7XG4gICAgICAgICAgZm9udElkZW50aWZpZXI6IHZhcmlhdGlvbi5nZXRJZGVudGlmaWVyKCksXG4gICAgICAgICAgZm9udEZhbWlseTogdmFyaWF0aW9uLmdldEZvbnRGYW1pbHkoKSxcbiAgICAgICAgICBmb250V2VpZ2h0OiB2YXJpYXRpb24uZ2V0Rm9udFdlaWdodCgpLFxuICAgICAgICAgIGZvbnRTdHlsZTogdmFyaWF0aW9uLmdldEZvbnRTdHlsZSgpLFxuICAgICAgICAgIHRleHRNZXRyaWNzOiB2YXJpYXRpb24uZ2V0VGV4dE1ldHJpY3MoKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IHRleHQgc3ByaXRlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVUZXh0ICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG5cbiAgICB0aGlzLnNhdmVUZXh0U2V0dGluZ3MoKVxuXG4gICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ29wZXJhdGlvbicpXG4gICAgY29uc3QgZm9udE1hbmFnZXIgPSB0aGlzLnNoYXJlZFN0YXRlLmdldCgnZm9udE1hbmFnZXInKVxuXG4gICAgY29uc3Qgb3V0cHV0RGltZW5zaW9ucyA9IGVkaXRvci5nZXRPdXRwdXREaW1lbnNpb25zKClcbiAgICBjb25zdCBzZGsgPSBlZGl0b3IuZ2V0U0RLKClcbiAgICBjb25zdCByZW5kZXJlciA9IHNkay5nZXRSZW5kZXJlcigpXG4gICAgY29uc3QgbWF4VGV4dHVyZVNpemUgPSByZW5kZXJlci5nZXRNYXhUZXh0dXJlU2l6ZSgpXG5cbiAgICAvLyBDaGVjayBmb3IgcHJldmlvdXNseSBzYXZlZCB0ZXh0IHNldHRpbmdzIGluIHRoZSBnbG9iYWwgc3RhdGVcbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHRoaXMuZ2V0R2xvYmFsVG9vbFN0YXRlKClcblxuICAgIGNvbnN0IGRlZmF1bHRGb250VmFyaWF0aW9uID0gZGVmYXVsdE9wdGlvbnNcbiAgICAgID8gZm9udE1hbmFnZXIuZ2V0VmFyaWF0aW9uQnlJZGVudGlmaWVyKGRlZmF1bHRPcHRpb25zLmZvbnRJZGVudGlmaWVyKVxuICAgICAgOiBmb250TWFuYWdlci5nZXREZWZhdWx0VmFyaWF0aW9uKClcblxuICAgIGNvbnN0IHRleHQgPSBvcGVyYXRpb24uY3JlYXRlVGV4dCh7XG4gICAgICB0ZXh0OiB0aGlzLmNvbnRleHQudWkudHJhbnNsYXRlKCdwZXNkay50ZXh0LnBsYWNlaG9sZGVyLmRlZmF1bHRUZXh0JyksXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjIoMC41LCAwLjUpLFxuICAgICAgbWF4V2lkdGg6IDAuNSxcbiAgICAgIG1heEhlaWdodDogbWF4VGV4dHVyZVNpemUgPyBtYXhUZXh0dXJlU2l6ZSAvIG91dHB1dERpbWVuc2lvbnMueSA6IDMsXG4gICAgICB0ZXh0TWV0cmljczogZGVmYXVsdEZvbnRWYXJpYXRpb24uZ2V0VGV4dE1ldHJpY3MoKSxcbiAgICAgIGZvbnRJZGVudGlmaWVyOiBkZWZhdWx0Rm9udFZhcmlhdGlvbi5nZXRJZGVudGlmaWVyKCksXG4gICAgICBmb250U2l6ZTogMC4wOCxcbiAgICAgIGZvbnRGYW1pbHk6IGRlZmF1bHRGb250VmFyaWF0aW9uLmdldEZvbnRGYW1pbHkoKSxcbiAgICAgIGZvbnRXZWlnaHQ6IGRlZmF1bHRGb250VmFyaWF0aW9uLmdldEZvbnRXZWlnaHQoKSxcbiAgICAgIGZvbnRTdHlsZTogZGVmYXVsdEZvbnRWYXJpYXRpb24uZ2V0Rm9udFN0eWxlKCksXG4gICAgICBjb2xvcjogQ29sb3IuV0hJVEUsXG4gICAgICBhbGlnbm1lbnQ6ICdjZW50ZXInLFxuICAgICAgLi4uKGRlZmF1bHRPcHRpb25zIHx8IHt9KVxuICAgIH0pXG5cbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldCh7IHNlbGVjdGVkU3ByaXRlOiB0ZXh0IH0pXG5cbiAgICBvcGVyYXRpb24uYWRkU3ByaXRlKHRleHQpXG5cbiAgICB0aGlzLmFkZExvY2FsSGlzdG9yeVNuYXBzaG90KClcblxuICAgIHJldHVybiB0ZXh0XG4gIH1cblxuICBzYXZlVGV4dFNldHRpbmdzICgpIHtcbiAgICBjb25zdCBzZWxlY3RlZFNwcml0ZSA9IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCdzZWxlY3RlZFNwcml0ZScpXG5cbiAgICBpZiAoc2VsZWN0ZWRTcHJpdGUpIHtcbiAgICAgIHRoaXMuc2V0R2xvYmFsVG9vbFN0YXRlKHNlbGVjdGVkU3ByaXRlLnNlcmlhbGl6ZU9wdGlvbnMoW1xuICAgICAgICAnY29sb3InLFxuICAgICAgICAnYmFja2dyb3VuZENvbG9yJyxcbiAgICAgICAgJ2NoYXJhY3RlclNwYWNpbmcnLFxuICAgICAgICAnbGluZUhlaWdodCcsXG4gICAgICAgICdhbGlnbm1lbnQnLFxuICAgICAgICAnZm9udElkZW50aWZpZXInLFxuICAgICAgICAnZm9udEZhbWlseScsXG4gICAgICAgICdmb250V2VpZ2h0JyxcbiAgICAgICAgJ2ZvbnRTdHlsZSdcbiAgICAgIF0pKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJcyBjYWxsZWQgd2hlbiBhIGNvbnRyb2wgaXMgZW50ZXJlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uRW50ZXIgKCkge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcblxuICAgIGNvbnN0IHsgZm9udHMsIHJlcGxhY2VGb250cywgYXZhaWxhYmxlVmFyaWF0aW9ucyB9ID0gdGhpcy5fb3B0aW9uc1xuICAgIGNvbnN0IGZvbnRNYW5hZ2VyID0gbmV3IEZvbnRNYW5hZ2VyKHRoaXMuY29udGV4dC51aSwgeyBmb250cywgcmVwbGFjZUZvbnRzLCBhdmFpbGFibGVWYXJpYXRpb25zIH0pXG5cbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldCh7XG4gICAgICBmb250TWFuYWdlclxuICAgIH0pXG5cbiAgICBlZGl0b3IuZmVhdHVyZXMuZGlzYWJsZSgnem9vbScsICdkcmFnJylcbiAgICBlZGl0b3Iuem9vbS5hdXRvKClcblxuICAgIGNvbnN0IHNlbGVjdGVkU3ByaXRlID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ3NlbGVjdGVkU3ByaXRlJylcbiAgICBpZiAoIXNlbGVjdGVkU3ByaXRlKSB7XG4gICAgICB0aGlzLmNyZWF0ZVRleHQoKVxuICAgIH1cblxuICAgIGVkaXRvci5yZW5kZXIoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBsZWF2ZXMgdGhpcyBjb250cm9sXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25MZWF2ZSAoKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuXG4gICAgdGhpcy5zYXZlVGV4dFNldHRpbmdzKClcblxuICAgIGVkaXRvci5mZWF0dXJlcy5lbmFibGUoJ3pvb20nLCAnZHJhZycpXG4gICAgZWRpdG9yLnJlbmRlcigpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgY29udHJvbCByZWFjdHMgdG8gYSBjbGljayBhdCB0aGUgZ2l2ZW4gKHJlbGF0aXZlIHRvIGNhbnZhcykgcG9zaXRpb24uIElmIGl0XG4gICAqIGRvZXMsIGl0IHJldHVybnMgYW4gb2JqZWN0IHdpdGggYSBwcmVwYXJlZCBzaGFyZWQgc3RhdGUgKGUuZy4gc2VsZWN0ZWQgc3ByaXRlKSB0aGF0IGlzIHBhc3NlZFxuICAgKiB0byB0aGlzIGNvbnRyb2wgb24gY3JlYXRpb25cbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBjbGlja1Bvc2l0aW9uXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5FZGl0b3J9IGVkaXRvclxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgY2xpY2tBdFBvc2l0aW9uIChjbGlja1Bvc2l0aW9uLCBlZGl0b3IpIHtcbiAgICBpZiAoIWVkaXRvci5vcGVyYXRpb25zLmV4aXN0cygnc3ByaXRlJykpIHJldHVybiBmYWxzZVxuXG4gICAgY29uc3Qgb3BlcmF0aW9uID0gZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ3Nwcml0ZScpXG4gICAgbGV0IHNwcml0ZXMgPSBvcGVyYXRpb24uZ2V0U3ByaXRlc0F0UG9zaXRpb24oY2xpY2tQb3NpdGlvbiwgZWRpdG9yLmdldE91dHB1dFRleHR1cmVEaW1lbnNpb25zKCkpXG4gICAgICAuZmlsdGVyKChzKSA9PiAhKHMgaW5zdGFuY2VvZiBCcnVzaFNwcml0ZSkpXG5cbiAgICBpZiAoc3ByaXRlcy5sZW5ndGggJiYgc3ByaXRlc1swXSBpbnN0YW5jZW9mIFRleHRTcHJpdGUpIHtcbiAgICAgIHJldHVybiB7IHNlbGVjdGVkU3ByaXRlOiBzcHJpdGVzWzBdIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFzc2V0cyB0aGF0IHNob3VsZCBiZSBwcmVsb2FkZWQgZm9yIHRoaXMgY29udHJvbFxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuRWRpdG9yfSBlZGl0b3JcbiAgICogQHJldHVybiB7U3RyaW5nW119XG4gICAqL1xuICBzdGF0aWMgZ2V0UHJlbG9hZEFzc2V0cyAoZWRpdG9yKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICdlZGl0b3IvY29udHJvbHMvc2hhcmVkL2NhbnZhcy1vdmVybGF5LWNvbnRyb2xzL3RvLWZyb250LnBuZycsXG4gICAgICAnZWRpdG9yL2NvbnRyb2xzL3NoYXJlZC9jYW52YXMtb3ZlcmxheS1jb250cm9scy9kdXBsaWNhdGUucG5nJyxcbiAgICAgICdlZGl0b3IvY29udHJvbHMvc2hhcmVkL2NhbnZhcy1vdmVybGF5LWNvbnRyb2xzL2RlbGV0ZS5wbmcnXG4gICAgXVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGNvbnRyb2wgaXMgZW5hYmxlZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRW5hYmxlZCAoZWRpdG9yKSB7XG4gICAgcmV0dXJuIGVkaXRvci5pc1Rvb2xBbGxvd2VkKCd0ZXh0JykgJiYgZWRpdG9yLmlzVG9vbEVuYWJsZWQoJ3RleHQnKVxuICB9XG59XG5cbkRlc2t0b3BVSS5Db250cm9scy5UZXh0Q29udHJvbHMgPSBUZXh0Q29udHJvbHNcblxuZXhwb3J0IGRlZmF1bHQgVGV4dENvbnRyb2xzXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy90ZXh0L2luZGV4LmpzIiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQge1xuICBSZWFjdCwgYWRvbmlzLCBVdGlscywgQ29uc3RhbnRzLCBDb250cm9sc0NvbXBvbmVudCwgQnV0dG9uQ29tcG9uZW50LCBTY3JvbGxhYmxlTGlzdENvbXBvbmVudCxcbiAgU2xpZGVyQ29udHJvbENvbXBvbmVudCwgQ29sb3JTZWxlY3Rpb25Db21wb25lbnQsIEdyb3VwZWRDb250cm9sc1N0eWxlcyxcbiAgQ29sbGFwc2VTZWN0aW9uQ29tcG9uZW50LCBNb2RhbE1hbmFnZXJcbn0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuXG5pbXBvcnQgRm9udEZhbWlseUFuZFNpemVDb21wb25lbnQgZnJvbSAnLi9mb250LWZhbWlseS1hbmQtc2l6ZS1jb21wb25lbnQnXG5pbXBvcnQgVGV4dENvbnRyb2xzU3R5bGluZ0NvbXBvbmVudCBmcm9tICcuL3RleHQtY29udHJvbHMtc3R5bGluZy1jb21wb25lbnQnXG5pbXBvcnQgVGV4dExlZ2liaWxpdHlQcmVzZXRJdGVtQ29tcG9uZW50IGZyb20gJy4vdGV4dC1sZWdpYmlsaXR5LXByZXNldC1pdGVtLWNvbXBvbmVudCdcblxuY29uc3QgeyBDb250cm9sR3JvdXBMaXN0IH0gPSBHcm91cGVkQ29udHJvbHNTdHlsZXNcbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuY29uc3QgTUFYX0ZPTlRfTE9BRElOR19USU1FID0gMjAwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHRDb250cm9sc0NvbXBvbmVudCBleHRlbmRzIENvbnRyb2xzQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IENvbnRyb2xzQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuICBzdGF0aWMgUm9vdEVsZW1lbnQgPSBDb250cm9sc0NvbXBvbmVudC5Sb290RWxlbWVudFxuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uTmV3VGV4dENsaWNrJyxcbiAgICAgICdfb25Gb250Q2hhbmdlZCcsXG4gICAgICAnX29uRm9udFNpemVDaGFuZ2VkJyxcbiAgICAgICdfb25DaGFyYWN0ZXJTcGFjaW5nQ2hhbmdlZCcsXG4gICAgICAnX29uTGluZVNwYWNpbmdDaGFuZ2VkJyxcbiAgICAgICdfb25Db2xvckNoYW5nZWQnLFxuICAgICAgJ19vbkJhY2tncm91bmRDb2xvckNoYW5nZWQnLFxuICAgICAgJ19vbkFsaWdubWVudENoYW5nZWQnLFxuICAgICAgJ19vblZhcmlhdGlvbkNoYW5nZWQnLFxuICAgICAgJ19vblRleHRTY2FsZWQnXG4gICAgKVxuXG4gICAgdGhpcy5fZXZlbnRzID0ge1xuICAgICAgW0NvbnN0YW50cy5FVkVOVFMuVEVYVF9TQ0FMRURdOiB0aGlzLl9vblRleHRTY2FsZWRcbiAgICB9XG5cbiAgICAvLyBUaGlzIHN0b3JlcyB0aGUgZm9udCBmYW1pbGllcyB3aGljaCB3ZXJlIG5vdCBsb2FkZWQgYW5kIHNob3VsZCBiZSBoaWRkZW5cbiAgICAvLyBpbiB0aGUgZm9udCBzZWxlY3Rpb24gZHJvcGRvd25cbiAgICB0aGlzLl91bmF2YWlsYWJsZUZvbnRGYW1pbGllcyA9IFtdXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgc3VwZXIuY29tcG9uZW50RGlkTW91bnQoKVxuICAgIHRoaXMuX2xvYWRGb250cygpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGT05UIExPQURJTkdcblxuICBfbG9hZEZvbnRzICgpIHtcbiAgICBjb25zdCBmb250TWFuYWdlciA9IHRoaXMuc2hhcmVkU3RhdGUuZm9udE1hbmFnZXJcbiAgICBjb25zdCBmb250TG9hZGVyID0gdGhpcy5jb250ZXh0LnVpLmdldEZvbnRMb2FkZXIoKVxuICAgIGZvbnRMb2FkZXIuc2V0Rm9udHMoZm9udE1hbmFnZXIuZ2V0Rm9udHMoKSlcblxuICAgIGxldCBsb2FkaW5nTW9kYWxcbiAgICBjb25zdCBsb2FkaW5nVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGxvYWRpbmdNb2RhbCA9IE1vZGFsTWFuYWdlci5pbnN0YW5jZS5kaXNwbGF5TG9hZGluZyh0aGlzLl90KCdwZXNkay5lZGl0b3IudGV4dC5sb2FkaW5nRm9udHMnKSwgdHJ1ZSlcbiAgICB9LCBNQVhfRk9OVF9MT0FESU5HX1RJTUUpXG5cbiAgICBjb25zdCBzZWxlY3RlZFNwcml0ZSA9IHRoaXMuc2hhcmVkU3RhdGUuc2VsZWN0ZWRTcHJpdGVcblxuICAgIHRoaXMuX3VuYXZhaWxhYmxlRm9udEZhbWlsaWVzID0gW11cblxuICAgIHJldHVybiBmb250TG9hZGVyLmxvYWQoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGxvYWRpbmdUaW1lb3V0KVxuICAgICAgICBpZiAobG9hZGluZ01vZGFsKSBsb2FkaW5nTW9kYWwuY2xvc2UoKVxuXG4gICAgICAgIC8vIEZvcmNlIGZvbnQgdXBkYXRlIGFmdGVyIGxvYWRpbmdcbiAgICAgICAgc2VsZWN0ZWRTcHJpdGUuZW1pdCgndXBkYXRlJylcbiAgICAgICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgICAgICBlZGl0b3IucmVuZGVyKClcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3JzID0+IHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChsb2FkaW5nVGltZW91dClcbiAgICAgICAgaWYgKGxvYWRpbmdNb2RhbCkgbG9hZGluZ01vZGFsLmNsb3NlKClcblxuICAgICAgICBlcnJvcnMuZm9yRWFjaChlID0+IHtcbiAgICAgICAgICB0aGlzLl91bmF2YWlsYWJsZUZvbnRGYW1pbGllcy5wdXNoKGUuZm9udC5nZXRGb250RmFtaWx5KCkpXG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3QgZm9udHMgPSB0aGlzLl91bmF2YWlsYWJsZUZvbnRGYW1pbGllcy5qb2luKCcsICcpXG5cbiAgICAgICAgLy8gRm9yY2UgZm9udCB1cGRhdGUgYWZ0ZXIgbG9hZGluZ1xuICAgICAgICBzZWxlY3RlZFNwcml0ZS5lbWl0KCd1cGRhdGUnKVxuICAgICAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgICAgIGVkaXRvci5yZW5kZXIoKVxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKClcblxuICAgICAgICBNb2RhbE1hbmFnZXIuaW5zdGFuY2UuZGlzcGxheUVycm9yKFxuICAgICAgICAgIHRoaXMuX3QoJ3Blc2RrLmVkaXRvci50aXRsZS5mb250TG9hZGluZ0Vycm9yJyksXG4gICAgICAgICAgdGhpcy5fdCgncGVzZGsuZWRpdG9yLnRleHQuZm9udExvYWRpbmdFcnJvcicsIHsgZm9udHMgfSlcbiAgICAgICAgKVxuICAgICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgYWZ0ZXIgYSBvcGVyYXRpb24gb3B0aW9uIGhhcyBiZWVuIGNoYW5nZWQgb24gdGhlIFVJLCBzbyB3ZSBjYW4gY3JlYXRlXG4gICAqIGEgaGlzdG9yeSBpdGVtIGFuZCB1cGRhdGUgdGhlIGVkaXRvciBvdXRwdXQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZ3JvdXBlZFxuICAgKi9cbiAgX29uQ2hhbmdlZE9wdGlvbiAobmFtZSwgZ3JvdXBlZCkge1xuICAgIG5hbWUgJiYgdGhpcy5wcm9wcy5jb250cm9scy5hZGRMb2NhbEhpc3RvcnlTbmFwc2hvdChuYW1lLCBncm91cGVkKVxuXG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGVkaXRvci5yZW5kZXIoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgJ05ldyBUZXh0JyBidXR0b24gaGFzIGJlZW4gY2xpY2tlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uTmV3VGV4dENsaWNrICgpIHtcbiAgICB0aGlzLnByb3BzLmNvbnRyb2xzLmNyZWF0ZVRleHQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdGV4dCBhbGlnbm1lbnQgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGFsaWdubWVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQWxpZ25tZW50Q2hhbmdlZCAoYWxpZ25tZW50KSB7XG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXRBbGlnbm1lbnQoYWxpZ25tZW50KVxuICAgIHRoaXMuX29uQ2hhbmdlZE9wdGlvbigndGV4dC1hbGlnbm1lbnQnLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiBhIGRpZmZlcmVudCBmb250IHZhcmlhdGlvbiBoYXMgYmVlbiBzZWxlY3RlZFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHZhcmlhdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uVmFyaWF0aW9uQ2hhbmdlZCAodmFyaWF0aW9uKSB7XG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXRWYXJpYXRpb24odmFyaWF0aW9uKVxuICAgIHRoaXMuX29uQ2hhbmdlZE9wdGlvbignZm9udC1mYW1pbHknLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgZm9udCBmYW1pbHkgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBAcGFyYW0gIHtGb250fSBmb250XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Gb250Q2hhbmdlZCAoZm9udCkge1xuICAgIGNvbnN0IGZpcnN0VmFyaWF0aW9uID0gZm9udC5nZXRWYXJpYXRpb25zKClbMF1cbiAgICB0aGlzLl9vblZhcmlhdGlvbkNoYW5nZWQoZmlyc3RWYXJpYXRpb24pXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBmb250IHNpemUgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGZvbnRTaXplXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Gb250U2l6ZUNoYW5nZWQgKGZvbnRTaXplKSB7XG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXRGb250U2l6ZShmb250U2l6ZSlcbiAgICB0aGlzLl9vbkNoYW5nZWRPcHRpb24oJ2ZvbnQtc2l6ZScsIGZhbHNlKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29sb3IgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5Db2xvcn0gY29sb3JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNvbG9yQ2hhbmdlZCAoY29sb3IpIHtcbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldENvbG9yKGNvbG9yKVxuICAgIHRoaXMuX29uQ2hhbmdlZE9wdGlvbignY29sb3InLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgYmFja2dyb3VuZCBjb2xvciBoYXMgYmVlbiBjaGFuZ2VkXG4gICAqIEBwYXJhbSB7UGhvdG9FZGl0b3JTREsuQ29sb3J9IGNvbG9yXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25CYWNrZ3JvdW5kQ29sb3JDaGFuZ2VkIChjb2xvcikge1xuICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0QmFja2dyb3VuZENvbG9yKGNvbG9yKVxuICAgIHRoaXMuX29uQ2hhbmdlZE9wdGlvbignYmFja2dyb3VuZC1jb2xvcicsIHRydWUpXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGNoYXJhY3RlciBzcGFjaW5nIGlzIGNoYW5nZWQuXG4gICAqIEBwYXJhbSAge051bWJlcn0gdmFsdWVcbiAgICogQHJldHVybiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ2hhcmFjdGVyU3BhY2luZ0NoYW5nZWQgKHZhbHVlKSB7XG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXRDaGFyYWN0ZXJTcGFjaW5nKHZhbHVlKVxuICAgIHRoaXMuX29uQ2hhbmdlZE9wdGlvbigpXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGxpbmUgc3BhY2luZyBpcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGxpbmVTcGFjaW5nXG4gICAqIEByZXR1cm4gQHByaXZhdGVcbiAgICovXG4gIF9vbkxpbmVTcGFjaW5nQ2hhbmdlZCAobGluZVNwYWNpbmcpIHtcbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldExpbmVIZWlnaHQobGluZVNwYWNpbmcpXG4gICAgdGhpcy5fb25DaGFuZ2VkT3B0aW9uKCdsaW5lLXNwYWNpbmcnLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBzY2FsZXMgdGhlIHNwcml0ZSAod2UgbmVlZCB0byB1cGRhdGUgdGhpcyBjb21wb25lbnRcbiAgICogYmVjYXVzZSB0aGUgZm9udCBzaXplIGhhcyBjaGFuZ2VkKVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uVGV4dFNjYWxlZCAoKSB7XG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgZm9udCBmYW1pbHkgYW5kIGZvbnQgc2l6ZSBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuQ29tcG9uZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlckZvbnRGYW1pbHlBbmRTaXplQ29tcG9uZW50ICgpIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkU3ByaXRlLCBpbnB1dERpbWVuc2lvbnMsIGZvbnRNYW5hZ2VyIH0gPSB0aGlzLnNoYXJlZFN0YXRlXG4gICAgY29uc3QgZm9udFNpemUgPSBVdGlscy50b0ZpeGVkKHNlbGVjdGVkU3ByaXRlLmdldEZvbnRTaXplKCkgKiBpbnB1dERpbWVuc2lvbnMubWluKCksIDEpXG4gICAgY29uc3QgbWF4Rm9udFNpemUgPSBNYXRoLnJvdW5kKGlucHV0RGltZW5zaW9ucy55KVxuICAgIGNvbnN0IHNlbGVjdGFibGVGb250cyA9IGZvbnRNYW5hZ2VyLmdldEZvbnRzKCkuZmlsdGVyKGYgPT4gdGhpcy5fdW5hdmFpbGFibGVGb250RmFtaWxpZXMuaW5kZXhPZihmLmdldEZvbnRGYW1pbHkoKSkgPCAwKVxuXG4gICAgcmV0dXJuICg8Rm9udEZhbWlseUFuZFNpemVDb21wb25lbnRcbiAgICAgIG9uVmFsdWVDaGFuZ2U9e3RoaXMuX29uRm9udFNpemVDaGFuZ2VkfVxuICAgICAgb25Gb250Q2hhbmdlPXt0aGlzLl9vbkZvbnRDaGFuZ2VkfVxuICAgICAgZm9udHM9e3NlbGVjdGFibGVGb250c31cbiAgICAgIGRyb3Bkb3duVmFsdWU9e3NlbGVjdGVkU3ByaXRlLmdldEZvbnRGYW1pbHkoKX1cbiAgICAgIGxhYmVsPXt0aGlzLl90KCdwZXNkay50ZXh0LnRpdGxlLmZvbnQnKX1cbiAgICAgIGlucHV0TGFiZWw9e3RoaXMuX3QoJ3Blc2RrLnRleHQudGl0bGUuc2l6ZScpfVxuICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1mb250RmFtaWx5QW5kU2l6ZScgOiB1bmRlZmluZWQpfVxuICAgICAgdmFsdWU9e2ZvbnRTaXplfVxuICAgICAgbWluVmFsdWU9ezEwfVxuICAgICAgbWF4VmFsdWU9e21heEZvbnRTaXplfSAvPilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0aWVzIGZvciB0aGUgcm9vdCBlbGVtZW50XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRSb290UHJvcHMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzc05hbWU6ICh0ZXN0ID8gJ2pzLXRleHRDb250cm9scycgOiB1bmRlZmluZWQpLFxuICAgICAgd2l0aEJvcmRlclRvcDogdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29udHJvbCdzIGNvbnRlbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIF9yZW5kZXJDb250ZW50ICgpIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkU3ByaXRlLCBmb250TWFuYWdlciB9ID0gdGhpcy5zaGFyZWRTdGF0ZVxuICAgIGlmICghc2VsZWN0ZWRTcHJpdGUpIHJldHVybiBudWxsXG5cbiAgICBjb25zdCBmb250ID0gZm9udE1hbmFnZXIuZ2V0Rm9udEJ5Rm9udEZhbWlseShzZWxlY3RlZFNwcml0ZS5nZXRGb250RmFtaWx5KCkpXG4gICAgY29uc3QgZm9udFZhcmlhdGlvbiA9IGZvbnRNYW5hZ2VyLmdldFZhcmlhdGlvbkJ5SWRlbnRpZmllcihzZWxlY3RlZFNwcml0ZS5nZXRGb250SWRlbnRpZmllcigpKVxuXG4gICAgY29uc3QgeyBjb2xvciwgYmFja2dyb3VuZENvbG9yLCBhbGlnbm1lbnQsIGxpbmVIZWlnaHQgfSA9IHRoaXMuc2hhcmVkU3RhdGVcblxuICAgIHJldHVybiAoPFNjcm9sbGFibGVMaXN0Q29tcG9uZW50XG4gICAgICBkaXJlY3Rpb249J3ZlcnRpY2FsJ1xuICAgICAgaW5uZXJMaXN0UmVmPXtlbCA9PiB7IHRoaXMuX2xpc3QgPSBlbCB9fVxuICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fc2Nyb2xsYmFyID0gZWwgfX0+XG4gICAgICA8VG9wU2VjdGlvbiBjbGFzc05hbWU9eyh0ZXN0ID8gJ2ZpeGVkLXRleHQtY29udHJvbHMnIDogdW5kZWZpbmVkKX0+XG4gICAgICAgIDxCdXR0b25Db21wb25lbnRcbiAgICAgICAgICB0aXRsZT17dGhpcy5fdCgncGVzZGsudGV4dC5idXR0b24ubmV3Jyl9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5fb25OZXdUZXh0Q2xpY2t9XG4gICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1uZXdUZXh0QnV0dG9uJyA6IHVuZGVmaW5lZCl9IC8+XG4gICAgICAgIDxEZXRhaWxzPlxuICAgICAgICAgIHt0aGlzLl9yZW5kZXJGb250RmFtaWx5QW5kU2l6ZUNvbXBvbmVudCgpfVxuICAgICAgICAgIDxUZXh0Q29udHJvbHNTdHlsaW5nQ29tcG9uZW50XG4gICAgICAgICAgICBhbGlnbm1lbnQ9e2FsaWdubWVudH1cbiAgICAgICAgICAgIHZhcmlhdGlvbnM9e2ZvbnQuZ2V0VmFyaWF0aW9ucygpfVxuICAgICAgICAgICAgc2VsZWN0ZWRWYXJpYXRpb249e2ZvbnRWYXJpYXRpb259XG4gICAgICAgICAgICBvbkFsaWdubWVudENoYW5nZT17dGhpcy5fb25BbGlnbm1lbnRDaGFuZ2VkfVxuICAgICAgICAgICAgb25WYXJpYXRpb25DaGFuZ2U9e3RoaXMuX29uVmFyaWF0aW9uQ2hhbmdlZH0gLz5cbiAgICAgICAgPC9EZXRhaWxzPlxuICAgICAgICA8Q29sb3JTZWxlY3Rpb25Db21wb25lbnRcbiAgICAgICAgICB2YWx1ZT17Y29sb3J9XG4gICAgICAgICAgb25Db2xvclBpY2tlclRvZ2dsZT17dGhpcy5maXhTdHlsZXN9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuX29uQ29sb3JDaGFuZ2VkfSAvPlxuICAgICAgPC9Ub3BTZWN0aW9uPlxuICAgICAgPFNlY3Rpb25MaXN0PlxuICAgICAgICA8Q29sbGFwc2VTZWN0aW9uQ29tcG9uZW50IGtleT0nYmFja2dyb3VuZCcgdGl0bGU9e3RoaXMuX3QoJ3Blc2RrLnRleHQudGl0bGUuYmFja2dyb3VuZCcpfSBhbHdheXNFeHBhbmRlZCBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWJnQ29sb3JDb2xsYXBzZScgOiB1bmRlZmluZWQpfT5cbiAgICAgICAgICA8Q29sb3JTZWxlY3Rpb25Db21wb25lbnRcbiAgICAgICAgICAgIHZhbHVlPXtiYWNrZ3JvdW5kQ29sb3J9XG4gICAgICAgICAgICBvbkNvbG9yUGlja2VyVG9nZ2xlPXt0aGlzLmZpeFN0eWxlc31cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLl9vbkJhY2tncm91bmRDb2xvckNoYW5nZWR9IC8+XG4gICAgICAgIDwvQ29sbGFwc2VTZWN0aW9uQ29tcG9uZW50PlxuICAgICAgICA8Q29sbGFwc2VTZWN0aW9uQ29tcG9uZW50IGtleT0nc3BhY2luZycgdGl0bGU9e3RoaXMuX3QoJ3Blc2RrLnRleHQudGl0bGUuc3BhY2luZycpfSBhbHdheXNFeHBhbmRlZD5cbiAgICAgICAgICA8U2xpZGVyQ29udHJvbENvbXBvbmVudFxuICAgICAgICAgICAgbGFiZWw9e3RoaXMuX3QoJ3Blc2RrLnRleHQudGl0bGUubGluZScpfVxuICAgICAgICAgICAgbWluVmFsdWU9ezAuNX1cbiAgICAgICAgICAgIG1heFZhbHVlPXszfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy1saW5lU3BhY2luZycgOiB1bmRlZmluZWQpfVxuICAgICAgICAgICAgdmFsdWU9e1V0aWxzLnRvRml4ZWQobGluZUhlaWdodCwgMSl9XG4gICAgICAgICAgICBvblNsaWRlclZhbHVlQ2hhbmdlPXt0aGlzLl9vbkxpbmVTcGFjaW5nQ2hhbmdlZH1cbiAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e3RoaXMuX29uTGluZVNwYWNpbmdDaGFuZ2VkfSAvPlxuICAgICAgICA8L0NvbGxhcHNlU2VjdGlvbkNvbXBvbmVudD5cbiAgICAgIDwvU2VjdGlvbkxpc3Q+XG4gICAgPC9TY3JvbGxhYmxlTGlzdENvbXBvbmVudD4pXG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTElOR1xuY29uc3QgVG9wU2VjdGlvbiA9IGFkb25pcy5kaXYoe1xuICBwYWRkaW5nOiAnMjVweCcsXG4gIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCAjMUIxQjFFJ1xufSlcblxuY29uc3QgU2VjdGlvbkxpc3QgPSBhZG9uaXMoQ29udHJvbEdyb3VwTGlzdCkudWwoe1xuICBvdmVyZmxvd1g6ICd2aXNpYmxlJyxcbiAgb3ZlcmZsb3dZOiAndmlzaWJsZScsXG4gIHdpZHRoOiAnMTAwJSdcbn0pXG5cbmNvbnN0IERldGFpbHMgPSBhZG9uaXMuZGl2KHtcbiAgJ21hcmdpbi10b3AnOiAnMjVweCdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy90ZXh0L3RleHQtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIFZhbHVlU2VsZWN0aW9uQ29tcG9uZW50LCBEcm9wZG93bkNvbXBvbmVudCB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvbnRGYW1pbHlBbmRTaXplQ29tcG9uZW50IGV4dGVuZHMgVmFsdWVTZWxlY3Rpb25Db21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gVmFsdWVTZWxlY3Rpb25Db21wb25lbnQuY29udGV4dFR5cGVzXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgdGhpcy5fdXBkYXRlRm9udHNNYXAoKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIGEgbW91bnRlZCBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzXG4gICAqIEBwYXJhbSAge09iamVjdH0gbmV4dFByb3BzXG4gICAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcbiAgICBzdXBlci5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcylcbiAgICBpZiAobmV4dFByb3BzLmZvbnRzICE9PSB0aGlzLnByb3BzLmZvbnRzKSB7XG4gICAgICB0aGlzLl91cGRhdGVGb250c01hcCgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGZvbnRzIG1hcCAoPEZvbnRGYW1pbHksIEZvbnQ+KVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZUZvbnRzTWFwICgpIHtcbiAgICB0aGlzLl9mb250c01hcCA9IHt9XG4gICAgdGhpcy5wcm9wcy5mb250cy5mb3JFYWNoKGZvbnQgPT4ge1xuICAgICAgdGhpcy5fZm9udHNNYXBbZm9udC5nZXRGb250RmFtaWx5KCldID0gZm9udFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgbGVmdCBwYXJ0IG9mIHRoaXMgVmFsdWVTZWxlY3Rpb25Db21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJMZWZ0UGFydCAoKSB7XG4gICAgY29uc3QgZm9udEZhbWlseSA9IHRoaXMuc2hhcmVkU3RhdGUuZm9udEZhbWlseVxuICAgIGNvbnN0IGZvbnQgPSB0aGlzLl9mb250c01hcFtmb250RmFtaWx5XVxuICAgIHJldHVybiAoPGRpdiByZWY9J3Jvb3QnIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtZm9udERyb3Bkb3duJyA6IHVuZGVmaW5lZCl9PlxuICAgICAgPERyb3Bkb3duQ29tcG9uZW50XG4gICAgICAgIHZhbHVlPXtmb250fVxuICAgICAgICBzdHlsZT17eyBmb250RmFtaWx5OiBmb250RmFtaWx5IH19XG4gICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtZm9udERyb3Bkb3duJyA6IHVuZGVmaW5lZCl9XG4gICAgICAgIG9uQ2hhbmdlPXt0aGlzLnByb3BzLm9uRm9udENoYW5nZX0+XG4gICAgICAgIHt0aGlzLnByb3BzLmZvbnRzLm1hcChmb250ID0+XG4gICAgICAgICAgKDxEcm9wZG93bkNvbXBvbmVudC5JdGVtXG4gICAgICAgICAgICB2YWx1ZT17Zm9udH1cbiAgICAgICAgICAgIGtleT17Zm9udC5nZXRGb250RmFtaWx5KCl9XG4gICAgICAgICAgICBzdHlsZT17eyBmb250RmFtaWx5OiBmb250LmdldEZvbnRGYW1pbHkoKSB9fT5cbiAgICAgICAgICAgIHtmb250LmdldEZvbnRGYW1pbHkoKX1cbiAgICAgICAgICA8L0Ryb3Bkb3duQ29tcG9uZW50Lkl0ZW0+KVxuICAgICAgICApfVxuICAgICAgPC9Ecm9wZG93bkNvbXBvbmVudD5cbiAgICA8L2Rpdj4pXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3RleHQvZm9udC1mYW1pbHktYW5kLXNpemUtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6LyoqXG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgUmVhY3QsIGFkb25pcywgQmFzZUNvbXBvbmVudCwgRHJvcGRvd25Db21wb25lbnQgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5cbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0Q29udHJvbHNTdHlsaW5nQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIGFuIGFsaWdubWVudCBpdGVtXG4gICAqIEBwYXJhbSAge09iamVjdH0gaXRlbVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQWxpZ25tZW50SXRlbUNsaWNrIChpdGVtKSB7XG4gICAgdGhpcy5wcm9wcy5vbkFsaWdubWVudENoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5vbkFsaWdubWVudENoYW5nZShpdGVtLnRpdGxlKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgYSBzdHlsZSBpdGVtXG4gICAqIEBwYXJhbSAge09iamVjdH0gaXRlbVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uU3R5bGVJdGVtQ2xpY2sgKGl0ZW0pIHtcbiAgICBzd2l0Y2ggKGl0ZW0udGl0bGUpIHtcbiAgICAgIGNhc2UgJ2JvbGQnOlxuICAgICAgICB0aGlzLnByb3BzLm9uU3R5bGVDaGFuZ2UgJiZcbiAgICAgICAgICB0aGlzLnByb3BzLm9uU3R5bGVDaGFuZ2UoJ2ZvbnRXZWlnaHQnLCB0aGlzLnByb3BzLmJvbGQgPyAnbm9ybWFsJyA6ICdib2xkJylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2l0YWxpYyc6XG4gICAgICAgIHRoaXMucHJvcHMub25TdHlsZUNoYW5nZSAmJlxuICAgICAgICAgIHRoaXMucHJvcHMub25TdHlsZUNoYW5nZSgnZm9udFN0eWxlJywgdGhpcy5wcm9wcy5pdGFsaWMgPyAnbm9ybWFsJyA6ICdpdGFsaWMnKVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBhbGlnbm1lbnQgaXRlbXNcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudFtdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlckFsaWdtZW50SXRlbXMgKCkge1xuICAgIGNvbnN0IHsgYWxpZ25tZW50IH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgaXRlbXMgPSBbXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAnbGVmdCcsXG4gICAgICAgIHNlbGVjdGVkOiBhbGlnbm1lbnQgPT09ICdsZWZ0JyxcbiAgICAgICAgaWNvblBhdGg6ICdlZGl0b3IvY29udHJvbHMvdGV4dC9hbGlnbi1sZWZ0LnBuZycsXG4gICAgICAgIHNlbGVjdGVkSWNvblBhdGg6ICdlZGl0b3IvY29udHJvbHMvdGV4dC9hbGlnbi1sZWZ0LXNlbGVjdGVkLnBuZydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAnY2VudGVyJyxcbiAgICAgICAgc2VsZWN0ZWQ6IGFsaWdubWVudCA9PT0gJ2NlbnRlcicsXG4gICAgICAgIGljb25QYXRoOiAnZWRpdG9yL2NvbnRyb2xzL3RleHQvYWxpZ24tY2VudGVyLnBuZycsXG4gICAgICAgIHNlbGVjdGVkSWNvblBhdGg6ICdlZGl0b3IvY29udHJvbHMvdGV4dC9hbGlnbi1jZW50ZXItc2VsZWN0ZWQucG5nJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICdyaWdodCcsXG4gICAgICAgIHNlbGVjdGVkOiBhbGlnbm1lbnQgPT09ICdyaWdodCcsXG4gICAgICAgIGljb25QYXRoOiAnZWRpdG9yL2NvbnRyb2xzL3RleHQvYWxpZ24tcmlnaHQucG5nJyxcbiAgICAgICAgc2VsZWN0ZWRJY29uUGF0aDogJ2VkaXRvci9jb250cm9scy90ZXh0L2FsaWduLXJpZ2h0LXNlbGVjdGVkLnBuZydcbiAgICAgIH1cbiAgICBdXG5cbiAgICByZXR1cm4gaXRlbXMubWFwKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBpY29uUGF0aCA9IHRoaXMuX2dldEFzc2V0UGF0aChpdGVtLmljb25QYXRoLCB0cnVlKVxuICAgICAgY29uc3Qgc2VsZWN0ZWRJY29uUGF0aCA9IHRoaXMuX2dldEFzc2V0UGF0aChpdGVtLnNlbGVjdGVkSWNvblBhdGgsIHRydWUpXG4gICAgICByZXR1cm4gKDxJdGVtQ29udGFpbmVyXG4gICAgICAgIGtleT17aXRlbS50aXRsZX1cbiAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy10ZXh0QWxpZ25tZW50JyA6IHVuZGVmaW5lZCl9XG4gICAgICAgIGRhdGEtYWxpZ25tZW50PXtpdGVtLnRpdGxlfVxuICAgICAgICBkYXRhLXNlbGVjdGVkPXtpdGVtLnNlbGVjdGVkfVxuICAgICAgICBvbkNsaWNrPXt0aGlzLl9vbkFsaWdubWVudEl0ZW1DbGljay5iaW5kKHRoaXMsIGl0ZW0pfT5cbiAgICAgICAgPEl0ZW1JbWFnZVxuICAgICAgICAgIHZpc2libGVcbiAgICAgICAgICBzcmM9e2ljb25QYXRofSAvPlxuICAgICAgICA8SXRlbUltYWdlXG4gICAgICAgICAgdmlzaWJsZT17aXRlbS5zZWxlY3RlZH1cbiAgICAgICAgICBzcmM9e3NlbGVjdGVkSWNvblBhdGh9IC8+XG4gICAgICA8L0l0ZW1Db250YWluZXI+KVxuICAgIH0sIHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgc3R5bGVzIGRyb3Bkb3duXG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyU3R5bGVzRHJvcGRvd24gKCkge1xuICAgIGNvbnN0IHsgdmFyaWF0aW9ucywgc2VsZWN0ZWRWYXJpYXRpb24gfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKDxEcm9wZG93bkNvbXBvbmVudFxuICAgICAgdmFsdWU9e3NlbGVjdGVkVmFyaWF0aW9ufVxuICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMub25WYXJpYXRpb25DaGFuZ2V9XG4gICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXN0eWxlRHJvcGRvd24nIDogdW5kZWZpbmVkKX1cbiAgICAgIGVuYWJsZU1lbnU9e3ZhcmlhdGlvbnMubGVuZ3RoID4gMX1cbiAgICA+XG4gICAgICB7dmFyaWF0aW9ucy5tYXAodmFyaWF0aW9uID0+IChcbiAgICAgICAgPERyb3Bkb3duQ29tcG9uZW50Lkl0ZW1cbiAgICAgICAgICB2YWx1ZT17dmFyaWF0aW9ufVxuICAgICAgICAgIGtleT17dmFyaWF0aW9uLmdldElkZW50aWZpZXIoKX1cbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgZm9udEZhbWlseTogdmFyaWF0aW9uLmdldEZvbnRGYW1pbHkoKSxcbiAgICAgICAgICAgIGZvbnRTdHlsZTogdmFyaWF0aW9uLmdldEZvbnRTdHlsZSgpLFxuICAgICAgICAgICAgZm9udFdlaWdodDogdmFyaWF0aW9uLmdldEZvbnRXZWlnaHQoKVxuICAgICAgICAgIH19PlxuICAgICAgICAgIHt2YXJpYXRpb24uZ2V0TGFiZWwoKX1cbiAgICAgICAgPC9Ecm9wZG93bkNvbXBvbmVudC5JdGVtPlxuICAgICAgKSl9XG4gICAgPC9Ecm9wZG93bkNvbXBvbmVudD4pXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKDxUZXh0Q29udHJvbHNTdHlsaW5nXG4gICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXRleHRTdHlsaW5nQ29udHJvbHMnIDogdW5kZWZpbmVkKX0+XG4gICAgICA8R3JvdXA+XG4gICAgICAgIHt0aGlzLl9yZW5kZXJTdHlsZXNEcm9wZG93bigpfVxuICAgICAgPC9Hcm91cD5cbiAgICAgIDxHcm91cCByaWdodD5cbiAgICAgICAge3RoaXMuX3JlbmRlckFsaWdtZW50SXRlbXMoKX1cbiAgICAgIDwvR3JvdXA+XG4gICAgPC9UZXh0Q29udHJvbHNTdHlsaW5nPilcbiAgfVxufVxuXG5jb25zdCBUZXh0Q29udHJvbHNTdHlsaW5nID0gYWRvbmlzLmRpdih7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzI0cHgnLFxuICBkaXNwbGF5OiAndGFibGUnLFxuICB0YWJsZUxheW91dDogJ2ZpeGVkJyxcbiAgJ21hcmdpbi1ib3R0b20nOiAnMTZweCdcbn0pXG5cbmNvbnN0IEdyb3VwID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbn0sIHtcbiAgcmlnaHQ6IHtcbiAgICB0ZXh0QWxpZ246ICdyaWdodCdcbiAgfVxufSlcblxuY29uc3QgSXRlbUNvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgd2lkdGg6ICcyNHB4JyxcbiAgaGVpZ2h0OiAnMjRweCcsXG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICBtYXJnaW5SaWdodDogJzJweCcsXG4gIG9wYWNpdHk6IDAuOCxcbiAgdHJhbnNpdGlvbjogdGhlbWUgPT4gYG9wYWNpdHkgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259IGVhc2Utb3V0YCxcblxuICAnJjpsYXN0LWNoaWxkJzoge1xuICAgIG1hcmdpblJpZ2h0OiAwXG4gIH0sXG5cbiAgJzpob3Zlcic6IHtcbiAgICBvcGFjaXR5OiAxLjBcbiAgfVxufSwge1xuICBzZWxlY3RlZDoge1xuICAgIHRyYW5zaXRpb246IHRoZW1lID0+IGBvcGFjaXR5ICR7dGhlbWUudHJhbnNpdGlvbkR1cmF0aW9ufSBlYXNlLWluYCxcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn0pXG5cbmNvbnN0IEl0ZW1JbWFnZSA9IGFkb25pcy5pbWcoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAuMnMgZWFzZS1vdXQnLFxuICBoZWlnaHQ6ICcyNHB4JyxcbiAgd2lkdGg6ICcyNHB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGJvcmRlcjogJ25vbmUnLFxuICBvcGFjaXR5OiAwXG59LCB7XG4gIHZpc2libGU6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy90ZXh0L3RleHQtY29udHJvbHMtc3R5bGluZy1jb21wb25lbnQuanN4IiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQge1xuICBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCBTbGlkZXJDb21wb25lbnQsIENvbnRyb2xzU3R5bGVzXG59IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmNvbnN0IHsgQ29udHJvbEl0ZW0sIENvbnRyb2xJdGVtVGl0bGUgfSA9IENvbnRyb2xzU3R5bGVzXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExlZ2liaWxpdHlQcmVzZXRJdGVtQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuX2JpbmRBbGwoXG4gICAgICAnX29uQ2xpY2snLFxuICAgICAgJ19vbk1vdXNlRW50ZXInLFxuICAgICAgJ19vbk1vdXNlTGVhdmUnLFxuICAgICAgJ19vbkludGVuc2l0eUNoYW5nZWQnXG4gICAgKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgIGhvdmVyaW5nOiBmYWxzZSxcbiAgICAgIGludGVuc2l0eTogNTBcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGl0ZW0uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25DbGljayAoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzZWxlY3RlZDogdHJ1ZVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiB0aGUgbW91c2UgZW50ZXJzIHRoZSBuYXZpZ2F0aW9uIGJhci5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbk1vdXNlRW50ZXIgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaG92ZXJpbmc6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIG1vdXNlIGxlYXZlcyB0aGUgbmF2aWdhdGlvbiBiYXIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Nb3VzZUxlYXZlICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGhvdmVyaW5nOiBmYWxzZVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGludGVuc2l0eSBjaGFuZ2VzLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHZhbHVlIFRoZSBuZXcgaW50ZW5zaXR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25JbnRlbnNpdHlDaGFuZ2VkICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaW50ZW5zaXR5OiB2YWx1ZVxuICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkLCBob3ZlcmluZywgaW50ZW5zaXR5IH0gPSB0aGlzLnN0YXRlXG5cbiAgICByZXR1cm4gKDxMZWdpYmlsaXR5UHJlc2V0SXRlbVxuICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLl9vbk1vdXNlRW50ZXJ9XG4gICAgICBvbk1vdXNlTGVhdmU9e3RoaXMuX29uTW91c2VMZWF2ZX1cbiAgICAgIG9uQ2xpY2s9e3RoaXMuX29uQ2xpY2t9XG4gICAgICBzZWxlY3RlZD17c2VsZWN0ZWR9PlxuICAgICAgeyAhKHNlbGVjdGVkICYmIGhvdmVyaW5nKSAmJiA8VGl0bGUgc2VsZWN0ZWQ9e3NlbGVjdGVkfT57dGhpcy5wcm9wcy50aXRsZX08L1RpdGxlPiB9XG4gICAgICB7IHNlbGVjdGVkICYmIGhvdmVyaW5nICYmXG4gICAgICAgIDxTbGlkZXI+XG4gICAgICAgICAgPFNsaWRlckNvbXBvbmVudFxuICAgICAgICAgICAgbWluVmFsdWU9ezB9XG4gICAgICAgICAgICBtYXhWYWx1ZT17MTAwfVxuICAgICAgICAgICAgdmFsdWVVbml0PScnXG4gICAgICAgICAgICBtaWRkbGVEb3Q9e2ZhbHNlfVxuICAgICAgICAgICAgdmFsdWU9e2ludGVuc2l0eX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLl9vbkludGVuc2l0eUNoYW5nZWR9IC8+XG4gICAgICAgIDwvU2xpZGVyPlxuICAgICAgfVxuICAgIDwvTGVnaWJpbGl0eVByZXNldEl0ZW0+KVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxJTkdcblxuY29uc3QgTGVnaWJpbGl0eVByZXNldEl0ZW0gPSBhZG9uaXMoQ29udHJvbEl0ZW0pLmRpdih7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBoZWlnaHQ6ICc0MHB4JyxcbiAgbWFyZ2luQm90dG9tOiAnOHB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG5cbiAgJzpsYXN0LWNoaWxkJzoge1xuICAgIG1hcmdpbkJvdHRvbTogMFxuICB9LFxuICAnOmhvdmVyJzoge1xuICAgIGJhY2tncm91bmQ6IHRoZW1lID0+IGByZ2JhKCR7dGhlbWUuaGlnaGxpZ2h0Q29sb3JSR0J9LCAwLjUpYFxuICB9XG59LCB7XG4gIHNlbGVjdGVkOiB7XG4gICAgYmFja2dyb3VuZDogdGhlbWUgPT4gYHJnYmEoJHt0aGVtZS5oaWdobGlnaHRDb2xvclJHQn0sIDAuNSlgXG4gIH1cbn0pXG5cbmNvbnN0IFRpdGxlID0gYWRvbmlzKENvbnRyb2xJdGVtVGl0bGUpLmRpdih7XG4gIHBvc2l0aW9uOiAnc3RhdGljJyxcbiAgbGluZUhlaWdodDogJzQwcHgnLFxuICBjb2xvcjogdGhlbWUgPT4gdGhlbWUudGV4dENvbG9yLFxuICBmb250U2l6ZTogJzEycHgnLFxuICBsZXR0ZXJTcGFjaW5nOiAnNHB4JyxcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn0sIHtcbiAgc2VsZWN0ZWQ6IHtcbiAgICB0ZXh0U2hhZG93OiAnMCAwIDhweCByZ2JhKDAsMCwwLDAuODApJ1xuICB9XG59KVxuXG5jb25zdCBTbGlkZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHpJbmRleDogMixcbiAgaGVpZ2h0OiAnMTVweCcsXG4gIHRvcDogJzUwJScsXG4gIG1hcmdpblRvcDogJy02cHgnLFxuICBsZWZ0OiAnMTVweCcsXG4gIHJpZ2h0OiAnMTVweCdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy90ZXh0L3RleHQtbGVnaWJpbGl0eS1wcmVzZXQtaXRlbS1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBPcGVyYXRpb25zIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsnXG5pbXBvcnQgU3ByaXRlc0NhbnZhc0NvbnRyb2xzQ29tcG9uZW50IGZyb20gJy4uL3NoYXJlZC9zcHJpdGVzL3Nwcml0ZXMtY2FudmFzLWNvbnRyb2xzLWNvbXBvbmVudCdcblxubGV0IFRleHRTcHJpdGVcbmlmIChPcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbikge1xuICBUZXh0U3ByaXRlID0gT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uVGV4dFNwcml0ZVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0Q2FudmFzQ29udHJvbHNDb21wb25lbnQgZXh0ZW5kcyBTcHJpdGVzQ2FudmFzQ29udHJvbHNDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gU3ByaXRlc0NhbnZhc0NvbnRyb2xzQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIC8qKlxuICAgKiBTZWxlY3RzIHRoZSBuZXh0IHNwcml0ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NlbGVjdE5leHRTcHJpdGUgKCkge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ29wZXJhdGlvbicpXG4gICAgY29uc3Qgc3ByaXRlcyA9IG9wZXJhdGlvbi5nZXRTcHJpdGVzKCkuc2xpY2UoMCkucmV2ZXJzZSgpXG5cbiAgICBsZXQgc3ByaXRlLCBuZXh0U3ByaXRlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcHJpdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzcHJpdGUgPSBzcHJpdGVzW2ldXG4gICAgICBpZiAoc3ByaXRlIGluc3RhbmNlb2YgVGV4dFNwcml0ZSkge1xuICAgICAgICBuZXh0U3ByaXRlID0gc3ByaXRlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFuZXh0U3ByaXRlKSB7XG4gICAgICB0aGlzLnByb3BzLmNvbnRyb2xzLnNraXBIaXN0b3J5ID0gdHJ1ZVxuICAgICAgdGhpcy5jb250ZXh0LnNjcmVlbi5zd2l0Y2hUb0NvbnRyb2xzKCdkZWZhdWx0JylcbiAgICB9XG4gICAgdGhpcy5zZXRTaGFyZWRTdGF0ZSh7IHNlbGVjdGVkU3ByaXRlOiBuZXh0U3ByaXRlIH0pXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBzcHJpdGUgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9uc1xuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uU3ByaXRlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NyZWF0ZVNwcml0ZSAob3B0aW9ucykge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ29wZXJhdGlvbicpXG4gICAgcmV0dXJuIG9wZXJhdGlvbi5jcmVhdGVUZXh0KG9wdGlvbnMpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3RleHQvdGV4dC1jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgTWF0aCBhcyBQTWF0aCwgVXRpbHMgYXMgU0RLVXRpbHMgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCBEZXNrdG9wVUksIHsgVXRpbHMsIEJhc2VDb250cm9scywgTW9kYWxNYW5hZ2VyLCBUcmFuc2Zvcm1SYXRpb01hbmFnZXIgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgVHJhbnNmb3JtQ2FudmFzQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi90cmFuc2Zvcm0tY2FudmFzLWNvbnRyb2xzLWNvbXBvbmVudCdcbmltcG9ydCBUcmFuc2Zvcm1Db250cm9sc0NvbXBvbmVudCBmcm9tICcuL3RyYW5zZm9ybS1jb250cm9scy1jb21wb25lbnQnXG5cbmNvbnN0IHsgVmVjdG9yMiB9ID0gUE1hdGhcbmNvbnN0IE1JTl9ESU1FTlNJT05TID0gbmV3IFZlY3RvcjIoNTAsIDUwKVxuXG4vKipcbiAqIFRoZSBDb250cm9scyBmb3IgdGhlIFRyYW5zZm9ybSB0b29sLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5Db250cm9sc1xuICogQGV4dGVuZHMgUGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkJhc2VDb250cm9sc1xuICovXG5jbGFzcyBUcmFuc2Zvcm1Db250cm9scyBleHRlbmRzIEJhc2VDb250cm9scyB7XG4gIHN0YXRpYyBjbGlja0F0UG9zaXRpb24gPSBCYXNlQ29udHJvbHMuY2xpY2tBdFBvc2l0aW9uXG5cbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZXNlIGNvbnRyb2xzQ29tcG9uZW50XG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWRlbnRpZmllciA9ICd0cmFuc2Zvcm0nXG5cbiAgLyoqXG4gICAqIFRoZSBjb250cm9scyBjb21wb25lbnQgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtSZWFjdC5Db21wb25lbnR9XG4gICAqL1xuICBzdGF0aWMgY29udHJvbHNDb21wb25lbnQgPSBUcmFuc2Zvcm1Db250cm9sc0NvbXBvbmVudFxuXG4gIC8qKlxuICAgKiBUaGUgY2FudmFzIGNvbXBvbmVudCBmb3IgdGhlc2UgY29udHJvbHNcbiAgICogQHR5cGUge1JlYWN0LkNvbXBvbmVudH1cbiAgICovXG4gIHN0YXRpYyBjYW52YXNDb250cm9sc0NvbXBvbmVudCA9IFRyYW5zZm9ybUNhbnZhc0NvbnRyb2xzQ29tcG9uZW50XG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHBhdGggb2YgdGhpcyBjb250cm9sXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWNvblBhdGggPSAnZWRpdG9yL2NvbnRyb2xzL3RyYW5zZm9ybS9pY29uLnBuZydcblxuICAvKipcbiAgICogVGhlIGFjdGl2ZSBpY29uIHBhdGggb2YgdGhpcyBjb250cm9sXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgYWN0aXZlSWNvblBhdGggPSAnZWRpdG9yL2NvbnRyb2xzL3RyYW5zZm9ybS9pY29uLWFjdGl2ZS5wbmcnXG5cbiAgLyoqXG4gICAqIFRoZSBvcGVyYXRpb25zIHJlcXVpcmVkIGZvciB0aGlzIGNvbnRyb2wgdG8gd29yayBwcm9wZXJseVxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgcmVxdWlyZWRPcGVyYXRpb25zID0gWyd0cmFuc2Zvcm0nLCAnb3JpZW50YXRpb24nXVxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBvcHRpb25zIGZvciB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByb3BlcnR5IHtPYmplY3RbXX0gW3JhdGlvcyA9IFtdXVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtyZXBsYWNlUmF0aW9zID0gZmFsc2VdXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nW119IFthdmFpbGFibGVSYXRpb3MgPSBudWxsXVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtlbmFibGVSb3RhdGlvbiA9IHRydWVdXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gW2VuYWJsZVN0cmFpZ2h0ZW4gPSB0cnVlXVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtlbmFibGVGbGlwID0gdHJ1ZV1cbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBjYXRlZ29yaWVzOiBbXSxcbiAgICByZXBsYWNlQ2F0ZWdvcmllczogZmFsc2UsXG4gICAgYXZhaWxhYmxlUmF0aW9zOiBudWxsLFxuICAgIGVuYWJsZVJvdGF0aW9uOiB0cnVlLFxuICAgIGVuYWJsZVN0cmFpZ2h0ZW46IHRydWUsXG4gICAgZW5hYmxlRmxpcDogdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZXJhdGlvbnMgd2hpY2ggd2lsbCB0cmlnZ2VyIFVJIHVwZGF0ZXMgb24gdGhpcyBjb250cm9scy5cbiAgICogQHR5cGUge1N0cmluZ1tdfVxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgdXBkYXRhYmxlT3BlcmF0aW9ucyA9IFsndHJhbnNmb3JtJywgJ29yaWVudGF0aW9uJ11cblxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGVkaXRvciB3aWxsIHN3aXRjaCB0byB0aGUgZGVmYXVsdCBjb250cm9scyB3aGVuIGFueSBvZiB0aGUgdXBkYXRhYmxlT3BlcmF0aW9ucyBpcyByZW1vdmVkLlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICogQHN0YXRpY1xuICAgKi9cbiAgc3RhdGljIHN3aXRjaFRvRGVmYXVsdENvbnRyb2xzT25SZW1vdmFsID0gZmFsc2VcblxuICAvKipcbiAgICogTWFwcyB0aGUgb3BlcmF0aW9ucyBzdGF0ZSB0byBhIHNoYXJlZCBzdGF0ZSBvYmplY3QuIENhbGxlZCB3aGVuZXZlciBvbmUgb2ZcbiAgICogdGhlIHVwZGF0YWJsZU9wZXJhdGlvbnMgaXMgbW9kaWZpZWQsIGNyZWF0ZWQgb3IgcmVtb3ZlZC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3BlcmF0aW9uc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpbml0aWFsPWZhbHNlXVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIEFuIG9iamVjdCB0aGF0IHdpbGwgYmUgcGFzc2V0IHRvIHNoYXJlZFN0YXRlLnNldFxuICAgKi9cbiAgc3RhdGljIG1hcE9wZXJhdGlvbnNUb1NoYXJlZFN0YXRlIChvcGVyYXRpb25zLCBpbml0aWFsID0gZmFsc2UsIHByZXZpb3VzU3RhdGUgPSB7fSkge1xuICAgIGNvbnN0IHRyYW5zZm9ybU9wZXJhdGlvbiA9IG9wZXJhdGlvbnMuZ2V0KCd0cmFuc2Zvcm0nKVxuICAgIGNvbnN0IG9yaWVudGF0aW9uT3BlcmF0aW9uID0gb3BlcmF0aW9ucy5nZXQoJ29yaWVudGF0aW9uJylcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNmb3JtT3BlcmF0aW9uLFxuICAgICAgb3JpZW50YXRpb25PcGVyYXRpb25cbiAgICB9XG4gIH1cblxuICBjb252ZXJ0T3BlcmF0aW9uT3B0aW9uc1RvVUkgKHsgc3RhcnQsIGVuZCwgcm90YXRpb24sIHRleHR1cmVTY2FsZSB9KSB7XG4gICAgY29uc3QgdHJhbnNmb3JtT3BlcmF0aW9uID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ3RyYW5zZm9ybU9wZXJhdGlvbicpXG5cbiAgICBjb25zdCBmaW5hbFNjYWxlID0gdHJhbnNmb3JtT3BlcmF0aW9uLmNhbGN1bGF0ZVNjYWxlKHJvdGF0aW9uKVxuICAgIGNvbnN0IGlucHV0RGltZW5zaW9ucyA9IHRyYW5zZm9ybU9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG4gICAgY29uc3QgY29zID0gTWF0aC5jb3Mocm90YXRpb24pXG4gICAgY29uc3Qgc2luID0gTWF0aC5zaW4ocm90YXRpb24pXG5cbiAgICBjb25zdCBoYWxmUmVsYXRpdmVTaXplID0gZW5kLmNsb25lKCkuc3VidHJhY3Qoc3RhcnQpLmRpdmlkZSgyKVxuICAgIGNvbnN0IG1pZGRsZUluUGl4ZWxzID0gc3RhcnQuY2xvbmUoKVxuICAgICAgLmFkZChoYWxmUmVsYXRpdmVTaXplKVxuICAgICAgLm11bHRpcGx5KGlucHV0RGltZW5zaW9ucylcblxuICAgIGNvbnN0IG1pZGRsZURpc3RhbmNlRnJvbUNlbnRlciA9IG1pZGRsZUluUGl4ZWxzXG4gICAgICAuc3VidHJhY3QoaW5wdXREaW1lbnNpb25zLmNsb25lKCkubXVsdGlwbHkoMC41KSlcblxuICAgIC8vIFJvdGF0ZSBhbmQgc2NhbGUgdGhlIG1pZGRsZSBiYWNrXG4gICAgY29uc3QgbmV3TWlkZGxlRGlzdGFuY2VGcm9tQ2VudGVyID0gbmV3IFZlY3RvcjIoXG4gICAgICBtaWRkbGVEaXN0YW5jZUZyb21DZW50ZXIueCAqIGNvcyAtIG1pZGRsZURpc3RhbmNlRnJvbUNlbnRlci55ICogc2luLFxuICAgICAgbWlkZGxlRGlzdGFuY2VGcm9tQ2VudGVyLnggKiBzaW4gKyBtaWRkbGVEaXN0YW5jZUZyb21DZW50ZXIueSAqIGNvc1xuICAgICkubXVsdGlwbHkoZmluYWxTY2FsZSlcblxuICAgIGNvbnN0IG5ld01pZGRsZUluUGl4ZWxzID0gaW5wdXREaW1lbnNpb25zLmNsb25lKCkubXVsdGlwbHkoMC41KVxuICAgICAgLmFkZChuZXdNaWRkbGVEaXN0YW5jZUZyb21DZW50ZXIpXG5cbiAgICBjb25zdCBuZXdSZWxhdGl2ZU1pZGRsZSA9IG5ld01pZGRsZUluUGl4ZWxzLmNsb25lKCkuZGl2aWRlKGlucHV0RGltZW5zaW9ucylcblxuICAgIGNvbnN0IG5ld1N0YXJ0ID0gbmV3UmVsYXRpdmVNaWRkbGUuY2xvbmUoKS5zdWJ0cmFjdChoYWxmUmVsYXRpdmVTaXplLmNsb25lKCkubXVsdGlwbHkoZmluYWxTY2FsZSkpXG4gICAgY29uc3QgbmV3RW5kID0gbmV3UmVsYXRpdmVNaWRkbGUuY2xvbmUoKS5hZGQoaGFsZlJlbGF0aXZlU2l6ZS5jbG9uZSgpLm11bHRpcGx5KGZpbmFsU2NhbGUpKVxuXG4gICAgcmV0dXJuIHsgc3RhcnQ6IG5ld1N0YXJ0LCBlbmQ6IG5ld0VuZCwgcm90YXRpb24sIHRleHR1cmVTY2FsZSB9XG4gIH1cblxuICAvKipcbiAgICogSXMgY2FsbGVkIHdoZW4gYSBjb250cm9sIGlzIGVudGVyZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkVudGVyICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3QgZm9yY2VDcm9wID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ2ZvcmNlQ3JvcCcpXG5cbiAgICBjb25zdCB0cmFuc2Zvcm1PcGVyYXRpb25FeGlzdGVkQmVmb3JlRW50ZXJpbmcgPSBlZGl0b3Iub3BlcmF0aW9ucy5leGlzdHMoJ3RyYW5zZm9ybScpXG4gICAgY29uc3QgdHJhbnNmb3JtT3BlcmF0aW9uID0gZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ3RyYW5zZm9ybScpXG4gICAgdHJhbnNmb3JtT3BlcmF0aW9uLnNldEVuYWJsZWQoZmFsc2UsIGZhbHNlKVxuXG4gICAgY29uc3Qgb3JpZW50YXRpb25PcGVyYXRpb25FeGlzdGVkQmVmb3JlRW50ZXJpbmcgPSBlZGl0b3Iub3BlcmF0aW9ucy5leGlzdHMoJ29yaWVudGF0aW9uJylcbiAgICBjb25zdCBvcmllbnRhdGlvbk9wZXJhdGlvbiA9IGVkaXRvci5vcGVyYXRpb25zLmdldE9yQ3JlYXRlKCdvcmllbnRhdGlvbicpXG5cbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgIGVuZDogbmV3IFZlY3RvcjIoMSwgMSksXG4gICAgICByb3RhdGlvbjogMCxcbiAgICAgIHN0YXJ0OiBuZXcgVmVjdG9yMigwLCAwKSxcbiAgICAgIHRleHR1cmVTY2FsZTogMVxuICAgIH1cblxuICAgIGNvbnN0IGlucHV0RGltZW5zaW9ucyA9IHRyYW5zZm9ybU9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG4gICAgY29uc3QgaW5pdGlhbERpbWVuc2lvbnMgPSB0cmFuc2Zvcm1PcGVyYXRpb24uZ2V0TmV3RGltZW5zaW9ucyhpbnB1dERpbWVuc2lvbnMpXG5cbiAgICBsZXQgaW5pdGlhbFRyYW5zZm9ybU9wdGlvbnMgPSBkZWZhdWx0T3B0aW9uc1xuICAgIGxldCB7IHN0YXJ0LCBlbmQsIHRleHR1cmVTY2FsZSwgcm90YXRpb24gfSA9IGluaXRpYWxUcmFuc2Zvcm1PcHRpb25zXG4gICAgaWYgKHRyYW5zZm9ybU9wZXJhdGlvbkV4aXN0ZWRCZWZvcmVFbnRlcmluZykge1xuICAgICAgaW5pdGlhbFRyYW5zZm9ybU9wdGlvbnMgPSB0cmFuc2Zvcm1PcGVyYXRpb24uc2VyaWFsaXplT3B0aW9ucygpXG4gICAgICBzdGFydCA9IGluaXRpYWxUcmFuc2Zvcm1PcHRpb25zLnN0YXJ0XG4gICAgICBlbmQgPSBpbml0aWFsVHJhbnNmb3JtT3B0aW9ucy5lbmRcbiAgICAgIHJvdGF0aW9uID0gaW5pdGlhbFRyYW5zZm9ybU9wdGlvbnMucm90YXRpb25cbiAgICAgIHRleHR1cmVTY2FsZSA9IGluaXRpYWxUcmFuc2Zvcm1PcHRpb25zLnRleHR1cmVTY2FsZVxuXG4gICAgICBkZWxldGUgaW5pdGlhbFRyYW5zZm9ybU9wdGlvbnMuZW5hYmxlZFxuXG4gICAgICBjb25zdCB1aU9wdGlvbnMgPSB0aGlzLmNvbnZlcnRPcGVyYXRpb25PcHRpb25zVG9VSSh7IHN0YXJ0LCBlbmQsIHRleHR1cmVTY2FsZSwgcm90YXRpb24gfSlcbiAgICAgIHN0YXJ0ID0gdWlPcHRpb25zLnN0YXJ0XG4gICAgICBlbmQgPSB1aU9wdGlvbnMuZW5kXG4gICAgfVxuXG4gICAgLy8gVGhpcyBtYWtlcyBzdXJlIHRoYXQgYWxsIG9wZXJhdGlvbnMgbGlzdGVuaW5nIGZvciBhIHRyYW5zZm9ybSBhcmUgbm90aWZpZWRcbiAgICBlZGl0b3IuYnJvYWRjYXN0VHJhbnNmb3JtKHRyYW5zZm9ybU9wZXJhdGlvbiwgZGVmYXVsdE9wdGlvbnMpXG5cbiAgICAvLyBVcGRhdGUgZWRpdG9yIHJvdGF0aW9uIGFuZCBzY2FsZVxuICAgIGNvbnN0IGluaXRpYWxPcmllbnRhdGlvbk9wdGlvbnMgPSBvcmllbnRhdGlvbk9wZXJhdGlvbi5zZXJpYWxpemVPcHRpb25zKClcbiAgICBlZGl0b3Iuc2V0U3ByaXRlU2NhbGUodHJhbnNmb3JtT3BlcmF0aW9uLmNhbGN1bGF0ZVNjYWxlKCkpXG4gICAgZWRpdG9yLnNldFJvdGF0aW9uKHJvdGF0aW9uKVxuXG4gICAgLy8gU2hvdyB0aGUgd2hvbGUgaW1hZ2VcbiAgICB0cmFuc2Zvcm1PcGVyYXRpb24uc2V0KGRlZmF1bHRPcHRpb25zLCB0cmFuc2Zvcm1PcGVyYXRpb25FeGlzdGVkQmVmb3JlRW50ZXJpbmcpXG5cbiAgICBjb25zdCBvcHRpb25zID0gZWRpdG9yLmdldE9wdGlvbnMoKVxuICAgIGVkaXRvci56b29tLmF1dG8odHJ1ZSwgZmFsc2UsICgpID0+IHtcbiAgICAgIC8vIERpc2FibGUgem9vbSBhbmQgZHJhZyB3aGlsZSB3ZSdyZSB0cmFuc2Zvcm1waW5nXG4gICAgICBlZGl0b3IuZmVhdHVyZXMuZGlzYWJsZSgnem9vbScsICdkcmFnJywgZm9yY2VDcm9wID8gJ2V4cG9ydCcgOiB1bmRlZmluZWQpXG4gICAgfSwgZmFsc2UpXG5cbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldCh7XG4gICAgICB0cmFuc2Zvcm1PcGVyYXRpb24sXG4gICAgICBpbml0aWFsVHJhbnNmb3JtT3B0aW9ucyxcbiAgICAgIG5ld1RyYW5zZm9ybU9wdGlvbnM6IHtcbiAgICAgICAgc3RhcnQsIGVuZCwgcm90YXRpb24sIHRleHR1cmVTY2FsZVxuICAgICAgfSxcbiAgICAgIHRyYW5zZm9ybU9wZXJhdGlvbkV4aXN0ZWRCZWZvcmVFbnRlcmluZyxcblxuICAgICAgb3JpZW50YXRpb25PcGVyYXRpb24sXG4gICAgICBpbml0aWFsT3JpZW50YXRpb25PcHRpb25zLFxuICAgICAgbmV3T3JpZW50YXRpb25PcHRpb25zOiBTREtVdGlscy5jbG9uZU9wdGlvbnMoaW5pdGlhbE9yaWVudGF0aW9uT3B0aW9ucyksXG4gICAgICBvcmllbnRhdGlvbk9wZXJhdGlvbkV4aXN0ZWRCZWZvcmVFbnRlcmluZyxcblxuICAgICAgc3RhcnQ6IFZlY3RvcjIuZnJvbU9iamVjdChzdGFydCksXG4gICAgICBlbmQ6IFZlY3RvcjIuZnJvbU9iamVjdChlbmQpLFxuICAgICAgcm90YXRpb246IHJvdGF0aW9uLFxuICAgICAgb3JpZW50YXRpb25Sb3RhdGlvbjogb3JpZW50YXRpb25PcGVyYXRpb24uZ2V0Um90YXRpb24oKSxcbiAgICAgIGZsaXBWZXJ0aWNhbGx5OiBvcmllbnRhdGlvbk9wZXJhdGlvbi5nZXRGbGlwVmVydGljYWxseSgpLFxuICAgICAgZmxpcEhvcml6b250YWxseTogb3JpZW50YXRpb25PcGVyYXRpb24uZ2V0RmxpcEhvcml6b250YWxseSgpLFxuICAgICAgaW5pdGlhbERpbWVuc2lvbnMsXG4gICAgICBpbml0aWFsUmF0aW86IHRyYW5zZm9ybU9wZXJhdGlvbi5fcmF0aW8gfHwgbnVsbFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogSXMgY2FsbGVkIHdoZW4gYSBjb250cm9sIGlzIGxlZnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkxlYXZlICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3QgdHJhbnNmb3JtT3BlcmF0aW9uID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ3RyYW5zZm9ybU9wZXJhdGlvbicpXG4gICAgY29uc3Qgb3JpZW50YXRpb25PcGVyYXRpb24gPSB0aGlzLnNoYXJlZFN0YXRlLmdldCgnb3JpZW50YXRpb25PcGVyYXRpb24nKVxuICAgIGNvbnN0IGZvcmNlQ3JvcCA9IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCdmb3JjZUNyb3AnKVxuICAgIGNvbnN0IHRyYW5zZm9ybU9wZXJhdGlvbkV4aXN0ZWRCZWZvcmVFbnRlcmluZyA9IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCd0cmFuc2Zvcm1PcGVyYXRpb25FeGlzdGVkQmVmb3JlRW50ZXJpbmcnKVxuXG4gICAgLy8gUmVtb3ZlIG9yaWVudGF0aW9uIG9wZXJhdGlvbiBpZiBpdCdzIHJlZHVuZGFudFxuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgcm90YXRpb246IDAsXG4gICAgICBmbGlwVmVydGljYWxseTogZmFsc2UsXG4gICAgICBmbGlwSG9yaXpvbnRhbGx5OiBmYWxzZVxuICAgIH1cbiAgICBpZiAob3JpZW50YXRpb25PcGVyYXRpb24ub3B0aW9uc0VxdWFsKGRlZmF1bHRPcHRpb25zKSkge1xuICAgICAgZWRpdG9yLm9wZXJhdGlvbnMucmVtb3ZlKG9yaWVudGF0aW9uT3BlcmF0aW9uLCBmYWxzZSlcbiAgICB9XG5cbiAgICBjb25zdCBuZXdUcmFuc2Zvcm1PcHRpb25zID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ25ld1RyYW5zZm9ybU9wdGlvbnMnKVxuICAgIGxldCB7IHN0YXJ0LCBlbmQsIHRleHR1cmVTY2FsZSwgcm90YXRpb24gfSA9IG5ld1RyYW5zZm9ybU9wdGlvbnNcbiAgICB0ZXh0dXJlU2NhbGUgPSB0aGlzLl9jYWxjdWxhdGVUZXh0dXJlU2NhbGUoKVxuICAgIHN0YXJ0ID0gc3RhcnQuY2xvbmUoKVxuICAgIGVuZCA9IGVuZC5jbG9uZSgpXG5cbiAgICBjb25zdCBmaW5hbFNjYWxlID0gdHJhbnNmb3JtT3BlcmF0aW9uLmNhbGN1bGF0ZVNjYWxlKHJvdGF0aW9uKVxuICAgIGNvbnN0IGlucHV0RGltZW5zaW9ucyA9IHRyYW5zZm9ybU9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG4gICAgY29uc3QgY29zID0gTWF0aC5jb3MoLXJvdGF0aW9uKVxuICAgIGNvbnN0IHNpbiA9IE1hdGguc2luKC1yb3RhdGlvbilcblxuICAgIGNvbnN0IGhhbGZSZWxhdGl2ZVNpemUgPSBlbmQuY2xvbmUoKS5zdWJ0cmFjdChzdGFydCkuZGl2aWRlKDIpXG4gICAgY29uc3QgbWlkZGxlSW5QaXhlbHMgPSBzdGFydC5jbG9uZSgpXG4gICAgICAuYWRkKGhhbGZSZWxhdGl2ZVNpemUpXG4gICAgICAubXVsdGlwbHkoaW5wdXREaW1lbnNpb25zKVxuXG4gICAgY29uc3QgbWlkZGxlRGlzdGFuY2VGcm9tQ2VudGVyID0gbWlkZGxlSW5QaXhlbHNcbiAgICAgIC5zdWJ0cmFjdChpbnB1dERpbWVuc2lvbnMuY2xvbmUoKS5tdWx0aXBseSgwLjUpKVxuXG4gICAgICAvLyBSb3RhdGUgYW5kIHNjYWxlIHRoZSBtaWRkbGUgYmFja1xuICAgIGNvbnN0IG5ld01pZGRsZURpc3RhbmNlRnJvbUNlbnRlciA9IG5ldyBWZWN0b3IyKFxuICAgICAgbWlkZGxlRGlzdGFuY2VGcm9tQ2VudGVyLnggKiBjb3MgLSBtaWRkbGVEaXN0YW5jZUZyb21DZW50ZXIueSAqIHNpbixcbiAgICAgIG1pZGRsZURpc3RhbmNlRnJvbUNlbnRlci54ICogc2luICsgbWlkZGxlRGlzdGFuY2VGcm9tQ2VudGVyLnkgKiBjb3NcbiAgICApLmRpdmlkZShmaW5hbFNjYWxlKVxuXG4gICAgY29uc3QgbmV3TWlkZGxlSW5QaXhlbHMgPSBpbnB1dERpbWVuc2lvbnMuY2xvbmUoKS5tdWx0aXBseSgwLjUpXG4gICAgICAuYWRkKG5ld01pZGRsZURpc3RhbmNlRnJvbUNlbnRlcilcblxuICAgIGNvbnN0IG5ld1JlbGF0aXZlTWlkZGxlID0gbmV3TWlkZGxlSW5QaXhlbHMuY2xvbmUoKS5kaXZpZGUoaW5wdXREaW1lbnNpb25zKVxuXG4gICAgY29uc3QgbmV3U3RhcnQgPSBuZXdSZWxhdGl2ZU1pZGRsZS5jbG9uZSgpLnN1YnRyYWN0KGhhbGZSZWxhdGl2ZVNpemUuY2xvbmUoKS5kaXZpZGUoZmluYWxTY2FsZSkpXG4gICAgY29uc3QgbmV3RW5kID0gbmV3UmVsYXRpdmVNaWRkbGUuY2xvbmUoKS5hZGQoaGFsZlJlbGF0aXZlU2l6ZS5jbG9uZSgpLmRpdmlkZShmaW5hbFNjYWxlKSlcblxuICAgIGNvbnN0IGRlZmF1bHRUcmFuc2Zvcm1PcHRpb25zID0ge1xuICAgICAgc3RhcnQ6IG5ldyBWZWN0b3IyKDAsIDApLFxuICAgICAgZW5kOiBuZXcgVmVjdG9yMigxLCAxKSxcbiAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgdGV4dHVyZVNjYWxlOiAxXG4gICAgfVxuXG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IHtcbiAgICAgIHN0YXJ0OiBuZXdTdGFydCwgZW5kOiBuZXdFbmQsIHRleHR1cmVTY2FsZSwgcm90YXRpb25cbiAgICB9XG5cbiAgICBpZiAobmV3T3B0aW9ucy5zdGFydC5lcXVhbHMoZGVmYXVsdFRyYW5zZm9ybU9wdGlvbnMuc3RhcnQpICYmXG4gICAgICAgICAgbmV3T3B0aW9ucy5lbmQuZXF1YWxzKGRlZmF1bHRUcmFuc2Zvcm1PcHRpb25zLmVuZCkgJiZcbiAgICAgICAgICBuZXdPcHRpb25zLnJvdGF0aW9uID09PSBkZWZhdWx0VHJhbnNmb3JtT3B0aW9ucy5yb3RhdGlvbiAmJlxuICAgICAgICAgIG5ld09wdGlvbnMudGV4dHVyZVNjYWxlID09PSBkZWZhdWx0VHJhbnNmb3JtT3B0aW9ucy50ZXh0dXJlU2NhbGUpIHtcbiAgICAgIGVkaXRvci5vcGVyYXRpb25zLnJlbW92ZSh0cmFuc2Zvcm1PcGVyYXRpb24sIGZhbHNlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm1PcGVyYXRpb24uc2V0KGRlZmF1bHRUcmFuc2Zvcm1PcHRpb25zKVxuICAgICAgZWRpdG9yLmJyb2FkY2FzdFRyYW5zZm9ybSh0cmFuc2Zvcm1PcGVyYXRpb24sIG5ld09wdGlvbnMpXG4gICAgICB0cmFuc2Zvcm1PcGVyYXRpb24uc2V0KG5ld09wdGlvbnMpXG4gICAgICB0cmFuc2Zvcm1PcGVyYXRpb24uc2V0VGV4dHVyZVNjYWxlKHRoaXMuX2NhbGN1bGF0ZVRleHR1cmVTY2FsZSgpKVxuICAgICAgdHJhbnNmb3JtT3BlcmF0aW9uLnNldEVuYWJsZWQodHJ1ZSlcbiAgICB9XG5cbiAgICAvLyBSZXNldCBlZGl0b3JcbiAgICBlZGl0b3Iuc2V0Um90YXRpb24oMClcbiAgICBlZGl0b3Iuc2V0U3ByaXRlU2NhbGUoMSlcbiAgICBlZGl0b3IuZmVhdHVyZXMuZW5hYmxlKCd6b29tJywgJ2RyYWcnLCBmb3JjZUNyb3AgPyAnZXhwb3J0JyA6IHVuZGVmaW5lZClcblxuICAgIGVkaXRvci56b29tLmF1dG8odHJ1ZSlcbiAgfVxuXG4gIF9nZXRHbG9iYWxIaXN0b3J5RGF0YSAoKSB7XG4gICAgcmV0dXJuIHsgcmF0aW86IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCdyYXRpbycpIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIGFuIG9wZXJhdGlvbiBoYXMgYmVlbiByZW1vdmVkLiBJZiBpdCBpcyB0aGUgc2FtZSBvcGVyYXRpb24gdGhhdFxuICAgKiB0aGlzIGNvbnRyb2wgYmVsb25ncyB0bywgaXQgc3dpdGNoZXMgYmFjayB0byB0aGUgb3ZlcnZpZXcsIGxlYXZpbmcgdGhpcyBjb250cm9sXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk9wZXJhdGlvbn0gb3BlcmF0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25PcGVyYXRpb25SZW1vdmVkIChvcGVyYXRpb24pIHtcbiAgICAvLyB2b2lkXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgdGV4dHVyZSBzY2FsZSB1c2luZyB0aGUgY3VycmVudCBzZXR0aW5nc1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY2FsY3VsYXRlVGV4dHVyZVNjYWxlICgpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1PcGVyYXRpb24gPSB0aGlzLnNoYXJlZFN0YXRlLmdldCgndHJhbnNmb3JtT3BlcmF0aW9uJylcbiAgICBjb25zdCByYXRpbyA9IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCdyYXRpbycpXG4gICAgaWYgKCFyYXRpbyB8fCAhcmF0aW8uZGltZW5zaW9ucykge1xuICAgICAgcmV0dXJuIDFcbiAgICB9XG5cbiAgICBjb25zdCBzdGFydCA9IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCdzdGFydCcpXG4gICAgY29uc3QgZW5kID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ2VuZCcpXG5cbiAgICBjb25zdCBzaXplID0gZW5kLmNsb25lKCkuc3VidHJhY3Qoc3RhcnQpXG4gICAgY29uc3QgdHJhbnNmb3JtRGltZW5zaW9ucyA9IHRyYW5zZm9ybU9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG4gICAgICAubXVsdGlwbHkoc2l6ZSlcbiAgICByZXR1cm4gcmF0aW8uZGltZW5zaW9ucy54IC8gdHJhbnNmb3JtRGltZW5zaW9ucy54XG4gIH1cblxuICAvKipcbiAgICogRml4ZXMgdGhlIGdpdmVuIHN0YXJ0IGFuZCBlbmQgY29vcmRpbmF0ZXMgdG8gcmVwcmVzZW50IGEgdmFsaWQgdHJhbnNmb3JtLiBUaGUgYGhvcml6b250YWxTaWRlYFxuICAgKiBhbmQgYHZlcnRpY2FsU2lkZWAgZmxhZ3MgaW5kaWNhdGUgd2hpY2ggY29ybmVyIGhhcyBiZWVuIGRyYWdnZWQuXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMn0gc3RhcnRcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBlbmRcbiAgICogQHBhcmFtICB7U3RyaW5nfSBob3Jpem9udGFsU2lkZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHZlcnRpY2FsU2lkZVxuICAgKi9cbiAgZml4VHJhbnNmb3JtIChzdGFydCwgZW5kLCBob3Jpem9udGFsU2lkZSwgdmVydGljYWxTaWRlKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHRyYW5zZm9ybU9wZXJhdGlvbiA9IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCd0cmFuc2Zvcm1PcGVyYXRpb24nKVxuICAgIGNvbnN0IGltYWdlRGltZW5zaW9ucyA9IHRyYW5zZm9ybU9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG5cbiAgICBsZXQgeyByYXRpbywgZGltZW5zaW9ucyB9ID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ3JhdGlvJylcbiAgICBpZiAoZGltZW5zaW9ucyAmJiAhcmF0aW8pIHtcbiAgICAgIHJhdGlvID0gZGltZW5zaW9ucy54IC8gZGltZW5zaW9ucy55XG4gICAgfVxuXG4gICAgLy8gTWF4aW11bSB0cmFuc2Zvcm0gc2l6ZSAocmVsYXRpdmUpXG4gICAgY29uc3QgbWF4VHJhbnNmb3JtU2l6ZSA9IG5ldyBWZWN0b3IyKClcbiAgICBtYXhUcmFuc2Zvcm1TaXplLnggPSBob3Jpem9udGFsU2lkZSA9PT0gJ2xlZnQnID8gZW5kLnggOiAxLjAgLSBzdGFydC54XG4gICAgbWF4VHJhbnNmb3JtU2l6ZS55ID0gdmVydGljYWxTaWRlID09PSAndG9wJyA/IGVuZC55IDogMS4wIC0gc3RhcnQueVxuXG4gICAgLy8gTWF4aW11bSB0cmFuc2Zvcm0gc2l6ZSAoYWJzb2x1dGUpXG4gICAgY29uc3QgbWF4U2l6ZSA9IGltYWdlRGltZW5zaW9ucy5jbG9uZSgpLm11bHRpcGx5KG1heFRyYW5zZm9ybVNpemUpXG5cbiAgICAvLyBDdXJyZW50IHRyYW5zZm9ybSBzaXplIChyZWxhdGl2ZSlcbiAgICBjb25zdCB0cmFuc2Zvcm1TaXplID0gZW5kLmNsb25lKCkuc3VidHJhY3Qoc3RhcnQpXG5cbiAgICAvLyBDdXJyZW50IHRyYW5zZm9ybSBzaXplIChhYnNvbHV0ZSlcbiAgICBjb25zdCBzaXplID0gdHJhbnNmb3JtU2l6ZS5jbG9uZSgpLm11bHRpcGx5KGltYWdlRGltZW5zaW9ucylcblxuICAgIC8vIFRoZSBtaW5pbXVtIGRpbWVuc2lvbnNcbiAgICBjb25zdCBtaW5VSURpbWVuc2lvbnMgPSBNSU5fRElNRU5TSU9OUy5jbG9uZSgpLmRpdmlkZShlZGl0b3Iuem9vbS50YXJnZXRMZXZlbClcbiAgICBjb25zdCBtaW5EaW1lbnNpb25zID0gbmV3IFZlY3RvcjIoXG4gICAgICBNYXRoLm1pbihtaW5VSURpbWVuc2lvbnMueCwgaW1hZ2VEaW1lbnNpb25zLnggKiAwLjEpLFxuICAgICAgTWF0aC5taW4obWluVUlEaW1lbnNpb25zLnksIGltYWdlRGltZW5zaW9ucy55ICogMC4xKVxuICAgIClcblxuICAgIC8vIENsYW1wIHdpZHRoXG4gICAgc2l6ZS54ID0gTWF0aC5taW4oTWF0aC5tYXgobWluRGltZW5zaW9ucy54LCBzaXplLngpLCBtYXhTaXplLngpXG4gICAgaWYgKHJhdGlvICE9PSAnKicpIHtcbiAgICAgIHNpemUueSA9IHNpemUueCAvIHJhdGlvXG4gICAgfVxuXG4gICAgLy8gQ2xhbXAgaGVpZ2h0XG4gICAgc2l6ZS55ID0gTWF0aC5taW4oTWF0aC5tYXgobWluRGltZW5zaW9ucy55LCBzaXplLnkpLCBtYXhTaXplLnkpXG4gICAgaWYgKHJhdGlvICE9PSAnKicpIHtcbiAgICAgIC8vIENhbGN1bGF0ZSBuZXcgd2lkdGggYnkgaGVpZ2h0XG4gICAgICBzaXplLnggPSBzaXplLnkgKiByYXRpb1xuICAgIH1cblxuICAgIC8vIFJlY2FsY3VsYXRlIHN0YXJ0IGFuZCBlbmQgdXNpbmcgbmV3IHNpemVcbiAgICBjb25zdCByZWxhdGl2ZVNpemUgPSBzaXplLmRpdmlkZShpbWFnZURpbWVuc2lvbnMpXG4gICAgaWYgKHZlcnRpY2FsU2lkZSA9PT0gJ3RvcCcpIHtcbiAgICAgIHN0YXJ0LnkgPSBlbmQueSAtIHJlbGF0aXZlU2l6ZS55XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZC55ID0gc3RhcnQueSArIHJlbGF0aXZlU2l6ZS55XG4gICAgfVxuICAgIGlmIChob3Jpem9udGFsU2lkZSA9PT0gJ2xlZnQnKSB7XG4gICAgICBzdGFydC54ID0gZW5kLnggLSByZWxhdGl2ZVNpemUueFxuICAgIH0gZWxzZSB7XG4gICAgICBlbmQueCA9IHN0YXJ0LnggKyByZWxhdGl2ZVNpemUueFxuICAgIH1cblxuICAgIC8vIFNuYXAgdG8gZnVsbCBwaXhlbHMgKGZvciBmcmVlIHJhdGlvKVxuICAgIGlmIChyYXRpbyA9PT0gJyonKSB7XG4gICAgICBzdGFydC5tdWx0aXBseShpbWFnZURpbWVuc2lvbnMpLnJvdW5kKCkuZGl2aWRlKGltYWdlRGltZW5zaW9ucylcbiAgICAgIGVuZC5tdWx0aXBseShpbWFnZURpbWVuc2lvbnMpLnJvdW5kKCkuZGl2aWRlKGltYWdlRGltZW5zaW9ucylcbiAgICB9XG5cbiAgICByZXR1cm4geyBzdGFydCwgZW5kIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhc3NldHMgdGhhdCBzaG91bGQgYmUgcHJlbG9hZGVkIGZvciB0aGlzIGNvbnRyb2xcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkVkaXRvcn0gZWRpdG9yXG4gICAqIEByZXR1cm4ge1N0cmluZ1tdfVxuICAgKi9cbiAgc3RhdGljIGdldFByZWxvYWRBc3NldHMgKGVkaXRvcikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBlZGl0b3IuZ2V0T3B0aW9ucygpXG4gICAgY29uc3QgdHJhbnNmb3JtT3B0aW9ucyA9IFNES1V0aWxzLmRlZmF1bHRzKFxuICAgICAgb3B0aW9ucy5lZGl0b3IuY29udHJvbHNPcHRpb25zLnRyYW5zZm9ybSxcbiAgICAgIHRoaXMuZGVmYXVsdE9wdGlvbnNcbiAgICApXG5cbiAgICBsZXQgYXNzZXRzID0gW1xuICAgICAgJ2VkaXRvci9jb250cm9scy90cmFuc2Zvcm0vZGltZW5zaW9ucy1jcm9zcy5wbmcnLFxuICAgICAgJ2VkaXRvci9jb250cm9scy90cmFuc2Zvcm0vZGVncmVlLXNsaWRlci5wbmcnLFxuICAgICAgJ2VkaXRvci9jb250cm9scy90cmFuc2Zvcm0vZmxpcC5wbmcnLFxuICAgICAgJ2VkaXRvci9jb250cm9scy90cmFuc2Zvcm0vbG9jay5wbmcnLFxuICAgICAgJ2VkaXRvci9jb250cm9scy90cmFuc2Zvcm0vcm90YXRlLnBuZydcbiAgICBdXG5cbiAgICAvLyBBZGQgcmF0aW9zXG4gICAgY29uc3QgcmF0aW9NYW5hZ2VyID0gbmV3IFRyYW5zZm9ybVJhdGlvTWFuYWdlcih0cmFuc2Zvcm1PcHRpb25zKVxuICAgIGNvbnN0IGNhdGVnb3JpZXMgPSByYXRpb01hbmFnZXIuZ2V0Q2F0ZWdvcmllcygpXG4gICAgY2F0ZWdvcmllcy5mb3JFYWNoKCh7IHJhdGlvcyB9KSA9PiB7XG4gICAgICByYXRpb3MuZm9yRWFjaCgoeyBpZGVudGlmaWVyIH0pID0+IHtcbiAgICAgICAgYXNzZXRzLnB1c2goXG4gICAgICAgICAgYGVkaXRvci9jb250cm9scy90cmFuc2Zvcm0vcmF0aW9zLyR7aWRlbnRpZmllcn0tZGVmYXVsdC5wbmdgLFxuICAgICAgICAgIGBlZGl0b3IvY29udHJvbHMvdHJhbnNmb3JtL3JhdGlvcy8ke2lkZW50aWZpZXJ9LWhvdmVyLnBuZ2AsXG4gICAgICAgICAgYGVkaXRvci9jb250cm9scy90cmFuc2Zvcm0vcmF0aW9zLyR7aWRlbnRpZmllcn0tYWN0aXZlLnBuZ2BcbiAgICAgICAgKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIGFzc2V0c1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGNvbnRyb2wgaXMgZW5hYmxlZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRW5hYmxlZCAoZWRpdG9yKSB7XG4gICAgcmV0dXJuIGVkaXRvci5pc1Rvb2xBbGxvd2VkKCd0cmFuc2Zvcm0nKSAmJiBlZGl0b3IuaXNUb29sRW5hYmxlZCgndHJhbnNmb3JtJylcbiAgfVxufVxuXG5EZXNrdG9wVUkuQ29udHJvbHMuVHJhbnNmb3JtQ29udHJvbHMgPSBUcmFuc2Zvcm1Db250cm9sc1xuXG5leHBvcnQgZGVmYXVsdCBUcmFuc2Zvcm1Db250cm9sc1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvdHJhbnNmb3JtL2luZGV4LmpzIiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBNYXRoIGFzIFBNYXRoLCBVdGlscyBhcyBTREtVdGlscyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuaW1wb3J0IHtcbiAgUmVhY3QsIGFkb25pcywgVXRpbHMsIENvbnN0YW50cywgRHJhZ2dhYmxlQ29tcG9uZW50LCBDYW52YXNDb250cm9sc0NvbXBvbmVudFxufSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5pbXBvcnQgeyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIGNhbmNlbEFuaW1hdGlvbkZyYW1lIH0gZnJvbSAnc2hhcmVkL2FzeW5jL2FuaW1hdGlvbi1mcmFtZSdcbmltcG9ydCBUcmFuc2Zvcm1Sb3RhdGlvblNsaWRlckNvbXBvbmVudCBmcm9tICcuL3RyYW5zZm9ybS1yb3RhdGlvbi1zbGlkZXItY29tcG9uZW50J1xuXG5jb25zdCB7IFZlY3RvcjIgfSA9IFBNYXRoXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNmb3JtQ2FudmFzQ29udHJvbHNDb21wb25lbnQgZXh0ZW5kcyBDYW52YXNDb250cm9sc0NvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBDYW52YXNDb250cm9sc0NvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vblpvb21Eb25lJyxcbiAgICAgICdfb25Db3JuZXJEcmFnJyxcbiAgICAgICdfb25DZW50ZXJEcmFnU3RhcnQnLFxuICAgICAgJ19vbkNlbnRlckRyYWcnLFxuICAgICAgJ19vblJvdGF0aW9uQ2hhbmdlJyxcbiAgICAgICdfb25PcGVyYXRpb25VcGRhdGVkJyxcbiAgICAgICdfb25PcGVyYXRpb25SZW1vdmVkJyxcbiAgICAgICdfb25BY2NlcHRDbGljaycsXG4gICAgICAnX29uQWNjZXB0TW91c2VEb3duJ1xuICAgIClcblxuICAgIHRoaXMuX2V2ZW50cyA9IHtcbiAgICAgIFtDb25zdGFudHMuRVZFTlRTLk9QRVJBVElPTl9VUERBVEVEXTogdGhpcy5fb25PcGVyYXRpb25VcGRhdGVkLFxuICAgICAgW0NvbnN0YW50cy5FVkVOVFMuT1BFUkFUSU9OX1JFTU9WRURdOiB0aGlzLl9vbk9wZXJhdGlvblJlbW92ZWQsXG4gICAgICBbQ29uc3RhbnRzLkVWRU5UUy5aT09NX0RPTkVdOiB0aGlzLl9vblpvb21Eb25lXG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IFNES1V0aWxzLmV4dGVuZCh0aGlzLnN0YXRlLCB7XG4gICAgICB2aXNpYmxlOiBmYWxzZVxuICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGNoYW5nZSBmcm9tIHRoZSBnaXZlbiBzdGF0ZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9sZFN0YXRlXG4gICAqIEBwYXJhbSAge09iamVjdH0gbmV3U3RhdGVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHNob3VsZFNoYXJlZENvbXBvbmVudFVwZGF0ZSAob2xkU3RhdGUsIG5ld1N0YXRlKSB7XG4gICAgcmV0dXJuICFvbGRTdGF0ZS5zdGFydC5lcXVhbHMobmV3U3RhdGUuc3RhcnQpIHx8XG4gICAgICAhb2xkU3RhdGUuZW5kLmVxdWFscyhuZXdTdGF0ZS5lbmQpIHx8XG4gICAgICBvbGRTdGF0ZS5vcmllbnRhdGlvblJvdGF0aW9uICE9PSBuZXdTdGF0ZS5vcmllbnRhdGlvblJvdGF0aW9uIHx8XG4gICAgICBvbGRTdGF0ZS5yYXRpbyAhPT0gbmV3U3RhdGUucmF0aW8gfHxcbiAgICAgIG9sZFN0YXRlLmNoYW5nZXNEb25lICE9PSBuZXdTdGF0ZS5jaGFuZ2VzRG9uZVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHNoYXJlZCBzdGF0ZSBkaWQgY2hhbmdlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRTdGF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbmV3U3RhdGVcbiAgICovXG4gIHNoYXJlZFN0YXRlRGlkQ2hhbmdlIChvbGRTdGF0ZSwgbmV3U3RhdGUpIHtcbiAgICBjb25zdCBvbGRSYXRpbyA9IChvbGRTdGF0ZS5yYXRpbyAmJiBvbGRTdGF0ZS5yYXRpby5yYXRpbylcbiAgICBjb25zdCBuZXdSYXRpbyA9IChuZXdTdGF0ZS5yYXRpbyAmJiBuZXdTdGF0ZS5yYXRpby5yYXRpbylcbiAgICBpZiAob2xkUmF0aW8gIT09IG5ld1JhdGlvKSB7XG4gICAgICB0aGlzLl9jYWxjdWxhdGVSYXRpb0ZyYWN0aW9uKClcbiAgICB9XG4gIH1cblxuICBzaGFyZWRDb21wb25lbnRXaWxsVXBkYXRlIChvbGRTdGF0ZSwgbmV3U3RhdGUpIHtcbiAgICBpZiAob2xkU3RhdGUub3JpZW50YXRpb25Sb3RhdGlvbiAhPT0gbmV3U3RhdGUub3JpZW50YXRpb25Sb3RhdGlvbikge1xuICAgICAgdGhpcy5fdXBkYXRlVHJhbnNmb3JtQXJlYVN0eWxlcygpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZFxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudERpZE1vdW50KClcblxuICAgIHRoaXMuX3VwZGF0ZVRyYW5zZm9ybUFyZWFTdHlsZXMoKVxuICAgIHRoaXMuX2NhbGN1bGF0ZVJhdGlvRnJhY3Rpb24oKVxuXG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCBpbW1lZGlhdGVseSBiZWZvcmUgcmVuZGVyaW5nIHdoZW4gbmV3IHByb3BzIG9yIHN0YXRlIGFyZSBiZWluZyByZWNlaXZlZFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVwZGF0ZSAoKSB7XG4gICAgdGhpcy5fdXBkYXRlVHJhbnNmb3JtQXJlYVN0eWxlcygpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCBpbW1lZGlhdGVseSBhZnRlciB1cGRhdGluZyBvY2N1cnNcbiAgICovXG4gIGNvbXBvbmVudERpZFVwZGF0ZSAoKSB7XG4gICAgaWYgKCF0aGlzLl90cmFuc2Zvcm1Db250YWluZXJSZWN0ICYmIHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3JhdGlvJykpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZVRyYW5zZm9ybUFyZWFTdHlsZXMoKVxuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFib3V0IHRvIGJlIHVubW91bnRlZFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIHN1cGVyLmNvbXBvbmVudFdpbGxVbm1vdW50KClcblxuICAgIGlmICh0aGlzLl96b29tQUZSZXF1ZXN0KSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl96b29tQUZSZXF1ZXN0KVxuICAgICAgdGhpcy5fem9vbUFGUmVxdWVzdCA9IG51bGxcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDQUxDVUxBVElPTlxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBjbG9zZXN0IHJhdGlvIGZyYWN0aW9uIGZvciB0aGUgY3VycmVudCByYXRpb1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NhbGN1bGF0ZVJhdGlvRnJhY3Rpb24gKCkge1xuICAgIGNvbnN0IHJhdGlvID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgncmF0aW8nKVxuICAgIGlmICghcmF0aW8gfHwgcmF0aW8ucmF0aW8gPT09ICcqJykgcmV0dXJuXG5cbiAgICB0aGlzLl9yYXRpb0ZyYWN0aW9uID0gVXRpbHMuZmluZEludGVnZXJGcmFjdGlvbihyYXRpby5yYXRpbylcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENFTlRFUiBEUkFHR0lOR1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0IGRyYWdnaW5nIHRoZSBjZW50ZXJcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBwb3NpdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ2VudGVyRHJhZ1N0YXJ0IChwb3NpdGlvbikge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3RyYW5zZm9ybU9wZXJhdGlvbicpXG4gICAgdGhpcy5fZHJhZ09wdGlvbnMgPSB7XG4gICAgICBpbml0aWFsU3RhcnQ6IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3N0YXJ0JykuY2xvbmUoKSxcbiAgICAgIGluaXRpYWxFbmQ6IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ2VuZCcpLmNsb25lKCksXG4gICAgICBhcmVhRGltZW5zaW9uczogdGhpcy5fdHJhbnNmb3JtQ29udGFpbmVyUmVjdC5nZXRTaXplKCksXG4gICAgICBpbWFnZURpbWVuc2lvbnM6IG9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoaWxlIHRoZSB1c2VyIGRyYWdzIHRoZSBjZW50ZXJcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfSBvZmZzZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNlbnRlckRyYWcgKG9mZnNldCkge1xuICAgIGNvbnN0IHsgaW5pdGlhbFN0YXJ0LCBpbml0aWFsRW5kLCBhcmVhRGltZW5zaW9ucywgaW1hZ2VEaW1lbnNpb25zIH0gPSB0aGlzLl9kcmFnT3B0aW9uc1xuICAgIGNvbnN0IHJlbGF0aXZlT2Zmc2V0ID0gb2Zmc2V0LmNsb25lKCkuZGl2aWRlKGFyZWFEaW1lbnNpb25zKVxuICAgIGNvbnN0IHNpemUgPSBpbml0aWFsRW5kLmNsb25lKCkuc3VidHJhY3QoaW5pdGlhbFN0YXJ0KVxuXG4gICAgY29uc3QgbWluU3RhcnQgPSBuZXcgVmVjdG9yMigwLCAwKVxuICAgIGNvbnN0IG1heFN0YXJ0ID0gbmV3IFZlY3RvcjIoMSwgMSlcbiAgICAgIC5zdWJ0cmFjdChzaXplKVxuXG4gICAgY29uc3QgbmV3U3RhcnQgPSBpbml0aWFsU3RhcnQuY2xvbmUoKVxuICAgICAgLmFkZChyZWxhdGl2ZU9mZnNldClcbiAgICAgIC5jbGFtcChtaW5TdGFydCwgbWF4U3RhcnQpXG4gICAgY29uc3QgbmV3RW5kID0gbmV3U3RhcnQuY2xvbmUoKVxuICAgICAgLmFkZChzaXplKVxuXG4gICAgbmV3U3RhcnQubXVsdGlwbHkoaW1hZ2VEaW1lbnNpb25zKS5mbG9vcigpLmRpdmlkZShpbWFnZURpbWVuc2lvbnMpXG4gICAgbmV3RW5kLm11bHRpcGx5KGltYWdlRGltZW5zaW9ucykuZmxvb3IoKS5kaXZpZGUoaW1hZ2VEaW1lbnNpb25zKVxuXG4gICAgdGhpcy5wcm9wcy5jb250cm9scy5maXhUcmFuc2Zvcm0oXG4gICAgICBuZXdTdGFydCwgbmV3RW5kLFxuICAgICAgJ3JpZ2h0JywgJ2JvdHRvbSdcbiAgICApXG5cbiAgICBjb25zdCBuZXdUcmFuc2Zvcm1PcHRpb25zID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnbmV3VHJhbnNmb3JtT3B0aW9ucycpXG4gICAgbmV3VHJhbnNmb3JtT3B0aW9ucy5zdGFydCA9IG5ld1N0YXJ0XG4gICAgbmV3VHJhbnNmb3JtT3B0aW9ucy5lbmQgPSBuZXdFbmRcblxuICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUoe1xuICAgICAgc3RhcnQ6IG5ld1N0YXJ0LFxuICAgICAgZW5kOiBuZXdFbmQsXG4gICAgICBjaGFuZ2VzRG9uZTogdGhpcy5nZXRTaGFyZWRTdGF0ZSgnY2hhbmdlc0RvbmUnKSB8fCAhKGluaXRpYWxTdGFydC5lcXVhbHMobmV3U3RhcnQpICYmIGluaXRpYWxFbmQuZXF1YWxzKG5ld0VuZCkpXG4gICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENPUk5FUiBEUkFHR0lOR1xuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBkcmFnZ2luZyBhIGNvcm5lclxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHZlcnRpY2FsU2lkZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGhvcml6b250YWxTaWRlXG4gICAqIEBwYXJhbSAge1Bob3RvRWRpdG9yU0RLLk1hdGguVmVjdG9yMn0gcG9zaXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkNvcm5lckRyYWdTdGFydCAodmVydGljYWxTaWRlLCBob3Jpem9udGFsU2lkZSwgcG9zaXRpb24pIHtcbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCd0cmFuc2Zvcm1PcGVyYXRpb24nKVxuICAgIHRoaXMuX2RyYWdPcHRpb25zID0ge1xuICAgICAgaW5pdGlhbFN0YXJ0OiB0aGlzLmdldFNoYXJlZFN0YXRlKCdzdGFydCcpLmNsb25lKCksXG4gICAgICBpbml0aWFsRW5kOiB0aGlzLmdldFNoYXJlZFN0YXRlKCdlbmQnKS5jbG9uZSgpLFxuICAgICAgdmVydGljYWxTaWRlLFxuICAgICAgaG9yaXpvbnRhbFNpZGUsXG4gICAgICBhcmVhRGltZW5zaW9uczogdGhpcy5fdHJhbnNmb3JtQ29udGFpbmVyUmVjdC5nZXRTaXplKCksXG4gICAgICBpbWFnZURpbWVuc2lvbnM6IG9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG4gICAgfVxuXG4gICAgdGhpcy5fY3VycmVudENvcm5lciA9IHtcbiAgICAgIHZlcnRpY2FsOiB2ZXJ0aWNhbFNpZGUsXG4gICAgICBob3Jpem9udGFsOiBob3Jpem9udGFsU2lkZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGlsZSB0aGUgdXNlciBkcmFncyBhIGNvcm5lclxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9IG9mZnNldFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uQ29ybmVyRHJhZyAob2Zmc2V0KSB7XG4gICAgY29uc3Qge1xuICAgICAgaW5pdGlhbFN0YXJ0LFxuICAgICAgaW5pdGlhbEVuZCxcbiAgICAgIHZlcnRpY2FsU2lkZSxcbiAgICAgIGhvcml6b250YWxTaWRlLFxuICAgICAgYXJlYURpbWVuc2lvbnNcbiAgICB9ID0gdGhpcy5fZHJhZ09wdGlvbnNcblxuICAgIGNvbnN0IHJlbGF0aXZlT2Zmc2V0ID0gb2Zmc2V0LmNsb25lKCkuZGl2aWRlKGFyZWFEaW1lbnNpb25zKVxuXG4gICAgY29uc3Qgc3RhcnQgPSBpbml0aWFsU3RhcnQuY2xvbmUoKVxuICAgIGNvbnN0IGVuZCA9IGluaXRpYWxFbmQuY2xvbmUoKTtcblxuICAgIC8vIFVwZGF0ZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9ucyBkZXBlbmRpbmcgb24gZHJhZ2dlZCBjb3JuZXJcbiAgICAodmVydGljYWxTaWRlID09PSAndG9wJyA/IHN0YXJ0IDogZW5kKS55ICs9IHJlbGF0aXZlT2Zmc2V0Lnk7XG4gICAgKGhvcml6b250YWxTaWRlID09PSAnbGVmdCcgPyBzdGFydCA6IGVuZCkueCArPSByZWxhdGl2ZU9mZnNldC54XG5cbiAgICB0aGlzLnByb3BzLmNvbnRyb2xzLmZpeFRyYW5zZm9ybShcbiAgICAgIHN0YXJ0LCBlbmQsXG4gICAgICBob3Jpem9udGFsU2lkZSwgdmVydGljYWxTaWRlXG4gICAgKVxuXG4gICAgY29uc3QgbmV3VHJhbnNmb3JtT3B0aW9ucyA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ25ld1RyYW5zZm9ybU9wdGlvbnMnKVxuICAgIG5ld1RyYW5zZm9ybU9wdGlvbnMuc3RhcnQgPSBzdGFydFxuICAgIG5ld1RyYW5zZm9ybU9wdGlvbnMuZW5kID0gZW5kXG5cbiAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHtcbiAgICAgIHN0YXJ0LFxuICAgICAgZW5kLFxuICAgICAgY2hhbmdlc0RvbmU6IHRydWVcbiAgICB9KVxuICAgIHRoaXMuX2VtaXRFdmVudChDb25zdGFudHMuRVZFTlRTLlRSQU5TRk9STV9SRVNJWkUpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBST1RBVElPTlxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgdGhlIHJvdGF0aW9uIChzdHJhaWdodGVuKVxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHJvdGF0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Sb3RhdGlvbkNoYW5nZSAocm90YXRpb24pIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1PcGVyYXRpb24gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCd0cmFuc2Zvcm1PcGVyYXRpb24nKVxuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBlZGl0b3Iuc2V0Um90YXRpb24ocm90YXRpb24pXG4gICAgZWRpdG9yLnNldFNwcml0ZVNjYWxlKHRyYW5zZm9ybU9wZXJhdGlvbi5jYWxjdWxhdGVTY2FsZShyb3RhdGlvbikpXG5cbiAgICBjb25zdCBuZXdUcmFuc2Zvcm1PcHRpb25zID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnbmV3VHJhbnNmb3JtT3B0aW9ucycpXG4gICAgbmV3VHJhbnNmb3JtT3B0aW9ucy5yb3RhdGlvbiA9IHJvdGF0aW9uXG5cbiAgICBlZGl0b3IucmVuZGVyKClcbiAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHtcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgY2hhbmdlc0RvbmU6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRVZFTlRTXG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIGFmdGVyIGEgem9vbSBoYXMgYmVlbiBkb25lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25ab29tRG9uZSAoKSB7XG4gICAgdGhpcy5fem9vbUFGUmVxdWVzdCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICB0aGlzLl91cGRhdGVUcmFuc2Zvcm1BcmVhU3R5bGVzKClcbiAgICAgIHRoaXMuc3RhdGUudmlzaWJsZSA9IHRydWVcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICAgICAgdGhpcy5fem9vbUFGUmVxdWVzdCA9IG51bGxcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgYWZ0ZXIgYW4gb3BlcmF0aW9uIGhhcyBiZWVuIHVwZGF0ZWRcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbk9wZXJhdGlvblVwZGF0ZWQgKG9wZXJhdGlvbikge1xuICAgIGNvbnN0IHRyYW5zZm9ybU9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3RyYW5zZm9ybU9wZXJhdGlvbicpXG4gICAgaWYgKG9wZXJhdGlvbiAhPT0gdHJhbnNmb3JtT3BlcmF0aW9uKSByZXR1cm5cblxuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBzZGsgPSBlZGl0b3IuZ2V0U0RLKClcbiAgICBzZGsuc2V0Um90YXRpb24ob3BlcmF0aW9uLmdldFJvdGF0aW9uKCkpXG4gICAgc2RrLnNldFNwcml0ZVNjYWxlKG9wZXJhdGlvbi5jYWxjdWxhdGVTY2FsZSgpKVxuXG4gICAgZWRpdG9yLnJlbmRlcigpXG4gICAgdGhpcy5zZXRTaGFyZWRTdGF0ZSh7XG4gICAgICByb3RhdGlvbjogb3BlcmF0aW9uLmdldFJvdGF0aW9uKClcbiAgICB9KVxuXG4gICAgLy8gU2luY2Ugd2UncmUgbm90IGF1dG9tYXRpY2FsbHkgcmUtcmVuZGVyaW5nIHdoZW4gdGhlIHJvdGF0aW9uIGNoYW5nZXMsIHdlIG5lZWQgdG8gZm9yY2VcbiAgICAvLyB0aGlzIGNvbXBvbmVudCB0byBkbyBzb2xpZFxuICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgYWZ0ZXIgYW4gb3BlcmF0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbk9wZXJhdGlvblJlbW92ZWQgKG9wZXJhdGlvbikge1xuICAgIC8vIFdlIGNhbid0IGNvbXBhcmUgYWdhaW5zdCB0aGUgdHJhbnNmb3JtIG9wZXJhdGlvbiBpbiB0aGUgc2hhcmVkIHN0YXRlIGJlY2F1c2UgdGhpcyBtaWdodCBoYXZlXG4gICAgLy8gYWxyZWFkeSBjaGFuZ2VkIHRvIGEgbmV3IGluc3RhbmNlXG4gICAgaWYgKG9wZXJhdGlvbi5jb25zdHJ1Y3Rvci5pZGVudGlmaWVyID09PSAndHJhbnNmb3JtJyB8fCBvcGVyYXRpb24uY29uc3RydWN0b3IuaWRlbnRpZmllciA9PT0gJ29yaWVudGF0aW9uJykge1xuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgdGFwcyB0aGUgZmxpcCBpY29uLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25GbGlwQ2xpY2sgKGRpcmVjdGlvbikge1xuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdvcmllbnRhdGlvbk9wZXJhdGlvbicpXG5cbiAgICBjb25zdCBjYXBpdGFsaXplZERpcmVjdGlvbiA9IGRpcmVjdGlvbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGRpcmVjdGlvbi5zbGljZSgxKSArICdseSdcblxuICAgIGNvbnN0IG5ld0ZsaXAgPSAhdGhpcy5nZXRTaGFyZWRTdGF0ZShgZmxpcCR7Y2FwaXRhbGl6ZWREaXJlY3Rpb259YClcbiAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHtcbiAgICAgIFtgZmxpcCR7Y2FwaXRhbGl6ZWREaXJlY3Rpb259YF06IG5ld0ZsaXBcbiAgICB9KVxuICAgIG9wZXJhdGlvbi5mbGlwKGRpcmVjdGlvbilcblxuICAgIGNvbnN0IG5ld1RyYW5zZm9ybU9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZFN0YXRlKCduZXdUcmFuc2Zvcm1PcHRpb25zJylcbiAgICBjb25zdCBuZXdSb3RhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3JvdGF0aW9uJykgKiAtMVxuICAgIGVkaXRvci5zZXRSb3RhdGlvbihuZXdSb3RhdGlvbilcblxuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnc3RhcnQnKS5jbG9uZSgpXG4gICAgY29uc3QgZW5kID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnZW5kJykuY2xvbmUoKVxuICAgIGNvbnN0IHRtcFN0YXJ0ID0gc3RhcnQuY2xvbmUoKVxuICAgIGlmIChkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgc3RhcnQuc2V0KDEuMCAtIGVuZC54LCBzdGFydC55KVxuICAgICAgZW5kLnNldCgxLjAgLSB0bXBTdGFydC54LCBlbmQueSlcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgc3RhcnQuc2V0KHN0YXJ0LngsIDEuMCAtIGVuZC55KVxuICAgICAgZW5kLnNldChlbmQueCwgMS4wIC0gdG1wU3RhcnQueSlcbiAgICB9XG5cbiAgICBuZXdUcmFuc2Zvcm1PcHRpb25zLnN0YXJ0ID0gc3RhcnRcbiAgICBuZXdUcmFuc2Zvcm1PcHRpb25zLmVuZCA9IGVuZFxuICAgIG5ld1RyYW5zZm9ybU9wdGlvbnMucm90YXRpb24gPSBuZXdSb3RhdGlvblxuXG4gICAgdGhpcy5zZXRTaGFyZWRTdGF0ZSh7XG4gICAgICBzdGFydCxcbiAgICAgIGVuZCxcbiAgICAgIHJvdGF0aW9uOiBuZXdSb3RhdGlvbixcbiAgICAgIGNoYW5nZXNEb25lOiB0cnVlLFxuICAgICAgbmV3VHJhbnNmb3JtT3B0aW9uc1xuICAgIH0pXG5cbiAgICB0aGlzLmZvcmNlVXBkYXRlKClcblxuICAgIGVkaXRvci5icm9hZGNhc3RGbGlwKGRpcmVjdGlvbilcbiAgICBlZGl0b3IucmVuZGVyKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBhY2NlcHQgYnV0dG9uXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25BY2NlcHRDbGljayAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIHRoaXMuY29udGV4dC5zY3JlZW4uc3dpdGNoVG9Db250cm9scygnZGVmYXVsdCcpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSB1c2VyIHByZXNzZXMgYSBtb3VzZSBidXR0b24gb24gdGhlIGFjY2VwdCBidXR0b24uIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXRcbiAgICogdGhlIGNlbnRlciBkcmFnIGV2ZW50IGlzIG5vdCB0cmlnZ2VyZWRcbiAgICogQHBhcmFtICB7RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkFjY2VwdE1vdXNlRG93biAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHRhcHMgdGhlIHJvdGF0ZSBpY29uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uUm90YXRlQ2xpY2sgKGRpcmVjdGlvbikge1xuICAgIGxldCBkZWdyZWVzID0gZGlyZWN0aW9uID09PSAnY3cnID8gOTAgOiAtOTBcblxuICAgIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdvcmllbnRhdGlvbk9wZXJhdGlvbicpXG4gICAgY29uc3QgbmV3Um90YXRpb24gPSAob3BlcmF0aW9uLmdldFJvdGF0aW9uKCkgKyBkZWdyZWVzKSAlIDM2MFxuXG4gICAgb3BlcmF0aW9uLnNldCh7IHJvdGF0aW9uOiBuZXdSb3RhdGlvbiB9KVxuXG4gICAgbGV0IG5ld1N0YXRlID0ge1xuICAgICAgb3JpZW50YXRpb25Sb3RhdGlvbjogbmV3Um90YXRpb25cbiAgICB9XG5cbiAgICBjb25zdCBuZXdUcmFuc2Zvcm1PcHRpb25zID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnbmV3VHJhbnNmb3JtT3B0aW9ucycpXG4gICAgY29uc3QgcmF0aW8gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdyYXRpbycpXG4gICAgaWYgKHJhdGlvKSB7XG4gICAgICBpZiAoIXJhdGlvLmRpbWVuc2lvbnMgJiYgcmF0aW8ucmF0aW8gPT09ICcqJykge1xuICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3N0YXJ0JykuY2xvbmUoKVxuICAgICAgICBjb25zdCBlbmQgPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdlbmQnKS5jbG9uZSgpXG4gICAgICAgIGNvbnN0IHRlbXBTdGFydCA9IHN0YXJ0LmNsb25lKClcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2N3Jykge1xuICAgICAgICAgIHN0YXJ0LnNldCgxLjAgLSBlbmQueSwgdGVtcFN0YXJ0LngpXG4gICAgICAgICAgZW5kLnNldCgxLjAgLSB0ZW1wU3RhcnQueSwgZW5kLngpXG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnY2N3Jykge1xuICAgICAgICAgIHN0YXJ0LnNldCh0ZW1wU3RhcnQueSwgMS4wIC0gZW5kLngpXG4gICAgICAgICAgZW5kLnNldChlbmQueSwgMS4wIC0gdGVtcFN0YXJ0LngpXG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhdGUuc3RhcnQgPSBzdGFydFxuICAgICAgICBuZXdTdGF0ZS5lbmQgPSBlbmRcblxuICAgICAgICBuZXdUcmFuc2Zvcm1PcHRpb25zLnN0YXJ0ID0gc3RhcnRcbiAgICAgICAgbmV3VHJhbnNmb3JtT3B0aW9ucy5lbmQgPSBlbmRcblxuICAgICAgICAvLyBpZiAoIU51bWJlci5pc05hTihwYXJzZUludChyYXRpby5yYXRpbywgMTApKSkge1xuICAgICAgICAvLyAgIHJhdGlvLnJhdGlvID0gMSAvIHJhdGlvLnJhdGlvXG4gICAgICAgIC8vIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2VtaXRFdmVudChDb25zdGFudHMuRVZFTlRTLlRSQU5TRk9STV9SRUFQUExZX1JBVElPKVxuICAgICAgICB0aGlzLl9lbWl0RXZlbnQoQ29uc3RhbnRzLkVWRU5UUy5UUkFOU0ZPUk1fUkVTSVpFKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUoe1xuICAgICAgY2hhbmdlc0RvbmU6IHRydWUsXG4gICAgICBuZXdUcmFuc2Zvcm1PcHRpb25zXG4gICAgfSlcblxuICAgIGVkaXRvci5icm9hZGNhc3RSb3RhdGUoZGVncmVlcylcbiAgICBlZGl0b3Iuem9vbS5hdXRvKHRydWUsIHRydWUsICgpID0+IHtcbiAgICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUobmV3U3RhdGUpXG4gICAgfSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxJTkdcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgc3R5bGVzIGZvciB0aGUgdHJhbnNmb3JtIGFyZWFcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGVUcmFuc2Zvcm1BcmVhU3R5bGVzICgpIHtcbiAgICB0aGlzLl90cmFuc2Zvcm1Db250YWluZXJSZWN0ID0gdGhpcy5nZXRJbWFnZUJvdW5kaW5nUmVjdCgpXG4gICAgaWYgKHRoaXMuX2ltYWdlQ29udGFpbmVyKSB7XG4gICAgICBVdGlscy5zdHlsZUVsZW1lbnQodGhpcy5faW1hZ2VDb250YWluZXIsIHtcbiAgICAgICAgbGVmdDogYCR7dGhpcy5fdHJhbnNmb3JtQ29udGFpbmVyUmVjdC54fXB4YCxcbiAgICAgICAgdG9wOiBgJHt0aGlzLl90cmFuc2Zvcm1Db250YWluZXJSZWN0Lnl9cHhgLFxuICAgICAgICB3aWR0aDogYCR7dGhpcy5fdHJhbnNmb3JtQ29udGFpbmVyUmVjdC53aWR0aH1weGAsXG4gICAgICAgIGhlaWdodDogYCR7dGhpcy5fdHJhbnNmb3JtQ29udGFpbmVyUmVjdC5oZWlnaHR9cHhgXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkaW1lbnNpb24gc3R5bGVzIGZvciB0aGUgZGFyayBhcmVhc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0QXJlYVN0eWxlcyAoKSB7XG4gICAgbGV0IGltYWdlRGltZW5zaW9ucywgc3RhcnQsIGVuZCwgc2l6ZSwgb2Zmc2V0XG4gICAgaWYgKHRoaXMuX3RyYW5zZm9ybUNvbnRhaW5lcikge1xuICAgICAgaW1hZ2VEaW1lbnNpb25zID0gdGhpcy5fdHJhbnNmb3JtQ29udGFpbmVyUmVjdC5nZXRTaXplKClcbiAgICAgIG9mZnNldCA9IHRoaXMuX3RyYW5zZm9ybUNvbnRhaW5lclJlY3QuZ2V0UG9zaXRpb24oKVxuICAgICAgc3RhcnQgPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdzdGFydCcpLmNsb25lKCkubXVsdGlwbHkoaW1hZ2VEaW1lbnNpb25zKVxuICAgICAgZW5kID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnZW5kJykuY2xvbmUoKS5tdWx0aXBseShpbWFnZURpbWVuc2lvbnMpXG4gICAgICBzaXplID0gZW5kLmNsb25lKCkuc3VidHJhY3Qoc3RhcnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGltYWdlRGltZW5zaW9ucyA9IG5ldyBWZWN0b3IyKDAsIDApXG4gICAgICBzdGFydCA9IG5ldyBWZWN0b3IyKDAsIDApXG4gICAgICBzaXplID0gbmV3IFZlY3RvcjIoMCwgMClcbiAgICAgIG9mZnNldCA9IG5ldyBWZWN0b3IyKDAsIDApXG4gICAgfVxuXG4gICAgY29uc3QgY2VudGVyID0gdGhpcy5fZ2V0RGltZW5zaW9uc1N0eWxlcyhzaXplLngsIHNpemUueSlcbiAgICByZXR1cm4ge1xuICAgICAgdG9wTGVmdDogdGhpcy5fZ2V0RGltZW5zaW9uc1N0eWxlcyhzdGFydC54ICsgb2Zmc2V0LngsIHN0YXJ0LnkgKyBvZmZzZXQueSksXG4gICAgICB0b3BDZW50ZXI6IHRoaXMuX2dldERpbWVuc2lvbnNTdHlsZXMoc2l6ZS54LCBzdGFydC55ICsgb2Zmc2V0LnkpLFxuICAgICAgY2VudGVyTGVmdDogdGhpcy5fZ2V0RGltZW5zaW9uc1N0eWxlcyhzdGFydC54ICsgb2Zmc2V0LngsIHNpemUueSksXG4gICAgICBjZW50ZXI6IHsgd2lkdGg6IGNlbnRlci53aWR0aCB9LFxuICAgICAgaW5uZXJUcmFuc2Zvcm1Db250YWluZXI6IGNlbnRlclxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE1JU0NcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGltZW5zaW9ucyBzdHlsZSAod2lkdGggLyBoZWlnaHQpIGZvciB0aGUgZ2l2ZW4gZGltZW5zaW9uc1xuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0RGltZW5zaW9uc1N0eWxlcyAoeCwgeSkge1xuICAgIC8vIFRhYmxlIGNlbGxzIGFuZCByb3dzIGNhbid0IGhhdmUgYSB3aWR0aCAvIGhlaWdodCBvZiAwXG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBNYXRoLm1heCgxLCB4KSxcbiAgICAgIGhlaWdodDogTWF0aC5tYXgoMSwgeSlcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmVuZGVycyB0aGlzIGNvbXBvbmVudCdzIG9uLWNhbnZhcyBjb250cm9sc1xuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgX3JlbmRlck9uQ2FudmFzQ29udHJvbHMgKCkge1xuICAgIGNvbnN0IGFyZWFTdHlsZXMgPSB0aGlzLl9nZXRBcmVhU3R5bGVzKClcbiAgICBjb25zdCBkaXNhYmxlZCA9ICF0aGlzLmdldFNoYXJlZFN0YXRlKCdyYXRpbycpXG4gICAgY29uc3QgZm9yY2VDcm9wID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnZm9yY2VDcm9wJylcblxuICAgIGNvbnN0IGFjY2VwdEJ1dHRvblN0eWxlID0ge1xuICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCcke3RoaXMuX2dldEFzc2V0UGF0aCgnZWRpdG9yL2NvbnRyb2xzL3RyYW5zZm9ybS9hY2NlcHQucG5nJywgdHJ1ZSl9JylgXG4gICAgfVxuXG4gICAgbGV0IGFjY2VwdEJ1dHRvbiA9ICg8QWNjZXB0QnV0dG9uXG4gICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWFjY2VwdEJ1dHRvbicgOiB1bmRlZmluZWQpfVxuICAgICAgZW5hYmxlZD17dGhpcy5nZXRTaGFyZWRTdGF0ZSgnY2hhbmdlc0RvbmUnKX1cbiAgICAgIG9uQ2xpY2s9e3RoaXMuX29uQWNjZXB0Q2xpY2t9XG4gICAgICBvbk1vdXNlRG93bj17dGhpcy5fb25BY2NlcHRNb3VzZURvd259XG4gICAgICBzdHlsZT17YWNjZXB0QnV0dG9uU3R5bGV9IC8+KVxuXG4gICAgcmV0dXJuICg8T25DYW52YXNDb250cm9scyBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9jb250YWluZXIgPSBlbCB9fT5cbiAgICAgIDxJbWFnZUNvbnRhaW5lclxuICAgICAgICBjbGFzc05hbWU9J2pzLWltYWdlQ29udGFpbmVyJyBpbm5lclJlZj17ZWwgPT4geyB0aGlzLl9pbWFnZUNvbnRhaW5lciA9IGVsIH19PlxuICAgICAgICB7IGZvcmNlQ3JvcCA/IGFjY2VwdEJ1dHRvbiA6IG51bGwgfVxuICAgICAgPC9JbWFnZUNvbnRhaW5lcj5cbiAgICAgIDxPdXRlclRyYW5zZm9ybUNvbnRhaW5lclxuICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLW91dGVyVHJhbnNmb3JtQ29udGFpbmVyJyA6IHVuZGVmaW5lZCl9XG4gICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUudmlzaWJsZX1cbiAgICAgICAgaW5uZXJSZWY9e2VsID0+IHsgdGhpcy5fdHJhbnNmb3JtQ29udGFpbmVyID0gZWwgfX0+XG4gICAgICAgIDxUcmFuc2Zvcm1Sb3c+XG4gICAgICAgICAgPERhcmtUcmFuc2Zvcm1DZWxsIHN0eWxlPXthcmVhU3R5bGVzLnRvcExlZnR9IC8+XG4gICAgICAgICAgPERhcmtUcmFuc2Zvcm1DZWxsIHN0eWxlPXthcmVhU3R5bGVzLnRvcENlbnRlcn0gLz5cbiAgICAgICAgICA8RGFya1RyYW5zZm9ybUNlbGwgLz5cbiAgICAgICAgPC9UcmFuc2Zvcm1Sb3c+XG4gICAgICAgIDxUcmFuc2Zvcm1Sb3c+XG4gICAgICAgICAgPERhcmtUcmFuc2Zvcm1DZWxsIHN0eWxlPXthcmVhU3R5bGVzLmNlbnRlckxlZnR9IC8+XG4gICAgICAgICAgPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgICAgICAgb25TdGFydD17dGhpcy5fb25DZW50ZXJEcmFnU3RhcnR9XG4gICAgICAgICAgICBvbkRyYWc9e3RoaXMuX29uQ2VudGVyRHJhZ31cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH0+XG4gICAgICAgICAgICA8Q2VudGVyVHJhbnNmb3JtQ2VsbCBzdHlsZT17YXJlYVN0eWxlcy5jZW50ZXJ9IGNsYXNzTmFtZT17KHRlc3QgPyAnanMtdHJhbnNmb3JtQ2VudGVyQ2VsbCcgOiB1bmRlZmluZWQpfSB1bmRyYWdnYWJsZT17ZGlzYWJsZWR9PlxuICAgICAgICAgICAgICB7IWRpc2FibGVkICYmIFs8RHJhZ2dhYmxlQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgb25TdGFydD17dGhpcy5fb25Db3JuZXJEcmFnU3RhcnQuYmluZCh0aGlzLCAndG9wJywgJ2xlZnQnKX1cbiAgICAgICAgICAgICAgICBvbkRyYWc9e3RoaXMuX29uQ29ybmVyRHJhZ31cbiAgICAgICAgICAgICAgICBrZXk9J3RvcExlZnQnPlxuICAgICAgICAgICAgICAgIDxEcmFnZ2VyIHRvcCBsZWZ0IGNsYXNzTmFtZT17KHRlc3QgPyAnanMtdHJhbnNmb3JtVG9wTGVmdENvcm5lcicgOiB1bmRlZmluZWQpfSAvPlxuICAgICAgICAgICAgICA8L0RyYWdnYWJsZUNvbXBvbmVudD4sXG4gICAgICAgICAgICAgIDxEcmFnZ2FibGVDb21wb25lbnRcbiAgICAgICAgICAgICAgICBvblN0YXJ0PXt0aGlzLl9vbkNvcm5lckRyYWdTdGFydC5iaW5kKHRoaXMsICd0b3AnLCAncmlnaHQnKX1cbiAgICAgICAgICAgICAgICBvbkRyYWc9e3RoaXMuX29uQ29ybmVyRHJhZ31cbiAgICAgICAgICAgICAgICBrZXk9J3RvcFJpZ2h0Jz5cbiAgICAgICAgICAgICAgICA8RHJhZ2dlciB0b3AgcmlnaHQgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy10cmFuc2Zvcm1Ub3BSaWdodENvcm5lcicgOiB1bmRlZmluZWQpfSAvPlxuICAgICAgICAgICAgICA8L0RyYWdnYWJsZUNvbXBvbmVudD4sXG4gICAgICAgICAgICAgIDxEcmFnZ2FibGVDb21wb25lbnRcbiAgICAgICAgICAgICAgICBvblN0YXJ0PXt0aGlzLl9vbkNvcm5lckRyYWdTdGFydC5iaW5kKHRoaXMsICdib3R0b20nLCAnbGVmdCcpfVxuICAgICAgICAgICAgICAgIG9uRHJhZz17dGhpcy5fb25Db3JuZXJEcmFnfVxuICAgICAgICAgICAgICAgIGtleT0nYm90dG9tTGVmdCc+XG4gICAgICAgICAgICAgICAgPERyYWdnZXIgYm90dG9tIGxlZnQgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy10cmFuc2Zvcm1Cb3R0b21MZWZ0Q29ybmVyJyA6IHVuZGVmaW5lZCl9IC8+XG4gICAgICAgICAgICAgIDwvRHJhZ2dhYmxlQ29tcG9uZW50PixcbiAgICAgICAgICAgICAgPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgICAgICAgICAgIG9uU3RhcnQ9e3RoaXMuX29uQ29ybmVyRHJhZ1N0YXJ0LmJpbmQodGhpcywgJ2JvdHRvbScsICdyaWdodCcpfVxuICAgICAgICAgICAgICAgIG9uRHJhZz17dGhpcy5fb25Db3JuZXJEcmFnfVxuICAgICAgICAgICAgICAgIGtleT0nYm90dG9tUmlnaHQnPlxuICAgICAgICAgICAgICAgIDxEcmFnZ2VyIGJvdHRvbSByaWdodCBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXRyYW5zZm9ybUJvdHRvbVJpZ2h0Q29ybmVyJyA6IHVuZGVmaW5lZCl9IC8+XG4gICAgICAgICAgICAgIDwvRHJhZ2dhYmxlQ29tcG9uZW50PixcbiAgICAgICAgICAgICAgPElubmVyVHJhbnNmb3JtQ29udGFpbmVyIHN0eWxlPXthcmVhU3R5bGVzLmlubmVyVHJhbnNmb3JtQ29udGFpbmVyfSBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWlubmVyVHJhbnNmb3JtQ29udGFpbmVyJyA6IHVuZGVmaW5lZCl9IGtleT0naW5uZXInPlxuICAgICAgICAgICAgICAgIDxUcmFuc2Zvcm1Sb3c+XG4gICAgICAgICAgICAgICAgICA8Qm9yZGVyZWRUcmFuc2Zvcm1DZWxsIHJpZ2h0IGJvdHRvbSAvPlxuICAgICAgICAgICAgICAgICAgPEJvcmRlcmVkVHJhbnNmb3JtQ2VsbCByaWdodCBib3R0b20gLz5cbiAgICAgICAgICAgICAgICAgIDxCb3JkZXJlZFRyYW5zZm9ybUNlbGwgYm90dG9tIC8+XG4gICAgICAgICAgICAgICAgPC9UcmFuc2Zvcm1Sb3c+XG4gICAgICAgICAgICAgICAgPFRyYW5zZm9ybVJvdz5cbiAgICAgICAgICAgICAgICAgIDxCb3JkZXJlZFRyYW5zZm9ybUNlbGwgcmlnaHQgYm90dG9tIC8+XG4gICAgICAgICAgICAgICAgICA8Qm9yZGVyZWRUcmFuc2Zvcm1DZWxsIHJpZ2h0IGJvdHRvbSAvPlxuICAgICAgICAgICAgICAgICAgPEJvcmRlcmVkVHJhbnNmb3JtQ2VsbCBib3R0b20gLz5cbiAgICAgICAgICAgICAgICA8L1RyYW5zZm9ybVJvdz5cbiAgICAgICAgICAgICAgICA8VHJhbnNmb3JtUm93PlxuICAgICAgICAgICAgICAgICAgPEJvcmRlcmVkVHJhbnNmb3JtQ2VsbCByaWdodCAvPlxuICAgICAgICAgICAgICAgICAgPEJvcmRlcmVkVHJhbnNmb3JtQ2VsbCByaWdodCAvPlxuICAgICAgICAgICAgICAgICAgPEJvcmRlcmVkVHJhbnNmb3JtQ2VsbCAvPlxuICAgICAgICAgICAgICAgIDwvVHJhbnNmb3JtUm93PlxuICAgICAgICAgICAgICA8L0lubmVyVHJhbnNmb3JtQ29udGFpbmVyPl19XG4gICAgICAgICAgICA8L0NlbnRlclRyYW5zZm9ybUNlbGw+XG4gICAgICAgICAgPC9EcmFnZ2FibGVDb21wb25lbnQ+XG4gICAgICAgICAgPERhcmtUcmFuc2Zvcm1DZWxsIC8+XG4gICAgICAgIDwvVHJhbnNmb3JtUm93PlxuICAgICAgICA8VHJhbnNmb3JtUm93PlxuICAgICAgICAgIDxEYXJrVHJhbnNmb3JtQ2VsbCAvPlxuICAgICAgICAgIDxEYXJrVHJhbnNmb3JtQ2VsbCAvPlxuICAgICAgICAgIDxEYXJrVHJhbnNmb3JtQ2VsbCAvPlxuICAgICAgICA8L1RyYW5zZm9ybVJvdz5cbiAgICAgIDwvT3V0ZXJUcmFuc2Zvcm1Db250YWluZXI+XG4gICAgPC9PbkNhbnZhc0NvbnRyb2xzPilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICBfcmVuZGVyQ29udHJvbHMgKCkge1xuICAgIGNvbnN0IGZsaXBJY29uU3R5bGUgPSB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJyR7dGhpcy5fZ2V0QXNzZXRQYXRoKCdlZGl0b3IvY29udHJvbHMvdHJhbnNmb3JtL2ZsaXAucG5nJywgdHJ1ZSl9JylgXG4gICAgfVxuICAgIGNvbnN0IHJvdGF0ZUljb25TdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgnJHt0aGlzLl9nZXRBc3NldFBhdGgoJ2VkaXRvci9jb250cm9scy90cmFuc2Zvcm0vcm90YXRlLnBuZycsIHRydWUpfScpYFxuICAgIH1cblxuICAgIGNvbnN0IHsgZW5hYmxlUm90YXRpb24sIGVuYWJsZUZsaXAsIGVuYWJsZVN0cmFpZ2h0ZW4gfSA9IHRoaXMucHJvcHMub3B0aW9uc1xuICAgIHJldHVybiAoPENhbnZhc0NvbnRyb2xzIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtdHJhbnNmb3JtQ2FudmFzQ29udHJvbHMnIDogdW5kZWZpbmVkKX0+XG4gICAgICB7dGhpcy5fcmVuZGVyT25DYW52YXNDb250cm9scygpfVxuICAgICAgPEJvdHRvbUNvbnRyb2xzQ29udGFpbmVyPlxuICAgICAgICA8Qm90dG9tQ29udHJvbHMgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy10cmFuc2Zvcm1Cb3R0b21DYW52YXNDb250cm9scycgOiB1bmRlZmluZWQpfT5cbiAgICAgICAgICB7ZW5hYmxlRmxpcCAmJlxuICAgICAgICAgICAgWzxGbGlwQnV0dG9uXG4gICAgICAgICAgICAgIHN0eWxlPXtmbGlwSWNvblN0eWxlfVxuICAgICAgICAgICAgICBrZXk9J2ZsaXAtaCdcbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5fb25GbGlwQ2xpY2suYmluZCh0aGlzLCAnaG9yaXpvbnRhbCcpfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLWZsaXBIb3Jpem9udGFsbHlCdXR0b24nIDogdW5kZWZpbmVkKX0gLz4sXG4gICAgICAgICAgICA8RmxpcEJ1dHRvblxuICAgICAgICAgICAgICB2ZXJ0aWNhbFxuICAgICAgICAgICAgICBzdHlsZT17ZmxpcEljb25TdHlsZX1cbiAgICAgICAgICAgICAga2V5PSdmbGlwLXYnXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uRmxpcENsaWNrLmJpbmQodGhpcywgJ3ZlcnRpY2FsJyl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtZmxpcFZlcnRpY2FsbHlCdXR0b24nIDogdW5kZWZpbmVkKX0gLz5dfVxuICAgICAgICAgIHtlbmFibGVTdHJhaWdodGVuICYmIDxUcmFuc2Zvcm1Sb3RhdGlvblNsaWRlckNvbXBvbmVudFxuICAgICAgICAgICAgdmFsdWU9e3RoaXMuZ2V0U2hhcmVkU3RhdGUoJ3JvdGF0aW9uJyl9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5fb25Sb3RhdGlvbkNoYW5nZX0gLz59XG4gICAgICAgICAge2VuYWJsZVJvdGF0aW9uICYmXG4gICAgICAgICAgICBbPFJvdGF0ZUJ1dHRvblxuICAgICAgICAgICAgICBzdHlsZT17cm90YXRlSWNvblN0eWxlfVxuICAgICAgICAgICAgICBrZXk9J3JvdGF0ZS1jY3cnXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uUm90YXRlQ2xpY2suYmluZCh0aGlzLCAnY2N3Jyl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtcm90YXRlQ291bnRlckNsb2Nrd2lzZUJ1dHRvbicgOiB1bmRlZmluZWQpfSAvPixcbiAgICAgICAgICAgIDxSb3RhdGVCdXR0b25cbiAgICAgICAgICAgICAgY2xvY2t3aXNlXG4gICAgICAgICAgICAgIHN0eWxlPXtyb3RhdGVJY29uU3R5bGV9XG4gICAgICAgICAgICAgIGtleT0ncm90YXRlLWN3J1xuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLl9vblJvdGF0ZUNsaWNrLmJpbmQodGhpcywgJ2N3Jyl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17KHRlc3QgPyAnanMtcm90YXRlQ2xvY2t3aXNlQnV0dG9uJyA6IHVuZGVmaW5lZCl9IC8+XX1cbiAgICAgICAgPC9Cb3R0b21Db250cm9scz5cbiAgICAgIDwvQm90dG9tQ29udHJvbHNDb250YWluZXI+XG4gICAgPC9DYW52YXNDb250cm9scz4pXG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU1RZTEVTXG5cbmNvbnN0IENhbnZhc0NvbnRyb2xzID0gYWRvbmlzLmRpdih7fSlcblxuY29uc3QgT25DYW52YXNDb250cm9scyA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSwge1xuICBkcmFnZ2FibGU6IHtcbiAgICBjdXJzb3I6ICdtb3ZlJ1xuICB9XG59KVxuXG5jb25zdCBCb3R0b21Db250cm9sc0NvbnRhaW5lciA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgdG9wOiAnYXV0bycsXG4gIGhlaWdodDogJzQ4cHgnLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInXG59KVxuXG5jb25zdCBCb3R0b21Db250cm9scyA9IGFkb25pcy5kaXYoe1xuICBtYXJnaW46ICcwIGF1dG8nLFxuICBoZWlnaHQ6ICcyNHB4JyxcbiAgbWFyZ2luVG9wOiAnMTJweCcsXG4gIHZlcnRpY2FsQWxpZ246ICd0b3AnXG59KVxuXG5jb25zdCBUcmFuc2Zvcm1Db250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGRpc3BsYXk6ICd0YWJsZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMFxufSlcblxuY29uc3QgSW1hZ2VDb250YWluZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbn0pXG5cbmNvbnN0IE91dGVyVHJhbnNmb3JtQ29udGFpbmVyID0gYWRvbmlzKFRyYW5zZm9ybUNvbnRhaW5lcikoe1xuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAwLjNzIGVhc2Utb3V0JyxcbiAgb3BhY2l0eTogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJSdcbn0sIHtcbiAgdmlzaWJsZToge1xuICAgIG9wYWNpdHk6IDFcbiAgfVxufSlcblxuY29uc3QgSW5uZXJUcmFuc2Zvcm1Db250YWluZXIgPSBhZG9uaXMoVHJhbnNmb3JtQ29udGFpbmVyKSh7fSlcblxuY29uc3QgVHJhbnNmb3JtUm93ID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1yb3cnXG59KVxuXG5jb25zdCBUcmFuc2Zvcm1DZWxsID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1jZWxsJ1xufSlcblxuY29uc3QgQm9yZGVyZWRUcmFuc2Zvcm1DZWxsID0gYWRvbmlzKFRyYW5zZm9ybUNlbGwpKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIHdpZHRoOiAnMzMuMyUnLFxuICBoZWlnaHQ6ICczMy4zJSdcbn0sIHtcbiAgdG9wOiB7IGJvcmRlclRvcDogJzFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknIH0sXG4gIHJpZ2h0OiB7IGJvcmRlclJpZ2h0OiAnMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScgfSxcbiAgYm90dG9tOiB7IGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknIH0sXG4gIGxlZnQ6IHsgYm9yZGVyTGVmdDogJzFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknIH1cbn0pXG5cbmNvbnN0IENlbnRlclRyYW5zZm9ybUNlbGwgPSBhZG9uaXMoVHJhbnNmb3JtQ2VsbCkoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgYm94U2hhZG93OiAnaW5zZXQgMCAwIDAgMnB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gIGN1cnNvcjogJ21vdmUnXG59LCB7XG4gIHVuZHJhZ2dhYmxlOiB7IGN1cnNvcjogJ2RlZmF1bHQnIH1cbn0pXG5cbmNvbnN0IERhcmtUcmFuc2Zvcm1DZWxsID0gYWRvbmlzKFRyYW5zZm9ybUNlbGwpKHtcbiAgYmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC43KSdcbn0pXG5cbmNvbnN0IERyYWdnZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHdpZHRoOiAnMTRweCcsXG4gIGhlaWdodDogJzE0cHgnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgekluZGV4OiAnMidcbn0sIHtcbiAgdG9wOiB7IGJvcmRlclRvcDogJzJweCBzb2xpZCB3aGl0ZScsIHRvcDogMCB9LFxuICByaWdodDogeyBib3JkZXJSaWdodDogJzJweCBzb2xpZCB3aGl0ZScsIHJpZ2h0OiAwIH0sXG4gIGJvdHRvbTogeyBib3JkZXJCb3R0b206ICcycHggc29saWQgd2hpdGUnLCBib3R0b206IDAgfSxcbiAgbGVmdDogeyBib3JkZXJMZWZ0OiAnMnB4IHNvbGlkIHdoaXRlJywgbGVmdDogMCB9XG59KVxuXG5jb25zdCBCdXR0b24gPSBhZG9uaXMuYnV0dG9uKHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIHdpZHRoOiAnMjRweCcsXG4gIGhlaWdodDogJzI0cHgnLFxuICBtYXJnaW46ICcwIDhweCcsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICBwYWRkaW5nOiAwLFxuICBib3JkZXI6ICdub25lJyxcbiAgYmFja2dyb3VuZDogJ25vLXJlcGVhdCBjZW50ZXInLFxuICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuXG4gICc6Zm9jdXMnOiB7XG4gICAgb3V0bGluZTogJ25vbmUnXG4gIH1cbn0pXG5cbmNvbnN0IEZsaXBCdXR0b24gPSBhZG9uaXMoQnV0dG9uKSh7fSwge1xuICB2ZXJ0aWNhbDoge1xuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSg5MGRlZyknXG4gIH1cbn0pXG5cbmNvbnN0IFJvdGF0ZUJ1dHRvbiA9IGFkb25pcyhCdXR0b24pKHt9LCB7XG4gIGNsb2Nrd2lzZToge1xuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZVkoMTgwZGVnKSdcbiAgfVxufSlcblxuY29uc3QgQWNjZXB0QnV0dG9uID0gYWRvbmlzLmRpdih7XG4gIHRyYW5zaXRpb246IHRoZW1lID0+IGBiYWNrZ3JvdW5kQ29sb3IgJHt0aGVtZS50cmFuc2l0aW9uRHVyYXRpb259cyBlYXNlLW91dGAsXG4gIGJhY2tncm91bmQ6ICduby1yZXBlYXQgY2VudGVyIGNlbnRlcicsXG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUgPT4gdGhlbWUuZGltbWVkVGV4dENvbG9yLFxuICBiYWNrZ3JvdW5kU2l6ZTogJzE4cHggMTdweCcsXG4gIGJveFNoYWRvdzogJzAgMnB4IDJweCAwIHJnYmEoMCwgMCwgMCwgMC4zMCksIDAgNHB4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4zMCksIDAgNnB4IDhweCAwIHJnYmEoMCwgMCwgMCwgMC4zMCksIDAgOHB4IDEwcHggMCByZ2JhKDAsIDAsIDAsIDAuMzApJyxcbiAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgd2lkdGg6ICc0OHB4JyxcbiAgaGVpZ2h0OiAnNDhweCcsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBib3R0b206ICc1cHgnLFxuICBsZWZ0OiAnNTAlJyxcbiAgbWFyZ2luTGVmdDogJy0yNHB4JyxcbiAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ2NvbnRyb2xzT3ZlcmxheXMnKVxufSwge1xuICBlbmFibGVkOiB7XG4gICAgdHJhbnNpdGlvbjogdGhlbWUgPT4gYGJhY2tncm91bmRDb2xvciAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2UtaW5gLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUgPT4gdGhlbWUucHJpbWFyeUNvbG9yLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy90cmFuc2Zvcm0vdHJhbnNmb3JtLWNhbnZhcy1jb250cm9scy1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBCYXNlQ29tcG9uZW50LCBEcmFnZ2FibGVDb21wb25lbnQgfSBmcm9tICdwaG90b2VkaXRvcnNkay9kZXNrdG9wLXVpL2NvcmUnXG5cbmNvbnN0IFNMSURFUl9XSURUSCA9IDIxN1xuY29uc3QgTUFYX1JPVEFUSU9OID0gNDVcbmNvbnN0IHRlc3QgPSBwcm9jZXNzLmVudi5FTlYgPT09ICd0ZXN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc2Zvcm1Sb3RhdGlvblNsaWRlckNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gQmFzZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19vbkRyYWdTdGFydCcsXG4gICAgICAnX29uRHJhZydcbiAgICApXG5cbiAgICB0aGlzLl93aWR0aCA9IDBcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUgfHwgMFxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExJRkVDWUNMRVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoaXMgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWRcbiAgICovXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnREaWRNb3VudCgpXG4gICAgdGhpcy5fZGVncmVlc1BlclBpeGVsID0gKE1BWF9ST1RBVElPTiAqIDIpIC8gU0xJREVSX1dJRFRIXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBFVkVOVFNcblxuICAvKipcbiAgICogSW52b2tlZCBiZWZvcmUgYSBtb3VudGVkIGNvbXBvbmVudCByZWNlaXZlcyBuZXcgcHJvcHNcbiAgICogQHBhcmFtICB7T2JqZWN0fSBuZXh0UHJvcHNcbiAgICovXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wcykge1xuICAgIGlmICh0aGlzLnN0YXRlLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogbmV4dFByb3BzLnZhbHVlIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgdXNlciBzdGFydHMgZHJhZ2dpbmcgdGhlIHJvdGF0aW9uIHNsaWRlclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uRHJhZ1N0YXJ0ICgpIHtcbiAgICB0aGlzLl9pbml0aWFsRGVncmVlcyA9IHRoaXMuc3RhdGUudmFsdWUgKiAxODAgLyBNYXRoLlBJXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGlsZSB0aGUgdXNlciBpcyBkcmFnZ2luZyB0aGUgcm90YXRpb24gc2xpZGVyXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25EcmFnIChkaXN0YW5jZSkge1xuICAgIGxldCBkZWdyZWVzID0gdGhpcy5faW5pdGlhbERlZ3JlZXMgKyBkaXN0YW5jZS54ICogdGhpcy5fZGVncmVlc1BlclBpeGVsXG4gICAgZGVncmVlcyA9IE1hdGgubWluKE1BWF9ST1RBVElPTiwgTWF0aC5tYXgoZGVncmVlcywgTUFYX1JPVEFUSU9OICogLTEpKVxuXG4gICAgY29uc3QgdmFsdWUgPSBkZWdyZWVzICogTWF0aC5QSSAvIDE4MFxuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZSB9KVxuICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiZcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UodmFsdWUpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBSRU5ERVJJTkdcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGFiZWwgdmFsdWVcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFZhbHVlICgpIHtcbiAgICByZXR1cm4gYCR7TWF0aC5yb3VuZCh0aGlzLnN0YXRlLnZhbHVlICogMTgwIC8gTWF0aC5QSSl9wrBgXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW5kaWNhdG9yIHBvc2l0aW9uXG4gICAqIEByZXR1cm4ge051bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRJbmRpY2F0b3JQb3NpdGlvbiAoKSB7XG4gICAgY29uc3QgdmFsdWVSYW5nZSA9IE1BWF9ST1RBVElPTiAqIE1hdGguUEkgLyAxODBcbiAgICByZXR1cm4gdGhpcy5fd2lkdGggLyAyICsgKHRoaXMuc3RhdGUudmFsdWUgLyB2YWx1ZVJhbmdlKSAqICh0aGlzLl93aWR0aCAvIDIpXG4gIH1cblxuICBfZ2V0SW5kaWNhdG9yU3R5bGVzICgpIHtcbiAgICBjb25zdCB2YWx1ZVJhbmdlID0gTUFYX1JPVEFUSU9OICogTWF0aC5QSSAvIDE4MFxuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiB7IGxlZnQ6IFNMSURFUl9XSURUSCAvIDIgKyAodGhpcy5zdGF0ZS52YWx1ZSAvIHZhbHVlUmFuZ2UpICogKFNMSURFUl9XSURUSCAvIDIpIH0sXG4gICAgICByaWdodDogeyByaWdodDogU0xJREVSX1dJRFRIIC8gMiAtICh0aGlzLnN0YXRlLnZhbHVlIC8gdmFsdWVSYW5nZSkgKiAoU0xJREVSX1dJRFRIIC8gMikgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IGluZGljYXRvclN0eWxlcyA9IHRoaXMuX2dldEluZGljYXRvclN0eWxlcygpXG4gICAgY29uc3QgbGVmdFNsaWRlclN0eWxlID0ge1xuICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCcke3RoaXMuX2dldEFzc2V0UGF0aCgnZWRpdG9yL2NvbnRyb2xzL3RyYW5zZm9ybS9kZWdyZWUtc2xpZGVyLnBuZycsIHRydWUpfScpYCxcbiAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogaW5kaWNhdG9yU3R5bGVzLmxlZnQubGVmdCAtIDRcbiAgICB9XG4gICAgY29uc3QgcmlnaHRTbGlkZXJTdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgnJHt0aGlzLl9nZXRBc3NldFBhdGgoJ2VkaXRvci9jb250cm9scy90cmFuc2Zvcm0vZGVncmVlLXNsaWRlci5wbmcnLCB0cnVlKX0nKWAsXG4gICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IGluZGljYXRvclN0eWxlcy5sZWZ0LmxlZnQgKyAzNVxuICAgIH1cblxuICAgIHJldHVybiAoPERyYWdnYWJsZUNvbXBvbmVudFxuICAgICAgb25TdGFydD17dGhpcy5fb25EcmFnU3RhcnR9XG4gICAgICBvbkRyYWc9e3RoaXMuX29uRHJhZ30+XG4gICAgICA8V3JhcHBlciBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXRyYW5zZm9ybVJvdGF0aW9uU2xpZGVyJyA6IHVuZGVmaW5lZCl9PlxuICAgICAgICA8Um90YXRpb25TbGlkZXIgc3R5bGU9e2xlZnRTbGlkZXJTdHlsZX0+XG4gICAgICAgICAgPEluZGljYXRvciBzdHlsZT17aW5kaWNhdG9yU3R5bGVzLmxlZnR9IC8+XG4gICAgICAgIDwvUm90YXRpb25TbGlkZXI+XG4gICAgICAgIDxWYWx1ZSBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXRyYW5zZm9ybVJvdGF0aW9uVmFsdWUnIDogdW5kZWZpbmVkKX0+e3RoaXMuX2dldFZhbHVlKCl9PC9WYWx1ZT5cbiAgICAgICAgPFJvdGF0aW9uU2xpZGVyIHN0eWxlPXtyaWdodFNsaWRlclN0eWxlfT5cbiAgICAgICAgICA8SW5kaWNhdG9yIHN0eWxlPXtpbmRpY2F0b3JTdHlsZXMucmlnaHR9IC8+XG4gICAgICAgIDwvUm90YXRpb25TbGlkZXI+XG4gICAgICA8L1dyYXBwZXI+XG4gICAgPC9EcmFnZ2FibGVDb21wb25lbnQ+KVxuICB9XG59XG5cbmNvbnN0IFdyYXBwZXIgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB3aWR0aDogJzIxN3B4JyxcbiAgbWFyZ2luOiAnMCA4cHgnLFxuICB2ZXJ0aWNhbEFsaWduOiAndG9wJ1xufSlcblxuY29uc3QgUm90YXRpb25TbGlkZXIgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICB3aWR0aDogJzkycHgnLFxuICBoZWlnaHQ6ICcyNHB4JyxcbiAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gIGJhY2tncm91bmQ6ICdyZXBlYXQteCBsZWZ0IGNlbnRlcicsXG4gIGJhY2tncm91bmRTaXplOiAnNTVweCAzcHgnLFxuICBvdmVyZmxvdzogJ2hpZGRlbidcbn0pXG5cbmNvbnN0IEluZGljYXRvciA9IGFkb25pcy5kaXYoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAnOXB4JyxcbiAgd2lkdGg6ICcycHgnLFxuICBoZWlnaHQ6ICc2cHgnLFxuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS50ZXh0Q29sb3IsXG4gIHpJbmRleDogMVxufSlcblxuY29uc3QgVmFsdWUgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIHdpZHRoOiAnMzNweCcsXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIGxpbmVIZWlnaHQ6ICcyNHB4JyxcbiAgZm9udFNpemU6ICcxNXB4JyxcbiAgY29sb3I6IHRoZW1lID0+IHRoZW1lLnRleHRDb2xvcixcbiAgekluZGV4OiAyLFxuICBmb250RmFtaWx5OiB0aGVtZSA9PiB0aGVtZS5tZWRpdW1Gb250RmFtaWx5XG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvdHJhbnNmb3JtL3RyYW5zZm9ybS1yb3RhdGlvbi1zbGlkZXItY29tcG9uZW50LmpzeCIsIi8qKiBAanN4IFJlYWN0LmNyZWF0ZUVsZW1lbnQgKi9cbi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgTWF0aCBhcyBQTWF0aCB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuaW1wb3J0IHtcbiAgUmVhY3QsIFV0aWxzLCBDb25zdGFudHMsIGFkb25pcywgQ29udHJvbHNDb21wb25lbnQsIEJ1dHRvbkNvbXBvbmVudCxcbiAgU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQsIEdyb3VwZWRDb250cm9sc1N0eWxlcywgVHJhbnNmb3JtUmF0aW9NYW5hZ2VyXG59IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcbmltcG9ydCBUcmFuc2Zvcm1MaXN0SXRlbUNvbXBvbmVudCBmcm9tICcuL3RyYW5zZm9ybS1saXN0LWl0ZW0tY29tcG9uZW50J1xuaW1wb3J0IFRyYW5zZm9ybURpbWVuc2lvbnNDb21wb25lbnQgZnJvbSAnLi90cmFuc2Zvcm0tZGltZW5zaW9ucy1jb21wb25lbnQnXG5cbmNvbnN0IHsgQ29udHJvbEdyb3VwTGlzdCwgQ29udHJvbEdyb3VwLCBDb250cm9sR3JvdXBUaXRsZSB9ID0gR3JvdXBlZENvbnRyb2xzU3R5bGVzXG5jb25zdCB7IFZlY3RvcjIgfSA9IFBNYXRoXG5jb25zdCB0ZXN0ID0gcHJvY2Vzcy5lbnYuRU5WID09PSAndGVzdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNmb3JtQ29udHJvbHNDb21wb25lbnQgZXh0ZW5kcyBDb250cm9sc0NvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBDb250cm9sc0NvbXBvbmVudC5jb250ZXh0VHlwZXNcbiAgc3RhdGljIFJvb3RFbGVtZW50ID0gQ29udHJvbHNDb21wb25lbnQuUm9vdEVsZW1lbnRcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9iaW5kQWxsKFxuICAgICAgJ19yZWFwcGx5UmF0aW8nLFxuICAgICAgJ19vbkhpc3RvcnlDaGFuZ2UnLFxuICAgICAgJ19vblJlc2V0RGVmYXVsdENsaWNrJyxcbiAgICAgICdfb25PcGVyYXRpb25SZW1vdmVkJyxcbiAgICAgICdfb25PcGVyYXRpb25VcGRhdGVkJ1xuICAgIClcblxuICAgIHRoaXMuX2V2ZW50cyA9IHtcbiAgICAgIFtDb25zdGFudHMuRVZFTlRTLlRSQU5TRk9STV9SRUFQUExZX1JBVElPXTogdGhpcy5fcmVhcHBseVJhdGlvLFxuICAgICAgW0NvbnN0YW50cy5FVkVOVFMuT1BFUkFUSU9OX1JFTU9WRURdOiB0aGlzLl9vbk9wZXJhdGlvblJlbW92ZWQsXG4gICAgICBbQ29uc3RhbnRzLkVWRU5UUy5PUEVSQVRJT05fVVBEQVRFRF06IHRoaXMuX29uT3BlcmF0aW9uVXBkYXRlZCxcbiAgICAgIFtDb25zdGFudHMuRVZFTlRTLkhJU1RPUllfVU5ET106IHRoaXMuX29uSGlzdG9yeUNoYW5nZSxcbiAgICAgIFtDb25zdGFudHMuRVZFTlRTLkhJU1RPUllfUkVET106IHRoaXMuX29uSGlzdG9yeUNoYW5nZVxuICAgIH1cblxuICAgIHRoaXMuX3RyYW5zZm9ybVJhdGlvTWFuYWdlciA9IG5ldyBUcmFuc2Zvcm1SYXRpb01hbmFnZXIodGhpcy5wcm9wcy5vcHRpb25zKVxuXG4gICAgdGhpcy5zdGF0ZS5yYXRpbyA9IG51bGxcbiAgICB0aGlzLl9zZWxlY3RJbml0aWFsUmF0aW8oIXRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3RyYW5zZm9ybU9wZXJhdGlvbkV4aXN0ZWRCZWZvcmVFbnRlcmluZycpKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTElGRUNZQ0xFXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgY29tcG9uZW50IHNob3VsZCBjaGFuZ2UgZnJvbSB0aGUgZ2l2ZW4gc3RhdGVcbiAgICogQHBhcmFtICB7T2JqZWN0fSBvbGRTdGF0ZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG5ld1N0YXRlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBzaG91bGRTaGFyZWRDb21wb25lbnRVcGRhdGUgKG9sZFN0YXRlLCBuZXdTdGF0ZSkge1xuICAgIHJldHVybiBvbGRTdGF0ZS5yYXRpbyAhPT0gbmV3U3RhdGUucmF0aW9cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGdpdmVuIHVuZG8gaXRlbXMgYXJlIGFwcGxpZWRcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuT3BlcmF0aW9ufSBvcGVyYXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vbkhpc3RvcnlDaGFuZ2UgKGl0ZW0pIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3QgbmV3U2hhcmVkU3RhdGUgPSB7fVxuXG4gICAgY29uc3Qgb3BlcmF0aW9uID0gZWRpdG9yLm9wZXJhdGlvbnMuZ2V0KCd0cmFuc2Zvcm0nKVxuICAgIGlmICghb3BlcmF0aW9uKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBuZXdUcmFuc2Zvcm1PcHRpb25zID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnbmV3VHJhbnNmb3JtT3B0aW9ucycpXG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IHRoaXMucHJvcHMuY29udHJvbHMuY29udmVydE9wZXJhdGlvbk9wdGlvbnNUb1VJKG9wZXJhdGlvbi5zZXJpYWxpemVPcHRpb25zKCkpXG4gICAgbmV3VHJhbnNmb3JtT3B0aW9ucy5zdGFydCA9IG5ld09wdGlvbnMuc3RhcnRcbiAgICBuZXdUcmFuc2Zvcm1PcHRpb25zLmVuZCA9IG5ld09wdGlvbnMuZW5kXG4gICAgbmV3VHJhbnNmb3JtT3B0aW9ucy5yb3RhdGlvbiA9IG5ld09wdGlvbnMucm90YXRpb25cbiAgICBuZXdUcmFuc2Zvcm1PcHRpb25zLnRleHR1cmVTY2FsZSA9IG5ld09wdGlvbnMudGV4dHVyZVNjYWxlXG4gICAgbmV3U2hhcmVkU3RhdGUubmV3VHJhbnNmb3JtT3B0aW9ucyA9IG5ld1RyYW5zZm9ybU9wdGlvbnNcbiAgICBuZXdTaGFyZWRTdGF0ZS5jaGFuZ2VzRG9uZSA9IHRydWVcblxuICAgIGlmIChpdGVtLmRhdGEgJiYgaXRlbS5kYXRhLnJhdGlvKSB7XG4gICAgICBuZXdTaGFyZWRTdGF0ZS5yYXRpbyA9IGl0ZW0uZGF0YS5yYXRpb1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgZW5kOiBuZXcgVmVjdG9yMigxLCAxKSxcbiAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgc3RhcnQ6IG5ldyBWZWN0b3IyKDAsIDApLFxuICAgICAgdGV4dHVyZVNjYWxlOiAxXG4gICAgfVxuXG4gICAgZWRpdG9yLmJyb2FkY2FzdFRyYW5zZm9ybShvcGVyYXRpb24sIGRlZmF1bHRPcHRpb25zKVxuICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUobmV3U2hhcmVkU3RhdGUpXG4gICAgZWRpdG9yLnpvb20uYXV0byh0cnVlLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiBhbiBvcGVyYXRpb24gaGFzIGJlZW4gdXBkYXRlZFxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uT3BlcmF0aW9uVXBkYXRlZCAob3BlcmF0aW9uKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm1PcGVyYXRpb24gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCd0cmFuc2Zvcm1PcGVyYXRpb24nKVxuICAgIGlmIChjdXJyZW50VHJhbnNmb3JtT3BlcmF0aW9uICE9PSBvcGVyYXRpb24pIHJldHVyblxuXG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IHRoaXMucHJvcHMuY29udHJvbHMuY29udmVydE9wZXJhdGlvbk9wdGlvbnNUb1VJKG9wZXJhdGlvbi5zZXJpYWxpemVPcHRpb25zKCkpXG5cbiAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHtcbiAgICAgIHJvdGF0aW9uOiBuZXdPcHRpb25zLnJvdGF0aW9uLFxuICAgICAgc3RhcnQ6IG5ld09wdGlvbnMuc3RhcnQsXG4gICAgICBlbmQ6IG5ld09wdGlvbnMuZW5kXG4gICAgfSlcbiAgICBlZGl0b3Iuem9vbS5hdXRvKHRydWUsIHRydWUpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgd2hlbiBhbiBvcGVyYXRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb259IG9wZXJhdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uT3BlcmF0aW9uUmVtb3ZlZCAob3BlcmF0aW9uKSB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuXG4gICAgY29uc3QgY3VycmVudFRyYW5zZm9ybU9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3RyYW5zZm9ybU9wZXJhdGlvbicpXG4gICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm1PcGVyYXRpb24gPT09IG9wZXJhdGlvbikge1xuICAgICAgY29uc3QgdHJhbnNmb3JtT3BlcmF0aW9uID0gZWRpdG9yLm9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHNkayA9IGVkaXRvci5nZXRTREsoKVxuICAgICAgc2RrLnNldFJvdGF0aW9uKDApXG4gICAgICBzZGsuc2V0U3ByaXRlU2NhbGUoMSlcblxuICAgICAgdGhpcy5zZXRTaGFyZWRTdGF0ZSh7XG4gICAgICAgIHRyYW5zZm9ybU9wZXJhdGlvbixcbiAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgIGluaXRpYWxUcmFuc2Zvcm1PcHRpb25zOiB0cmFuc2Zvcm1PcGVyYXRpb24uc2VyaWFsaXplT3B0aW9ucygpLFxuICAgICAgICB0cmFuc2Zvcm1PcGVyYXRpb25FeGlzdGVkQmVmb3JlRW50ZXJpbmc6IGZhbHNlXG4gICAgICB9KVxuXG4gICAgICB0cmFuc2Zvcm1PcGVyYXRpb24uX3JhdGlvID0gbnVsbFxuICAgICAgdGhpcy5fc2VsZWN0SW5pdGlhbFJhdGlvKHRydWUsIHRydWUpXG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudE9yaWVudGF0aW9uT3BlcmF0aW9uID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnb3JpZW50YXRpb25PcGVyYXRpb24nKVxuICAgIGlmIChjdXJyZW50T3JpZW50YXRpb25PcGVyYXRpb24gPT09IG9wZXJhdGlvbikge1xuICAgICAgY29uc3Qgb3JpZW50YXRpb25PcGVyYXRpb24gPSBlZGl0b3Iub3BlcmF0aW9ucy5nZXRPckNyZWF0ZSgnb3JpZW50YXRpb24nKVxuXG4gICAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHtcbiAgICAgICAgb3JpZW50YXRpb25PcGVyYXRpb24sXG4gICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICBmbGlwVmVydGljYWxseTogZmFsc2UsXG4gICAgICAgIGZsaXBIb3Jpem9udGFsbHk6IGZhbHNlXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja2VkIHRoZSByZXNldCBkZWZhdWx0IGJ1dHRvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblJlc2V0RGVmYXVsdENsaWNrICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG5cbiAgICBjb25zdCBvcmllbnRhdGlvbk9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ29yaWVudGF0aW9uT3BlcmF0aW9uJylcbiAgICBjb25zdCB0cmFuc2Zvcm1PcGVyYXRpb24gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCd0cmFuc2Zvcm1PcGVyYXRpb24nKVxuICAgIG9yaWVudGF0aW9uT3BlcmF0aW9uLnNldCh7XG4gICAgICBmbGlwSG9yaXpvbnRhbGx5OiBmYWxzZSxcbiAgICAgIGZsaXBWZXJ0aWNhbGx5OiBmYWxzZSxcbiAgICAgIHJvdGF0aW9uOiAwXG4gICAgfSlcblxuICAgIGNvbnN0IG5ld1RyYW5zZm9ybU9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZFN0YXRlKCduZXdUcmFuc2Zvcm1PcHRpb25zJylcbiAgICBuZXdUcmFuc2Zvcm1PcHRpb25zLnN0YXJ0ID0gbmV3IFZlY3RvcjIoMCwgMClcbiAgICBuZXdUcmFuc2Zvcm1PcHRpb25zLmVuZCA9IG5ldyBWZWN0b3IyKDEsIDEpXG4gICAgbmV3VHJhbnNmb3JtT3B0aW9ucy5yb3RhdGlvbiA9IDBcblxuICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUoe1xuICAgICAgcmF0aW86IG51bGwsXG4gICAgICBzdGFydDogbmV3IFZlY3RvcjIoMCwgMCksXG4gICAgICBlbmQ6IG5ldyBWZWN0b3IyKDEsIDEpLFxuICAgICAgb3JpZW50YXRpb25Sb3RhdGlvbjogMCxcbiAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgZmxpcFZlcnRpY2FsbHk6IGZhbHNlLFxuICAgICAgZmxpcEhvcml6b250YWxseTogZmFsc2UsXG4gICAgICBjaGFuZ2VzRG9uZTogdHJ1ZVxuICAgIH0pXG5cbiAgICB0cmFuc2Zvcm1PcGVyYXRpb24uX3JhdGlvID0gbnVsbFxuICAgIHRoaXMuX3NlbGVjdEluaXRpYWxSYXRpbyh0cnVlLCB0cnVlKVxuXG4gICAgdGhpcy5fZW1pdEV2ZW50KENvbnN0YW50cy5FVkVOVFMuVFJBTlNGT1JNX1JFU0laRSlcblxuICAgIGVkaXRvci5zZXRSb3RhdGlvbigwKVxuICAgIGVkaXRvci5zZXRTcHJpdGVTY2FsZSgxKVxuICAgIGVkaXRvci56b29tLmF1dG8odHJ1ZSwgdHJ1ZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJBVElPIEhBTkRMSU5HXG5cbiAgLyoqXG4gICAqIFJlLWFwcGxpZXMgdGhlIGN1cnJlbnQgcmF0aW9cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZWFwcGx5UmF0aW8gKCkge1xuICAgIGNvbnN0IHJhdGlvID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgncmF0aW8nKVxuICAgIHRoaXMuX3NlbGVjdFJhdGlvKHJhdGlvKVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdHMgdGhlIGdpdmVuIHJhdGlvXG4gICAqIEBwYXJhbSB7U3RyaW5nfSByYXRpb1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNldERlZmF1bHRPcHRpb25zID0gdHJ1ZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHVwZGF0ZSA9IHRydWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZWxlY3RSYXRpbyAocmF0aW8sIHNldERlZmF1bHRPcHRpb25zID0gdHJ1ZSwgdXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3RyYW5zZm9ybU9wZXJhdGlvbicpXG4gICAgaWYgKHNldERlZmF1bHRPcHRpb25zICYmIHJhdGlvKSB7XG4gICAgICB0aGlzLl9zZXREZWZhdWx0T3B0aW9uc0ZvclJhdGlvKHJhdGlvLCB1cGRhdGUpXG4gICAgfVxuICAgIG9wZXJhdGlvbi5fcmF0aW8gPSByYXRpb1xuICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUoeyByYXRpbyB9LCB1cGRhdGUpXG4gICAgaWYgKHVwZGF0ZSkge1xuICAgICAgdGhpcy5zZXRTaGFyZWRTdGF0ZSh7IGNoYW5nZXNEb25lOiB0cnVlIH0pXG4gICAgfVxuICAgIHRoaXMuX2VtaXRFdmVudChDb25zdGFudHMuRVZFTlRTLlRSQU5TRk9STV9SRVNJWkUpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZGVmYXVsdCBvcHRpb25zIChzdGFydCAvIGVuZCkgZm9yIHRoZSBnaXZlbiByYXRpb1xuICAgKiBAcGFyYW0ge09iamVjdH0gcmF0aW9PYmplY3RcbiAgICogQHBhcmFtIHtCb29sZWFufSB1cGRhdGUgPSBmYWxzZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldERlZmF1bHRPcHRpb25zRm9yUmF0aW8gKHJhdGlvT2JqZWN0LCB1cGRhdGUgPSBmYWxzZSkge1xuICAgIGxldCB7IHJhdGlvLCBkaW1lbnNpb25zIH0gPSByYXRpb09iamVjdCB8fCB7fVxuICAgIGxldCBzdGFydCA9IG5ldyBWZWN0b3IyKClcbiAgICBsZXQgZW5kID0gbmV3IFZlY3RvcjIoKVxuXG4gICAgaWYgKGRpbWVuc2lvbnMgJiYgIXJhdGlvKSB7XG4gICAgICByYXRpbyA9IGRpbWVuc2lvbnMueCAvIGRpbWVuc2lvbnMueVxuICAgIH1cblxuICAgIGlmICghcmF0aW8gfHwgcmF0aW8gPT09ICcqJykge1xuICAgICAgc3RhcnQgPSBuZXcgVmVjdG9yMigwLCAwKVxuICAgICAgZW5kID0gbmV3IFZlY3RvcjIoMSwgMSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgndHJhbnNmb3JtT3BlcmF0aW9uJylcbiAgICAgIGNvbnN0IGlucHV0RGltZW5zaW9ucyA9IG9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG4gICAgICBjb25zdCBvdXRwdXRSYXRpbyA9IGlucHV0RGltZW5zaW9ucy54IC8gaW5wdXREaW1lbnNpb25zLnlcbiAgICAgIGxldCB3aWR0aCwgaGVpZ2h0XG4gICAgICBpZiAob3V0cHV0UmF0aW8gPD0gcmF0aW8pIHtcbiAgICAgICAgaGVpZ2h0ID0gaW5wdXREaW1lbnNpb25zLnggLyByYXRpb1xuICAgICAgICB3aWR0aCA9IGhlaWdodCAqIHJhdGlvXG4gICAgICAgIHN0YXJ0XG4gICAgICAgICAgLnNldCgoaW5wdXREaW1lbnNpb25zLnggLSB3aWR0aCkgLyAyLCAoaW5wdXREaW1lbnNpb25zLnkgLSBoZWlnaHQpIC8gMilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpZHRoID0gaW5wdXREaW1lbnNpb25zLnkgKiByYXRpb1xuICAgICAgICBoZWlnaHQgPSB3aWR0aCAvIHJhdGlvXG4gICAgICAgIHN0YXJ0XG4gICAgICAgICAgLnNldCgoaW5wdXREaW1lbnNpb25zLnggLSB3aWR0aCkgLyAyLCAoaW5wdXREaW1lbnNpb25zLnkgLSBoZWlnaHQpIC8gMilcbiAgICAgIH1cblxuICAgICAgZW5kLmNvcHkoc3RhcnQpLmFkZCh3aWR0aCwgaGVpZ2h0KVxuICAgICAgc3RhcnQuZGl2aWRlKGlucHV0RGltZW5zaW9ucylcbiAgICAgIGVuZC5kaXZpZGUoaW5wdXREaW1lbnNpb25zKVxuICAgIH1cblxuICAgIGNvbnN0IG5ld1RyYW5zZm9ybU9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZFN0YXRlKCduZXdUcmFuc2Zvcm1PcHRpb25zJylcbiAgICBuZXdUcmFuc2Zvcm1PcHRpb25zLnN0YXJ0ID0gc3RhcnRcbiAgICBuZXdUcmFuc2Zvcm1PcHRpb25zLmVuZCA9IGVuZFxuXG4gICAgdGhpcy5zZXRTaGFyZWRTdGF0ZSh7IHN0YXJ0LCBlbmQgfSwgdXBkYXRlKVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdHMgdGhlIGluaXRpYWwgcmF0aW9cbiAgICogQHBhcmFtIHtCb29sZWFufSBzZXREZWZhdWx0T3B0aW9ucyA9IHRydWVcbiAgICogQHBhcmFtIHtCb29sZWFufSB1cGRhdGUgPSBmYWxzZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NlbGVjdEluaXRpYWxSYXRpbyAoc2V0RGVmYXVsdE9wdGlvbnMgPSB0cnVlLCB1cGRhdGUgPSBmYWxzZSkge1xuICAgIGNvbnN0IHRyYW5zZm9ybU9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3RyYW5zZm9ybU9wZXJhdGlvbicpXG4gICAgbGV0IHNlbGVjdGVkUmF0aW8gPSBudWxsXG4gICAgY29uc3QgY2F0ZWdvcmllcyA9IHRoaXMuX3RyYW5zZm9ybVJhdGlvTWFuYWdlci5nZXRDYXRlZ29yaWVzKClcbiAgICBsZXQgcmF0aW9zID0gY2F0ZWdvcmllc1xuICAgICAgLm1hcCgoYykgPT4gdGhpcy5fdHJhbnNmb3JtUmF0aW9NYW5hZ2VyLmdldFJhdGlvc0ZvckNhdGVnb3J5KGMpKVxuICAgICAgLnJlZHVjZSgoYSwgYikgPT4gYS5jb25jYXQoYikpXG5cbiAgICAvLyAxLiBTZWxlY3RlZCByYXRpbyBzdG9yZWQgaW4gb3BlcmF0aW9uXG4gICAgY29uc3Qgb3BlcmF0aW9uUmF0aW8gPSB0cmFuc2Zvcm1PcGVyYXRpb24uX3JhdGlvXG4gICAgaWYgKG9wZXJhdGlvblJhdGlvKSB7XG4gICAgICBjb25zdCBtYXRjaGluZ1JhdGlvcyA9IHJhdGlvcy5maWx0ZXIoKHJhdGlvKSA9PiByYXRpbyA9PT0gb3BlcmF0aW9uUmF0aW8pXG4gICAgICBzZWxlY3RlZFJhdGlvID0gbWF0Y2hpbmdSYXRpb3NbMF1cbiAgICB9XG5cbiAgICAvLyAyLiBGaXJzdCByYXRpbyB3aXRoIGBzZWxlY3RlZGAgZmxhZ1xuICAgIGlmICghc2VsZWN0ZWRSYXRpbykge1xuICAgICAgY29uc3Qgc2VsZWN0ZWRSYXRpb3MgPSByYXRpb3MuZmlsdGVyKChyYXRpbykgPT4gcmF0aW8uc2VsZWN0ZWQpXG4gICAgICBzZWxlY3RlZFJhdGlvID0gc2VsZWN0ZWRSYXRpb3MucG9wKClcbiAgICB9XG5cbiAgICAvLyAzLiBGaXJzdCByYXRpb1xuICAgIGlmICghc2VsZWN0ZWRSYXRpbykge1xuICAgICAgc2VsZWN0ZWRSYXRpbyA9IHJhdGlvc1swXVxuICAgICAgaWYgKHNlbGVjdGVkUmF0aW8ucmF0aW8gIT09ICcqJykge1xuICAgICAgICB0aGlzLnNldFNoYXJlZFN0YXRlKHsgY2hhbmdlc0RvbmU6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0UmF0aW8oc2VsZWN0ZWRSYXRpbywgc2V0RGVmYXVsdE9wdGlvbnMsIHVwZGF0ZSlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFTkRFUklOR1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBzZWN0aW9ucyBhbmQgdGhlaXIgaXRlbXMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyU2VjdGlvbnMgKCkge1xuICAgIGNvbnN0IG1ha2VTZWN0aW9uID0gKGNhdGVnb3J5KSA9PiB7XG4gICAgICByZXR1cm4gKDxTZWN0aW9uIGtleT17Y2F0ZWdvcnkuaWRlbnRpZmllcn0+XG4gICAgICAgIDxTZWN0aW9uVGl0bGU+e3RoaXMuX3QoYHBlc2RrLnRyYW5zZm9ybS5hc3NldC4ke2NhdGVnb3J5LmlkZW50aWZpZXJ9Lm5hbWVgKSB8fCBjYXRlZ29yeS5kZWZhdWx0TmFtZX08L1NlY3Rpb25UaXRsZT5cbiAgICAgICAgPFNlY3Rpb25HcmlkPlxuICAgICAgICAgIHttYWtlSXRlbXMoY2F0ZWdvcnkpfVxuICAgICAgICA8L1NlY3Rpb25HcmlkPlxuICAgICAgPC9TZWN0aW9uPilcbiAgICB9XG5cbiAgICBjb25zdCBtYWtlSXRlbXMgPSAoY2F0ZWdvcnkpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc2Zvcm1SYXRpb01hbmFnZXIuZ2V0UmF0aW9zRm9yQ2F0ZWdvcnkoY2F0ZWdvcnkpXG4gICAgICAgIC5tYXAoKHJhdGlvKSA9PiB7XG4gICAgICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3JhdGlvJykgPT09IHJhdGlvXG4gICAgICAgICAgcmV0dXJuICg8VHJhbnNmb3JtTGlzdEl0ZW1Db21wb25lbnRcbiAgICAgICAgICAgIGtleT17cmF0aW8uaWRlbnRpZmllcn1cbiAgICAgICAgICAgIGRlZmF1bHRJY29uUGF0aD17YGVkaXRvci9jb250cm9scy90cmFuc2Zvcm0vcmF0aW9zLyR7cmF0aW8uaWRlbnRpZmllcn0tZGVmYXVsdC5wbmdgfVxuICAgICAgICAgICAgaG92ZXJJY29uUGF0aD17YGVkaXRvci9jb250cm9scy90cmFuc2Zvcm0vcmF0aW9zLyR7cmF0aW8uaWRlbnRpZmllcn0taG92ZXIucG5nYH1cbiAgICAgICAgICAgIGFjdGl2ZUljb25QYXRoPXtgZWRpdG9yL2NvbnRyb2xzL3RyYW5zZm9ybS9yYXRpb3MvJHtyYXRpby5pZGVudGlmaWVyfS1hY3RpdmUucG5nYH1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX3NlbGVjdFJhdGlvLmJpbmQodGhpcywgcmF0aW8pfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMuX3QoYHBlc2RrLnRyYW5zZm9ybS5hc3NldC4ke2NhdGVnb3J5LmlkZW50aWZpZXJ9LmFzc2V0LiR7cmF0aW8uaWRlbnRpZmllcn1gKSB8fCByYXRpby5kZWZhdWx0TmFtZX1cbiAgICAgICAgICAgIGlkZW50aWZpZXI9e3JhdGlvLmlkZW50aWZpZXJ9XG4gICAgICAgICAgICBzZWxlY3RlZD17aXNTZWxlY3RlZH0gLz4pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgY2F0ZWdvcmllcyA9IHRoaXMuX3RyYW5zZm9ybVJhdGlvTWFuYWdlci5nZXRDYXRlZ29yaWVzKClcbiAgICByZXR1cm4gY2F0ZWdvcmllcy5tYXAoKGNhdGVnb3J5KSA9PlxuICAgICAgdGhpcy5fdHJhbnNmb3JtUmF0aW9NYW5hZ2VyLmdldFJhdGlvc0ZvckNhdGVnb3J5KGNhdGVnb3J5KS5sZW5ndGggPiAwID8gbWFrZVNlY3Rpb24oY2F0ZWdvcnkpIDogbnVsbFxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0aWVzIGZvciB0aGUgcm9vdCBlbGVtZW50XG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRSb290UHJvcHMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzc05hbWU6ICh0ZXN0ID8gJ2pzLXRyYW5zZm9ybUNvbnRyb2xzJyA6IHVuZGVmaW5lZCksXG4gICAgICB3aXRoQm9yZGVyVG9wOiB0cnVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb250cm9sJ3MgY29udGVudFxuICAgKiBAcmV0dXJuIHtSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgX3JlbmRlckNvbnRlbnQgKCkge1xuICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3QgcmVzZXRCdXR0b25EaXNhYmxlZCA9IG9wdGlvbnMuZWRpdG9yLmZvcmNlQ3JvcFxuICAgIGNvbnN0IHJhdGlvID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgncmF0aW8nKVxuICAgIHJldHVybiBbKDxTY3JvbGxhYmxlTGlzdENvbXBvbmVudFxuICAgICAga2V5PSdsaXN0J1xuICAgICAgZGlyZWN0aW9uPSd2ZXJ0aWNhbCdcbiAgICAgIGlubmVyUmVmPXtlbCA9PiB7IHRoaXMuX3Njcm9sbGJhciA9IGVsIH19PlxuICAgICAgPFNlY3Rpb25MaXN0PlxuICAgICAgICA8U2VjdGlvbkxpc3RIZWFkZXI+XG4gICAgICAgICAgPEJ1dHRvbkNvbXBvbmVudFxuICAgICAgICAgICAgZGlzYWJsZWQ9e3Jlc2V0QnV0dG9uRGlzYWJsZWR9XG4gICAgICAgICAgICB0aXRsZT17dGhpcy5fdCgncGVzZGsudHJhbnNmb3JtLmJ1dHRvbi5yZXNldCcpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXsodGVzdCA/ICdqcy10cmFuc2Zvcm1SZXNldEJ1dHRvbicgOiB1bmRlZmluZWQpfVxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5fb25SZXNldERlZmF1bHRDbGlja30gLz5cbiAgICAgICAgPC9TZWN0aW9uTGlzdEhlYWRlcj5cbiAgICAgICAge3RoaXMuX3JlbmRlclNlY3Rpb25zKCl9XG4gICAgICA8L1NlY3Rpb25MaXN0PlxuICAgIDwvU2Nyb2xsYWJsZUxpc3RDb21wb25lbnQ+KSxcbiAgICAgICg8VHJhbnNmb3JtRGltZW5zaW9uc0NvbXBvbmVudFxuICAgICAgICBrZXk9J3RyYW5zZm9ybURpbWVuc2lvbnMnXG4gICAgICAgIGNvbnRyb2xzPXt0aGlzLnByb3BzLmNvbnRyb2xzfVxuICAgICAgICBkaXNhYmxlZD17IXJhdGlvIHx8ICEhcmF0aW8uZGltZW5zaW9uc30gLz4pXVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFNUWUxFU1xuXG5jb25zdCBTZWN0aW9uTGlzdEhlYWRlciA9IGFkb25pcy5saSh7XG4gIHBhZGRpbmc6ICcyNXB4JyxcbiAgcGFkZGluZ0JvdHRvbTogJzEwcHgnXG59KVxuXG5jb25zdCBTZWN0aW9uTGlzdCA9IGFkb25pcyhDb250cm9sR3JvdXBMaXN0KS51bCh7XG4gIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gIG92ZXJmbG93WTogJ2F1dG8nLFxuICB3aWR0aDogJzEwMCUnXG59KVxuXG5jb25zdCBTZWN0aW9uID0gYWRvbmlzKENvbnRyb2xHcm91cCkubGkoe1xuICBwYWRkaW5nOiAnMjVweCAxN3B4J1xufSlcblxuY29uc3QgU2VjdGlvblRpdGxlID0gYWRvbmlzKENvbnRyb2xHcm91cFRpdGxlKS5kaXYoe1xuICBtYXJnaW46ICcwIDhweCAxNnB4IDhweCdcbn0pXG5cbmNvbnN0IFNlY3Rpb25HcmlkID0gYWRvbmlzLnVsKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgbGlzdFN0eWxlOiAnbm9uZScsXG4gIHBhZGRpbmc6IDAsXG4gIG1hcmdpbjogMCxcbiAgdGV4dEFsaWduOiAnbGVmdCdcbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb250cm9scy90cmFuc2Zvcm0vdHJhbnNmb3JtLWNvbnRyb2xzLWNvbXBvbmVudC5qc3giLCIvKiBAbW9kdWxlICovXG4vKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgUGhvdG9FZGl0b3JTREsuXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE2LTIwMTcgOWVsZW1lbnRzIEdtYkggPGNvbnRhY3RAOWVsZW1lbnRzLmNvbT5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBsaWNlbnNlIGFncmVlbWVudFxuICogaXMgYXBwcm92ZWQgYW5kIGEgbGVnYWwvZmluYW5jaWFsIGNvbnRyYWN0IHdhcyBzaWduZWQgYnkgdGhlIHVzZXIuXG4gKiBUaGUgbGljZW5zZSBhZ3JlZW1lbnQgY2FuIGJlIGZvdW5kIHVuZGVyIGZvbGxvd2luZyBsaW5rOlxuICpcbiAqIGh0dHBzOi8vd3d3LnBob3RvZWRpdG9yc2RrLmNvbS9MSUNFTlNFLnR4dFxuICovXG5cbmltcG9ydCB7XG4gIFJlYWN0LCBhZG9uaXMsIEJhc2VDb21wb25lbnQsIENvbnRyb2xzU3R5bGVzLCBUcmFuc2l0aW9uXG59IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcblxuY29uc3QgeyBQbGFpbkNvbnRyb2xJdGVtIH0gPSBDb250cm9sc1N0eWxlc1xuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zZm9ybUxpc3RJdGVtQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBCYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBob3ZlcmVkOiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlYWN0LkVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIgKCkge1xuICAgIC8vIEB0b2RvOiBIYW5kbGUgYWN0aXZlIGljb25cbiAgICBjb25zdCBkZWZhdWx0SWNvblN0eWxlID0ge1xuICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCcke3RoaXMuX2dldEFzc2V0UGF0aCh0aGlzLnByb3BzLmRlZmF1bHRJY29uUGF0aCwgdHJ1ZSl9JylgXG4gICAgfVxuICAgIGNvbnN0IGhvdmVySWNvblN0eWxlID0ge1xuICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCcke3RoaXMuX2dldEFzc2V0UGF0aCh0aGlzLnByb3BzLmhvdmVySWNvblBhdGgsIHRydWUpfScpYFxuICAgIH1cbiAgICBjb25zdCBhY3RpdmVJY29uU3R5bGUgPSB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJyR7dGhpcy5fZ2V0QXNzZXRQYXRoKHRoaXMucHJvcHMuYWN0aXZlSWNvblBhdGgsIHRydWUpfScpYFxuICAgIH1cbiAgICBjb25zdCB7IHNlbGVjdGVkLCBvbkNsaWNrLCBpZGVudGlmaWVyLCB0aXRsZSB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgaG92ZXJlZCB9ID0gdGhpcy5zdGF0ZVxuICAgIHJldHVybiAoPFRyYW5zZm9ybUxpc3RJdGVtXG4gICAgICBzZWxlY3RlZD17c2VsZWN0ZWR9XG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgZGF0YS1pZGVudGlmaWVyPXtpZGVudGlmaWVyfVxuICAgICAgZGF0YS1zZWxlY3RlZD17c2VsZWN0ZWR9XG4gICAgICBvbk1vdXNlRW50ZXI9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pfVxuICAgICAgb25Nb3VzZUxlYXZlPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSl9XG4gICAgICBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXRyYW5zZm9ybUxpc3RJdGVtJyA6IHVuZGVmaW5lZCl9PlxuICAgICAgPFRyYW5zaXRpb25cbiAgICAgICAgYWN0aXZlPXshc2VsZWN0ZWR9PlxuICAgICAgICA8SWNvbiBzdHlsZT17ZGVmYXVsdEljb25TdHlsZX0gLz5cbiAgICAgIDwvVHJhbnNpdGlvbj5cbiAgICAgIDxUcmFuc2l0aW9uXG4gICAgICAgIGFjdGl2ZT17IXNlbGVjdGVkICYmIGhvdmVyZWR9PlxuICAgICAgICA8SWNvbiBzdHlsZT17aG92ZXJJY29uU3R5bGV9IC8+XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgICA8VHJhbnNpdGlvblxuICAgICAgICBhY3RpdmU9e3NlbGVjdGVkfT5cbiAgICAgICAgPEljb24gc3R5bGU9e2FjdGl2ZUljb25TdHlsZX0gLz5cbiAgICAgIDwvVHJhbnNpdGlvbj5cbiAgICAgIDxUaXRsZSBzZWxlY3RlZD17c2VsZWN0ZWR9Pnt0aXRsZX08L1RpdGxlPlxuICAgIDwvVHJhbnNmb3JtTGlzdEl0ZW0+KVxuICB9XG59XG5cbmNvbnN0IFRyYW5zZm9ybUxpc3RJdGVtID0gYWRvbmlzKFBsYWluQ29udHJvbEl0ZW0pLmxpKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICB3aWR0aDogJzk0cHgnLFxuICBoZWlnaHQ6ICcxMDRweCcsXG4gIG1hcmdpblJpZ2h0OiAnMHB4JyxcbiAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICcmOm50aC1jaGlsZChvZGQpJzoge1xuICAgIG1hcmdpblJpZ2h0OiAnOHB4J1xuICB9XG59KVxuXG5jb25zdCBJY29uID0gYWRvbmlzLmRpdih7XG4gIHRyYW5zaXRpb246IHRoZW1lID0+IGBvcGFjaXR5ICR7dGhlbWUudHJhbnNpdGlvbkR1cmF0aW9ufXMgZWFzZS1vdXRgLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBiYWNrZ3JvdW5kOiAnbm8tcmVwZWF0IGNlbnRlciBjZW50ZXInLFxuICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICB6SW5kZXg6IDIsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwNHB4JyxcbiAgZGlzcGxheTogJ25vbmUnLFxuICBvcGFjaXR5OiAwXG59LCB7XG4gIHJlbmRlcmVkOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgb3BhY2l0eSAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2UtaW5gXG4gIH0sXG4gIHZpc2libGU6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIG9wYWNpdHk6IDFcbiAgfVxufSlcblxuY29uc3QgVGl0bGUgPSBhZG9uaXMuZGl2KHtcbiAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ2NvbnRyb2xzJyksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBsZWZ0OiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAnOHB4JyxcbiAgY29sb3I6ICd3aGl0ZScsXG4gIG9wYWNpdHk6IDAuNCxcbiAgZm9udFNpemU6ICcxM3B4JyxcbiAgZm9udEZhbWlseTogdGhlbWUgPT4gdGhlbWUucmVndWxhckZvbnRGYW1pbHlcbn0sIHtcbiAgc2VsZWN0ZWQ6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIGZvbnRGYW1pbHk6IHRoZW1lID0+IHRoZW1lLm1lZGl1bUZvbnRGYW1pbHlcbiAgfVxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3RyYW5zZm9ybS90cmFuc2Zvcm0tbGlzdC1pdGVtLWNvbXBvbmVudC5qc3giLCIvKiogQGpzeCBSZWFjdC5jcmVhdGVFbGVtZW50ICoqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBVdGlscyBhcyBTREtVdGlscyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuaW1wb3J0IHtcbiAgUmVhY3QsIGFkb25pcywgQ29uc3RhbnRzLCBVdGlscywgU3VmZml4ZWRUZXh0SW5wdXRDb21wb25lbnQsIFNoYXJlZFN0YXRlQ29tcG9uZW50LCBUcmFuc2l0aW9uXG59IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zZm9ybURpbWVuc2lvbnNDb21wb25lbnQgZXh0ZW5kcyBTaGFyZWRTdGF0ZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBTaGFyZWRTdGF0ZUNvbXBvbmVudC5jb250ZXh0VHlwZXNcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICBjb25zdCBkaW1lbnNpb25zID0gdGhpcy5fZ2V0VHJhbnNmb3JtRGltZW5zaW9ucygpXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRpbWVuc2lvbnMsXG4gICAgICB4OiBkaW1lbnNpb25zLngsXG4gICAgICB5OiBkaW1lbnNpb25zLnlcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMSUZFQ1lDTEVcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGNoYW5nZSBmcm9tIHRoZSBnaXZlbiBzdGF0ZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9sZFN0YXRlXG4gICAqIEBwYXJhbSAge09iamVjdH0gbmV3U3RhdGVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHNob3VsZFNoYXJlZENvbXBvbmVudFVwZGF0ZSAob2xkU3RhdGUsIG5ld1N0YXRlKSB7XG4gICAgcmV0dXJuICFvbGRTdGF0ZS5zdGFydC5lcXVhbHMobmV3U3RhdGUuc3RhcnQpIHx8XG4gICAgICAhb2xkU3RhdGUuZW5kLmVxdWFscyhuZXdTdGF0ZS5lbmQpIHx8XG4gICAgICBvbGRTdGF0ZS5yYXRpbyAhPT0gbmV3U3RhdGUucmF0aW9cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJlZm9yZSB0aGUgc2hhcmVkIHN0YXRlIGNvbXBvbmVudCBpcyByZS1yZW5kZXJlZCBkdWUgdG8gYVxuICAgKiBzdGF0ZSBjaGFuZ2VcbiAgICogQHBhcmFtICB7T2JqZWN0fSBvbGRTdGF0ZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG5ld1N0YXRlXG4gICAqL1xuICBzaGFyZWRDb21wb25lbnRXaWxsVXBkYXRlIChvbGRTdGF0ZSwgbmV3U3RhdGUpIHtcbiAgICBpZiAoIW5ld1N0YXRlLnRyYW5zZm9ybU9wZXJhdGlvbikgcmV0dXJuXG5cbiAgICBjb25zdCBkaW1lbnNpb25zID0gdGhpcy5fZ2V0VHJhbnNmb3JtRGltZW5zaW9ucygpXG4gICAgY29uc3QgeyB4LCB5IH0gPSBkaW1lbnNpb25zXG5cbiAgICB0aGlzLnN0YXRlLmRpbWVuc2lvbnMgPSBkaW1lbnNpb25zXG4gICAgdGhpcy5zdGF0ZS54ID0geFxuICAgIHRoaXMuc3RhdGUueSA9IHlcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVWRU5UU1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIHZhbHVlIG9mIGFuIGlucHV0IGlzIGNoYW5nZWRcbiAgICogQHBhcmFtICB7U3RyaW5nfSBwcm9wXG4gICAqIEBwYXJhbSAge0V2ZW50fSBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uSW5wdXRMaXZlQ2hhbmdlIChwcm9wLCBldmVudCkge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IGV2ZW50LnRhcmdldFxuICAgIGlmICh2YWx1ZS5sZW5ndGggJiYgIXZhbHVlLm1hdGNoKC9cXGQrPy9pKSkgcmV0dXJuXG5cbiAgICB0aGlzLnN0YXRlW3Byb3BdID0gKHZhbHVlICYmIHBhcnNlSW50KHZhbHVlLCAxMCkpIHx8ICcnXG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBuZXcgdmFsdWUgb2YgYW4gaW5wdXQgaXMgYWNjZXB0ZWQgKGlucHV0IGxvc2VzIGZvY3VzKVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHByb3BcbiAgICogQHBhcmFtICB7RXZlbnR9IGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25JbnB1dENoYW5nZSAocHJvcCwgZXZlbnQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc3RhdGVbcHJvcF0gfHwgMFxuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3RyYW5zZm9ybU9wZXJhdGlvbicpXG4gICAgY29uc3QgaW5wdXREaW1lbnNpb25zID0gb3BlcmF0aW9uLmdldElucHV0RGltZW5zaW9ucyhmYWxzZSlcbiAgICBjb25zdCB7IHJhdGlvIH0gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdyYXRpbycpXG5cbiAgICBjb25zdCBzdGFydCA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3N0YXJ0JylcbiAgICBjb25zdCBlbmQgPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdlbmQnKVxuICAgIGNvbnN0IHNpemUgPSBlbmQuY2xvbmUoKS5zdWJ0cmFjdChzdGFydClcblxuICAgIGNvbnN0IHJlcXVlc3RlZERpbWVuc2lvbnMgPSBzaXplLmNsb25lKCkubXVsdGlwbHkoaW5wdXREaW1lbnNpb25zKVxuICAgIHJlcXVlc3RlZERpbWVuc2lvbnNbcHJvcF0gPSBNYXRoLm1pbihpbnB1dERpbWVuc2lvbnNbcHJvcF0sIHZhbHVlKVxuICAgIGlmIChyYXRpbyAhPT0gJyonKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ3gnKSB7XG4gICAgICAgIHJlcXVlc3RlZERpbWVuc2lvbnMueSA9IHJlcXVlc3RlZERpbWVuc2lvbnMueCAvIHJhdGlvXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXF1ZXN0ZWREaW1lbnNpb25zLnggPSByZXF1ZXN0ZWREaW1lbnNpb25zLnkgKiByYXRpb1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmaW5hbERpbWVuc2lvbnMgPSByZXF1ZXN0ZWREaW1lbnNpb25zLmNsb25lKClcbiAgICBpZiAocmVxdWVzdGVkRGltZW5zaW9ucy54ID4gaW5wdXREaW1lbnNpb25zLnggfHxcbiAgICAgICAgcmVxdWVzdGVkRGltZW5zaW9ucy55ID4gaW5wdXREaW1lbnNpb25zLnkpIHtcbiAgICAgIGZpbmFsRGltZW5zaW9ucyA9IFNES1V0aWxzLnJlc2l6ZVZlY3RvclRvRml0KHJlcXVlc3RlZERpbWVuc2lvbnMsIGlucHV0RGltZW5zaW9ucylcbiAgICB9XG5cbiAgICBjb25zdCBkaW1lbnNpb25zID0gdGhpcy5fZ2V0VHJhbnNmb3JtRGltZW5zaW9ucygpXG4gICAgY29uc3QgeyB4LCB5IH0gPSBkaW1lbnNpb25zXG5cbiAgICB0aGlzLnN0YXRlLmRpbWVuc2lvbnMgPSBkaW1lbnNpb25zXG4gICAgdGhpcy5zdGF0ZS54ID0geFxuICAgIHRoaXMuc3RhdGUueSA9IHlcblxuICAgIHRoaXMuX3Jlc2l6ZVRyYW5zZm9ybVRvKGZpbmFsRGltZW5zaW9ucylcbiAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJFU0laSU5HXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdHJhbnNmb3JtIGRpbWVuc2lvbnNcbiAgICogQHJldHVybiB7UGhvdG9FZGl0b3JTREsuTWF0aC5WZWN0b3IyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFRyYW5zZm9ybURpbWVuc2lvbnMgKCkge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3RyYW5zZm9ybU9wZXJhdGlvbicpXG4gICAgY29uc3QgcmF0aW8gPSB0aGlzLmdldFNoYXJlZFN0YXRlKCdyYXRpbycpIHx8IHsgcmF0aW86ICcqJyB9XG5cbiAgICBsZXQgZGltZW5zaW9uc1xuICAgIGlmIChyYXRpby5kaW1lbnNpb25zKSB7XG4gICAgICBkaW1lbnNpb25zID0gcmF0aW8uZGltZW5zaW9ucy5jbG9uZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGlucHV0RGltZW5zaW9ucyA9IG9wZXJhdGlvbi5nZXRJbnB1dERpbWVuc2lvbnMoZmFsc2UpXG4gICAgICBjb25zdCBzdGFydCA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3N0YXJ0JylcbiAgICAgIGNvbnN0IGVuZCA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ2VuZCcpXG4gICAgICBjb25zdCB0cmFuc2Zvcm1TaXplID0gZW5kLmNsb25lKCkuc3VidHJhY3Qoc3RhcnQpXG4gICAgICBkaW1lbnNpb25zID0gdHJhbnNmb3JtU2l6ZS5tdWx0aXBseShpbnB1dERpbWVuc2lvbnMpLnJvdW5kKClcbiAgICB9XG5cbiAgICByZXR1cm4gZGltZW5zaW9uc1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gZGltZW5zaW9uc1xuICAgKiBAcGFyYW0gIHtQaG90b0VkaXRvclNESy5NYXRoLlZlY3RvcjJ9IGRpbWVuc2lvbnNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZXNpemVUcmFuc2Zvcm1UbyAoZGltZW5zaW9ucykge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ3RyYW5zZm9ybU9wZXJhdGlvbicpXG4gICAgY29uc3QgaW5wdXREaW1lbnNpb25zID0gb3BlcmF0aW9uLmdldElucHV0RGltZW5zaW9ucyhmYWxzZSlcblxuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnc3RhcnQnKS5jbG9uZSgpXG4gICAgY29uc3QgZW5kID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnZW5kJykuY2xvbmUoKVxuICAgIGNvbnN0IG5ld1NpemUgPSBkaW1lbnNpb25zLmRpdmlkZShpbnB1dERpbWVuc2lvbnMpXG5cbiAgICBlbmQuY29weShzdGFydCkuYWRkKG5ld1NpemUpXG4gICAgaWYgKGVuZC54ID4gMSkge1xuICAgICAgc3RhcnQueCAtPSBlbmQueCAtIDFcbiAgICAgIGVuZC54ID0gMVxuICAgIH1cbiAgICBpZiAoZW5kLnkgPiAxKSB7XG4gICAgICBzdGFydC55IC09IGVuZC55IC0gMVxuICAgICAgZW5kLnkgPSAxXG4gICAgfVxuXG4gICAgY29uc3QgeyBjb250cm9scyB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgc3RhcnQ6IGZpeGVkU3RhcnQsIGVuZDogZml4ZWRFbmQgfSA9IGNvbnRyb2xzLmZpeFRyYW5zZm9ybShzdGFydCwgZW5kLCAncmlnaHQnLCAnYm90dG9tJylcbiAgICBjb25zdCBuZXdUcmFuc2Zvcm1PcHRpb25zID0gdGhpcy5nZXRTaGFyZWRTdGF0ZSgnbmV3VHJhbnNmb3JtT3B0aW9ucycpXG5cbiAgICBuZXdUcmFuc2Zvcm1PcHRpb25zLnN0YXJ0ID0gZml4ZWRTdGFydFxuICAgIG5ld1RyYW5zZm9ybU9wdGlvbnMuZW5kID0gZml4ZWRFbmRcblxuICAgIHRoaXMuc2V0U2hhcmVkU3RhdGUoe1xuICAgICAgc3RhcnQ6IGZpeGVkU3RhcnQsXG4gICAgICBlbmQ6IGZpeGVkRW5kXG4gICAgfSlcbiAgICB0aGlzLl9lbWl0RXZlbnQoQ29uc3RhbnRzLkVWRU5UUy5UUkFOU0ZPUk1fUkVTSVpFKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUkVOREVSSU5HXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhpcyBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVhY3QuRWxlbWVudH1cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuICg8VHJhbnNmb3JtRGltZW5zaW9ucyBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXRyYW5zZm9ybURpbWVuc2lvbnMnIDogdW5kZWZpbmVkKX0+XG4gICAgICA8VHJhbnNmb3JtRGltZW5zaW9uc1dyYXBwZXI+XG4gICAgICAgIDxUYWJsZT5cbiAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgIDxEaW1lbnNpb25JbnB1dFxuICAgICAgICAgICAgICBzdWZmaXg9e3RoaXMuX3QoJ3Blc2RrLnRyYW5zZm9ybS5wbGFjZWhvbGRlci53aWR0aCcpfVxuICAgICAgICAgICAgICBuYW1lPSd3aWR0aCdcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9XG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnh9XG4gICAgICAgICAgICAgIG9uTGl2ZUNoYW5nZT17dGhpcy5fb25JbnB1dExpdmVDaGFuZ2UuYmluZCh0aGlzLCAneCcpfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5fb25JbnB1dENoYW5nZS5iaW5kKHRoaXMsICd4Jyl9IC8+XG4gICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgIDxDcm9zc0NlbGw+XG4gICAgICAgICAgICA8Q3Jvc3Mgc3JjPXt0aGlzLl9nZXRBc3NldFBhdGgoJ2VkaXRvci9jb250cm9scy90cmFuc2Zvcm0vZGltZW5zaW9ucy1jcm9zcy5wbmcnLCB0cnVlKX0gLz5cbiAgICAgICAgICA8L0Nyb3NzQ2VsbD5cbiAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgIDxEaW1lbnNpb25JbnB1dFxuICAgICAgICAgICAgICBzdWZmaXg9e3RoaXMuX3QoJ3Blc2RrLnRyYW5zZm9ybS5wbGFjZWhvbGRlci5oZWlnaHQnKX1cbiAgICAgICAgICAgICAgbmFtZT0naGVpZ2h0J1xuICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUueX1cbiAgICAgICAgICAgICAgb25MaXZlQ2hhbmdlPXt0aGlzLl9vbklucHV0TGl2ZUNoYW5nZS5iaW5kKHRoaXMsICd5Jyl9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLl9vbklucHV0Q2hhbmdlLmJpbmQodGhpcywgJ3knKX0gLz5cbiAgICAgICAgICA8L0NlbGw+XG4gICAgICAgIDwvVGFibGU+XG4gICAgICAgIDxUcmFuc2l0aW9uXG4gICAgICAgICAgYWN0aXZlPXt0aGlzLnByb3BzLmRpc2FibGVkfVxuICAgICAgICAgIGVudGVyUHJvcD0ncmVuZGVyZWQnXG4gICAgICAgICAgZW50ZXJEdXJhdGlvbj17MzAwfVxuICAgICAgICAgIGFwcGVhclByb3A9J3Zpc2libGUnXG4gICAgICAgICAgYXBwZWFyRHVyYXRpb249ezMwMH1cbiAgICAgICAgICBsZWF2ZUR1cmF0aW9uPXszMDB9PlxuICAgICAgICAgIDxMb2NrT3ZlcmxheSBjbGFzc05hbWU9eyh0ZXN0ID8gJ2pzLXRyYW5zZm9ybURpbWVuc2lvbnNMb2NrT3ZlcmxheScgOiB1bmRlZmluZWQpfT5cbiAgICAgICAgICAgIDxMb2NrIHNyYz17dGhpcy5fZ2V0QXNzZXRQYXRoKCdlZGl0b3IvY29udHJvbHMvdHJhbnNmb3JtL2xvY2sucG5nJywgdHJ1ZSl9IC8+XG4gICAgICAgICAgPC9Mb2NrT3ZlcmxheT5cbiAgICAgICAgPC9UcmFuc2l0aW9uPlxuICAgICAgPC9UcmFuc2Zvcm1EaW1lbnNpb25zV3JhcHBlcj5cbiAgICA8L1RyYW5zZm9ybURpbWVuc2lvbnM+KVxuICB9XG59XG5cbmNvbnN0IERpbWVuc2lvbklucHV0ID0gYWRvbmlzKFN1ZmZpeGVkVGV4dElucHV0Q29tcG9uZW50KSh7XG4gIGRpc3BsYXk6ICdibG9jaydcbn0pXG5cbmNvbnN0IENyb3NzID0gYWRvbmlzLmltZyh7XG4gIHdpZHRoOiAnOHB4JyxcbiAgaGVpZ2h0OiAnOHB4J1xufSlcblxuY29uc3QgVHJhbnNmb3JtRGltZW5zaW9ucyA9IGFkb25pcy5kaXYoe1xuICBkaXNwbGF5OiAndGFibGUtcm93JyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnNTZweCcsXG4gIGJhY2tncm91bmQ6IHRoZW1lID0+IHRoZW1lLnNlY29uZGFyeUNvbnRyb2xzQmFja2dyb3VuZENvbG9yLFxuICBib3JkZXJUb3A6IHRoZW1lID0+IGAxcHggc29saWQgJHt0aGVtZS5iYWNrZ3JvdW5kQ29sb3J9YCxcbiAgekluZGV4OiB0aGVtZSA9PiB0aGVtZS56SW5kZXgoJ2NvbnRyb2xzT3ZlcmxheXMnKSxcbiAgdGV4dEFsaWduOiAnY2VudGVyJ1xufSlcblxuY29uc3QgVHJhbnNmb3JtRGltZW5zaW9uc1dyYXBwZXIgPSBhZG9uaXMuZGl2KHtcbiAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICBwYWRkaW5nOiAnMTJweCAyNXB4JyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbn0pXG5cbmNvbnN0IFRhYmxlID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZScsXG4gIHRhYmxlTGF5b3V0OiAnZml4ZWQnLFxuICB3aWR0aDogJzEwMCUnXG59KVxuXG5jb25zdCBDZWxsID0gYWRvbmlzLmRpdih7XG4gIGRpc3BsYXk6ICd0YWJsZS1jZWxsJ1xufSlcblxuY29uc3QgQ3Jvc3NDZWxsID0gYWRvbmlzKENlbGwpKHtcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgd2lkdGg6ICcyNHB4J1xufSlcblxuY29uc3QgTG9ja092ZXJsYXkgPSBhZG9uaXMuZGl2KHtcbiAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMC4zcyBlYXNlLW91dCcsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnLFxuICBiYWNrZ3JvdW5kOiB0aGVtZSA9PiB0aGVtZS5jb250cm9sc0xpZ2h0QmFja2dyb3VuZENvbG9yLFxuICBvcGFjaXR5OiAwLFxuICBkaXNwbGF5OiAnbm9uZSdcbn0sIHtcbiAgcmVuZGVyZWQ6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snXG4gIH0sXG4gIHZpc2libGU6IHtcbiAgICBvcGFjaXR5OiAwLjhcbiAgfVxufSlcblxuY29uc3QgTG9jayA9IGFkb25pcy5pbWcoe1xuICB3aWR0aDogJzI0cHgnLFxuICBtYXJnaW5Ub3A6ICcxOHB4J1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3RyYW5zZm9ybS90cmFuc2Zvcm0tZGltZW5zaW9ucy1jb21wb25lbnQuanN4IiwiLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBDb2xvciwgT3BlcmF0aW9ucywgVXRpbHMgfSBmcm9tICdwaG90b2VkaXRvcnNkaydcbmltcG9ydCBEZXNrdG9wVUksIHsgQmFzZUNvbnRyb2xzLCBGb250TWFuYWdlciwgTW9kYWxNYW5hZ2VyLCBUZXh0RGVzaWduTWFuYWdlciwgQ29uc3RhbnRzIH0gZnJvbSAncGhvdG9lZGl0b3JzZGsvZGVza3RvcC11aS9jb3JlJ1xuaW1wb3J0IFRleHREZXNpZ25Db250cm9sc0NvbXBvbmVudCBmcm9tICcuL3RleHQtZGVzaWduLWNvbnRyb2xzLWNvbXBvbmVudCdcbmltcG9ydCBUZXh0RGVzaWduQ2FudmFzQ29udHJvbHNDb21wb25lbnQgZnJvbSAnLi90ZXh0LWRlc2lnbi1jYW52YXMtY29udHJvbHMtY29tcG9uZW50LmpzeCdcbmltcG9ydCBMb2cgZnJvbSAnc2hhcmVkL2xvZydcblxuY29uc3QgTUFYX0ZPTlRfTE9BRElOR19USU1FID0gNjAwXG5cbmxldCBUZXh0RGVzaWduU3ByaXRlXG5sZXQgQXNzZXRNYW5hZ2VyXG5pZiAoT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24pIHtcbiAgVGV4dERlc2lnblNwcml0ZSA9IE9wZXJhdGlvbnMuU3ByaXRlT3BlcmF0aW9uLlRleHREZXNpZ25TcHJpdGVcbiAgQXNzZXRNYW5hZ2VyID0gVGV4dERlc2lnblNwcml0ZS5Bc3NldE1hbmFnZXJcbn1cblxuLyoqXG4gKiBUaGUgQ29udHJvbHMgZm9yIHRoZSBGaWx0ZXIgdG9vbC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQaG90b0VkaXRvclNESy5VSS5EZXNrdG9wVUkuQ29udHJvbHNcbiAqIEBleHRlbmRzIFBob3RvRWRpdG9yU0RLLlVJLkRlc2t0b3BVSS5CYXNlQ29udHJvbHNcbiAqL1xuY2xhc3MgVGV4dERlc2lnbkNvbnRyb2xzIGV4dGVuZHMgQmFzZUNvbnRyb2xzIHtcbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZXNlIGNvbnRyb2xzXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWRlbnRpZmllciA9ICd0ZXh0ZGVzaWduJ1xuXG4gIC8qKlxuICAgKiBUaGUgY29udHJvbHMgY29tcG9uZW50IGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7UmVhY3QuQ29tcG9uZW50fVxuICAgKi9cbiAgc3RhdGljIGNvbnRyb2xzQ29tcG9uZW50ID0gVGV4dERlc2lnbkNvbnRyb2xzQ29tcG9uZW50XG5cbiAgLyoqXG4gICAqIFRoZSBjYW52YXMgY29tcG9uZW50IGZvciB0aGVzZSBjb250cm9sc1xuICAgKiBAdHlwZSB7UmVhY3QuQ29tcG9uZW50fVxuICAgKi9cbiAgc3RhdGljIGNhbnZhc0NvbnRyb2xzQ29tcG9uZW50ID0gVGV4dERlc2lnbkNhbnZhc0NvbnRyb2xzQ29tcG9uZW50XG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHBhdGggb2YgdGhpcyBjb250cm9sXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgaWNvblBhdGggPSAnZWRpdG9yL2NvbnRyb2xzL3RleHQtZGVzaWduL2ljb24ucG5nJ1xuXG4gIC8qKlxuICAgKiBUaGUgYWN0aXZlIGljb24gcGF0aCBvZiB0aGlzIGNvbnRyb2xcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBhY3RpdmVJY29uUGF0aCA9ICdlZGl0b3IvY29udHJvbHMvdGV4dC1kZXNpZ24vaWNvbi1hY3RpdmUucG5nJ1xuXG4gIC8qKlxuICAgKiBUaGUgb3BlcmF0aW9ucyByZXF1aXJlZCBmb3IgdGhpcyBjb250cm9sIHRvIHdvcmsgcHJvcGVybHlcbiAgICogQHR5cGUge0FycmF5fVxuICAgKi9cbiAgc3RhdGljIHJlcXVpcmVkT3BlcmF0aW9ucyA9IFsnc3ByaXRlJ11cblxuICAvKipcbiAgICogT3BlcmF0aW9ucyB3aGljaCB3aWxsIHRyaWdnZXIgVUkgdXBkYXRlcyBvbiB0aGlzIGNvbnRyb2xzLlxuICAgKiBAdHlwZSB7U3RyaW5nW119XG4gICAqL1xuICBzdGF0aWMgdXBkYXRhYmxlT3BlcmF0aW9ucyA9IFsnc3ByaXRlJ11cblxuICBzdGF0aWMgc3dpdGNoVG9EZWZhdWx0Q29udHJvbHNPblJlbW92YWwgPSB0cnVlXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIHRoaXMgY29udHJvbFxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJvcGVydHkge09iamVjdFtdfSBbY2F0ZWdvcmllcyA9IFtdXVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtyZXBsYWNlQ2F0ZWdvcmllcyA9IGZhbHNlXVxuICAgKiBAcHJvcGVydHkge1N0cmluZ1tdfSBbYXZhaWxhYmxlRmlsdGVycyA9IG51bGxdXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgYXZhaWxhYmxlTGF5b3V0czogbnVsbFxuICB9XG5cbiAgc3RhdGljIFRleHREZXNpZ25JdGVtcyA9IFtcbiAgICB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL3RleHQtZGVzaWduL2ljb25zL2ltZ2x5X3RleHRfZGVzaWduX2ljb25fdGhpc2xheW91dGlzZ3JlYXQucG5nJyxcbiAgICAgIGlkZW50aWZpZXI6ICdpbWdseV90ZXh0X2Rlc2lnbl9ibG9ja3MnXG4gICAgfSxcbiAgICB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL3RleHQtZGVzaWduL2ljb25zL2ltZ2x5X3RleHRfZGVzaWduX2ljb25fZmF0YW5kZmFzdC5wbmcnLFxuICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3RleHRfZGVzaWduX3JvdGF0ZWQnXG4gICAgfSxcbiAgICB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL3RleHQtZGVzaWduL2ljb25zL2ltZ2x5X3RleHRfZGVzaWduX2ljb25fc3VtbWVyZmVlbGluZy5wbmcnLFxuICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3RleHRfZGVzaWduX2Jsb2Nrc19saWdodCdcbiAgICB9LFxuICAgIHtcbiAgICAgIGJhY2tncm91bmRJbWFnZVBhdGg6ICdlZGl0b3IvY29udHJvbHMvdGV4dC1kZXNpZ24vaWNvbnMvaW1nbHlfdGV4dF9kZXNpZ25faWNvbl90eXBld2l0aHN0eWxlLnBuZycsXG4gICAgICBpZGVudGlmaWVyOiAnaW1nbHlfdGV4dF9kZXNpZ25fZXF1YWxfd2lkdGgnXG4gICAgfSxcbiAgICB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL3RleHQtZGVzaWduL2ljb25zL2ltZ2x5X3RleHRfZGVzaWduX2ljb25faW50aGVib3gucG5nJyxcbiAgICAgIGlkZW50aWZpZXI6ICdpbWdseV90ZXh0X2Rlc2lnbl9tYXNrZWQnXG4gICAgfSxcbiAgICB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL3RleHQtZGVzaWduL2ljb25zL2ltZ2x5X3RleHRfZGVzaWduX2ljb25fYmx1ZWZyaWRheS5wbmcnLFxuICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3RleHRfZGVzaWduX2NlbGVicmF0ZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIGJhY2tncm91bmRJbWFnZVBhdGg6ICdlZGl0b3IvY29udHJvbHMvdGV4dC1kZXNpZ24vaWNvbnMvaW1nbHlfdGV4dF9kZXNpZ25faWNvbl9kZWNvcmF0aXZlLnBuZycsXG4gICAgICBpZGVudGlmaWVyOiAnaW1nbHlfdGV4dF9kZXNpZ25fc3Vuc2hpbmUnXG4gICAgfSxcbiAgICB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL3RleHQtZGVzaWduL2ljb25zL2ltZ2x5X3RleHRfZGVzaWduX2ljb25fc3BlY2lhbGRlYWxzLnBuZycsXG4gICAgICBpZGVudGlmaWVyOiAnaW1nbHlfdGV4dF9kZXNpZ25fbWFza2VkX2JhZGdlJ1xuICAgIH0sXG4gICAge1xuICAgICAgYmFja2dyb3VuZEltYWdlUGF0aDogJ2VkaXRvci9jb250cm9scy90ZXh0LWRlc2lnbi9pY29ucy9pbWdseV90ZXh0X2Rlc2lnbl9pY29uX2RvdWJsZWxpbmVzLnBuZycsXG4gICAgICBpZGVudGlmaWVyOiAnaW1nbHlfdGV4dF9kZXNpZ25fYmxvY2tzX2NvbmRlbnNlZCdcbiAgICB9LFxuICAgIHtcbiAgICAgIGJhY2tncm91bmRJbWFnZVBhdGg6ICdlZGl0b3IvY29udHJvbHMvdGV4dC1kZXNpZ24vaWNvbnMvaW1nbHlfdGV4dF9kZXNpZ25faWNvbl9jZWxlYnJhdGUucG5nJyxcbiAgICAgIGlkZW50aWZpZXI6ICdpbWdseV90ZXh0X2Rlc2lnbl9jZWxlYnJhdGVfc2ltcGxlJ1xuICAgIH0sXG4gICAge1xuICAgICAgYmFja2dyb3VuZEltYWdlUGF0aDogJ2VkaXRvci9jb250cm9scy90ZXh0LWRlc2lnbi9pY29ucy9pbWdseV90ZXh0X2Rlc2lnbl9pY29uX2JlZXJhbmRidXJnZXIucG5nJyxcbiAgICAgIGlkZW50aWZpZXI6ICdpbWdseV90ZXh0X2Rlc2lnbl9lcXVhbF93aWR0aF9mYXQnXG4gICAgfSxcbiAgICB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL3RleHQtZGVzaWduL2ljb25zL2ltZ2x5X3RleHRfZGVzaWduX2ljb25fd2F0ZXJjb2xvci5wbmcnLFxuICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3RleHRfZGVzaWduX3dhdGVyY29sb3InXG4gICAgfSxcbiAgICB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL3RleHQtZGVzaWduL2ljb25zL2ltZ2x5X3RleHRfZGVzaWduX2ljb25fcGFydGljbGUucG5nJyxcbiAgICAgIGlkZW50aWZpZXI6ICdpbWdseV90ZXh0X2Rlc2lnbl9wYXJ0aWNsZXMnXG4gICAgfSxcbiAgICB7XG4gICAgICBiYWNrZ3JvdW5kSW1hZ2VQYXRoOiAnZWRpdG9yL2NvbnRyb2xzL3RleHQtZGVzaWduL2ljb25zL2ltZ2x5X3RleHRfZGVzaWduX2ljb25feWVhaC5wbmcnLFxuICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3RleHRfZGVzaWduX21hc2tlZF9zcGVlY2hfYnViYmxlJ1xuICAgIH0sXG4gICAge1xuICAgICAgYmFja2dyb3VuZEltYWdlUGF0aDogJ2VkaXRvci9jb250cm9scy90ZXh0LWRlc2lnbi9pY29ucy9pbWdseV90ZXh0X2Rlc2lnbl9pY29uX3RoaXNpc2FkcmVhbS5wbmcnLFxuICAgICAgaWRlbnRpZmllcjogJ2ltZ2x5X3RleHRfZGVzaWduX21hc2tlZF9zcGVlY2hfYnViYmxlX2NvbWljJ1xuICAgIH0sXG4gICAge1xuICAgICAgYmFja2dyb3VuZEltYWdlUGF0aDogJ2VkaXRvci9jb250cm9scy90ZXh0LWRlc2lnbi9pY29ucy9pbWdseV90ZXh0X2Rlc2lnbl9pY29uX2ZhdF9mYWNlLnBuZycsXG4gICAgICBpZGVudGlmaWVyOiAnaW1nbHlfdGV4dF9kZXNpZ25fbXVsdGlsaW5lJ1xuICAgIH1cbiAgXVxuXG4gIC8qKlxuICAgKiBNYXBzIHRoZSBvcGVyYXRpb25zIHN0YXRlIHRvIGEgc2hhcmVkIHN0YXRlIG9iamVjdFxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcGVyYXRpb25zXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2luaXRpYWw9ZmFsc2VdXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgbWFwT3BlcmF0aW9uc1RvU2hhcmVkU3RhdGUgKG9wZXJhdGlvbnMsIGluaXRpYWwgPSBmYWxzZSwgcHJldmlvdXNTdGF0ZSA9IHt9KSB7XG4gICAgbGV0IG9wZXJhdGlvbiA9IG9wZXJhdGlvbnMuZ2V0T3JDcmVhdGUoJ3Nwcml0ZScpXG4gICAgbGV0IHNwcml0ZSA9IG9wZXJhdGlvbi5nZXRTcHJpdGVzKCkuZmlsdGVyKHMgPT4gcyBpbnN0YW5jZW9mIFRleHREZXNpZ25TcHJpdGUpWzBdIHx8IG51bGxcbiAgICBsZXQgbGF5b3V0ID0gc3ByaXRlID8gc3ByaXRlLmdldExheW91dCgpIDogbnVsbFxuICAgIHJldHVybiB7XG4gICAgICBjb2xvcjogc3ByaXRlID8gc3ByaXRlLmdldENvbG9yKCkgOiBDb2xvci5XSElURSxcbiAgICAgIHRleHRBc01hc2s6IHNwcml0ZSA/IHNwcml0ZS5nZXRJbnZlcnRlZCgpIDogZmFsc2UsXG4gICAgICBzZWxlY3RlZExheW91dDogbGF5b3V0ID8gbGF5b3V0LmNvbnN0cnVjdG9yLmlkZW50aWZpZXIgOiBudWxsXG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlVGV4dEFzTWFzayA9ICgpID0+IHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG4gICAgY29uc3Qgc3ByaXRlID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ3NlbGVjdGVkU3ByaXRlJylcblxuICAgIGlmIChzcHJpdGUpIHtcbiAgICAgIHNwcml0ZS5zZXRJbnZlcnRlZCghc3ByaXRlLmdldEludmVydGVkKCkpXG4gICAgICB0aGlzLmFkZExvY2FsSGlzdG9yeVNuYXBzaG90KCdpbnZlcnRlZC1sYXlvdXQnKVxuICAgICAgZWRpdG9yLnJlbmRlcigpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0KHtcbiAgICAgICAgdGV4dEFzTWFzazogIXRoaXMuc2hhcmVkU3RhdGUuZ2V0KCd0ZXh0QXNNYXNrJylcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgc2V0Q29sb3IgPSBjb2xvciA9PiB7XG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuICAgIGNvbnN0IHNwcml0ZSA9IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCdzZWxlY3RlZFNwcml0ZScpXG5cbiAgICB0aGlzLnNoYXJlZFN0YXRlLnNldCgnY29sb3InLCBjb2xvci5jbG9uZSgpKVxuXG4gICAgaWYgKHNwcml0ZSkge1xuICAgICAgc3ByaXRlLnNldENvbG9yKGNvbG9yLmNsb25lKCkpXG5cbiAgICAgIHRoaXMuYWRkTG9jYWxIaXN0b3J5U25hcHNob3QoJ2xheW91dC1jb2xvcicpXG5cbiAgICAgIGVkaXRvci5yZW5kZXIoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNoYXJlZFN0YXRlLnNldCh7XG4gICAgICAgIGNvbG9yOiBjb2xvci5jbG9uZSgpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIF9vbkVudGVyICgpIHtcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG5cbiAgICBjb25zdCB0ZXh0RGVzaWduTWFuYWdlciA9IG5ldyBUZXh0RGVzaWduTWFuYWdlcih0aGlzLmNvbnRleHQudWksIHRoaXMuX29wdGlvbnMpXG4gICAgY29uc3QgZm9udE1hbmFnZXIgPSBuZXcgRm9udE1hbmFnZXIodGhpcy5jb250ZXh0LnVpLCB7IGZvbnRzOiBDb25zdGFudHMuREVGQVVMVFMuVEVYVF9ERVNJR05fRk9OVFMsIHJlcGxhY2VGb250czogdHJ1ZSB9KVxuICAgIGNvbnN0IG9wZXJhdGlvbiA9IGVkaXRvci5vcGVyYXRpb25zLmdldE9yQ3JlYXRlKCdzcHJpdGUnKVxuXG4gICAgbGV0IHNlbGVjdGVkU3ByaXRlID0gVXRpbHMuQXJyYXkuZmluZChvcGVyYXRpb24uZ2V0U3ByaXRlcygpLCBzID0+IHMgaW5zdGFuY2VvZiBUZXh0RGVzaWduU3ByaXRlKVxuXG4gICAgdGhpcy5zaGFyZWRTdGF0ZS5zZXQoe1xuICAgICAgdGV4dERlc2lnbk1hbmFnZXIsXG4gICAgICBmb250TWFuYWdlcixcbiAgICAgIG9wZXJhdGlvbixcbiAgICAgIHNlbGVjdGVkU3ByaXRlLFxuICAgICAgY29sb3I6IENvbG9yLldISVRFXG4gICAgfSlcbiAgfVxuXG4gIGdldExheW91dEl0ZW1zICgpIHtcbiAgICBjb25zdCB0ZXh0RGVzaWduTWFuYWdlciA9IHRoaXMuc2hhcmVkU3RhdGUuZ2V0KCd0ZXh0RGVzaWduTWFuYWdlcicpXG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuVGV4dERlc2lnbkl0ZW1zLmZpbHRlcihpdGVtID0+IHRleHREZXNpZ25NYW5hZ2VyLmdldExheW91dEJ5SWRlbnRpZmllcihpdGVtLmlkZW50aWZpZXIpKVxuICB9XG5cbiAgYXN5bmMgZ2V0VGV4dCAoaW5pdGlhbFZhbHVlID0gJycpIHtcbiAgICBjb25zdCBtb2RhbCA9IE1vZGFsTWFuYWdlci5pbnN0YW5jZS5kaXNwbGF5SW5wdXQoJ1RleHQnLCBpbml0aWFsVmFsdWUpXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgbW9kYWwub24oJ2lucHV0JywgcmVzb2x2ZSlcbiAgICAgIG1vZGFsLm9uKCdjbG9zZScsIF8gPT4gcmVzb2x2ZShpbml0aWFsVmFsdWUpKVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBlZGl0VGV4dCAoKSB7XG4gICAgY29uc3Qgc3ByaXRlID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ3NlbGVjdGVkU3ByaXRlJylcbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLnNoYXJlZFN0YXRlLmdldCgnb3BlcmF0aW9uJylcbiAgICBjb25zdCB7IGVkaXRvciB9ID0gdGhpcy5jb250ZXh0XG5cbiAgICBpZiAoIXNwcml0ZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgdGV4dCA9IHNwcml0ZS5nZXRUZXh0KClcbiAgICBjb25zdCBuZXdUZXh0ID0gYXdhaXQgdGhpcy5nZXRUZXh0KHRleHQpXG5cbiAgICBpZiAoIW5ld1RleHQgfHwgbmV3VGV4dC50cmltKCkgPT09ICcnKSB7XG4gICAgICBvcGVyYXRpb24ucmVtb3ZlU3ByaXRlKHNwcml0ZSlcbiAgICAgIHNwcml0ZS5kaXNwb3NlKClcbiAgICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0KHtcbiAgICAgICAgc2VsZWN0ZWRMYXlvdXQ6IG51bGwsXG4gICAgICAgIHNlbGVjdGVkU3ByaXRlOiBudWxsXG4gICAgICB9KVxuICAgICAgZWRpdG9yLnJlbmRlcigpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzcHJpdGUuc2V0VGV4dChuZXdUZXh0KVxuICAgIHRoaXMuYWRkTG9jYWxIaXN0b3J5U25hcHNob3QoJ2xheW91dC10ZXh0JylcbiAgfVxuXG4gIGFzeW5jIHNlbGVjdExheW91dCAoaWRlbnRpZmllcikge1xuICAgIGxldCB7IHRleHREZXNpZ25NYW5hZ2VyLCBzZWxlY3RlZFNwcml0ZSwgb3BlcmF0aW9uIH0gPSB0aGlzLnNoYXJlZFN0YXRlLmdldCgpXG4gICAgY29uc3QgTGF5b3V0ID0gdGV4dERlc2lnbk1hbmFnZXIuZ2V0TGF5b3V0QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpXG4gICAgY29uc3QgeyBlZGl0b3IgfSA9IHRoaXMuY29udGV4dFxuXG4gICAgaWYgKCFMYXlvdXQpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgLy8gSWYgbm8gc3ByaXRlIGlzIHNlbGVjdGVkLCBjcmVhdGUgYSBuZXcgb25lXG4gICAgaWYgKCFzZWxlY3RlZFNwcml0ZSkge1xuICAgICAgbGV0IHRleHQgPSBhd2FpdCB0aGlzLmdldFRleHQoKVxuXG4gICAgICBpZiAoIXRleHQgfHwgdGV4dC50cmltKCkgPT09ICcnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBzZWxlY3RlZFNwcml0ZSA9IG5ldyBUZXh0RGVzaWduU3ByaXRlKFxuICAgICAgICBvcGVyYXRpb24sXG4gICAgICAgIHtcbiAgICAgICAgICB0ZXh0LFxuICAgICAgICAgIGNvbG9yOiB0aGlzLnNoYXJlZFN0YXRlLmdldCgnY29sb3InKSxcbiAgICAgICAgICBpbnZlcnRlZDogdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ3RleHRBc01hc2snKSxcbiAgICAgICAgICB3aWR0aDogMC44XG4gICAgICAgIH1cbiAgICAgIClcblxuICAgICAgb3BlcmF0aW9uLmFkZFNwcml0ZShzZWxlY3RlZFNwcml0ZSlcbiAgICAgIHRoaXMuc2hhcmVkU3RhdGUuc2V0KHsgc2VsZWN0ZWRTcHJpdGUgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTcHJpdGUuc2VlZCgpXG4gICAgfVxuXG4gICAgLy8gU2VsZWN0L2NyZWF0ZSBsYXlvdXRcbiAgICBjb25zdCBsYXlvdXQgPSBuZXcgTGF5b3V0KClcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBpbWFnZXMgPSBsYXlvdXQuZ2V0SW1hZ2VQYXRocygpLm1hcChwYXRoID0+ICh7IHBhdGgsIGZ1bGxQYXRoOiB0aGlzLl9nZXRBc3NldFBhdGgocGF0aCksIGltYWdlOiBudWxsIH0pKVxuICAgICAgYXdhaXQgQXNzZXRNYW5hZ2VyLmxvYWRJbWFnZXMoaW1hZ2VzKVxuICAgICAgbGF5b3V0Lm9uSW1hZ2VzTG9hZGVkKClcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBMb2cuZXJyb3IoZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNlbGVjdGVkU3ByaXRlLnNldExheW91dChsYXlvdXQpXG5cbiAgICB0aGlzLmFkZExvY2FsSGlzdG9yeVNuYXBzaG90KCdsYXlvdXQnKVxuXG4gICAgZWRpdG9yLnJlbmRlcigpXG5cbiAgICByZXR1cm4gc2VsZWN0ZWRTcHJpdGVcbiAgfVxuXG4gIGFzeW5jIF9sb2FkRm9udHMgKCkge1xuICAgIGNvbnN0IGZvbnRNYW5hZ2VyID0gdGhpcy5zaGFyZWRTdGF0ZS5nZXQoJ2ZvbnRNYW5hZ2VyJylcbiAgICBjb25zdCBmb250TG9hZGVyID0gdGhpcy5jb250ZXh0LnVpLmdldEZvbnRMb2FkZXIoKVxuICAgIGZvbnRMb2FkZXIuc2V0Rm9udHMoZm9udE1hbmFnZXIuZ2V0Rm9udHMoKSlcblxuICAgIEFzc2V0TWFuYWdlci5zZXRGb250cyh7XG4gICAgICAuLi5Bc3NldE1hbmFnZXIuZ2V0Rm9udHMoKSxcbiAgICAgIC4uLmZvbnRNYW5hZ2VyLmdldFZhcmlhdGlvbnNCeUlkZW50aWZpZXIoKVxuICAgIH0pXG5cbiAgICByZXR1cm4gZm9udExvYWRlci5sb2FkKCkuY2F0Y2goZXJyb3JzID0+IGVycm9ycy5tYXAoZSA9PiBlLmZvbnQuZ2V0Rm9udEZhbWlseSgpKSlcbiAgfVxuXG4gIGxvYWRGb250cyAoKSB7XG4gICAgbGV0IGxvYWRpbmdNb2RhbFxuICAgIGNvbnN0IGxvYWRpbmdUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbG9hZGluZ01vZGFsID0gTW9kYWxNYW5hZ2VyLmluc3RhbmNlLmRpc3BsYXlMb2FkaW5nKHRoaXMuX3QoJ3Blc2RrLmVkaXRvci50ZXh0LmxvYWRpbmdGb250cycpLCB0cnVlKVxuICAgIH0sIE1BWF9GT05UX0xPQURJTkdfVElNRSlcblxuICAgIHJldHVybiB0aGlzLl9sb2FkRm9udHMoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGxvYWRpbmdUaW1lb3V0KVxuICAgICAgICBpZiAobG9hZGluZ01vZGFsKSBsb2FkaW5nTW9kYWwuY2xvc2UoKVxuICAgICAgICAvLyBGb3JjZSBmb250IHVwZGF0ZSBhZnRlciBsb2FkaW5nXG4gICAgICAgIC8vIHNlbGVjdGVkU3ByaXRlLmVtaXQoJ3VwZGF0ZScpXG4gICAgICAgIC8vIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICAgICAgLy8gZWRpdG9yLnJlbmRlcigpXG4gICAgICB9KVxuICAgICAgLmNhdGNoKHVuYXZhaWxhYmxlRm9udEZhbWlsaWVzID0+IHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChsb2FkaW5nVGltZW91dClcbiAgICAgICAgaWYgKGxvYWRpbmdNb2RhbCkgbG9hZGluZ01vZGFsLmNsb3NlKClcblxuICAgICAgICBjb25zdCBmb250cyA9IHRoaXMuX3VuYXZhaWxhYmxlRm9udEZhbWlsaWVzLmpvaW4oJywgJylcblxuICAgICAgICAvLyBGb3JjZSBmb250IHVwZGF0ZSBhZnRlciBsb2FkaW5nXG4gICAgICAgIC8vIHNlbGVjdGVkU3ByaXRlLmVtaXQoJ3VwZGF0ZScpXG4gICAgICAgIC8vIGNvbnN0IHsgZWRpdG9yIH0gPSB0aGlzLmNvbnRleHRcbiAgICAgICAgLy8gZWRpdG9yLnJlbmRlcigpXG4gICAgICAgIC8vIHRoaXMuZm9yY2VVcGRhdGUoKVxuXG4gICAgICAgIE1vZGFsTWFuYWdlci5pbnN0YW5jZS5kaXNwbGF5RXJyb3IoXG4gICAgICAgICAgdGhpcy5fdCgncGVzZGsuZWRpdG9yLnRpdGxlLmZvbnRMb2FkaW5nRXJyb3InKSxcbiAgICAgICAgICB0aGlzLl90KCdwZXNkay5lZGl0b3IudGV4dC5mb250TG9hZGluZ0Vycm9yJywgeyBmb250cyB9KVxuICAgICAgICApXG4gICAgICB9KVxuICB9XG5cbiAgc3RhdGljIGNsaWNrQXRQb3NpdGlvbiAoY2xpY2tQb3NpdGlvbiwgZWRpdG9yKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gZWRpdG9yLm9wZXJhdGlvbnMuZ2V0KCdzcHJpdGUnKVxuXG4gICAgaWYgKCFvcGVyYXRpb24pIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGxldCBzcHJpdGVzID0gb3BlcmF0aW9uLmdldFNwcml0ZXNBdFBvc2l0aW9uKGNsaWNrUG9zaXRpb24sIGVkaXRvci5nZXRPdXRwdXRUZXh0dXJlRGltZW5zaW9ucygpKVxuICAgICAgLmZpbHRlcigocykgPT4gKHMgaW5zdGFuY2VvZiBUZXh0RGVzaWduU3ByaXRlKSlcblxuICAgIHJldHVybiBzcHJpdGVzWzBdID8geyBzZWxlY3RlZFNwcml0ZTogc3ByaXRlc1swXSB9IDogZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBjb250cm9sIGlzIGVuYWJsZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0VuYWJsZWQgKGVkaXRvcikge1xuICAgIHJldHVybiBlZGl0b3IuaXNUb29sRW5hYmxlZCgndGV4dGRlc2lnbicpICYmIGVkaXRvci5pc1Rvb2xBbGxvd2VkKCd0ZXh0ZGVzaWduJylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhc3NldHMgdGhhdCBzaG91bGQgYmUgcHJlbG9hZGVkIGZvciB0aGlzIGNvbnRyb2xcbiAgICogQHBhcmFtICB7UGhvdG9FZGl0b3JTREsuVUkuRGVza3RvcFVJLkVkaXRvcn0gZWRpdG9yXG4gICAqIEByZXR1cm4ge1N0cmluZ1tdfVxuICAgKi9cbiAgc3RhdGljIGdldFByZWxvYWRBc3NldHMgKGVkaXRvcikge1xuICAgIGxldCBhc3NldHMgPSBbXVxuICAgIHRoaXMuVGV4dERlc2lnbkl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBhc3NldHMucHVzaChpdGVtLmJhY2tncm91bmRJbWFnZVBhdGgpXG4gICAgfSlcbiAgICByZXR1cm4gYXNzZXRzXG4gIH1cbn1cblxuRGVza3RvcFVJLkNvbnRyb2xzLlRleHREZXNpZ25Db250cm9scyA9IFRleHREZXNpZ25Db250cm9sc1xuXG5leHBvcnQgZGVmYXVsdCBUZXh0RGVzaWduQ29udHJvbHNcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3RleHQtZGVzaWduL2luZGV4LmpzIiwiLyoqIEBqc3ggUmVhY3QuY3JlYXRlRWxlbWVudCAqL1xuLyogQG1vZHVsZSAqL1xuLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFBob3RvRWRpdG9yU0RLLlxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNi0yMDE3IDllbGVtZW50cyBHbWJIIDxjb250YWN0QDllbGVtZW50cy5jb20+XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgbGljZW5zZSBhZ3JlZW1lbnRcbiAqIGlzIGFwcHJvdmVkIGFuZCBhIGxlZ2FsL2ZpbmFuY2lhbCBjb250cmFjdCB3YXMgc2lnbmVkIGJ5IHRoZSB1c2VyLlxuICogVGhlIGxpY2Vuc2UgYWdyZWVtZW50IGNhbiBiZSBmb3VuZCB1bmRlciBmb2xsb3dpbmcgbGluazpcbiAqXG4gKiBodHRwczovL3d3dy5waG90b2VkaXRvcnNkay5jb20vTElDRU5TRS50eHRcbiAqL1xuXG5pbXBvcnQgeyBSZWFjdCwgYWRvbmlzLCBDb250cm9sc0NvbXBvbmVudCwgQ2hlY2tib3hDb21wb25lbnQsIENvbG9yU2VsZWN0aW9uQ29tcG9uZW50LCBTY3JvbGxiYXJDb21wb25lbnQsIEdyb3VwZWRDb250cm9sc1N0eWxlcyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrL2Rlc2t0b3AtdWkvY29yZSdcblxuY29uc3QgeyBDb250cm9sR3JvdXBUaXRsZSwgQ29udHJvbEdyb3VwIH0gPSBHcm91cGVkQ29udHJvbHNTdHlsZXNcblxuY29uc3QgdGVzdCA9IHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3QnXG5cbmNvbnN0IHNodWZmbGVJY29uUGF0aCA9ICdlZGl0b3IvY29udHJvbHMvdGV4dC1kZXNpZ24vaWNvbnMvaW1nbHlfaWNvbl9uZXh0XzQ4cHQucG5nJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0RGVzaWduQ29udHJvbHNDb21wb25lbnQgZXh0ZW5kcyBDb250cm9sc0NvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBDb250cm9sc0NvbXBvbmVudC5jb250ZXh0VHlwZXNcbiAgc3RhdGljIFJvb3RFbGVtZW50ID0gQ29udHJvbHNDb21wb25lbnQuUm9vdEVsZW1lbnRcblxuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICB0aGlzLl9ldmVudHMgPSB7IH1cblxuICAgIHRoaXMuX3VuYXZhaWxhYmxlRm9udEZhbWlsaWVzID0gW11cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBzdXBlci5jb21wb25lbnREaWRNb3VudCgpXG4gICAgdGhpcy5wcm9wcy5jb250cm9scy5sb2FkRm9udHMoKVxuICB9XG5cbiAgc2hvdWxkU2hhcmVkQ29tcG9uZW50VXBkYXRlIChvbGRTdGF0ZSwgbmV3U3RhdGUpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgX2dldFJvb3RQcm9wcyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzTmFtZTogKHRlc3QgPyAnanMtdGV4dERlc2lnbkNvbnRyb2xzJyA6IHVuZGVmaW5lZCksXG4gICAgICB3aXRoQm9yZGVyVG9wOiB0cnVlXG4gICAgfVxuICB9XG5cbiAgb25TZWxlY3RMYXlvdXQgKGlkZW50aWZpZXIpIHtcbiAgICB0aGlzLnByb3BzLmNvbnRyb2xzXG4gICAgICAuc2VsZWN0TGF5b3V0KGlkZW50aWZpZXIpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICAgICAgICB0aGlzLmNvbnRleHQuZWRpdG9yLnJlbmRlcigpXG4gICAgICB9KVxuICB9XG5cbiAgX3JlbmRlckNvbnRlbnQgKCkge1xuICAgIGNvbnN0IHsgY29sb3IsIHRleHRBc01hc2ssIHNlbGVjdGVkTGF5b3V0IH0gPSB0aGlzLnNoYXJlZFN0YXRlXG4gICAgY29uc3QgY29udHJvbHMgPSB0aGlzLnByb3BzLmNvbnRyb2xzXG4gICAgY29uc3QgaXRlbXMgPSBjb250cm9scy5nZXRMYXlvdXRJdGVtcygpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPENvbnRhaW5lcj5cbiAgICAgICAgPFNldHRpbmdzPlxuICAgICAgICAgIDxDb2xvclNlbGVjdGlvbj5cbiAgICAgICAgICAgIDxDb2xvclNlbGVjdGlvbkNvbXBvbmVudFxuICAgICAgICAgICAgICB2YWx1ZT17Y29sb3J9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtjb250cm9scy5zZXRDb2xvcn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Db2xvclNlbGVjdGlvbj5cblxuICAgICAgICAgIDxTZWN0aW9uSGVhZGVyPlxuICAgICAgICAgICAgPENoZWNrYm94XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17dGVzdCA/ICdqcy10ZC1pbnZlcnRlZC1jaGVja2JveCcgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2NvbnRyb2xzLnRvZ2dsZVRleHRBc01hc2t9XG4gICAgICAgICAgICAgIGNoZWNrZWQ9e3RleHRBc01hc2t9IC8+XG4gICAgICAgICAgICA8U2VjdGlvblRpdGxlPnt0aGlzLl90KGBwZXNkay50ZXh0ZGVzaWduLmJ1dHRvbi5pbnZlcnRgKX08L1NlY3Rpb25UaXRsZT5cbiAgICAgICAgICA8L1NlY3Rpb25IZWFkZXI+XG4gICAgICAgIDwvU2V0dGluZ3M+XG4gICAgICAgIDxTZXR0aW5nc0JvdHRvbT5cbiAgICAgICAgICA8U2Nyb2xsYmFyQ29tcG9uZW50IGRpcmVjdGlvbj0ndmVydGljYWwnPlxuICAgICAgICAgICAgPExpc3Q+XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtcy5tYXAoaXRlbSA9PlxuICAgICAgICAgICAgICAgICAgPExpc3RJdGVtXG4gICAgICAgICAgICAgICAgICAgIGtleT17aXRlbS5pZGVudGlmaWVyfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3Rlc3QgPyBganMtdGQtaXRlbS0ke2l0ZW0uaWRlbnRpZmllcn1gIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZD17aXRlbS5pZGVudGlmaWVyID09PSBzZWxlY3RlZExheW91dH1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5vblNlbGVjdExheW91dChpdGVtLmlkZW50aWZpZXIpfT5cbiAgICAgICAgICAgICAgICAgICAgPEltYWdlIHNyYz17XG4gICAgICAgICAgICAgICAgICAgICAgaXRlbS5pZGVudGlmaWVyID09PSBzZWxlY3RlZExheW91dFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl9nZXRBc3NldFBhdGgoc2h1ZmZsZUljb25QYXRoLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9nZXRBc3NldFBhdGgoaXRlbS5iYWNrZ3JvdW5kSW1hZ2VQYXRoLCB0cnVlKX0gLz5cbiAgICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW0+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L0xpc3Q+XG4gICAgICAgICAgPC9TY3JvbGxiYXJDb21wb25lbnQ+XG4gICAgICAgIDwvU2V0dGluZ3NCb3R0b20+XG4gICAgICA8L0NvbnRhaW5lcj5cbiAgICApXG4gIH1cbn1cblxuY29uc3QgQ29udGFpbmVyID0gYWRvbmlzLmRpdih7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgZGlzcGxheTogJ3RhYmxlJ1xufSlcblxuY29uc3QgSW1hZ2UgPSBhZG9uaXMuaW1nKHtcbiAgd2lkdGg6ICc4MHB4JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgbWFyZ2luOiAnYXV0bydcbn0pXG5cbmNvbnN0IExpc3QgPSBhZG9uaXMudWwoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAnMjVweCcsXG4gIGJvdHRvbTogMCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gIGxpc3RTdHlsZTogJ25vbmUnLFxuICBtYXJnaW46IDAsXG4gIHBhZGRpbmc6IDAsXG4gIGxpbmVIZWlnaHQ6IDBcbn0pXG5cbmNvbnN0IExpc3RJdGVtID0gYWRvbmlzLmxpKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICB3aWR0aDogJzg4cHgnLFxuICBoZWlnaHQ6ICc4OHB4JyxcbiAgbWFyZ2luUmlnaHQ6ICcwcHgnLFxuICBtYXJnaW5Cb3R0b206ICc4cHgnLFxuICBtYXJnaW5Ub3A6ICcwcHgnLFxuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgYmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wMTUpJyxcbiAgYm9yZGVyUmFkaXVzOiAnMXB4JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gICcmOm50aC1jaGlsZChvZGQpJzoge1xuICAgIG1hcmdpblJpZ2h0OiAnOHB4J1xuICB9LFxuICBib3JkZXI6ICcxcHggc29saWQgdHJhbnNwYXJlbnQnLFxuICB0cmFuc2l0aW9uOiB0aGVtZSA9PiBgYWxsICR7dGhlbWUudHJhbnNpdGlvbkR1cmF0aW9ufXMgZWFzZS1vdXRgLFxuICAnJjpob3Zlcic6IHtcbiAgICBib3JkZXI6ICcxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KScsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUgPT4gYGFsbCAke3RoZW1lLnRyYW5zaXRpb25EdXJhdGlvbn1zIGVhc2UtaW5gXG4gIH1cbn0sXG57XG4gIHNlbGVjdGVkOiB7XG4gICAgYmFja2dyb3VuZDogJ3JnYmEoMjcsMTEyLDI1NSwwLjE0KScsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkICMxQjc3RkYnXG4gIH1cbn0pXG5cbmNvbnN0IFNlY3Rpb25UaXRsZSA9IGFkb25pcyhDb250cm9sR3JvdXBUaXRsZSkuZGl2KHtcbiAgdHJhbnNpdGlvbjogJ21hcmdpbi1ib3R0b20gLjJzIDBzJyxcbiAgbWFyZ2luQm90dG9tOiAnMjBweCcsXG4gIHBhZGRpbmc6ICcwIDVweCdcbn0pXG5cbmNvbnN0IFNlY3Rpb25IZWFkZXIgPSBhZG9uaXMuZGl2KHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGN1cnNvcjogJ3BvaW50ZXInXG59KVxuXG5jb25zdCBDaGVja2JveCA9IGFkb25pcyhDaGVja2JveENvbXBvbmVudCkoe1xuICBmbG9hdDogJ3JpZ2h0JyxcbiAgdGV4dEFsaWduOiAncmlnaHQnXG59KVxuXG5jb25zdCBTZXR0aW5ncyA9IGFkb25pcyhDb250cm9sR3JvdXApLmRpdih7XG4gIHBhZGRpbmc6ICcyMXB4JyxcbiAgcGFkZGluZ0JvdHRvbTogJzI1cHgnLFxuICBib3JkZXJCb3R0b206IHRoZW1lID0+IGAxcHggc29saWQgJHt0aGVtZS5kYXJrU2xpZGVyQmFja2dyb3VuZENvbG9yfWBcbn0pXG5cbmNvbnN0IFNldHRpbmdzQm90dG9tID0gYWRvbmlzKENvbnRyb2xHcm91cCkuZGl2KHtcbiAgcGFkZGluZzogJzIxcHgnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAnMTQ4cHgnLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJSdcbn0pXG5cbmNvbnN0IENvbG9yU2VsZWN0aW9uID0gYWRvbmlzLmRpdih7XG4gIG1hcmdpbkJvdHRvbTogJzE2cHgnXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29udHJvbHMvdGV4dC1kZXNpZ24vdGV4dC1kZXNpZ24tY29udHJvbHMtY29tcG9uZW50LmpzeCIsIi8qIEBtb2R1bGUgKi9cbi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBQaG90b0VkaXRvclNESy5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYtMjAxNyA5ZWxlbWVudHMgR21iSCA8Y29udGFjdEA5ZWxlbWVudHMuY29tPlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGxpY2Vuc2UgYWdyZWVtZW50XG4gKiBpcyBhcHByb3ZlZCBhbmQgYSBsZWdhbC9maW5hbmNpYWwgY29udHJhY3Qgd2FzIHNpZ25lZCBieSB0aGUgdXNlci5cbiAqIFRoZSBsaWNlbnNlIGFncmVlbWVudCBjYW4gYmUgZm91bmQgdW5kZXIgZm9sbG93aW5nIGxpbms6XG4gKlxuICogaHR0cHM6Ly93d3cucGhvdG9lZGl0b3JzZGsuY29tL0xJQ0VOU0UudHh0XG4gKi9cblxuaW1wb3J0IHsgT3BlcmF0aW9ucyB9IGZyb20gJ3Bob3RvZWRpdG9yc2RrJ1xuaW1wb3J0IFNwcml0ZXNDYW52YXNDb250cm9sc0NvbXBvbmVudCBmcm9tICcuLi9zaGFyZWQvc3ByaXRlcy9zcHJpdGVzLWNhbnZhcy1jb250cm9scy1jb21wb25lbnQnXG5cbmNvbnN0IHsgU3ByaXRlT3BlcmF0aW9uIH0gPSBPcGVyYXRpb25zXG5sZXQgVGV4dERlc2lnblNwcml0ZVxuaWYgKFNwcml0ZU9wZXJhdGlvbikge1xuICBUZXh0RGVzaWduU3ByaXRlID0gT3BlcmF0aW9ucy5TcHJpdGVPcGVyYXRpb24uVGV4dERlc2lnblNwcml0ZVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0RGVzaWduQ2FudmFzQ29udHJvbHNDb21wb25lbnQgZXh0ZW5kcyBTcHJpdGVzQ2FudmFzQ29udHJvbHNDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0gU3ByaXRlc0NhbnZhc0NvbnRyb2xzQ29tcG9uZW50LmNvbnRleHRUeXBlc1xuXG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgIHZpc2libGU6IHRydWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgc3ByaXRlIGl0ZW1zXG4gICAqIEBwYXJhbSB7U3ByaXRlW119IHNwcml0ZXNcbiAgICogQHJldHVybiB7UmVhY3QuQ29tcG9uZW50W119XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyU3ByaXRlSXRlbXMgKHNwcml0ZXMpIHtcbiAgICAvLyBPbmx5IHJlbmRlciBUZXh0RGVzaWduIGl0ZW1zXG4gICAgcmV0dXJuIHN1cGVyLl9yZW5kZXJTcHJpdGVJdGVtcyhzcHJpdGVzLmZpbHRlcihzID0+IHMgaW5zdGFuY2VvZiBUZXh0RGVzaWduU3ByaXRlKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3RzIHRoZSBuZXh0IHNwcml0ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NlbGVjdE5leHRTcHJpdGUgKCkge1xuICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMuZ2V0U2hhcmVkU3RhdGUoJ29wZXJhdGlvbicpXG4gICAgY29uc3Qgc3ByaXRlcyA9IG9wZXJhdGlvbi5nZXRTcHJpdGVzKCkuc2xpY2UoMCkucmV2ZXJzZSgpXG5cbiAgICBsZXQgc3ByaXRlLCBuZXh0U3ByaXRlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcHJpdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzcHJpdGUgPSBzcHJpdGVzW2ldXG4gICAgICBpZiAoc3ByaXRlIGluc3RhbmNlb2YgVGV4dERlc2lnblNwcml0ZSkge1xuICAgICAgICBuZXh0U3ByaXRlID0gc3ByaXRlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTaGFyZWRTdGF0ZSh7IHNlbGVjdGVkU3ByaXRlOiBuZXh0U3ByaXRlIHx8IG51bGwgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IHNwcml0ZSB3aXRoIHRoZSBnaXZlbiBvcHRpb25zXG4gICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQaG90b0VkaXRvclNESy5PcGVyYXRpb25zLlNwcml0ZU9wZXJhdGlvbi5TcHJpdGV9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY3JlYXRlU3ByaXRlIChvcHRpb25zKSB7IH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbnRyb2xzL3RleHQtZGVzaWduL3RleHQtZGVzaWduLWNhbnZhcy1jb250cm9scy1jb21wb25lbnQuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==