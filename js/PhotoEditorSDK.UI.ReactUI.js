(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("photoeditorsdk/js/PhotoEditorSDK"), require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["photoeditorsdk", "react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["PhotoEditorReactUI"] = factory(require("photoeditorsdk/js/PhotoEditorSDK"), require("react"), require("react-dom"));
	else
		root["PhotoEditorReactUI"] = factory(root["PhotoEditorSDK"], root["React"], root["ReactDOM"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_62__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 59);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SharedConstants = exports.PropTypes = exports.ImageLoader = exports.ImageFormat = exports.ColorMatrix = exports.now = exports.Log = exports.cancelAnimationFrame = exports.requestAnimationFrame = exports.SDK = exports.EXIF = exports.ReactDOM = exports.UniformType = exports.OptionType = exports.RenderType = exports.Base64 = exports.Color = exports.SharedState = exports.Constants = exports.EventEmitter = exports.SDKUtils = exports.Vector2 = exports.ReactBEM = exports.BaseComponent = exports.Classnames = exports.BEM = exports.React = exports.Utils = exports.Promise = undefined;

var _photoeditorsdk = __webpack_require__(7);

var _photoeditorsdk2 = _interopRequireDefault(_photoeditorsdk);

var _react = __webpack_require__(16);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(62);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = __webpack_require__(33);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = __webpack_require__(35);

var _classnames2 = _interopRequireDefault(_classnames);

var _bem = __webpack_require__(36);

var _bem2 = _interopRequireDefault(_bem);

var _reactBem = __webpack_require__(37);

var _reactBem2 = _interopRequireDefault(_reactBem);

var _baseComponent = __webpack_require__(67);

var _baseComponent2 = _interopRequireDefault(_baseComponent);

var _utils = __webpack_require__(68);

var _utils2 = _interopRequireDefault(_utils);

var _constants = __webpack_require__(84);

var _constants2 = _interopRequireDefault(_constants);

var _sharedState = __webpack_require__(85);

var _sharedState2 = _interopRequireDefault(_sharedState);

var _animationFrame = __webpack_require__(86);

var _log = __webpack_require__(20);

var _log2 = _interopRequireDefault(_log);

var _imageLoader = __webpack_require__(23);

var _imageLoader2 = _interopRequireDefault(_imageLoader);

var _constants3 = __webpack_require__(38);

var _constants4 = _interopRequireDefault(_constants3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Base64 = _photoeditorsdk2.default.Base64; /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var Color = _photoeditorsdk2.default.Color;
var ColorMatrix = _photoeditorsdk2.default.Math.ColorMatrix;
var EventEmitter = _photoeditorsdk2.default.EventEmitter;
var EXIF = _photoeditorsdk2.default.EXIF;
var OptionType = _photoeditorsdk2.default.OptionType;
var Promise = _photoeditorsdk2.default.Promise;
var SDKUtils = _photoeditorsdk2.default.Utils;
var RenderType = _photoeditorsdk2.default.RenderType;
var ImageFormat = _photoeditorsdk2.default.ImageFormat;
var SDK = _photoeditorsdk2.default;
var UniformType = _photoeditorsdk2.default.UniformType;
var Vector2 = _photoeditorsdk2.default.Math.Vector2;

var now = typeof window !== 'undefined' && window.performance && window.performance.now ? window.performance.now.bind(window.performance) : __webpack_require__(39);

exports.Promise = Promise;
exports.Utils = _utils2.default;
exports.React = _react2.default;
exports.BEM = _bem2.default;
exports.Classnames = _classnames2.default;
exports.BaseComponent = _baseComponent2.default;
exports.ReactBEM = _reactBem2.default;
exports.Vector2 = Vector2;
exports.SDKUtils = SDKUtils;
exports.EventEmitter = EventEmitter;
exports.Constants = _constants2.default;
exports.SharedState = _sharedState2.default;
exports.Color = Color;
exports.Base64 = Base64;
exports.RenderType = RenderType;
exports.OptionType = OptionType;
exports.UniformType = UniformType;
exports.ReactDOM = _reactDom2.default;
exports.EXIF = EXIF;
exports.SDK = SDK;
exports.requestAnimationFrame = _animationFrame.requestAnimationFrame;
exports.cancelAnimationFrame = _animationFrame.cancelAnimationFrame;
exports.Log = _log2.default;
exports.now = now;
exports.ColorMatrix = ColorMatrix;
exports.ImageFormat = ImageFormat;
exports.ImageLoader = _imageLoader2.default;
exports.PropTypes = _propTypes2.default;
exports.SharedConstants = _constants4.default;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var Modal = function (_EventEmitter) {
  _inherits(Modal, _EventEmitter);

  function Modal(type, title, text) {
    var overlay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    _classCallCheck(this, Modal);

    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this));

    _this.type = type;
    _this.title = title;
    _this.text = text;
    _this.overlay = overlay;
    _this.data = null;
    return _this;
  }

  /**
   * Sets the data to the given one
   * @param {Object} data
   */


  _createClass(Modal, [{
    key: 'setData',
    value: function setData(data) {
      this.data = data;
      this.emit('update');
    }

    /**
     * Closes this modal
     */

  }, {
    key: 'close',
    value: function close() {
      this.emit('close');
    }
  }]);

  return Modal;
}(_globals.EventEmitter);

var ModalManager = function (_EventEmitter2) {
  _inherits(ModalManager, _EventEmitter2);

  function ModalManager() {
    _classCallCheck(this, ModalManager);

    var _this2 = _possibleConstructorReturn(this, (ModalManager.__proto__ || Object.getPrototypeOf(ModalManager)).call(this));

    _this2._modals = [];
    return _this2;
  }

  /**
   * Creates a loading modal
   * @param  {String} text
   * @return {Modal}
   */


  _createClass(ModalManager, [{
    key: 'displayLoading',
    value: function displayLoading(text) {
      var modal = new Modal('loading', null, text);
      this.addModal(modal);
      return modal;
    }

    /**
     * Creates a progress modal
     * @param  {String} text
     * @return {Modal}
     */

  }, {
    key: 'displayProgress',
    value: function displayProgress(text) {
      var progress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var modal = new Modal('progress', null, text);
      modal.setData({ progress: progress });
      this.addModal(modal);
      return modal;
    }

    /**
     * Creats a warning modal
     * @param  {String} title
     * @param  {String} text
     * @return {Modal}
     */

  }, {
    key: 'displayWarning',
    value: function displayWarning(title, text) {
      var modal = new Modal('warning', title, text);
      this.addModal(modal);
      return modal;
    }

    /**
     * Creates an error modal
     * @param  {String} title
     * @param  {String} text
     * @param  {Boolean} overlay = true
     * @return {Modal}
     */

  }, {
    key: 'displayError',
    value: function displayError(title, text) {
      var overlay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var modal = new Modal('error', title, text, overlay);
      this.addModal(modal);
      return modal;
    }

    /**
     * Adds the given modal to the list of modals
     * @param {Modal} modal
     */

  }, {
    key: 'addModal',
    value: function addModal(modal) {
      var _this3 = this;

      this._modals.push(modal);
      modal.on('close', function () {
        _this3.removeModal(modal);
      });
      modal.on('update', function () {
        _this3.emit('update');
      });
      this.emit('update');
    }

    /**
     * Removes the given modal from the list of modals
     * @param  {Modal} modal
     */

  }, {
    key: 'removeModal',
    value: function removeModal(modal) {
      var index = this._modals.indexOf(modal);
      this._modals.splice(index, 1);
      this.emit('update');
    }

    /**
     * Returns the modals
     * @return {Array.<Modal>}
     */

  }, {
    key: 'getModals',
    value: function getModals() {
      return this._modals;
    }

    /**
     * Returns the one and only instance of this class
     * @return {ModalManager}
     */

  }], [{
    key: 'instance',
    get: function get() {
      if (!this._instance) {
        this._instance = new ModalManager();
      }
      return this._instance;
    }
  }]);

  return ModalManager;
}(_globals.EventEmitter);

exports.default = ModalManager;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _draggableComponent = __webpack_require__(5);

var _draggableComponent2 = _interopRequireDefault(_draggableComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var SCROLLBAR_WIDTH = 12;

var ScrollbarComponent = function (_BaseComponent) {
  _inherits(ScrollbarComponent, _BaseComponent);

  function ScrollbarComponent() {
    _classCallCheck(this, ScrollbarComponent);

    var _this = _possibleConstructorReturn(this, (ScrollbarComponent.__proto__ || Object.getPrototypeOf(ScrollbarComponent)).call(this));

    if (!_this.constructor.NATIVE_SCROLLBAR_WIDTH) {
      _this.constructor.NATIVE_SCROLLBAR_WIDTH = _globals.Utils.getScrollbarWidth();
    }

    _this._needsStyleFixes = true;
    _this._isDragging = false;
    _this._bindAll('_onButtonDragStart', '_onButtonDrag', '_onButtonDragStop', '_onBarDragStart', '_onBarDrag', '_onBarDragStop', '_onListScroll');
    _this.state = {
      buttonSize: 0,
      buttonPosition: 0,
      buttonVisible: false
    };
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called after the component has been mounted
   */


  _createClass(ScrollbarComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(ScrollbarComponent.prototype.__proto__ || Object.getPrototypeOf(ScrollbarComponent.prototype), 'componentDidMount', this).call(this);
      this.update();
    }
  }, {
    key: 'fixStyles',
    value: function fixStyles() {
      if (!_globals.Utils.isMobile()) {
        this._updateListSize();
      }
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user scrolls the list
     * @private
     */

  }, {
    key: '_onListScroll',
    value: function _onListScroll() {
      if (this._isDragging) return;

      var direction = this._getDirection();

      var listScrollSize = void 0,
          listScrollPosition = void 0,
          backgroundScrollSize = void 0;
      if (direction === ScrollbarComponent.HORIZONTAL) {
        listScrollSize = this._list.scrollWidth - this._list.offsetWidth;
        listScrollPosition = this._list.scrollLeft;
        backgroundScrollSize = this._node.offsetWidth - this.state.buttonSize;
      } else if (direction === ScrollbarComponent.VERTICAL) {
        listScrollSize = this._list.scrollHeight - this._list.offsetHeight;
        listScrollPosition = this._list.scrollTop;
        backgroundScrollSize = this._node.offsetHeight - this.state.buttonSize;
      }

      var progress = listScrollPosition / listScrollSize;
      this.setState({
        buttonPosition: backgroundScrollSize * progress
      });
    }

    /**
     * Gets called when the user presses a mouse button on the bar
     * @private
     */

  }, {
    key: '_onButtonDragStart',
    value: function _onButtonDragStart(e) {
      this._isDragging = true;
      this._initialButtonPosition = this.state.buttonPosition || 0;
    }

    /**
     * Gets called while the user drags the button
     * @param {Vector2} diff
     * @private
     */

  }, {
    key: '_onButtonDrag',
    value: function _onButtonDrag(diff) {
      var direction = this._getDirection();

      var buttonPosition = void 0;
      if (direction === ScrollbarComponent.HORIZONTAL) {
        buttonPosition = this._initialButtonPosition + diff.x;
      } else if (direction === ScrollbarComponent.VERTICAL) {
        buttonPosition = this._initialButtonPosition + diff.y;
      }
      this._setButtonPosition(buttonPosition);
    }

    /**
     * Gets called when the user releases the button
     * @private
     */

  }, {
    key: '_onButtonDragStop',
    value: function _onButtonDragStop() {
      this._isDragging = false;
    }

    /**
     * Gets called when the user starts dragging the bar
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onBarDragStart',
    value: function _onBarDragStart(e) {
      var mousePosition = _globals.Utils.getEventPosition(e);
      this._initialPosition = mousePosition.clone();
      var boundingRect = this._node.getBoundingClientRect();
      var elementOffset = new _globals.Vector2(boundingRect.left, boundingRect.top);

      var relativePosition = mousePosition.clone().subtract(elementOffset);

      var direction = this._getDirection();
      if (direction === ScrollbarComponent.HORIZONTAL) {
        this._setButtonPosition(relativePosition.x - this.state.buttonSize / 2);
      } else if (direction === ScrollbarComponent.VERTICAL) {
        this._setButtonPosition(relativePosition.y - this.state.buttonSize / 2);
      }

      document.addEventListener('mousemove', this._onBarDrag);
      document.addEventListener('touchmove', this._onBarDrag);
      document.addEventListener('mouseup', this._onBarDragStop);
      document.addEventListener('touchend', this._onBarDragStop);
    }

    /**
     * Gets called while the user drags the bar
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onBarDrag',
    value: function _onBarDrag(e) {
      var mousePosition = _globals.Utils.getEventPosition(e);

      var boundingRect = this._node.getBoundingClientRect();
      var elementOffset = new _globals.Vector2(boundingRect.left, boundingRect.top);

      var relativePosition = mousePosition.clone().subtract(elementOffset);
      var direction = this._getDirection();
      if (direction === ScrollbarComponent.HORIZONTAL) {
        this._setButtonPosition(relativePosition.x - this.state.buttonSize / 2);
      } else if (direction === ScrollbarComponent.VERTICAL) {
        this._setButtonPosition(relativePosition.y - this.state.buttonSize / 2);
      }
    }

    /**
     * Gets called when the user releases the bar
     * @private
     */

  }, {
    key: '_onBarDragStop',
    value: function _onBarDragStop() {
      document.removeEventListener('mousemove', this._onBarDrag);
      document.removeEventListener('touchmove', this._onBarDrag);
      document.removeEventListener('mouseup', this._onBarDragStop);
      document.removeEventListener('touchend', this._onBarDragStop);
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Sets the button position to the given value
     * @param {Number} buttonPosition
     * @private
     */

  }, {
    key: '_setButtonPosition',
    value: function _setButtonPosition(buttonPosition) {
      var direction = this._getDirection();

      var scrollableButtonSize = void 0,
          scrollableListSize = void 0;
      if (direction === ScrollbarComponent.HORIZONTAL) {
        scrollableButtonSize = this._node.offsetWidth - this.state.buttonSize;
        scrollableListSize = this._list.scrollWidth - this._list.offsetWidth;
      } else if (direction === ScrollbarComponent.VERTICAL) {
        scrollableButtonSize = this._node.offsetHeight - this.state.buttonSize;
        scrollableListSize = this._list.scrollHeight - this._list.offsetHeight;
      }

      // Clamp button position
      buttonPosition = Math.max(0, buttonPosition);
      buttonPosition = Math.min(buttonPosition, scrollableButtonSize);

      // Set button position
      this.setState({ buttonPosition: buttonPosition });

      // Update list scroll position
      var progress = buttonPosition / scrollableButtonSize;
      var scrollPosition = scrollableListSize * progress;

      if (direction === ScrollbarComponent.HORIZONTAL) {
        this._list.scrollLeft = scrollPosition;
      } else if (direction === ScrollbarComponent.VERTICAL) {
        this._list.scrollTop = scrollPosition;
      }
    }

    /**
     * Updates the button position and size
     * @param {Function} cb
     * @private
     */

  }, {
    key: '_updateButtonSize',
    value: function _updateButtonSize(cb) {
      var buttonSize = 0;
      var buttonVisible = false;
      var parentSize = void 0,
          parentScrollSize = void 0;

      var direction = this._getDirection();
      if (direction === ScrollbarComponent.HORIZONTAL) {
        parentSize = this._list.clientWidth;
        parentScrollSize = this._list.scrollWidth;
      } else if (direction === ScrollbarComponent.VERTICAL) {
        parentSize = this._list.offsetHeight;
        parentScrollSize = this._list.scrollHeight;
      }

      buttonSize = parentSize / parentScrollSize * parentSize;
      buttonVisible = parentScrollSize > parentSize;

      this.setState({ buttonSize: buttonSize, buttonVisible: buttonVisible }, cb);
    }

    /**
     * Updates the list size
     * @private
     */

  }, {
    key: '_updateListSize',
    value: function _updateListSize() {
      if (!this._list) return;

      var direction = this._getDirection();
      if (direction === ScrollbarComponent.HORIZONTAL) {
        this._list.style.height = '';
        var fullDimensions = this._getFullListDimensions();
        this._listSize = fullDimensions.y;
        this._listContentSize = this._list.offsetHeight;
      } else if (direction === ScrollbarComponent.VERTICAL) {
        this._list.style.width = '';
        var _fullDimensions = this._getFullListDimensions();
        this._listSize = _fullDimensions.x;
        this._listContentSize = this._list.offsetWidth;
      }
    }

    /**
     * In order to get the absolute width and height of the list, including the scrollbar,
     * we need to make use of `getBoundingClientRect`
     * @return {PhotoEditorSDK.Math.Vector2}
     * @private
     */

  }, {
    key: '_getFullListDimensions',
    value: function _getFullListDimensions() {
      var rect = this._list.getBoundingClientRect();
      return new _globals.Vector2(rect.width, rect.height);
    }

    // -------------------------------------------------------------------------- PUBLIC API

    /**
     * Updates the dimensions and stuff
     */

  }, {
    key: 'update',
    value: function update() {
      var _this2 = this;

      if (_globals.Utils.isMobile()) {
        return;
      }

      var _refs = this.refs,
          root = _refs.root,
          list = _refs.list;

      this._node = root;
      this._list = list;

      var direction = this._getDirection();
      this._updateButtonSize(function () {
        if (!_this2._listSize) {
          _this2._updateListSize();
        }

        var newListSize = _this2._listSize;
        if (_this2.state.buttonVisible) {
          newListSize += _this2.constructor.NATIVE_SCROLLBAR_WIDTH;
        }

        if (direction === ScrollbarComponent.HORIZONTAL) {
          _this2._list.style.height = newListSize + 'px';
          _this2._node.style.top = _this2._listContentSize - SCROLLBAR_WIDTH + 'px';
          _this2._node.style.width = _this2._list.offsetWidth + 'px';
        } else if (direction === ScrollbarComponent.VERTICAL) {
          _this2._list.style.width = newListSize + 'px';
          _this2._node.style.left = _this2._listContentSize - SCROLLBAR_WIDTH + 'px';
          _this2._node.style.height = _this2._list.offsetHeight + 'px';
        }
      });

      this._list.addEventListener('scroll', this._onListScroll);
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Returns this scrollbar's direction
     * @return {String}
     * @private
     */

  }, {
    key: '_getDirection',
    value: function _getDirection() {
      return this.props.direction || 'horizontal';
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the button's style object
     * @return {Object}
     * @private
     */

  }, {
    key: '_getButtonStyle',
    value: function _getButtonStyle() {
      var direction = this._getDirection();
      if (direction === 'horizontal') {
        return {
          left: this.state.buttonPosition,
          width: this.state.buttonSize
        };
      } else {
        return {
          top: this.state.buttonPosition,
          height: this.state.buttonSize
        };
      }
    }

    // -------------------------------------------------------------------------- GETTERS

  }, {
    key: 'getList',
    value: function getList() {
      return this.refs.list;
    }
  }, {
    key: 'getRoot',
    value: function getRoot() {
      return this.refs.root;
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      if (_globals.Utils.isMobile()) {
        return this.props.children;
      }

      var buttonStyle = this._getButtonStyle();
      var scrollbarStyle = {
        display: this.state.buttonVisible ? 'block' : 'none'
      };

      var child = _globals.React.cloneElement(this.props.children, {
        ref: 'list'
      });

      return _globals.ReactBEM.createElement(
        'div',
        null,
        child,
        _globals.ReactBEM.createElement(
          'div',
          {
            bem: '$b:scrollbar m:' + (this.props.direction || 'horizontal') + ' m:' + (this.state.buttonVisible ? 'visible' : 'invisible'),
            ref: 'root',
            style: scrollbarStyle,
            onMouseDown: this._onBarDragStart,
            onTouchStart: this._onBarDragStart },
          _globals.ReactBEM.createElement(
            _draggableComponent2.default,
            {
              onStart: this._onButtonDragStart,
              onDrag: this._onButtonDrag,
              onStop: this._onButtonDragStop },
            _globals.ReactBEM.createElement('div', {
              bem: 'e:bar',
              style: buttonStyle,
              onMouseDown: this._onButtonDown })
          )
        )
      );
    }
  }]);

  return ScrollbarComponent;
}(_globals.BaseComponent);

exports.default = ScrollbarComponent;


ScrollbarComponent.HORIZONTAL = 'horizontal';
ScrollbarComponent.VERTICAL = 'vertical';

ScrollbarComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _backButtonComponent = __webpack_require__(111);

var _backButtonComponent2 = _interopRequireDefault(_backButtonComponent);

var _doneButtonComponent = __webpack_require__(112);

var _doneButtonComponent2 = _interopRequireDefault(_doneButtonComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ControlsComponent = function (_BaseComponent) {
  _inherits(ControlsComponent, _BaseComponent);

  function ControlsComponent() {
    var _ref;

    _classCallCheck(this, ControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ControlsComponent.__proto__ || Object.getPrototypeOf(ControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._hasBackButton = true;
    _this._hasDoneButton = false;
    _this._backButtonClicked = false;

    _this._bindAll('_onBackClick', '_onDoneClick');
    return _this;
  }

  /**
   * Returns the global editor state data for this tool.
   *
   * @returns {Object}
   */


  _createClass(ControlsComponent, [{
    key: 'getGlobalToolState',
    value: function getGlobalToolState(identifier) {
      var globalState = this.context.globalState;

      return globalState.get(identifier);
    }

    /**
     * Sets the global editor state data for this tool.
     *
     * @returns {Object}
     */

  }, {
    key: 'setGlobalToolState',
    value: function setGlobalToolState(identifier, state) {
      var globalState = this.context.globalState;

      globalState.set(_defineProperty({}, identifier, state));
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user clicks the back button
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onBackClick',
    value: function _onBackClick(e) {
      this._backButtonClicked = true;
      this.props.onSwitchControls('back');
    }

    /**
     * Gets called when the user clicks the done button
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onDoneClick',
    value: function _onDoneClick(e) {
      this._onBackClick();
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderControls',
    value: function renderControls() {
      return null;
    }

    /**
     * Renders the overlay controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderOverlayControls',
    value: function renderOverlayControls() {
      return null;
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var forcedControl = this.props.options && this.props.options.forcedControl;
      var backButton = this._hasBackButton && !forcedControl ? _globals.ReactBEM.createElement(_backButtonComponent2.default, { onClick: this._onBackClick }) : null;

      var doneButton = this._hasDoneButton || forcedControl ? _globals.ReactBEM.createElement(_doneButtonComponent2.default, { onClick: this._onDoneClick }) : null;

      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:controls', ref: 'root' },
        this.renderOverlayControls(),
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:table' },
          backButton,
          this.renderControls(),
          doneButton
        )
      );
    }
  }]);

  return ControlsComponent;
}(_globals.BaseComponent);

exports.default = ControlsComponent;


ControlsComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

/**
 * The base class for all controls
 * @class
 * @memberof PhotoEditorSDK.UI.ReactUI
 */
var Control = function () {
  function Control() {
    _classCallCheck(this, Control);
  }

  _createClass(Control, [{
    key: "getInitialSharedState",

    /**
     * Returns the initial shared state for this control
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @param  {Object} additionalState = {}
     * @return {Object}
     * @override
     */
    value: function getInitialSharedState() {
      return {};
    }

    /**
     * Returns the global editor state data for this tool.
     *
     * @returns {Object}
     */

  }, {
    key: "getGlobalToolState",
    value: function getGlobalToolState() {
      var globalState = this.context.globalState;

      return globalState.get(this.constructor.identifier);
    }

    /**
     * Sets the global editor state data for this tool.
     *
     * @returns {Object}
     */

  }, {
    key: "setGlobalToolState",
    value: function setGlobalToolState(state) {
      var globalState = this.context.globalState;

      globalState.set(_defineProperty({}, this.constructor.identifier, state));
    }

    /**
     * Checks if this control is available to the user
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {Boolean}
     * @override
     */

  }, {
    key: "isAvailable",
    value: function isAvailable(editor) {
      return false;
    }

    /**
     * Returns the assets that should be preloaded for this control
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {String[]}
     */

  }], [{
    key: "getPreloadAssets",
    value: function getPreloadAssets() {
      return [];
    }
  }]);

  return Control;
}();

/**
 * This control's top bar component. Used for the upper part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.TopBarControlsComponent}
 */


Control.topBarControlsComponent = null;

/**
 * This control's controls component. Used for the lower controls part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 */
Control.controlsComponent = null;

/**
 * This control's canvas component. Used for the upper controls part of the editor (on
 * top of the canvas)
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 */
Control.canvasControlsComponent = null;

/**
 * This control's identifier
 * @type {String}
 * @default
 */
Control.identifier = null;

/**
 * This control's icon path
 * @type {String}
 */
Control.iconPath = null;

/**
 * The language key that should be used when displaying this filter
 * @type {String}
 */
Control.languageKey = null;

/**
 * The default options for this control
 * @type {Object}
 */
Control.defaultOptions = {};

exports.default = Control;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */


var DraggableComponent = function (_BaseComponent) {
  _inherits(DraggableComponent, _BaseComponent);

  function DraggableComponent() {
    var _ref;

    _classCallCheck(this, DraggableComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = DraggableComponent.__proto__ || Object.getPrototypeOf(DraggableComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onDragStart', '_onDragMove', '_onDragEnd');
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the user stars dragging the child
   * @param {Event} e
   * @private
   */


  _createClass(DraggableComponent, [{
    key: '_onDragStart',
    value: function _onDragStart(e) {
      if (this.props.disabled) return;

      e.preventDefault();
      e.stopPropagation();

      this._initialMousePosition = _globals.Utils.getEventPosition(e);

      document.addEventListener('mousemove', this._onDragMove);
      document.addEventListener('touchmove', this._onDragMove);
      document.addEventListener('mouseup', this._onDragEnd);
      document.addEventListener('touchend', this._onDragEnd);

      var element = this.refs.element;

      var boundingRect = element.getBoundingClientRect();
      var elementOffset = new _globals.Vector2(boundingRect.left, boundingRect.top);

      var relativePosition = this._initialMousePosition.clone().subtract(elementOffset);
      this.props.onStart && this.props.onStart(relativePosition, e);
    }

    /**
     * Gets called while the user drags the child
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onDragMove',
    value: function _onDragMove(e) {
      e.preventDefault();
      e.stopPropagation();

      var mousePosition = _globals.Utils.getEventPosition(e);
      if (!mousePosition) return;
      var mouseDiff = mousePosition.clone().subtract(this._initialMousePosition);

      this.props.onDrag && this.props.onDrag(mouseDiff, e);
    }

    /**
     * Gets called when the user stops dragging the child
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onDragEnd',
    value: function _onDragEnd(e) {
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();

      this._onDragMove(e);

      document.removeEventListener('mousemove', this._onDragMove);
      document.removeEventListener('touchmove', this._onDragMove);
      document.removeEventListener('mouseup', this._onDragEnd);
      document.removeEventListener('touchend', this._onDragEnd);

      this.props.onStop && this.props.onStop(e);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {React.Element}
     */

  }, {
    key: 'render',
    value: function render() {
      if (!this.props.children || this.props.children instanceof Array) {
        throw new Error('DraggableComponent expects exactly one child.');
      }

      return _globals.React.cloneElement(this.props.children, {
        onMouseDown: this._onDragStart,
        onTouchStart: this._onDragStart,
        ref: 'element'
      });
    }
  }]);

  return DraggableComponent;
}(_globals.BaseComponent);

exports.default = DraggableComponent;


DraggableComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _sliderComponent = __webpack_require__(13);

var _sliderComponent2 = _interopRequireDefault(_sliderComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var SliderOverlayComponent = function (_BaseComponent) {
  _inherits(SliderOverlayComponent, _BaseComponent);

  function SliderOverlayComponent() {
    var _ref;

    _classCallCheck(this, SliderOverlayComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = SliderOverlayComponent.__proto__ || Object.getPrototypeOf(SliderOverlayComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onSliderValueChange');

    _this.state = { value: _this.props.value };
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component receives new props
   * @param  {Object} props
   */


  _createClass(SliderOverlayComponent, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.value !== this.state.value) {
        this.state.value = props.value;
      }
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the slider value has changed
     * @param  {Number} value
     * @private
     */

  }, {
    key: '_onSliderValueChange',
    value: function _onSliderValueChange(value) {
      this.props.onChange && this.props.onChange(value);
      this.setState({ value: value });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the SliderComponent
     * @return {SliderComponent}
     * @private
     */

  }, {
    key: '_renderSlider',
    value: function _renderSlider() {
      var props = _globals.SDKUtils.defaults(this.props, {
        style: '',
        middleDot: false,
        minValue: 1,
        maxValue: 100,
        label: 'Label',
        onChange: this._onSliderValueChange,
        value: this.state.value
      });
      return _globals.ReactBEM.createElement(_sliderComponent2.default, props);
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:controls e:overlay m:slider m:dark' },
        this._renderSlider()
      );
    }
  }]);

  return SliderOverlayComponent;
}(_globals.BaseComponent);

exports.default = SliderOverlayComponent;


SliderOverlayComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ }),
/* 8 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _headerComponent = __webpack_require__(89);

var _headerComponent2 = _interopRequireDefault(_headerComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ScreenComponent = function (_BaseComponent) {
  _inherits(ScreenComponent, _BaseComponent);

  function ScreenComponent() {
    _classCallCheck(this, ScreenComponent);

    return _possibleConstructorReturn(this, (ScreenComponent.__proto__ || Object.getPrototypeOf(ScreenComponent)).apply(this, arguments));
  }

  _createClass(ScreenComponent, [{
    key: '_renderHeader',

    /**
     * Renders the header (if enabled)
     * @return {ReactBEM.Element}
     * @private
     */
    value: function _renderHeader() {
      if (!this.context.options.showHeader) {
        return null;
      }
      return _globals.ReactBEM.createElement(_headerComponent2.default, null);
    }

    /**
     * Renders this screen
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderScreen',
    value: function _renderScreen() {
      return _globals.ReactBEM.createElement('div', null);
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var screenBEMSpecifier = 'b:screen';
      if (!this.context.options.showHeader) {
        screenBEMSpecifier += ' m:noHeader';
      }

      return _globals.ReactBEM.createElement(
        'div',
        { bem: screenBEMSpecifier, className: !this.props.visible ? 'is-hidden' : null },
        this._renderHeader(),
        this._renderScreen()
      );
    }
  }]);

  return ScreenComponent;
}(_globals.BaseComponent);

exports.default = ScreenComponent;


ScreenComponent.propTypes = {
  editor: _globals.PropTypes.any
};

ScreenComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var CanvasControlsComponent = function (_BaseComponent) {
  _inherits(CanvasControlsComponent, _BaseComponent);

  function CanvasControlsComponent() {
    var _ref;

    _classCallCheck(this, CanvasControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = CanvasControlsComponent.__proto__ || Object.getPrototypeOf(CanvasControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onCanvasZoomDone');
    return _this;
  }

  // -------------------------------------------------------------------------- HIT TEST

  /**
   * Checks if any other control reacts to a click at the given position
   * @param  {Vector2} clickPosition
   * @private
   */


  _createClass(CanvasControlsComponent, [{
    key: '_performHitTest',
    value: function _performHitTest(clickPosition) {
      var container = this.refs.container;

      var containerRect = container.getBoundingClientRect();
      var containerPosition = new _globals.Vector2(containerRect.left, containerRect.top);

      var positionOnCanvas = clickPosition.subtract(containerPosition);

      var editor = this.context.editor;

      var controls = editor.controls.getAvailable();

      // Check if any of the controls responds to a click
      // at the given position
      for (var identifier in controls) {
        var control = controls[identifier];
        var clickResponse = control.clickAtPosition && control.clickAtPosition(positionOnCanvas, editor);

        if (clickResponse) {
          // Don't re-select an already selected item
          if (clickResponse.selectedSprite === this.getSharedState('selectedSprite')) {
            return true;
          }

          // Responds to click, switch to the controls
          this.props.onSwitchControls(control, clickResponse);
          return true;
        }
      }

      return false;
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called after the canvas has been zoomed in or out
     * @private
     */

  }, {
    key: '_onCanvasZoomDone',
    value: function _onCanvasZoomDone() {
      this.forceUpdate();
    }

    /**
     * Binds the events in _events
     * @protected
     */

  }, {
    key: '_bindEvents',
    value: function _bindEvents() {
      _get(CanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(CanvasControlsComponent.prototype), '_bindEvents', this).call(this);
      this.context.mediator.on(_globals.Constants.EVENTS.ZOOM_DONE, this._onCanvasZoomDone);
    }

    /**
     * Unbinds the events in _events
     * @protected
     */

  }, {
    key: '_unbindEvents',
    value: function _unbindEvents() {
      _get(CanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(CanvasControlsComponent.prototype), '_unbindEvents', this).call(this);
      this.context.mediator.off(_globals.Constants.EVENTS.ZOOM_DONE, this._onCanvasZoomDone);
    }
  }]);

  return CanvasControlsComponent;
}(_globals.BaseComponent);

exports.default = CanvasControlsComponent;


CanvasControlsComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

var _constants = __webpack_require__(38);

var _constants2 = _interopRequireDefault(_constants);

var _jsonLoader = __webpack_require__(22);

var _jsonLoader2 = _interopRequireDefault(_jsonLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StickerManager = function () {
  function StickerManager(ui, options) {
    _classCallCheck(this, StickerManager);

    this._ui = ui;
    this._options = options;
    this._categoriesById = {};
    this._categories = [];
    this._stickersById = {};

    this._addCategories(_constants2.default.DEFAULTS.STICKER_CATEGORIES);

    var _options = this._options,
        categories = _options.categories,
        replaceCategories = _options.replaceCategories;

    if (this._options.categories) {
      this._addCategories(categories, replaceCategories);
    } else {
      this._updateCategoriesMap();
      this._updateAllCategory();
    }
  }

  /**
   * Loads stickers from the given external URL
   * @param  {String} url
   * @return {Promise}
   */


  _createClass(StickerManager, [{
    key: 'loadExternal',
    value: function loadExternal(url) {
      var _this = this;

      var loader = new _jsonLoader2.default(url);
      return loader.load().then(function (result) {
        _this._addCategories(result.categories, _this._options.replaceCategories);
      });
    }

    /**
     * Initializes the categories
     * @param {Object[]} categories
     * @param {Boolean} replace = false
     * @private
     */

  }, {
    key: '_addCategories',
    value: function _addCategories(categories) {
      var replace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (replace) {
        this._categories = categories.slice(0);
      } else {
        this._categories = _globals.Utils.mergeCategories(this._categories, categories, 'stickers');
      }

      this._updateCategoriesMap();
      this._updateAllCategory();
    }

    /**
     * Updates the categories map
     * @private
     */

  }, {
    key: '_updateCategoriesMap',
    value: function _updateCategoriesMap() {
      var _this2 = this;

      this._categoriesById = {};
      this._categories.forEach(function (c) {
        _this2._categoriesById[c.identifier] = c;
      });

      // Build sticker id => sticker hash
      this._categories.forEach(function (c) {
        c.stickers.forEach(function (s) {
          _this2._stickersById[s.identifier] = s;
        });
      });

      // Filter stickers
      if (typeof this._options.availableStickers !== 'undefined' && this._options.availableStickers !== null) {
        this._categories.forEach(function (category) {
          category.stickers = category.stickers.filter(function (sticker) {
            return _this2._options.availableStickers.indexOf(sticker.identifier) !== -1;
          });
        });

        this._categories = this._categories.filter(function (category) {
          return category.stickers.length > 0;
        });
      }

      this._updateAllCategory();
    }

    /**
     * Updates the `all` category which contains all stickers
     * @private
     */

  }, {
    key: '_updateAllCategory',
    value: function _updateAllCategory() {
      this._allCategory = {
        identifier: 'all',
        defaultName: 'All',
        stickers: this._categories.map(function (c) {
          return c.stickers;
        }).reduce(function (a, b) {
          return a.concat(b);
        }, [])
      };
      this._categoriesById.all = this._allCategory;
    }

    /**
     * Returns the stickers for the category with the given name
     * @param  {String} categoryName
     * @return {Object[]}
     */

  }, {
    key: 'getStickersForCategory',
    value: function getStickersForCategory(categoryName) {
      if (!this._categoriesById[categoryName]) {
        throw new Error('Unknown sticker category \'' + categoryName + '\'');
      }
      return this._categoriesById[categoryName].stickers;
    }

    /**
     * Returns the sticker with the given identifier
     * @param  {String} identifier
     */

  }, {
    key: 'getStickerByIdentifier',
    value: function getStickerByIdentifier(identifier) {
      return this._stickersById[identifier];
    }

    /**
     * Returns the categories
     * @param {Boolean} includeAllCategory = false
     * @return {Object[]}
     */

  }, {
    key: 'getCategories',
    value: function getCategories() {
      var includeAllCategory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (includeAllCategory) {
        return [this._allCategory].concat(this._categories);
      }

      return this._categories;
    }

    /**
     * Returns the category object for the given id
     * @param  {String} id
     * @return {Object}
     */

  }, {
    key: 'getCategory',
    value: function getCategory(id) {
      return this._categoriesById[id];
    }

    /**
     * Returns the URL for the given sticker. If the user is using Internet Explorer, we
     * fall back to the svg variant (if present)
     * @param  {Object} sticker
     * @param  {String} size
     * @return {String}
     */

  }], [{
    key: 'getURLForSticker',
    value: function getURLForSticker(sticker) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'base';
      var images = sticker.images;

      var media = size === 'base' ? images.mediaBase || images.mediaThumb : images.mediaThumb;
      var uris = media.uris || [media.uri];
      if (typeof _globals.Utils.Browser !== 'undefined' && !_globals.Utils.Browser.getIEVersion()) {
        var svgs = uris.filter(function (f) {
          return (/\.svg$/i.test(f)
          );
        });
        return svgs.length ? svgs[0] : uris[0];
      } else {
        var notSvgs = uris.filter(function (f) {
          return !/\.svg$/i.test(f);
        });
        return notSvgs.length ? notSvgs[0] : uris[0];
      }
    }
  }]);

  return StickerManager;
}();

exports.default = StickerManager;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var TopBarComponent = function (_BaseComponent) {
  _inherits(TopBarComponent, _BaseComponent);

  function TopBarComponent() {
    _classCallCheck(this, TopBarComponent);

    return _possibleConstructorReturn(this, (TopBarComponent.__proto__ || Object.getPrototypeOf(TopBarComponent)).apply(this, arguments));
  }

  _createClass(TopBarComponent, [{
    key: 'renderContent',

    /**
     * Renders the content of this TopBarComponent
     * @return {ReactBEM.Element}
     */
    value: function renderContent() {
      return this.props.children;
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:topBar e:row' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:cell' },
          this.renderContent()
        )
      );
    }
  }]);

  return TopBarComponent;
}(_globals.BaseComponent);

exports.default = TopBarComponent;


TopBarComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _draggableComponent = __webpack_require__(5);

var _draggableComponent2 = _interopRequireDefault(_draggableComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */


var SliderComponent = function (_BaseComponent) {
  _inherits(SliderComponent, _BaseComponent);

  function SliderComponent() {
    var _ref;

    _classCallCheck(this, SliderComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = SliderComponent.__proto__ || Object.getPrototypeOf(SliderComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onKnobDragStart', '_onKnobDrag', '_onKnobDragStop', '_onBarDragStart', '_onBarDrag', '_onBarDragStop', '_onMiddleDotClick');

    _this.state = {
      value: _this.props.value || 0,
      sliderPosition: 0,
      foregroundLeft: 0,
      foregroundWidth: 0
    };
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called after the component has been mounted
   */


  _createClass(SliderComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Trigger a re-render to position the knob
      this._setValue(this.state.value, false);
    }

    /**
     * Gets called when this component receives new props
     * @param  {Object} props
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.value !== this.state.value) {
        this._setValue(props.value, false);
      }
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user presses a mouse button on the middle dot
     * @private
     */

  }, {
    key: '_onMiddleDotClick',
    value: function _onMiddleDotClick() {
      this._previousValue = this.state.value;
      var newValue = this.props.minValue + (this.props.maxValue - this.props.minValue) / 2;
      this._setValue(newValue, true, true);
    }

    /**
     * Gets called when the user starts dragging the knob
     * @param  {Vector2} position
     * @private
     */

  }, {
    key: '_onKnobDragStart',
    value: function _onKnobDragStart(position) {
      this._previousValue = this.state.value;
      this._initialSliderPosition = this.state.sliderPosition;
      this._initialPosition = position;
    }

    /**
     * Gets called while the user drags the knob
     * @param  {Vector2} diff
     * @private
     */

  }, {
    key: '_onKnobDrag',
    value: function _onKnobDrag(diff) {
      var bar = this.refs.bar;

      var barWidth = bar.offsetWidth;

      var newSliderPosition = this._initialSliderPosition + diff.x;
      newSliderPosition = Math.max(0, Math.min(newSliderPosition, barWidth));
      var progress = newSliderPosition / barWidth;
      var newValue = this.props.minValue + (this.props.maxValue - this.props.minValue) * progress;

      this._setValue(newValue);
    }

    /**
     * Gets called when the user stops dragging the knob
     * @private
     */

  }, {
    key: '_onKnobDragStop',
    value: function _onKnobDragStop() {
      this._setValue(this.state.value, true, true);
    }

    /**
     * Gets called when the user starts dragging the bar
     * @param  {Vector2} position
     * @private
     */

  }, {
    key: '_onBarDragStart',
    value: function _onBarDragStart(position) {
      this._previousValue = this.state.value;
      this._initialPosition = position.clone();

      var bar = this.refs.bar;

      var barWidth = bar.offsetWidth;
      var progress = position.x / barWidth;
      var newValue = this.props.minValue + (this.props.maxValue - this.props.minValue) * progress;
      this._setValue(newValue);
    }

    /**
     * Gets called while the user drags the bar
     * @param  {Vector2} diff
     * @private
     */

  }, {
    key: '_onBarDrag',
    value: function _onBarDrag(diff) {
      var position = this._initialPosition.clone().add(diff);

      var bar = this.refs.bar;

      var barWidth = bar.offsetWidth;
      var progress = position.x / barWidth;
      var newValue = this.props.minValue + (this.props.maxValue - this.props.minValue) * progress;
      newValue = Math.max(this.props.minValue, Math.min(this.props.maxValue, newValue));
      this._setValue(newValue);
    }

    /**
     * Gets called when the user stops dragging the bar
     * @private
     */

  }, {
    key: '_onBarDragStop',
    value: function _onBarDragStop() {
      this._setValue(this.state.value, true, true);
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the style for the knob (position)
     * @return {Object}
     * @private
     */

  }, {
    key: '_getKnobStyle',
    value: function _getKnobStyle() {
      return { left: this.state.sliderPosition };
    }

    /**
     * Returns the style for the foreground bar
     * @return {Object}
     * @private
     */

  }, {
    key: '_getForegroundStyle',
    value: function _getForegroundStyle() {
      return {
        left: this.state.foregroundLeft,
        width: this.state.foregroundWidth
      };
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Decides whether or not this slider should have a middle dot on the bar
     * @private
     */

  }, {
    key: '_displayMiddleDot',
    value: function _displayMiddleDot() {
      return this.props.middleDot !== false;
    }

    /**
     * Sets the value to the given value, updates the slider position
     * @param {Number} value
     * @param {Boolean} emitChange = true
     * @param {Boolean} emitRelease = false
     * @private
     */

  }, {
    key: '_setValue',
    value: function _setValue(value) {
      var emitChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var emitRelease = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      value = Math.round(value);
      var _props = this.props,
          minValue = _props.minValue,
          maxValue = _props.maxValue;

      var progress = (value - minValue) / (maxValue - minValue);

      // Calculate slider position
      var bar = this.refs.bar;

      var barWidth = bar.offsetWidth;
      var sliderPosition = barWidth * progress;

      // Calculate foreground position and width
      var foregroundWidth = progress * barWidth;
      var foregroundLeft = 0;
      if (this._displayMiddleDot()) {
        foregroundWidth = Math.abs(progress - 0.5) * barWidth;
        foregroundLeft = progress < 0.5 ? barWidth * 0.5 - foregroundWidth : '50%';
      }

      this.setState({ value: value, sliderPosition: sliderPosition, foregroundWidth: foregroundWidth, foregroundLeft: foregroundLeft });

      if (emitChange) {
        this.props.onChange && this.props.onChange(value, this._previousValue, emitRelease);
      }
    }

    /**
     * Builds a display value from the given props
     * @param {Number} value
     * @return {String}
     * @private
     */

  }, {
    key: '_buildValue',
    value: function _buildValue(value) {
      // Limit decimals to two digits, if present
      if (value % 1 !== 0) {
        value = value.toFixed(2);
      }

      // Add positive value prefix (+) if value is > 0
      if (this.props.positiveValuePrefix && value >= 0) {
        value = '' + this.props.positiveValuePrefix + value;
      }

      // Add unit if present
      if (this.props.valueUnit) {
        value += this.props.valueUnit;
      }

      return value;
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var middleDot = null;
      if (this._displayMiddleDot()) {
        middleDot = _globals.ReactBEM.createElement('div', { bem: 'e:middleDot', onClick: this._onMiddleDotClick });
      }

      var foregroundProps = {
        style: this._getForegroundStyle()
      };

      var componentBem = '$b:slider' + (this.props.style ? ' m:' + this.props.style : '');
      return _globals.ReactBEM.createElement(
        'div',
        { bem: componentBem },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:bar', ref: 'bar' },
          _globals.ReactBEM.createElement(
            _draggableComponent2.default,
            {
              onStart: this._onBarDragStart,
              onDrag: this._onBarDrag,
              onStop: this._onBarDragStop },
            _globals.ReactBEM.createElement(
              'div',
              null,
              _globals.ReactBEM.createElement('div', { bem: '$e:background' }),
              _globals.ReactBEM.createElement('div', _extends({ bem: '$e:foreground' }, foregroundProps)),
              _globals.ReactBEM.createElement(
                _draggableComponent2.default,
                {
                  onStart: this._onKnobDragStart,
                  onDrag: this._onKnobDrag,
                  onStop: this._onKnobDragStop },
                _globals.ReactBEM.createElement('div', { bem: 'e:knob b:knob m:slider', style: this._getKnobStyle() })
              )
            )
          ),
          middleDot
        ),
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:labels' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:label m:lowerBoundary' },
            this._buildValue(this.props.minValue)
          ),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:label m:value' },
            this.props.label,
            ' ',
            this._buildValue(this.state.value)
          ),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:label m:upperBoundary' },
            this._buildValue(this.props.maxValue)
          )
        )
      );
    }
  }]);

  return SliderComponent;
}(_globals.BaseComponent);

exports.default = SliderComponent;


SliderComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _textItemComponent = __webpack_require__(145);

var _textItemComponent2 = _interopRequireDefault(_textItemComponent);

var _stickerItemComponent = __webpack_require__(146);

var _stickerItemComponent2 = _interopRequireDefault(_stickerItemComponent);

var _brushItemComponent = __webpack_require__(147);

var _brushItemComponent2 = _interopRequireDefault(_brushItemComponent);

var _canvasControlsComponent = __webpack_require__(10);

var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _SDK$Operations$Sprit = _globals.SDK.Operations.SpriteOperation,
    StickerSprite = _SDK$Operations$Sprit.StickerSprite,
    TextSprite = _SDK$Operations$Sprit.TextSprite,
    BrushSprite = _SDK$Operations$Sprit.BrushSprite;

var SpritesCanvasControlsComponent = function (_CanvasControlsCompon) {
  _inherits(SpritesCanvasControlsComponent, _CanvasControlsCompon);

  function SpritesCanvasControlsComponent() {
    var _ref, _this$_events;

    _classCallCheck(this, SpritesCanvasControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = SpritesCanvasControlsComponent.__proto__ || Object.getPrototypeOf(SpritesCanvasControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onCanvasClick', '_onSpriteDragStart', '_onSpriteDragStop', '_onOperationUpdated', '_onOperationRemoved', '_onSpriteFlip', '_onSpriteTakeToFront', '_onSpriteRemove');

    _this._canvasClickDisabled = false;

    _this._events = (_this$_events = {}, _defineProperty(_this$_events, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated), _defineProperty(_this$_events, _globals.Constants.EVENTS.OPERATION_REMOVED, _this._onOperationRemoved), _this$_events);
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when an operation has been removed
   * @param  {Operation} operation
   * @private
   */


  _createClass(SpritesCanvasControlsComponent, [{
    key: '_onOperationRemoved',
    value: function _onOperationRemoved(operation) {
      var selectedSprite = this.getSharedState('selectedSprite');
      if (operation !== this.getSharedState('operation') || !selectedSprite) return;

      // Operation can be removed by the undo button. We need
      // to make sure we re-create the operation for the lifetime
      // of this control
      var editor = this.context.editor;

      var newOperation = editor.operations.getOrCreate('sprite', {
        sprites: [selectedSprite],
        enabled: false
      });
      this.setSharedState({
        operation: newOperation,
        operationExistedBefore: false,
        initialOptions: {}
      });
    }

    /**
     * Gets called when an operation has been updated
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationUpdated',
    value: function _onOperationUpdated(operation) {
      var selectedSprite = this.getSharedState('selectedSprite');
      if (operation !== this.getSharedState('operation') || !selectedSprite) return;

      // If the currently selected sprite is no longer existent,
      // re-add it
      var sprites = operation.getSprites();
      if (sprites.indexOf(selectedSprite) === -1) {
        sprites.push(selectedSprite);
      }

      this.forceUpdate();
    }

    /**
     * Gets called when the selected item is deselected
     * @private
     */

  }, {
    key: '_onItemBlur',
    value: function _onItemBlur() {}

    /**
     * Gets called when the user clicks somewhere on the canvas
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onCanvasClick',
    value: function _onCanvasClick(e) {
      if (this._canvasClickDisabled) return;

      var hitTest = this._performHitTest(_globals.Utils.getEventPosition(e));
      if (!hitTest) {
        if (this.getSharedState('selectedSprite')) {
          this._onItemBlur();
        }
        this.props.onSwitchControls('home');
      }
    }

    /**
     * Gets called when the user flips the selected sprite
     * @param  {String} direction
     * @private
     */

  }, {
    key: '_onSpriteFlip',
    value: function _onSpriteFlip(direction) {
      var selectedSprite = this.getSharedState('selectedSprite');
      switch (direction) {
        case 'h':
          selectedSprite.setFlipHorizontally(!selectedSprite.getFlipHorizontally());
          break;
        case 'v':
          selectedSprite.setFlipVertically(!selectedSprite.getFlipVertically());
          break;
      }
      var editor = this.context.editor;

      editor.render();
    }

    /**
     * Gets called when the user takes the selected sprite to front
     * @private
     */

  }, {
    key: '_onSpriteTakeToFront',
    value: function _onSpriteTakeToFront(direction) {
      var operation = this.getSharedState('operation');
      operation.takeSpriteToFront(this.getSharedState('selectedSprite'));
      this.forceSharedUpdate();
      var editor = this.context.editor;

      editor.render();
    }

    /**
     * Gets called when the user removes the selected sprite
     * @param  {String} direction
     * @private
     */

  }, {
    key: '_onSpriteRemove',
    value: function _onSpriteRemove() {
      var operation = this.getSharedState('operation');
      var selectedSprite = this.getSharedState('selectedSprite');
      operation.removeSprite(selectedSprite);
      selectedSprite.dispose();

      this.setSharedState({
        selectedSprite: null
      });
      var editor = this.context.editor;

      editor.render();
    }

    // -------------------------------------------------------------------------- DRAGGING

    /**
     * Gets called when a sprite has received a dragging event. Blocks the `_onCanvasClick`
     * handler until `_onSpriteDragStop`
     * @private
     */

  }, {
    key: '_onSpriteDragStart',
    value: function _onSpriteDragStart() {
      this._canvasClickDisabled = true;
    }

    /**
     * Since `_onCanvasClick` is triggered right after the drag end event for knobs is triggered,
     * we need to wait a short amount of time until we re-enabale the canvas click
     * @private
     */

  }, {
    key: '_onSpriteDragStop',
    value: function _onSpriteDragStop() {
      var _this2 = this;

      setTimeout(function () {
        _this2._canvasClickDisabled = false;
      }, 100);
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the container style
     * @return {Object}
     * @private
     */

  }, {
    key: '_getContainerStyle',
    value: function _getContainerStyle() {
      var editor = this.context.editor;

      var canvasDimensions = editor.getCanvasDimensions();
      var outputDimensions = editor.getOutputDimensions();

      var _canvasDimensions$clo = canvasDimensions.clone().divide(2).subtract(outputDimensions.clone().divide(2)),
          x = _canvasDimensions$clo.x,
          y = _canvasDimensions$clo.y;

      return {
        left: x,
        top: y,
        width: outputDimensions.x,
        height: outputDimensions.y
      };
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Returns the properties for the outer container
     * @return {Object}
     * @private
     */

  }, {
    key: '_getContainerProps',
    value: function _getContainerProps() {
      return {};
    }

    /**
     * Returns the properties for the canvas container
     * @return {Object}
     * @private
     */

  }, {
    key: '_getInnerContainerProps',
    value: function _getInnerContainerProps() {
      return {
        style: this._getContainerStyle(),
        onClick: this._onCanvasClick
      };
    }

    /**
     * Returns the props that are passed to the item component of the given sprite
     * @param  {Sprite} sprite
     * @return {Object}
     * @private
     */

  }, {
    key: '_getPropsForSprite',
    value: function _getPropsForSprite(sprite) {
      var props = { hideContent: true };
      return props;
    }

    /**
     * Returns the component-type for a given sprite
     * @param {Sprite} sprite
     * @return {ItemComponent}
     */

  }, {
    key: '_getComponentTypeForSprite',
    value: function _getComponentTypeForSprite(sprite) {
      if (sprite instanceof TextSprite) {
        return _textItemComponent2.default;
      } else if (sprite instanceof StickerSprite) {
        return _stickerItemComponent2.default;
      } else if (sprite instanceof BrushSprite) {
        return _brushItemComponent2.default;
      }
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the sprite items
     * @return {Array.<SpriteItemComponent>}
     * @private
     */

  }, {
    key: '_renderSpriteItems',
    value: function _renderSpriteItems() {
      var _this3 = this;

      var operation = this.getSharedState('operation');
      var sprites = operation.getSprites();
      var selectedSprite = this.getSharedState('selectedSprite');

      return sprites.map(function (sprite) {
        var isSelected = sprite === selectedSprite;
        var SpriteComponent = _this3._getComponentTypeForSprite(sprite);
        var spriteProps = _this3._getPropsForSprite(sprite);
        return _globals.ReactBEM.createElement(SpriteComponent, _extends({
          operation: operation,
          sharedState: _this3.props.sharedState,
          sprite: sprite,
          selected: isSelected,
          onDragStart: _this3._onSpriteDragStart,
          onDragStop: _this3._onSpriteDragStop,
          onRemove: _this3._onSpriteRemove.bind(_this3, sprite),
          options: _this3.props.options,
          ref: 'sprite-' + sprite.getId()
        }, spriteProps));
      });
    }

    /**
     * This renders controls on top of the sprites
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderOverlayControls',
    value: function _renderOverlayControls() {
      return null;
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        _extends({
          bem: '$b:canvasControls e:container m:full',
          ref: 'container'
        }, this._getContainerProps()),
        _globals.ReactBEM.createElement(
          'div',
          _extends({
            bem: 'b:canvasControls e:innerContainer',
            ref: 'innerContainer'
          }, this._getInnerContainerProps()),
          _globals.ReactBEM.createElement(
            'div',
            {
              bem: '$b:spritesCanvasControls',
              ref: 'container' },
            this._renderSpriteItems(),
            this._renderOverlayControls()
          )
        )
      );
    }
  }]);

  return SpritesCanvasControlsComponent;
}(_canvasControlsComponent2.default);

exports.default = SpritesCanvasControlsComponent;


SpritesCanvasControlsComponent.contextTypes = _canvasControlsComponent2.default.contextTypes;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

var _font = __webpack_require__(158);

var _font2 = _interopRequireDefault(_font);

var _log = __webpack_require__(20);

var _log2 = _interopRequireDefault(_log);

var _fontVariation = __webpack_require__(47);

var _fontVariation2 = _interopRequireDefault(_fontVariation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FontManager = function () {
  function FontManager(ui, options) {
    _classCallCheck(this, FontManager);

    this._ui = ui;
    this._options = options;
    this._fonts = [];
    this._variationsByIdentifier = {};
    this._fontsByFontFamily = {};

    this._initFonts();
  }

  /**
   * Initializes the fonts
   * @private
   */


  _createClass(FontManager, [{
    key: '_initFonts',
    value: function _initFonts() {
      var _this = this;

      var _options = this._options,
          additionalFonts = _options.fonts,
          replaceFonts = _options.replaceFonts,
          availableVariations = _options.availableVariations;

      // Replace or append fonts

      var fonts = _globals.Constants.DEFAULTS.FONTS;
      if (replaceFonts) {
        fonts = additionalFonts;
      } else {
        fonts = fonts.concat(additionalFonts || []);
      }

      // Turn fonts into actual Font objects with FontVariation objects
      var defaultVariation = void 0;
      fonts = fonts.map(function (font) {
        var fontFamily = font.fontFamily;

        var variations = font.variations;

        if (availableVariations) {
          variations = variations.filter(function (variation) {
            return availableVariations.indexOf(variation.identifier) !== -1;
          });
        }

        if (variations.length === 0) return null;

        var fontInstance = new _font2.default({
          fontFamily: fontFamily
        });
        variations = variations.map(function (variation) {
          var variationInstance = new _fontVariation2.default(variation);
          variationInstance.setFontFamily(fontFamily);
          variationInstance.setFont(fontInstance);
          if (variation.default && !defaultVariation) {
            defaultVariation = variationInstance;
          }

          if (variationInstance.getTextMetrics() == null) {
            _log2.default.warn('Missing font metrics for ' + variationInstance.getIdentifier() + '. The SDK will fall back to basic font rendering, which may lead to layout issues. Please provide font metrics for your custom fonts. See https://docs.photoeditorsdk.com/guides/html5/ for more details.');
          }

          _this._variationsByIdentifier[variationInstance.getIdentifier()] = variationInstance;
          return variationInstance;
        });
        fontInstance.setVariations(variations);
        _this._fontsByFontFamily[fontFamily] = fontInstance;
        return fontInstance;
      }).filter(function (f) {
        return f;
      });

      if (!defaultVariation) {
        defaultVariation = fonts[0].getVariations()[0];
      }

      this._defaultVariation = defaultVariation;
      this._fonts = fonts;
    }

    /**
     * Returns all available fonts
     * @return {PhotoEditorSDK.UI.DesktopUI.Font[]}
     */

  }, {
    key: 'getFonts',
    value: function getFonts() {
      return this._fonts;
    }

    /**
     * Returns the font for the given font family
     * @param  {String} fontFamily
     * @return {PhotoEditorSDK.UI.DesktopUI.Font}
     */

  }, {
    key: 'getFontByFontFamily',
    value: function getFontByFontFamily(fontFamily) {
      return this._fontsByFontFamily[fontFamily];
    }

    /**
     * Returns the font variation for the given identifier
     * @param  {String} identifier
     * @return {PhotoEditorSDK.UI.DesktopUI.FontVariation}
     */

  }, {
    key: 'getVariationByIdentifier',
    value: function getVariationByIdentifier(identifier) {
      return this._variationsByIdentifier[identifier];
    }
  }, {
    key: 'getVariationsByIdentifier',
    value: function getVariationsByIdentifier() {
      return _extends({}, this._variationsByIdentifier);
    }

    /**
     * Returns the default variation
     * @return {PhotoEditorSDK.UI.DesktopUI.FontVariation}
     */

  }, {
    key: 'getDefaultVariation',
    value: function getDefaultVariation() {
      return this._defaultVariation;
    }
  }]);

  return FontManager;
}();

exports.default = FontManager;

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_16__;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (({"ENV":"\"development\""}).NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _utils = __webpack_require__(69);

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultLevels = [{ name: 'trace', type: 'trace', background: '#EEEEEE', color: '#AAAAAA' }, { name: 'info', type: 'log', background: '#BDE5F8', color: '#00529B' }, { name: 'warn', type: 'warn', background: '#FEEFB3', color: '#9F6000' }, { name: 'error', type: 'error', background: '#FFBABA', color: '#D8000C' }, { name: 'log', type: 'log', background: '#EEEEEE', color: '#1f4f6b' }];

var hasConsoleGroups = function hasConsoleGroups() {
  return console && console.group && console.groupCollapsed && console.groupEnd;
};

var hasColorOutput = function hasColorOutput() {
  return (!process || process && process.browser) && typeof navigator !== 'undefined' && navigator.userAgent.match(/Gecko|WebKit/i) && !navigator.userAgent.match(/Trident/);
};

/* eslint-disable */
var getLogStyles = function getLogStyles(background, color) {
  return ['background: #2D7BFF; line-height: 20px; padding: 4px 0', 'background: #2B2B2B; color: white; line-height: 20px; padding: 4px 0', 'background: #2D7BFF; line-height: 20px; padding: 4px 0', 'background: ' + background + '; color: ' + color + '; line-height: 20px; padding: 4px 0; font-weight: bold', 'background: #2B2B2B; color: white; line-height: 20px; padding: 4px 0', 'background: #2D7BFF; line-height: 20px; padding: 4px 0'];
};
/* eslint-enable */

var Logger = function () {
  function Logger() {
    var _this = this;

    var maxLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'warn';
    var levels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultLevels;

    _classCallCheck(this, Logger);

    this._levels = [].concat(_toConsumableArray(levels));
    this._maxLevel = this.getLevelIndexByName(maxLevel);

    this._consoleFuncs = {
      trace: function trace() {
        if (hasConsoleGroups()) {
          var _console;

          (_console = console).groupCollapsed.apply(_console, arguments);
          console.trace();
          console.groupEnd();
        } else {
          var _console2;

          (_console2 = console).trace.apply(_console2, arguments);
        }
      }
    };

    this._levels.forEach(function (_ref) {
      var name = _ref.name;

      _this[name] = function (tag) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        _this._log.apply(_this, [name, tag].concat(args));
      };
    });
  }

  _createClass(Logger, [{
    key: 'getLevelIndexByName',
    value: function getLevelIndexByName(levelName) {
      return _utils2.default.Array.findIndex(this._levels, function (l) {
        return l.name === levelName;
      });
    }
  }, {
    key: 'getLevelObjectByName',
    value: function getLevelObjectByName(levelName) {
      return _utils2.default.Array.find(this._levels, function (l) {
        return l.name === levelName;
      });
    }

    /**
     * Checks if the given log level is currently enabled or not.
     *
     * @param {string} levelName
     */

  }, {
    key: 'canLog',
    value: function canLog(levelName) {
      var level = this.getLevelIndexByName(levelName);

      if (level < 0) {
        return false;
      }

      return level >= this._maxLevel;
    }

    /**
     * Sets the current log level.
     *
     * @param {string} levelName
     * @memberof Logger
     */

  }, {
    key: 'setLevel',
    value: function setLevel(levelName) {
      var level = this.getLevelIndexByName(levelName);

      if (level < 0) {
        return;
      }

      this._maxLevel = level;
    }

    /**
     * Create an entry in the console. The specific console method is determined
     * by the level `levelName`. If color is available, use colorized output. If
     * more than one argument is supplied in `args`, a console group is created.
     *
     * @param {Number} levelName
     * @param {String} tag
     * @param {Array<string>} args
     *
     */

  }, {
    key: '_log',
    value: function _log(levelName, tag) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      var level = this.getLevelObjectByName(levelName);

      if (!level || !this.canLog(levelName)) {
        return;
      }

      var name = level.name,
          type = level.type,
          background = level.background,
          color = level.color;


      var outputs = args.filter(function (arg) {
        return arg !== undefined;
      }).map(function (arg) {
        if (arg.toObject) {
          return JSON.parse(JSON.stringify(arg.toObject()));
        }

        return arg;
      });

      var consoleFunc = this._consoleFuncs[type] || console[type] ? function () {
        var _console3;

        return (_console3 = console)[type].apply(_console3, arguments);
      } : function () {
        var _console4;

        return (_console4 = console).log.apply(_console4, arguments);
      };
      var outputsLen = outputs.length;
      var styles = getLogStyles(background, color);

      if (!hasColorOutput()) {
        var _outputsLen = outputs.length;
        if (_outputsLen <= 0) {
          consoleFunc('PhotoEditorSDK | ' + tag + ' ');
          return;
        }

        if (_outputsLen === 1 && typeof outputs[0] === 'string') {
          consoleFunc('PhotoEditorSDK | ' + tag + ' | ' + outputs[0]);
          return;
        }

        consoleFunc.apply(undefined, ['PhotoEditorSDK | ' + tag + ' | '].concat(_toConsumableArray(outputs)));
        return;
      }

      if (outputsLen <= 0) {
        consoleFunc.apply(undefined, ['%c  %c PhotoEditorSDK %c  %c ' + tag + ' %c %c  '].concat(_toConsumableArray(styles)));
        return;
      }

      if (outputsLen === 1 && typeof outputs[0] === 'string') {
        consoleFunc.apply(undefined, ['%c  %c PhotoEditorSDK %c  %c ' + tag + ' %c  ' + outputs[0] + '  %c  '].concat(_toConsumableArray(styles)));
        return;
      }

      // If there is more than one argument, try to group the log
      if (hasConsoleGroups()) {
        var _console5;

        (_console5 = console).groupCollapsed.apply(_console5, ['%c  %c PhotoEditorSDK %c  %c ' + tag + ' %c'].concat(_toConsumableArray(_utils2.default.Array.init(styles))));
        consoleFunc.apply(undefined, _toConsumableArray(outputs));
        console.groupEnd();
      } else {
        consoleFunc.apply(undefined, ['%c  %c PhotoEditorSDK %c  %c ' + tag + ' %c'].concat(_toConsumableArray(_utils2.default.Array.init(styles)), _toConsumableArray(outputs)));
      }
    }

    /**
     * Logs an image into the browser's console. Does
     * nothing in a node environment.
     *
     * @param {Canvas|string} source
     * @param {string} tag
     */

  }, {
    key: 'image',
    value: function image() {
      var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var source = arguments[1];

      var image = new window.Image();

      var onload = function onload() {
        var width = image.width;
        var height = image.height;
        tag && console.log(tag);
        console.log('%c+', '\n        font-size: 1px;\n        padding: 0px ' + Math.floor(width / 2) + 'px;\n        line-height: ' + height + 'px;\n        background: url(' + image.src + ');\n        color: transparent;\n        background-repeat: no-repeat;\n        background-size: ' + width + 'px ' + height + 'px;');
      };

      image.onload = onload;

      if (source instanceof window.HTMLCanvasElement) {
        image.src = source.toDataURL();
      } else if (source instanceof window.Image) {
        image = source;
        onload();
      } else if (typeof source === 'string') {
        image.src = source;
      } else {
        this.log(tag, source);
      }
      return image;
    }

    /**
     * Logs a `PhotoEditorSDK.Engine.Texture` into the browser's console. Does
     * nothing in a node environment.
     *
     * @param {PhotoEditorSDK.Engine.Texture`} texture
     * @param {string} tag
     *
     */

  }, {
    key: 'texture',
    value: function texture() {
      var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var _texture = arguments[1];

      if (!_texture) {
        this.log(tag, 'texture: null or undefined');
        return;
      }

      var baseTexture = _texture.getBaseTexture();
      var renderers = baseTexture.getRenderers();

      var glRenderer = _utils2.default.Array.find(renderers, function (r) {
        return r && r.constructor.type === 'WebGL';
      });

      var _baseTexture$getFrame = baseTexture.getFrame(),
          width = _baseTexture$getFrame.width,
          height = _baseTexture$getFrame.height;

      if (glRenderer) {
        var gl = glRenderer.getContext();
        var glTexture = baseTexture.getGLTextureForRenderer(glRenderer);
        this.logGlTexture(gl, glTexture, width, height, tag);
      } else {
        Log.image(tag, baseTexture.getSource());
      }
    }

    /**
     * Logs a WebGLTexture into the browser's console. Does
     * nothing in a node environment.
     *
     * @param {WebGLRenderingContext} gl
     * @param {WebGLTexture} texture
     * @param {number} [width=150]
     * @param {number} [height=150]
     * @param {string} tag
     */

  }, {
    key: 'logGlTexture',
    value: function logGlTexture(gl, texture) {
      var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 150;
      var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 150;
      var tag = arguments[4];

      gl.bindTexture(gl.TEXTURE_2D, texture);
      var framebuffer = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);

      // Read the contents of the framebuffer
      var data = new Uint8Array(width * height * 4);
      gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);

      gl.deleteFramebuffer(framebuffer);

      var canvas = document.createElement('canvas');
      canvas.width = width;
      canvas.height = height;

      var context = canvas.getContext('2d');

      // Copy the pixels to a 2D canvas
      var imageData = context.createImageData(width, height);
      imageData.data.set(data);
      context.putImageData(imageData, 0, 0);

      return Log.image(tag, canvas);
    }
  }]);

  return Logger;
}();

exports.Logger = Logger;


var Log = new Logger('warn');

exports.default = Log;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)))

/***/ }),
/* 21 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global XMLHttpRequest */
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _promise = __webpack_require__(73);

var _promise2 = _interopRequireDefault(_promise);

var _url = __webpack_require__(76);

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TIMEOUT = 5000;

var root = typeof window !== 'undefined' ? window : global;

var JSONLoader = function () {
  function JSONLoader(url) {
    _classCallCheck(this, JSONLoader);

    this._url = url;
    this._parsedUrl = _url2.default.parse(this._url, true);
  }

  /**
   * Checks if this request is a JSONP request
   * @return {Boolean}
   */


  _createClass(JSONLoader, [{
    key: '_isJSONPRequest',
    value: function _isJSONPRequest() {
      var query = this._parsedUrl.query;

      for (var key in query) {
        var value = query[key];
        if (value === '?') {
          return true;
        }
      }
      return false;
    }

    /**
     * Loads the JSON(P) from the given URL
     * @return {Promise}
     */

  }, {
    key: 'load',
    value: function load() {
      if (this._isJSONPRequest()) {
        return this._loadJSONP();
      } else {
        return this._loadJSON();
      }
    }

    /**
     * Loads the URL as JSON
     * @return {Promise}
     */

  }, {
    key: '_loadJSON',
    value: function _loadJSON() {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var xhr = void 0;
        if (root.XDomainRequest) {
          xhr = new root.XDomainRequest();

          xhr.onload = function () {
            var json = JSON.parse(xhr.responseText);
            resolve(json);
          };
          xhr.onerror = function (e) {
            reject(e);
          };
          xhr.open('GET', _this._url, true);
          xhr.send();
        } else if (root.XMLHttpRequest) {
          xhr = new XMLHttpRequest();

          xhr.onreadystatechange = function (oEvent) {
            if (xhr.readyState === 4) {
              if (xhr.status === 200) {
                var json = JSON.parse(xhr.responseText);
                resolve(json);
              } else {
                reject(new Error('HTTP Status ' + xhr.status));
              }
            }
          };
          xhr.open('GET', _this._url, true);
          xhr.send();
        }
      });
    }

    /**
     * Loads the URL as JSONP
     * @return {Promise}
     */

  }, {
    key: '_loadJSONP',
    value: function _loadJSONP() {
      var _this2 = this;

      var failed = false;
      var succeeded = false;

      var fnName = 'pesdk' + Math.round(Math.random() * 99999999999999);
      return new _promise2.default(function (resolve, reject) {
        var node = _this2._createJSONPNode(fnName);
        root[fnName] = function (result) {
          _this2._removeJSONPNode(node);
          if (!failed) {
            succeeded = true;
            resolve(result);
          }
        };

        root.setTimeout(function () {
          if (!succeeded) {
            _this2._removeJSONPNode(node);
            failed = true;
            reject(new Error('Timeout of 5 seconds exceeded.'));
          }
        }, TIMEOUT);
      });
    }

    /**
     * Creates a JSONP <script> node inside the <head> element
     * @param  {String} fnName
     * @return {DOMElement}
     * @private
     */

  }, {
    key: '_createJSONPNode',
    value: function _createJSONPNode(fnName) {
      var JSONPUrl = this._buildJSONPUrl(fnName);
      var headNode = document.querySelector('head');
      var scriptNode = document.createElement('script');
      scriptNode.src = JSONPUrl;
      headNode.appendChild(scriptNode);
      return scriptNode;
    }

    /**
     * Removes the JSONP <script> node from the <head> element
     * @param  {DOMElement} node
     * @private
     */

  }, {
    key: '_removeJSONPNode',
    value: function _removeJSONPNode(node) {
      node.parentNode.removeChild(node);
    }

    /**
     * Builds a JSONP url for the given function name
     * @param  {String} fnName
     * @return {String}
     */

  }, {
    key: '_buildJSONPUrl',
    value: function _buildJSONPUrl(fnName) {
      // Find JSONP parameter
      var query = this._parsedUrl.query;

      var parameter = null;
      for (var param in query) {
        if (query[param] === '?') {
          parameter = param;
          break;
        }
      }

      delete this._parsedUrl.search;
      query[parameter] = fnName;

      return _url2.default.format(this._parsedUrl);
    }
  }]);

  return JSONLoader;
}();

exports.default = JSONLoader;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

/* eslint-disable brace-style */

exports.default = {
  load: function load(url) {
    var _this = this;

    var crossOrigin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { cors: true, value: 'anonymous' };

    var loadPromise = function loadPromise() {
      if (url.substr(0, 5) === 'data:' || "boolean" !== 'undefined') {
        return Promise.resolve([url, url]);
      }
    };

    return loadPromise().then(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          originalSrc = _ref2[0],
          src = _ref2[1];

      return _this._createAndLoadImage(originalSrc, src, crossOrigin);
    });
  },
  _createAndLoadImage: function _createAndLoadImage(originalSrc, src) {
    var crossOrigin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { cors: true, value: 'anonymous' };

    if (true) {
      return new Promise(function (resolve, reject) {
        var image = new window.Image();
        image.addEventListener('load', function () {
          resolve(image);
        });
        image.addEventListener('error', function () {
          reject(new Error('Failed to load image at ' + src));
        });

        if (crossOrigin.cors) {
          image.crossOrigin = crossOrigin.value;
        }

        image.src = src;
      });
    }
  },
  loadXHR: function loadXHR(url, mime) {
    return new Promise(function (resolve, reject) {
      var xhr = void 0;
      if (window.XDomainRequest) {
        xhr = new window.XDomainRequest();
        if (mime) xhr.overrideMimeType(mime);

        xhr.onload = function () {
          resolve(xhr);
        };
        xhr.onerror = function (e) {
          reject(e);
        };
      } else if (window.XMLHttpRequest) {
        xhr = new window.XMLHttpRequest();
        if (mime) xhr.overrideMimeType(mime);

        xhr.onreadystatechange = function (oEvent) {
          if (xhr.readyState === 4) {
            if (xhr.status === 200) {
              resolve(xhr);
            } else {
              reject(new Error('HTTP Status ' + xhr.status));
            }
          }
        };
      }

      xhr.open('GET', url, true);
      xhr.send();
    });
  }
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var RowComponent = function (_BaseComponent) {
  _inherits(RowComponent, _BaseComponent);

  function RowComponent() {
    var _ref;

    _classCallCheck(this, RowComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = RowComponent.__proto__ || Object.getPrototypeOf(RowComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onClick');
    return _this;
  }
  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the user clicks the button
   * @param  {Event} e
   * @private
   */


  _createClass(RowComponent, [{
    key: '_onClick',
    value: function _onClick(e) {
      this.props.onClick && this.props.onClick();
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this row's content
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderContent',
    value: function _renderContent() {
      return null;
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var rowBEM = '$e:row m:' + this._modifier;
      if (this.props.totalRows) {
        rowBEM += ' m:row-' + this.props.totalRows;
      }

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'b:splashScreen' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: rowBEM },
          this._renderContent()
        )
      );
    }
  }]);

  return RowComponent;
}(_globals.BaseComponent);

exports.default = RowComponent;


RowComponent.propTypes = {
  onClick: _globals.PropTypes.func
};

RowComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _fileLoader = __webpack_require__(93);

var _fileLoader2 = _interopRequireDefault(_fileLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var InvisibleUploadComponent = function (_BaseComponent) {
  _inherits(InvisibleUploadComponent, _BaseComponent);

  function InvisibleUploadComponent() {
    var _ref;

    _classCallCheck(this, InvisibleUploadComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = InvisibleUploadComponent.__proto__ || Object.getPrototypeOf(InvisibleUploadComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onNewFile');
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component has been mounted
   */


  _createClass(InvisibleUploadComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._fileLoader = new _fileLoader2.default(this.refs.fileInput);
      this._fileLoader.on('file', this._onNewFile);
    }

    /**
     * Gets called when this component is about to be unmounted
     */

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._fileLoader.off('file', this._onNewFile);
      this._fileLoader.dispose();
      this._fileLoader = null;
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the FileLoader emits a new file
     * @param  {File} file
     * @private
     */

  }, {
    key: '_onNewFile',
    value: function _onNewFile(file) {
      this.props.onNewFile && this.props.onNewFile(file);
    }

    // -------------------------------------------------------------------------- PUBLIC API

    /**
     * Public method for opening the file loader
     */

  }, {
    key: 'open',
    value: function open() {
      this._fileLoader.open();
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement('input', { type: 'file', accept: 'image/*', bem: 'b:hiddenFileInput', ref: 'fileInput' });
    }
  }]);

  return InvisibleUploadComponent;
}(_globals.BaseComponent);

exports.default = InvisibleUploadComponent;


InvisibleUploadComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var TopBarButtonComponent = function (_BaseComponent) {
  _inherits(TopBarButtonComponent, _BaseComponent);

  function TopBarButtonComponent() {
    _classCallCheck(this, TopBarButtonComponent);

    return _possibleConstructorReturn(this, (TopBarButtonComponent.__proto__ || Object.getPrototypeOf(TopBarButtonComponent)).apply(this, arguments));
  }

  _createClass(TopBarButtonComponent, [{
    key: 'renderWithBEM',

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */
    value: function renderWithBEM() {
      // Build BEM specifier
      var bem = '$e:button';
      if (this.props.style) {
        bem += ' m:' + this.props.style;
      }
      if (this.props.icon) {
        bem += ' m:withIcon';
      }

      // Build icon
      var icon = null;
      if (this.props.icon) {
        icon = _globals.ReactBEM.createElement('img', {
          bem: 'e:icon',
          src: this._getAssetPath(this.props.icon, true) });
      }

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:topBar' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: bem, onClick: this.props.onClick },
          icon,
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:label' },
            this.props.label || 'Button'
          )
        )
      );
    }
  }]);

  return TopBarButtonComponent;
}(_globals.BaseComponent);

exports.default = TopBarButtonComponent;


TopBarButtonComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FilterManager = function () {
  function FilterManager(ui, options) {
    _classCallCheck(this, FilterManager);

    this._ui = ui;
    this._options = options;
    this._categoriesById = {};
    this._filtersByIdentifier = {
      identity: _globals.SDK.Operations.FilterOperation.Filters.IdentityFilter
    };

    this._categories = _globals.SharedConstants.DEFAULTS.FILTERS.slice(0);

    this._initCategories();
  }

  _createClass(FilterManager, [{
    key: 'instantiateFilterWithIdentifier',
    value: function instantiateFilterWithIdentifier(identifier) {
      var _this = this;

      var Filter = this.getFilterByIdentifier(identifier);
      if (!Filter) {
        return Promise.reject(new Error('Unknown filter with identifier `' + identifier + '`!'));
      }

      if (!(Filter.prototype instanceof _globals.SDK.Operations.FilterOperation.Filter)) {
        var lutImage = Filter.lutImage,
            resolution = Filter.resolution,
            horizontalTileCount = Filter.horizontalTileCount,
            verticalTileCount = Filter.verticalTileCount;

        var preloadedImage = void 0;
        if (this._ui.getPreloader) {
          preloadedImage = this._ui.getPreloader().getAsset(lutImage);
        }
        var loadPromise = void 0;
        if (preloadedImage) {
          loadPromise = Promise.resolve(preloadedImage);
        } else {
          loadPromise = _globals.ImageLoader.load(this._ui.getAssetPath(lutImage));
        }

        return loadPromise.then(function (image) {
          return _globals.ImageLoader.load(_this._ui.getAssetPath(lutImage)).then(function (image) {
            return new _globals.SDK.Operations.FilterOperation.Filters.ThreeDLUTFilter({
              image: image, resolution: resolution, horizontalTileCount: horizontalTileCount, verticalTileCount: verticalTileCount
            });
          });
        });
      } else {
        return Promise.resolve(new Filter());
      }
    }

    /**
     * Initializes the categories
     * @private
     */

  }, {
    key: '_initCategories',
    value: function _initCategories() {
      var _this2 = this;

      // Should the categories passed in by the user replace the existing ones?
      if (this._options.categories) {
        if (this._options.replaceCategories) {
          this._categories = this._options.categories;
        } else {
          this._categories = _globals.Utils.mergeCategories(this._categories, this._options.categories, 'filters');
        }
      }

      // Remove filters that should not be selectable
      if (this._options.availableFilters) {
        var newCategories = [];
        this._categories.forEach(function (category) {
          var filters = category.filters.filter(function (f) {
            return _this2._options.availableFilters.indexOf(f.identifier) !== -1;
          });
          if (filters.length > 0) {
            newCategories.push({
              identifier: category.identifier,
              defaultName: category.defaultName,
              filters: filters
            });
          }
        });
        this._categories = newCategories;
      }

      var allCategory = {
        identifier: 'all',
        defaultName: 'All',
        filters: this._categories.length <= 0 ? [] : this._categories.map(function (c) {
          return c.filters;
        }).reduce(function (a, b) {
          return a.concat(b);
        })
      };
      this._categories.unshift(allCategory);
      this._categoriesById.all = allCategory;
      this._categories.forEach(function (c) {
        _this2._categoriesById[c.identifier] = c;
      });
      allCategory.filters.forEach(function (filter) {
        _this2._filtersByIdentifier[filter.identifier] = filter;
      });
    }

    /**
     * Returns the filters for the category with the given name
     * @param  {String} categoryIdentifier
     * @return {Object[]}
     */

  }, {
    key: 'getFiltersForCategory',
    value: function getFiltersForCategory(categoryIdentifier) {
      if (!this._categoriesById[categoryIdentifier]) {
        throw new Error('Unknown filter category \'' + categoryIdentifier + '\'');
      }
      return this._categoriesById[categoryIdentifier].filters;
    }

    /**
     * Returns the filter with the given identifier
     * @param  {String} identifier
     * @return {PhotoEditorSDK.Filter}
     */

  }, {
    key: 'getFilterByIdentifier',
    value: function getFilterByIdentifier(identifier) {
      return this._filtersByIdentifier[identifier];
    }

    /**
     * Returns the categories
     * @return {Object[]}
     */

  }, {
    key: 'getCategories',
    value: function getCategories() {
      return this._categories;
    }

    /**
     * Returns the category with the given identifier
     * @param  {String} identifier
     * @return {Object}
     */

  }, {
    key: 'getCategoryByIdentifier',
    value: function getCategoryByIdentifier(identifier) {
      return this._categoriesById[identifier];
    }
  }]);

  return FilterManager;
}();

exports.default = FilterManager;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ItemComponent = function (_BaseComponent) {
  _inherits(ItemComponent, _BaseComponent);

  function ItemComponent() {
    var _ref;

    _classCallCheck(this, ItemComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ItemComponent.__proto__ || Object.getPrototypeOf(ItemComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onItemDragStart', '_onItemDragStop', '_onItemDrag', '_onSpriteUpdate');
    return _this;
  }

  // -------------------------------------------------------------------------- CALCULATIONS

  /**
   * Returns the absolute position of the sprite
   * @return {Vector2}
   * @private
   */


  _createClass(ItemComponent, [{
    key: '_getAbsoluteSpritePosition',
    value: function _getAbsoluteSpritePosition() {
      var editor = this.context.editor;

      var outputDimensions = editor.getOutputDimensions();

      return this.props.sprite.getPosition().clone().multiply(outputDimensions);
    }

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called when this component has been mounted
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(ItemComponent.prototype.__proto__ || Object.getPrototypeOf(ItemComponent.prototype), 'componentDidMount', this).call(this);
      this.props.sprite.on('update', this._onSpriteUpdate);
    }

    /**
     * Gets called when this component is about to be unmounted
     */

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _get(ItemComponent.prototype.__proto__ || Object.getPrototypeOf(ItemComponent.prototype), 'componentWillUnmount', this).call(this);
      this.props.sprite.off('update', this._onSpriteUpdate);
    }

    /**
     * Gets called when this component will receive new props
     * @param  {Object} nextProps
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.props.sprite.off('update', this._onSpriteUpdate);
      nextProps.sprite.on('update', this._onSpriteUpdate);
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when this component's sprite has been updated
     * @private
     */

  }, {
    key: '_onSpriteUpdate',
    value: function _onSpriteUpdate() {
      this.forceUpdate();
    }

    /**
     * Gets called when the user starts dragging this item
     * @private
     */

  }, {
    key: '_onItemDragStart',
    value: function _onItemDragStart() {
      var sprite = this.props.sprite;

      this._initialPosition = sprite.getPosition();

      this.props.onDragStart && this.props.onDragStart();
    }

    /**
     * Gets called while the user drags this item
     * @param  {Vector2} offset
     * @private
     */

  }, {
    key: '_onItemDrag',
    value: function _onItemDrag(offset) {
      var sprite = this.props.sprite;
      var editor = this.context.editor;


      var outputDimensions = editor.getOutputDimensions();
      var newPosition = this._initialPosition.clone().add(offset.divide(outputDimensions));

      sprite.setPosition(newPosition);
      editor.render();
    }

    /**
     * Gets called when the user stops dragging this item
     * @private
     */

  }, {
    key: '_onItemDragStop',
    value: function _onItemDragStop() {
      this.props.onDragStop && this.props.onDragStop();
    }
  }]);

  return ItemComponent;
}(_globals.BaseComponent);

exports.default = ItemComponent;


ItemComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _overlayComponent = __webpack_require__(153);

var _overlayComponent2 = _interopRequireDefault(_overlayComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ColorPickerComponent = function (_BaseComponent) {
  _inherits(ColorPickerComponent, _BaseComponent);

  function ColorPickerComponent() {
    var _ref;

    _classCallCheck(this, ColorPickerComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ColorPickerComponent.__proto__ || Object.getPrototypeOf(ColorPickerComponent)).call.apply(_ref, [this].concat(args)));

    _this._value = _this.props.initialValue.clone();
    _this._bindAll('_onButtonClick', '_onValueChange', '_onColorPickerOpen', '_onColorPickerClose');

    _this._events = _defineProperty({}, _globals.Constants.EVENTS.COLORPICKER_OPEN, _this._onColorPickerOpen);

    _this.state = {
      overlayVisible: false
    };

    _this._transparentPatternCanvas = _globals.Utils.createTransparentPatternCanvas();
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component will receive new props
   * @param  {Object} nextProps
   */


  _createClass(ColorPickerComponent, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.initialValue !== this.props.initialValue) {
        this._value = nextProps.initialValue.clone();
        this._renderColor();
      }
    }

    /**
     * Gets called when this component has been mounted
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(ColorPickerComponent.prototype.__proto__ || Object.getPrototypeOf(ColorPickerComponent.prototype), 'componentDidMount', this).call(this);
      this._renderColor();
    }

    /**
     * Gets called after this component has been updated
     */

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._renderColor();
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when a colorpicker has been opened. If it is not the same
     * color picker as this, this one gets closed. This makes sure that there
     * is only one color picker open at a time
     * @param  {ColorPickerComponent} colorPicker
     * @private
     */

  }, {
    key: '_onColorPickerOpen',
    value: function _onColorPickerOpen(colorPicker) {
      if (colorPicker === this) return;
      this.setState({ overlayVisible: false });
    }

    /**
     * Gets called when the color picker overlay tries to close itself
     * @private
     */

  }, {
    key: '_onColorPickerClose',
    value: function _onColorPickerClose() {
      this.setState({ overlayVisible: false });
    }

    /**
     * Gets called when the color picker button has been clicked
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onButtonClick',
    value: function _onButtonClick(e) {
      e.preventDefault();
      e.stopPropagation();

      if (!this.state.overlayVisible) {
        this._emitEvent(_globals.Constants.EVENTS.COLORPICKER_OPEN, this);
      }

      this.setState({ overlayVisible: !this.state.overlayVisible });
    }

    /**
     * Gets called when the value changes
     * @param  {Color} value
     * @private
     */

  }, {
    key: '_onValueChange',
    value: function _onValueChange(value) {
      this._value = value;
      this._renderColor();
      this.forceUpdate();

      this.props.onChange && this.props.onChange(value);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the current color on the preview canvas
     * @private
     */

  }, {
    key: '_renderColor',
    value: function _renderColor() {
      var canvas = this.refs.canvas;
      var context = canvas.getContext('2d');

      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;

      var pattern = context.createPattern(this._transparentPatternCanvas, 'repeat');
      context.fillStyle = pattern;
      context.fillRect(0, 0, canvas.width, canvas.height);

      context.fillStyle = this._value.toRGBA();
      context.fillRect(0, 0, canvas.width, canvas.height);
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var Overlay = null;
      if (this.state.overlayVisible) {
        Overlay = _globals.ReactBEM.createElement(_overlayComponent2.default, {
          initialValue: this._value,
          onChange: this._onValueChange,
          onClose: this._onColorPickerClose,
          alpha: this.props.alpha });
      }

      var className = this.state.overlayVisible ? 'is-active' : null;

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:controls' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$b:colorPicker', className: className, onClick: this._onButtonClick },
          _globals.ReactBEM.createElement('canvas', { bem: 'e:preview', ref: 'canvas' }),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:label' },
            this.props.label || this._t('pesdk.common.text.color')
          ),
          Overlay
        )
      );
    }
  }]);

  return ColorPickerComponent;
}(_globals.BaseComponent);

exports.default = ColorPickerComponent;


ColorPickerComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */


var _googleFontLoader = __webpack_require__(177);

var _googleFontLoader2 = _interopRequireDefault(_googleFontLoader);

var _fileFontLoader = __webpack_require__(180);

var _fileFontLoader2 = _interopRequireDefault(_fileFontLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FontLoader = function () {
  function FontLoader(ui, fonts) {
    _classCallCheck(this, FontLoader);

    this._ui = ui;
    this._fonts = fonts;
    this._loadedFonts = [];
  }

  /**
   * Sets the fonts
   * @param {Font[]} fonts
   */


  _createClass(FontLoader, [{
    key: 'setFonts',
    value: function setFonts(fonts) {
      this._fonts = fonts;
    }

    /**
     * Checks if the font loader needs to load something
     * @return {Boolean}
     */

  }, {
    key: 'needsToLoad',
    value: function needsToLoad() {
      var _this = this;

      var _loop = function _loop(i) {
        var provider = void 0;
        _this._fonts[i].getVariations().forEach(function (variation) {
          provider = provider || variation.getProvider();
        });
        if (!provider) return 'continue';
        return {
          v: true
        };
      };

      for (var i = 0; i < this._fonts.length; i++) {
        var _ret = _loop(i);

        switch (_ret) {
          case 'continue':
            continue;

          default:
            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
        }
      }
    }

    /**
     * Checks if the given font has already been loaded
     * @param  {Font} font
     */

  }, {
    key: 'fontLoaded',
    value: function fontLoaded(font) {
      var identifier = font.getFontFamily();
      return this._loadedFonts.indexOf(identifier) !== -1;
    }

    /**
     * Sets the given font to loaded
     * @param {Font} font
     */

  }, {
    key: 'setFontLoaded',
    value: function setFontLoaded(font) {
      if (!this.fontLoaded(font)) {
        var identifier = font.getFontFamily();
        this._loadedFonts.push(identifier);
      }
    }

    /**
     * Loads the given fonts
     * @param  {Object[]} fonts
     */

  }, {
    key: 'load',
    value: function load() {
      var _this2 = this;

      var fonts = this._fonts;
      var loaders = {
        google: new _googleFontLoader2.default(this._ui),
        file: new _fileFontLoader2.default(this._ui)
      };

      var disposeLoaders = function disposeLoaders() {
        for (var identifier in loaders) {
          var loader = loaders[identifier];
          loader.dispose();
        }
      };

      fonts.filter(function (font) {
        return !_this2.fontLoaded(font);
      }).forEach(function (font) {
        font.getVariations().forEach(function (variation) {
          var provider = variation.getProvider();
          if (!provider) return;

          var loader = loaders[provider];
          loader.add(variation);
        });
      });

      var promises = [];
      for (var name in loaders) {
        promises.push(loaders[name].load());
      }
      return Promise.all(promises).then(function () {
        disposeLoaders();
        fonts.forEach(function (font) {
          _this2.setFontLoaded(font);
        });
      }).catch(function (e) {
        disposeLoaders();
        throw e;
      });
    }
  }]);

  return FontLoader;
}();

exports.default = FontLoader;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _serializer = __webpack_require__(53);

var _serializer2 = _interopRequireDefault(_serializer);

var _blendModes = __webpack_require__(55);

var _blendModes2 = _interopRequireDefault(_blendModes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var v200Serializer = function (_PreviousSerializer) {
  _inherits(v200Serializer, _PreviousSerializer);

  function v200Serializer() {
    _classCallCheck(this, v200Serializer);

    return _possibleConstructorReturn(this, (v200Serializer.__proto__ || Object.getPrototypeOf(v200Serializer)).apply(this, arguments));
  }

  _createClass(v200Serializer, [{
    key: '_serializeSticker',

    /**
     * Serializes the given sticker
     * @param  {PhotoEditorSDK.Operation} operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.StickerSprite} sprite
     * @return {Object}
     * @private
     */
    value: function _serializeSticker(operation, sprite) {
      var inputDimensions = operation.getInputDimensions(false);
      var response = _get(v200Serializer.prototype.__proto__ || Object.getPrototypeOf(v200Serializer.prototype), '_serializeSticker', this).call(this, operation, sprite);

      // New in 2.0.0: `tintColor`
      if (sprite.getTintMode() !== 'none') {
        response.options.tintColor = sprite.serializeOption('tintColor', true);
      }

      // Dimensions are relative, not absolute anymore
      response.options.dimensions = sprite.getDimensions().clone().divide(inputDimensions.min()).toObject();

      // `name` is now `identifier`
      response.options.identifier = response.options.name;
      delete response.options.name;

      return response;
    }

    /**
     * Serializes the given path
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.BrushSprite.Path} path
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializePath',
    value: function _serializePath(path) {
      var response = _get(v200Serializer.prototype.__proto__ || Object.getPrototypeOf(v200Serializer.prototype), '_serializePath', this).call(this, path);

      var brush = path.getBrush();
      if (brush.hasOption('hardness')) {
        response.hardness = brush.getOption('hardness');
      }

      return response;
    }

    /**
     * Serializes the given operation
     * @param  {PhotoEditorSDK.Operation} operation
     * @param  {PhotoEditorSDK.Operation[]} operations
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeOperation',
    value: function _serializeOperation(operation, operations) {
      if (operation.constructor.identifier === 'frame') {
        this._serializeFrameOperation(operation, operations);
        return null;
      }

      if (operation.constructor.identifier === 'overlay') {
        this._serializeOverlayOperation(operation, operations);
        return null;
      }

      return _get(v200Serializer.prototype.__proto__ || Object.getPrototypeOf(v200Serializer.prototype), '_serializeOperation', this).call(this, operation, operations);
    }

    /**
     * Serializes the frame operation
     * @param {PhotoEditorSDK.Operation.FrameOperation} operation
     * @param {PhotoEditorSDK.Operation[]} operations
     * @private
     */

  }, {
    key: '_serializeFrameOperation',
    value: function _serializeFrameOperation(operation, operations) {
      // Since serialization 2.0.0 stores frames as part of the SpriteOperation, we need
      // to check if a sprite operation is present and extend its `sprites` option
      var spriteOperations = operations.filter(function (o) {
        return o.type === 'sprite';
      });
      var spriteOperation = void 0;
      if (spriteOperations.length) {
        spriteOperation = spriteOperations.pop();
      } else {
        // No sprite operation exists, create a new one
        spriteOperation = {
          type: 'sprite',
          options: {
            sprites: []
          }
        };
        operations.push(spriteOperation);
      }

      spriteOperation.options.sprites.push({
        type: 'frame',
        options: this._getFrameOptions(operation)
      });
    }

    /**
     * Serializes the overlay operation
     * @param {PhotoEditorSDK.Operation.OverlayOperation} operation
     * @param {PhotoEditorSDK.Operation[]} operations
     * @private
     */

  }, {
    key: '_serializeOverlayOperation',
    value: function _serializeOverlayOperation(operation, operations) {
      if (!operation.getIdentifier()) return;

      // Since serialization 2.0.0 stores overlays as part of the SpriteOperation, we need
      // to check if a sprite operation is present and extend its `sprites` option
      var spriteOperations = operations.filter(function (o) {
        return o.type === 'sprite';
      });
      var spriteOperation = void 0;
      if (spriteOperations.length) {
        spriteOperation = spriteOperations.pop();
      } else {
        // No sprite operation exists, create a new one
        spriteOperation = {
          type: 'sprite',
          options: {
            sprites: []
          }
        };
        operations.push(spriteOperation);
      }

      spriteOperation.options.sprites.push({
        type: 'overlay',
        options: {
          identifier: operation.getIdentifier(),
          intensity: operation.getAlpha(),
          blendMode: _blendModes2.default[operation.getBlendMode()]
        }
      });
    }

    /**
     * Returns the options object for the given FrameOperation
     * @param  {PhotoEditorSDK.Operations.FrameOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_getFrameOptions',
    value: function _getFrameOptions(operation) {
      return {
        identifier: operation.getFrame().identifier
      };
    }
  }, {
    key: '_serializeOrientationOperation',
    value: function _serializeOrientationOperation(operation) {
      var response = _get(v200Serializer.prototype.__proto__ || Object.getPrototypeOf(v200Serializer.prototype), '_serializeOrientationOperation', this).call(this, operation);

      // For some unknown reason, we start this "first rotate, then flip" thing with 2.0.0
      if (response.options.rotation === 90 || response.options.rotation === 270) {
        response.options.flipHorizontally = !response.options.flipHorizontally;
        response.options.flipVertically = !response.options.flipVertically;
      }

      return response;
    }

    /**
     * Serializes the given transform operation
     * @param  {PhotoEditorSDK.Operation.TransformOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeTransformOperation',
    value: function _serializeTransformOperation(operation) {
      var operations = this._editor.operations;

      // Version 2.0 and up has different operation order: First transform, then orientation.

      if (operations.exists('orientation')) {
        // Updating the original operation will mess up the editor state
        operation = operation.clone();

        // Undo orientation that has been applied to the transforms
        var orientationOperation = operations.get('orientation');
        operation.rotate(-orientationOperation.getRotation());
        if (orientationOperation.getFlipVertically()) {
          operation.flip('vertical');
          operation.setRotation(operation.getRotation() * -1);
        }
        if (orientationOperation.getFlipHorizontally()) {
          operation.flip('horizontal');
          operation.setRotation(operation.getRotation() * -1);
        }
      }

      // Version 2.0 and up: Crop operation is now called transform operation
      var response = _get(v200Serializer.prototype.__proto__ || Object.getPrototypeOf(v200Serializer.prototype), '_serializeTransformOperation', this).call(this, operation);

      response.type = 'transform';
      return response;
    }

    /**
     * Serializes the given text sprite
     * @param  {PhotoEditorSDK.Operation} operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.TextSprite} sprite
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeText',
    value: function _serializeText(operation, sprite) {
      var response = _get(v200Serializer.prototype.__proto__ || Object.getPrototypeOf(v200Serializer.prototype), '_serializeText', this).call(this, operation, sprite);

      var inputDimensions = operation.getInputDimensions(false);
      response.options.fontIdentifier = sprite.getFontIdentifier();

      // For whatever reason, max width is relative to shortest side, while font size isn't
      response.options.maxWidth = response.options.maxWidth * inputDimensions.x / inputDimensions.min();
      delete response.options.fontFamily;

      return response;
    }

    /**
     * Serializes the given filter operation
     * @param  {PhotoEditorSDK.Operations.FilterOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeFilterOperation',
    value: function _serializeFilterOperation(operation) {
      var response = _get(v200Serializer.prototype.__proto__ || Object.getPrototypeOf(v200Serializer.prototype), '_serializeFilterOperation', this).call(this, operation);
      if (!response) return null;

      response.options.identifier = response.options.name;
      delete response.options.name;

      return response;
    }

    /**
     * Serializes the given radial focus operation
     * @param  {PhotoEditorSDK.Operations.RadialFocusOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeRadialFocusOperation',
    value: function _serializeRadialFocusOperation(operation) {
      var response = _get(v200Serializer.prototype.__proto__ || Object.getPrototypeOf(v200Serializer.prototype), '_serializeRadialFocusOperation', this).call(this, operation);

      var focusOptions = response.options.options;
      focusOptions.start = focusOptions.position;
      delete focusOptions.position;
      focusOptions.end = {
        x: focusOptions.start.x + focusOptions.radius,
        y: focusOptions.start.y
      };
      delete focusOptions.radius;

      return response;
    }
  }]);

  return v200Serializer;
}(_serializer2.default);

exports.default = v200Serializer;


v200Serializer.version = '2.0.0';

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _deserializer = __webpack_require__(54);

var _deserializer2 = _interopRequireDefault(_deserializer);

var _frameManager = __webpack_require__(48);

var _frameManager2 = _interopRequireDefault(_frameManager);

var _overlayManager = __webpack_require__(183);

var _overlayManager2 = _interopRequireDefault(_overlayManager);

var _stickerManager = __webpack_require__(11);

var _stickerManager2 = _interopRequireDefault(_stickerManager);

var _frame = __webpack_require__(49);

var _frame2 = _interopRequireDefault(_frame);

var _fontLoader = __webpack_require__(30);

var _fontLoader2 = _interopRequireDefault(_fontLoader);

var _imageLoader = __webpack_require__(23);

var _imageLoader2 = _interopRequireDefault(_imageLoader);

var _blendModes = __webpack_require__(55);

var _blendModes2 = _interopRequireDefault(_blendModes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var blendModeByName = _globals.SDKUtils.flipObject(_blendModes2.default);

var v200Deserializer = function (_PreviousDeserializer) {
  _inherits(v200Deserializer, _PreviousDeserializer);

  function v200Deserializer() {
    var _ref;

    _classCallCheck(this, v200Deserializer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = v200Deserializer.__proto__ || Object.getPrototypeOf(v200Deserializer)).call.apply(_ref, [this].concat(args)));

    _this._frameManager = new _frameManager2.default(_this._ui, _this._getOptions('frame'));

    var overlayOptions = _this._getOptions('overlay');
    if (overlayOptions) {
      _this._overlayManager = new _overlayManager2.default(_this._ui, overlayOptions);
    }
    return _this;
  }

  /**
   * Deserializes the given sprite
   * @param  {PhotoEditorSDK.Operations.SpriteOperation} spriteOperation
   * @param  {PhotoEditorSDK.Operations.SpriteOperation.Sprite} sprite
   * @return {Promise}
   * @private
   */


  _createClass(v200Deserializer, [{
    key: '_deserializeSprite',
    value: function _deserializeSprite(spriteOperation, sprite) {
      if (sprite.type === 'frame') {
        return this._deserializeFrame(spriteOperation, sprite);
      }
      if (sprite.type === 'overlay') {
        return this._deserializeOverlay(spriteOperation, sprite);
      }
      return _get(v200Deserializer.prototype.__proto__ || Object.getPrototypeOf(v200Deserializer.prototype), '_deserializeSprite', this).call(this, spriteOperation, sprite);
    }

    /**
     * Deserializes the given operation
     * @param  {PhotoEditorSDK.Operation} operation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeOperation',
    value: function _deserializeOperation(operation) {
      if (operation.type === 'transform') {
        return this._deserializeTransformOperation(operation);
      }
      return _get(v200Deserializer.prototype.__proto__ || Object.getPrototypeOf(v200Deserializer.prototype), '_deserializeOperation', this).call(this, operation);
    }
  }, {
    key: '_deserializeOrientationOperation',
    value: function _deserializeOrientationOperation(operationData) {
      if (operationData.options.rotation === 90 || operationData.options.rotation === 270) {
        operationData.options.flipHorizontally = !operationData.options.flipHorizontally;
        operationData.options.flipVertically = !operationData.options.flipVertically;
      }

      return _get(v200Deserializer.prototype.__proto__ || Object.getPrototypeOf(v200Deserializer.prototype), '_deserializeOrientationOperation', this).call(this, operationData);
    }

    /**
     * Deserializes the given transform operation
     * @param  {Object} operationData
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeTransformOperation',
    value: function _deserializeTransformOperation(operationData) {
      var _this2 = this;

      // Version 2.0 and up: Crop operation is now called transform operation
      return _get(v200Deserializer.prototype.__proto__ || Object.getPrototypeOf(v200Deserializer.prototype), '_deserializeCropOperation', this).call(this, operationData).then(function (operation) {
        if (!operation) return;

        var orientationData = _globals.SDKUtils.Array.find(_this2._data.operations, function (op) {
          return op.type === 'orientation';
        });
        if (orientationData) {
          var options = orientationData.options;
          var rotation = options.rotation,
              flipHorizontally = options.flipHorizontally,
              flipVertically = options.flipVertically;


          if (rotation === 90 || rotation === 270) {
            if (!flipHorizontally && flipVertically || flipHorizontally && !flipVertically) {
              flipHorizontally = !flipHorizontally;
              flipVertically = !flipVertically;
            }
          }

          operation.rotate(options.rotation);
          if (flipHorizontally) {
            operation.flip('horizontal');
            operation.setRotation(operation.getRotation() * -1);
          }
          if (flipVertically) {
            operation.flip('vertical');
            operation.setRotation(operation.getRotation() * -1);
          }
        }

        return operation;
      });
    }

    /**
     * Deserializes the given frame sprite
     * @param  {PhotoEditorSDK.Operations.SpriteOperation} spriteOperation
     * @param  {Object} frame
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeFrame',
    value: function _deserializeFrame(spriteOperation, frame) {
      var _this3 = this;

      var identifier = frame.options.identifier;


      var frameData = this._frameManager.getFrameByIdentifier(identifier);
      if (!frameData) {
        _globals.Log.warn('Deserializer', 'Unknown frame `' + identifier + '`. Skipping frame.');
        return Promise.resolve();
      }
      var frameInstance = new _frame2.default(this._ui, frameData);
      return frameInstance.load().then(function () {
        _this3._editor.operations.getOrCreate('frame', {
          frame: frameInstance.getFrame()
        });
      });
    }

    /**
     * Deserializes the given overlay sprite
     * @param  {PhotoEditorSDK.Operations.SpriteOperation} spriteOperation
     * @param  {Object} overlay
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeOverlay',
    value: function _deserializeOverlay(spriteOperation, overlay) {
      var _this4 = this;

      var _overlay$options = overlay.options,
          blendMode = _overlay$options.blendMode,
          intensity = _overlay$options.intensity,
          identifier = _overlay$options.identifier;


      var overlayData = this._overlayManager.getOverlayByIdentifier(identifier);
      if (!overlayData) {
        _globals.Log.warn('Deserializer', 'Unknown overlay `' + identifier + '`. Skipping overlay.');
        return Promise.resolve();
      }

      var overlayPath = this._editor.getUI().getAssetPath(overlayData.image);
      return _imageLoader2.default.load(overlayPath).then(function (image) {
        _this4._editor.operations.getOrCreate('overlay', {
          alpha: intensity,
          identifier: identifier,
          blendMode: parseInt(blendModeByName[blendMode || overlayData.blendMode], 10),
          image: image
        });
      });
    }

    /**
     * Creates a brush face with the given options
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.Sprites.BrushSprite.Path} path
     * @return {PhotoEditorSDK.Operations.SpriteOperation.Sprites.BrushSprite.Brush}
     */

  }, {
    key: '_createBrushForPath',
    value: function _createBrushForPath(path) {
      var brush = _get(v200Deserializer.prototype.__proto__ || Object.getPrototypeOf(v200Deserializer.prototype), '_createBrushForPath', this).call(this, path);
      if (typeof path.hardness !== 'undefined' && brush.hasOption('hardness')) {
        brush.setHardness(path.hardness);
      }
      return brush;
    }

    /**
     * Deserializes the given sticker for the given operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation} operation
     * @param  {Object} sprite
     * @return {PhotoEditorSDK.Operations.SpriteOperation.StickerSprite}
     * @private
     */

  }, {
    key: '_deserializeSticker',
    value: function _deserializeSticker(operation, sprite) {
      var _this5 = this;

      var SpriteOperation = _globals.SDK.Operations.SpriteOperation;
      var options = sprite.options;

      var sticker = this._stickerManager.getStickerByIdentifier(options.identifier);
      var url = _stickerManager2.default.getURLForSticker(sticker, 'base');
      if (!sticker) {
        _globals.Log.warn('Deserializer', 'Unknown sticker `' + options.identifier + '`. Skipping sprite.');
        return Promise.resolve();
      }
      var inputDimensions = operation.getInputDimensions(false);
      return new Promise(function (resolve, reject) {
        var image = new window.Image();
        image.addEventListener('load', function () {
          var adjustments = SpriteOperation.StickerSprite.prototype.availableOptions.adjustments.structure;
          var rotation = options.rotation,
              flipHorizontally = options.flipHorizontally,
              flipVertically = options.flipVertically;

          var stickerOptions = {
            identifier: options.identifier,
            image: image,
            position: _globals.Vector2.fromObject(options.position),
            dimensions: _globals.Vector2.fromObject(options.dimensions).multiply(inputDimensions.min()),
            rotation: rotation,
            flipHorizontally: flipHorizontally,
            flipVertically: flipVertically,
            adjustments: {}
          };

          if (typeof options.adjustments !== 'undefined') {
            ['brightness', 'contrast', 'saturation'].forEach(function (option) {
              if (typeof options.adjustments[option] !== 'undefined') {
                stickerOptions.adjustments[option] = options.adjustments[option] + adjustments[option].default;
              }
            });
          }

          if (typeof options.tintColor !== 'undefined' && typeof sticker.tintMode !== 'undefined') {
            stickerOptions.tintColor = _globals.Color.fromArray(options.tintColor);
            stickerOptions.tintMode = sticker.tintMode;
          }
          resolve(operation.createSticker(stickerOptions));
        });
        image.crossOrigin = _this5._editor.getCrossOrigin();
        image.src = _this5._editor.getUI().getAssetPath(url);
      });
    }

    /**
     * Deserializes the given filter operation
     * @param  {Object} operation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeFilterOperation',
    value: function _deserializeFilterOperation(operation) {
      var _this6 = this;

      var options = operation.options;


      if (!this._filterManager.getFilterByIdentifier(options.identifier)) {
        _globals.Log.warn('Deserializer', 'Unknown filter `' + options.identifier + '`');
        return Promise.resolve();
      }

      return this._filterManager.instantiateFilterWithIdentifier(options.identifier).then(function (filter) {
        var filterOperation = _this6._editor.operations.getOrCreate('filter');
        if (!filterOperation) return;
        filterOperation.set({
          identifier: options.identifier,
          filter: filter,
          intensity: options.intensity
        });
        return filterOperation;
      });
    }

    /**
     * Deserializes the given focus operation
     * @param  {Object} operation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeFocusOperation',
    value: function _deserializeFocusOperation(operation) {
      var _operation$options = operation.options,
          options = _operation$options.options,
          type = _operation$options.type;

      if (type !== 'radial') return _get(v200Deserializer.prototype.__proto__ || Object.getPrototypeOf(v200Deserializer.prototype), '_deserializeFocusOperation', this).call(this, operation);

      var start = options.start,
          end = options.end,
          gradientRadius = options.gradientRadius,
          blurRadius = options.blurRadius;

      var radius = _globals.Vector2.fromObject(end).subtract(_globals.Vector2.fromObject(start)).len();
      return Promise.resolve(this._editor.operations.getOrCreate('radial-focus', {
        position: _globals.Vector2.fromObject(start),
        radius: radius,
        gradientRadius: gradientRadius,
        blurRadius: blurRadius
      }));
    }

    /**
     * Deserializes the given text for the given operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation} operation
     * @param  {Object} text
     * @return {PhotoEditorSDK.Operations.SpriteOperation.TextSprite}
     * @private
     */

  }, {
    key: '_deserializeText',
    value: function _deserializeText(operation, text) {
      var options = text.options;
      var fontSize = options.fontSize,
          lineHeight = options.lineHeight,
          fontIdentifier = options.fontIdentifier,
          alignment = options.alignment,
          rotation = options.rotation,
          maxWidth = options.maxWidth,
          color = options.color,
          backgroundColor = options.backgroundColor;


      var fontLoader = new _fontLoader2.default(this._ui);
      var variation = this._fontManager.getVariationByIdentifier(fontIdentifier);
      if (!variation) {
        variation = this._fontManager.getDefaultFont();
      } else {
        fontLoader.setFonts([variation.getFont()]);
      }
      return fontLoader.load().then(function () {
        var inputDimensions = operation.getInputDimensions(false);

        // For whatever reason, max width is relative to shortest side, while font size isn't
        var fixedMaxWidth = maxWidth * inputDimensions.min() / inputDimensions.x;
        return operation.createText({
          fontSize: fontSize,
          lineHeight: lineHeight,
          fontFamily: variation.getFontFamily(),
          fontWeight: variation.getFontWeight(),
          fontIdentifier: variation.getIdentifier(),
          alignment: alignment,
          rotation: rotation,
          maxWidth: fixedMaxWidth,
          text: options.text,
          color: _globals.Color.fromArray(color),
          backgroundColor: _globals.Color.fromArray(backgroundColor),
          position: _globals.Vector2.fromObject(options.position)
        });
      });
    }
  }]);

  return v200Deserializer;
}(_deserializer2.default);

exports.default = v200Deserializer;


v200Deserializer.version = '2.0.0';

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (({"ENV":"\"development\""}).NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(63)(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(66)();
}


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyFunction = __webpack_require__(17);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (({"ENV":"\"development\""}).NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				classes.push(classNames.apply(null, arg));
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		window.classNames = classNames;
	}
}());


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var elementSeparator = '__';
var modifierSeparator = '--';
var blockPrefix = 'pesdk-react-';

/**
 * @class BEMObject
 * @ignore
 */

var BEMObject = function () {
  function BEMObject(parent, type, name) {
    _classCallCheck(this, BEMObject);

    this._parent = parent;
    this._type = type;
    this._name = name;
  }

  /**
   * Creates a BEMObject of type "element" that has this element as parent
   * @param  {String} name
   * @return {BEMObject}
   */


  _createClass(BEMObject, [{
    key: 'element',
    value: function element(name) {
      return new BEMObject(this, 'element', name);
    }

    /**
     * Creates a BEMObject of type "modifier" that has this element as parent
     * @param  {String} name
     * @return {BEMObject}
     */

  }, {
    key: 'modifier',
    value: function modifier(name) {
      return new BEMObject(this, 'modifier', name);
    }

    /**
     * Builds the class name for this BEMObject
     * @return {String}
     */

  }, {
    key: 'str',
    get: function get() {
      var response = this._parent ? this._parent.str : '';
      switch (this._type) {
        case 'block':
          response += '' + blockPrefix + this._name;
          break;
        case 'element':
          response += '' + elementSeparator + this._name;
          break;
        case 'modifier':
          response += '' + modifierSeparator + this._name;
          break;
      }
      return response;
    }
  }]);

  return BEMObject;
}();

exports.default = {
  /**
   * Creates a BEMObject of type "block" that has this element as parent
   * @param  {String} name
   * @return {BEMObject}
   * @ignore
   */
  block: function block(name) {
    return new BEMObject(null, 'block', name);
  }
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _react = __webpack_require__(16);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(35);

var _classnames2 = _interopRequireDefault(_classnames);

var _bem = __webpack_require__(36);

var _bem2 = _interopRequireDefault(_bem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function flatten(arr) {
  var result = [];
  for (var i = 0; i < arr.length; i++) {
    if (arr[i] instanceof Array) {
      result = result.concat(flatten(arr[i]));
    } else {
      result.push(arr[i]);
    }
  }
  return result;
}

var BEM_TYPES = {
  b: 'block',
  e: 'element',
  m: 'modifier'
};
var ReactBEM = {
  /**
   * Parses the given ReactBEM specifier and returns an array of
   * BEM information (type, name, pass)
   * @param  {string} specifier
   * @return {Array.<Object>}
   * @private
   */
  _parseBemSpecifier: function _parseBemSpecifier(specifier) {
    if (!specifier) return [];

    var parts = specifier.split(' ');
    var data = parts.map(function (part) {
      var match = part.match(/^(\$)?([bem]):(.*)$/i);
      if (!match) {
        throw new Error('Invalid BEM specifier: ' + part);
      }

      var pass = typeof match[1] !== 'undefined';
      var type = BEM_TYPES[match[2]];
      var name = match[3];
      return { type: type, name: name, pass: pass };
    });
    return data;
  },


  /**
   * Returns the BEM info for the given node
   * @param  {Object} node
   * @return {Object}
   * @private
   */
  _getBemInfoForNode: function _getBemInfoForNode(node) {
    var isBemNode = node.type === 'bem';
    var specifier = isBemNode ? node.props.specifier : node.props.bem;

    if (isBemNode && !specifier) {
      throw new Error('<bem> elements should always have a `specifier` property');
    }

    var data = this._parseBemSpecifier(specifier);

    // <bem> nodes pass all bem information to the children
    if (isBemNode) {
      data.forEach(function (obj) {
        obj.pass = true;
      });
    }

    return { data: data, isBemNode: isBemNode };
  },


  /**
   * Used in React.Component's `render` method
   *
   * @param  {String} type
   * @param  {Object} props
   * @param  {Array.<Object>} [...children]
   * @return {Object}
   */
  createElement: function createElement(type, props) {
    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    props = props || {};
    children = children.filter(function (child) {
      return child !== null && typeof child !== 'undefined';
    });
    return { type: type, props: props, children: children };
  },


  /**
   * Checks whether we can apply a bem class to the given node
   * @param  {?}  node
   * @return {Boolean}
   * @private
   */
  _isNodeBEMable: function _isNodeBEMable(node) {
    return node !== null && (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && !_react2.default.isValidElement(node);
  },


  /**
   * Sets the BEM class for the given node. Iterates through its
   * children and sets their BEM class as well
   * @param  {Object} node
   * @return {Object}
   * @private
   */
  _applyBEMClasses: function _applyBEMClasses(node) {
    var _this = this;

    if (!this._isNodeBEMable(node)) return node;

    var classNames = node.props.className ? [node.props.className] : [];

    // Prepare BEM objects
    var bemInfo = this._getBemInfoForNode(node);
    var ownBemObject = node.props.__bemObject;
    var childrenBemObject = node.props.__bemObject;
    bemInfo.data.forEach(function (obj) {
      if (obj.type === 'block') {
        ownBemObject = _bem2.default.block(obj.name);
        if (obj.pass) {
          childrenBemObject = _bem2.default.block(obj.name);
        }
        classNames.push(ownBemObject.str);
      } else if (obj.type === 'element') {
        if (!ownBemObject) {
          throw new Error('Tried to create an element, but no parent block has been found.');
        }

        ownBemObject = ownBemObject.element(obj.name);
        if (obj.pass) {
          childrenBemObject = childrenBemObject.element(obj.name);
        }
        classNames.push(ownBemObject.str);
      } else if (obj.type === 'modifier') {
        if (!ownBemObject) {
          throw new Error('Tried to create a modifier, but no parent block has been found.');
        }

        if (obj.pass) {
          childrenBemObject = childrenBemObject.modifier(obj.name);
        }
        classNames.push(ownBemObject.modifier(obj.name).str);
      }
    });

    // Apply classname (if necessary)
    var className = (0, _classnames2.default)(classNames);
    if (className) {
      node.props.className = className;
    }

    node.children = flatten(node.children);

    // Pass `childrenBemObject` to child nodes
    node.children.forEach(function (child) {
      if (!_this._isNodeBEMable(child)) return;
      child.props.__bemObject = childrenBemObject;
    });

    // Apply BEM objects to children
    node.children = node.children.map(function (child) {
      return _this._applyBEMClasses(child);
    });

    node.children = flatten(node.children);

    // Remove unnecessary props
    delete node.props.__bemObject;
    delete node.props.bem;

    if (bemInfo.isBemNode) {
      if (node.children instanceof Array && node.children.length === 1) {
        node = node.children[0];
      } else {
        node = node.children;
      }
    }

    return node;
  },


  /**
   * Transforms the given ReactBEM element and its children into
   * actual ReactJS elements
   * @param  {Object} node
   * @return {React.Element}
   */
  _transformToReact: function _transformToReact(node) {
    var _this2 = this;

    if (!this._isNodeBEMable(node)) return node;

    node.children = node.children.map(function (child) {
      return _this2._transformToReact(child);
    });

    return _react2.default.createElement.apply(_react2.default, [node.type, node.props].concat(_toConsumableArray(node.children)));
  },


  /**
   * Transforms the given ReactBEM object and its children
   * @param  {Object} root
   * @return {React.Element}
   */
  transform: function transform(root) {
    root = this._applyBEMClasses(root);

    // Root node should be a single node, not an array. Returning the array
    // here will cause React to throw an error saying that this is a no-go
    /* istanbul ignore next */
    if (root instanceof Array) {
      return root;
    }

    root = this._transformToReact(root);
    return root;
  }
};

exports.default = ReactBEM;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

exports.default = {
  DEFAULTS: {
    FILTERS: [
    // {
    //   identifier: 'imgly_filters_test',
    //   defaultName: 'Test',
    //   filters: [
    //     {
    //       identifier: 'imgly_lut_identity_5_5',
    //       defaultName: 'Identity 5x5',
    //       lutImage: 'filters/imgly_lut_identity_5_5_128.png'
    //     }
    //   ]
    // },
    {
      identifier: 'imgly_filters_analog',
      defaultName: 'Analog',
      filters: [{
        identifier: 'imgly_lut_cool',
        defaultName: 'Cool',
        lutImage: 'filters/imgly_lut_cool_5_5_128.png'
      }, {
        identifier: 'imgly_lut_blues',
        defaultName: 'Blues',
        lutImage: 'filters/imgly_lut_blues_5_5_128.png'
      }, {
        identifier: 'imgly_lut_blueshadows',
        defaultName: 'Blue Shadows',
        lutImage: 'filters/imgly_lut_blueshadows_5_5_128.png'
      }, {
        identifier: 'imgly_lut_k6',
        defaultName: 'K6',
        lutImage: 'filters/imgly_lut_k6_5_5_128.png'
      }, {
        identifier: 'imgly_lut_kdynamic',
        defaultName: 'KDynamic',
        lutImage: 'filters/imgly_lut_kdynamic_5_5_128.png'
      }, {
        identifier: 'imgly_lut_lucid',
        defaultName: 'Lucid',
        lutImage: 'filters/imgly_lut_lucid_5_5_128.png'
      }, {
        identifier: 'imgly_lut_pale',
        defaultName: 'Pale',
        lutImage: 'filters/imgly_lut_pale_5_5_128.png'
      }]
    }, {
      identifier: 'imgly_filters_bw',
      defaultName: 'Black & White',
      filters: [{
        identifier: 'imgly_lut_sin',
        defaultName: 'Sin',
        lutImage: 'filters/imgly_lut_sin_8_8_512.png',
        resolution: 512,
        horizontalTileCount: 8,
        verticalTileCount: 8
      }, {
        identifier: 'imgly_lut_ad1920',
        defaultName: '1920 A.D.',
        lutImage: 'filters/imgly_lut_ad1920_5_5_128.png'
      }, {
        identifier: 'imgly_lut_bw',
        defaultName: 'B & W',
        lutImage: 'filters/imgly_lut_bw_5_5_128.png'
      }, {
        identifier: 'imgly_lut_litho',
        defaultName: 'Litho',
        lutImage: 'filters/imgly_lut_litho_5_5_128.png'
      }, {
        identifier: 'imgly_lut_plate',
        defaultName: 'Plate',
        lutImage: 'filters/imgly_lut_plate_5_5_128.png'
      }, {
        identifier: 'imgly_lut_x400',
        defaultName: 'X400',
        lutImage: 'filters/imgly_lut_x400_5_5_128.png'
      }]
    }, {
      identifier: 'imgly_filters_retro',
      defaultName: 'Retro',
      filters: [{
        identifier: 'imgly_lut_celsius',
        defaultName: 'Celsius',
        lutImage: 'filters/imgly_lut_celsius_8_8_512.png',
        resolution: 512,
        horizontalTileCount: 8,
        verticalTileCount: 8
      }, {
        identifier: 'imgly_lut_k2',
        defaultName: 'K2',
        lutImage: 'filters/imgly_lut_k2_8_8_512.png',
        resolution: 512,
        horizontalTileCount: 8,
        verticalTileCount: 8
      }, {
        identifier: 'imgly_lut_sepiahigh',
        defaultName: 'Sepia High',
        lutImage: 'filters/imgly_lut_sepiahigh_5_5_128.png'
      }, {
        identifier: 'imgly_lut_ancient',
        defaultName: 'Ancient',
        lutImage: 'filters/imgly_lut_ancient_5_5_128.png'
      }, {
        identifier: 'imgly_lut_classic',
        defaultName: 'Classic',
        lutImage: 'filters/imgly_lut_classic_5_5_128.png'
      }, {
        identifier: 'imgly_lut_eighties',
        defaultName: 'Eighties',
        lutImage: 'filters/imgly_lut_eighties_5_5_128.png'
      }, {
        identifier: 'imgly_lut_elder',
        defaultName: 'Elder',
        lutImage: 'filters/imgly_lut_elder_5_5_128.png'
      }, {
        identifier: 'imgly_lut_glam',
        defaultName: 'Glam',
        lutImage: 'filters/imgly_lut_glam_5_5_128.png'
      }, {
        identifier: 'imgly_lut_gobblin',
        defaultName: 'Gobblin',
        lutImage: 'filters/imgly_lut_gobblin_5_5_128.png'
      }, {
        identifier: 'imgly_lut_orchid',
        defaultName: 'Orchid',
        lutImage: 'filters/imgly_lut_orchid_5_5_128.png'
      }, {
        identifier: 'imgly_lut_seventies',
        defaultName: 'Seventies',
        lutImage: 'filters/imgly_lut_seventies_5_5_128.png'
      }]
    }, {
      identifier: 'imgly_filters_special',
      defaultName: 'Special',
      filters: [{
        identifier: 'imgly_lut_fixie',
        defaultName: 'Fixie',
        lutImage: 'filters/imgly_lut_fixie_8_8_512.png',
        resolution: 512,
        horizontalTileCount: 8,
        verticalTileCount: 8
      }, {
        identifier: 'imgly_lut_colorful',
        defaultName: 'Colorful',
        lutImage: 'filters/imgly_lut_colorful_5_5_128.png'
      }, {
        identifier: 'imgly_lut_cottoncandy',
        defaultName: 'Cotton Candy',
        lutImage: 'filters/imgly_lut_cottoncandy_5_5_128.png'
      }, {
        identifier: 'imgly_lut_food',
        defaultName: 'Food',
        lutImage: 'filters/imgly_lut_food_5_5_128.png'
      }, {
        identifier: 'imgly_lut_highcontrast',
        defaultName: 'High Contrast',
        lutImage: 'filters/imgly_lut_highcontrast_5_5_128.png'
      }, {
        identifier: 'imgly_lut_k1',
        defaultName: 'K1',
        lutImage: 'filters/imgly_lut_k1_5_5_128.png'
      }, {
        identifier: 'imgly_lut_lomo100',
        defaultName: 'Lomo 100',
        lutImage: 'filters/imgly_lut_lomo100_5_5_128.png'
      }, {
        identifier: 'imgly_lut_neat',
        defaultName: 'Neat',
        lutImage: 'filters/imgly_lut_neat_5_5_128.png'
      }, {
        identifier: 'imgly_lut_nogreen',
        defaultName: 'No Green',
        lutImage: 'filters/imgly_lut_nogreen_5_5_128.png'
      }, {
        identifier: 'imgly_lut_pola669',
        defaultName: 'Pola 669',
        lutImage: 'filters/imgly_lut_pola669_5_5_128.png'
      }, {
        identifier: 'imgly_lut_polasx',
        defaultName: 'Pola SX',
        lutImage: 'filters/imgly_lut_polasx_5_5_128.png'
      }, {
        identifier: 'imgly_lut_pro400',
        defaultName: 'Pro 400',
        lutImage: 'filters/imgly_lut_pro400_5_5_128.png'
      }, {
        identifier: 'imgly_lut_twilight',
        defaultName: 'Twilight',
        lutImage: 'filters/imgly_lut_twilight_5_5_128.png'
      }, {
        identifier: 'imgly_lut_settled',
        defaultName: 'Settled',
        lutImage: 'filters/imgly_lut_settled_5_5_128.png'
      }, {
        identifier: 'imgly_lut_steel',
        defaultName: 'Steel',
        lutImage: 'filters/imgly_lut_steel_5_5_128.png'
      }]
    }, {
      identifier: 'imgly_filters_summer',
      defaultName: 'Summer',
      filters: [{
        identifier: 'imgly_lut_texas',
        defaultName: 'Texas',
        lutImage: 'filters/imgly_lut_texas_8_8_512.png',
        resolution: 512,
        horizontalTileCount: 8,
        verticalTileCount: 8
      }, {
        identifier: 'imgly_lut_mellow',
        defaultName: 'Mellow',
        lutImage: 'filters/imgly_lut_mellow_8_8_512.png',
        resolution: 512,
        horizontalTileCount: 8,
        verticalTileCount: 8
      }, {
        identifier: 'imgly_lut_chest',
        defaultName: 'Chest',
        lutImage: 'filters/imgly_lut_chest_8_8_512.png',
        resolution: 512,
        horizontalTileCount: 8,
        verticalTileCount: 8
      }, {
        identifier: 'imgly_lut_creamy',
        defaultName: 'Creamy',
        lutImage: 'filters/imgly_lut_creamy_5_5_128.png'
      }, {
        identifier: 'imgly_lut_evening',
        defaultName: 'Evening',
        lutImage: 'filters/imgly_lut_evening_5_5_128.png'
      }, {
        identifier: 'imgly_lut_fall',
        defaultName: 'Fall',
        lutImage: 'filters/imgly_lut_fall_5_5_128.png'
      }, {
        identifier: 'imgly_lut_front',
        defaultName: 'Front',
        lutImage: 'filters/imgly_lut_front_8_8_512.png',
        resolution: 512,
        horizontalTileCount: 8,
        verticalTileCount: 8
      }, {
        identifier: 'imgly_lut_highcarb',
        defaultName: 'High Carb',
        lutImage: 'filters/imgly_lut_highcarb_5_5_128.png'
      }, {
        identifier: 'imgly_lut_keen',
        defaultName: 'Keen',
        lutImage: 'filters/imgly_lut_keen_5_5_128.png'
      }, {
        identifier: 'imgly_lut_pitched',
        defaultName: 'Pitched',
        lutImage: 'filters/imgly_lut_pitched_5_5_128.png'
      }, {
        identifier: 'imgly_lut_soft',
        defaultName: 'Soft',
        lutImage: 'filters/imgly_lut_soft_5_5_128.png'
      }, {
        identifier: 'imgly_lut_summer',
        defaultName: 'Summer',
        lutImage: 'filters/imgly_lut_summer_5_5_128.png'
      }, {
        identifier: 'imgly_lut_sunset',
        defaultName: 'Sunset',
        lutImage: 'filters/imgly_lut_sunset_5_5_128.png'
      }, {
        identifier: 'imgly_lut_tender',
        defaultName: 'Tender',
        lutImage: 'filters/imgly_lut_tender_5_5_128.png'
      }]
    }, {
      identifier: 'imgly_filters_winter',
      defaultName: 'Winter',
      filters: [{
        identifier: 'imgly_lut_fridge',
        defaultName: 'Fridge',
        lutImage: 'filters/imgly_lut_fridge_8_8_512.png',
        resolution: 512,
        horizontalTileCount: 8,
        verticalTileCount: 8
      }, {
        identifier: 'imgly_lut_bleached',
        defaultName: 'Bleached',
        lutImage: 'filters/imgly_lut_bleached_5_5_128.png'
      }, {
        identifier: 'imgly_lut_bleachedblue',
        defaultName: 'Bleached Blue',
        lutImage: 'filters/imgly_lut_bleachedblue_5_5_128.png'
      }, {
        identifier: 'imgly_lut_breeze',
        defaultName: 'Breeze',
        lutImage: 'filters/imgly_lut_breeze_5_5_128.png'
      }, {
        identifier: 'imgly_lut_lenin',
        defaultName: 'Lenin',
        lutImage: 'filters/imgly_lut_lenin_5_5_128.png'
      }, {
        identifier: 'imgly_lut_quozi',
        defaultName: 'Quozi',
        lutImage: 'filters/imgly_lut_quozi_5_5_128.png'
      }, {
        identifier: 'imgly_lut_winter',
        defaultName: 'Winter',
        lutImage: 'filters/imgly_lut_winter_5_5_128.png'
      }]
    }],
    OVERLAYS: [{
      identifier: 'imgly_overlay_golden',
      defaultName: 'Golden',
      image: 'overlays/imgly_overlay_golden.jpg',
      thumbnail: 'overlays/imgly_overlay_golden_thumb.jpg',
      blendMode: 'lighten'
    }, {
      identifier: 'imgly_overlay_bokeh',
      defaultName: 'Bokeh',
      image: 'overlays/imgly_overlay_bokeh.jpg',
      thumbnail: 'overlays/imgly_overlay_bokeh_thumb.jpg',
      blendMode: 'lighten'
    }, {
      identifier: 'imgly_overlay_hearts',
      defaultName: 'Hearts',
      image: 'overlays/imgly_overlay_hearts.jpg',
      thumbnail: 'overlays/imgly_overlay_hearts_thumb.jpg',
      blendMode: 'screen'
    }, {
      identifier: 'imgly_overlay_lightleak1',
      defaultName: 'Light Leak',
      image: 'overlays/imgly_overlay_lightleak1.jpg',
      thumbnail: 'overlays/imgly_overlay_lightleak1_thumb.jpg',
      blendMode: 'screen'
    }, {
      identifier: 'imgly_overlay_lightleak2',
      defaultName: 'Light Leak 2',
      image: 'overlays/imgly_overlay_lightleak2.jpg',
      thumbnail: 'overlays/imgly_overlay_lightleak2_thumb.jpg',
      blendMode: 'lighten'
    }, {
      identifier: 'imgly_overlay_rain',
      defaultName: 'Rain',
      image: 'overlays/imgly_overlay_rain.jpg',
      thumbnail: 'overlays/imgly_overlay_rain_thumb.jpg',
      blendMode: 'overlay'
    }, {
      identifier: 'imgly_overlay_wood',
      defaultName: 'Wood',
      image: 'overlays/imgly_overlay_wood.jpg',
      thumbnail: 'overlays/imgly_overlay_wood_thumb.jpg',
      blendMode: 'multiply'
    }, {
      identifier: 'imgly_overlay_mosaic',
      defaultName: 'Mosaic',
      image: 'overlays/imgly_overlay_mosaic.jpg',
      thumbnail: 'overlays/imgly_overlay_mosaic_thumb.jpg',
      blendMode: 'multiply'
    }, {
      identifier: 'imgly_overlay_chop',
      defaultName: 'Chop',
      image: 'overlays/imgly_overlay_chop.jpg',
      thumbnail: 'overlays/imgly_overlay_chop_thumb.jpg',
      blendMode: 'multiply'
    }, {
      identifier: 'imgly_overlay_vintage',
      defaultName: 'Vintage',
      image: 'overlays/imgly_overlay_vintage.jpg',
      thumbnail: 'overlays/imgly_overlay_vintage_thumb.jpg',
      blendMode: 'darken'
    }, {
      identifier: 'imgly_overlay_metal',
      defaultName: 'Metal',
      image: 'overlays/imgly_overlay_metal.jpg',
      thumbnail: 'overlays/imgly_overlay_metal_thumb.jpg',
      blendMode: 'overlay'
    }, {
      identifier: 'imgly_overlay_paper',
      defaultName: 'Paper',
      image: 'overlays/imgly_overlay_paper.jpg',
      thumbnail: 'overlays/imgly_overlay_paper_thumb.jpg',
      blendMode: 'multiply'
    }, {
      identifier: 'imgly_overlay_painting',
      defaultName: 'Painting',
      image: 'overlays/imgly_overlay_painting.jpg',
      thumbnail: 'overlays/imgly_overlay_painting_thumb.jpg',
      blendMode: 'overlay'
    }, {
      identifier: 'imgly_overlay_grain',
      defaultName: 'Grain',
      image: 'overlays/imgly_overlay_grain.jpg',
      thumbnail: 'overlays/imgly_overlay_grain_thumb.jpg',
      blendMode: 'overlay'
    }, {
      identifier: 'imgly_overlay_clouds',
      defaultName: 'Clouds',
      image: 'overlays/imgly_overlay_clouds.jpg',
      thumbnail: 'overlays/imgly_overlay_clouds_thumb.jpg',
      blendMode: 'softLight'
    }, {
      identifier: 'imgly_overlay_wall1',
      defaultName: 'Wall',
      image: 'overlays/imgly_overlay_wall1.jpg',
      thumbnail: 'overlays/imgly_overlay_wall1_thumb.jpg',
      blendMode: 'lighten'
    }, {
      identifier: 'imgly_overlay_wall2',
      defaultName: 'Wall 2',
      image: 'overlays/imgly_overlay_wall2.jpg',
      thumbnail: 'overlays/imgly_overlay_wall2_thumb.jpg',
      blendMode: 'overlay'
    }],
    FRAME_CATEGORIES: [{
      identifier: 'imgly_frame_generic',
      defaultName: 'Generic',
      metaData: {
        backgroundImage: 'frames/generic.png' // Not used yet
      },
      frames: [{
        identifier: 'imgly_frame_dia',
        defaultName: 'Dia',
        layoutMode: 'horizontal-inside',
        thumbnail: 'frames/imgly_frame_dia/imgly_frame_dia_thumb.png',
        imageGroups: {
          top: {
            mid: {
              image: 'frames/imgly_frame_dia/imgly_frame_dia_top.png',
              mode: 'repeat'
            }
          },
          left: {
            start: 'frames/imgly_frame_dia/imgly_frame_dia_top_corner_left.png',
            mid: 'frames/imgly_frame_dia/imgly_frame_dia_left.png',
            end: 'frames/imgly_frame_dia/imgly_frame_dia_bottom_corner_left.png'
          },
          right: {
            start: 'frames/imgly_frame_dia/imgly_frame_dia_top_corner_right.png',
            mid: 'frames/imgly_frame_dia/imgly_frame_dia_right.png',
            end: 'frames/imgly_frame_dia/imgly_frame_dia_bottom_corner_right.png'
          },
          bottom: {
            mid: {
              image: 'frames/imgly_frame_dia/imgly_frame_dia_bottom.png',
              mode: 'repeat'
            }
          }
        }
      }, {
        identifier: 'imgly_frame_art_decor',
        defaultName: 'Art Decor',
        tintable: true,
        layoutMode: 'horizontal-inside',
        thumbnail: 'frames/imgly_frame_art_decor/imgly_frame_art_decor_thumb.png',
        imageGroups: {
          top: {
            start: 'frames/imgly_frame_art_decor/imgly_frame_art_decor_top_corner_left.png',
            mid: {
              image: 'frames/imgly_frame_art_decor/imgly_frame_art_decor_top.png',
              mode: 'stretch'
            },
            end: 'frames/imgly_frame_art_decor/imgly_frame_art_decor_top_corner_right.png'
          },
          left: {
            mid: {
              image: 'frames/imgly_frame_art_decor/imgly_frame_art_decor_left.png',
              mode: 'stretch'
            }
          },
          right: {
            mid: {
              image: 'frames/imgly_frame_art_decor/imgly_frame_art_decor_right.png',
              mode: 'stretch'
            }
          },
          bottom: {
            start: 'frames/imgly_frame_art_decor/imgly_frame_art_decor_bottom_corner_left.png',
            mid: {
              image: 'frames/imgly_frame_art_decor/imgly_frame_art_decor_bottom.png',
              mode: 'stretch'
            },
            end: 'frames/imgly_frame_art_decor/imgly_frame_art_decor_bottom_corner_right.png'
          }
        }
      }, {
        identifier: 'imgly_frame_black_passepartout',
        defaultName: 'Black Passepartout',
        layoutMode: 'horizontal-inside',
        thumbnail: 'frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_thumb.png',
        imageGroups: {
          top: {
            start: 'frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_top_corner_left.png',
            mid: {
              image: 'frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_top.png',
              mode: 'stretch'
            },
            end: 'frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_top_corner_right.png'
          },
          left: {
            mid: {
              image: 'frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_left.png',
              mode: 'stretch'
            }
          },
          right: {
            mid: {
              image: 'frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_right.png',
              mode: 'stretch'
            }
          },
          bottom: {
            start: 'frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_bottom_corner_left.png',
            mid: {
              image: 'frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_bottom.png',
              mode: 'stretch'
            },
            end: 'frames/imgly_frame_black_passepartout/imgly_frame_black_passepartout_bottom_corner_right.png'
          }
        }
      }, {
        identifier: 'imgly_frame_lowpoly_shadow',
        defaultName: 'Low Poly',
        layoutMode: 'horizontal-inside',
        thumbnail: 'frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_thumb.png',
        imageGroups: {
          top: {
            start: 'frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_top_corner_left.png',
            mid: {
              image: 'frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_top.png',
              mode: 'stretch'
            },
            end: 'frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_top_corner_right.png'
          },
          left: {
            mid: {
              image: 'frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_left.png',
              mode: 'stretch'
            }
          },
          right: {
            mid: {
              image: 'frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_right.png',
              mode: 'stretch'
            }
          },
          bottom: {
            start: 'frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_bottom_corner_left.png',
            mid: {
              image: 'frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_bottom.png',
              mode: 'stretch'
            },
            end: 'frames/imgly_frame_lowpoly_shadow/imgly_frame_lowpoly_shadow_bottom_corner_right.png'
          }
        }
      }, {
        identifier: 'imgly_frame_wood_passepartout',
        defaultName: 'Wood Passepartout',
        layoutMode: 'horizontal-inside',
        thumbnail: 'frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_thumb.png',
        imageGroups: {
          top: {
            start: 'frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_top_corner_left.png',
            mid: {
              image: 'frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_top.png',
              mode: 'stretch'
            },
            end: 'frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_top_corner_right.png'
          },
          left: {
            mid: {
              image: 'frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_left.png',
              mode: 'stretch'
            }
          },
          right: {
            mid: {
              image: 'frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_right.png',
              mode: 'stretch'
            }
          },
          bottom: {
            start: 'frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_bottom_corner_left.png',
            mid: {
              image: 'frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_bottom.png',
              mode: 'stretch'
            },
            end: 'frames/imgly_frame_wood_passepartout/imgly_frame_wood_passepartout_bottom_corner_right.png'
          }
        }
      }]
    }],
    STICKER_CATEGORIES: [{
      identifier: 'imgly_sticker_emoticons',
      defaultName: 'Emoticons',
      'metaData': {
        'backgroundImage': 'stickers/emoticons/background.png'
      },
      'stickers': [{
        identifier: 'imgly_sticker_emoticons_alien',
        defaultName: 'Alien',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_alien.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_alien.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_alien.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_alien.png'],
            width: 1000,
            height: 935
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_angel',
        defaultName: 'Angel',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_angel.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_angel.png'],
            width: 62,
            height: 64
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_angel.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_angel.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_angry',
        defaultName: 'Angry',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_angry.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_angry.png'],
            width: 62,
            height: 62
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_angry.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_angry.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_anxious',
        defaultName: 'Anxious',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_anxious.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_anxious.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_anxious.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_anxious.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_asleep',
        defaultName: 'Asleep',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_asleep.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_asleep.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_asleep.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_asleep.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_attention',
        defaultName: 'Attention',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_attention.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_attention.png'],
            width: 62,
            height: 60
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_attention.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_attention.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_baby_chicken',
        defaultName: 'Baby Chicken',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_baby_chicken.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_baby_chicken.png'],
            width: 61,
            height: 42
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_baby_chicken.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_baby_chicken.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_batman',
        defaultName: 'Batman',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_batman.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_batman.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_batman.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_batman.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_beer',
        defaultName: 'Beer',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_beer.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_beer.png'],
            width: 62,
            height: 59
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_beer.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_beer.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_blush',
        defaultName: 'Blush',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_blush.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_blush.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_blush.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_blush.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_boxer',
        defaultName: 'Boxer',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_boxer.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_boxer.png'],
            width: 62,
            height: 62
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_boxer.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_boxer.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_business',
        defaultName: 'Business',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_business.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_business.png'],
            width: 60,
            height: 63
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_business.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_business.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_chicken',
        defaultName: 'Chicken',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_chicken.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_chicken.png'],
            width: 63,
            height: 55
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_chicken.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_chicken.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_cool',
        defaultName: 'Cool',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_cool.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_cool.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_cool.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_cool.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_cry',
        defaultName: 'Cry',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_cry.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_cry.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_cry.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_cry.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_deceased',
        defaultName: 'Deceased',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_deceased.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_deceased.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_deceased.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_deceased.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_devil',
        defaultName: 'Devil',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_devil.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_devil.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_devil.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_devil.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_duckface',
        defaultName: 'Duckface',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_duckface.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_duckface.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_duckface.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_duckface.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_furious',
        defaultName: 'Furious',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_furious.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_furious.png'],
            width: 62,
            height: 61
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_furious.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_furious.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_grin',
        defaultName: 'Grin',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_grin.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_grin.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_grin.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_grin.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_guitar',
        defaultName: 'Guitar',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_guitar.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_guitar.png'],
            width: 64,
            height: 60
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_guitar.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_guitar.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_harry_potter',
        defaultName: 'Harry Potter',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_harry_potter.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_harry_potter.png'],
            width: 64,
            height: 62
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_harry_potter.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_harry_potter.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_hippie',
        defaultName: 'Hippie',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_hippie.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_hippie.png'],
            width: 62,
            height: 62
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_hippie.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_hippie.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_hitman',
        defaultName: 'Hitman',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_hitman.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_hitman.png'],
            width: 64,
            height: 60
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_hitman.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_hitman.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_humourous',
        defaultName: 'Humourous',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_humourous.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_humourous.png'],
            width: 64,
            height: 64
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_humourous.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_humourous.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_idea',
        defaultName: 'Idea',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_idea.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_idea.png'],
            width: 64,
            height: 62
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_idea.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_idea.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_impatient',
        defaultName: 'Impatient',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_impatient.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_impatient.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_impatient.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_impatient.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_kiss',
        defaultName: 'Kiss',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_kiss.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_kiss.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_kiss.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_kiss.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_kisses',
        defaultName: 'Kisses',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_kisses.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_kisses.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_kisses.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_kisses.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_laugh',
        defaultName: 'Laugh',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_laugh.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_laugh.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_laugh.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_laugh.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_loud_cry',
        defaultName: 'Loud Cry',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_loud_cry.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_loud_cry.png'],
            width: 64,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_loud_cry.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_loud_cry.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_loving',
        defaultName: 'Loving',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_loving.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_loving.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_loving.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_loving.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_masked',
        defaultName: 'Masked',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_masked.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_masked.png'],
            width: 62,
            height: 62
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_masked.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_masked.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_music',
        defaultName: 'Music',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_music.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_music.png'],
            width: 62,
            height: 54
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_music.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_music.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_nerd',
        defaultName: 'Nerd',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_nerd.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_nerd.png']
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_nerd.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_nerd.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_ninja',
        defaultName: 'Ninja',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_ninja.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_ninja.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_ninja.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_ninja.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_not_speaking_to_you',
        defaultName: 'Not Speaking To You',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_not_speaking_to_you.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_not_speaking_to_you.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_not_speaking_to_you.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_not_speaking_to_you.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_pig',
        defaultName: 'Pig',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_pig.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_pig.png'],
            width: 63,
            height: 41
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_pig.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_pig.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_pumpkin',
        defaultName: 'Pumpkin',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_pumpkin.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_pumpkin.png'],
            width: 62,
            height: 60
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_pumpkin.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_pumpkin.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_question',
        defaultName: 'Question',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_question.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_question.png'],
            width: 62,
            height: 62
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_question.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_question.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_rabbit',
        defaultName: 'Rabbit',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_rabbit.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_rabbit.png'],
            width: 65,
            height: 47
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_rabbit.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_rabbit.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_sad',
        defaultName: 'Sad',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_sad.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sad.png']
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_sad.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_sad.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_sick',
        defaultName: 'Sick',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_sick.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sick.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_sick.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_sick.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_skateboard',
        defaultName: 'Skateboard',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_skateboard.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_skateboard.png'],
            width: 62,
            height: 64
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_skateboard.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_skateboard.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_skull',
        defaultName: 'Skull',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_skull.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_skull.png'],
            width: 62,
            height: 62
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_skull.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_skull.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_sleepy',
        defaultName: 'Sleepy',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_sleepy.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sleepy.png'],
            width: 62,
            height: 60
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_sleepy.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_sleepy.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_smile',
        defaultName: 'Smile',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_smile.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_smile.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_smile.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_smile.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_smoking',
        defaultName: 'Smoking',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_smoking.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_smoking.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_smoking.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_smoking.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_sobbing',
        defaultName: 'Sobbing',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_sobbing.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sobbing.png'],
            width: 62,
            height: 59
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_sobbing.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_sobbing.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_star',
        defaultName: 'Star',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_star.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_star.png'],
            width: 64,
            height: 64
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_star.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_star.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_steaming_furious',
        defaultName: 'Steaming Furious',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_steaming_furious.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_steaming_furious.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_steaming_furious.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_steaming_furious.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_sunbathing',
        defaultName: 'Sunbathing',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_sunbathing.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_sunbathing.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_sunbathing.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_sunbathing.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_tired',
        defaultName: 'Tired',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_tired.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_tired.png'],
            width: 62,
            height: 60
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_tired.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_tired.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_tongue_out_wink',
        defaultName: 'Tongue Out Wink',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_tongue_out_wink.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_tongue_out_wink.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_tongue_out_wink.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_tongue_out_wink.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_wave',
        defaultName: 'Wave',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_wave.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wave.png'],
            width: 62,
            height: 60
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_wave.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_wave.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_wide_grin',
        defaultName: 'Wide Grin',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_wide_grin.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wide_grin.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_wide_grin.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_wide_grin.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_wink',
        defaultName: 'Wink',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_wink.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wink.png'],
            width: 62,
            height: 58
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_wink.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_wink.png']
          }
        }
      }, {
        identifier: 'imgly_sticker_emoticons_wrestler',
        defaultName: 'Wrestler',
        images: {
          mediaThumb: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_wrestler.svg', 'stickers/emoticons/stickers/thumbs/imgly_sticker_emoticons_wrestler.png'],
            width: 62,
            height: 60
          },
          mediaBase: {
            uris: ['stickers/emoticons/stickers/imgly_sticker_emoticons_wrestler.svg', 'stickers/emoticons/stickers/base/imgly_sticker_emoticons_wrestler.png']
          }
        }
      }]
    }, {
      identifier: 'imgly_sticker_shapes',
      defaultName: 'Shapes',
      'metaData': {
        'backgroundImage': 'stickers/shapes/background.png'
      },
      'stickers': [{
        identifier: 'imgly_sticker_shapes_arrow_02',
        defaultName: 'Arrow 1',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_arrow_02.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_arrow_02.png'],
            width: 2000,
            height: 1236
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_arrow_02.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_arrow_02.png'],
            width: 2000,
            height: 1236
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_arrow_03',
        defaultName: 'Arrow 2',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_arrow_03.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_arrow_03.png'],
            width: 2000,
            height: 2000
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_arrow_03.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_arrow_03.png'],
            width: 2000,
            height: 2000
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_01',
        defaultName: 'Badge 1',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_01.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_01.png'],
            width: 2000,
            height: 2000
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_01.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_01.png'],
            width: 2000,
            height: 2000
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_04',
        defaultName: 'Badge 2',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_04.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_04.png'],
            width: 2000,
            height: 1589
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_04.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_04.png'],
            width: 2000,
            height: 1589
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_06',
        defaultName: 'Badge 3',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_06.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_06.png'],
            width: 2000,
            height: 1733
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_06.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_06.png'],
            width: 2000,
            height: 1733
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_08',
        defaultName: 'Badge 4',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_08.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_08.png'],
            width: 2000,
            height: 2000
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_08.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_08.png'],
            width: 2000,
            height: 2000
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_11',
        defaultName: 'Badge 5',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_11.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_11.png'],
            width: 2000,
            height: 2000
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_11.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_11.png'],
            width: 2000,
            height: 2000
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_12',
        defaultName: 'Badge 6',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_12.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_12.png'],
            width: 2001,
            height: 1903
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_12.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_12.png'],
            width: 2001,
            height: 1903
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_13',
        defaultName: 'Badge 7',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_13.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_13.png'],
            width: 2000,
            height: 1718
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_13.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_13.png'],
            width: 2000,
            height: 1718
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_15',
        defaultName: 'Badge 8',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_15.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_15.png'],
            width: 1618,
            height: 2000
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_15.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_15.png'],
            width: 1618,
            height: 2000
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_18',
        defaultName: 'Badge 9',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_18.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_18.png'],
            width: 1198,
            height: 2000
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_18.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_18.png'],
            width: 1198,
            height: 2000
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_19',
        defaultName: 'Badge 10',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_19.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_19.png'],
            width: 2127,
            height: 481
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_19.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_19.png'],
            width: 2127,
            height: 481
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_20',
        defaultName: 'Badge 11',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_20.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_20.png'],
            width: 2000,
            height: 1404
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_20.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_20.png'],
            width: 2000,
            height: 1404
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_28',
        defaultName: 'Badge 12',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_28.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_28.png'],
            width: 2000,
            height: 2000
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_28.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_28.png'],
            width: 2000,
            height: 2000
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_32',
        defaultName: 'Badge 13',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_32.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_32.png'],
            width: 1960,
            height: 2000
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_32.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_32.png'],
            width: 1960,
            height: 2000
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_35',
        defaultName: 'Badge 14',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_35.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_35.png'],
            width: 2000,
            height: 2002
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_35.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_35.png'],
            width: 2000,
            height: 2002
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_badge_36',
        defaultName: 'Badge 15',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_36.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_badge_36.png'],
            width: 2000,
            height: 1668
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_badge_36.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_badge_36.png'],
            width: 2000,
            height: 1668
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_spray_01',
        defaultName: 'Spray 1',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_spray_01.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_spray_01.png'],
            width: 1912,
            height: 2039
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_spray_01.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_spray_01.png'],
            width: 1912,
            height: 2039
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_spray_03',
        defaultName: 'Spray 2',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_spray_03.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_spray_03.png'],
            width: 1681,
            height: 1779
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_spray_03.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_spray_03.png'],
            width: 1681,
            height: 1779
          }
        }
      }, {
        identifier: 'imgly_sticker_shapes_spray_04',
        defaultName: 'Spray 3',
        tintMode: 'solid',
        images: {
          mediaThumb: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_spray_04.svg', 'stickers/shapes/stickers/thumbs/imgly_sticker_shapes_spray_04.png'],
            width: 1407,
            height: 2248
          },
          mediaBase: {
            uris: ['stickers/shapes/stickers/imgly_sticker_shapes_spray_04.svg', 'stickers/shapes/stickers/base/imgly_sticker_shapes_spray_04.png'],
            width: 1407,
            height: 2248
          }
        }
      }]
    }]
  }
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.7.1
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var SearchSuggestionComponent = function (_BaseComponent) {
  _inherits(SearchSuggestionComponent, _BaseComponent);

  function SearchSuggestionComponent() {
    var _ref;

    _classCallCheck(this, SearchSuggestionComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = SearchSuggestionComponent.__proto__ || Object.getPrototypeOf(SearchSuggestionComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onClick');
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the user clicks the search suggestion
   * @private
   */


  _createClass(SearchSuggestionComponent, [{
    key: '_onClick',
    value: function _onClick() {
      this.props.onClick && this.props.onClick(this.props.searchSuggestion);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var searchSuggestion = this.props.searchSuggestion;

      var style = {
        backgroundImage: 'url(' + searchSuggestion.coverImage + ')'
      };

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'b:photoRoll e:libraryList' },
        _globals.ReactBEM.createElement(
          'li',
          { bem: 'e:item', style: style, onClick: this._onClick },
          _globals.ReactBEM.createElement('div', { bem: 'e:overlay' }),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:name' },
            searchSuggestion.query
          )
        )
      );
    }
  }]);

  return SearchSuggestionComponent;
}(_globals.BaseComponent);

exports.default = SearchSuggestionComponent;


SearchSuggestionComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

var _photoComponent = __webpack_require__(104);

var _photoComponent2 = _interopRequireDefault(_photoComponent);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */


var COLUMN_WIDTH = 240;

var PhotoListComponent = function (_BaseComponent) {
  _inherits(PhotoListComponent, _BaseComponent);

  function PhotoListComponent() {
    var _ref;

    _classCallCheck(this, PhotoListComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = PhotoListComponent.__proto__ || Object.getPrototypeOf(PhotoListComponent)).call.apply(_ref, [this].concat(args)));

    _this._needsStyleFixes = true;
    _this._totalPhotosHeight = 0;
    _this.state = {
      loading: false,
      photos: []
    };
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component has been mounted
   */


  _createClass(PhotoListComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(PhotoListComponent.prototype.__proto__ || Object.getPrototypeOf(PhotoListComponent.prototype), 'componentDidMount', this).call(this);
      this._loadPhotos();
    }

    /**
     * Gets called when this component has been updated
     */

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.refs.scrollbar) {
        this.refs.scrollbar.update();
      }
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user clicks on a photo
     * @param  {PhotoEditorSDK.UI.ReactUI.PhotoRoll.Photo} photo
     * @private
     */

  }, {
    key: '_onPhotoClicked',
    value: function _onPhotoClicked(photo) {
      this.props.onPhotoClicked && this.props.onPhotoClicked(photo);
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Returns the headline for this view
     * @return {String}
     * @private
     */

  }, {
    key: '_getHeadline',
    value: function _getHeadline() {
      return this.props.library.name;
    }

    /**
     * A method that is called whenever styles need to be fixed by the JavaScript.
     * This needs to be done thanks to older Internet Explorer browsers which have
     * a bunch of CSS bugs.
     */

  }, {
    key: 'fixStyles',
    value: function fixStyles() {
      if (_globals.Utils.Browser.isIElte(11)) {
        var cell = this.refs.cell;

        var list = this.refs.scrollbar.getList();
        if (!(cell && list)) {
          return;
        }
        var cellHeight = cell.offsetHeight;
        list.style.height = cellHeight + 'px';
      }

      if (this.refs.scrollbar) {
        this.refs.scrollbar.update();
      }
    }

    // -------------------------------------------------------------------------- LOADING

  }, {
    key: '_renderColumns',
    value: function _renderColumns() {
      var _this2 = this;

      var photos = this.state.photos;

      var columnCount = 3;
      var columnHeights = [];

      var columns = [];
      for (var i = 0; i < columnCount; i++) {
        columns.push([]);
        columnHeights.push(0);
      }

      photos.forEach(function (photo) {
        var dimensions = photo.dimensions;

        // Find shortest column

        var shortestColumnIndex = null;
        var shortestColumnHeight = Infinity;
        for (var _i = 0; _i < columnCount; _i++) {
          if (columnHeights[_i] < shortestColumnHeight) {
            shortestColumnIndex = _i;
            shortestColumnHeight = columnHeights[_i];
          }
        }

        columns[shortestColumnIndex].push(_globals.ReactBEM.createElement(_photoComponent2.default, {
          photo: photo.obj,
          onClick: _this2._onPhotoClicked.bind(_this2, photo.obj) }));
        columnHeights[shortestColumnIndex] += dimensions.y;
      });

      return columns;
    }

    /**
     * Renders the content for this component
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderPhotos',
    value: function _renderPhotos() {
      var columns = this._renderColumns();
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:photoRoll e:row m:fullHeight' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:cell', ref: 'cell' },
          _globals.ReactBEM.createElement(
            _scrollbarComponent2.default,
            { direction: 'vertical', ref: 'scrollbar' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:container', ref: 'container' },
              _globals.ReactBEM.createElement(
                'div',
                { bem: 'e:innerContainer' },
                _globals.ReactBEM.createElement(
                  'div',
                  { bem: 'e:headline' },
                  this._getHeadline()
                ),
                _globals.ReactBEM.createElement(
                  'bem',
                  { specifier: 'e:photoList' },
                  columns.map(function (column) {
                    return _globals.ReactBEM.createElement(
                      'ul',
                      { bem: '$e:list' },
                      column
                    );
                  })
                )
              )
            )
          )
        )
      );
    }

    /**
     * Loads the photos
     * @private
     */

  }, {
    key: '_loadPhotos',
    value: function _loadPhotos() {
      var _this3 = this;

      this._totalPhotosHeight = 0;

      var modal = _modalManager2.default.instance.displayProgress(this._t('pesdk.common.text.loading'));
      var PhotoRollProvider = this.context.options.photoRoll.provider;
      var provider = new PhotoRollProvider();

      provider.getPhotosForLibrary(this.props.library).then(function (photos) {
        return _this3._preloadPhotos(photos, modal);
      }).then(function (photos) {
        _this3.setState({ photos: photos, loading: false });
        modal.close();
      }).catch(function (e) {
        modal.close();
        _modalManager2.default.instance.displayError(_this3._t('pesdk.library.title.photoRollLoadFail'), _this3._t('pesdk.library.text.photoRollLoadFail', { error: e.message }));
      });
    }

    /**
     * Preloads the photos
     * @param {PhotoEditorSDK.UI.ReactUI.PhotoRoll.Photo[]} photos
     * @param {Modal} modal
     * @return {Promise}
     * @private
     */

  }, {
    key: '_preloadPhotos',
    value: function _preloadPhotos(photos, modal) {
      var _this4 = this;

      var totalPhotos = photos.length;
      var loadedPhotos = 0;
      return Promise.all(photos.map(function (photo) {
        return _this4._preloadPhoto(photo).then(function (image) {
          var photoDimensions = new _globals.Vector2(image.width, image.height);
          photoDimensions.multiply(COLUMN_WIDTH / image.width);
          _this4._totalPhotosHeight += photoDimensions.y;

          loadedPhotos++;
          modal.setData({ progress: loadedPhotos / totalPhotos });

          return {
            obj: photo,
            dimensions: photoDimensions
          };
        });
      }));
    }

    /**
     * Preloads the given photo
     * @param  {PhotoEditorSDK.UI.ReactUI.PhotoRoll.Photo} photo
     * @return {Promise}
     * @private
     */

  }, {
    key: '_preloadPhoto',
    value: function _preloadPhoto(photo) {
      var _this5 = this;

      return new Promise(function (resolve, reject) {
        var image = new window.Image();
        image.addEventListener('load', function () {
          resolve(image);
        });
        image.addEventListener('error', function () {
          resolve(image);
        });
        image.crossOrigin = _this5.props.crossOrigin || 'anonymous';
        image.src = photo.urls.thumb;
      });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      if (!this.state.loading) {
        return this._renderPhotos();
      } else {
        return _globals.ReactBEM.createElement('div', null);
      }
    }
  }]);

  return PhotoListComponent;
}(_globals.BaseComponent);

exports.default = PhotoListComponent;


PhotoListComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _controlsComponent = __webpack_require__(3);

var _controlsComponent2 = _interopRequireDefault(_controlsComponent);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var OverviewControlsComponent = function (_ControlsComponent) {
  _inherits(OverviewControlsComponent, _ControlsComponent);

  function OverviewControlsComponent() {
    var _ref;

    _classCallCheck(this, OverviewControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = OverviewControlsComponent.__proto__ || Object.getPrototypeOf(OverviewControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._hasBackButton = false;
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when an item has been clicked
   * @param  {Event} e
   * @private
   */


  _createClass(OverviewControlsComponent, [{
    key: '_onItemClick',
    value: function _onItemClick(controls) {
      this.props.onSwitchControls(controls);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the list items for this control
     * @return {Array.<ReactBEM.Element>}
     * @private
     */

  }, {
    key: '_renderListItems',
    value: function _renderListItems() {
      var _this2 = this;

      var editor = this.context.editor;


      var items = [];
      var makeItem = function makeItem(identifier) {
        var control = editor.controls.get(identifier);
        return _globals.ReactBEM.createElement(
          'li',
          {
            bem: 'e:item',
            key: control.identifier,
            'data-identifier': control.identifier,
            onClick: _this2._onItemClick.bind(_this2, control) },
          _globals.ReactBEM.createElement(
            'bem',
            { specifier: '$b:controls' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: '$e:button m:withLabel' },
              _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: _this2._getAssetPath(control.iconPath, true) }),
              _globals.ReactBEM.createElement(
                'div',
                { bem: 'e:label' },
                _this2._t(control.languageKey)
              )
            )
          )
        );
      };

      var controlsOrder = this.context.options.editor.controlsOrder;

      controlsOrder.forEach(function (groupOrIdentifier) {
        if (Array.isArray(groupOrIdentifier)) {
          var group = groupOrIdentifier;

          var groupItems = [];
          group.forEach(function (identifier) {
            if (!editor.controls.isEnabled(identifier)) return;
            groupItems.push(makeItem(identifier));
          });

          if (groupItems.length) {
            items.push(groupItems);
          }
        } else {
          var identifier = groupOrIdentifier;
          if (!editor.controls.isEnabled(identifier)) return;
          items.push(makeItem(identifier));
        }
      });

      var finalItems = [];
      items.forEach(function (itemOrGroup) {
        finalItems = finalItems.concat(itemOrGroup);
        if (itemOrGroup !== items[items.length - 1]) {
          finalItems.push(_globals.ReactBEM.createElement('li', { bem: 'e:separator' }));
        }
      });

      return finalItems;
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderControls',
    value: function renderControls() {
      var listItems = this._renderListItems();

      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:list' },
        _globals.ReactBEM.createElement(
          _scrollbarComponent2.default,
          null,
          _globals.ReactBEM.createElement(
            'ul',
            { bem: '$e:list' },
            listItems
          )
        )
      );
    }
  }]);

  return OverviewControlsComponent;
}(_controlsComponent2.default);

exports.default = OverviewControlsComponent;


OverviewControlsComponent.contextTypes = _controlsComponent2.default.contextTypes;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _exporter = __webpack_require__(121);

var _exporter2 = _interopRequireDefault(_exporter);

var _imageResizer = __webpack_require__(123);

var _imageResizer2 = _interopRequireDefault(_imageResizer);

var _operations = __webpack_require__(124);

var _operations2 = _interopRequireDefault(_operations);

var _controls = __webpack_require__(125);

var _controls2 = _interopRequireDefault(_controls);

var _features = __webpack_require__(169);

var _features2 = _interopRequireDefault(_features);

var _zoom = __webpack_require__(170);

var _zoom2 = _interopRequireDefault(_zoom);

var _history = __webpack_require__(171);

var _history2 = _interopRequireDefault(_history);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

/**
 * The Editor class is an interface to the SDK, managing operations, rendering,
 * history, zoom etc.
 * @class
 * @memberof PhotoEditorSDK.UI.ReactUI
 */
var Editor = function (_EventEmitter) {
  _inherits(Editor, _EventEmitter);

  function Editor(ui, options, mediator) {
    var shallow = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    _classCallCheck(this, Editor);

    var _this = _possibleConstructorReturn(this, (Editor.__proto__ || Object.getPrototypeOf(Editor)).call(this));

    _this._ui = ui;
    _this._options = options;
    _this._mediator = mediator;
    _this._ready = false;
    _this._padding = [0, 0, 0, 0];
    _this._shallow = shallow;

    if (!shallow) {
      _this._initSDK();

      _this._onZoom = _this._onZoom.bind(_this);
      _this._onUndo = _this._onUndo.bind(_this);

      _this.history = new _history2.default(_this, _this._sdk, _this._mediator);
      _this.history.on('undo', _this._onUndo);
      _this.zoom = new _zoom2.default(_this, _this._sdk, _this._mediator);
      _this.zoom.on('set', _this._onZoom);

      _this._initSerializers();
    }

    _this.operations = new _operations2.default(_this, _this._sdk, _this._mediator);
    _this.controls = new _controls2.default(_this, _this._sdk, _this._mediator);
    _this.features = new _features2.default(_this, _this._sdk, _this._mediator);

    // Rendering
    _this._running = false;
    _this._renderRequested = true;
    _this._renderCallbacks = [];
    _this._animationFrameRequest = null;

    _this.render = _this.render.bind(_this);
    _this._tick = _this._tick.bind(_this);
    return _this;
  }

  // -------------------------------------------------------------------------- INITIALIZATION

  /**
   * Sets the given image to be rendered. If the image needs to be resized to fit into a
   * WebGL texture or to match the `maxMegaPixels` option, resizing is done before setting
   * the image.
   * @param {Image} image
   * @param {Boolean} resetEditor
   */


  _createClass(Editor, [{
    key: 'setImage',
    value: function setImage() {
      var _this2 = this;

      var image = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._options.editor.image;
      var resetEditor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var renderer = this._sdk.getRenderer();
      var initialDimensions = new _globals.Vector2(image.naturalWidth, image.naturalHeight);
      var maxPixels = this.getMaxMegapixels() * 1000000;
      var maxDimensions = renderer.getMaxDimensions();

      if (resetEditor) {
        this.reset();
      }

      var imageResizer = new _imageResizer2.default(image, maxPixels, maxDimensions);
      var exif = null;

      var done = function done(image) {
        var dimensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : initialDimensions;
        var resizeReason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _this2._setImage(image, exif, dimensions);

        _this2._initWatermark();

        _this2._ready = true;
        _this2.emit('ready');
      };

      if (!imageResizer.needsResize()) {
        done(image);
      } else {
        this.emit('resize');
        exif = this._sdk.parseExif(image);
        imageResizer.resize().then(function (_ref) {
          var canvas = _ref.canvas,
              dimensions = _ref.dimensions,
              reason = _ref.reason;

          // Flag canvas as JPEG so that export will recognize that
          // it needs to restore EXIF data
          canvas.src = 'data:image/jpeg;base64,';

          _this2.emit('resized', { dimensions: dimensions, reason: reason });
          done(canvas, dimensions, reason);
        });
      }
    }

    /**
     * Initializes the watermark operation
     * @private
     */

  }, {
    key: '_initWatermark',
    value: function _initWatermark() {
      if (this._options.editor.watermarkImage) {
        this._watermarkOperation = this.operations.getOrCreate('watermark', {
          image: this._options.editor.watermarkImage
        });
      }
    }

    /**
     * Initializes the SDK
     * @private
     */

  }, {
    key: '_initSDK',
    value: function _initSDK() {
      var _options = this._options,
          logLevel = _options.logLevel,
          displayWelcomeMessage = _options.displayWelcomeMessage,
          debug = _options.debug,
          license = _options.license,
          crossOrigin = _options.crossOrigin;
      var _options$editor = this._options.editor,
          smoothDownscaling = _options$editor.smoothDownscaling,
          smoothUpscaling = _options$editor.smoothUpscaling,
          preferredRenderer = _options$editor.preferredRenderer,
          pixelRatio = _options$editor.pixelRatio;

      var rendererOptions = {
        logLevel: logLevel,
        debug: debug,
        displayWelcomeMessage: displayWelcomeMessage,
        pixelRatio: pixelRatio,
        smoothDownscaling: smoothDownscaling,
        smoothUpscaling: smoothUpscaling,
        crossOrigin: crossOrigin,
        transparent: true,
        license: license
      };
      this._sdk = new _globals.SDK(preferredRenderer, rendererOptions);
    }

    // -------------------------------------------------------------------------- ZOOMING

    /**
     * Gets called after a new zoom level has been set. Re-renders the editor.
     * @param  {Number} zoom
     * @param  {Function} [callback]
     * @private
     */

  }, {
    key: '_onZoom',
    value: function _onZoom(zoom) {
      var _this3 = this;

      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      this.fixOffset();
      this.render(function () {
        _this3._mediator.emit(_globals.Constants.EVENTS.ZOOM_DONE);
        callback && callback();
      });
    }

    /**
     * Gets called after an undo happened
     * @private
     */

  }, {
    key: '_onUndo',
    value: function _onUndo() {
      this.render();
    }

    /**
     * Returns the current rotation
     * @return {Number}
     */

  }, {
    key: 'getRotation',
    value: function getRotation() {
      return this._sdk.getRotation();
    }

    /**
     * Sets the rotation to the given value
     * @param {Number} rotation
     */

  }, {
    key: 'setRotation',
    value: function setRotation(rotation) {
      this._sdk.setRotation(rotation);
    }

    /**
     * Returns the current sprite scale
     * @return {Number}
     */

  }, {
    key: 'getSpriteScale',
    value: function getSpriteScale() {
      return this._sdk.getSpriteScale();
    }

    /**
     * Sets the sprite scale to the given value
     * @param {Number} spriteScale
     */

  }, {
    key: 'setSpriteScale',
    value: function setSpriteScale(spriteScale) {
      this._sdk.setSpriteScale(spriteScale);
    }

    /**
     * Returns the crossOrigin value to be set to image elements, according
     * to the passed `crossOrigin` option.
     *
     * @returns String
     */

  }, {
    key: 'getCrossOrigin',
    value: function getCrossOrigin() {
      return _globals.SDKUtils.getCrossOriginValue(this._options.crossOrigin || 'anonymous');
    }

    // -------------------------------------------------------------------------- MISC PRIVATE API

    /**
     * Checks if the given tool is allowed by the license
     * @param  {String}  identifier
     * @return {Boolean}
     */

  }, {
    key: 'isToolAllowed',
    value: function isToolAllowed(identifier) {
      if (this._shallow) return true;

      return this._sdk._l.isToolAllowed(identifier);
    }

    /**
     * Checks if the control with the tool identifier is enabled
     * @param  {String}  identifier
     * @return {Boolean}
     */

  }, {
    key: 'isToolEnabled',
    value: function isToolEnabled(identifier) {
      return this._options.editor.tools.indexOf(identifier) !== -1;
    }

    /**
     * Returns the maximum mega pixels
     * @return {Number}
     * @private
     */

  }, {
    key: 'getMaxMegapixels',
    value: function getMaxMegapixels() {
      var maxMegaPixels = this._options.editor.maxMegaPixels;

      return _globals.Utils.isMobile() ? maxMegaPixels.mobile : maxMegaPixels.desktop;
    }

    // -------------------------------------------------------------------------- MISC PUBLIC API

    /**
     * Returns the output sprite's current dimensions
     * @param {Boolean} incorporateSpriteScale = false
     * @return {PhotoEditorSDK.Math.Vector2}
     */

  }, {
    key: 'getOutputDimensions',
    value: function getOutputDimensions() {
      var incorporateSpriteScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      return this._sdk.getOutputDimensions(incorporateSpriteScale);
    }

    /**
     * Returns the output texture's current dimensions
     * @param  {Boolean} incorporateSpriteScale = false
     * @return {PhotoEditorSDK.Math.Vector2}
     */

  }, {
    key: 'getOutputTextureDimensions',
    value: function getOutputTextureDimensions() {
      var incorporateSpriteScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      return this._sdk.getOutputTextureDimensions(incorporateSpriteScale);
    }

    /**
     * Returns the final dimensions that the input image would have
     * after all existing operations have been applied
     * @param {Boolean} incorporateSpriteScale = false
     * @return {PhotoEditorSDK.Math.Vector2}
     */

  }, {
    key: 'getFinalDimensions',
    value: function getFinalDimensions() {
      var incorporateSpriteScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      return this._sdk.getFinalDimensions(incorporateSpriteScale);
    }

    /**
     * Returns the canvas dimensions
     * @param  {Boolean} subtractPadding = true
     * @return {PhotoEditorSDK.Math.Vector2}
     */

  }, {
    key: 'getCanvasDimensions',
    value: function getCanvasDimensions() {
      var subtractPadding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      var canvas = this._sdk.getCanvas();
      var dimensions = new _globals.Vector2(canvas.offsetWidth, canvas.offsetHeight);
      if (subtractPadding) {
        dimensions.subtract(this._padding[1] + this._padding[3], this._padding[0] + this._padding[2]);
      }
      return dimensions;
    }

    /**
     * Sets the given image
     * @param {Image} image
     * @param {PhotoEditorSDK.EXIF} [exif]
     * @param {PhotoEditorSDK.Math.Vector2} [dimensions]
     * @private
     */

  }, {
    key: '_setImage',
    value: function _setImage() {
      var image = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._options.editor.image;
      var exif = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var dimensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      // Invalidate caches
      this._sdk.setAllOperationsToDirty();

      this._options.editor.image = image;
      this._sdk.setImage(image, exif, dimensions);

      this.zoom.set('auto');

      this.emit('new-image');
    }

    /**
     * Exports an image
     * @param {Boolean} download = false
     * @return {Promise}
     */

  }, {
    key: 'export',
    value: function _export() {
      var _this4 = this;

      var download = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (this._watermarkOperation) {
        this._watermarkOperation.setEnabled(false);
      }

      // Invalidate caches
      this._sdk.setAllOperationsToDirty();

      var options = this._options.editor.export;
      var exporter = new _exporter2.default(this._sdk, options, download);
      return exporter.export().then(function (output) {
        _this4.emit('export', output);
        _this4._mediator.emit(_globals.Constants.EVENTS.EXPORT, output, _this4);

        if (_this4._watermarkOperation) {
          _this4._watermarkOperation.setEnabled(true);
          _this4._sdk.render();
        }

        // Invalidate caches
        _this4._sdk.setAllOperationsToDirty();

        return output;
      });
    }

    // -------------------------------------------------------------------------- SERIALIZATION

    /**
     * Initializes the serializers and deserializers
     * @private
     */

  }, {
    key: '_initSerializers',
    value: function _initSerializers() {
      this._serializers = {
        '1.0.0': __webpack_require__(172).default,
        '1.0.1': __webpack_require__(181).default,
        '2.0.0': __webpack_require__(182).default,
        '2.0.1': __webpack_require__(184).default,
        '3.0.0': __webpack_require__(187).default,
        '3.1.0': __webpack_require__(188).default
      };
    }

    /**
     * Serializes the editor state for the given version
     * @param  {Object} options = {}
     * @param  {String} version = '3.1.0'
     * @return {Promise}
     */

  }, {
    key: 'serialize',
    value: function serialize() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '3.1.0';

      var Serializer = this._serializers[version];
      if (!Serializer) {
        return _globals.Promise.reject(new Error('No serializer for version ' + version + ' found.'));
      }
      var serializer = new Serializer(this);
      return serializer.serialize(options);
    }

    /**
     * Deserializes the given data
     * @param  {Object} data
     * @return {Promise}
     */

  }, {
    key: 'deserialize',
    value: function deserialize(data) {
      var _this5 = this;

      var Serializer = this._serializers[data.version];
      if (!Serializer) {
        return _globals.Promise.reject(new Error('No serializer for version ' + data.version + ' found.'));
      }
      var serializer = new Serializer(this);
      return serializer.deserialize(data).then(function () {
        _this5.zoom.set('auto');
      });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Applies the rendering offset
     * @private
     */

  }, {
    key: '_applyOffset',
    value: function _applyOffset() {
      var offset = this._offset.clone();

      offset.x -= this._padding[1] / 2;
      offset.x += this._padding[3] / 2;

      offset.y -= this._padding[2] / 2;
      offset.y += this._padding[0] / 2;

      this._sdk.setOffset(offset);
    }

    /**
     * Starts the render loop
     */

  }, {
    key: 'start',
    value: function start() {
      this.zoom.set('auto');
      this._animationFrameRequest = (0, _globals.requestAnimationFrame)(this._tick);
    }

    /**
     * Stops the render loop
     */

  }, {
    key: 'stop',
    value: function stop() {
      this._running = false;
      if (this._animationFrameRequest) {
        (0, _globals.cancelAnimationFrame)(this._animationFrameRequest);
        this._renderCallbacks = [];
      }
    }

    /**
     * Requests a render, adds `callback` to the render callbacks
     * @param  {Function} [callback]
     */

  }, {
    key: 'render',
    value: function render(callback) {
      this._renderRequested = true;
      if (callback) {
        this._renderCallbacks.push(callback);
      }
    }

    /**
     * Sets the offset to the given one
     * @param {PhotoEditorSDK.Math.Vector2} offset
     */

  }, {
    key: 'setOffset',
    value: function setOffset(offset) {
      this._offset = this._clampOffset(offset);
    }

    /**
     * Returns the current offset
     * @returns {PhotoEditorSDK.Math.Vector2}
     */

  }, {
    key: 'getOffset',
    value: function getOffset() {
      return this._offset;
    }

    /**
     * Makes sure the image stays inside the viewport
     */

  }, {
    key: 'fixOffset',
    value: function fixOffset() {
      this.setOffset(this._sdk.getOffset());
    }

    /**
     * Fixes the given offset to make sure the image stays inside the viewport
     * @private
     */

  }, {
    key: '_clampOffset',
    value: function _clampOffset(offset) {
      var renderer = this._sdk.getRenderer();
      var rendererDimensions = new _globals.Vector2(renderer.getWidth(), renderer.getHeight());
      var outputDimensions = this._sdk.getOutputDimensions(false);

      var minOffset = rendererDimensions.clone().subtract(outputDimensions).divide(2).clamp(null, new _globals.Vector2(0, 0));

      var maxOffset = outputDimensions.clone().subtract(rendererDimensions).divide(2).clamp(new _globals.Vector2(0, 0), null);

      var newOffset = offset.clone().clamp(minOffset, maxOffset).round();

      return newOffset;
    }

    /**
     * Gets called when an animation frame is being processed. Renders the
     * canvas if necessary, requests another animation frame callbacks
     * @private
     */

  }, {
    key: '_tick',
    value: function _tick() {
      var _this6 = this;

      if (this._renderRequested) {
        var callbacks = this._renderCallbacks.slice(0);
        this._renderCallbacks = [];

        this._render().then(function () {
          callbacks.forEach(function (r) {
            return r();
          });
          _this6._animationFrameRequest = (0, _globals.requestAnimationFrame)(_this6._tick);
        }).catch(function (e) {
          _globals.Log.error('An error occurred while rendering: ' + e.message);
        });
        this._renderRequested = false;
      } else {
        this._animationFrameRequest = (0, _globals.requestAnimationFrame)(this._tick);
      }
    }

    /**
     * Triggers a render
     * @private
     */

  }, {
    key: '_render',
    value: function _render() {
      var _this7 = this;

      if (!this._ready) return _globals.Promise.resolve();

      this._applyOffset();

      return this._sdk.render().then(function () {
        _this7._lastOutputBounds = _this7._sdk.getSprite().getBounds();
      }).catch(function (e) {
        _this7.emit('render-error', e);
      });
    }

    /**
     * Resets everything
     */

  }, {
    key: 'reset',
    value: function reset() {
      this._sdk.reset();

      this.history.reset();
      this.operations.reset();
    }

    // -------------------------------------------------------------------------- DISPOSAL

    /**
     * Cleans this instance up
     */

  }, {
    key: 'dispose',
    value: function dispose() {
      this.stop();

      this._sdk.dispose();
    }

    // -------------------------------------------------------------------------- GETTERS / SETTERS

    /**
     * Checks if the Editor is ready to render
     * @return {Boolean}
     */

  }, {
    key: 'isReady',
    value: function isReady() {
      return this._ready;
    }

    /**
     * Returns the renderer
     * @return {PhotoEditorSDK.Engine.BaseRenderer}
     */

  }, {
    key: 'getRenderer',
    value: function getRenderer() {
      return this._sdk.getRenderer();
    }

    /**
     * Returns the SDK
     * @return {PhotoEditorSDK}
     */

  }, {
    key: 'getSDK',
    value: function getSDK() {
      return this._sdk;
    }

    /**
     * Returns the input image dimensions
     * @return {PhotoEditorSDK.Math.Vector2}
     */

  }, {
    key: 'getInputDimensions',
    value: function getInputDimensions() {
      return this._sdk.getInputDimensions(false);
    }

    /**
     * Returns the padding values
     * @return {Number[]}
     */

  }, {
    key: 'getPadding',
    value: function getPadding() {
      return this._padding;
    }

    /**
     * Sets the padding (top, right, bottom, left)
     * @param {Number[]} padding
     */

  }, {
    key: 'setPadding',
    value: function setPadding(padding) {
      if (!padding) {
        this._padding = [0, 0, 0, 0];
      } else {
        this._padding = padding;
      }
    }

    /**
     * Returns the image
     * @return {Image}
     */

  }, {
    key: 'getImage',
    value: function getImage() {
      return this._options.editor.image;
    }

    /**
     * Returns the options
     * @return {Object}
     */

  }, {
    key: 'getOptions',
    value: function getOptions() {
      return this._options;
    }

    /**
     * Returns the UI
     * @return {ReactUI}
     */

  }, {
    key: 'getUI',
    value: function getUI() {
      return this._ui;
    }
  }, {
    key: 'getMediator',
    value: function getMediator() {
      return this._mediator;
    }

    /**
     * Broadcasts a transform to all operations that need to be changed
     * @param  {PhotoEditorSDK.Operations.TransformOperation} transformOperation
     * @param  {Object} options
     */

  }, {
    key: 'broadcastTransform',
    value: function broadcastTransform(transformOperation, options) {
      var _this8 = this;

      var transformChange = new _globals.SDK.Operations.TransformOperation.TransformChange(transformOperation, options);
      var transformableOperations = ['sprite', 'selective-blur', 'radial-focus', 'mirrored-focus', 'linear-focus', 'blur'];
      transformableOperations.forEach(function (identifier) {
        var operation = _this8.operations.get(identifier);
        if (!operation) {
          return;
        }
        operation.transform(transformChange);
      });
    }

    /**
     * Broadcasts a flip to all operations that need to be changed
     * @param  {String} direction
     */

  }, {
    key: 'broadcastFlip',
    value: function broadcastFlip(direction) {
      var _this9 = this;

      var flippableOperations = ['mirrored-focus', 'radial-focus', 'sprite', 'selective-blur'];
      flippableOperations.forEach(function (identifier) {
        var operation = _this9.operations.get(identifier);
        if (!operation) {
          return;
        }
        operation.flip(direction);
      });
    }

    /**
     * Broadcasts a rotation to all operations that need to be changed
     * @param  {Number} degrees
     */

  }, {
    key: 'broadcastRotate',
    value: function broadcastRotate(degrees) {
      var _this10 = this;

      var flippableOperations = ['transform', 'mirrored-focus', 'radial-focus', 'sprite', 'selective-blur'];
      flippableOperations.forEach(function (identifier) {
        var operation = _this10.operations.get(identifier);
        if (!operation) {
          return;
        }
        operation.rotate(degrees);
      });
    }
  }]);

  return Editor;
}(_globals.EventEmitter);

exports.default = Editor;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _adjustments = __webpack_require__(126);

Object.defineProperty(exports, 'adjustments', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_adjustments).default;
  }
});

var _transform = __webpack_require__(129);

Object.defineProperty(exports, 'transform', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_transform).default;
  }
});

var _filter = __webpack_require__(133);

Object.defineProperty(exports, 'filter', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_filter).default;
  }
});

var _focus = __webpack_require__(136);

Object.defineProperty(exports, 'focus', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_focus).default;
  }
});

var _sticker = __webpack_require__(141);

Object.defineProperty(exports, 'sticker', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sticker).default;
  }
});

var _text = __webpack_require__(149);

Object.defineProperty(exports, 'text', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_text).default;
  }
});

var _brush = __webpack_require__(159);

Object.defineProperty(exports, 'brush', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_brush).default;
  }
});

var _selectiveBlur = __webpack_require__(163);

Object.defineProperty(exports, 'selectiveBlur', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_selectiveBlur).default;
  }
});

var _frame = __webpack_require__(166);

Object.defineProperty(exports, 'frame', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_frame).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _overlayComponent = __webpack_require__(135);

var _overlayComponent2 = _interopRequireDefault(_overlayComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var CategoryDropdownComponent = function (_BaseComponent) {
  _inherits(CategoryDropdownComponent, _BaseComponent);

  function CategoryDropdownComponent() {
    _classCallCheck(this, CategoryDropdownComponent);

    var _this = _possibleConstructorReturn(this, (CategoryDropdownComponent.__proto__ || Object.getPrototypeOf(CategoryDropdownComponent)).call(this));

    _this._bindAll('_onButtonClick');

    _this.state = {
      overlayVisible: false
    };
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the color picker button has been clicked
   * @param  {Event} e
   * @private
   */


  _createClass(CategoryDropdownComponent, [{
    key: '_onButtonClick',
    value: function _onButtonClick(e) {
      e.preventDefault();
      e.stopPropagation();

      this.setState({ overlayVisible: !this.state.overlayVisible });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var Overlay = null;

      if (this.state.overlayVisible) {
        Overlay = _globals.ReactBEM.createElement(_overlayComponent2.default, {
          items: this.props.items,
          selectedItem: this.props.selectedItem,
          onChange: this.props.onChange });
      }

      var className = this.state.overlayVisible ? 'is-active' : null;

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:controls' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:categoryDropdown', className: className, onClick: this._onButtonClick },
          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this.props.selectedItem.icon }),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:label' },
            this.props.selectedItem.label
          ),
          Overlay
        )
      );
    }
  }]);

  return CategoryDropdownComponent;
}(_globals.BaseComponent);

exports.default = CategoryDropdownComponent;


CategoryDropdownComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var FontPreviewComponent = function (_BaseComponent) {
  _inherits(FontPreviewComponent, _BaseComponent);

  function FontPreviewComponent() {
    _classCallCheck(this, FontPreviewComponent);

    return _possibleConstructorReturn(this, (FontPreviewComponent.__proto__ || Object.getPrototypeOf(FontPreviewComponent)).apply(this, arguments));
  }

  _createClass(FontPreviewComponent, [{
    key: 'componentDidMount',

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called after the component has been mounted
     */
    value: function componentDidMount() {
      _get(FontPreviewComponent.prototype.__proto__ || Object.getPrototypeOf(FontPreviewComponent.prototype), 'componentDidMount', this).call(this);
      this._renderCanvas();
    }

    /**
     * Gets called after this component has been updated
     */

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._renderCanvas();
    }

    // -------------------------------------------------------------------------- CANVAS RENDERING

    /**
     * Renders the current font family onto the canvas
     * @private
     */

  }, {
    key: '_renderCanvas',
    value: function _renderCanvas() {
      var canvas = this.refs.canvas;
      var editor = this.context.editor;

      var sdk = editor.getSDK();

      var pixelRatio = sdk.getPixelRatio();
      canvas.width = canvas.offsetWidth * pixelRatio;
      canvas.height = canvas.offsetHeight * pixelRatio;

      canvas.style.width = canvas.offsetWidth + 'px';
      canvas.style.height = canvas.offsetHeight + 'px';

      var context = canvas.getContext('2d');

      context.fillStyle = 'red';
      context.clearRect(0, 0, canvas.width, canvas.height);

      context.font = (this.props.fontStyle || '') + ' ' + (this.props.fontWeight || '') + ' ' + 24 * pixelRatio + 'px ' + this.props.fontFamily;
      context.textBaseline = 'middle';
      context.textAlign = 'center';
      context.fillStyle = 'white';

      context.fillText('Abc', canvas.width / 2, canvas.height / 2);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement('canvas', { bem: 'b:fontFamily e:canvas', ref: 'canvas' });
    }
  }]);

  return FontPreviewComponent;
}(_globals.BaseComponent);

exports.default = FontPreviewComponent;


FontPreviewComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _photoeditorsdk = __webpack_require__(7);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var FONT_WEIGHTS = {
  100: 'Extra Light',
  200: 'Light',
  300: 'Book',
  400: 'Regular',
  500: 'Medium',
  600: 'Semibold',
  700: 'Bold',
  800: 'Black',
  900: 'Extra Black',
  bold: 'Bold',
  normal: 'Regular'
};

var FontVariation = function (_Configurable) {
  _inherits(FontVariation, _Configurable);

  function FontVariation() {
    _classCallCheck(this, FontVariation);

    return _possibleConstructorReturn(this, (FontVariation.__proto__ || Object.getPrototypeOf(FontVariation)).apply(this, arguments));
  }

  _createClass(FontVariation, [{
    key: 'getLabel',

    /**
     * Returns the label for this variation
     * @return {String}
     */
    value: function getLabel() {
      var label = FONT_WEIGHTS[this._options.fontWeight];

      switch (this._options.fontStyle) {
        case 'italic':
          label += ' Italic';
          break;
      }

      return label;
    }
  }]);

  return FontVariation;
}(_photoeditorsdk.Configurable);

/**
 * Specifies the available options for the FontVariation class
 * @type {Object}
 * @ignore
 */


exports.default = FontVariation;
FontVariation.prototype.availableOptions = {
  identifier: { type: _photoeditorsdk.OptionType.STRING, required: true },
  fontFamily: { type: _photoeditorsdk.OptionType.STRING, required: true },
  fontWeight: { type: _photoeditorsdk.OptionType.ALL, default: 400 },
  fontStyle: { type: _photoeditorsdk.OptionType.STRING, default: 'normal' },
  textMetrics: { type: _photoeditorsdk.OptionType.OBJECT, default: null },
  provider: { type: _photoeditorsdk.OptionType.STRING, available: ['google', 'file'] },
  filePath: { type: _photoeditorsdk.OptionType.STRING },
  default: { type: _photoeditorsdk.OptionType.BOOLEAN, default: false },
  font: { type: _photoeditorsdk.OptionType.OBJECT }
};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FrameManager = function () {
  function FrameManager(ui, options) {
    _classCallCheck(this, FrameManager);

    this._ui = ui;
    this._options = options;

    this._categoriesById = {};
    this._categories = [];
    this._framesById = {};

    this._addCategories(_globals.SharedConstants.DEFAULTS.FRAME_CATEGORIES);

    var _options = this._options,
        categories = _options.categories,
        replaceCategories = _options.replaceCategories;

    if (this._options.categories) {
      this._addCategories(categories, replaceCategories);
    } else {
      this._updateAllCategory();
    }
  }

  /**
   * Initializes the categories
   * @param {Object[]} categories
   * @param {Boolean} replace = false
   * @private
   */


  _createClass(FrameManager, [{
    key: '_addCategories',
    value: function _addCategories(categories) {
      var _this = this;

      var replace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (replace) {
        this._categories = categories.slice(0);
      } else {
        this._categories = _globals.Utils.mergeCategories(this._categories, categories, 'frames');
      }

      // Build cat id => category hash
      this._categoriesById = {};
      this._categories.forEach(function (c) {
        _this._categoriesById[c.identifier] = c;
      });

      // Filter frames
      var availableFrames = this._options.availableFrames;

      if (availableFrames) {
        this._categories.forEach(function (c) {
          c.frames = c.frames.filter(function (f) {
            return availableFrames.indexOf(f.identifier) !== -1;
          });
        });
      }

      // Build frame id => frame hash
      this._categories.forEach(function (c) {
        c.frames.forEach(function (s) {
          _this._framesById[s.identifier] = s;
        });
      });

      this._updateAllCategory();
    }

    /**
     * Updates the `all` category which contains all frames
     * @private
     */

  }, {
    key: '_updateAllCategory',
    value: function _updateAllCategory() {
      this._allCategory = {
        identifier: 'all',
        defaultName: 'All',
        frames: this._categories.map(function (c) {
          return c.frames;
        }).reduce(function (a, b) {
          return a.concat(b);
        }, [])
      };
      this._categoriesById.all = this._allCategory;
    }

    /**
     * Returns the frames for the category with the given name
     * @param  {String} categoryName
     * @return {Object[]}
     */

  }, {
    key: 'getFramesForCategory',
    value: function getFramesForCategory(categoryName) {
      if (!this._categoriesById[categoryName]) {
        throw new Error('Unknown frame category \'' + categoryName + '\'');
      }
      return this._categoriesById[categoryName].frames;
    }

    /**
     * Returns the frame with the given identifier
     * @param  {String} identifier
     */

  }, {
    key: 'getFrameByIdentifier',
    value: function getFrameByIdentifier(identifier) {
      return this._framesById[identifier];
    }

    /**
     * Returns the categories
     * @return {Object[]}
     */

  }, {
    key: 'getCategories',
    value: function getCategories() {
      return this._categories;
    }

    /**
     * Returns the category object for the given id
     * @param  {String} id
     * @return {Object}
     */

  }, {
    key: 'getCategory',
    value: function getCategory(id) {
      return this._categoriesById[id];
    }
  }]);

  return FrameManager;
}();

exports.default = FrameManager;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var OptionType = _globals.SDK.OptionType;

var Frame = function (_SDK$Configurable) {
  _inherits(Frame, _SDK$Configurable);

  function Frame(ui) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Frame);

    var _this = _possibleConstructorReturn(this, (Frame.__proto__ || Object.getPrototypeOf(Frame)).call(this, options));

    _this._loaded = false;
    _this._loading = false;
    _this._ui = ui;
    _this._frame = _globals.SDK.Utils.deepClone(_this._options);
    return _this;
  }

  /**
   * Loads the images of this frame
   * @return {Promise}
   */


  _createClass(Frame, [{
    key: 'load',
    value: function load() {
      var _this2 = this;

      if (this._loaded) return Promise.resolve();
      if (this._loading) return Promise.reject(new Error('Called Frame#load while it\'s already loading'));

      this._loading = true;
      var imageGroups = this._frame.imageGroups;


      var promises = [];
      ['top', 'left', 'right', 'bottom'].forEach(function (groupName) {
        if (!(groupName in imageGroups)) return;

        var group = imageGroups[groupName];
        ['start', 'mid', 'end'].forEach(function (partName) {
          if (!(partName in group)) return;

          promises.push(_this2._loadPart(groupName, partName));
        });
      });

      return Promise.all(promises).then(function () {
        _this2._loaded = true;
        _this2._loading = false;
      }).catch(function (e) {
        _this2._loaded = false;
        _this2._loading = false;
      });
    }

    /**
     * Loads the given part of the given group
     * @param  {String} groupName
     * @param  {String} partName
     * @return {Promise}
     * @private
     */

  }, {
    key: '_loadPart',
    value: function _loadPart(groupName, partName) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        var imageGroups = _this3._frame.imageGroups;


        var part = imageGroups[groupName][partName];
        var imageUrl = part;
        // `part` can also be an object containing `mode` and `image`
        if (typeof part !== 'string' && 'image' in part) {
          imageUrl = part.image;
        }

        var image = new window.Image();
        image.addEventListener('load', function () {
          if (typeof part !== 'string') {
            _this3._frame.imageGroups[groupName][partName].image = image;
          } else {
            _this3._frame.imageGroups[groupName][partName] = image;
          }

          resolve(image);
        });
        image.addEventListener('error', function () {
          reject(new Error('Failed to load image at ' + imageUrl));
        });
        image.crossOrigin = _this3._ui.getEditor().getCrossOrigin();
        image.src = _this3._ui.getAssetPath(imageUrl);
      });
    }

    /**
     * Returns the frame
     * @return {Object}
     */

  }, {
    key: 'getFrame',
    value: function getFrame() {
      return this._frame;
    }
  }]);

  return Frame;
}(_globals.SDK.Configurable);

/**
 * Specifies the available options for the Frame class
 * @type {Object}
 * @ignore
 */


exports.default = Frame;
Frame.prototype.availableOptions = {
  identifier: { type: OptionType.STRING, required: true },
  defaultName: { type: OptionType.STRING },
  thumbnail: { type: OptionType.STRING },
  tintable: { type: OptionType.BOOLEAN, default: false },
  layoutMode: {
    type: OptionType.STRING,
    default: 'horizontal-inside',
    available: ['horizontal-inside', 'vertical-inside']
  },
  imageGroups: { type: OptionType.OBJECT, required: true }
};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TWICE_PI = Math.PI * 2;

var v100Serializer = function () {
  function v100Serializer(editor) {
    _classCallCheck(this, v100Serializer);

    this._editor = editor;

    this._serializeOperations = this._serializeOperations.bind(this);
  }

  // -------------------------------------------------------------------------- SERIALIZATION

  /**
   * Serializes the editor state
   * @param {Object} options = {}
   * @return {Promise}
   */


  _createClass(v100Serializer, [{
    key: 'serialize',
    value: function serialize() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._options = _globals.SDKUtils.defaults(options, {
        image: true
      });

      var data = {
        version: this.constructor.version
      };

      return this._serializeInputImage(data).then(this._serializeOperations);
    }

    /**
     * Serializes the input image as base64 and attaches it to `data`
     * @param  {Object} data
     * @return {Promise}
     * @private
     */

  }, {
    key: '_serializeInputImage',
    value: function _serializeInputImage(data) {
      var image = this._editor.getImage();
      var width = image.width,
          height = image.height;


      if (!this._options.image) {
        data.inputImage = { width: width, height: height };
        return Promise.resolve(data);
      }

      var canvas = _globals.SDKUtils.createCanvas();
      canvas.width = image.width;
      canvas.height = image.height;
      var context = canvas.getContext('2d');
      context.drawImage(image, 0, 0);

      var dataUrl = canvas.toDataURL(_globals.ImageFormat.PNG);
      data.inputImage = {
        type: _globals.ImageFormat.PNG,
        data: dataUrl.replace(/^data:image\/(.*?);base64,/, ''),
        width: width,
        height: height
      };
      return Promise.resolve(data);
    }

    /**
     * Serializes the operations and attaches them to `data`
     * @param  {Object} data
     * @return {Promise}
     * @private
     */

  }, {
    key: '_serializeOperations',
    value: function _serializeOperations(data) {
      var _this = this;

      var operations = [];
      var stack = this._editor.operations.getStack();
      stack.forEach(function (operation) {
        var data = _this._serializeOperation(operation, operations);
        if (data) {
          operations.push(data);
        }
      });
      data.operations = operations.filter(function (o) {
        return o;
      }); // Remove possible `null` operations
      return Promise.resolve(data);
    }

    /**
     * Serializes the given operation
     * @param  {PhotoEditorSDK.Operation} operation
     * @param  {PhotoEditorSDK.Operation[]} operations
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeOperation',
    value: function _serializeOperation(operation, operations) {
      switch (operation.constructor.identifier) {
        case 'transform':
          return this._serializeTransformOperation(operation);
        case 'orientation':
          return this._serializeOrientationOperation(operation);
        case 'filter':
          return this._serializeFilterOperation(operation);
        case 'adjustments':
          return this._serializeAdjustmentsOperation(operation);
        case 'sprite':
          return this._serializeSpriteOperation(operation, operations);
        case 'radial-focus':
          return this._serializeRadialFocusOperation(operation);
        case 'mirrored-focus':
          return this._serializeLinearFocusOperation(operation);
        default:
          _globals.Log.warn('Unable to serialize operation of type ' + operation.constructor.identifier);
      }
    }

    /**
     * Serializes the given transform operation
     * @param  {PhotoEditorSDK.Operation.TransformOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeTransformOperation',
    value: function _serializeTransformOperation(operation) {
      var options = operation.serializeOptions(['start', 'end', 'rotation'], true);
      options.rotation = (options.rotation + TWICE_PI) % TWICE_PI;
      return {
        type: 'crop',
        options: options
      };
    }

    /**
     * Serializes the given orientation operation
     * @param  {PhotoEditorSDK.Operation.OrientationOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeOrientationOperation',
    value: function _serializeOrientationOperation(operation) {
      return {
        type: 'orientation',
        options: operation.serializeOptions(['flipVertically', 'flipHorizontally', 'rotation'], true)
      };
    }

    /**
     * Serializes the given filter operation
     * @param  {PhotoEditorSDK.Operations.FilterOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeFilterOperation',
    value: function _serializeFilterOperation(operation) {
      if (operation.getIdentifier() === 'identity') return null;

      return {
        type: 'filter',
        options: {
          intensity: operation.getIntensity(),
          name: operation.getIdentifier()
        }
      };
    }

    /**
     * Serializes the given adjustments operation
     * @param  {PhotoEditorSDK.Operations.AdjustmentsOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeAdjustmentsOperation',
    value: function _serializeAdjustmentsOperation(operation) {
      var availableOptions = operation.availableOptions;


      var optionNames = ['brightness', 'saturation', 'contrast', 'exposure', 'shadows', 'highlights', 'clarity'];
      var options = {};
      optionNames.forEach(function (optionName) {
        var option = availableOptions[optionName];
        var value = operation.getOption(optionName);
        var minValue = option.minValue,
            midValue = option.midValue,
            maxValue = option.maxValue;

        options[optionName] = value <= midValue ? (value - minValue) / (midValue - minValue) - 1 : (value - midValue) / (maxValue - midValue);
      });
      return {
        type: 'adjustments',
        options: options
      };
    }

    /**
     * Serializes the given sprite operation
     * @return {PhotoEditorSDK.Operations.SpriteOperation} operation
     * @private
     */

  }, {
    key: '_serializeSpriteOperation',
    value: function _serializeSpriteOperation(operation, operations) {
      var _this2 = this;

      var spriteOperations = operations.filter(function (o) {
        return o.type === 'sprite';
      });
      var spriteOperation = void 0;
      var returnOperation = true;
      if (spriteOperations.length) {
        spriteOperation = spriteOperations.pop();
        returnOperation = false;
      } else {
        // No sprite operation exists, create a new one
        spriteOperation = {
          type: 'sprite',
          options: {
            sprites: []
          }
        };
      }

      operation.getSprites().forEach(function (sprite) {
        var spriteItem = null;
        if (sprite instanceof operation.constructor.StickerSprite) {
          spriteItem = _this2._serializeSticker(operation, sprite);
        } else if (sprite instanceof operation.constructor.TextSprite) {
          spriteItem = _this2._serializeText(operation, sprite);
        } else if (sprite instanceof operation.constructor.BrushSprite) {
          spriteItem = _this2._serializeBrush(operation, sprite);
        } else if (sprite instanceof operation.constructor.TextDesignSprite) {
          spriteItem = _this2._serializeTextDesign && _this2._serializeTextDesign(operation, sprite);
        }

        if (spriteItem) {
          spriteOperation.options.sprites.push(spriteItem);
        }
      });

      if (returnOperation) {
        return spriteOperation;
      }
    }

    /**
     * Serializes the given sticker
     * @param  {PhotoEditorSDK.Operation} operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.StickerSprite} sprite
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeSticker',
    value: function _serializeSticker(operation, sprite) {
      var adjustments = sprite.getAdjustments();

      var options = sprite.serializeOptions(['identifier', 'position', 'dimensions', 'flipVertically', 'flipHorizontally', 'rotation'], true);

      options.name = options.identifier;
      delete options.identifier;

      options.rotation = (options.rotation + TWICE_PI) % TWICE_PI;

      var adjustmentsOptions = adjustments.availableOptions;
      options.adjustments = {
        brightness: adjustments.getBrightness() - adjustmentsOptions.brightness.default,
        saturation: adjustments.getSaturation() - adjustmentsOptions.saturation.default,
        contrast: adjustments.getContrast() - adjustmentsOptions.contrast.default
      };

      return {
        type: 'sticker',
        options: options
      };
    }

    /**
     * Serializes the given text sprite
     * @param  {PhotoEditorSDK.Operation} operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.TextSprite} sprite
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeText',
    value: function _serializeText(operation, sprite) {
      var options = sprite.serializeOptions(['fontSize', 'lineHeight', 'fontFamily', 'fontWeight', 'alignment', 'color', 'backgroundColor', 'position', 'rotation', 'text', 'maxWidth'], true);
      options.rotation = (options.rotation + TWICE_PI) % TWICE_PI;

      return {
        type: 'text',
        options: options
      };
    }

    /**
     * Serializes the given brush sprite
     * @param  {PhotoEditorSDK.Operation} operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.BrushSprite} sprite
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeBrush',
    value: function _serializeBrush(operation, sprite) {
      var _this3 = this;

      return {
        type: 'brush',
        options: {
          paths: sprite.getPaths().map(function (path) {
            return _this3._serializePath(path);
          })
        }
      };
    }

    /**
     * Serializes the given path
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.BrushSprite.Path} path
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializePath',
    value: function _serializePath(path) {
      var options = path.getBrush().serializeOptions(['color', 'size'], true);

      options.points = path.getControlPoints().map(function (point) {
        return point.getPosition().toObject();
      });
      return options;
    }

    /**
     * Serializes the given radial focus operation
     * @param  {PhotoEditorSDK.Operations.RadialFocusOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeRadialFocusOperation',
    value: function _serializeRadialFocusOperation(operation) {
      return {
        type: 'focus',
        options: {
          type: 'radial',
          options: operation.serializeOptions(['position', 'radius', 'gradientRadius', 'blurRadius'], true)
        }
      };
    }

    /**
     * Serializes the given linear focus operation
     * @param  {PhotoEditorSDK.Operations.MirroredFocusOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeLinearFocusOperation',
    value: function _serializeLinearFocusOperation(operation) {
      return {
        type: 'focus',
        options: {
          type: 'linear',
          options: operation.serializeOptions(['start', 'end', 'blurRadius', 'size', 'gradientSize'], true)
        }
      };
    }

    /**
     * Returns the input dimensions for the given operation
     * @param  {PhotoEditorSDK.Operation} operation
     * @return {PhotoEditorSDK.Math.Vector2}
     * @private
     */

  }, {
    key: '_getInputDimensionsForOperation',
    value: function _getInputDimensionsForOperation(operation) {
      var operationFound = false;
      var inputDimensions = this._editor.getInputDimensions();

      this._editor.operations.getStack().forEach(function (op) {
        if (op === operation) operationFound = true;
        if (operationFound) return;
        inputDimensions = op.getNewDimensions(inputDimensions);
      });

      return inputDimensions;
    }
  }]);

  return v100Serializer;
}();

exports.default = v100Serializer;


v100Serializer.version = '1.0.0';

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = __webpack_require__(173);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

var _filterManager = __webpack_require__(27);

var _filterManager2 = _interopRequireDefault(_filterManager);

var _stickerManager = __webpack_require__(11);

var _stickerManager2 = _interopRequireDefault(_stickerManager);

var _brushManager = __webpack_require__(176);

var _brushManager2 = _interopRequireDefault(_brushManager);

var _fontManager = __webpack_require__(15);

var _fontManager2 = _interopRequireDefault(_fontManager);

var _fontLoader = __webpack_require__(30);

var _fontLoader2 = _interopRequireDefault(_fontLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Brush = void 0;
if (typeof _globals.SDK.Operations.SpriteOperation !== 'undefined') {
  Brush = _globals.SDK.Operations.SpriteOperation.BrushSprite;
}

var v100Deserializer = function () {
  function v100Deserializer(editor, data) {
    _classCallCheck(this, v100Deserializer);

    this._editor = editor;
    this._ui = this._editor.getUI();
    this._data = data;

    this._filterManager = new _filterManager2.default(this._ui, this._getOptions('filter'));
    this._stickerManager = new _stickerManager2.default(this._ui, this._getOptions('sticker'));
    this._brushManager = new _brushManager2.default(this._ui, this._getOptions('brush'));
    this._fontManager = new _fontManager2.default(this._ui, this._getOptions('text'));
  }

  _createClass(v100Deserializer, [{
    key: '_getOptions',
    value: function _getOptions(control) {
      var controls = this._editor.controls;

      var defaultOptions = {};
      if (controls && controls.get(control)) {
        defaultOptions = controls.get(control).defaultOptions;
      }

      var editorOptions = this._editor.getOptions();
      return _globals.SDKUtils.deepDefaults({}, editorOptions.editor.controlsOptions[control] || {}, defaultOptions);
    }

    /**
     * Deserializes the given data
     * @return {Promise}
     */

  }, {
    key: 'deserialize',
    value: function deserialize() {
      var _this = this;

      return this._validateVersion().then(function () {
        return _this._deserializeInputImage();
      }).then(function () {
        return _this._deserializeOperations();
      });
    }

    /**
     * Validates the version
     * @return {Promise}
     */

  }, {
    key: '_validateVersion',
    value: function _validateVersion() {
      if (this._data.version !== this.constructor.version) {
        return Promise.reject(new Error('Invalid version ' + this._data.version + ', expected ' + this.constructor.version));
      }
      return Promise.resolve();
    }

    /**
     * Deserializes the input image (if present)
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeInputImage',
    value: function _deserializeInputImage() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        var _data$inputImage = _this2._data.inputImage,
            data = _data$inputImage.data,
            type = _data$inputImage.type;

        if (data && type) {
          var image = new window.Image();
          image.addEventListener('load', function () {
            _this2._editor.setImage(image);
            resolve();
          });
          image.src = 'data:' + type + ';base64,' + data;
        } else {
          resolve();
        }
      });
    }

    /**
     * Deserializes the operations
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeOperations',
    value: function () {
      var _ref = _asyncToGenerator(_regenerator2.default.mark(function _callee() {
        var operations, instances, i, operation, instance;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                operations = this._data.operations;
                instances = [];
                i = 0;

              case 3:
                if (!(i < operations.length)) {
                  _context.next = 12;
                  break;
                }

                operation = operations[i];
                _context.next = 7;
                return this._deserializeOperation(operation);

              case 7:
                instance = _context.sent;

                instances.push(instance);

              case 9:
                i++;
                _context.next = 3;
                break;

              case 12:
                return _context.abrupt('return', instances);

              case 13:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _deserializeOperations() {
        return _ref.apply(this, arguments);
      }

      return _deserializeOperations;
    }()

    /**
     * Deserializes the given operation
     * @param  {PhotoEditorSDK.Operation} operation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeOperation',
    value: function _deserializeOperation(operation) {
      switch (operation.type) {
        case 'crop':
          return this._deserializeCropOperation(operation);
        case 'orientation':
          return this._deserializeOrientationOperation(operation);
        case 'filter':
          return this._deserializeFilterOperation(operation);
        case 'adjustments':
          return this._deserializeAdjustmentsOperation(operation);
        case 'sprite':
          return this._deserializeSpriteOperation(operation);
        case 'focus':
          return this._deserializeFocusOperation(operation);
      }
    }

    /**
     * Deserializes the given crop operation
     * @param  {Object} operation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeCropOperation',
    value: function _deserializeCropOperation(operation) {
      var options = operation.options;
      var rotation = options.rotation;

      var start = _globals.Vector2.fromObject(options.start);
      var end = _globals.Vector2.fromObject(options.end);

      // Normalize rotation
      if (rotation > Math.PI) {
        rotation -= Math.PI * 2;
      }

      var cropOptions = { start: start, end: end };
      if (typeof rotation !== 'undefined') {
        cropOptions.rotation = rotation;
      }

      var transformOperation = this._editor.operations.getOrCreate('transform');
      this._editor.broadcastTransform(transformOperation, cropOptions);
      transformOperation.set(cropOptions);
      return Promise.resolve(transformOperation);
    }

    /**
     * Deserializes the given orientation operation
     * @param  {Object} operation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeOrientationOperation',
    value: function _deserializeOrientationOperation(operation) {
      var options = operation.options;

      var orientationOperation = this._editor.operations.getOrCreate('orientation');
      if (!orientationOperation) return Promise.resolve();
      orientationOperation.set(options);
      return Promise.resolve(orientationOperation);
    }

    /**
     * Deserializes the given filter operation
     * @param  {Object} operation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeFilterOperation',
    value: function _deserializeFilterOperation(operation) {
      var _this3 = this;

      var options = operation.options;


      if (!this._filterManager.getFilterByIdentifier(options.name)) {
        _globals.Log.warn('Deserializer', 'Unknown filter `' + options.name + '`');
        return Promise.resolve();
      }

      return this._filterManager.instantiateFilterWithIdentifier(options.name).then(function (filter) {
        var filterOperation = _this3._editor.operations.getOrCreate('filter');
        filterOperation.set({
          identifier: options.name,
          filter: filter,
          intensity: options.intensity
        });
        return filterOperation;
      });
    }

    /**
     * Deserializes the given adjustments operation
     * @param  {Object} operation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeAdjustmentsOperation',
    value: function _deserializeAdjustmentsOperation(operation) {
      var AdjustmentsOperation = _globals.SDK.Operations.AdjustmentsOperation;
      var options = operation.options;


      var knownOptions = ['brightness', 'saturation', 'contrast', 'exposure', 'shadows', 'highlights', 'clarity'];

      var operationOptions = {};

      knownOptions.forEach(function (optionName) {
        if (typeof options[optionName] === 'undefined') return;

        var _AdjustmentsOperation = AdjustmentsOperation.prototype.availableOptions[optionName],
            minValue = _AdjustmentsOperation.minValue,
            midValue = _AdjustmentsOperation.midValue,
            maxValue = _AdjustmentsOperation.maxValue;

        var value = options[optionName];

        value = value < 0 ? midValue + (midValue - minValue) * value : midValue + (maxValue - midValue) * value;
        operationOptions[optionName] = value;
      });

      return Promise.resolve(this._editor.operations.getOrCreate('adjustments', operationOptions));
    }

    /**
     * Deserializes the given sprite operation
     * @param  {Object} operation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeSpriteOperation',
    value: function _deserializeSpriteOperation(operation) {
      var _this4 = this;

      var options = operation.options;

      var spriteOperation = this._editor.operations.getOrCreate('sprite');
      if (!spriteOperation) return Promise.resolve();

      var promises = options.sprites.map(function (sprite) {
        return _this4._deserializeSprite(spriteOperation, sprite);
      }).filter(function (p) {
        return p;
      });
      return Promise.all(promises).then(function (sprites) {
        spriteOperation.setSprites(sprites.filter(function (s) {
          return s;
        }));
        return spriteOperation;
      });
    }

    /**
     * Deserializes the given sprite
     * @param  {PhotoEditorSDK.Operations.SpriteOperation} spriteOperation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.Sprite} sprite
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeSprite',
    value: function _deserializeSprite(spriteOperation, sprite) {
      switch (sprite.type) {
        case 'sticker':
          return this._deserializeSticker(spriteOperation, sprite);
        case 'text':
          return this._deserializeText(spriteOperation, sprite);
        case 'brush':
          return this._deserializeBrush(spriteOperation, sprite);
        case 'textdesign':
          return this._deserializeTextDesign && this._deserializeTextDesign(spriteOperation, sprite);
      }
    }

    /**
     * Deserializes the given sticker for the given operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation} operation
     * @param  {Object} sprite
     * @return {PhotoEditorSDK.Operations.SpriteOperation.StickerSprite}
     * @private
     */

  }, {
    key: '_deserializeSticker',
    value: function _deserializeSticker(operation, sprite) {
      var _this5 = this;

      var SpriteOperation = _globals.SDK.Operations.SpriteOperation;
      var options = sprite.options;


      var sticker = this._stickerManager.getStickerByIdentifier(options.name);
      var url = this._stickerManager.getURLForSticker(sticker);
      if (!sticker) {
        _globals.Log.warn('Deserializer', 'Unknown sticker \'' + options.name + '\'. Skipping sprite.');
        return Promise.resolve();
      }
      return new Promise(function (resolve, reject) {
        var image = new window.Image();
        image.addEventListener('load', function () {
          var adjustments = SpriteOperation.StickerSprite.prototype.availableOptions.adjustments.structure;
          var rotation = options.rotation,
              flipHorizontally = options.flipHorizontally,
              flipVertically = options.flipVertically;

          var stickerOptions = {
            identifier: options.name,
            image: image,
            position: _globals.Vector2.fromObject(options.position),
            dimensions: _globals.Vector2.fromObject(options.dimensions),
            rotation: rotation,
            flipHorizontally: flipHorizontally,
            flipVertically: flipVertically,
            adjustments: {}
          };

          if (typeof options.adjustments !== 'undefined') {
            ['brightness', 'contrast', 'saturation'].forEach(function (option) {
              if (typeof options.adjustments[option] !== 'undefined') {
                stickerOptions.adjustments[option] = options.adjustments[option] + adjustments[option].default;
              }
            });
          }

          resolve(operation.createSticker(stickerOptions));
        });
        image.crossOrigin = _this5._editor.getCrossOrigin();
        image.src = _this5._editor.getUI().getAssetPath(url);
      });
    }

    /**
     * Deserializes the given text for the given operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation} operation
     * @param  {Object} text
     * @return {PhotoEditorSDK.Operations.SpriteOperation.TextSprite}
     * @private
     */

  }, {
    key: '_deserializeText',
    value: function _deserializeText(operation, text) {
      var options = text.options;
      var fontSize = options.fontSize,
          lineHeight = options.lineHeight,
          fontFamily = options.fontFamily,
          fontWeight = options.fontWeight,
          alignment = options.alignment,
          rotation = options.rotation,
          maxWidth = options.maxWidth,
          color = options.color,
          backgroundColor = options.backgroundColor;


      var fontLoader = new _fontLoader2.default(this._ui);
      var font = this._fontManager.getFontByFontFamily(fontFamily);
      if (!font) font = this._fontManager.getDefaultFont();
      fontLoader.setFonts([font]);
      return fontLoader.load().then(function () {
        return operation.createText({
          fontSize: fontSize,
          lineHeight: lineHeight,
          fontFamily: fontFamily,
          fontWeight: fontWeight,
          alignment: alignment,
          rotation: rotation,
          maxWidth: maxWidth,
          text: options.text,
          color: _globals.Color.fromArray(color),
          backgroundColor: _globals.Color.fromArray(backgroundColor),
          position: _globals.Vector2.fromObject(options.position)
        });
      });
    }

    /**
     * Deserializes the given brush for the given operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation} operation
     * @param  {Object} brush
     * @return {PhotoEditorSDK.Operations.SpriteOperation.BrushSprite}
     * @private
     */

  }, {
    key: '_deserializeBrush',
    value: function _deserializeBrush(operation, brush) {
      var _this6 = this;

      var options = brush.options;
      var paths = options.paths;


      var brushSprite = operation.createBrush();
      paths.forEach(function (path) {
        _this6._deserializeBrushPath(brushSprite, path);
      });
      return Promise.resolve(brushSprite);
    }
  }, {
    key: '_deserializeBrushPath',
    value: function _deserializeBrushPath(brushSprite, path) {
      var points = path.points;


      var brushInstance = this._createBrushForPath(path);
      var pathObject = brushSprite.createPath(brushInstance);
      pathObject.setClosed(true);
      points.forEach(function (point) {
        pathObject.addControlPoint(_globals.Vector2.fromObject(point));
      });
    }

    /**
     * Creates a brush face with the given options
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.Sprites.BrushSprite.Path} path
     * @return {PhotoEditorSDK.Operations.SpriteOperation.Sprites.BrushSprite.Brush}
     */

  }, {
    key: '_createBrushForPath',
    value: function _createBrushForPath(path) {
      var color = path.color,
          size = path.size;

      var colorObject = _globals.Color.fromArray(color);

      var brushOptions = {
        color: colorObject,
        size: size
      };

      var rawBrush = this._brushManager.getFirstBrush();
      if (rawBrush.prototype && rawBrush.prototype instanceof Brush) {
        // Custom Brush instance, used for special brushes such as radial brush, which has
        // an additional hardness option
        var BrushClass = rawBrush;
        return new BrushClass(brushOptions);
      } else {
        var _brush = _globals.SDKUtils.extend({}, rawBrush);
        delete _brush.image;

        var _BrushClass = function (_Brush) {
          _inherits(_BrushClass, _Brush);

          function _BrushClass() {
            _classCallCheck(this, _BrushClass);

            return _possibleConstructorReturn(this, (_BrushClass.__proto__ || Object.getPrototypeOf(_BrushClass)).apply(this, arguments));
          }

          return _BrushClass;
        }(Brush);

        _BrushClass.identifier = rawBrush.identifier;

        // Plain JS object, used for simple image brushes
        return new _BrushClass(_globals.SDKUtils.extend({}, _brush, brushOptions));
      }
    }

    /**
     * Deserializes the given focus operation
     * @param  {Object} operation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeFocusOperation',
    value: function _deserializeFocusOperation(operation) {
      var options = operation.options.options;

      switch (operation.options.type) {
        case 'radial':
          {
            var position = options.position,
                radius = options.radius,
                gradientRadius = options.gradientRadius,
                blurRadius = options.blurRadius;

            return Promise.resolve(this._editor.operations.getOrCreate('radial-focus', {
              position: _globals.Vector2.fromObject(position),
              radius: radius,
              gradientRadius: gradientRadius,
              blurRadius: blurRadius
            }));
          }
        case 'linear':
          {
            var start = options.start,
                end = options.end,
                size = options.size,
                gradientSize = options.gradientSize,
                _blurRadius = options.blurRadius;

            return Promise.resolve(this._editor.operations.getOrCreate('mirrored-focus', {
              start: _globals.Vector2.fromObject(start),
              end: _globals.Vector2.fromObject(end),
              size: size,
              gradientSize: gradientSize,
              blurRadius: _blurRadius
            }));
          }
      }
    }

    /**
     * Returns the input dimensions for the given operation
     * @param  {PhotoEditorSDK.Operation} operation
     * @return {PhotoEditorSDK.Math.Vector2}
     * @private
     */

  }, {
    key: '_getInputDimensionsForOperation',
    value: function _getInputDimensionsForOperation(operation) {
      var operationFound = false;
      var inputDimensions = this._editor.getInputDimensions();

      this._editor.operations.getStack().forEach(function (op) {
        if (op === operation) operationFound = true;
        if (operationFound) return;
        inputDimensions = op.getNewDimensions(inputDimensions);
      });

      return inputDimensions;
    }
  }]);

  return v100Deserializer;
}();

exports.default = v100Deserializer;


v100Deserializer.version = '1.0.0';

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _fontObserver = __webpack_require__(178);

var _fontObserver2 = _interopRequireDefault(_fontObserver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseFontLoader = function () {
  function BaseFontLoader(ui) {
    _classCallCheck(this, BaseFontLoader);

    this._ui = ui;
    this._fonts = [];
    this._observers = [];
  }

  /**
   * Adds the given font to the list of fonts to load
   * @param {Object} variation
   */


  _createClass(BaseFontLoader, [{
    key: 'add',
    value: function add(variation) {
      this._fonts.push(variation);
    }

    /**
     * Loads the fonts
     */

  }, {
    key: 'load',
    value: function load() {
      var _this = this;

      if (this._fonts.length === 0) {
        return Promise.resolve();
      }

      this._observers = [];
      this._fonts.forEach(function (variation) {
        _this._observers.push(new _fontObserver2.default(variation));
      });

      return Promise.all(this._observers.map(function (observer) {
        return observer.observe();
      }));
    }

    /**
     * Disposes the observers
     */

  }, {
    key: 'dispose',
    value: function dispose() {
      this._observers.forEach(function (observer) {
        return observer.dispose();
      });
    }
  }]);

  return BaseFontLoader;
}();

exports.default = BaseFontLoader;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _serializer = __webpack_require__(50);

var _serializer2 = _interopRequireDefault(_serializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var TWICE_PI = Math.PI * 2;

var v101Serializer = function (_PreviousSerializer) {
  _inherits(v101Serializer, _PreviousSerializer);

  function v101Serializer() {
    _classCallCheck(this, v101Serializer);

    return _possibleConstructorReturn(this, (v101Serializer.__proto__ || Object.getPrototypeOf(v101Serializer)).apply(this, arguments));
  }

  _createClass(v101Serializer, [{
    key: '_serializeTransformOperation',

    /**
     * Serializes the given transform operation
     * @param  {PhotoEditorSDK.Operation.TransformOperation} operation
     * @return {Object}
     * @private
     */
    value: function _serializeTransformOperation(operation) {
      var options = operation.serializeOptions(['start', 'end', 'rotation', 'textureScale'], true);
      options.rotation = (options.rotation + TWICE_PI) % TWICE_PI;
      if (options.textureScale !== 1) {
        options.dimensions = operation.getNewDimensions(operation.getInputDimensions(false));
      }

      delete options.textureScale;
      return {
        type: 'crop',
        options: options
      };
    }
  }]);

  return v101Serializer;
}(_serializer2.default);

exports.default = v101Serializer;


v101Serializer.version = '1.0.1';

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _deserializer = __webpack_require__(51);

var _deserializer2 = _interopRequireDefault(_deserializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var v101Deserializer = function (_PreviousDeserializer) {
  _inherits(v101Deserializer, _PreviousDeserializer);

  function v101Deserializer() {
    _classCallCheck(this, v101Deserializer);

    return _possibleConstructorReturn(this, (v101Deserializer.__proto__ || Object.getPrototypeOf(v101Deserializer)).apply(this, arguments));
  }

  _createClass(v101Deserializer, [{
    key: '_deserializeOperation',

    /**
     * Deserializes the given operation
     * @param  {PhotoEditorSDK.Operation} operation
     * @return {Promise}
     * @private
     */
    value: function _deserializeOperation(operation) {
      if (operation.type === 'selective-blur') {
        return this._deserializeSelectiveBlurOperation(operation);
      }
      return _get(v101Deserializer.prototype.__proto__ || Object.getPrototypeOf(v101Deserializer.prototype), '_deserializeOperation', this).call(this, operation);
    }

    /**
     * Deserializes the given crop operation
     * @param  {PhotoEditorSDK.Operation} operation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeCropOperation',
    value: function _deserializeCropOperation(operation) {
      // New in 1.0.1: `dimensions` option
      var options = operation.options;
      var rotation = options.rotation;

      var start = _globals.Vector2.fromObject(options.start);
      var end = _globals.Vector2.fromObject(options.end);
      var dimensions = options.dimensions ? _globals.Vector2.fromObject(options.dimensions) : null;

      // Normalize rotation
      if (rotation > Math.PI) {
        rotation -= Math.PI * 2;
      }

      var cropOptions = {
        start: start, end: end
      };

      if (typeof rotation !== 'undefined') cropOptions.rotation = rotation;

      var transformOperation = this._editor.operations.getOrCreate('transform');
      if (!transformOperation) return Promise.resolve();

      this._editor.broadcastTransform(transformOperation, cropOptions);
      transformOperation.set(cropOptions);

      if (dimensions) {
        var size = end.clone().subtract(start);
        var transformDimensions = transformOperation.getInputDimensions(false).multiply(size);
        transformOperation.setTextureScale(dimensions.x / transformDimensions.x);
      }

      return Promise.resolve(transformOperation);
    }
  }]);

  return v101Deserializer;
}(_deserializer2.default);

exports.default = v101Deserializer;


v101Deserializer.version = '1.0.1';

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _OverlayFilter$BLEND_;

var _globals = __webpack_require__(0);

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var OverlayFilter = _globals.SDK.Engine.Filters.OverlayFilter;
exports.default = (_OverlayFilter$BLEND_ = {}, _defineProperty(_OverlayFilter$BLEND_, OverlayFilter.BLEND_MODES.NORMAL, 'normal'), _defineProperty(_OverlayFilter$BLEND_, OverlayFilter.BLEND_MODES.OVERLAY, 'overlay'), _defineProperty(_OverlayFilter$BLEND_, OverlayFilter.BLEND_MODES.HARD_LIGHT, 'hard light'), _defineProperty(_OverlayFilter$BLEND_, OverlayFilter.BLEND_MODES.SOFT_LIGHT, 'soft light'), _defineProperty(_OverlayFilter$BLEND_, OverlayFilter.BLEND_MODES.MULTIPLY, 'multiply'), _defineProperty(_OverlayFilter$BLEND_, OverlayFilter.BLEND_MODES.DARKEN, 'darken'), _defineProperty(_OverlayFilter$BLEND_, OverlayFilter.BLEND_MODES.LIGHTEN, 'lighten'), _defineProperty(_OverlayFilter$BLEND_, OverlayFilter.BLEND_MODES.SCREEN, 'screen'), _defineProperty(_OverlayFilter$BLEND_, OverlayFilter.BLEND_MODES.COLOR_BURN, 'color burn'), _OverlayFilter$BLEND_);

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _serializer = __webpack_require__(31);

var _serializer2 = _interopRequireDefault(_serializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var v300Serializer = function (_PreviousSerializer) {
  _inherits(v300Serializer, _PreviousSerializer);

  function v300Serializer() {
    _classCallCheck(this, v300Serializer);

    return _possibleConstructorReturn(this, (v300Serializer.__proto__ || Object.getPrototypeOf(v300Serializer)).apply(this, arguments));
  }

  _createClass(v300Serializer, [{
    key: 'serialize',

    /**
     * Serializes the editor state
     * @param {Object} options = {}
     * @return {Promise}
     */
    value: function serialize() {
      var _this2 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _get(v300Serializer.prototype.__proto__ || Object.getPrototypeOf(v300Serializer.prototype), 'serialize', this).call(this, options).then(function (data) {
        data.meta = {
          platform: 'html5',
          version: _this2._editor.getSDK().version,
          createdAt: _globals.SDKUtils.ISODateString(new Date())
        };
        data.image = data.inputImage;
        delete data.inputImage;
        return data;
      });
    }

    /**
     * Serializes the given sticker
     * @param  {PhotoEditorSDK.Operation} operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.StickerSprite} sprite
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeSticker',
    value: function _serializeSticker(operation, sprite) {
      var response = _get(v300Serializer.prototype.__proto__ || Object.getPrototypeOf(v300Serializer.prototype), '_serializeSticker', this).call(this, operation, sprite);
      response.options.alpha = sprite.getAlpha();

      if (response.options.tintColor) {
        response.options.tintColor = {
          rgba: response.options.tintColor
        };
      }

      return response;
    }

    /**
     * Serializes the given text sprite
     * @param  {PhotoEditorSDK.Operation} operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.TextSprite} sprite
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeText',
    value: function _serializeText(operation, sprite) {
      var response = _get(v300Serializer.prototype.__proto__ || Object.getPrototypeOf(v300Serializer.prototype), '_serializeText', this).call(this, operation, sprite);
      response.options.color = {
        rgba: response.options.color
      };
      response.options.backgroundColor = {
        rgba: response.options.backgroundColor
      };
      response.options.flipHorizontally = false;
      response.options.flipVertically = false;
      delete response.options.fontWeight;
      return response;
    }

    /**
     * Serializes the given path
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.BrushSprite.Path} path
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializePath',
    value: function _serializePath(path) {
      var response = _get(v300Serializer.prototype.__proto__ || Object.getPrototypeOf(v300Serializer.prototype), '_serializePath', this).call(this, path);

      delete response.hardness;
      delete response.size;
      delete response.color;

      var brush = path.getBrush();
      response.brush = brush.serializeOptions(['identifier', 'size', 'color'], true);
      if (typeof response.brush.identifier === 'undefined') {
        delete response.brush.identifier;
      }
      response.brush.color = {
        rgba: response.brush.color
      };

      var hardness = brush.getOption('hardness');
      if (hardness !== 'undefined') {
        response.brush.hardness = hardness;
      }
      return response;
    }

    /**
     * Serializes the frame operation
     * @param {PhotoEditorSDK.Operation.FrameOperation} operation
     * @param {PhotoEditorSDK.Operation[]} operations
     * @private
     */

  }, {
    key: '_serializeFrameOperation',
    value: function _serializeFrameOperation(operation, operations) {
      _get(v300Serializer.prototype.__proto__ || Object.getPrototypeOf(v300Serializer.prototype), '_serializeFrameOperation', this).call(this, operation, operations);

      // Find sprite operation and frame sprite from serialized data
      var spriteOperations = operations.filter(function (o) {
        return o.type === 'sprite';
      });
      var spriteOperation = void 0;
      if (spriteOperations.length) {
        spriteOperation = spriteOperations.pop();
        var frame = spriteOperation.options.sprites.filter(function (s) {
          return s.type === 'frame';
        })[0];

        var tintColor = operation.getTintColor();
        if (!tintColor.equals(new _globals.Color(1, 1, 1, 0))) {
          frame.options.tintColor = {
            rgba: operation.serializeOption('tintColor', true)
          };
        }

        var options = operation.serializeOptions(['scale', 'alpha'], true);
        frame.options = _globals.SDKUtils.extend(frame.options, options);
        frame.options.size = frame.options.scale;
        delete frame.options.scale;
      }
    }

    /**
     * Serializes the given transform operation
     * @param  {PhotoEditorSDK.Operation.TransformOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeTransformOperation',
    value: function _serializeTransformOperation(operation) {
      var response = _get(v300Serializer.prototype.__proto__ || Object.getPrototypeOf(v300Serializer.prototype), '_serializeTransformOperation', this).call(this, operation);

      if (operation._ratio) {
        response.options.meta = {
          identifier: operation._ratio.identifier
        };
      }
      delete response.options.scale;

      return response;
    }

    /**
     * Serializes the given adjustments operation
     * @param  {PhotoEditorSDK.Operations.AdjustmentsOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeAdjustmentsOperation',
    value: function _serializeAdjustmentsOperation(operation) {
      var response = _get(v300Serializer.prototype.__proto__ || Object.getPrototypeOf(v300Serializer.prototype), '_serializeAdjustmentsOperation', this).call(this, operation);

      var optionNames = ['gamma', 'whites', 'blacks', 'temperature'];

      var availableOptions = operation.availableOptions;

      var options = {};
      optionNames.forEach(function (optionName) {
        var option = availableOptions[optionName];
        var value = operation.getOption(optionName);
        var minValue = option.minValue,
            midValue = option.midValue,
            maxValue = option.maxValue;

        options[optionName] = value <= midValue ? (value - minValue) / (midValue - minValue) - 1 : (value - midValue) / (maxValue - midValue);
      });

      response.options = _extends({}, response.options, options);

      return response;
    }

    /**
     * Serializes the given operation
     * @param  {PhotoEditorSDK.Operation} operation
     * @param  {PhotoEditorSDK.Operation[]} operations
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeOperation',
    value: function _serializeOperation(operation, operations) {
      switch (operation.constructor.identifier) {
        case 'mirrored-focus':
          return this._serializeMirroredFocusOperation(operation);
        case 'linear-focus':
          return this._serializeLinearFocusOperation(operation);
        case 'blur':
          return this._serializeBlurOperation(operation);
        default:
          return _get(v300Serializer.prototype.__proto__ || Object.getPrototypeOf(v300Serializer.prototype), '_serializeOperation', this).call(this, operation, operations);
      }
    }

    /**
     * Serializes the given mirrored focus operation
     * @param  {PhotoEditorSDK.Operations.MirroredFocusOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeMirroredFocusOperation',
    value: function _serializeMirroredFocusOperation(operation) {
      return {
        type: 'focus',
        options: {
          type: 'mirrored',
          options: operation.serializeOptions(['start', 'end', 'blurRadius', 'size', 'gradientSize'], true)
        }
      };
    }

    /**
     * Serializes the given linear focus operation
     * @param  {PhotoEditorSDK.Operations.LinearFocusOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeLinearFocusOperation',
    value: function _serializeLinearFocusOperation(operation) {
      var options = operation.serializeOptions(['controlPoint1', 'controlPoint2', 'blurRadius'], true);
      options.start = options.controlPoint1;
      delete options.controlPoint1;
      options.end = options.controlPoint2;
      delete options.controlPoint2;

      return {
        type: 'focus',
        options: {
          type: 'linear',
          options: options
        }
      };
    }

    /**
     * Serializes the given blur operation
     * @param  {PhotoEditorSDK.Operations.BlurOperation} operation
     * @return {Object}
     * @private
     */

  }, {
    key: '_serializeBlurOperation',
    value: function _serializeBlurOperation(operation) {
      return {
        type: 'focus',
        options: {
          type: 'gaussian',
          options: operation.serializeOptions(['blurRadius'], true)
        }
      };
    }
  }]);

  return v300Serializer;
}(_serializer2.default);

exports.default = v300Serializer;


v300Serializer.version = '3.0.0';

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _deserializer = __webpack_require__(32);

var _deserializer2 = _interopRequireDefault(_deserializer);

var _stickerManager = __webpack_require__(11);

var _stickerManager2 = _interopRequireDefault(_stickerManager);

var _textDesignManager = __webpack_require__(58);

var _textDesignManager2 = _interopRequireDefault(_textDesignManager);

var _imageLoader = __webpack_require__(23);

var _imageLoader2 = _interopRequireDefault(_imageLoader);

var _fontManager = __webpack_require__(15);

var _fontManager2 = _interopRequireDefault(_fontManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var Brush = void 0;
if (typeof _globals.SDK.Operations.SpriteOperation !== 'undefined') {
  Brush = _globals.SDK.Operations.SpriteOperation.BrushSprite.Brush;
}

var v300Deserializer = function (_PreviousDeserializer) {
  _inherits(v300Deserializer, _PreviousDeserializer);

  function v300Deserializer() {
    _classCallCheck(this, v300Deserializer);

    return _possibleConstructorReturn(this, (v300Deserializer.__proto__ || Object.getPrototypeOf(v300Deserializer)).apply(this, arguments));
  }

  _createClass(v300Deserializer, [{
    key: '_deserializeSticker',

    /**
     * Deserializes the given sticker for the given operation
     * @param  {Object} operation
     * @param  {Object} sprite
     * @return {PhotoEditorSDK.Operations.SpriteOperation.StickerSprite}
     * @private
     */
    value: function _deserializeSticker(operation, sprite) {
      var SpriteOperation = _globals.SDK.Operations.SpriteOperation;
      var options = sprite.options;

      var sticker = this._stickerManager.getStickerByIdentifier(options.identifier);
      if (!sticker) {
        _globals.Log.warn('Deserializer', 'Unknown sticker `' + options.identifier + '`. Skipping sprite.');
        return Promise.resolve();
      }
      var url = _stickerManager2.default.getURLForSticker(sticker, 'base');
      var resolvedUrl = this._editor.getUI().getAssetPath(url);
      var inputDimensions = operation.getInputDimensions(false);
      return _imageLoader2.default.load(resolvedUrl).then(function (image) {
        var adjustments = SpriteOperation.StickerSprite.prototype.availableOptions.adjustments.structure;
        var rotation = options.rotation,
            flipHorizontally = options.flipHorizontally,
            flipVertically = options.flipVertically;

        var stickerOptions = {
          identifier: options.identifier,
          image: image,
          position: _globals.Vector2.fromObject(options.position),
          dimensions: _globals.Vector2.fromObject(options.dimensions).multiply(inputDimensions.min()),
          rotation: rotation || 0,
          flipHorizontally: flipHorizontally,
          flipVertically: flipVertically,
          adjustments: {}
        };

        if (typeof options.adjustments !== 'undefined') {
          ['brightness', 'contrast', 'saturation'].forEach(function (option) {
            if (typeof options.adjustments[option] !== 'undefined') {
              stickerOptions.adjustments[option] = options.adjustments[option] + adjustments[option].default;
            }
          });
        }

        if (typeof options.tintColor !== 'undefined' && typeof sticker.tintMode !== 'undefined') {
          stickerOptions.tintColor = _globals.Color.fromArray(options.tintColor.rgba);
          stickerOptions.tintMode = sticker.tintMode;
        }

        if (typeof options.alpha !== 'undefined') {
          stickerOptions.alpha = options.alpha;
        }

        return operation.createSticker(stickerOptions);
      });
    }

    /**
     * Deserializes the given transform operation
     * @param  {Object} operationData
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeTransformOperation',
    value: function _deserializeTransformOperation(operationData) {
      return _get(v300Deserializer.prototype.__proto__ || Object.getPrototypeOf(v300Deserializer.prototype), '_deserializeTransformOperation', this).call(this, operationData).then(function (operation) {
        if (!operation) return;

        // TODO: Get correct ratio
        operation._ratio = null;
        return operation;
      });
    }

    /**
     * Deserializes the input image (if present)
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeInputImage',
    value: function _deserializeInputImage() {
      var _this2 = this;

      var _data$image = this._data.image,
          data = _data$image.data,
          type = _data$image.type,
          uri = _data$image.uri;


      if (data && type) {
        uri = 'data:' + type + ';base64,' + data;
      }

      if (uri) {
        return _imageLoader2.default.load(uri).then(function (image) {
          _this2._editor.setImage(image);
        });
      } else {
        return Promise.resolve();
      }
    }

    /**
     * Deserializes the given adjustments operation
     * @param  {Object} operationData
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeAdjustmentsOperation',
    value: function _deserializeAdjustmentsOperation(operationData) {
      var AdjustmentsOperation = _globals.SDK.Operations.AdjustmentsOperation;

      return _get(v300Deserializer.prototype.__proto__ || Object.getPrototypeOf(v300Deserializer.prototype), '_deserializeAdjustmentsOperation', this).call(this, operationData).then(function (operation) {
        if (!operation) return null;

        var options = operationData.options;

        var knownOptions = ['gamma', 'whites', 'blacks', 'temperature'];
        var operationOptions = {};

        knownOptions.forEach(function (optionName) {
          if (typeof options[optionName] === 'undefined') return;

          var _AdjustmentsOperation = AdjustmentsOperation.prototype.availableOptions[optionName],
              minValue = _AdjustmentsOperation.minValue,
              midValue = _AdjustmentsOperation.midValue,
              maxValue = _AdjustmentsOperation.maxValue;

          var value = options[optionName];

          value = value < 0 ? midValue + (midValue - minValue) * value : midValue + (maxValue - midValue) * value;
          operationOptions[optionName] = value;
        });

        operation.set(operationOptions);

        return operation;
      });
    }

    /**
     * Deserializes the given focus operation
     * @param  {Object} operationData
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeFocusOperation',
    value: function _deserializeFocusOperation(operationData) {
      var options = operationData.options.options;

      switch (operationData.options.type) {
        case 'radial':
          return _get(v300Deserializer.prototype.__proto__ || Object.getPrototypeOf(v300Deserializer.prototype), '_deserializeFocusOperation', this).call(this, operationData);
        case 'linear':
          {
            var start = options.start,
                end = options.end,
                blurRadius = options.blurRadius;

            return Promise.resolve(this._editor.operations.getOrCreate('linear-focus', {
              controlPoint1: _globals.Vector2.fromObject(start),
              controlPoint2: _globals.Vector2.fromObject(end),
              blurRadius: blurRadius
            }));
          }
        case 'mirrored':
          {
            var _start = options.start,
                _end = options.end,
                size = options.size,
                gradientSize = options.gradientSize,
                _blurRadius = options.blurRadius;

            return Promise.resolve(this._editor.operations.getOrCreate('mirrored-focus', {
              start: _globals.Vector2.fromObject(_start),
              end: _globals.Vector2.fromObject(_end),
              size: size,
              gradientSize: gradientSize,
              blurRadius: _blurRadius
            }));
          }
        case 'gaussian':
          {
            var _blurRadius2 = options.blurRadius;

            return Promise.resolve(this._editor.operations.getOrCreate('blur', {
              blurRadius: _blurRadius2
            }));
          }
      }
    }

    /**
     * Deserializes the given text for the given operation
     * @param  {PhotoEditorSDK.Operations.SpriteOperation} operation
     * @param  {Object} text
     * @return {PhotoEditorSDK.Operations.SpriteOperation.TextSprite}
     * @private
     */

  }, {
    key: '_deserializeText',
    value: function _deserializeText(operation, text) {
      var options = text.options;
      var fontSize = options.fontSize,
          lineHeight = options.lineHeight,
          fontIdentifier = options.fontIdentifier,
          alignment = options.alignment,
          rotation = options.rotation,
          maxWidth = options.maxWidth,
          color = options.color,
          backgroundColor = options.backgroundColor;


      var fontLoader = this._ui.getFontLoader();
      var variation = this._fontManager.getVariationByIdentifier(fontIdentifier);
      if (!variation) {
        variation = this._fontManager.getDefaultVariation();
      } else {
        fontLoader.setFonts([variation.getFont()]);
      }
      return fontLoader.load().then(function () {
        var inputDimensions = operation.getInputDimensions(false);

        // For whatever reason, max width is relative to shortest side, while font size isn't
        var fixedMaxWidth = maxWidth * inputDimensions.min() / inputDimensions.x;
        return operation.createText({
          fontSize: fontSize,
          lineHeight: lineHeight,
          fontFamily: variation.getFontFamily(),
          fontWeight: variation.getFontWeight(),
          fontIdentifier: variation.getIdentifier(),
          textMetrics: variation.getTextMetrics(),
          alignment: alignment,
          rotation: rotation,
          maxWidth: fixedMaxWidth,
          text: options.text,
          color: _globals.Color.fromArray(color.rgba),
          backgroundColor: _globals.Color.fromArray(backgroundColor.rgba),
          position: _globals.Vector2.fromObject(options.position)
        });
      });
    }

    /**
     * Creates a brush face with the given options
     * @param  {PhotoEditorSDK.Operations.SpriteOperation.Sprites.BrushSprite.Path} path
     * @return {PhotoEditorSDK.Operations.SpriteOperation.Sprites.BrushSprite.Brush}
     */

  }, {
    key: '_createBrushForPath',
    value: function _createBrushForPath(path) {
      var _path$brush = path.brush,
          identifier = _path$brush.identifier,
          color = _path$brush.color,
          size = _path$brush.size,
          hardness = _path$brush.hardness;

      var colorObject = _globals.Color.fromArray(color.rgba);

      var brushOptions = {
        color: colorObject,
        size: size
      };

      if (typeof hardness !== 'undefined') {
        brushOptions.hardness = hardness;
      }

      var rawBrush = this._brushManager.getBrushByIdentifier(identifier);
      if (!rawBrush) {
        rawBrush = this._brushManager.getFirstBrush();
      }

      if (rawBrush.prototype && rawBrush.prototype instanceof Brush) {
        // Custom Brush instance, used for special brushes such as radial brush, which has
        // an additional hardness option
        var BrushClass = rawBrush;
        return new BrushClass(brushOptions);
      } else {
        var _brush = _globals.SDKUtils.extend({}, rawBrush);
        delete _brush.image;

        var _BrushClass = function (_Brush) {
          _inherits(_BrushClass, _Brush);

          function _BrushClass() {
            _classCallCheck(this, _BrushClass);

            return _possibleConstructorReturn(this, (_BrushClass.__proto__ || Object.getPrototypeOf(_BrushClass)).apply(this, arguments));
          }

          return _BrushClass;
        }(Brush);

        _BrushClass.identifier = rawBrush.identifier;

        // Plain JS object, used for simple image brushes
        return new _BrushClass(_globals.SDKUtils.extend({}, _brush, brushOptions));
      }
    }

    /**
     * Deserializes the given frame sprite
     * @param  {PhotoEditorSDK.Operations.SpriteOperation}
     * @param  {Object} framespriteOperation
     * @return {Promise}
     * @private
     */

  }, {
    key: '_deserializeFrame',
    value: function _deserializeFrame(spriteOperation, frame) {
      var _this4 = this;

      return _get(v300Deserializer.prototype.__proto__ || Object.getPrototypeOf(v300Deserializer.prototype), '_deserializeFrame', this).call(this, spriteOperation, frame).then(function () {
        var frameOperation = _this4._editor.operations.get('frame');

        var _frame$options = frame.options,
            size = _frame$options.size,
            alpha = _frame$options.alpha,
            tintColor = _frame$options.tintColor;

        var options = {};
        if (typeof size !== 'undefined') {
          options.scale = size;
        }
        if (typeof alpha !== 'undefined') {
          options.alpha = alpha;
        }
        if (typeof tintColor !== 'undefined') {
          options.tintColor = _globals.Color.fromArray(tintColor.rgba);
        }
        frameOperation.set(options);
      });
    }
  }, {
    key: '_deserializeTextDesign',
    value: function _deserializeTextDesign(operation, sprite) {
      var _this5 = this;

      var options = sprite.options;
      var position = options.position,
          rotation = options.rotation,
          flipHorizontally = options.flipHorizontally,
          flipVertically = options.flipVertically,
          text = options.text,
          color = options.color,
          width = options.width,
          seed = options.seed,
          inverted = options.inverted,
          identifier = options.identifier;


      var textDesignManager = new _textDesignManager2.default(this._ui, this._getOptions('textdesign'));
      var fontManager = new _fontManager2.default(this._ui, { fonts: _globals.Constants.DEFAULTS.TEXT_DESIGN_FONTS, replaceFonts: true });
      var AssetManager = operation.constructor.TextDesignSprite.AssetManager;
      var fontLoader = this._ui.getFontLoader();

      var Layout = textDesignManager.getLayoutByIdentifier(identifier);

      var layout = new Layout();

      fontLoader.setFonts(fontManager.getFonts());

      AssetManager.setFonts(_extends({}, AssetManager.getFonts(), fontManager.getVariationsByIdentifier()));

      return fontLoader.load().then(function () {
        var images = layout.getImagePaths().map(function (path) {
          return { path: path, fullPath: _this5._ui.getAssetPath(path), image: null };
        });
        return AssetManager.loadImages(images).then(function () {
          layout.onImagesLoaded();

          return operation.createTextDesign({
            position: position,
            rotation: rotation,
            flipHorizontally: flipHorizontally,
            flipVertically: flipVertically,
            text: text,
            color: _globals.Color.fromArray(color.rgba),
            width: width,
            seed: seed,
            inverted: inverted,
            layout: layout
          });
        });
      });
    }
  }]);

  return v300Deserializer;
}(_deserializer2.default);

exports.default = v300Deserializer;


v300Deserializer.version = '3.0.0';

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextDesignManager = function () {
  function TextDesignManager(ui) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, TextDesignManager);

    this._ui = ui;
    this._options = options;

    this._defaultLayouts = _globals.SDK.Operations.SpriteOperation.TextDesignSprite.Layouts;
    this._layouts = [];
    this._init();
  }

  _createClass(TextDesignManager, [{
    key: '_init',
    value: function _init() {
      var _this = this;

      var availableLayouts = this._options.availableLayouts;

      this._layouts = Object.keys(this._defaultLayouts).map(function (k) {
        return {
          identifier: _this._defaultLayouts[k].identifier,
          layout: _this._defaultLayouts[k]
        };
      });

      if (availableLayouts) {
        this._layouts = this._layouts.filter(function (item) {
          return availableLayouts.indexOf(item.identifier) >= 0;
        });
      }
    }
  }, {
    key: 'getLayoutByIdentifier',
    value: function getLayoutByIdentifier(identifier) {
      var item = _globals.SDKUtils.Array.find(this._layouts, function (l) {
        return l.identifier === identifier;
      });
      return item && item.layout;
    }
  }, {
    key: 'getLayouts',
    value: function getLayouts() {
      return [].concat(_toConsumableArray(this._layouts));
    }
  }]);

  return TextDesignManager;
}();

exports.default = TextDesignManager;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* @module */
/*!
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

__webpack_require__(60);

module.exports = __webpack_require__(61).default;

/***/ }),
/* 60 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _appComponent = __webpack_require__(87);

var _appComponent2 = _interopRequireDefault(_appComponent);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

var _controlsComponent = __webpack_require__(3);

var _controlsComponent2 = _interopRequireDefault(_controlsComponent);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

var _jsonLoader = __webpack_require__(22);

var _jsonLoader2 = _interopRequireDefault(_jsonLoader);

var _preloader = __webpack_require__(196);

var _preloader2 = _interopRequireDefault(_preloader);

var _photoRoll = __webpack_require__(197);

var PhotoRoll = _interopRequireWildcard(_photoRoll);

var _controls = __webpack_require__(4);

var _controls2 = _interopRequireDefault(_controls);

var _controls3 = __webpack_require__(44);

var Controls = _interopRequireWildcard(_controls3);

var _sliderComponent = __webpack_require__(13);

var _sliderComponent2 = _interopRequireDefault(_sliderComponent);

var _sliderOverlayComponent = __webpack_require__(6);

var _sliderOverlayComponent2 = _interopRequireDefault(_sliderOverlayComponent);

var _fontLoader = __webpack_require__(30);

var _fontLoader2 = _interopRequireDefault(_fontLoader);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 * @license
 */


var bd = function bd(str) {
  return _globals.SDKUtils.byteArrayToString(_globals.Base64.decode(str));
};

/**
 * The React UI
 * @class
 * @extends PhotoEditorSDK.EventEmitter
 * @memberof PhotoEditorSDK.UI
 */

var ReactUI = function (_EventEmitter) {
  _inherits(ReactUI, _EventEmitter);

  /**
   * Creates an UI instance
   * @param  {Object} options
   * @param  {String} options.license - Your license
   * @param  {DOMElement} options.container - The container that the UI should be rendered to
   * @param  {String} [options.title = 'PhotoEditor SDK']
   * @param  {String} [options.language = 'en'] - Currently `en` and `de` are supported
   * @param  {String} [options.logLevel] - `trace`, `info`, `warn`, `error` or `log`
   * @param  {Boolean} [options.responsive = false] - Should the editor re-render on window resize?
   *
   * @param  {Boolean} [options.enableUpload = true] - Should the user be able to upload their own photos?
   * @param  {Boolean} [options.enableWebcam = true] - Enables webcam support. Disabled on mobile devices.
   *
   * @param  {Boolean} [options.showCloseButton = false] - Should the close button be displayed?
   * @param  {Boolean} [options.showHeader = true] - Should the header (with title text) be displayed?
   *                                                 Should only be set to `false` by licensees.
   * @param  {Boolean} [options.showTopBar = true] - Should the top bar (new / zoom / undo / export) be displayed?
   * @param  {String} [options.crossOrigin = 'anonymous'] - 'anonymous', 'use-credentials' or 'none'
    * @param  {Object} [options.photoRoll]
   * @param  {PhotoEditorSDK.UI.ReactUI.PhotoRoll.Provider} provider - The class providing all data
   *                                                                 for the photo roll
   *
   * @param  {Object} [options.editor]
   * @param  {Image} [options.editor.image] - The image that the user can edit
   * @param  {Image} [options.editor.watermarkImage] - An image that should be placed on top as a watermark
   * @param  {String} [options.editor.preferredRenderer = 'webgl'] - `webgl` or `canvas`
   * @param  {Number} [options.editor.pixelRatio = 1] - If none is given, PhotoEditorSDK automatically
   *   detects the current device's pixel ratio
   * @param  {Boolean} [options.editor.enableDrag = true] - Should dragging the canvas be enabled?
   * @param  {Boolean} [options.editor.enableZoom = true] - Should zooming be enabled?
   * @param  {Boolean} [options.editor.smoothDownscaling = false] - Toggles smooth downscaling
   * @param  {Boolean} [options.editor.smoothUpscaling = false] - Toggles smooth upscaling
   * @param  {Boolean} [options.editor.displayResizeMessage = true] - Should a message be displayed
   *                                                       when the image has been scaled down
   *                                                       for performance?
   * @param  {(String[]|Array[])} [options.editor.controlsOrder] - The order in which the controls are displayed.
   *                                           Available are `transform`, `filter`,
   *                                           `adjustments`, `text`, `sticker`, `brush`, `focus`,
   *                                           `frame`. Can be grouped in arrays which will be
   *                                           displayed with separators.
   * @param  {String[]} [options.editor.operationsOrder] - The order in which operations are added to
   *                                              the stack. Changing this may affect the
   *                                              performance.
   * @param  {Object} [options.editor.controlsOptions] - Options that are passed to specific controls. See
   *                                            the documentation for each control to learn more
   *                                            about available values.
   * @param {Object[]} [options.editor.forceControls] - An array of objects specifying the controls
   *                                                  the user needs to use before being able to
   *                                                  use the actual editor.
   * @param {Object[]} [options.editor.forceCrop] - If true, the editor will lauch to the transform tool
   *                                                for cropping, before any other tool is allowed.
   *
   * @param  {Object} [options.editor.maxMegaPixels] - Maximum amount of megapixels per device type
   * @param  {Number} [options.editor.maxMegaPixels.desktop = 10]
   * @param  {Number} [options.editor.maxMegaPixels.mobile = 5]
   *
   * @param  {Object} [options.editor.export]
   * @param  {Boolean} [options.editor.export.showButton = true] - Should the `export` button be displayed?
   * @param  {String} [options.editor.export.format = 'image/png'] - The export format. Available formats
   * @param  {PhotoEditorSDK.RenderType} [options.editor.export.type] - The export type (image or data url)
   * @param  {Boolean} [options.editor.export.download] - Should the result be presented as a download?
   * @param  {String} [options.editor.export.fileBasename = 'photoeditorsdk-export'] - The basename
   *                                                      of the exported file (file extension will
   *                                                      be added automatically)
   * @param {Number} [options.editor.export.quality = 0.8] - The export quality (0...1, only supported
   *                                                for JPG images)
   *
   * @param  {Object} [options.assets]
   * @param  {String} [options.assets.baseUrl = '/assets'] - Path that is prepended to all asset paths
   * @param  {Function} [options.assets.resolver] - A function resolving a path to another path.
   */
  function ReactUI() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ReactUI);

    var _this = _possibleConstructorReturn(this, (ReactUI.__proto__ || Object.getPrototypeOf(ReactUI)).call(this));

    _this._mediator = new _globals.EventEmitter();
    _this._fontLoader = new _fontLoader2.default(_this);
    _this._options = options;
    _this._initOptions();
    _this._initLanguage();
    _this._initEvents();
    _this._disposed = false;

    _this._isReady = false;
    _this._mediator.once(_globals.Constants.EVENTS.EDITOR_READY, function () {
      _this._isReady = true;
    });

    _this._globalState = new _globals.SharedState();

    _this._preloader = new _preloader2.default(_this, _this._options, _this._mediator);

    _globals.Log.setLevel(_this._options.logLevel);

    if (!_this._options.license || _this._v()) {
      _this.run();
    }
    return _this;
  }

  /**
   * Main entry point for the UI
   * @private
   */


  _createClass(ReactUI, [{
    key: 'run',
    value: function run() {
      this._registerWebFonts();

      // Container has to be position: relative
      this._options.container.style.position = 'relative';
      this._render();
    }

    /**
     * Renders the UI
     * @private
     */

  }, {
    key: '_render',
    value: function _render() {
      var _this2 = this;

      var component = _globals.React.createElement(_appComponent2.default, {
        ui: this,
        mediator: this._mediator,
        ref: function ref(c) {
          _this2._component = c;
        },
        globalState: this._globalState,
        options: this._options });

      if (this._options.renderReturnsComponent) {
        return component;
      } else {
        _globals.ReactDOM.render(component, this._options.container);
      }
    }

    /**
     * Exports an image
     * @param {Boolean} download = false
     * @return {Promise}
     */

  }, {
    key: 'export',
    value: function _export() {
      var _component;

      return (_component = this._component).export.apply(_component, arguments);
    }

    /**
     * Serializes the editor state
     * @return {Promise}
     */

  }, {
    key: 'serialize',
    value: function serialize() {
      var _component2;

      return (_component2 = this._component).serialize.apply(_component2, arguments);
    }

    /**
     * Deserializes the given data
     * @param  {Object} data
     * @return {Promise}
     */

  }, {
    key: 'deserialize',
    value: function deserialize(data) {
      return this._component.deserialize(data);
    }

    /**
     * Returns the editor
     * @return {PhotoEditorSDK.UI.ReactUI.Editor}
     */

  }, {
    key: 'getEditor',
    value: function getEditor() {
      return this._component.getEditor();
    }

    /**
     * Returns true if the editor is ready for doing operations, e.g.,
     * serializing, deserializing and exporting.
     *
     * @returns {Boolean}
     */

  }, {
    key: 'isReady',
    value: function isReady() {
      return this._isReady;
    }

    /**
     * Calls a callback when the editor is ready, or immeditially if it's already
     * in a ready state.
     *
     * @param {Function} cb
     */

  }, {
    key: 'onReady',
    value: function onReady(cb) {
      if (!this._isReady) {
        this._mediator.once(_globals.Constants.EVENTS.EDITOR_READY, cb);
        this._isReady = true;
      } else {
        cb();
      }
    }

    // -------------------------------------------------------------------------- INITIALIZATION

    /**
     * Initializes the default options
     * @private
     */

  }, {
    key: '_initOptions',
    value: function _initOptions() {
      this._options = _globals.SDKUtils.defaults(this._options, {
        language: 'en',
        title: 'PhotoEditor SDK',
        logLevel: 'warn',
        crossOrigin: 'anonymous',

        preloader: true,

        editor: {},
        assets: {},
        photoRoll: {},

        enableUpload: true,
        enableWebcam: true,

        showCloseButton: false,
        showHeader: true,
        showTopBar: true,
        responsive: false
      });

      this._options.editor = _globals.SDKUtils.defaults(this._options.editor || {}, {
        pixelRatio: typeof window !== 'undefined' && window.devicePixelRatio || 1,
        preferredRenderer: 'webgl',
        enableZoom: true,
        enableDrag: true,
        smoothDownscaling: false,
        smoothUpscaling: false,
        displayResizeMessage: true,
        maxMegaPixels: {},
        forceControls: [],
        forceCrop: false,
        watermarkImage: null,
        tools: ['transform', 'filter', 'brightness', 'saturation', 'contrast', 'clarity', 'exposure', 'shadows', 'highlights', 'gamma', 'whites', 'blacks', 'temperature', 'text', 'sticker', 'brush', 'radial-focus', 'mirrored-focus', 'frame'],
        controlsOrder: ['transform', ['filter', 'adjustments'], ['text', 'sticker', 'brush'], ['selectiveBlur', 'focus', 'frame']],
        operationsOrder: [
        // First, all operations that affect the image dimensions
        'exif-orientation', // Automatically created by SDK
        'orientation', 'transform',

        // Then color operations (first filter, then fine-tuning)
        'filter', 'adjustments',

        // Then post-processing
        'radial-focus', 'mirrored-focus', 'selective-blur', 'sprite', 'frame', 'watermark'],
        controlsOptions: {}
      });

      this._options.editor.maxMegaPixels = _globals.SDKUtils.defaults(this._options.editor.maxMegaPixels, {
        mobile: 5,
        desktop: 10
      });

      this._options.editor.export = _globals.SDKUtils.defaults(this._options.editor.export || {}, {
        showButton: true,
        format: 'image/png',
        type: _globals.RenderType.IMAGE,
        download: true,
        fileBasename: 'photoeditorsdk-export',
        quality: 0.8
      });

      this._options.photoRoll = _globals.SDKUtils.defaults(this._options.photoRoll || {}, {
        provider: null
      });

      this._options.extensions = _globals.SDKUtils.defaults(this._options.extensions || {}, {
        languages: {},
        operations: [],
        controls: []
      });

      this._options.assets = _globals.SDKUtils.defaults(this._options.assets || {}, {
        baseUrl: 'assets',
        resolver: null
      });
    }

    /**
     * Validates presence of the API key
     * @return {Boolean}
     * @private
     */

  }, {
    key: '_v',
    value: function _v() {
      if (!this[bd('X29wdGlvbnM=')][bd('bGljZW5zZQ==')]) {
        // Log.error('license', 'No `license` option given.')
        _globals.Log.error(bd('TGljZW5zaW5n'), bd('Tm8gYGxpY2Vuc2VgIG9wdGlvbiBnaXZlbi4='));
        _globals.Log.error(bd('TGljZW5zaW5n'), bd('SW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIGxpY2Vuc2UgeWV0LCBwbGVhc2UgY29udGFjdCBvdXIgc2FsZXMgc3RhZmYgYXQgc2FsZXNAcGhvdG9lZGl0b3JzZGsuY29tIHRvIG9idGFpbiBhIGxpY2Vuc2Ugb3IgbG9nIGluIHRvIHlvdXIgY3VzdG9tZXIgZGFzaGJvYXJkLg=='));
        return false;
      }
      return true;
    }

    /**
     * Creates a <style> block in <head> that specifies the web fonts
     * that we use in this UI. We're doing this in JS because the assets
     * path is dynamic.
     * @private
     */

  }, {
    key: '_registerWebFonts',
    value: function _registerWebFonts() {
      var regularFontPath = this.getAssetPath('fonts/montserrat-regular.woff', true, true);
      var lightFontPath = this.getAssetPath('fonts/montserrat-light.woff', true, true);

      var css = '\n      // Injected by PhotoEditorSDK\n      @font-face {\n        font-family: "__pesdk_Montserrat";\n        src: url(\'' + regularFontPath + '\') format(\'woff\');\n        font-weight: normal;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: "__pesdk_Montserrat";\n        src: url(\'' + lightFontPath + '\') format(\'woff\');\n        font-weight: 100;\n        font-style: normal;\n      }\n    ';

      this._webFontsStyle = document.createElement('style');
      this._webFontsStyle.innerHTML = css;

      var head = document.getElementsByTagName('head')[0];
      head.appendChild(this._webFontsStyle);
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Catches mediator events and emits them here
     * @private
     */

  }, {
    key: '_initEvents',
    value: function _initEvents() {
      this._mediator.pipeEvents(this);
    }

    /**
     * Unpipes the vents
     * @private
     */

  }, {
    key: '_disposeEvents',
    value: function _disposeEvents() {
      this._mediator.unpipeEvents(this);
    }

    // -------------------------------------------------------------------------- I18N

    /**
     * Initializes the internationalization
     * @private
     */

  }, {
    key: '_initLanguage',
    value: function _initLanguage() {
      this._languages = _globals.SDKUtils.deepDefaults(this._options.extensions.languages, {
        de: __webpack_require__(202),
        en: __webpack_require__(203)
      });
      this._language = this._languages[this._options.language];
      if (!this._language) {
        _globals.Log.error(this.constructor.name, 'Language `' + this._options.language + '` not found!');
      }
    }

    /**
     * Returns the translation for `key`
     * @param  {String} key
     * @param  {Object} [interpolationOptions]
     * @return {String}
     */

  }, {
    key: 'translate',
    value: function translate(key, interpolationOptions) {
      return _globals.Utils.translate(this._language, key, interpolationOptions);
    }

    /**
     * Sets the image to the given one
     * @param {Image} image
     */

  }, {
    key: 'setImage',
    value: function setImage(image) {
      if (!this._component) return;
      this._component.setImage(image);
    }

    /**
     * Returns the resolved asset path for the given asset name
     * @param  {String} asset
     * @param  {Boolean} uiAsset = false
     * @param  {Boolean} disableRetina = false
     * @return {String}
     */

  }, {
    key: 'getAssetPath',
    value: function getAssetPath(asset) {
      var uiAsset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var disableRetina = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var _options$assets = this._options.assets,
          baseUrl = _options$assets.baseUrl,
          resolver = _options$assets.resolver;

      var path = baseUrl + '/' + asset;

      // Don't prepend baseUrl to absolute urls
      if (asset.match(/(ftp|http|https):\/\//)) {
        path = asset;
      }

      if (uiAsset) {
        if (!disableRetina) {
          // Append @2x if device's pixel ratio > 1
          var pixelRatio = typeof window !== 'undefined' && window.devicePixelRatio || 1;
          if (pixelRatio > 1) {
            var regex = /\.[\w?=]+$/;
            asset = asset.replace(regex, function (match) {
              return '@2x' + match;
            });
          }
        }

        path = baseUrl + '/ui/react/' + asset;
      }

      if (typeof resolver !== 'undefined' && resolver !== null) {
        path = resolver(path);
      }

      return path;
    }

    /**
     * Returns the font loader
     * @return {FontLoader}
     */

  }, {
    key: 'getFontLoader',
    value: function getFontLoader() {
      return this._fontLoader;
    }

    /**
     * Returns the preloader
     * @return {PhotoEditorSDK.Preloader}
     */

  }, {
    key: 'getPreloader',
    value: function getPreloader() {
      return this._preloader;
    }

    /**
     * Disposes the UI
     */

  }, {
    key: 'dispose',
    value: function dispose() {
      if (this._disposed) {
        throw new Error('This instance of PhotoEditorSDK is already disposed.');
      }
      this._disposed = true;

      // Remove web fonts style
      this._webFontsStyle.parentNode.removeChild(this._webFontsStyle);

      // Unmount AppComponent
      _globals.ReactDOM.unmountComponentAtNode(this._options.container);

      this._disposeEvents();
    }
  }]);

  return ReactUI;
}(_globals.EventEmitter);

/**
 * Export event
 *
 * @event PhotoEditorSDK.UI.ReactUI#export
 * @type {Image|String|Blob}
 */

/**
 * Operation created event
 *
 * @event PhotoEditorSDK.UI.ReactUI#operation:created
 * @type {PhotoEditorSDK.Operation}
 */

/**
 * Operation removed event
 *
 * @event PhotoEditorSDK.UI.ReactUI#operation:removed
 * @type {PhotoEditorSDK.Operation}
 */

/**
 * History undo event
 *
 * @event PhotoEditorSDK.UI.ReactUI#history:undo
 */

/**
 * Controls switched event
 *
 * @event PhotoEditorSDK.UI.ReactUI#controls:switched
 * @type {PhotoEditorSDK.UI.ReactUI.Controls}
 */

/**
 * A unique string that represents this UI
 * @type {String}
 */


ReactUI.prototype.identifier = 'react';

// Export extendable stuff
ReactUI.BaseComponent = _globals.BaseComponent;
ReactUI.BaseControls = _controls2.default;
ReactUI.ControlsComponent = _controlsComponent2.default;
ReactUI.React = _globals.React;
ReactUI.ReactBEM = _globals.ReactBEM;
ReactUI.SharedState = _globals.SharedState;
ReactUI.Constants = _globals.Constants;
ReactUI.Utils = _globals.Utils;
ReactUI.ScrollbarComponent = _scrollbarComponent2.default;
ReactUI.ModalManager = _modalManager2.default;
ReactUI.JSONLoader = _jsonLoader2.default;
ReactUI.PhotoRoll = PhotoRoll;
ReactUI.Controls = Controls;
ReactUI.SliderComponent = _sliderComponent2.default;
ReactUI.SliderOverlayComponent = _sliderOverlayComponent2.default;

/**
 * The PhotoEditorSDK UI can also be integrated as a React.js component
 * @class
 * @extends React.Component
 * @memberof PhotoEditorSDK.UI.ReactUI
 */

var ReactComponent = function (_React$Component) {
  _inherits(ReactComponent, _React$Component);

  function ReactComponent() {
    _classCallCheck(this, ReactComponent);

    return _possibleConstructorReturn(this, (ReactComponent.__proto__ || Object.getPrototypeOf(ReactComponent)).apply(this, arguments));
  }

  _createClass(ReactComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._ui = new ReactUI(_globals.SDKUtils.extend({}, this.props, {
        container: this.refs.container
      }));

      if (this.props.onEditorReady) {
        this._ui.onReady(this.props.onEditorReady);
      }
    }
  }, {
    key: 'render',


    /**
     * Renders this component
     * @return {React.Element}
     */
    value: function render() {
      var containerStyle = _globals.SDKUtils.extend({}, this.props.style || {});
      return _globals.React.createElement('div', { style: containerStyle, ref: 'container' });
    }
  }, {
    key: 'ui',
    get: function get() {
      return this._ui;
    }
  }]);

  return ReactComponent;
}(_globals.React.Component);

ReactUI.ReactComponent = ReactComponent;

// Extend PhotoEditorSDK object
_globals.SDK.UI = _globals.SDK.UI || {};
_globals.SDK.UI.ReactUI = ReactUI;

exports.default = ReactUI;

/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_62__;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var emptyFunction = __webpack_require__(17);
var invariant = __webpack_require__(18);
var warning = __webpack_require__(34);
var assign = __webpack_require__(64);

var ReactPropTypesSecret = __webpack_require__(19);
var checkPropTypes = __webpack_require__(65);

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (({"ENV":"\"development\""}).NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if (({"ENV":"\"development\""}).NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      ({"ENV":"\"development\""}).NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      ({"ENV":"\"development\""}).NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(
          false,
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (({"ENV":"\"development\""}).NODE_ENV !== 'production') {
  var invariant = __webpack_require__(18);
  var warning = __webpack_require__(34);
  var ReactPropTypesSecret = __webpack_require__(19);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (({"ENV":"\"development\""}).NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var emptyFunction = __webpack_require__(17);
var invariant = __webpack_require__(18);
var ReactPropTypesSecret = __webpack_require__(19);

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    invariant(
      false,
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(16);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(33);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactBem = __webpack_require__(37);

var _reactBem2 = _interopRequireDefault(_reactBem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var BaseComponent = function (_React$Component) {
  _inherits(BaseComponent, _React$Component);

  function BaseComponent() {
    var _ref;

    _classCallCheck(this, BaseComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = BaseComponent.__proto__ || Object.getPrototypeOf(BaseComponent)).call.apply(_ref, [this].concat(args)));

    _this._events = {};
    _this._needsStyleFixes = false;

    _this._bindAll('_onSharedStateUpdate', 'fixStyles');
    return _this;
  }

  // -------------------------------------------------------------------------- WORKAROUNDS

  /**
   * A method that is called whenever styles need to be fixed by the JavaScript.
   * This needs to be done thanks to older Internet Explorer browsers which have
   * a bunch of CSS bugs.
   */


  _createClass(BaseComponent, [{
    key: 'fixStyles',
    value: function fixStyles() {}

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called when this component has been mounted
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._bindEvents();
      if (this.props.sharedState) {
        this.props.sharedState.on('update', this._onSharedStateUpdate);
      }

      if (this._needsStyleFixes) {
        this.fixStyles();
        if (this.context.options.responsive) {
          window.addEventListener('resize', this.fixStyles);
        }
      }
    }

    /**
     * Gets called before this component is unmounted
     */

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._unbindEvents();

      if (this.props.sharedState) {
        this.props.sharedState.off('update', this._onSharedStateUpdate);
      }

      if (this.context.options.responsive && this._needsStyleFixes) {
        window.removeEventListener('resize', this.fixStyles);
      }
    }

    /**
     * Gets called when this component is about to receive new properties
     * @param  {Object} nextProps
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.sharedState) {
        if (this.props.sharedState) {
          this.props.sharedState.off('update', this._onSharedStateUpdate);
        }
        nextProps.sharedState.on('update', this._onSharedStateUpdate);
      }
    }

    // -------------------------------------------------------------------------- HELPER FUNCTIONS

    /**
     * Binds the instance methods with the given names
     * to the class context
     * @param  {Array.<String>} ...fnNames
     * @protected
     */

  }, {
    key: '_bindAll',
    value: function _bindAll() {
      var _this2 = this;

      for (var _len2 = arguments.length, fnNames = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        fnNames[_key2] = arguments[_key2];
      }

      fnNames.forEach(function (name) {
        if (typeof _this2[name] !== 'function') {
          throw new Error('_bindAll: ' + _this2.constructor.name + '.' + name + ' is not a function.');
        }
        _this2[name] = _this2[name].bind(_this2);
      });
    }

    /**
     * Returns the translation for `key`
     * @param  {String} key
     * @param  {Object} [interpolationOptions]
     * @return {String}
     */

  }, {
    key: '_t',
    value: function _t(key, interpolationOptions) {
      return this.context.ui.translate(key, interpolationOptions);
    }

    /**
     * A helper method for UI.helpers.assetPath
     * @param {?} ...args
     * @protected
     */

  }, {
    key: '_getAssetPath',
    value: function _getAssetPath() {
      var _context$ui;

      return (_context$ui = this.context.ui).getAssetPath.apply(_context$ui, arguments);
    }

    // -------------------------------------------------------------------------- SHARED STATE

    /**
     * Gets called when the shared state did change
     * @param  {Object} oldState
     * @param  {Object} newState
     * @private
     */

  }, {
    key: '_onSharedStateUpdate',
    value: function _onSharedStateUpdate(oldState, newState) {
      this.sharedStateDidChange(newState);

      if (this.shouldSharedComponentUpdate(oldState, newState)) {
        this.forceUpdate();
      }
    }

    /**
     * Checks if the component should change from the given state
     * @param  {Object} oldState
     * @param  {Object} newState
     * @return {Boolean}
     */

  }, {
    key: 'shouldSharedComponentUpdate',
    value: function shouldSharedComponentUpdate(oldState, newState) {
      return true;
    }

    /**
     * Gets called when the shared state did change
     * @param {Object} newState
     */

  }, {
    key: 'sharedStateDidChange',
    value: function sharedStateDidChange(newState) {}

    /**
     * Sets the given state on the shared state
     * @param {Object} state
     * @param {Boolean} update
     */

  }, {
    key: 'setSharedState',
    value: function setSharedState(state, update) {
      this.props.sharedState.set(state, update);
    }

    /**
     * Returns the shared state value for the given property
     * @param {String} prop
     * @return {*}
     */

  }, {
    key: 'getSharedState',
    value: function getSharedState(prop) {
      return this.props.sharedState.get(prop);
    }

    /**
     * Forces an update of the shared state
     */

  }, {
    key: 'forceSharedUpdate',
    value: function forceSharedUpdate() {
      this.props.sharedState.broadcastUpdate();
    }

    // -------------------------------------------------------------------------- EVENT HANDLING

    /**
     * Binds the events in _events
     * @protected
     */

  }, {
    key: '_bindEvents',
    value: function _bindEvents() {
      for (var eventName in this._events) {
        var handler = this._events[eventName];
        this.context.mediator.on(eventName, handler);
      }
    }

    /**
     * Unbinds the events in _events
     * @protected
     */

  }, {
    key: '_unbindEvents',
    value: function _unbindEvents() {
      for (var eventName in this._events) {
        var handler = this._events[eventName];
        this.context.mediator.off(eventName, handler);
      }
    }

    /**
     * Emits an event with the given event name and arguments through
     * the mediator
     * @param  {String} eventName
     * @param  {Array.<*>} ...args
     * @protected
     */

  }, {
    key: '_emitEvent',
    value: function _emitEvent(eventName) {
      var _context$mediator;

      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      (_context$mediator = this.context.mediator).emit.apply(_context$mediator, [eventName].concat(args));
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this element
     * @return {ReactBEM.element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _reactBem2.default.createElement('div');
    }

    /**
     * Transforms the ReactBEM.element returned by `renderWithBEM` into
     * React.Element objects with proper class names
     * @return {React.Element}
     */

  }, {
    key: 'render',
    value: function render() {
      return _reactBem2.default.transform(this.renderWithBEM());
    }
  }]);

  return BaseComponent;
}(_react2.default.Component);

exports.default = BaseComponent;


BaseComponent.contextTypes = {
  editor: _propTypes2.default.object,
  ui: _propTypes2.default.object,
  options: _propTypes2.default.object,
  mediator: _propTypes2.default.object,
  editorScreen: _propTypes2.default.object,
  globalState: _propTypes2.default.object
};

BaseComponent.propTypes = {
  sharedState: _propTypes2.default.any
};

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _photoeditorsdk = __webpack_require__(7);

var _photoeditorsdk2 = _interopRequireDefault(_photoeditorsdk);

var _log = __webpack_require__(20);

var _log2 = _interopRequireDefault(_log);

var _browser = __webpack_require__(72);

var _browser2 = _interopRequireDefault(_browser);

var _jsonLoader = __webpack_require__(22);

var _jsonLoader2 = _interopRequireDefault(_jsonLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var SDKUtils = _photoeditorsdk2.default.Utils;
var Vector2 = _photoeditorsdk2.default.Math.Vector2;


var UIUtils = {
  /**
   * Returns the inner dimensions (size - padding) of the given
   * DOM element
   * @param  {DOMElement} element
   * @return {Vector2}
   */
  getInnerDimensionsForElement: function getInnerDimensionsForElement(element) {
    var size = new Vector2(element.offsetWidth, element.offsetHeight);
    var computedStyle = window.getComputedStyle(element, null);
    size.x -= parseInt(computedStyle.getPropertyValue('padding-left'), 10);
    size.x -= parseInt(computedStyle.getPropertyValue('padding-right'), 10);
    size.y -= parseInt(computedStyle.getPropertyValue('padding-top'), 10);
    size.y -= parseInt(computedStyle.getPropertyValue('padding-bottom'), 10);
    return size;
  },


  /**
   * Gets the x and y position for the given event.
   * @param {Event} e
   * @return {Vector2}
   */
  getEventPosition: function getEventPosition(e) {
    var x = e.clientX;
    var y = e.clientY;
    if (e.type.indexOf('touch') !== -1) {
      if (!e.touches.length) return;

      x = e.touches[0].clientX;
      y = e.touches[0].clientY;
    }
    return new Vector2(x, y);
  },


  /**
   * Creates a canvas with a transparency pattern
   * @return {Canvas}
   */
  createTransparentPatternCanvas: function createTransparentPatternCanvas() {
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');

    canvas.width = 10;
    canvas.height = 10;

    context.fillStyle = 'white';
    context.fillRect(0, 0, canvas.width, canvas.height);
    context.fillStyle = '#cccccc';
    context.fillRect(0, 0, canvas.width / 2, canvas.height / 2);
    context.fillRect(canvas.width / 2, canvas.height / 2, canvas.width, canvas.height);

    return canvas;
  },


  /**
   * Checks if the browser supports canvas.msToBlob
   * @return {Boolean}
   */
  supportsMSBlob: function supportsMSBlob() {
    var canvas = document.createElement('canvas');
    return typeof canvas.msToBlob !== 'undefined';
  },


  /**
   * Translates the given key using the given options
   * @param  {Object} phrases
   * @param  {String} key
   * @param  {Object} interpolationOptions = {}
   * @return {String}
   */
  translate: function translate(phrases, key) {
    var interpolationOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var response = this.fetch(phrases, key);
    if (!response) {
      _log2.default.info('Utils#translate', 'Unable to translate `' + key + '`');

      // ------------------------------------------------------------------------------------------
      // Remove this part in the next major version update
      var newToOldLocalizationKeyMap = __webpack_require__(83);
      var oldKey = newToOldLocalizationKeyMap[key];
      if (oldKey != null) {
        _log2.default.warn('Utils#translate', 'Trying to find localized string for old key: `' + oldKey + '`. Please update your localization to use the new key as soon as possible. Support for the old, deprecated key will be dropped with the next major version update.');
        return this.translate(phrases, oldKey, interpolationOptions);
      }
      // ------------------------------------------------------------------------------------------

      return null;
    }
    for (var _key in interpolationOptions) {
      response = response.replace('${' + _key + '}', interpolationOptions[_key]);
    }
    return response;
  },


  /**
   * Gets the property value at `path` of `object`
   * @param  {Object} object
   * @param  {String} path
   * @param  {?} [defaultValue]
   * @return {?}
   */
  fetch: function fetch(object, path, defaultValue) {
    // Replace indexes with property accessors
    path = path.replace(/\[(\w+)]/g, '.$1');
    // Strip leading dot (when path begins with [0] for example)
    path = path.replace(/^\./, '');

    var pathSegments = path.split('.');
    for (var i = 0; i < pathSegments.length; i++) {
      var segment = pathSegments[i];
      object = object[segment];
      if (!object) {
        break;
      }
    }

    if (typeof object === 'undefined') {
      return false;
    }

    return object;
  },


  /**
   * Checks whether the user agent represents a mobile device
   * @return {Boolean}
   */
  isMobile: function isMobile() {
    var a = navigator.userAgent || navigator.vendor || window.opera;
    /* eslint-disable */
    return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))
    );
    /* eslint-enable */
  },


  /**
   * Checks whether the device supports touch events
   * @return {Boolean} [description]
   */
  isTouchDevice: function isTouchDevice() {
    /* eslint-disable no-mixed-operators */
    return !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch);
    /* eslint-enable no-mixed-operators */
  },


  /**
   * Selects the `selectedItems` from `items`. `selector` is called for every item, return value
   * is matched against `selectedItems`
   * @param  {Array} items
   * @param  {Array} selectedItems
   * @param  {Function} [selector = null]
   * @return {Array}
   */
  select: function select(items, selectedItems) {
    var selector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (!selector) selector = function selector(i) {
      return i;
    };

    var newItems = [];
    selectedItems.forEach(function (selectedItem) {
      items.forEach(function (item) {
        var itemIdentifier = selector(item);
        if (itemIdentifier === selectedItem) {
          newItems.push(item);
        }
      });
    });
    return newItems;
  },


  /**
   * Gets the given URL using JSON(P)
   * @param  {String} url
   * @return {Promise}
   */
  getJSONP: function getJSONP(url) {
    var loader = new _jsonLoader2.default(url);
    return loader.load();
  },


  /**
   * Clones the given `categories` array
   * @param  {Object[]} categories
   * @param {String} itemsProperty
   * @return {Object[]}
   */
  cloneCategories: function cloneCategories(categories, itemsProperty) {
    return categories.map(function (category) {
      category = SDKUtils.clone(category);
      category[itemsProperty] = category[itemsProperty].slice(0);
      return category;
    });
  },


  /**
   * Merges the given `newCategories` into the given `categories`
   * @param  {Object[]} categories
   * @param  {Object[]} newCategories
   * @param  {String} itemsProperty
   * @private
   */
  mergeCategories: function mergeCategories(categories, newCategories, itemsProperty) {
    categories = this.cloneCategories(categories, itemsProperty);

    var existingCategory = null;
    newCategories.forEach(function (newCategory) {
      categories.forEach(function (category) {
        if (newCategory.identifier === category.identifier) {
          existingCategory = category;
        }
      });

      if (!existingCategory) {
        categories.push(newCategory);
      } else {
        existingCategory[itemsProperty] = existingCategory[itemsProperty].concat(newCategory[itemsProperty]);
      }
    });

    return categories;
  },


  /**
   * Returns a camelized style object for the given DOMElement
   * @param  {DOMElement} el
   * @return {Object}
   */
  getStyleObject: function getStyleObject(el) {
    var styleProperties = window.getComputedStyle(el);
    var styleObject = {};
    for (var property in styleProperties) {
      var value = styleProperties.getPropertyValue(property);
      var camelizedAttr = property.replace(/-([a-z])/g, function (a, b) {
        return b.toUpperCase();
      });
      if (value !== '') {
        styleObject[camelizedAttr] = value;
      }
    }
    return styleObject;
  },


  /**
   * Debounces the given function to trigger only every so often
   * @param  {Function} fn
   * @param  {Number}   wait
   * @param  {Boolean}
   * @return {Function}
   */
  debounce: function debounce(fn, wait, immediate) {
    var timeout;
    return function () {
      var _this = this;

      var args = arguments;
      var later = function later() {
        timeout = null;
        if (!immediate) fn.apply(_this, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) fn.apply(this, args);
    };
  },


  /**
   * Finds the native scrollbar width for the current browser
   * @return {Number}
   */
  getScrollbarWidth: function getScrollbarWidth() {
    var outer = document.createElement('div');
    outer.style.visibility = 'hidden';
    outer.style.width = '100px';
    outer.style.msOverflowStyle = 'scrollbar';
    document.body.appendChild(outer);

    var widthNoScroll = outer.offsetWidth;
    outer.style.overflow = 'scroll';

    var inner = document.createElement('div');
    inner.style.width = '100%';
    outer.appendChild(inner);

    var widthWithScroll = inner.offsetWidth;
    outer.parentNode.removeChild(outer);

    return widthNoScroll - widthWithScroll;
  },


  /**
   * Returns the given string with the first character uppercased
   * @param  {String} str
   * @return {String}
   */
  capitalize: function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  },


  Browser: _browser2.default
};

exports.default = UIUtils;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global HTMLElement, WEBPACK */
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _base = __webpack_require__(70);

var _base2 = _interopRequireDefault(_base);

var _arrayUtils = __webpack_require__(71);

var _arrayUtils2 = _interopRequireDefault(_arrayUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides utility functions for internal use
 * @class
 * @memberof PhotoEditorSDK
 * @private
 */
var Utils = function () {
  function Utils() {
    _classCallCheck(this, Utils);
  }

  _createClass(Utils, null, [{
    key: 'isArray',

    /**
     * Checks if the given object is an Array
     * @param  {Object}  object
     * @return {Boolean}
     */
    value: function isArray(object) {
      return Object.prototype.toString.call(object) === '[object Array]';
    }

    /**
     * Checks if a given object is a plain object (i.e., a literal object) or not.
     * @param {any} object
     * @returns Boolean
     */

  }, {
    key: 'isPlainObject',
    value: function isPlainObject(object) {
      if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object' || !object) {
        return false;
      }

      if (typeof Object.getPrototypeOf === 'function') {
        var proto = Object.getPrototypeOf(object);
        return proto === Object.prototype || proto === null;
      }

      return Object.prototype.toString.call(object) === '[object Object]';
    }

    /**
     * Checks whether the user agent represents a mobile device
     * @return {Boolean}
     */

  }, {
    key: 'isMobile',
    value: function isMobile() {
      if (typeof navigator === 'undefined') return false;

      var a = navigator.userAgent || navigator.vendor || window.opera;
      /* eslint-disable */
      return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od|ad)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))
      );
      /* eslint-enable */
    }

    /**
     * Checks wether the platform target is a browser
     * @return {Boolean}
     */

  }, {
    key: 'isBrowser',
    value: function isBrowser() {
      return typeof window !== 'undefined';
    }

    /**
     * Checks wether the platform target is Nodejs
     * @return {Boolean}
     */

  }, {
    key: 'isNode',
    value: function isNode() {
      return typeof window === 'undefined' && typeof global !== 'undefined';
    }

    /**
     * Returns the given object's values as an array
     * @param {Object} object
     * @returns {Array<*>}
     */

  }, {
    key: 'values',
    value: function values(object) {
      var values = [];
      for (var key in object) {
        values.push(object[key]);
      }
      return values;
    }

    /**
     * Checks if the given object is a DOM element
     * @param  {Object}  o
     * @return {Boolean}
     */
    /* istanbul ignore next */

  }, {
    key: 'isDOMElement',
    value: function isDOMElement(o) {
      return (typeof HTMLElement === 'undefined' ? 'undefined' : _typeof(HTMLElement)) === 'object' ? o instanceof HTMLElement : o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && o !== null && o.nodeType === 1 && typeof o.nodeName === 'string';
    }

    /**
     * Checks if th given event is a touch event
     * @param  {Event}  e
     * @return {Boolean}
     */

  }, {
    key: 'isTouchEvent',
    value: function isTouchEvent(e) {
      return e.type.indexOf('touch') !== -1;
    }

    /**
     * Resizes the given vector to fit inside the given max size while maintaining
     * the aspect ratio
     * @param  {Vector2} vector
     * @param  {Vector2} max
     * @return {Vector2}
     */

  }, {
    key: 'resizeVectorToFit',
    value: function resizeVectorToFit(vector, max) {
      var scale = Math.min(max.x / vector.x, max.y / vector.y);
      var newSize = vector.clone().multiply(scale);
      return newSize;
    }
  }, {
    key: 'resizeVectorToFill',
    value: function resizeVectorToFill(vector, container) {
      var vectorRatio = vector.x / vector.y;
      var containerRatio = container.x / container.y;
      if (vectorRatio > containerRatio) {
        return container.clone().set(container.y * vectorRatio, container.y);
      } else {
        return container.clone().set(container.x, container.x / vectorRatio);
      }
    }

    /**
     * Checks if this value is extendable / can have keys
     * @param  {*}  val
     * @return {Boolean}
     */

  }, {
    key: 'isExtendable',
    value: function isExtendable(val) {
      return typeof val !== 'undefined' && val !== null && ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' || typeof val === 'function');
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to undefined. Once a
     * property is set, additional values of the same property are ignored.
     * @param  {Object} object
     * @param  {Object} ...sources
     * @return {Object}
     */

  }, {
    key: 'defaults',
    value: function defaults(object) {
      // Shallow clone
      var newObject = {};
      for (var key in object) {
        newObject[key] = object[key];
      }

      // Clone sources

      for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        sources[_key - 1] = arguments[_key];
      }

      for (var i = 0; i < sources.length; i++) {
        var source = sources[i];
        for (var _key2 in source) {
          if (typeof newObject[_key2] === 'undefined') {
            newObject[_key2] = source[_key2];
          }
        }
      }

      return newObject;
    }

    /**
     * Does a deep merge between a set of objects, from left to right. The merge is
     * deep in the sense that it goes recurseviley trough the objects own
     * properties. When it encounters an array, it only does a shallow copy of it.
     *
     * @param {Object} dest
     * @param {Object[]} sources
     * @returns {Object}
     */

  }, {
    key: 'deepMerge',
    value: function deepMerge(dest) {
      // deep merge between two objects only
      var _deepMerge = function _deepMerge(dest, source) {
        // If the source is undefined, return a copy of dest
        if (source === undefined) {
          return _deepMerge(null, dest);
        }

        // If the source is an array, return a shallow copy
        if (Array.isArray(source)) {
          return [].concat(_toConsumableArray(source));
        }

        // If the source is not a plain object, just return it
        if (!Utils.isPlainObject(source)) {
          return source;
        }

        // If dest is an not a plain object, return a shallow copy of the source
        if (!Utils.isPlainObject(dest)) {
          return _extends({}, source);
        }

        // Shallow-copy the original object
        var result = _extends({}, dest);

        // Go trough each source key
        Object.keys(source).forEach(function (key) {
          var value = source[key];
          if (value === undefined) {
            return;
          }
          result[key] = _deepMerge(dest[key], value);
        });
        return result;
      };

      for (var _len2 = arguments.length, sources = Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {
        sources[_key3 - 1] = arguments[_key3];
      }

      return sources.reduce(_deepMerge, dest);
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties and their properties that resolve to
     * undefined. Once a property is set, additional value sof the same property
     * are ignored.
     * @param  {Object} object
     * @param  {Object} ...sources
     * @return {Object}
     */

  }, {
    key: 'deepDefaults',
    value: function deepDefaults(object) {
      for (var _len3 = arguments.length, sources = Array(_len3 > 1 ? _len3 - 1 : 0), _key4 = 1; _key4 < _len3; _key4++) {
        sources[_key4 - 1] = arguments[_key4];
      }

      var reversedSources = [].concat(sources).reverse();
      return Utils.deepMerge.apply(Utils, _toConsumableArray(reversedSources).concat([object]));
    }

    /**
     * Creates a deep clone of the given object
     * @param  {Object}    object
     * @return {Object}
     */

  }, {
    key: 'deepClone',
    value: function deepClone(object) {
      var newObject = {};
      for (var key in object) {
        if (Utils.isExtendable(object[key])) {
          newObject[key] = Utils.deepClone(object[key]);
        } else {
          newObject[key] = object[key];
        }
      }
      return newObject;
    }

    /**
     * Get a deep property inside an object.
     *
     * @param {Object} object - the object
     * @param {String[]} path - Either a string with the prop's
     *  name, or an array of prop names and/or functions describing a path in a
     *  nested object. Any function passed in the array should function as a getter
     *  for a prop.
     *
     * @returns {(any|undefined)} - The prop's value, or undefined if the prop is
     * not found
     */

  }, {
    key: 'getDeepProperty',
    value: function getDeepProperty(object, path) {
      if (typeof path === 'string') {
        return object[path];
      }

      if (!Array.isArray(path)) {
        return undefined;
      }

      // When we have a getter function inside the array, call it as a getter,
      // ignoring any type errors thrown by it (just return undefined.)
      var callPropName = function callPropName(object, propName) {
        var value = void 0;
        try {
          value = propName(object);
        } catch (e) {
          if (!(e instanceof TypeError)) {
            throw e;
          }
        }

        return value;
      };

      return path.reduce(function (object, propName) {
        return object ? typeof propName === 'function' ? callPropName(object, propName) : object[propName] : null;
      }, object);
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous
     * sources.
     * @param {Object} object
     * @param {Object} ...sources
     * @return {Object}
     */

  }, {
    key: 'extend',
    value: function extend(object) {
      // Shallow clone
      var newObject = {};
      for (var key in object) {
        newObject[key] = object[key];
      }

      // Extend sources

      for (var _len4 = arguments.length, sources = Array(_len4 > 1 ? _len4 - 1 : 0), _key5 = 1; _key5 < _len4; _key5++) {
        sources[_key5 - 1] = arguments[_key5];
      }

      for (var i = 0; i < sources.length; i++) {
        var source = sources[i];
        for (var _key6 in source) {
          newObject[_key6] = source[_key6];
        }
      }

      return newObject;
    }

    /**
     * Creates a shallow clone of the given object
     * @param {Object} object
     * @returns {Object}
     */

  }, {
    key: 'clone',
    value: function clone(object) {
      return this.extend({}, object);
    }

    /**
     * Creates a Blob URI from the given Data URI
     * @param {String} data
     */

  }, {
    key: 'createBlobURIFromDataURI',
    value: function createBlobURIFromDataURI(data) {
      var root = typeof window === 'undefined' ? global : window;
      if (!root.Blob || !root.URL || !ArrayBuffer || !Uint8Array) {
        return data;
      }

      var rawData = _base2.default.decode(data.split(',')[1]);
      var mimeString = data.split(',')[0].split(':')[1].split(';')[0];

      // write the bytes of the string to an ArrayBuffer
      var arrayBuffer = new ArrayBuffer(rawData.length);
      var intArray = new Uint8Array(arrayBuffer);
      for (var i = 0; i < rawData.length; i++) {
        intArray[i] = rawData[i];
      }

      // write the ArrayBuffer to a blob, and you're done
      var blob = new root.Blob([arrayBuffer], {
        type: mimeString
      });
      return root.URL.createObjectURL(blob);
    }

    /**
     * Generates a UUID
     * @return {String}
     */

  }, {
    key: 'getUUID',
    value: function getUUID() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0;
        var v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    }

    /**
     * Creates a canvas DOM element (browser) or a node-canvas canvas (node)
     * @return {Canvas}
     */

  }, {
    key: 'createCanvas',
    value: function createCanvas() {
      return document.createElement('canvas');
    }
  }, {
    key: 'convertHtmlImageToRGBACanvas',
    value: function convertHtmlImageToRGBACanvas(htmlImage) {
      // Workaround fro non-RGB images
      var canvas = Utils.createCanvas();
      canvas.width = htmlImage.width;
      canvas.height = htmlImage.height;
      var context = canvas.getContext('2d');
      context.drawImage(htmlImage, 0, 0, htmlImage.width, htmlImage.height);

      return canvas;
    }
    /**
     * Checks if the given dimensions are POT
     * @param  {PhotoEditorSDK.Math.Vector2}  dimensions
     * @return {Boolean}
     */

  }, {
    key: 'isPowerOfTwo',
    value: function isPowerOfTwo(dimensions) {
      return (dimensions.x & dimensions.x - 1) === 0 && (dimensions.y & dimensions.y - 1) === 0;
    }

    /**
     * Returns the next lowest power of two of the given number
     * @param  {Number} x
     * @return {Number}
     */

  }, {
    key: 'nextLowestPOT',
    value: function nextLowestPOT(x) {
      for (var i = 1; i < 32; i <<= 1) {
        x = x | x >> i;
      }
      return x - (x >> 1);
    }

    /**
     * Returns the next highest power of two of the given number
     * @param  {Number} x
     * @return {Number}
     */

  }, {
    key: 'nextHighestPOT',
    value: function nextHighestPOT(x) {
      x--;
      for (var i = 1; i < 32; i <<= 1) {
        x = x | x >> i;
      }
      return x + 1;
    }

    /**
     * Moves the array item at `oldIndex` to `newIndex`
     * @param  {Array} arr
     * @param  {Number} oldIndex
     * @param  {Number} newIndex
     */

  }, {
    key: 'moveArrayItem',
    value: function moveArrayItem(arr, oldIndex, newIndex) {
      if (newIndex >= arr.length) {
        var k = newIndex - arr.length;
        while (k-- + 1) {
          arr.push(undefined);
        }
      }
      arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);
    }

    /**
     * Makes sure the given canvas has the given dimensions. If not, it does not change the
     * canvas dimensions.
     * @param  {Canvas} canvas
     * @param  {PhotoEditorSDK.Math.Vector2} dimensions
     */

  }, {
    key: 'ensureCanvasDimensions',
    value: function ensureCanvasDimensions(canvas, dimensions) {
      if (canvas.width !== dimensions.x || canvas.height !== dimensions.y) {
        canvas.width = dimensions.x;
        canvas.height = dimensions.y;
      }
    }

    /**
     * Converts the given array of bytes to a string
     * @param  {Number[]} byteArray
     * @return {String}
     */

  }, {
    key: 'byteArrayToString',
    value: function byteArrayToString(byteArray) {
      return byteArray.map(function (byte) {
        return String.fromCharCode(byte);
      }).join('');
    }

    /**
     * Clamps the given `number` into `min` and `max`
     * @param  {Number} number
     * @param  {Number} min
     * @param  {Number} max
     * @return {Number}
     */

  }, {
    key: 'clamp',
    value: function clamp(number, min, max) {
      return Math.max(min, Math.min(number, max));
    }

    /**
     * Checks if the given string matches the given wildcard
     * @param  {String} str
     * @param  {String} rule
     * @return {Boolean}
     */

  }, {
    key: 'wildCardMatch',
    value: function wildCardMatch(str, rule) {
      return new RegExp('^' + rule.split('*').join('.*') + '$').test(str);
    }

    /**
     * Returns a new object with flipped values and keys
     * @param  {Object} obj
     * @return {Object}
     */

  }, {
    key: 'flipObject',
    value: function flipObject(obj) {
      var newObj = {};
      for (var key in obj) {
        newObj[obj[key]] = key;
      }
      return newObj;
    }

    /**
     * Returns a clone of the given options object
     * @param  {Object} options
     * @return {Object}
     */

  }, {
    key: 'cloneOptions',
    value: function cloneOptions(options) {
      var newOptions = {};
      for (var key in options) {
        var value = options[key];
        if (Array.isArray(value)) {
          value = value.slice();
        } else if (value.clone) {
          value = value.clone();
        }
        newOptions[key] = value;
      }
      return newOptions;
    }

    /**
     * Returns the given date as RFC 3339
     * @param {Date} date
     * @return {String}
     */

  }, {
    key: 'ISODateString',
    value: function ISODateString(date) {
      function pad(n) {
        return n < 10 ? '0' + n : n;
      }
      return date.getUTCFullYear() + '-' + pad(date.getUTCMonth() + 1) + '-' + pad(date.getUTCDate()) + 'T' + pad(date.getUTCHours()) + ':' + pad(date.getUTCMinutes()) + ':' + pad(date.getUTCSeconds()) + 'Z';
    }
  }, {
    key: 'getCrossOriginValue',
    value: function getCrossOriginValue(crossOrigin) {
      if (!crossOrigin) {
        return 'anonymous';
      }

      if (crossOrigin === 'none') {
        return undefined;
      }

      return crossOrigin;
    }

    /**
     * Shallow equal compare two objects
     * @param {*} objA
     * @param {*} objB
     * @returns {Boolean}
     */

  }, {
    key: 'shallowEqual',
    value: function shallowEqual(objA, objB) {
      if (objA === objB) {
        return true;
      }

      if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
        return false;
      }

      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);

      if (keysA.length !== keysB.length) {
        return false;
      }
      // Test for A's keys different from B.
      var bHasOwnProperty = hasOwnProperty.bind(objB);
      for (var i = 0; i < keysA.length; i++) {
        if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
          return false;
        }
      }
      return true;
    }

    /**
     * Returns 'value' if condition is met else returns 'undefined'
     * @param {Boolean} condition
     * @param {*} value
     * @returns {*}
     */

  }, {
    key: 'enableIf',
    value: function enableIf(condition, value) {
      return condition ? value : undefined;
    }

    /**
      Throws an error if condition is not met
      @param {Boolean} condition
     */

  }, {
    key: 'invariant',
    value: function invariant(condition, message) {
      if (!condition) {
        var error = new Error(message);
        throw error;
      }
    }

    /**
     * Exectues all Promises in an array, returning a new Promise which
     * will fulfill with an array of the values returned by all promises in
     * the case all of them are resolved, or, with one or more are rejected,
     * rejects with an array containing all the error values.
     *
     * @param {Array<Promise>} promises
     * @returns {Promise<Array>}
     */

  }, {
    key: 'executePromises',
    // eslint-disable-line
    value: function executePromises(promises) {
      var count = promises.length;
      var counter = 0;

      var values = [];
      var errors = [];

      return new Promise(function (resolve, reject) {
        var onFinnish = function onFinnish() {
          counter++;
          if (counter >= count) {
            if (errors.length <= 0) {
              resolve(values);
            } else {
              reject(errors);
            }
          }
        };

        var onSuccess = function onSuccess(value) {
          values.push(value);
          onFinnish();
        };

        var onError = function onError(value) {
          errors.push(value);
          onFinnish();
        };

        promises.forEach(function (promise) {
          promise.then(onSuccess).catch(onError);
        });
      });
    }
  }]);

  return Utils;
}();

Utils.Array = _arrayUtils2.default;
exports.default = Utils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Extracted from MinifyJpeg (Copyright (c) 2014 Hiroaki Matoba, MIT License):
 * https://github.com/hMatoba/MinifyJpeg
 * @license
 */

var KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

/**
 * Provides Base64 encode and decode methods
 * @type {Object}
 * @ignore
 */
/* istanbul ignore next */
var Base64 = {
  /**
   * Encodes the given input into a Base64 string
   * @param  {String} input
   * @return {String}
   */
  encode: function encode(input) {
    var output = '';
    var chr1 = void 0,
        chr2 = void 0,
        chr3 = void 0;
    var enc1 = void 0,
        enc2 = void 0,
        enc3 = void 0,
        enc4 = void 0;
    var i = 0;

    do {
      chr1 = input[i++];
      chr2 = input[i++];
      chr3 = input[i++];

      enc1 = chr1 >> 2;
      enc2 = (chr1 & 3) << 4 | chr2 >> 4;
      enc3 = (chr2 & 15) << 2 | chr3 >> 6;
      enc4 = chr3 & 63;

      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }

      output = output + KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) + KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);
      chr1 = chr2 = chr3 = '';
      enc1 = enc2 = enc3 = enc4 = '';
    } while (i < input.length);

    return output;
  },


  /**
   * Decodes the given Base64 string
   * @param  {String} input
   * @return {String}
   */
  decode: function decode(input) {
    var chr1 = void 0,
        chr2 = void 0,
        chr3 = void 0;
    var enc1 = void 0,
        enc2 = void 0,
        enc3 = void 0,
        enc4 = void 0;
    var i = 0;
    var buf = [];

    // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
    var base64test = /[^A-Za-z0-9+/=]/g;
    if (base64test.exec(input)) {
      throw new Error('There were invalid base64 characters in the input text.\n' + 'Valid base64 characters are A-Z, a-z, 0-9, \'+\', \'/\',and \'=\'\n' + 'Expect errors in decoding.');
    }
    input = input.replace(/[^A-Za-z0-9+/=]/g, '');

    do {
      enc1 = KEY_STR.indexOf(input.charAt(i++));
      enc2 = KEY_STR.indexOf(input.charAt(i++));
      enc3 = KEY_STR.indexOf(input.charAt(i++));
      enc4 = KEY_STR.indexOf(input.charAt(i++));

      chr1 = enc1 << 2 | enc2 >> 4;
      chr2 = (enc2 & 15) << 4 | enc3 >> 2;
      chr3 = (enc3 & 3) << 6 | enc4;

      buf.push(chr1);

      if (enc3 !== 64) {
        buf.push(chr2);
      }
      if (enc4 !== 64) {
        buf.push(chr3);
      }

      chr1 = chr2 = chr3 = '';
      enc1 = enc2 = enc3 = enc4 = '';
    } while (i < input.length);

    return buf;
  }
};

exports.default = Base64;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ArrayUtils = function () {
  function ArrayUtils() {
    _classCallCheck(this, ArrayUtils);
  }

  _createClass(ArrayUtils, null, [{
    key: "head",

    /**
     * Returns the first element in an array
     * @param {Array<A>} arr
     * @returns {A}
     */
    value: function head(arr) {
      return arr[0];
    }

    /**
     * Returns a shallow copy of the array excluding the first element
     * @param {Array<A>} arr
     * @returns {Array<A>}
     */

  }, {
    key: "tail",
    value: function tail(arr) {
      return arr.slice(1);
    }

    /**
     * Returns the last element of an array
     * @param {Array<A>} arr
     * @returns {A}
     */

  }, {
    key: "last",
    value: function last(arr) {
      return arr[arr.length - 1];
    }

    /**
     * Returns a shallow copy of the array excluding the last element
     * @param {Array<A>} arr
     * @returns {Array<A>}
     */

  }, {
    key: "init",
    value: function init(arr) {
      return arr.slice(0, arr.length - 1);
    }

    /**
     * Returns a shallow copy of the array with the elements tha pass
     * the test function removed.
     * @param {Array<A>} arr
     * @param {Function} func - A test function
     */

  }, {
    key: "remove",
    value: function remove(arr, func) {
      return arr.filter(function (v, i, arr) {
        return !func(v, i, arr);
      });
    }

    /**
     * Finds the index first element of the Array to which the supplied function returns
     * a true value. If the element is not found it returns -1.
     *
     * @param {Array} array
     * @param {Function} func
     * @returns {number}
     */

  }, {
    key: "findIndex",
    value: function findIndex(array, func) {
      for (var i = 0; i < array.length; i++) {
        if (func(array[i])) {
          return i;
        }
      }

      return -1;
    }

    /**
     * Finds the first element of the Array to which the supplied function returns
     * a true value and returns it. Otherwise it returns undefined.
     *
     * @param {Array} array
     * @param {Function} func
     * @returns {any}
     */

  }, {
    key: "find",
    value: function find(array, func) {
      for (var i = 0; i < array.length; i++) {
        if (func(array[i])) {
          return array[i];
        }
      }

      return undefined;
    }

    /**
     * Flattens the given multidimensional array
     *
     * @return {Array}
     */

  }, {
    key: "flatten",
    value: function flatten(array) {
      return array.reduce(function (flat, toFlatten) {
        return flat.concat(Array.isArray(toFlatten) ? ArrayUtils.flatten(toFlatten) : toFlatten);
      }, []);
    }

    /**
     * Returns and array containing the numbers going from `start` (inclusive) to
     * `end` (exclusive)
     *
     * @param {number} start
     * @param {number} end
     * @returns Array
     */

  }, {
    key: "range",
    value: function range(start, end) {
      var arr = [];

      if (end > start) {
        for (var i = start; i < end; i++) {
          arr.push(i);
        }
      }

      return arr;
    }

    /**
     * Returns an array consisting of the value `val` repeated `n` times.
     *
     * @param {any} val
     * @param {number} n
     * @returns {Array}
     */

  }, {
    key: "repeat",
    value: function repeat(val, n) {
      var arr = [];

      for (var i = 0; i < n; i++) {
        arr[i] = val;
      }

      return arr;
    }

    /**
     * Returns an array which is an array of arrays of equally positioned items in both arrays,
     * e.g, zip([1, 2, 3], [4, 5, 6]) = [[1, 4], [2, 5], [3, 6]]
     *
     * @param {Array} a
     * @param {Array} b
     * @returns {Array}
     */

  }, {
    key: "zip",
    value: function zip(a, b) {
      var len = Math.min(a.length, b.length);
      var arr = [];

      for (var i = 0; i < len; i++) {
        arr[i] = [a[i], b[i]];
      }

      return arr;
    }
  }]);

  return ArrayUtils;
}();

exports.default = ArrayUtils;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

exports.default = {
  getIEVersion: function getIEVersion() {
    var _navigator = navigator,
        userAgent = _navigator.userAgent,
        appVersion = _navigator.appVersion;

    if (appVersion.indexOf('MSIE') !== -1) {
      return appVersion.match(/MSIE\s+?([0-9]+)/i)[1];
    } else if (userAgent.indexOf('Trident') !== -1) {
      return userAgent.match(/rv:([0-9]+)/i)[1];
    } else {
      return false;
    }
  },
  isIE10: function isIE10() {
    var version = this.getIEVersion();
    return version !== false && version === 10;
  },
  isIE11: function isIE11() {
    var version = this.getIEVersion();
    return version !== false && version === 11;
  },
  isIElte: function isIElte(version) {
    var browserVersion = this.getIEVersion();
    if (browserVersion === false) return false;
    return browserVersion <= version;
  }
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate, global) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* eslint-disable */

/*!
 * Native Promise Only
 * v0.8.0-a (c) Kyle Simpson
 * MIT License: http://getify.mit-license.org
 */

/* istanbul ignore next */
var promiseFactory = function DEF() {
  /*jshint validthis:true */
  "use strict";

  var builtInProp,
      cycle,
      scheduling_queue,
      ToString = Object.prototype.toString,
      timer = typeof setImmediate != "undefined" ? function timer(fn) {
    return setImmediate(fn);
  } : setTimeout;

  // dammit, IE8.
  try {
    Object.defineProperty({}, "x", {});
    builtInProp = function builtInProp(obj, name, val, config) {
      return Object.defineProperty(obj, name, {
        value: val,
        writable: true,
        configurable: config !== false
      });
    };
  } catch (err) {
    builtInProp = function builtInProp(obj, name, val) {
      obj[name] = val;
      return obj;
    };
  }

  // Note: using a queue instead of array for efficiency
  scheduling_queue = function Queue() {
    var first, last, item;

    function Item(fn, self) {
      this.fn = fn;
      this.self = self;
      this.next = void 0;
    }

    return {
      add: function add(fn, self) {
        item = new Item(fn, self);
        if (last) {
          last.next = item;
        } else {
          first = item;
        }
        last = item;
        item = void 0;
      },
      drain: function drain() {
        var f = first;
        first = last = cycle = void 0;

        while (f) {
          f.fn.call(f.self);
          f = f.next;
        }
      }
    };
  }();

  function schedule(fn, self) {
    scheduling_queue.add(fn, self);
    if (!cycle) {
      cycle = timer(scheduling_queue.drain);
    }
  }

  // promise duck typing
  function isThenable(o) {
    var _then,
        o_type = typeof o === "undefined" ? "undefined" : _typeof(o);

    if (o != null && (o_type == "object" || o_type == "function")) {
      _then = o.then;
    }
    return typeof _then == "function" ? _then : false;
  }

  function notify() {
    for (var i = 0; i < this.chain.length; i++) {
      notifyIsolated(this, this.state === 1 ? this.chain[i].success : this.chain[i].failure, this.chain[i]);
    }
    this.chain.length = 0;
  }

  // NOTE: This is a separate function to isolate
  // the `try..catch` so that other code can be
  // optimized better
  function notifyIsolated(self, cb, chain) {
    var ret, _then;
    try {
      if (cb === false) {
        chain.reject(self.msg);
      } else {
        if (cb === true) {
          ret = self.msg;
        } else {
          ret = cb.call(void 0, self.msg);
        }

        if (ret === chain.promise) {
          chain.reject(TypeError("Promise-chain cycle"));
        } else if (_then = isThenable(ret)) {
          _then.call(ret, chain.resolve, chain.reject);
        } else {
          chain.resolve(ret);
        }
      }
    } catch (err) {
      chain.reject(err);
    }
  }

  function resolve(msg) {
    var _then,
        self = this;

    // already triggered?
    if (self.triggered) {
      return;
    }

    self.triggered = true;

    // unwrap
    if (self.def) {
      self = self.def;
    }

    try {
      if (_then = isThenable(msg)) {
        schedule(function () {
          var def_wrapper = new MakeDefWrapper(self);
          try {
            _then.call(msg, function $resolve$() {
              resolve.apply(def_wrapper, arguments);
            }, function $reject$() {
              reject.apply(def_wrapper, arguments);
            });
          } catch (err) {
            reject.call(def_wrapper, err);
          }
        });
      } else {
        self.msg = msg;
        self.state = 1;
        if (self.chain.length > 0) {
          schedule(notify, self);
        }
      }
    } catch (err) {
      reject.call(new MakeDefWrapper(self), err);
    }
  }

  function reject(msg) {
    var self = this;

    // already triggered?
    if (self.triggered) {
      return;
    }

    self.triggered = true;

    // unwrap
    if (self.def) {
      self = self.def;
    }

    self.msg = msg;
    self.state = 2;
    if (self.chain.length > 0) {
      schedule(notify, self);
    }
  }

  function iteratePromises(Constructor, arr, resolver, rejecter) {
    for (var idx = 0; idx < arr.length; idx++) {
      (function IIFE(idx) {
        Constructor.resolve(arr[idx]).then(function $resolver$(msg) {
          resolver(idx, msg);
        }, rejecter);
      })(idx);
    }
  }

  function MakeDefWrapper(self) {
    this.def = self;
    this.triggered = false;
  }

  function MakeDef(self) {
    this.promise = self;
    this.state = 0;
    this.triggered = false;
    this.chain = [];
    this.msg = void 0;
  }

  function Promise(executor) {
    if (typeof executor != "function") {
      throw TypeError("Not a function");
    }

    if (this.__NPO__ !== 0) {
      throw TypeError("Not a promise");
    }

    // instance shadowing the inherited "brand"
    // to signal an already "initialized" promise
    this.__NPO__ = 1;

    var def = new MakeDef(this);

    this["then"] = function then(success, failure) {
      var o = {
        success: typeof success == "function" ? success : true,
        failure: typeof failure == "function" ? failure : false
      };
      // Note: `then(..)` itself can be borrowed to be used against
      // a different promise constructor for making the chained promise,
      // by substituting a different `this` binding.
      o.promise = new this.constructor(function extractChain(resolve, reject) {
        if (typeof resolve != "function" || typeof reject != "function") {
          throw TypeError("Not a function");
        }

        o.resolve = resolve;
        o.reject = reject;
      });
      def.chain.push(o);

      if (def.state !== 0) {
        schedule(notify, def);
      }

      return o.promise;
    };
    this["catch"] = function $catch$(failure) {
      return this.then(void 0, failure);
    };

    try {
      executor.call(void 0, function publicResolve(msg) {
        resolve.call(def, msg);
      }, function publicReject(msg) {
        reject.call(def, msg);
      });
    } catch (err) {
      reject.call(def, err);
    }
  }

  var PromisePrototype = builtInProp({}, "constructor", Promise,
  /*configurable=*/false);

  // Note: Android 4 cannot use `Object.defineProperty(..)` here
  Promise.prototype = PromisePrototype;

  // built-in "brand" to signal an "uninitialized" promise
  builtInProp(PromisePrototype, "__NPO__", 0,
  /*configurable=*/false);

  builtInProp(Promise, "resolve", function Promise$resolve(msg) {
    var Constructor = this;

    // spec mandated checks
    // note: best "isPromise" check that's practical for now
    if (msg && (typeof msg === "undefined" ? "undefined" : _typeof(msg)) == "object" && msg.__NPO__ === 1) {
      return msg;
    }

    return new Constructor(function executor(resolve, reject) {
      if (typeof resolve != "function" || typeof reject != "function") {
        throw TypeError("Not a function");
      }

      resolve(msg);
    });
  });

  builtInProp(Promise, "reject", function Promise$reject(msg) {
    return new this(function executor(resolve, reject) {
      if (typeof resolve != "function" || typeof reject != "function") {
        throw TypeError("Not a function");
      }

      reject(msg);
    });
  });

  builtInProp(Promise, "all", function Promise$all(arr) {
    var Constructor = this;

    // spec mandated checks
    if (ToString.call(arr) != "[object Array]") {
      return Constructor.reject(TypeError("Not an array"));
    }
    if (arr.length === 0) {
      return Constructor.resolve([]);
    }

    return new Constructor(function executor(resolve, reject) {
      if (typeof resolve != "function" || typeof reject != "function") {
        throw TypeError("Not a function");
      }

      var len = arr.length,
          msgs = Array(len),
          count = 0;

      iteratePromises(Constructor, arr, function resolver(idx, msg) {
        msgs[idx] = msg;
        if (++count === len) {
          resolve(msgs);
        }
      }, reject);
    });
  });

  builtInProp(Promise, "race", function Promise$race(arr) {
    var Constructor = this;

    // spec mandated checks
    if (ToString.call(arr) != "[object Array]") {
      return Constructor.reject(TypeError("Not an array"));
    }

    return new Constructor(function executor(resolve, reject) {
      if (typeof resolve != "function" || typeof reject != "function") {
        throw TypeError("Not a function");
      }

      iteratePromises(Constructor, arr, function resolver(idx, msg) {
        resolve(msg);
      }, reject);
    });
  });

  return Promise;
};

var root = typeof global === 'undefined' ? window : global;
var _Promise = typeof Promise !== 'undefined' ? Promise : promiseFactory();
root.Promise = root.Promise || _Promise;
exports.default = _Promise;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(74).setImmediate, __webpack_require__(8)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(75);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(21)))

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(77);
var util = __webpack_require__(79);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(80);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(78)(module), __webpack_require__(8)))

/***/ }),
/* 78 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(81);
exports.encode = exports.stringify = __webpack_require__(82);


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 83 */
/***/ (function(module, exports) {

module.exports = {"pesdk.adjustments.text.brightness":"controls.adjustments.brightness","pesdk.adjustments.text.clarity":"controls.adjustments.clarity","pesdk.adjustments.text.contrast":"controls.adjustments.contrast","pesdk.adjustments.text.exposure":"controls.adjustments.exposure","pesdk.adjustments.text.gamma":"controls.adjustments.gamma","pesdk.adjustments.text.highlights":"controls.adjustments.highlights","pesdk.adjustments.text.saturation":"controls.adjustments.saturation","pesdk.adjustments.text.shadows":"controls.adjustments.shadows","pesdk.adjustments.title.name":"controls.overview.adjustments","pesdk.brush.text.size":"controls.brush.size","pesdk.brush.title.name":"controls.overview.brush","pesdk.camera.text.webcamUnavailable":"errors.webcamUnavailable.text","pesdk.camera.title.headline":"webcam.headline","pesdk.common.button.back":"generic.back","pesdk.common.button.cancel":"generic.cancel","pesdk.common.text.color":"generic.color","pesdk.common.text.imageLoadFailed":"errors.imageLoadFailed.text","pesdk.common.text.loading":"loading.loading","pesdk.common.title.error":"errors.title","pesdk.common.title.imageLoadFailed":"errors.imageLoadFailed.title","pesdk.editor.button.backgroundImage":"editor.backgroundImage","pesdk.editor.button.export":"editor.export","pesdk.editor.button.new":"editor.new","pesdk.editor.button.undo":"editor.undo","pesdk.editor.text.exporting":"loading.exporting","pesdk.editor.text.imageResized_maxDimensions":"warning.imageResized_maxDimensions.text","pesdk.editor.text.imageResized_maxMegaPixels":"warning.imageResized_maxMegaPixels.text","pesdk.editor.text.invalidFileType":"errors.invalidFileType.text","pesdk.editor.text.renderingError":"error.renderingError.text","pesdk.editor.text.resizing":"loading.resizing","pesdk.editor.title.imageResized_maxDimensions":"warnings.imageResized_maxDimensions.title","pesdk.editor.title.imageResized_maxMegaPixels":"warnings.imageResized_maxMegaPixels.title","pesdk.editor.title.renderingError":"errors.renderingError.title","pesdk.editor.title.zoom":"editor.zoom","pesdk.filter.asset.all":"controls.filter.categories.all","pesdk.filter.asset.identity":"controls.filter.filters.identity","pesdk.filter.asset.imgly_filters_analog":"controls.filter.categories.imgly_filters_analog","pesdk.filter.asset.imgly_filters_bw":"controls.filter.categories.imgly_filters_bw","pesdk.filter.asset.imgly_filters_retro":"controls.filter.categories.imgly_filters_retro","pesdk.filter.asset.imgly_filters_special":"controls.filter.categories.imgly_filters_special","pesdk.filter.asset.imgly_filters_summer":"controls.filter.categories.imgly_filters_summer","pesdk.filter.asset.imgly_filters_winter":"controls.filter.categories.imgly_filters_winter","pesdk.filter.asset.imgly_lut_ad1920":"controls.filter.filters.imgly_lut_ad1920","pesdk.filter.asset.imgly_lut_ancient":"controls.filter.filters.imgly_lut_ancient","pesdk.filter.asset.imgly_lut_bleached":"controls.filter.filters.imgly_lut_bleached","pesdk.filter.asset.imgly_lut_bleachedblue":"controls.filter.filters.imgly_lut_bleachedblue","pesdk.filter.asset.imgly_lut_blues":"controls.filter.filters.imgly_lut_blues","pesdk.filter.asset.imgly_lut_blueshadows":"controls.filter.filters.imgly_lut_blueshadows","pesdk.filter.asset.imgly_lut_breeze":"controls.filter.filters.imgly_lut_breeze","pesdk.filter.asset.imgly_lut_bw":"controls.filter.filters.imgly_lut_bw","pesdk.filter.asset.imgly_lut_celsius":"controls.filter.filters.imgly_lut_celsius","pesdk.filter.asset.imgly_lut_chest":"controls.filter.filters.imgly_lut_chest","pesdk.filter.asset.imgly_lut_classic":"controls.filter.filters.imgly_lut_classic","pesdk.filter.asset.imgly_lut_colorful":"controls.filter.filters.imgly_lut_colorful","pesdk.filter.asset.imgly_lut_cool":"controls.filter.filters.imgly_lut_cool","pesdk.filter.asset.imgly_lut_cottoncandy":"controls.filter.filters.imgly_lut_cottoncandy","pesdk.filter.asset.imgly_lut_creamy":"controls.filter.filters.imgly_lut_creamy","pesdk.filter.asset.imgly_lut_eighties":"controls.filter.filters.imgly_lut_eighties","pesdk.filter.asset.imgly_lut_elder":"controls.filter.filters.imgly_lut_elder","pesdk.filter.asset.imgly_lut_evening":"controls.filter.filters.imgly_lut_evening","pesdk.filter.asset.imgly_lut_fall":"controls.filter.filters.imgly_lut_fall","pesdk.filter.asset.imgly_lut_fixie":"controls.filter.filters.imgly_lut_fixie","pesdk.filter.asset.imgly_lut_food":"controls.filter.filters.imgly_lut_food","pesdk.filter.asset.imgly_lut_fridge":"controls.filter.filters.imgly_lut_fridge","pesdk.filter.asset.imgly_lut_front":"controls.filter.filters.imgly_lut_front","pesdk.filter.asset.imgly_lut_glam":"controls.filter.filters.imgly_lut_glam","pesdk.filter.asset.imgly_lut_gobblin":"controls.filter.filters.imgly_lut_gobblin","pesdk.filter.asset.imgly_lut_highcarb":"controls.filter.filters.imgly_lut_highcarb","pesdk.filter.asset.imgly_lut_highcontrast":"controls.filter.filters.imgly_lut_highcontrast","pesdk.filter.asset.imgly_lut_k1":"controls.filter.filters.imgly_lut_k1","pesdk.filter.asset.imgly_lut_k2":"controls.filter.filters.imgly_lut_k2","pesdk.filter.asset.imgly_lut_k6":"controls.filter.filters.imgly_lut_k6","pesdk.filter.asset.imgly_lut_kdynamic":"controls.filter.filters.imgly_lut_kdynamic","pesdk.filter.asset.imgly_lut_keen":"controls.filter.filters.imgly_lut_keen","pesdk.filter.asset.imgly_lut_lenin":"controls.filter.filters.imgly_lut_lenin","pesdk.filter.asset.imgly_lut_litho":"controls.filter.filters.imgly_lut_litho","pesdk.filter.asset.imgly_lut_lomo100":"controls.filter.filters.imgly_lut_lomo100","pesdk.filter.asset.imgly_lut_lucid":"controls.filter.filters.imgly_lut_lucid","pesdk.filter.asset.imgly_lut_mellow":"controls.filter.filters.imgly_lut_mellow","pesdk.filter.asset.imgly_lut_neat":"controls.filter.filters.imgly_lut_neat","pesdk.filter.asset.imgly_lut_nogreen":"controls.filter.filters.imgly_lut_nogreen","pesdk.filter.asset.imgly_lut_orchid":"controls.filter.filters.imgly_lut_orchid","pesdk.filter.asset.imgly_lut_pale":"controls.filter.filters.imgly_lut_pale","pesdk.filter.asset.imgly_lut_pitched":"controls.filter.filters.imgly_lut_pitched","pesdk.filter.asset.imgly_lut_plate":"controls.filter.filters.imgly_lut_plate","pesdk.filter.asset.imgly_lut_pola669":"controls.filter.filters.imgly_lut_pola669","pesdk.filter.asset.imgly_lut_polasx":"controls.filter.filters.imgly_lut_polasx","pesdk.filter.asset.imgly_lut_pro400":"controls.filter.filters.imgly_lut_pro400","pesdk.filter.asset.imgly_lut_quozi":"controls.filter.filters.imgly_lut_quozi","pesdk.filter.asset.imgly_lut_sepiahigh":"controls.filter.filters.imgly_lut_sepiahigh","pesdk.filter.asset.imgly_lut_settled":"controls.filter.filters.imgly_lut_settled","pesdk.filter.asset.imgly_lut_seventies":"controls.filter.filters.imgly_lut_seventies","pesdk.filter.asset.imgly_lut_sin":"controls.filter.filters.imgly_lut_sin","pesdk.filter.asset.imgly_lut_soft":"controls.filter.filters.imgly_lut_soft","pesdk.filter.asset.imgly_lut_steel":"controls.filter.filters.imgly_lut_steel","pesdk.filter.asset.imgly_lut_summer":"controls.filter.filters.imgly_lut_summer","pesdk.filter.asset.imgly_lut_sunset":"controls.filter.filters.imgly_lut_sunset","pesdk.filter.asset.imgly_lut_tender":"controls.filter.filters.imgly_lut_tender","pesdk.filter.asset.imgly_lut_texas":"controls.filter.filters.imgly_lut_texas","pesdk.filter.asset.imgly_lut_twilight":"controls.filter.filters.imgly_lut_twilight","pesdk.filter.asset.imgly_lut_winter":"controls.filter.filters.imgly_lut_winter","pesdk.filter.asset.imgly_lut_x400":"controls.filter.filters.imgly_lut_x400","pesdk.filter.text.intensity":"controls.filter.intensity","pesdk.filter.title.name":"controls.overview.filters","pesdk.focus.button.mirrored":"controls.focus.mirrored","pesdk.focus.button.none":"controls.focus.none","pesdk.focus.button.radial":"controls.focus.radial","pesdk.focus.text.blurRadius":"controls.focus.blurRadius","pesdk.focus.title.name":"controls.overview.focus","pesdk.frame.asset.imgly_frame_art_decor":"controls.frame.frames.imgly_frame_art_decor","pesdk.frame.asset.imgly_frame_black_passepartout":"controls.frame.frames.imgly_frame_black_passepartout","pesdk.frame.asset.imgly_frame_dia":"controls.frame.frames.imgly_frame_dia","pesdk.frame.asset.imgly_frame_lowpoly_shadow":"controls.frame.frames.imgly_frame_lowpoly_shadow","pesdk.frame.asset.imgly_frame_wood_passepartout":"controls.frame.frames.imgly_frame_wood_passepartout","pesdk.frame.button.none":"controls.frame.noFrame","pesdk.frame.text.scale":"controls.frame.scale","pesdk.frame.title.name":"controls.overview.frame","pesdk.library.placeholder.search":"photoRoll.search.placeholder","pesdk.library.text.noSearchResults":"photoRoll.search.noSearchResults","pesdk.library.text.photoRollLoadFail":"errors.photoRollLoadFail.text","pesdk.library.title.photoRollLoadFail":"errors.photoRollLoadFail.title","pesdk.library.title.seachResults":"photoRoll.search.results.headline","pesdk.splash.button.upload":"splash.upload.button","pesdk.splash.text.photoRoll":"splash.photoRoll.description","pesdk.splash.text.upload":"splash.upload.description","pesdk.splash.text.webcam":"splash.webcam.description","pesdk.splash.title.photoRoll":"splash.photoRoll.headline","pesdk.splash.title.webcam":"splash.webcam.headline","pesdk.sticker.asset.imgly_sticker_emoticons":"controls.sticker.categories.imgly_sticker_emoticons","pesdk.sticker.asset.imgly_sticker_shapes":"controls.sticker.categories.imgly_sticker_shapes","pesdk.sticker.title.loadingStickersFailed":"errors.loadingStickersFailed.title","pesdk.sticker.title.name":"controls.overview.sticker","pesdk.text.button.alignment":"controls.text.alignment","pesdk.text.button.background":"controls.text.background","pesdk.text.button.font":"controls.text.font","pesdk.text.button.foreground":"controls.text.foreground","pesdk.text.button.size":"controls.text.size","pesdk.text.button.takeToFront":"controls.text.takeToFront","pesdk.text.placeholder.defaultText":"controls.text.defaultText","pesdk.text.text.loadingFontsFailed":"errors.loadingFontsFailed.text","pesdk.text.title.loadingFontsFailed":"errors.loadingFontsFailed.title","pesdk.text.title.name":"controls.overview.text","pesdk.transform.asset.imgly_transform_common_16-9":"controls.transform.ratios.imgly_transform_common_16-9","pesdk.transform.asset.imgly_transform_common_4-3":"controls.transform.ratios.imgly_transform_common_4-3","pesdk.transform.asset.imgly_transform_common_custom":"controls.transform.ratios.imgly_transform_common_custom","pesdk.transform.asset.imgly_transform_common_square":"controls.transform.ratios.imgly_transform_common_square","pesdk.transform.asset.imgly_transform_facebook_ad":"controls.transform.ratios.imgly_transform_facebook_ad","pesdk.transform.asset.imgly_transform_facebook_cover":"controls.transform.ratios.imgly_transform_facebook_cover","pesdk.transform.asset.imgly_transform_facebook_post":"controls.transform.ratios.imgly_transform_facebook_post","pesdk.transform.asset.imgly_transform_facebook_profile":"controls.transform.ratios.imgly_transform_facebook_profile","pesdk.transform.button.none":"controls.transform.none","pesdk.transform.text.rotation":"controls.transform.rotation","pesdk.transform.title.name":"controls.overview.transform"}

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _photoeditorsdk = __webpack_require__(7);

var _photoeditorsdk2 = _interopRequireDefault(_photoeditorsdk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fonts = [{
  fontFamily: 'Aleo',
  variations: [{
    identifier: 'imgly_font_aleo_bold',
    fontWeight: 'bold',
    provider: 'file',
    filePath: 'fonts/imgly_font_aleo_bold.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 1919,
      descender: -409
    }
  }]
}, {
  fontFamily: 'Amatic SC',
  variations: [{
    identifier: 'imgly_font_amaticsc',
    fontWeight: 'normal',
    provider: 'file',
    filePath: 'fonts/imgly_font_amaticsc.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 2332,
      descender: -583
    }
  }]
}, {
  fontFamily: 'Bernier',
  variations: [{
    identifier: 'imgly_font_bernier_regular',
    fontWeight: 'normal',
    provider: 'file',
    filePath: 'fonts/imgly_font_bernier_regular.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 2007,
      descender: -552
    }
  }]
}, {
  fontFamily: 'Cheque',
  variations: [{
    identifier: 'imgly_font_cheque_regular',
    fontWeight: 'normal',
    provider: 'file',
    filePath: 'fonts/imgly_font_cheque_regular.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 1853,
      descender: -495
    }
  }]
}, {
  fontFamily: 'Open Sans',
  variations: [{
    identifier: 'imgly_font_open_sans_bold',
    fontWeight: 'bold',
    provider: 'file',
    filePath: 'fonts/imgly_font_open_sans_bold.woff',
    default: true,
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 2189,
      descender: -640
    }
  }]
}, {
  fontFamily: 'Gagalin',
  variations: [{
    identifier: 'imgly_font_gagalin_regular',
    fontWeight: 'normal',
    provider: 'file',
    filePath: 'fonts/imgly_font_gagalin_regular.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 1987,
      descender: -628
    }
  }]
}, {
  fontFamily: 'Hagin',
  variations: [{
    identifier: 'imgly_font_hagin_caps_thin',
    fontWeight: 200,
    provider: 'file',
    filePath: 'fonts/imgly_font_hagin_caps_thin.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 1964,
      descender: -482
    }
  }]
}, {
  fontFamily: 'Intro',
  variations: [{
    identifier: 'imgly_font_intro_inline',
    fontWeight: 'normal',
    provider: 'file',
    filePath: 'fonts/imgly_font_intro_inline.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 1944,
      descender: -548
    }
  }]
}, {
  fontFamily: 'Lobster',
  variations: [{
    identifier: 'imgly_font_lobster',
    fontWeight: 'normal',
    provider: 'file',
    filePath: 'fonts/imgly_font_lobster.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 2048,
      descender: -552
    }
  }]
}, {
  fontFamily: 'Nexa',
  variations: [{
    identifier: 'imgly_font_nexa_script',
    fontWeight: 'normal',
    provider: 'file',
    filePath: 'fonts/imgly_font_nexa_script.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 1835,
      descender: -663
    }
  }]
}, {
  fontFamily: 'Ostrich',
  variations: [{
    identifier: 'imgly_font_ostrich_sans_black',
    fontWeight: 800,
    provider: 'file',
    filePath: 'fonts/imgly_font_ostrich_sans_black.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 1513,
      descender: -235
    }
  }, {
    identifier: 'imgly_font_ostrich_sans_bold',
    fontWeight: 'bold',
    provider: 'file',
    filePath: 'fonts/imgly_font_ostrich_sans_bold.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 1513,
      descender: -235
    }
  }]
}, {
  fontFamily: 'Panton',
  variations: [{
    identifier: 'imgly_font_panton_black_italic_caps',
    fontWeight: 800,
    fontStyle: 'italic',
    provider: 'file',
    filePath: 'fonts/imgly_font_panton_blackitalic_caps.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 2033,
      descender: -572
    }
  }, {
    identifier: 'imgly_font_panton_light_italic_caps',
    fontWeight: 200,
    fontStyle: 'italic',
    provider: 'file',
    filePath: 'fonts/imgly_font_panton_lightitalic_caps.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 1961,
      descender: -556
    }
  }]
}, {
  fontFamily: 'Perfograma',
  variations: [{
    identifier: 'imgly_font_perfograma',
    fontWeight: 'normal',
    provider: 'file',
    filePath: 'fonts/imgly_font_perfograma.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 1982,
      descender: -842
    }
  }]
}, {
  fontFamily: 'Trashhand',
  variations: [{
    identifier: 'imgly_font_trash_hand',
    fontWeight: 'normal',
    provider: 'file',
    filePath: 'fonts/imgly_font_trash_hand.woff',
    textMetrics: {
      unitsPerEm: 2048,
      ascender: 1554,
      descender: -663
    }
  }]
}]; /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

exports.default = {
  EVENTS: {
    RENDER: 'render',
    EXPORT: 'export',
    EDITOR_READY: 'editor:ready',
    CLOSE: 'close',
    ZOOM_DONE: 'zoom:done',
    OPERATION_CREATED: 'operation:created',
    OPERATION_UPDATED: 'operation:updated',
    OPERATION_REMOVED: 'operation:removed',
    FEATURES_DISABLED: 'editor:features:disabled',
    FEATURES_ENABLED: 'editor:features:enabled',
    FEATURES_UPDATED: 'editor:features:updated',
    COLORPICKER_OPEN: 'colorpicker:open',
    HISTORY_UPDATED: 'history:update',
    HISTORY_BEFORE_UNDO: 'history:before_undo',
    HISTORY_UNDO: 'history:undo',
    WINDOW_RESIZE: 'window:resize',
    CONTROLS_SWITCHED: 'controls:switched',
    TRANSFORM_REAPPLY_RATIO: 'transform:reapply_ratio'
  },
  DEFAULTS: {
    TRANSFORM_RATIOS: [[{
      identifier: 'imgly_transform_common_custom',
      defaultName: 'Custom',
      ratio: '*',
      selected: true
    }, {
      identifier: 'imgly_transform_common_square',
      defaultName: 'Square',
      ratio: 1
    }, {
      identifier: 'imgly_transform_common_4-3',
      defaultName: '4:3',
      ratio: 1.33
    }, {
      identifier: 'imgly_transform_common_16-9',
      defaultName: '16:9',
      ratio: 1.77
    }], [{
      identifier: 'imgly_transform_facebook_profile',
      defaultName: 'FB Profile',
      ratio: 1 / 1
    }, {
      identifier: 'imgly_transform_facebook_ad',
      defaultName: 'FB Ad',
      dimensions: new _photoeditorsdk2.default.Math.Vector2(1200, 627)
    }, {
      identifier: 'imgly_transform_facebook_post',
      defaultName: 'FB Post',
      dimensions: new _photoeditorsdk2.default.Math.Vector2(940, 788)
    }, {
      identifier: 'imgly_transform_facebook_cover',
      defaultName: 'FB Cover',
      dimensions: new _photoeditorsdk2.default.Math.Vector2(851, 315)
    }]],
    BRUSHES: [_photoeditorsdk2.default.Operations.SpriteOperation.BrushSprite.Brushes.RadialBrush],
    FONTS: fonts
  }
};

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _photoeditorsdk = __webpack_require__(7);

var _photoeditorsdk2 = _interopRequireDefault(_photoeditorsdk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var EventEmitter = _photoeditorsdk2.default.EventEmitter,
    Utils = _photoeditorsdk2.default.Utils,
    Log = _photoeditorsdk2.default.Log;

var SharedState = function (_EventEmitter) {
  _inherits(SharedState, _EventEmitter);

  function SharedState() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SharedState);

    var _this = _possibleConstructorReturn(this, (SharedState.__proto__ || Object.getPrototypeOf(SharedState)).call(this));

    _this._state = state;
    return _this;
  }

  /**
   * Sets the given state
   * @param {Object} newState
   * @param {Boolean} update = true
   */


  _createClass(SharedState, [{
    key: 'set',
    value: function set() {
      var newState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if ((typeof newState === 'undefined' ? 'undefined' : _typeof(newState)) !== 'object') {
        Log.warn('SharedState#set expects an object as first parameter');
      }

      var oldState = Utils.extend({}, this._state);
      this._state = Utils.extend(this._state, newState);

      if (update) {
        this.broadcastUpdate(oldState, this._state);
      }
    }

    /**
     * Returns the state for the given property
     * @param {String} prop
     */

  }, {
    key: 'get',
    value: function get(prop) {
      return this._state[prop];
    }

    /**
     * Broadcasts an update
     * @param {Object} oldState
     * @param {Object} newState
     */

  }, {
    key: 'broadcastUpdate',
    value: function broadcastUpdate(oldState) {
      var newState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      this.emit('update', oldState, newState);
    }

    /**
     * Clears the state
     */

  }, {
    key: 'clear',
    value: function clear() {
      this._state = {};
    }
  }]);

  return SharedState;
}(EventEmitter);

exports.default = SharedState;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * http://paulirish.com/2011/requestanimationframe-for-smart-animating/
 * http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
 * requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel
 * MIT license
 * @license
 */

/* eslint-disable standard/no-callback-literal */

var root = typeof window === 'undefined' ? global : window;
var rAF = root.requestAnimationFrame;
var cAF = root.cancelAnimationFrame;

var lastTime = 0;
var vendors = ['ms', 'moz', 'webkit', 'o'];
for (var x = 0; x < vendors.length && !rAF; ++x) {
  exports.requestAnimationFrame = rAF = root[vendors[x] + 'RequestAnimationFrame'];
  exports.cancelAnimationFrame = cAF = root[vendors[x] + 'CancelAnimationFrame'] || root[vendors[x] + 'CancelRequestAnimationFrame'];
}

/* Bind to root is necessary as the context must be valid */
if (rAF) {
  exports.requestAnimationFrame = rAF = rAF.bind(root);
}
if (cAF) {
  exports.cancelAnimationFrame = cAF = cAF.bind(root);
}

/* istanbul ignore next */
if (!rAF) {
  exports.requestAnimationFrame = rAF = function rAF(callback, element) {
    var currTime = new Date().getTime();
    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
    var id = setTimeout(function () {
      callback(currTime + timeToCall);
    }, timeToCall);
    lastTime = currTime + timeToCall;
    return id;
  };
}

/* istanbul ignore next */
if (!cAF) {
  exports.cancelAnimationFrame = cAF = function cAF(id) {
    clearTimeout(id);
  };
}

exports.requestAnimationFrame = rAF;
exports.cancelAnimationFrame = cAF;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _loadingScreenComponent = __webpack_require__(88);

var _loadingScreenComponent2 = _interopRequireDefault(_loadingScreenComponent);

var _splashScreenComponent = __webpack_require__(90);

var _splashScreenComponent2 = _interopRequireDefault(_splashScreenComponent);

var _photoRollScreenComponent = __webpack_require__(97);

var _photoRollScreenComponent2 = _interopRequireDefault(_photoRollScreenComponent);

var _webcamScreenComponent = __webpack_require__(107);

var _webcamScreenComponent2 = _interopRequireDefault(_webcamScreenComponent);

var _editorScreenComponent = __webpack_require__(110);

var _editorScreenComponent2 = _interopRequireDefault(_editorScreenComponent);

var _screenComponent = __webpack_require__(9);

var _screenComponent2 = _interopRequireDefault(_screenComponent);

var _modalContainerComponent = __webpack_require__(191);

var _modalContainerComponent2 = _interopRequireDefault(_modalContainerComponent);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var AppComponent = function (_React$Component) {
  _inherits(AppComponent, _React$Component);

  function AppComponent() {
    var _ref;

    _classCallCheck(this, AppComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = AppComponent.__proto__ || Object.getPrototypeOf(AppComponent)).call.apply(_ref, [this].concat(args)));

    _this._onScreenMounted = function (name, el) {
      _this._screenElements[name + 'Screen'] = el;

      if (name === 'editor' && !_this._isReady) {
        _this._isReady = true;
        _this.props.mediator.emit(_globals.Constants.EVENTS.EDITOR_READY);
      }
    };

    _this._screens = {
      loading: _loadingScreenComponent2.default,
      splash: _splashScreenComponent2.default,
      photoRoll: _photoRollScreenComponent2.default,
      webcam: _webcamScreenComponent2.default,
      editor: _editorScreenComponent2.default,
      empty: _screenComponent2.default
    };

    var initialScreen = void 0;
    if (_this.props.options.preloader) {
      initialScreen = 'loading';
    }

    _this._screenAfterLoading = 'splash';
    if (_this.props.options.editor.image) {
      _this._screenAfterLoading = 'editor';
    }

    if (!initialScreen) {
      initialScreen = _this._screenAfterLoading;
    }

    _this._screenElements = {};

    _this._isReady = false;

    _this._previousScreensStack = [];
    _this.state = {
      activeScreen: _this._screens[initialScreen],
      activeScreenName: initialScreen,
      screens: _defineProperty({}, initialScreen, _this._screens[initialScreen])
    };
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Checks if the app has a previous screen on the stack
   * @return {Boolean}
   */


  _createClass(AppComponent, [{
    key: 'hasPreviousScreen',
    value: function hasPreviousScreen() {
      return !!this._previousScreensStack.length;
    }

    /**
     * Returns the previous screen
     * @return {Screen}
     */

  }, {
    key: 'getPreviousScreen',
    value: function getPreviousScreen() {
      var stack = this._previousScreensStack;
      return stack[stack.length - 1];
    }

    /**
     * Switches to the screen with the given name
     * @param  {String} name
     */

  }, {
    key: 'switchToScreen',
    value: function switchToScreen(name) {
      var _this2 = this;

      var Screen = null;
      if (name === 'back') {
        Screen = this._previousScreensStack.pop();
        if (!Screen) {
          throw new Error('Unable to switch to previous screen - no previous screen found.');
        }
      } else {
        if (name === 'post-loading') name = this._screenAfterLoading;

        Screen = this._screens[name];
        if (!Screen) {
          throw new Error('Unknown screen `' + name + '`');
        }

        this._previousScreensStack.push(this.state.activeScreen);
      }

      if (!this.state.screens[name]) {
        this.state.screens[name] = Screen;
      }

      // Retain editor component
      if (this.state.activeScreenName !== 'editor') {
        delete this.state.screens[this.state.activeScreenName];
      }

      return new _globals.Promise(function (resolve) {
        _this2.setState({ activeScreen: Screen, activeScreenName: name }, function () {
          resolve();
        });
      });
    }

    /**
     * Gets called when an image is ready for editing
     * @param {Image} image
     * @param {Boolean} resetEditor
     */

  }, {
    key: 'setImage',
    value: function setImage(image, resetEditor) {
      var _this3 = this;

      var options = this.props.options;

      options.editor.image = image;

      var firstEditorLaunch = !this._screenElements.editorScreen;
      this.switchToScreen('editor').then(function () {
        if (!firstEditorLaunch) {
          _this3._screenElements.editorScreen.setImage(image, resetEditor);
        }
      });
    }

    /**
     * Exports an image
     * @param {Boolean} download = false
     * @return {Promise}
     */

  }, {
    key: 'export',
    value: function _export() {
      if (this.state.activeScreen !== this._screens.editor) {
        return _globals.Promise.reject(new Error('Unable to export: Active screen is not the editor screen.'));
      }

      if (this.state.screens.editor) {
        var _screenElements$edito;

        return (_screenElements$edito = this._screenElements.editorScreen).export.apply(_screenElements$edito, arguments);
      }
    }

    /**
     * Returns the editor
     * @return {PhotoEditorSDK.UI.ReactUI.Editor}
     */

  }, {
    key: 'getEditor',
    value: function getEditor() {
      if (this.state.activeScreen !== this._screens.editor) {
        return _globals.Promise.reject(new Error('Unable to get editor: Active screen is not the editor screen.'));
      }

      if (this.state.screens.editor) {
        return this._screenElements.editorScreen.getEditor();
      }
    }

    /**
     * Serializes the editor state
     * @return {Promise}
     */

  }, {
    key: 'serialize',
    value: function serialize() {
      var _screenElements$edito2;

      if (!this.state.screens.editor) {
        return _globals.Promise.reject(new Error('Editor screen unavailable'));
      }
      return (_screenElements$edito2 = this._screenElements.editorScreen).serialize.apply(_screenElements$edito2, arguments);
    }

    /**
     * Deserializes the given data
     * @param  {Object} data
     * @return {Promise}
     */

  }, {
    key: 'deserialize',
    value: function deserialize(data) {
      if (!this.state.screens.editor) {
        return _globals.Promise.reject(new Error('Editor screen unavailable'));
      }
      return this._screenElements.editorScreen.deserialize(data);
    }

    /**
     * Returns the context passed to all children
     * @return {Object}
     */

  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        ui: this.props.ui,
        options: this.props.options,
        mediator: this.props.mediator,
        globalState: this.props.globalState
      };
    }
  }, {
    key: '_renderScreens',


    /**
     * Renders the existing screens
     * @return {ScreenComponent[]}
     * @private
     */
    value: function _renderScreens() {
      var _this4 = this;

      var renderedScreens = [];

      var _loop = function _loop(name) {
        var Screen = _this4.state.screens[name];
        var visible = _this4.state.activeScreen === Screen;
        renderedScreens.push(_globals.ReactBEM.createElement(Screen, { ref: function ref(el) {
            return _this4._onScreenMounted(name, el);
          }, app: _this4, visible: visible }));
      };

      for (var name in this.state.screens) {
        _loop(name);
      }

      return renderedScreens;
    }

    /**
     * Renders this component
     * @return {React.Component}
     */

  }, {
    key: 'render',
    value: function render() {
      return _globals.ReactBEM.transform(_globals.ReactBEM.createElement(
        'div',
        { bem: 'b:editor' },
        _globals.ReactBEM.createElement(_modalContainerComponent2.default, {
          modalManager: _modalManager2.default.instance }),
        this._renderScreens()
      ));
    }
  }]);

  return AppComponent;
}(_globals.React.Component);

exports.default = AppComponent;


AppComponent.childContextTypes = {
  ui: _globals.PropTypes.object.isRequired,
  mediator: _globals.PropTypes.object.isRequired,
  options: _globals.PropTypes.object.isRequired,
  globalState: _globals.PropTypes.object.isRequired
};

AppComponent.propTypes = {
  ui: _globals.PropTypes.object.isRequired,
  mediator: _globals.PropTypes.object.isRequired,
  options: _globals.PropTypes.object.isRequired,
  globalState: _globals.PropTypes.object.isRequired
};

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _screenComponent = __webpack_require__(9);

var _screenComponent2 = _interopRequireDefault(_screenComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */


var LoadingScreenComponent = function (_ScreenComponent) {
  _inherits(LoadingScreenComponent, _ScreenComponent);

  function LoadingScreenComponent() {
    var _ref;

    _classCallCheck(this, LoadingScreenComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = LoadingScreenComponent.__proto__ || Object.getPrototypeOf(LoadingScreenComponent)).call.apply(_ref, [this].concat(args)));

    _this.state = { progress: 0 };

    _this._preloader = _this.context.ui.getPreloader();
    _this._preloader.on('progress', function (progress) {
      _this.state.progress = progress;
    });
    _this._preloader.on('done', function () {
      _this.props.app.switchToScreen('post-loading');
    });
    return _this;
  }

  /**
   * Gets called when this component has been mounted
   */


  _createClass(LoadingScreenComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _get(LoadingScreenComponent.prototype.__proto__ || Object.getPrototypeOf(LoadingScreenComponent.prototype), 'componentDidMount', this).call(this);
      var _window = window,
          devicePixelRatio = _window.devicePixelRatio;

      this._canvas = this.refs.canvas;
      this._canvas.width = this._canvas.offsetWidth * devicePixelRatio;
      this._canvas.height = this._canvas.offsetHeight * devicePixelRatio;
      this._context = this._canvas.getContext('2d');

      this._preloaderImage = new window.Image();
      this._preloaderImage.addEventListener('load', function () {
        _this2._preloader.load();
        (0, _globals.requestAnimationFrame)(_this2._tick);
      });
      this._preloaderImage.crossOrigin = 'Anonymous';
      this._preloaderImage.src = this.context.ui.getAssetPath('preloader.png', true);

      this._running = true;
      this._tick = this._tick.bind(this);
    }

    /**
     * Gets called when this component is about to be unmounted
     */

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _get(LoadingScreenComponent.prototype.__proto__ || Object.getPrototypeOf(LoadingScreenComponent.prototype), 'componentWillUnmount', this).call(this);
      this._running = false;
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * @private
     */

  }, {
    key: '_tick',
    value: function _tick() {
      this._renderLoadingIndicator();
      if (this._running) {
        (0, _globals.requestAnimationFrame)(this._tick);
      }
    }

    /**
     * (Re-)Renders the loading indicator
     * @private
     */

  }, {
    key: '_renderLoadingIndicator',
    value: function _renderLoadingIndicator() {
      var _canvas = this._canvas,
          width = _canvas.width,
          height = _canvas.height;

      var ctx = this._context;
      ctx.clearRect(0, 0, width, height);

      ctx.save();
      ctx.beginPath();
      ctx.moveTo(width / 2, height / 2);
      ctx.arc(width / 2, height / 2, width / 2, -Math.PI * 0.5, Math.PI * 2 * this.state.progress - Math.PI * 0.5, false);
      ctx.lineTo(width / 2, height / 2);
      ctx.clip();
      ctx.drawImage(this._preloaderImage, 0, 0, this._preloaderImage.width, this._preloaderImage.height, 0, 0, width, height);
      ctx.restore();

      ctx.save();
      ctx.globalAlpha = 0.05;
      ctx.drawImage(this._preloaderImage, 0, 0, this._preloaderImage.width, this._preloaderImage.height, 0, 0, width, height);
      ctx.restore();
    }

    /**
     * Renders this screen
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderScreen',
    value: function _renderScreen() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:loadingScreen' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:container' },
          _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'canvas' })
        )
      );
    }
  }]);

  return LoadingScreenComponent;
}(_screenComponent2.default);

exports.default = LoadingScreenComponent;


LoadingScreenComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */


var HeaderComponent = function (_BaseComponent) {
  _inherits(HeaderComponent, _BaseComponent);

  function HeaderComponent() {
    var _ref;

    _classCallCheck(this, HeaderComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = HeaderComponent.__proto__ || Object.getPrototypeOf(HeaderComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onCloseClick');
    return _this;
  }

  /**
   * Gets called when the user clicks the close button
   * @private
   */


  _createClass(HeaderComponent, [{
    key: '_onCloseClick',
    value: function _onCloseClick() {
      this.context.mediator.emit(_globals.Constants.EVENTS.CLOSE);
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var closeButton = void 0;
      if (this.context.options.showCloseButton) {
        closeButton = _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:close', onClick: this._onCloseClick },
          _globals.ReactBEM.createElement('img', { bem: 'e:image', src: this._getAssetPath('close.png', true) })
        );
      }

      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:header' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:label' },
          this.context.options.title
        ),
        closeButton
      );
    }
  }]);

  return HeaderComponent;
}(_globals.BaseComponent);

exports.default = HeaderComponent;


HeaderComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _screenComponent = __webpack_require__(9);

var _screenComponent2 = _interopRequireDefault(_screenComponent);

var _uploadComponent = __webpack_require__(91);

var _uploadComponent2 = _interopRequireDefault(_uploadComponent);

var _webcamComponent = __webpack_require__(95);

var _webcamComponent2 = _interopRequireDefault(_webcamComponent);

var _photoRollComponent = __webpack_require__(96);

var _photoRollComponent2 = _interopRequireDefault(_photoRollComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */


var SplashScreenComponent = function (_ScreenComponent) {
  _inherits(SplashScreenComponent, _ScreenComponent);

  function SplashScreenComponent() {
    _classCallCheck(this, SplashScreenComponent);

    var _this = _possibleConstructorReturn(this, (SplashScreenComponent.__proto__ || Object.getPrototypeOf(SplashScreenComponent)).call(this));

    _this._bindAll('_onWebcamClick', '_onPhotoRollClick', '_onImage');
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the PhotoRollComponent has received a click
   * @private
   */


  _createClass(SplashScreenComponent, [{
    key: '_onPhotoRollClick',
    value: function _onPhotoRollClick() {
      this.props.app.switchToScreen('photoRoll');
    }

    /**
     * Gets called when the WebcamComponent has received a click
     * @private
     */

  }, {
    key: '_onWebcamClick',
    value: function _onWebcamClick() {
      this.props.app.switchToScreen('webcam');
    }

    /**
     * Gets called when the UploadComponent has received an image file
     * @param  {image} image
     * @private
     */

  }, {
    key: '_onImage',
    value: function _onImage(image) {
      this.props.app.setImage(image);
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Checks if the webcam is available for the given device
     * @return {Boolean}
     * @private
     */

  }, {
    key: '_isWebcamAvailable',
    value: function _isWebcamAvailable() {
      return !_globals.Utils.isMobile() && this.context.options.enableWebcam !== false;
    }

    /**
     * Checks if the photo roll is available
     * @return {Boolean}
     * @private
     */

  }, {
    key: '_isPhotoRollAvailable',
    value: function _isPhotoRollAvailable() {
      return !!this.context.options.photoRoll.provider;
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this screen
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderScreen',
    value: function _renderScreen() {
      var items = [];
      var totalRows = 0;

      var uploadAvailable = this.context.options.enableUpload;
      if (uploadAvailable) totalRows++;

      var webcamAvailable = this._isWebcamAvailable();
      if (webcamAvailable) totalRows++;

      var photoRollAvailable = this._isPhotoRollAvailable();
      if (photoRollAvailable) totalRows++;

      if (uploadAvailable) {
        items.push(_globals.ReactBEM.createElement(_uploadComponent2.default, {
          onImage: this._onImage,
          totalRows: totalRows }));
      }

      if (webcamAvailable) {
        items.push(_globals.ReactBEM.createElement(_webcamComponent2.default, {
          onClick: this._onWebcamClick,
          totalRows: totalRows }));
      }

      if (photoRollAvailable) {
        items.push(_globals.ReactBEM.createElement(_photoRollComponent2.default, {
          onClick: this._onPhotoRollClick,
          totalRows: totalRows }));
      }

      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:splashScreen' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:container' },
          items
        )
      );
    }
  }]);

  return SplashScreenComponent;
}(_screenComponent2.default);

exports.default = SplashScreenComponent;


SplashScreenComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

var _rowComponent = __webpack_require__(24);

var _rowComponent2 = _interopRequireDefault(_rowComponent);

var _buttonComponent = __webpack_require__(92);

var _buttonComponent2 = _interopRequireDefault(_buttonComponent);

var _invisibleUploadComponent = __webpack_require__(25);

var _invisibleUploadComponent2 = _interopRequireDefault(_invisibleUploadComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var UploadComponent = function (_RowComponent) {
  _inherits(UploadComponent, _RowComponent);

  function UploadComponent() {
    _classCallCheck(this, UploadComponent);

    var _this = _possibleConstructorReturn(this, (UploadComponent.__proto__ || Object.getPrototypeOf(UploadComponent)).call(this));

    _this._modifier = 'upload';

    _this._bindAll('_onImage', '_onDragEnter', '_onDragOver', '_onDragLeave', '_onDrop');

    _this._dragCounter = 0;
    _this.state = { dragAreaHovered: false };
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the cell emits a `dragEnter` event. Highlights
   * the cell
   * @param {Event} e
   * @private
   */


  _createClass(UploadComponent, [{
    key: '_onDragEnter',
    value: function _onDragEnter(e) {
      e.preventDefault();

      this._dragCounter++;
      this.setState({ dragAreaHovered: true });
    }

    /**
     * Gets called when the cell emits a `dragOver` event. We need to
     * override the default behavior to get a drop event.
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onDragOver',
    value: function _onDragOver(e) {
      e.preventDefault();
    }

    /**
     * Gets called when the cell emits a `dragLeave` event
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onDragLeave',
    value: function _onDragLeave(e) {
      e.preventDefault();

      this._dragCounter--;
      if (this._dragCounter === 0) {
        this.setState({ dragAreaHovered: false });
      }
    }

    /**
     * Gets called when the cell emits a `drop` Event
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onDrop',
    value: function _onDrop(e) {
      var _this2 = this;

      e.stopPropagation();
      e.preventDefault();
      e = e.nativeEvent;
      e.returnValue = false;

      this.setState({ dragAreaHovered: false }, function () {
        if (!e.dataTransfer) return;

        if (!e.dataTransfer.files[0].type.match(/^image\//i)) {
          return _modalManager2.default.instance.displayError(_this2._t('pesdk.common.title.error'), _this2._t('pesdk.editor.text.invalidFileType', { fileType: e.dataTransfer.files[0].type }));
        }

        _this2._handleFile(e.dataTransfer.files[0]);
      });
    }

    /**
     * Gets called when the user clicks the button
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onClick',
    value: function _onClick(e) {
      this.refs.upload.open();
    }

    /**
     * Creates an image from the given file and passes it to the UI
     * @param  {File} file
     * @private
     */

  }, {
    key: '_handleFile',
    value: function _handleFile(file) {
      var _this3 = this;

      var reader = new window.FileReader();
      reader.onload = function () {
        return function (e) {
          var data = e.target.result;
          var image = new window.Image();

          image.addEventListener('load', function () {
            _this3._onImage(image);
          });

          image.src = data;
        };
      }(file);
      reader.readAsDataURL(file);
    }

    /**
     * Gets called when the image has been changed
     * @param  {Image} image
     * @private
     */

  }, {
    key: '_onImage',
    value: function _onImage(image) {
      this.props.onImage && this.props.onImage(image);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this row's content
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderContent',
    value: function _renderContent() {
      var cellProps = {
        onDragEnter: this._onDragEnter,
        onDragOver: this._onDragOver,
        onDragLeave: this._onDragLeave,
        onDrop: this._onDrop
      };

      if (this.state.dragAreaHovered) {
        cellProps.className = 'is-hovered';
      }

      var contentCellBEM = 'e:contentCell';
      // @TODO We need some class that implements webcamEnabled() and photoRollEnabled()
      if (this.context.options.enableWebcam !== false || this.context.options.photoRoll.provider !== null) {
        contentCellBEM += ' m:withBorder';
      }

      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:contentWrapper' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:contentRow' },
          _globals.ReactBEM.createElement(
            'div',
            _extends({ bem: contentCellBEM, onClick: this._onClick }, cellProps),
            _globals.ReactBEM.createElement(_invisibleUploadComponent2.default, { ref: 'upload', onNewFile: this._onImage }),
            _globals.ReactBEM.createElement(
              _buttonComponent2.default,
              { bem: 'e:button', uppercase: true },
              this._t('pesdk.splash.button.upload')
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:description' },
              this._t('pesdk.splash.text.upload')
            )
          )
        )
      );
    }
  }]);

  return UploadComponent;
}(_rowComponent2.default);

exports.default = UploadComponent;


UploadComponent.propTypes = {
  onImage: _globals.PropTypes.func.isRequired
};

UploadComponent.contextTypes = _rowComponent2.default.contextTypes;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ButtonComponent = function (_BaseComponent) {
  _inherits(ButtonComponent, _BaseComponent);

  function ButtonComponent() {
    _classCallCheck(this, ButtonComponent);

    return _possibleConstructorReturn(this, (ButtonComponent.__proto__ || Object.getPrototypeOf(ButtonComponent)).apply(this, arguments));
  }

  _createClass(ButtonComponent, [{
    key: 'renderWithBEM',

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */
    value: function renderWithBEM() {
      var bemSpecifier = 'b:button';
      if (this.props.uppercase) {
        bemSpecifier += ' m:uppercase';
      }

      return _globals.ReactBEM.createElement(
        'button',
        { bem: bemSpecifier, className: this.props.className, onClick: this.props.onClick },
        this.props.children
      );
    }
  }]);

  return ButtonComponent;
}(_globals.BaseComponent);

exports.default = ButtonComponent;


ButtonComponent.propTypes = {
  onClick: _globals.PropTypes.func,
  children: _globals.PropTypes.any.isRequired,
  className: _globals.PropTypes.string
};

ButtonComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _modalManager = __webpack_require__(94);

var _modalManager2 = _interopRequireDefault(_modalManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var FileLoader = function (_EventEmitter) {
  _inherits(FileLoader, _EventEmitter);

  function FileLoader(input) {
    _classCallCheck(this, FileLoader);

    var _this = _possibleConstructorReturn(this, (FileLoader.__proto__ || Object.getPrototypeOf(FileLoader)).call(this));

    _this._input = input;
    _this._onFileChange = _this._onFileChange.bind(_this);
    _this._input.addEventListener('change', _this._onFileChange);
    return _this;
  }

  /**
   * Opens the file dialog
   */


  _createClass(FileLoader, [{
    key: 'open',
    value: function open() {
      this._input.value = null;
      this._input.click();
    }

    /**
     * Loads the file into an image
     * @param  {File} file
     * @private
     */

  }, {
    key: '_handleFile',
    value: function _handleFile(file) {
      var _this2 = this;

      var reader = new window.FileReader();
      reader.onload = function () {
        return function (e) {
          var data = e.target.result;
          var image = new window.Image();

          image.addEventListener('load', function () {
            _this2.emit('file', image);
          });

          image.addEventListener('error', function (e) {
            return _modalManager2.default.instance.displayError(_this2._t('errors.title'), _this2._t('errors.imageLoadingError.text'));
          });

          image.src = data;
        };
      }(file);
      reader.readAsDataURL(file);
    }

    /**
     * Gets called when the file input value changes
     * @private
     */

  }, {
    key: '_onFileChange',
    value: function _onFileChange() {
      var files = this._input.files;

      if (!files.length) return;

      this._handleFile(files[0]);
    }

    /**
     * Disposes all listeners
     */

  }, {
    key: 'dispose',
    value: function dispose() {
      this._input.removeEventListener('change', this._onFileChange);
    }
  }]);

  return FileLoader;
}(_globals.EventEmitter);

exports.default = FileLoader;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var Modal = function (_EventEmitter) {
  _inherits(Modal, _EventEmitter);

  function Modal(type, title, text) {
    var overlay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var closeOnOverlayClick = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    _classCallCheck(this, Modal);

    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this));

    _this.id = _globals.SDKUtils.getUUID();
    _this.type = type;
    _this.title = title;
    _this.text = text;
    _this.overlay = overlay;
    _this.closeOnOverlayClick = closeOnOverlayClick;
    _this.visible = true;
    _this.data = null;
    return _this;
  }

  /**
   * Sets the data to the given one
   * @param {Object} data
   */


  _createClass(Modal, [{
    key: 'setData',
    value: function setData(data) {
      this.data = data;
      this.emit('update');
    }

    /**
     * Closes this modal
     */

  }, {
    key: 'close',
    value: function close() {
      this.visible = false;
      this.emit('close');
    }

    /**
     * Removes this modal
     */

  }, {
    key: 'remove',
    value: function remove() {
      this.emit('remove');
    }
  }]);

  return Modal;
}(_globals.EventEmitter);

var ModalManager = function (_EventEmitter2) {
  _inherits(ModalManager, _EventEmitter2);

  function ModalManager() {
    _classCallCheck(this, ModalManager);

    var _this2 = _possibleConstructorReturn(this, (ModalManager.__proto__ || Object.getPrototypeOf(ModalManager)).call(this));

    _this2._modals = [];
    return _this2;
  }

  /**
   * Creates a loading modal
   * @param  {String} title
   * @return {Modal}
   */


  _createClass(ModalManager, [{
    key: 'displayLoading',
    value: function displayLoading(title) {
      var overlay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var modal = new Modal('loading', title, null, overlay);
      this.addModal(modal);
      return modal;
    }

    /**
     * Creates a progress modal
     * @param  {String} text
     * @return {Modal}
     */

  }, {
    key: 'displayProgress',
    value: function displayProgress(text) {
      var progress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var modal = new Modal('progress', null, text);
      modal.setData({ progress: progress });
      this.addModal(modal);
      return modal;
    }
  }, {
    key: 'displayInput',
    value: function displayInput(title) {
      var text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var overlay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var modal = new Modal('input', title, null, overlay, true);
      modal.setData({ text: text });
      this.addModal(modal);
      return modal;
    }

    /**
     * Creates a warning modal
     * @param  {String} title
     * @param  {String} text
     * @param  {Boolean} overlay = true
     * @return {Modal}
     */

  }, {
    key: 'displayWarning',
    value: function displayWarning(title, text) {
      var buttons = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['OK'];
      var overlay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

      var modal = new Modal('warning', title, text, overlay);
      modal.setData({ buttons: buttons });
      this.addModal(modal);
      return modal;
    }

    /**
     * Creates an error modal
     * @param  {String} title
     * @param  {String} text
     * @param  {Boolean} overlay = true
     * @return {Modal}
     */

  }, {
    key: 'displayError',
    value: function displayError(title, text) {
      var overlay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var modal = new Modal('error', title, text, overlay);
      this.addModal(modal);
      return modal;
    }

    /**
     * Adds the given modal to the list of modals
     * @param {Modal} modal
     */

  }, {
    key: 'addModal',
    value: function addModal(modal) {
      var _this3 = this;

      this._modals.push(modal);
      modal.on('close', function () {
        _this3.emit('update');
      });
      modal.on('remove', function () {
        _this3.removeModal(modal);
      });
      modal.on('update', function () {
        _this3.emit('update');
      });
      this.emit('update');
    }

    /**
     * Removes the given modal from the list of modals
     * @param  {Modal} modal
     */

  }, {
    key: 'removeModal',
    value: function removeModal(modal) {
      var index = this._modals.indexOf(modal);
      this._modals.splice(index, 1);
      this.emit('update');
    }

    /**
     * Returns the modals
     * @return {Array.<Modal>}
     */

  }, {
    key: 'getModals',
    value: function getModals() {
      return this._modals;
    }

    /**
     * Returns the one and only instance of this class
     * @return {ModalManager}
     */

  }], [{
    key: 'instance',
    get: function get() {
      if (!this._instance) {
        this._instance = new ModalManager();
      }
      return this._instance;
    }
  }]);

  return ModalManager;
}(_globals.EventEmitter);

exports.default = ModalManager;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _rowComponent = __webpack_require__(24);

var _rowComponent2 = _interopRequireDefault(_rowComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var WebcamComponent = function (_RowComponent) {
  _inherits(WebcamComponent, _RowComponent);

  function WebcamComponent() {
    var _ref;

    _classCallCheck(this, WebcamComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = WebcamComponent.__proto__ || Object.getPrototypeOf(WebcamComponent)).call.apply(_ref, [this].concat(args)));

    _this._needsStyleFixes = true;
    _this._modifier = 'webcam';
    return _this;
  }

  /**
   * A method that is called whenever styles need to be fixed by the JavaScript.
   * This needs to be done thanks to older Internet Explorer browsers which have
   * a bunch of CSS bugs.
   */


  _createClass(WebcamComponent, [{
    key: 'fixStyles',
    value: function fixStyles() {
      if (_globals.Utils.Browser.isIElte(11)) {
        var _refs = this.refs,
            cell = _refs.cell,
            overlay = _refs.overlay;

        var cellHeight = cell.offsetHeight;
        overlay.style.height = cellHeight + 'px';
      }
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this row's content
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderContent',
    value: function _renderContent() {
      var style = {
        backgroundImage: 'url(' + this._getAssetPath('splash/webcam.png', true, true) + ')'
      };

      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:contentWrapper' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:contentRow' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:contentCell', onClick: this._onClick, style: style, ref: 'cell' },
            _globals.ReactBEM.createElement('div', { bem: 'e:overlay', ref: 'overlay' }),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:headline' },
              this._t('pesdk.splash.title.webcam')
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:description' },
              this._t('pesdk.splash.text.webcam')
            )
          )
        )
      );
    }
  }]);

  return WebcamComponent;
}(_rowComponent2.default);

exports.default = WebcamComponent;


WebcamComponent.contextTypes = _rowComponent2.default.contextTypes;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _rowComponent = __webpack_require__(24);

var _rowComponent2 = _interopRequireDefault(_rowComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var PhotoRollComponent = function (_RowComponent) {
  _inherits(PhotoRollComponent, _RowComponent);

  function PhotoRollComponent() {
    var _ref;

    _classCallCheck(this, PhotoRollComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = PhotoRollComponent.__proto__ || Object.getPrototypeOf(PhotoRollComponent)).call.apply(_ref, [this].concat(args)));

    _this._needsStyleFixes = true;
    _this._modifier = 'photoRoll';
    return _this;
  }

  /**
   * A method that is called whenever styles need to be fixed by the JavaScript.
   * This needs to be done thanks to older Internet Explorer browsers which have
   * a bunch of CSS bugs.
   */


  _createClass(PhotoRollComponent, [{
    key: 'fixStyles',
    value: function fixStyles() {
      if (_globals.Utils.Browser.isIElte(11)) {
        var _refs = this.refs,
            cell = _refs.cell,
            overlay = _refs.overlay;

        var cellHeight = cell.offsetHeight;
        overlay.style.height = cellHeight + 'px';
      }
    }

    /**
     * Renders this row's content
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderContent',
    value: function _renderContent() {
      var style = {
        backgroundImage: 'url(' + this._getAssetPath('splash/photo-roll.png', true, true) + ')'
      };

      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:contentWrapper' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:contentRow' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:contentCell', onClick: this._onClick, style: style, ref: 'cell' },
            _globals.ReactBEM.createElement('div', { bem: 'e:overlay', ref: 'overlay' }),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:headline' },
              this._t('pesdk.splash.title.photoRoll')
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:description' },
              this._t('pesdk.splash.text.photoRoll')
            )
          )
        )
      );
    }
  }]);

  return PhotoRollComponent;
}(_rowComponent2.default);

exports.default = PhotoRollComponent;


PhotoRollComponent.contextTypes = _rowComponent2.default.contextTypes;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _screenComponent = __webpack_require__(9);

var _screenComponent2 = _interopRequireDefault(_screenComponent);

var _topBarComponent = __webpack_require__(98);

var _topBarComponent2 = _interopRequireDefault(_topBarComponent);

var _overviewComponent = __webpack_require__(102);

var _overviewComponent2 = _interopRequireDefault(_overviewComponent);

var _photoListComponent = __webpack_require__(41);

var _photoListComponent2 = _interopRequireDefault(_photoListComponent);

var _searchResultsComponent = __webpack_require__(105);

var _searchResultsComponent2 = _interopRequireDefault(_searchResultsComponent);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var PhotoRollScreenComponent = function (_ScreenComponent) {
  _inherits(PhotoRollScreenComponent, _ScreenComponent);

  function PhotoRollScreenComponent() {
    var _ref;

    _classCallCheck(this, PhotoRollScreenComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = PhotoRollScreenComponent.__proto__ || Object.getPrototypeOf(PhotoRollScreenComponent)).call.apply(_ref, [this].concat(args)));

    _this.state = {
      section: 'overview',
      sectionsHistory: []
    };

    _this._bindAll('_onLibraryClicked', '_onSearchSuggestionClicked', '_onPhotoClicked', '_onFileUpload', '_onWebcamClick', '_onBackClicked', '_onSearch');
    return _this;
  }

  // -------------------------------------------------------------------------- SECTIONS

  /**
   * Checks if the photo roll screen has a previous section
   * @return {Boolean} [description]
   */


  _createClass(PhotoRollScreenComponent, [{
    key: 'hasPreviousSection',
    value: function hasPreviousSection() {
      return !!this.state.sectionsHistory.length;
    }

    /**
     * Switches to the given section
     * @param  {String} section
     * @param  {Boolean} allowScreenSwitch = true
     * @param  {Boolean} addToStack = true
     */

  }, {
    key: 'switchToSection',
    value: function switchToSection(section) {
      var allowScreenSwitch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var addToStack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (section === 'back') {
        if (!this.hasPreviousSection()) {
          if (allowScreenSwitch) {
            return this.props.app.switchToScreen('back');
          } else {
            return this.switchToSection('overview');
          }
        }
        section = this.state.sectionsHistory.pop();
      } else if (this.state.section !== section && addToStack) {
        this.state.sectionsHistory.push(this.state.section);
      }

      this.setState({ section: section });
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when a library has been clicked
     * @param  {PhotoEditorSDK.UI.ReactUI.PhotoRoll.Library} library
     * @param {Boolean} automatically = false
     * @private
     */

  }, {
    key: '_onLibraryClicked',
    value: function _onLibraryClicked(library) {
      var automatically = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      this.state.library = library;
      this.switchToSection('library', true, !automatically);
    }

    /**
     * Gets called when a search suggestion has been clicked
     * @param  {PhotoEditorSDK.UI.ReactUI.PhotoRoll.SearchSuggestion} searchSuggestion
     * @private
     */

  }, {
    key: '_onSearchSuggestionClicked',
    value: function _onSearchSuggestionClicked(searchSuggestion) {
      this.state.searchQuery = searchSuggestion.query;
      this.switchToSection('search');
    }

    /**
     * Gets called when the user has clicked and the PhotoRoll has loaded a photo
     * @param  {PhotoEditorSDK.UI.ReactUI.PhotoRoll.Photo} photo
     * @private
     */

  }, {
    key: '_onPhotoClicked',
    value: function _onPhotoClicked(photo) {
      var _this2 = this;

      var loadingModal = _modalManager2.default.instance.displayLoading(this._t('pesdk.common.text.loading'));

      var image = new window.Image();
      image.addEventListener('load', function () {
        loadingModal.close();
        _this2.props.app.setImage(image, true);
      });
      image.addEventListener('error', function () {
        loadingModal.close();
        _modalManager2.default.instance.displayError(_this2._t('pesdk.common.title.imageLoadFail'), _this2._t('pesdk.common.text.imageLoadFail', { path: image.src }));
      });
      image.crossOrigin = _globals.SDKUtils.getCrossOriginValue(this.context.options.crossOrigin);
      image.src = photo.urls.raw;
    }

    /**
     * Gets called when the user clicks the back button
     * @private
     */

  }, {
    key: '_onBackClicked',
    value: function _onBackClicked() {
      this.switchToSection('back');
    }

    /**
     * Gets called when a search is triggered
     * @param  {String} query
     * @private
     */

  }, {
    key: '_onSearch',
    value: function _onSearch(query) {
      if (!query.trim().length) {
        this.state.searchQuery = null;
        return this.switchToSection('back', false);
      }

      this.state.searchQuery = query;
      this.switchToSection('search');
    }

    /**
     * Gets called when the user clicks the webcam button. Switches to the
     * webcam screen
     * @private
     */

  }, {
    key: '_onWebcamClick',
    value: function _onWebcamClick() {
      this.props.app.switchToScreen('webcam');
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user has selected a new file
     * @param {Image} image
     */

  }, {
    key: '_onFileUpload',
    value: function _onFileUpload(image) {
      this.props.app.setImage(image);
    }

    // -------------------------------------------------------------------------- BACK BUTTON

    /**
     * Checks if the back button should be visible
     * @return {Boolean}
     * @private
     */

  }, {
    key: '_isBackButtonVisible',
    value: function _isBackButtonVisible() {
      return this.state.sectionsHistory.length !== 0 || this.props.app.hasPreviousScreen();
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the content component for this screen
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderContent',
    value: function _renderContent() {
      switch (this.state.section) {
        case 'search':
          return _globals.ReactBEM.createElement(_searchResultsComponent2.default, {
            query: this.state.searchQuery,
            onPhotoClicked: this._onPhotoClicked,
            onSearchSuggestionClicked: this._onSearchSuggestionClicked });
        case 'library':
          return _globals.ReactBEM.createElement(_photoListComponent2.default, {
            crossOrigin: _globals.SDKUtils.getCrossOriginValue(this.context.options.crossOrigin),
            library: this.state.library,
            onPhotoClicked: this._onPhotoClicked });
        case 'overview':
          return _globals.ReactBEM.createElement(_overviewComponent2.default, {
            onLibraryClicked: this._onLibraryClicked,
            onSearchSuggestionClicked: this._onSearchSuggestionClicked
          });
      }
    }

    /**
     * Renders this screen
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderScreen',
    value: function _renderScreen() {
      var contentComponent = this._renderContent();

      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:photoRollScreen' },
        _globals.ReactBEM.createElement(_topBarComponent2.default, {
          onBackClicked: this._onBackClicked,
          onSearch: this._onSearch,
          searchQuery: this.state.searchQuery,
          onFileUpload: this._onFileUpload,
          onWebcamClick: this._onWebcamClick,
          backButton: this._isBackButtonVisible(),
          backButtonLabel: this._t('pesdk.common.button.back'),
          ref: 'topBarControls' }),
        contentComponent
      );
    }
  }]);

  return PhotoRollScreenComponent;
}(_screenComponent2.default);

// PhotoRollScreenComponent.childContextTypes = {
//   ui: PropTypes.object.isRequired,
//   editor: PropTypes.object.isRequired,
//   mediator: PropTypes.object.isRequired,
//   options: PropTypes.object.isRequired,
//   editorScreen: PropTypes.object.isRequired
// }

exports.default = PhotoRollScreenComponent;
PhotoRollScreenComponent.contextTypes = _screenComponent2.default.contextTypes;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _topBarComponent = __webpack_require__(12);

var _topBarComponent2 = _interopRequireDefault(_topBarComponent);

var _topBarButtonComponent = __webpack_require__(99);

var _topBarButtonComponent2 = _interopRequireDefault(_topBarButtonComponent);

var _invisibleUploadComponent = __webpack_require__(25);

var _invisibleUploadComponent2 = _interopRequireDefault(_invisibleUploadComponent);

var _topBarSearchComponent = __webpack_require__(100);

var _topBarSearchComponent2 = _interopRequireDefault(_topBarSearchComponent);

var _backButtonComponent = __webpack_require__(101);

var _backButtonComponent2 = _interopRequireDefault(_backButtonComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var PhotoRollTopBarComponent = function (_TopBarComponent) {
  _inherits(PhotoRollTopBarComponent, _TopBarComponent);

  function PhotoRollTopBarComponent() {
    var _ref;

    _classCallCheck(this, PhotoRollTopBarComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = PhotoRollTopBarComponent.__proto__ || Object.getPrototypeOf(PhotoRollTopBarComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onUploadButtonClicked', '_onWebcamButtonClicked', '_onBackClicked', '_onSearchValueChange', '_onNewFile');

    _this._onSearchValueChange = _globals.Utils.debounce(_this._onSearchValueChange, 250);
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the user clicks the back button
   * @private
   */


  _createClass(PhotoRollTopBarComponent, [{
    key: '_onBackClicked',
    value: function _onBackClicked() {
      this.props.onBackClicked && this.props.onBackClicked();
    }

    /**
     * Gets called when the search value has changed (this method is debounced)
     * @param {String} value
     * @private
     */

  }, {
    key: '_onSearchValueChange',
    value: function _onSearchValueChange(value) {
      this.props.onSearch && this.props.onSearch(value);
    }

    /**
     * Gets called when the user clicks the upload button
     * @private
     */

  }, {
    key: '_onUploadButtonClicked',
    value: function _onUploadButtonClicked() {
      this.refs.upload.open();
    }

    /**
     * Gets called when the user clicks the webcam button
     * @private
     */

  }, {
    key: '_onWebcamButtonClicked',
    value: function _onWebcamButtonClicked() {
      this.props.onWebcamClick && this.props.onWebcamClick();
    }

    /**
     * Gets called when a new file has been selected
     * @param  {File} file
     * @private
     */

  }, {
    key: '_onNewFile',
    value: function _onNewFile(file) {
      this.props.onFileUpload && this.props.onFileUpload(file);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Checks if the webcam is available
     * @return {Boolean}
     * @private
     */

  }, {
    key: '_isWebcamAvailable',
    value: function _isWebcamAvailable() {
      return !_globals.Utils.isMobile() && this.context.options.enableWebcam !== false;
    }

    /**
     * Renders the buttons on the right
     * @return {Array.<React.Component>}
     * @private
     */

  }, {
    key: '_renderRightButtons',
    value: function _renderRightButtons() {
      var options = this.context.options;

      var buttons = [];

      if (options.enableUpload) {
        buttons.push(_globals.ReactBEM.createElement(_topBarButtonComponent2.default, {
          icon: this._getAssetPath('photo-roll/upload.png', true),
          onClick: this._onUploadButtonClicked
        }));
      }

      if (this._isWebcamAvailable()) {
        buttons.push(_globals.ReactBEM.createElement(_topBarButtonComponent2.default, {
          icon: this._getAssetPath('photo-roll/webcam.png', true),
          onClick: this._onWebcamButtonClicked
        }));
      }

      return buttons;
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var backButton = void 0;
      if (this.props.backButton) {
        backButton = _globals.ReactBEM.createElement(_backButtonComponent2.default, {
          label: this.props.backButtonLabel,
          onClick: this._onBackClicked });
      }
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:topBar e:row' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:cell' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:table' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:cell m:left' },
              backButton
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:cell m:fullWidth' },
              _globals.ReactBEM.createElement(_topBarSearchComponent2.default, {
                searchQuery: this.props.searchQuery,
                onChange: this._onSearchValueChange }),
              _globals.ReactBEM.createElement(_invisibleUploadComponent2.default, { onNewFile: this._onNewFile, ref: 'upload' })
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:cell m:right' },
              this._renderRightButtons()
            )
          )
        )
      );
    }
  }]);

  return PhotoRollTopBarComponent;
}(_topBarComponent2.default);

exports.default = PhotoRollTopBarComponent;


PhotoRollTopBarComponent.contextTypes = _topBarComponent2.default.contextTypes;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var TopBarButtonComponent = function (_BaseComponent) {
  _inherits(TopBarButtonComponent, _BaseComponent);

  function TopBarButtonComponent() {
    _classCallCheck(this, TopBarButtonComponent);

    return _possibleConstructorReturn(this, (TopBarButtonComponent.__proto__ || Object.getPrototypeOf(TopBarButtonComponent)).apply(this, arguments));
  }

  _createClass(TopBarButtonComponent, [{
    key: 'renderWithBEM',

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:topBar' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:iconButton', onClick: this.props.onClick },
          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this.props.icon })
        )
      );
    }
  }]);

  return TopBarButtonComponent;
}(_globals.BaseComponent);

exports.default = TopBarButtonComponent;


TopBarButtonComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var TopBarSearchComponent = function (_BaseComponent) {
  _inherits(TopBarSearchComponent, _BaseComponent);

  function TopBarSearchComponent() {
    var _ref;

    _classCallCheck(this, TopBarSearchComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = TopBarSearchComponent.__proto__ || Object.getPrototypeOf(TopBarSearchComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onFocus', '_onBlur', '_onChange', '_onBarClick');

    _this.state = {
      active: false,
      placeholder: _this._t('pesdk.library.placeholder.search'),
      value: _this.props.searchQuery || ''
    };
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component is about to receive new properties
   * @param  {Object} nextProps
   */


  _createClass(TopBarSearchComponent, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.searchQuery || this.state.value) {
        this.state.active = true;
      } else {
        this.state.active = false;
      }

      this.setState({
        value: nextProps.searchQuery || ''
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.refs.input.value = this.state.value;
    }

    /**
     * Gets called when this component has been mounted
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _get(TopBarSearchComponent.prototype.__proto__ || Object.getPrototypeOf(TopBarSearchComponent.prototype), 'componentDidMount', this).call(this);
      this._hiddenInputDummy = document.createElement('div');

      var styleObject = _globals.Utils.getStyleObject(this.refs.input);
      var overrideKeys = ['font', 'lineHeight', 'textAlign', 'textIndent', 'textTransform', 'textDecoration', 'textRendering', 'textShadow', 'textOverflow', 'wordSpacing', 'letterSpacing', 'whiteSpace'];
      overrideKeys.forEach(function (key) {
        _this2._hiddenInputDummy.style[key] = styleObject[key];
      });

      this._hiddenInputDummy.style.position = 'absolute';
      this._hiddenInputDummy.style.top = '-9999px';
      this._hiddenInputDummy.style.left = '-9999px';

      this.refs.root.appendChild(this._hiddenInputDummy);

      this._updateInputWidth();
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Updates the input width to fit the text width
     * @private
     */

  }, {
    key: '_updateInputWidth',
    value: function _updateInputWidth() {
      var _this3 = this;

      this._hiddenInputDummy.innerHTML = this.state.value || this.state.placeholder;
      setTimeout(function () {
        _this3.setState({
          inputWidth: _this3._hiddenInputDummy.offsetWidth + 5
        });
      }, 0);
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the search bar has been clicked
     * @private
     */

  }, {
    key: '_onBarClick',
    value: function _onBarClick() {
      this.refs.input.focus();
    }

    /**
     * Gets called when the input fields is focused
     * @private
     */

  }, {
    key: '_onFocus',
    value: function _onFocus() {
      this.setState({ active: true });
    }

    /**
     * Gets called when the input field loses focus
     * @private
     */

  }, {
    key: '_onBlur',
    value: function _onBlur() {
      if (this.state.value === '' && !this.props.searchQuery) {
        this.setState({ active: false });
      }
    }

    /**
     * Gets called when the input value has changed
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onChange',
    value: function _onChange(e) {
      this.state.value = e.target.value;
      this.forceUpdate();

      this.props.onChange && this.props.onChange(this.state.value);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var searchBarBEM = '$e:searchBar';
      var iconPath = 'photo-roll/search-light.png';
      if (this.state.active) {
        searchBarBEM += ' m:active';
        iconPath = 'photo-roll/search-dark.png';
      }
      iconPath = this._getAssetPath(iconPath, true);

      var inputStyle = {
        width: this.state.inputWidth + 'px'
      };

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:photoRollScreen' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: searchBarBEM, ref: 'root', onClick: this._onBarClick },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:content' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: '$e:icon' },
              _globals.ReactBEM.createElement('img', { src: iconPath, bem: 'e:image' })
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:inputContainer' },
              _globals.ReactBEM.createElement('input', {
                bem: 'e:input',
                ref: 'input',
                placeholder: this.state.placeholder,
                onBlur: this._onBlur,
                onFocus: this._onFocus,
                onChange: this._onChange,
                defaultValue: this.state.value,
                style: inputStyle })
            )
          )
        )
      );
    }
  }]);

  return TopBarSearchComponent;
}(_globals.BaseComponent);

exports.default = TopBarSearchComponent;


TopBarSearchComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var TopBarBackButtonComponent = function (_BaseComponent) {
  _inherits(TopBarBackButtonComponent, _BaseComponent);

  function TopBarBackButtonComponent() {
    _classCallCheck(this, TopBarBackButtonComponent);

    return _possibleConstructorReturn(this, (TopBarBackButtonComponent.__proto__ || Object.getPrototypeOf(TopBarBackButtonComponent)).apply(this, arguments));
  }

  _createClass(TopBarBackButtonComponent, [{
    key: 'renderWithBEM',

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:topBar' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:backButton', onClick: this.props.onClick },
          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('top-bar/back.png', true) }),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:label' },
            this.props.label
          )
        )
      );
    }
  }]);

  return TopBarBackButtonComponent;
}(_globals.BaseComponent);

exports.default = TopBarBackButtonComponent;


TopBarBackButtonComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

var _libraryComponent = __webpack_require__(103);

var _libraryComponent2 = _interopRequireDefault(_libraryComponent);

var _searchSuggestionComponent = __webpack_require__(40);

var _searchSuggestionComponent2 = _interopRequireDefault(_searchSuggestionComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var OverviewComponent = function (_BaseComponent) {
  _inherits(OverviewComponent, _BaseComponent);

  function OverviewComponent() {
    var _ref;

    _classCallCheck(this, OverviewComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = OverviewComponent.__proto__ || Object.getPrototypeOf(OverviewComponent)).call.apply(_ref, [this].concat(args)));

    _this._needsStyleFixes = true;
    _this.state = {
      loading: true,
      libraries: [],
      searchSuggestions: []
    };

    _this._bindAll('_onLibraryClick', '_onSearchSuggestionClick');

    var PhotoRollProvider = _this.context.options.photoRoll.provider;
    _this._provider = new PhotoRollProvider();
    return _this;
  }

  /**
   * A method that is called whenever styles need to be fixed by the JavaScript.
   * This needs to be done thanks to older Internet Explorer browsers which have
   * a bunch of CSS bugs.
   */


  _createClass(OverviewComponent, [{
    key: 'fixStyles',
    value: function fixStyles() {
      if (_globals.Utils.Browser.isIElte(11)) {
        var _refs = this.refs,
            cell = _refs.cell,
            container = _refs.container;

        if (!(cell && container)) {
          return;
        }
        var cellHeight = cell.offsetHeight;
        container.style.height = cellHeight + 'px';
      }
    }

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called when this component has been mounted
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _get(OverviewComponent.prototype.__proto__ || Object.getPrototypeOf(OverviewComponent.prototype), 'componentDidMount', this).call(this);

      var modal = _modalManager2.default.instance.displayLoading(this._t('pesdk.common.text.loading'));
      this._load().then(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
            libraries = _ref3[0],
            searchSuggestions = _ref3[1];

        modal.close();
        if (libraries.length === 1) {
          _this2._onLibraryClick(libraries[0], true);
        } else {
          _this2.setState({
            loading: false,
            libraries: libraries,
            searchSuggestions: searchSuggestions
          });
        }
      });
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when a library was clicked
     * @param  {PhotoEditorSDK.UI.ReactUI.PhotoRoll.Library} library
     * @param  {Boolean} automatically = false
     * @private
     */

  }, {
    key: '_onLibraryClick',
    value: function _onLibraryClick(library) {
      var automatically = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      this.props.onLibraryClicked && this.props.onLibraryClicked(library, automatically);
    }

    /**
     * Gets called when a search suggestion was clicked
     * @param  {PhotoEditorSDK.UI.ReactUI.PhotoRoll.SearchSuggestion} searchSuggestion
     * @private
     */

  }, {
    key: '_onSearchSuggestionClick',
    value: function _onSearchSuggestionClick(searchSuggestion) {
      this.props.onSearchSuggestionClicked && this.props.onSearchSuggestionClicked(searchSuggestion);
    }

    // -------------------------------------------------------------------------- LOADING

    /**
     * Loads the libraries and search suggestions (if present)
     * @return {Promise}
     * @private
     */

  }, {
    key: '_load',
    value: function _load() {
      var promises = [this._provider.getLibraries(), this._provider.getSearchSuggestions()];
      return _globals.Promise.all(promises);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the library items
     * @return {React.Component}
     * @private
     */

  }, {
    key: '_renderLibraries',
    value: function _renderLibraries() {
      var _this3 = this;

      var items = this.state.libraries.map(function (library) {
        return _globals.ReactBEM.createElement(_libraryComponent2.default, {
          onClick: _this3._onLibraryClick,
          library: library });
      });
      return _globals.ReactBEM.createElement(
        'li',
        { bem: 'e:item' },
        _globals.ReactBEM.createElement(
          'bem',
          { specifier: 'b:photoRoll' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:headline' },
            'Browse libraries'
          ),
          _globals.ReactBEM.createElement(
            'ul',
            { bem: '$e:libraryList' },
            items
          )
        )
      );
    }

    /**
     * Rnders the search suggestion items
     * @return {React.Component}
     * @private
     */

  }, {
    key: '_renderSearchSuggestions',
    value: function _renderSearchSuggestions() {
      var _this4 = this;

      if (!this.state.searchSuggestions.length) return null;

      var items = this.state.searchSuggestions.map(function (searchSuggestion) {
        return _globals.ReactBEM.createElement(_searchSuggestionComponent2.default, {
          onClick: _this4._onSearchSuggestionClick,
          searchSuggestion: searchSuggestion });
      });

      return _globals.ReactBEM.createElement(
        'li',
        { bem: 'e:item' },
        _globals.ReactBEM.createElement(
          'bem',
          { specifier: 'b:photoRoll' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:headline' },
            'Search suggestions'
          ),
          _globals.ReactBEM.createElement(
            'ul',
            { bem: '$e:libraryList' },
            items
          )
        )
      );
    }

    /**
     * Renders the content for this component
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderContent',
    value: function _renderContent() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:photoRoll e:row m:fullHeight' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:cell', ref: 'cell' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:container', ref: 'container' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:innerContainer' },
              _globals.ReactBEM.createElement(
                'ul',
                { bem: '$e:groupList' },
                this._renderLibraries(),
                this._renderSearchSuggestions()
              )
            )
          )
        )
      );
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      if (!this.state.loading) {
        return this._renderContent();
      } else {
        return _globals.ReactBEM.createElement('div', null);
      }
    }
  }]);

  return OverviewComponent;
}(_globals.BaseComponent);

exports.default = OverviewComponent;


OverviewComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var LibraryComponent = function (_BaseComponent) {
  _inherits(LibraryComponent, _BaseComponent);

  function LibraryComponent() {
    var _ref;

    _classCallCheck(this, LibraryComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = LibraryComponent.__proto__ || Object.getPrototypeOf(LibraryComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onClick');
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the user clicks the library
   * @private
   */


  _createClass(LibraryComponent, [{
    key: '_onClick',
    value: function _onClick() {
      this.props.onClick && this.props.onClick(this.props.library);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var library = this.props.library;

      var style = {
        backgroundImage: 'url(' + library.coverImage + ')'
      };

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'b:photoRoll e:libraryList' },
        _globals.ReactBEM.createElement(
          'li',
          { bem: 'e:item', style: style, onClick: this._onClick },
          _globals.ReactBEM.createElement('div', { bem: 'e:overlay' }),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:name' },
            library.name
          )
        )
      );
    }
  }]);

  return LibraryComponent;
}(_globals.BaseComponent);

exports.default = LibraryComponent;


LibraryComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var PhotoComponent = function (_BaseComponent) {
  _inherits(PhotoComponent, _BaseComponent);

  function PhotoComponent() {
    _classCallCheck(this, PhotoComponent);

    return _possibleConstructorReturn(this, (PhotoComponent.__proto__ || Object.getPrototypeOf(PhotoComponent)).apply(this, arguments));
  }

  _createClass(PhotoComponent, [{
    key: 'renderWithBEM',

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */
    value: function renderWithBEM() {
      var photo = this.props.photo;

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'b:photoRoll e:photoList' },
        _globals.ReactBEM.createElement(
          'li',
          { bem: '$e:item', onClick: this.props.onClick },
          _globals.ReactBEM.createElement('div', { bem: 'e:overlay' }),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:title' },
            photo.title
          ),
          _globals.ReactBEM.createElement('img', { bem: 'e:image', src: photo.urls.thumb })
        )
      );
    }
  }]);

  return PhotoComponent;
}(_globals.BaseComponent);

exports.default = PhotoComponent;


PhotoComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _photoListComponent = __webpack_require__(41);

var _photoListComponent2 = _interopRequireDefault(_photoListComponent);

var _noSearchResultsComponent = __webpack_require__(106);

var _noSearchResultsComponent2 = _interopRequireDefault(_noSearchResultsComponent);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var SearchResultsComponent = function (_PhotoListComponent) {
  _inherits(SearchResultsComponent, _PhotoListComponent);

  function SearchResultsComponent() {
    _classCallCheck(this, SearchResultsComponent);

    return _possibleConstructorReturn(this, (SearchResultsComponent.__proto__ || Object.getPrototypeOf(SearchResultsComponent)).apply(this, arguments));
  }

  _createClass(SearchResultsComponent, [{
    key: 'componentWillReceiveProps',

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called when this component receives new props
     * @param  {Object} props
     */
    value: function componentWillReceiveProps(props) {
      if (props.query !== this.props.query) {
        this._loadPhotos(props.query);
      }
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Returns the headline for this view
     * @return {String}
     * @private
     */

  }, {
    key: '_getHeadline',
    value: function _getHeadline() {
      return this._t('pesdk.library.title.searchResults', {
        query: this.props.query
      });
    }

    /**
     * Loads the photos
     * @param {String} query
     * @private
     */

  }, {
    key: '_loadPhotos',
    value: function _loadPhotos() {
      var _this2 = this;

      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.query;

      this._totalPhotosHeight = 0;
      var modal = _modalManager2.default.instance.displayProgress(this._t('pesdk.common.text.loading'));
      var PhotoRollProvider = this.context.options.photoRoll.provider;
      var provider = new PhotoRollProvider();

      provider.searchPhotos(query).then(function (photos) {
        return _this2._preloadPhotos(photos, modal);
      }).then(function (photos) {
        _this2.setState({ photos: photos, loading: false });
        modal.close();
      });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the 'no results found' screen
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderNotFound',
    value: function _renderNotFound() {
      return _globals.ReactBEM.createElement(_noSearchResultsComponent2.default, {
        query: this.props.query,
        onSearchSuggestionClicked: this.props.onSearchSuggestionClicked });
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      if (!this.state.loading) {
        if (this.state.photos.length === 0) {
          return this._renderNotFound();
        } else {
          return this._renderPhotos();
        }
      } else {
        return _globals.ReactBEM.createElement('div', null);
      }
    }
  }]);

  return SearchResultsComponent;
}(_photoListComponent2.default);

exports.default = SearchResultsComponent;


SearchResultsComponent.contextTypes = _photoListComponent2.default.contextTypes;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _searchSuggestionComponent = __webpack_require__(40);

var _searchSuggestionComponent2 = _interopRequireDefault(_searchSuggestionComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var NoSearchResultsComponent = function (_BaseComponent) {
  _inherits(NoSearchResultsComponent, _BaseComponent);

  function NoSearchResultsComponent() {
    var _ref;

    _classCallCheck(this, NoSearchResultsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = NoSearchResultsComponent.__proto__ || Object.getPrototypeOf(NoSearchResultsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onSearchSuggestionClick');

    var PhotoRollProvider = _this.context.options.photoRoll.provider;
    _this._provider = new PhotoRollProvider();

    _this.state = {
      searchSuggestions: []
    };
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when a search suggestion was clicked
   * @param  {PhotoEditorSDK.UI.ReactUI.PhotoRoll.SearchSuggestion} searchSuggestion
   * @private
   */


  _createClass(NoSearchResultsComponent, [{
    key: '_onSearchSuggestionClick',
    value: function _onSearchSuggestionClick(searchSuggestion) {
      this.props.onSearchSuggestionClicked && this.props.onSearchSuggestionClicked(searchSuggestion);
    }

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called when this component has been mounted
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _get(NoSearchResultsComponent.prototype.__proto__ || Object.getPrototypeOf(NoSearchResultsComponent.prototype), 'componentDidMount', this).call(this);

      this._provider.getSearchSuggestions().then(function (searchSuggestions) {
        _this2.setState({
          searchSuggestions: searchSuggestions
        });
      });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the message (which can include html)
     * @return {Object}
     * @private
     */

  }, {
    key: '_renderMessage',
    value: function _renderMessage() {
      return { __html: this._t('pesdk.library.text.noSearchResults', {
          query: this.props.query
        }) };
    }

    /**
     * Renders the search suggestions
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderSearchSuggestions',
    value: function _renderSearchSuggestions() {
      var _this3 = this;

      if (!this.state.searchSuggestions.length) return null;

      var items = this.state.searchSuggestions.map(function (searchSuggestion) {
        return _globals.ReactBEM.createElement(_searchSuggestionComponent2.default, {
          onClick: _this3._onSearchSuggestionClick,
          searchSuggestion: searchSuggestion });
      });

      return _globals.ReactBEM.createElement(
        'div',
        null,
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:headline' },
          'Search suggestions'
        ),
        _globals.ReactBEM.createElement(
          'ul',
          { bem: '$e:libraryList' },
          items
        )
      );
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:photoRoll e:row m:fullHeight' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:cell' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:container' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:innerContainer' },
              _globals.ReactBEM.createElement('div', { bem: 'e:noSearchResults', dangerouslySetInnerHTML: this._renderMessage() }),
              this._renderSearchSuggestions()
            )
          )
        )
      );
    }
  }]);

  return NoSearchResultsComponent;
}(_globals.BaseComponent);

exports.default = NoSearchResultsComponent;


NoSearchResultsComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _screenComponent = __webpack_require__(9);

var _screenComponent2 = _interopRequireDefault(_screenComponent);

var _topBarComponent = __webpack_require__(12);

var _topBarComponent2 = _interopRequireDefault(_topBarComponent);

var _webcamComponent = __webpack_require__(108);

var _webcamComponent2 = _interopRequireDefault(_webcamComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */


var WebcamScreenComponent = function (_ScreenComponent) {
  _inherits(WebcamScreenComponent, _ScreenComponent);

  function WebcamScreenComponent() {
    _classCallCheck(this, WebcamScreenComponent);

    var _this = _possibleConstructorReturn(this, (WebcamScreenComponent.__proto__ || Object.getPrototypeOf(WebcamScreenComponent)).call(this));

    _this._bindAll('_onCancel', '_onWebcamReady', '_onShutterClicked');
    _this.state = { webcamReady: false };
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the webcam is ready
   * @private
   */


  _createClass(WebcamScreenComponent, [{
    key: '_onWebcamReady',
    value: function _onWebcamReady() {
      this.setState({ webcamReady: true });
    }

    /**
     * Gets called when the user clicks the cancel button in the top bar
     * @private
     */

  }, {
    key: '_onCancel',
    value: function _onCancel() {
      this.props.app.switchToScreen('back');
    }

    /**
     * Gets called when the shutter button has been clicked
     * @private
     */

  }, {
    key: '_onShutterClicked',
    value: function _onShutterClicked() {
      var _this2 = this;

      var webcam = this.refs.webcam;
      webcam.makePhoto().then(function (image) {
        _this2.props.app.setImage(image);
      }).catch(function (e) {
        _globals.Log.error(e);
      });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this screen
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderScreen',
    value: function _renderScreen() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:webcamScreen' },
        _globals.ReactBEM.createElement(
          _topBarComponent2.default,
          {
            label: this._t('pesdk.camera.title.headline') },
          _globals.ReactBEM.createElement(
            'bem',
            { specifier: '$b:topBar' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:cancelButton', onClick: this._onCancel },
              this._t('pesdk.common.button.cancel')
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:label' },
              this._t('pesdk.camera.title.headline')
            )
          )
        ),
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$b:canvas e:container e:row' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:container e:cell' },
            _globals.ReactBEM.createElement(_webcamComponent2.default, {
              ref: 'webcam',
              onReady: this._onWebcamReady,
              onBack: this._onCancel })
          )
        ),
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$b:controls $e:container e:row' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:cell' },
            _globals.ReactBEM.createElement(
              'bem',
              { specifier: 'b:webcamScreen' },
              _globals.ReactBEM.createElement(
                'div',
                {
                  bem: '$e:shutterButton',
                  onClick: this._onShutterClicked,
                  className: this.state.webcamReady ? 'is-active' : false },
                _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/webcam/shutter.png', true) })
              )
            )
          )
        )
      );
    }
  }]);

  return WebcamScreenComponent;
}(_screenComponent2.default);

exports.default = WebcamScreenComponent;


WebcamScreenComponent.contextTypes = _screenComponent2.default.contextTypes;

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

var _webcamVideoComponent = __webpack_require__(109);

var _webcamVideoComponent2 = _interopRequireDefault(_webcamVideoComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var WebcamComponent = function (_BaseComponent) {
  _inherits(WebcamComponent, _BaseComponent);

  function WebcamComponent() {
    _classCallCheck(this, WebcamComponent);

    var _this = _possibleConstructorReturn(this, (WebcamComponent.__proto__ || Object.getPrototypeOf(WebcamComponent)).call(this));

    _this._bindAll('_onWebcamReady', '_onWebcamError');

    _this.state = { webcamReady: false };
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Checks whether this component needs an update
   * @param {Object} nextProps
   * @param {Object} nextState
   */


  _createClass(WebcamComponent, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      // This component never updates
      return false;
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the webcam is ready to serve a video
     * @private
     */

  }, {
    key: '_onWebcamReady',
    value: function _onWebcamReady() {
      this.props.onReady && this.props.onReady();
      this.setState({ webcamReady: true });
    }
  }, {
    key: '_onWebcamError',
    value: function _onWebcamError(msg) {
      var _this2 = this;

      var errorModal = _modalManager2.default.instance.displayError(this._t('pesdk.common.title.error'), this._t('pesdk.camera.text.webcamUnavailable', { error: msg }));
      errorModal.on('close', function () {
        return _this2.props.onBack();
      });
    }

    /**
     * Public method that makes a photo from the current video stream
     * @return {Promise}
     */

  }, {
    key: 'makePhoto',
    value: function makePhoto() {
      if (!this.state.webcamReady) {
        return;
      }

      return this._webcam.capture();
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var _this3 = this;

      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:webcam', ref: 'container' },
        _globals.ReactBEM.createElement(_webcamVideoComponent2.default, {
          flashURL: this._getAssetPath('fallback/webcam.swf'),
          ref: function ref(el) {
            _this3._webcam = el;
          },
          onWebcamError: this._onWebcamError,
          onWebcamAvailable: this._onWebcamReady })
      );
    }
  }]);

  return WebcamComponent;
}(_globals.BaseComponent);

exports.default = WebcamComponent;


WebcamComponent.propTypes = {
  onReady: _globals.PropTypes.func
};

WebcamComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx React.createElement */
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */
/* globals Image */

var WebcamVideoComponent = function (_BaseComponent) {
  _inherits(WebcamVideoComponent, _BaseComponent);

  function WebcamVideoComponent(props) {
    _classCallCheck(this, WebcamVideoComponent);

    var _this = _possibleConstructorReturn(this, (WebcamVideoComponent.__proto__ || Object.getPrototypeOf(WebcamVideoComponent)).call(this, props));

    _this._bindAll('_onLoadedMetadata');

    _this.state = {
      webcamAvailable: false,
      useFlashFallback: false,
      containerWidth: null,
      containerHeight: null
    };

    _this._getUserMedia = null;
    _this._webcamStream = null;
    return _this;
  }

  _createClass(WebcamVideoComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this._initGetUserMedia();
      this._calculateFlashDimensions();

      if (this._getUserMedia) {
        this._getUserMedia({
          video: {
            optional: [{ minWidth: 320 }, { minWidth: 640 }, { minWidth: 1024 }, { minWidth: 1280 }, { minWidth: 1920 }, { minWidth: 2560 }]
          },
          audio: false
        }).then(function (stream) {
          _this2._webcamStream = stream;
          var video = _this2._videoElement;

          if ('srcObject' in video) {
            video.srcObject = stream;
          } else {
            video.src = window.URL.createObjectURL(stream);
          }
        }).catch(function (error) {
          if (_this2.props.onWebcamError) {
            _this2.props.onWebcamError(error);
          }
        });
      } else {
        var deleteWebcam = false;

        // Sadly we need to polute the global namespace for flash/js communication
        // keeping it at a minimum here
        if (!window.Webcam) {
          window.Webcam = {};
          deleteWebcam = true;
        }

        window.Webcam.flashNotify = function (type, msg) {
          switch (type) {
            case 'cameraLive':
              _this2.setState({ webcamAvailable: true }, function () {
                _this2.props.onWebcamAvailable && _this2.props.onWebcamAvailable();
              });
              delete window.Webcam.flashNotify;
              if (deleteWebcam) {
                delete window.Webcam;
              }
              break;
            case 'error':
              _this2.props.onWebcamError && _this2.props.onWebcamError(msg);
              delete window.Webcam.flashNotify;
              if (deleteWebcam) {
                delete window.Webcam;
              }
              break;
          }
        };
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._disposeWebcam();
    }

    /**
     * Checks the current browser environment for mediaDevices.getUserMedia of for
     * legacy navitator.getUserMedia, and saves a shim into the _getUserMedia
     * property.
     *
     * @memberof WebcamVideoComponent
     * @private
     */

  }, {
    key: '_initGetUserMedia',
    value: function _initGetUserMedia() {
      // Check for mediaDevices#getUserMedia
      if (navigator.mediaDevices) {
        if (navigator.mediaDevices.getUserMedia) {
          this._getUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
        }
      }

      // Look for legacy navigator.getUserMedia implementations
      if (!this._getUserMedia) {
        var legacyGetUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

        if (legacyGetUserMedia) {
          this._getUserMedia = function (options) {
            return new Promise(function (resolve, reject) {
              return legacyGetUserMedia.call(navigator, options, resolve, reject);
            });
          };
        }
      }

      // If no getUserMedia is found, use flash fallbcak
      if (!this._getUserMedia) {
        this.setState({ useFlashFallback: true });
      }
    }

    /**
     * Disposes the current webcam stream, if available.
     *
     * @memberof WebcamVideoComponent
     * @private
     */

  }, {
    key: '_disposeWebcam',
    value: function _disposeWebcam() {
      if (this._webcamStream) {
        var stream = this._webcamStream;
        var track = stream.getTracks()[0];
        if (track) {
          track.stop();
        } else if (stream.stop) {
          stream.stop();
        }
      } else if (this._flashWebcam) {
        this._flashWebcam._releaseCamera();
      }
    }

    /**
     * Captures the current webcam image in the stream, if available.
     *
     * @returns {Promise<Image>}
     * @memberof WebcamVideoComponent
     */

  }, {
    key: 'capture',
    value: function capture() {
      var _this3 = this;

      if (!this.state.webcamAvailable) {
        return Promise.reject(new Error('Webcam video not available'));
      }

      if (this._videoElement && !this._flashWebcam) {
        return new Promise(function (resolve, reject) {
          var video = _this3._videoElement;
          if (video.readyState === 0) {
            reject(new Error('Webcam video not available'));
          } else {
            var canvas = document.createElement('canvas');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;

            var context = canvas.getContext('2d');
            context.drawImage(video, 0, 0);

            var image = new window.Image();
            image.addEventListener('load', function () {
              resolve(image);
            });
            image.src = canvas.toDataURL('image/jpeg');
          }
        });
      } else if (this._flashWebcam) {
        return new Promise(function (resolve, reject) {
          var rawData = _this3._flashWebcam._snap();
          var image = new Image();
          image.onload = function () {
            resolve(image);
          };
          image.src = 'data:image/jpeg;base64,' + rawData;
        });
      }

      return Promise.reject(new Error('Webcam video not available'));
    }

    /**
     * Hack to get an estimate of the editor's screen height (only for IE where
     * height: 100% is broken). Just goes up the DOM tree until it finds an element
     * whose height is larger than a minimum value.
     *
     * @param {number} min
     * @returns {number|null}
     * @memberof WebcamVideoComponent
     * @private
     */

  }, {
    key: '_getIEHeight',
    value: function _getIEHeight() {
      var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;

      var current = this._container;

      for (var i = 0; i < 1000; i++) {
        if (current.clientHeight > min) {
          break;
        }

        if (current.parentNode) {
          current = current.parentNode;
        } else {
          break;
        }
      }
      return current.clientHeight > min ? current.clientHeight : null;
    }

    /**
     * Calculates the dimensions of the flash webcam viewport, and sets the state
     * accordingly.
     * @private
     * @memberof WebcamVideoComponent
     */

  }, {
    key: '_calculateFlashDimensions',
    value: function _calculateFlashDimensions() {
      var containerHeight = 0.9 * (this._getIEHeight() || window.innerHeight);
      var width = 4 / 3 * containerHeight || 640;
      var height = containerHeight || 480;

      this.setState({
        containerWidth: width,
        containerHeight: height
      });
    }

    /**
     * Creates a React Component wrapping the flash webcam object
     * @returns {React.Component}
     * @memberof WebcamVideoComponent
     */

  }, {
    key: '_getFlashFallbackComponent',
    value: function _getFlashFallbackComponent() {
      var _this4 = this;

      var width = this.state.containerWidth || 640;
      var height = this.state.containerHeight || 480;

      var flashvars = 'width=' + width + '&height=' + height + '&dest_width=1024&dest_height=768&jpeg_quality=100&fps=24';

      return React.createElement(
        'object',
        { classID: 'clsid:d27cdb6e-ae6d-11cf-96b8-444553540000', type: 'application/x-shockwave-flash', width: width, height: height, ref: function ref(e) {
            _this4._flashWebcam = e;
          }, align: 'middle' },
        React.createElement('param', { name: 'wmode', value: 'transparent' }),
        React.createElement('param', { name: 'allowScriptAccess', value: 'always' }),
        React.createElement('param', { name: 'allowFullScreen', value: 'false' }),
        React.createElement('param', { name: 'movie', value: this.props.flashURL }),
        React.createElement('param', { name: 'loop', value: 'false' }),
        React.createElement('param', { name: 'menu', value: 'false' }),
        React.createElement('param', { name: 'quality', value: 'best' }),
        React.createElement('param', { name: 'bgcolor', value: '#ffffff' }),
        React.createElement('param', { name: 'flashvars', value: flashvars })
      );
    }

    /**
     * Called when the webcam stream metadata is loaded into the video element.
     * @private
     * @memberof WebcamVideoComponent
     */

  }, {
    key: '_onLoadedMetadata',
    value: function _onLoadedMetadata() {
      var _this5 = this;

      this.setState({ webcamAvailable: true }, function () {
        _this5.props.onWebcamAvailable && _this5.props.onWebcamAvailable();
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this6 = this;

      var videoComponent = this.state.useFlashFallback ? this._getFlashFallbackComponent() : React.createElement('video', {
        style: { width: '100%' },
        autoPlay: true,
        ref: function ref(e) {
          _this6._videoElement = e;
        },
        onLoadedMetadata: this._onLoadedMetadata });

      return React.createElement(
        'div',
        {
          style: {
            width: this.state.useFlashFallback ? this.state.containerWidth : '100%',
            height: this.state.useFlashFallback ? this.state.containerHeight : '100%',
            display: 'block',
            margin: 'auto',
            overflow: 'hidden'
          },
          ref: function ref(el) {
            _this6._container = el;
          } },
        videoComponent
      );
    }
  }]);

  return WebcamVideoComponent;
}(_globals.BaseComponent);

exports.default = WebcamVideoComponent;


WebcamVideoComponent.propTypes = {
  flashURL: _globals.PropTypes.string,
  onWebcamAvailable: _globals.PropTypes.func,
  onWebcamError: _globals.PropTypes.func
};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _overviewControlsComponent = __webpack_require__(42);

var _overviewControlsComponent2 = _interopRequireDefault(_overviewControlsComponent);

var _screenComponent = __webpack_require__(9);

var _screenComponent2 = _interopRequireDefault(_screenComponent);

var _canvasComponent = __webpack_require__(113);

var _canvasComponent2 = _interopRequireDefault(_canvasComponent);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

var _overview = __webpack_require__(114);

var _overview2 = _interopRequireDefault(_overview);

var _editor3 = __webpack_require__(43);

var _editor4 = _interopRequireDefault(_editor3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var WINDOW_RESIZE_DELAY = 500;

var EditorScreenComponent = function (_ScreenComponent) {
  _inherits(EditorScreenComponent, _ScreenComponent);

  function EditorScreenComponent() {
    var _ref;

    _classCallCheck(this, EditorScreenComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = EditorScreenComponent.__proto__ || Object.getPrototypeOf(EditorScreenComponent)).call.apply(_ref, [this].concat(args)));

    _this._overviewControls = _overviewControlsComponent2.default;

    _this._bindAll('switchToControls', '_startEditor', '_onWindowResize', '_onWindowResizeDone', '_onImageResize', '_onNewImage', '_onRenderError');

    _this._previousControlsStack = [];
    _this.state = {
      zoom: null,
      controls: _overview2.default,
      dragEnabled: true,
      sharedState: new _globals.SharedState()
    };

    _this._editor = new _editor4.default(_this.context.ui, _this.context.options, _this.context.mediator);
    _this._editor.on('new-image', _this._onNewImage);
    _this._editor.on('ready', _this._startEditor);
    _this._editor.on('resize', _this._onImageResize);
    _this._editor.on('render-error', _this._onRenderError);

    _this._hasUsedForceCrop = false;

    _this._forceControls = _this.context.options.editor.forceControls;
    _this._forceControlIndex = 0;
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called after this component has been mounted
   */


  _createClass(EditorScreenComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _get(EditorScreenComponent.prototype.__proto__ || Object.getPrototypeOf(EditorScreenComponent.prototype), 'componentDidMount', this).call(this);

      var options = this.context.options;
      var _context$options$edit = this.context.options.editor,
          image = _context$options$edit.image,
          forceCrop = _context$options$edit.forceCrop;


      this.setImage(image);
      this._editor.render();

      this._editor.on('ready', function () {
        if (forceCrop) {
          _this2._switchToFroceCropControl();
        } else {
          _this2._switchToNextForceControl();
        }
      });

      if (options.responsive) {
        window.addEventListener('resize', this._onWindowResize);
      }
    }

    /**
     * Gets called before this component is unmounted
     */

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _get(EditorScreenComponent.prototype.__proto__ || Object.getPrototypeOf(EditorScreenComponent.prototype), 'componentWillUnmount', this).call(this);

      this._editor.dispose();
      var options = this.context.options;

      if (options.responsive) {
        window.removeEventListener('resize', this._onWindowResize);
      }
    }

    /**
     * Sets the zoom level and starts the editor rendering
     * @private
     */

  }, {
    key: '_startEditor',
    value: function _startEditor() {
      this._editor.start();
    }

    // -------------------------------------------------------------------------- FORCE CONTROLS

  }, {
    key: '_switchToFroceCropControl',
    value: function _switchToFroceCropControl() {
      var availableControls = this._editor.controls.getAvailable();
      var controlObject = availableControls['transform'];

      if (!controlObject) {
        return;
      }

      this.switchToControls(controlObject, {}, null, { forceCrop: true, firstCrop: true });
      this._hasUsedForceCrop = true;
    }
    /**
     * Switches to the next forced control
     * @private
     */

  }, {
    key: '_switchToNextForceControl',
    value: function _switchToNextForceControl() {
      if (this._forceControlIndex < this._forceControls.length) {
        var _forceControls$_force = this._forceControls[this._forceControlIndex],
            control = _forceControls$_force.control,
            options = _forceControls$_force.options;

        var availableControls = this._editor.controls.getAvailable();
        var controlObject = availableControls[control];

        var fixedOptions = _globals.SDKUtils.defaults({
          forcedControl: true
        }, options);

        if (!controlObject) {
          throw new Error('Force controls: Could not find control with identifier `' + control + '`');
        }

        this.switchToControls(controlObject, {}, null, fixedOptions);
        this._forceControlIndex++;
      }
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when an error occurred while rendering
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onRenderError',
    value: function _onRenderError(e) {
      _modalManager2.default.instance.displayError(this._t('pesdk.editor.title.renderingError'), this._t('pesdk.editor.text.renderingError'), true);
      _globals.Log.error(this.constructor.name, 'An error occurred while rendering: ' + e.message);
    }

    /**
     * Gets called when the image has been changed
     * @private
     */

  }, {
    key: '_onNewImage',
    value: function _onNewImage() {
      this.switchToControls(_overview2.default);
    }

    /**
     * Gets called when the editor starts resizing an image
     * @private
     */

  }, {
    key: '_onImageResize',
    value: function _onImageResize() {
      var _this3 = this;

      var loadingModal = _modalManager2.default.instance.displayLoading(this._t('pesdk.editor.text.resizing'));
      this._editor.once('resized', function (_ref2) {
        var dimensions = _ref2.dimensions,
            reason = _ref2.reason;

        loadingModal.close();

        if (_this3.context.options.editor.displayResizeMessage) {
          _modalManager2.default.instance.displayWarning(_this3._t('pesdk.editor.title.imageResized_' + reason), _this3._t('pesdk.editor.text.imageResized_' + reason, {
            maxMegaPixels: _this3._editor.getMaxMegapixels(),
            width: dimensions.x,
            height: dimensions.y
          }));
        }
      });
    }

    /**
     * Gets called on window resize
     * @private
     */

  }, {
    key: '_onWindowResize',
    value: function _onWindowResize() {
      if (this._resizeTimeout) {
        window.clearTimeout(this._resizeTimeout);
        this._resizeTimeout = null;
      }
      this._resizeTimeout = window.setTimeout(this._onWindowResizeDone, WINDOW_RESIZE_DELAY);
    }

    /**
     * Gets called `WINDOW_RESIZE_DELAY` ms after the last resize event has been called
     * @private
     */

  }, {
    key: '_onWindowResizeDone',
    value: function _onWindowResizeDone() {
      this._emitEvent(_globals.Constants.EVENTS.WINDOW_RESIZE);
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Switches to the given controls
     * @param  {Component} controls
     * @param  {Object} [initialState] = {}
     * @param  {Function} [callback]
     * @param  {Object} [controlOptions]
     */

  }, {
    key: 'switchToControls',
    value: function switchToControls(controls) {
      var initialState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var controlOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      var newControls = null;
      if (controls === 'back') {
        newControls = this._previousControlsStack.pop();
      } else if (controls === 'home' || controls === _overview2.default) {
        if (this.context.options.editor.forceCrop && !this._hasUsedForceCrop) {
          return this._switchToFroceCropControl();
        }

        // When a control switches to `home`, override this action
        // with switching to the next force control (if present)
        if (this._forceControlIndex < this._forceControls.length) {
          return this._switchToNextForceControl();
        }

        newControls = _overview2.default;
        this._previousControlsStack = [];
      } else {
        newControls = controls;
        this._previousControlsStack.push(this.state.controls);
      }

      var controlsChanged = this.state.controls !== newControls;

      // If the previous controls have an `onExit` method, call it
      // with the controls as `this`
      if (this.state.controls.onExit) {
        this.state.controls.onExit.call(this.refs.controls);
      }

      this.state.sharedState.clear();
      this.state.sharedState.set(initialState, false);

      var controlsOptions = _globals.SDKUtils.defaults(_globals.SDKUtils.defaults(controlOptions, this.context.options.editor.controlsOptions[newControls.identifier]), newControls.defaultOptions);

      // If the new controls have an `onEnter` method, call it
      if (newControls.onEnter) {
        newControls.onEnter.call(this.refs.controls, this.state.sharedState, controlsOptions);
      }

      if (controlsChanged) {
        this.setState({
          controls: newControls,
          controlsOptions: controlsOptions
        }, callback);
      } else {
        return callback && callback();
      }
    }

    /**
     * Returns the zoom level
     * @return {Number}
     */

  }, {
    key: 'getZoom',
    value: function getZoom() {
      return this.state.zoom;
    }

    /**
     * Exports an image
     * @param {Boolean} download = false
     * @return {Promise}
     */

  }, {
    key: 'export',
    value: function _export() {
      var _this4 = this;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return new Promise(function (resolve, reject) {
        _this4.switchToControls('home', {}, function () {
          var _editor;

          (_editor = _this4._editor).export.apply(_editor, args).then(resolve).catch(reject);
        });
      });
    }

    /**
     * Returns the editor
     * @return {PhotoEditorSDK.UI.ReactUI.Editor}
     */

  }, {
    key: 'getEditor',
    value: function getEditor() {
      return this._editor;
    }

    /**
     * Serializes the editor state
     * @return {Promise}
     */

  }, {
    key: 'serialize',
    value: function serialize() {
      var _editor2;

      return (_editor2 = this._editor).serialize.apply(_editor2, arguments);
    }

    /**
     * Deserializes the given data
     * @param  {Object} data
     * @return {Promise}
     */

  }, {
    key: 'deserialize',
    value: function deserialize(data) {
      return this._editor.deserialize(data);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Decides whether the undo button should be displayed
     * @return {Boolean}
     * @private
     */

  }, {
    key: '_showUndoButton',
    value: function _showUndoButton() {
      return this._editor.history.isAvailable();
    }

    /**
     * Returns the context passed to all children
     * @return {Object}
     */

  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        editor: this._editor,
        ui: this.context.ui,
        options: this.context.options,
        editorScreen: this,
        mediator: this.context.mediator,
        globalState: this.context.globalState
      };
    }

    /**
     * Sets the image to the given one
     * @param {Image} image
     * @param {Boolean} resetEditor
     */

  }, {
    key: 'setImage',
    value: function setImage(image, resetEditor) {
      this._forceControlIndex = 0;
      this._editor.setImage(image, resetEditor);
    }

    /**
     * Renders this screen
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderScreen',
    value: function _renderScreen() {
      var ControlsComponent = this.state.controls.controlsComponent;
      var CanvasControlsComponent = this.state.controls.canvasControlsComponent;
      if (!CanvasControlsComponent) {
        CanvasControlsComponent = _overview2.default.canvasControlsComponent;
      }
      var TopBarControlsComponent = this.state.controls.topBarControlsComponent;
      if (!TopBarControlsComponent) {
        TopBarControlsComponent = _overview2.default.topBarControlsComponent;
      }

      var controls = void 0,
          canvasControls = void 0,
          topBarControls = void 0;

      if (TopBarControlsComponent && this.context.options.showTopBar) {
        topBarControls = _globals.ReactBEM.createElement(TopBarControlsComponent, {
          sharedState: this.state.sharedState,
          options: this.state.controlsOptions,
          app: this.props.app,
          ref: 'topBarControls' });
      }

      if (ControlsComponent) {
        controls = _globals.ReactBEM.createElement(ControlsComponent, {
          onSwitchControls: this.switchToControls,
          sharedState: this.state.sharedState,
          options: this.state.controlsOptions,
          app: this.props.app,
          key: this.state.controls.identifier + '-controls',
          ref: 'controls' });
      }

      if (CanvasControlsComponent) {
        canvasControls = _globals.ReactBEM.createElement(CanvasControlsComponent, {
          onSwitchControls: this.switchToControls,
          sharedState: this.state.sharedState,
          options: this.state.controlsOptions,
          app: this.props.app,
          key: this.state.controls.identifier + '-canvasControls',
          ref: 'canvasControls' });
      }

      var bemSpecifier = '$b:editorScreen';
      if (!this.context.options.showHeader) {
        bemSpecifier += ' m:noHeader';
      }

      return _globals.ReactBEM.createElement(
        'div',
        { bem: bemSpecifier },
        topBarControls,
        _globals.ReactBEM.createElement(
          _canvasComponent2.default,
          {
            ref: 'canvas',
            largeControls: this.state.controls.largeCanvasControls },
          canvasControls
        ),
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$b:controls $e:container e:row' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:cell' },
            controls
          )
        )
      );
    }
  }]);

  return EditorScreenComponent;
}(_screenComponent2.default);

exports.default = EditorScreenComponent;


EditorScreenComponent.childContextTypes = {
  ui: _globals.PropTypes.object.isRequired,
  editor: _globals.PropTypes.object.isRequired,
  mediator: _globals.PropTypes.object.isRequired,
  options: _globals.PropTypes.object.isRequired,
  editorScreen: _globals.PropTypes.object.isRequired,
  globalState: _globals.PropTypes.object.isRequired
};

EditorScreenComponent.contextTypes = _screenComponent2.default.contextTypes;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var BackButtonComponent = function (_BaseComponent) {
  _inherits(BackButtonComponent, _BaseComponent);

  function BackButtonComponent() {
    _classCallCheck(this, BackButtonComponent);

    return _possibleConstructorReturn(this, (BackButtonComponent.__proto__ || Object.getPrototypeOf(BackButtonComponent)).apply(this, arguments));
  }

  _createClass(BackButtonComponent, [{
    key: 'renderWithBEM',

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:controls' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:cell m:largeButton' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: '$e:largeButton', onClick: this.props.onClick },
            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/back.png', true) })
          )
        )
      );
    }
  }]);

  return BackButtonComponent;
}(_globals.BaseComponent);

exports.default = BackButtonComponent;


BackButtonComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var DoneButtonComponent = function (_BaseComponent) {
  _inherits(DoneButtonComponent, _BaseComponent);

  function DoneButtonComponent() {
    _classCallCheck(this, DoneButtonComponent);

    return _possibleConstructorReturn(this, (DoneButtonComponent.__proto__ || Object.getPrototypeOf(DoneButtonComponent)).apply(this, arguments));
  }

  _createClass(DoneButtonComponent, [{
    key: 'renderWithBEM',

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:controls' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:cell m:largeButton' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: '$e:largeButton', onClick: this.props.onClick },
            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/tick.png', true) })
          )
        )
      );
    }
  }]);

  return DoneButtonComponent;
}(_globals.BaseComponent);

exports.default = DoneButtonComponent;


DoneButtonComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var CanvasComponent = function (_BaseComponent) {
  _inherits(CanvasComponent, _BaseComponent);

  function CanvasComponent() {
    var _ref, _this$_events;

    _classCallCheck(this, CanvasComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = CanvasComponent.__proto__ || Object.getPrototypeOf(CanvasComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onDragStart', '_onDragMove', '_onDragEnd', '_onWindowResize', '_onFeaturesUpdated', '_onZoomChange');

    _this._events = (_this$_events = {}, _defineProperty(_this$_events, _globals.Constants.EVENTS.WINDOW_RESIZE, _this._onWindowResize), _defineProperty(_this$_events, _globals.Constants.EVENTS.FEATURES_UPDATED, _this._onFeaturesUpdated), _this$_events);

    _this._initialRenderDone = false;

    _this.state = {
      canvasPosition: new _globals.Vector2(),
      canvasOffset: new _globals.Vector2()
    };
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called after the window has been resized
   * @private
   */


  _createClass(CanvasComponent, [{
    key: '_onWindowResize',
    value: function _onWindowResize() {
      var editor = this.context.editor;

      var sdk = editor.getSDK();
      sdk.resizeTo(this._getContainerDimensions());
      editor.zoom.set('auto');
    }

    /**
     * Gets called when features (e.g. drag) are updated
     * @param {String[]} identifiers
     * @private
     */

  }, {
    key: '_onFeaturesUpdated',
    value: function _onFeaturesUpdated(identifiers) {
      if (identifiers.indexOf('drag') !== -1) {
        this.forceUpdate();
      }
    }

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called after this component has been mounted
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(CanvasComponent.prototype.__proto__ || Object.getPrototypeOf(CanvasComponent.prototype), 'componentDidMount', this).call(this);

      var editor = this.context.editor;

      var renderer = editor.getRenderer();

      var _refs = this.refs,
          canvasCell = _refs.canvasCell,
          canvas = _refs.canvas;

      var width = canvasCell.offsetWidth;
      var height = canvasCell.offsetHeight;
      renderer.setCanvas(canvas);
      renderer.resizeTo(new _globals.Vector2(width, height), true);

      editor.zoom.on('set', this._onZoomChange);
    }

    /**
     * Gets called when this component is about to be unmounted
     */

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var editor = this.context.editor;

      editor.zoom.off('set', this._onZoomChange);
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the zoom has changed
     * @private
     */

  }, {
    key: '_onZoomChange',
    value: function _onZoomChange() {
      this.forceUpdate();
    }

    // -------------------------------------------------------------------------- DRAGGING

    /**
     * Gets called when the user starts dragging the canvas
     * @param {React.SyntheticEvent} e
     * @private
     */

  }, {
    key: '_onDragStart',
    value: function _onDragStart(e) {
      var editor = this.context.editor;

      if (!editor.features.isEnabled('drag')) return;

      e.preventDefault();

      this._dragStartPosition = _globals.Utils.getEventPosition(e.nativeEvent);
      this._dragInitialOffset = editor.getOffset().clone();
      document.addEventListener('mousemove', this._onDragMove);
      document.addEventListener('touchmove', this._onDragMove);
      document.addEventListener('mouseup', this._onDragEnd);
      document.addEventListener('touchend', this._onDragEnd);
    }

    /**
     * Gets called while the user drags the canvas
     * @param {DOMEvent} e
     * @private
     */

  }, {
    key: '_onDragMove',
    value: function _onDragMove(e) {
      var eventPosition = _globals.Utils.getEventPosition(e);
      var diffFromStart = eventPosition.clone().subtract(this._dragStartPosition);

      var newOffset = this._dragInitialOffset.clone().add(diffFromStart);

      var editor = this.context.editor;

      var lastOffset = editor.getOffset().clone();
      editor.setOffset(newOffset);
      if (!editor.getOffset().equals(lastOffset)) {
        editor.render();
      }
    }

    /**
     * Gets called when the user stops dragging the canvas
     * @param {DOMEvent} e
     * @private
     */

  }, {
    key: '_onDragEnd',
    value: function _onDragEnd(e) {
      document.removeEventListener('mousemove', this._onDragMove);
      document.removeEventListener('touchmove', this._onDragMove);
      document.removeEventListener('mouseup', this._onDragEnd);
      document.removeEventListener('touchend', this._onDragEnd);
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Returns the container's dimensions
     * @return {Vector2}
     * @private
     */

  }, {
    key: '_getContainerDimensions',
    value: function _getContainerDimensions() {
      var canvasCell = this.refs.canvasCell;

      return new _globals.Vector2(canvasCell.offsetWidth, canvasCell.offsetHeight);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Returns the style properties for the draggable canvas area
     * @private
     */

  }, {
    key: '_getDraggableStyle',
    value: function _getDraggableStyle() {
      return {
        top: this.state.canvasPosition.y + this.state.canvasOffset.y,
        left: this.state.canvasPosition.x + this.state.canvasOffset.x
      };
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var canvasContent = null;
      var containerContent = null;
      if (this.props.largeControls) {
        containerContent = this.props.children;
      } else {
        canvasContent = this.props.children;
      }

      var editor = this.context.editor;

      var zoomAllowsDrag = editor.isReady() && editor.zoom.get() > editor.zoom.getDefault();
      var dragEnabled = editor.features.isEnabled('drag') && zoomAllowsDrag;

      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:canvas e:container e:row' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:container e:cell', ref: 'canvasCell' },
          _globals.ReactBEM.createElement(
            'div',
            {
              bem: 'e:innerContainer',
              className: dragEnabled ? 'is-draggable' : null,
              onTouchStart: this._onDragStart,
              onMouseDown: this._onDragStart,
              style: this._getDraggableStyle() },
            _globals.ReactBEM.createElement('canvas', {
              bem: 'e:canvas',
              ref: 'canvas' }),
            canvasContent
          ),
          containerContent
        )
      );
    }
  }]);

  return CanvasComponent;
}(_globals.BaseComponent);

exports.default = CanvasComponent;


CanvasComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _controls = __webpack_require__(4);

var _controls2 = _interopRequireDefault(_controls);

var _topBarComponent = __webpack_require__(115);

var _topBarComponent2 = _interopRequireDefault(_topBarComponent);

var _overviewControlsComponent = __webpack_require__(42);

var _overviewControlsComponent2 = _interopRequireDefault(_overviewControlsComponent);

var _overviewCanvasControlsComponent = __webpack_require__(120);

var _overviewCanvasControlsComponent2 = _interopRequireDefault(_overviewCanvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var OverviewControls = function (_Controls) {
  _inherits(OverviewControls, _Controls);

  function OverviewControls() {
    _classCallCheck(this, OverviewControls);

    return _possibleConstructorReturn(this, (OverviewControls.__proto__ || Object.getPrototypeOf(OverviewControls)).apply(this, arguments));
  }

  return OverviewControls;
}(_controls2.default);

/**
 * This control's top bar controls component. Used for the sub-header part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */


OverviewControls.topBarControlsComponent = _topBarComponent2.default;

/**
 * This control's controls component. Used for the lower controls part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */
OverviewControls.controlsComponent = _overviewControlsComponent2.default;

/**
 * This control's canvas component. Used for the upper controls part of the editor (on
 * top of the canvas)
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */
OverviewControls.canvasControlsComponent = _overviewCanvasControlsComponent2.default;

exports.default = OverviewControls;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _topBarComponent = __webpack_require__(12);

var _topBarComponent2 = _interopRequireDefault(_topBarComponent);

var _newFileButtonComponent = __webpack_require__(116);

var _newFileButtonComponent2 = _interopRequireDefault(_newFileButtonComponent);

var _exportButtonComponent = __webpack_require__(117);

var _exportButtonComponent2 = _interopRequireDefault(_exportButtonComponent);

var _undoButtonComponent = __webpack_require__(118);

var _undoButtonComponent2 = _interopRequireDefault(_undoButtonComponent);

var _zoomComponent = __webpack_require__(119);

var _zoomComponent2 = _interopRequireDefault(_zoomComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var OverviewTopBarComponent = function (_TopBarComponent) {
  _inherits(OverviewTopBarComponent, _TopBarComponent);

  function OverviewTopBarComponent() {
    _classCallCheck(this, OverviewTopBarComponent);

    return _possibleConstructorReturn(this, (OverviewTopBarComponent.__proto__ || Object.getPrototypeOf(OverviewTopBarComponent)).apply(this, arguments));
  }

  _createClass(OverviewTopBarComponent, [{
    key: 'renderContent',

    /**
     * Renders the content of this OverviewTopBarComponent
     * @return {ReactBEM.Element}
     */
    value: function renderContent() {
      var newFileButton = null;
      if (this.context.options.enableUpload) {
        newFileButton = _globals.ReactBEM.createElement(_newFileButtonComponent2.default, { app: this.props.app });
      }

      var zoomComponent = null;
      if (this.context.options.editor.enableZoom) {
        zoomComponent = _globals.ReactBEM.createElement(_zoomComponent2.default, null);
      }

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:topBar' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:left' },
          newFileButton
        ),
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:right' },
          _globals.ReactBEM.createElement(_undoButtonComponent2.default, null),
          _globals.ReactBEM.createElement(_exportButtonComponent2.default, null)
        ),
        zoomComponent
      );
    }
  }]);

  return OverviewTopBarComponent;
}(_topBarComponent2.default);

exports.default = OverviewTopBarComponent;


OverviewTopBarComponent.contextTypes = _topBarComponent2.default.contextTypes;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _buttonComponent = __webpack_require__(26);

var _buttonComponent2 = _interopRequireDefault(_buttonComponent);

var _invisibleUploadComponent = __webpack_require__(25);

var _invisibleUploadComponent2 = _interopRequireDefault(_invisibleUploadComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var NewFileButtonComponent = function (_BaseComponent) {
  _inherits(NewFileButtonComponent, _BaseComponent);

  function NewFileButtonComponent() {
    var _ref;

    _classCallCheck(this, NewFileButtonComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = NewFileButtonComponent.__proto__ || Object.getPrototypeOf(NewFileButtonComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onNewFile', '_onButtonClick');
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the user has selected a new file
   * @param {Image} image
   */


  _createClass(NewFileButtonComponent, [{
    key: '_onNewFile',
    value: function _onNewFile(image) {
      var editor = this.context.editor;

      editor.reset();
      editor.setImage(image);
      editor.zoom.set('auto');
    }

    /**
     * Gets called when the button has been clicked
     * @private
     */

  }, {
    key: '_onButtonClick',
    value: function _onButtonClick() {
      var options = this.context.options;

      var webcamEnabled = options.enableWebcam === false || _globals.Utils.isMobile();
      var photoRollEnabled = !!options.photoRoll.provider;
      if (webcamEnabled && !photoRollEnabled) {
        this.refs.upload.open();
      } else if (photoRollEnabled) {
        this.props.app.switchToScreen('photoRoll');
      } else {
        this.props.app.switchToScreen('splash');
      }
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var options = this.context.options;


      var buttonLabel = null;
      if (options.photoRoll.provider) {
        buttonLabel = this._t('pesdk.editor.button.backgroundImage');
      } else {
        buttonLabel = this._t('pesdk.editor.button.new');
      }

      return _globals.ReactBEM.createElement(
        'div',
        null,
        _globals.ReactBEM.createElement(_invisibleUploadComponent2.default, { onNewFile: this._onNewFile, ref: 'upload' }),
        _globals.ReactBEM.createElement(_buttonComponent2.default, {
          label: buttonLabel,
          icon: 'editor/new.png',
          onClick: this._onButtonClick })
      );
    }
  }]);

  return NewFileButtonComponent;
}(_globals.BaseComponent);

exports.default = NewFileButtonComponent;


NewFileButtonComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

var _buttonComponent = __webpack_require__(26);

var _buttonComponent2 = _interopRequireDefault(_buttonComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ExportButtonComponent = function (_BaseComponent) {
  _inherits(ExportButtonComponent, _BaseComponent);

  function ExportButtonComponent() {
    var _ref;

    _classCallCheck(this, ExportButtonComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ExportButtonComponent.__proto__ || Object.getPrototypeOf(ExportButtonComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onButtonClick');
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the button has been clicked
   * @private
   */


  _createClass(ExportButtonComponent, [{
    key: '_onButtonClick',
    value: function _onButtonClick() {
      var _this2 = this;

      var _context = this.context,
          options = _context.options,
          editor = _context.editor,
          editorScreen = _context.editorScreen;

      var exportOptions = options.editor.export;

      editorScreen.switchToControls('home', null, function () {
        var loadingModal = _modalManager2.default.instance.displayLoading(_this2._t('pesdk.editor.text.exporting'));

        // Give it some time to display the loading modal
        setTimeout(function () {
          editor.export(exportOptions.download).then(function () {
            loadingModal.close();
          }).catch(function (e) {
            _modalManager2.default.instance.displayError(_this2._t('pesdk.common.title.error'), e.message);
            loadingModal.close();
          });
        }, 100);
      });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var options = this.context.options;

      if (!options.editor.export.showButton) return null;

      return _globals.ReactBEM.createElement(_buttonComponent2.default, {
        style: 'blue',
        label: this._t('pesdk.editor.button.export'),
        icon: 'editor/export.png',
        onClick: this._onButtonClick });
    }
  }]);

  return ExportButtonComponent;
}(_globals.BaseComponent);

exports.default = ExportButtonComponent;


ExportButtonComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _buttonComponent = __webpack_require__(26);

var _buttonComponent2 = _interopRequireDefault(_buttonComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var UndoButtonComponent = function (_BaseComponent) {
  _inherits(UndoButtonComponent, _BaseComponent);

  function UndoButtonComponent() {
    var _ref, _this$_events;

    _classCallCheck(this, UndoButtonComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = UndoButtonComponent.__proto__ || Object.getPrototypeOf(UndoButtonComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onButtonClick', '_onHistoryUpdated', '_onFeaturesUpdated');

    _this._events = (_this$_events = {}, _defineProperty(_this$_events, _globals.Constants.EVENTS.HISTORY_UPDATED, _this._onHistoryUpdated), _defineProperty(_this$_events, _globals.Constants.EVENTS.FEATURES_UPDATED, _this._onFeaturesUpdated), _this$_events);
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the features have been enabled or disabled
   * @private
   */


  _createClass(UndoButtonComponent, [{
    key: '_onFeaturesUpdated',
    value: function _onFeaturesUpdated() {
      this.forceUpdate();
    }

    /**
     * Gets called when the history has been updated
     * @private
     */

  }, {
    key: '_onHistoryUpdated',
    value: function _onHistoryUpdated() {
      this.forceUpdate();
    }

    /**
     * Gets called when the button has been clicked
     * @private
     */

  }, {
    key: '_onButtonClick',
    value: function _onButtonClick() {
      var editor = this.context.editor;

      editor.history.undo();
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var editor = this.context.editor;

      if (!editor.history.isAvailable()) return null;

      return _globals.ReactBEM.createElement(_buttonComponent2.default, {
        label: this._t('pesdk.editor.button.undo'),
        icon: 'editor/undo.png',
        onClick: this._onButtonClick });
    }
  }]);

  return UndoButtonComponent;
}(_globals.BaseComponent);

exports.default = UndoButtonComponent;


UndoButtonComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ZoomComponent = function (_BaseComponent) {
  _inherits(ZoomComponent, _BaseComponent);

  function ZoomComponent() {
    var _ref, _this$_events;

    _classCallCheck(this, ZoomComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ZoomComponent.__proto__ || Object.getPrototypeOf(ZoomComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onZoomOutClick', '_onZoomInClick', '_onZoomDone', '_onFeaturesUpdated');

    _this._events = (_this$_events = {}, _defineProperty(_this$_events, _globals.Constants.EVENTS.ZOOM_DONE, _this._onZoomDone), _defineProperty(_this$_events, _globals.Constants.EVENTS.FEATURES_UPDATED, _this._onFeaturesUpdated), _this$_events);
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the features have been updated
   * @private
   */


  _createClass(ZoomComponent, [{
    key: '_onFeaturesUpdated',
    value: function _onFeaturesUpdated() {
      this.forceUpdate();
    }

    /**
     * Gets called when the new zoom level has been applied
     * @private
     */

  }, {
    key: '_onZoomDone',
    value: function _onZoomDone() {
      this.forceUpdate();
    }

    /**
     * Gets called when the user clicks the "zoom out" button
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onZoomOutClick',
    value: function _onZoomOutClick(e) {
      var editor = this.context.editor;

      if (!editor.features.isEnabled('zoom')) return;

      editor.zoom.out();
    }

    /**
     * Gets called when the user clicks the "zoom in" button
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onZoomInClick',
    value: function _onZoomInClick(e) {
      var editor = this.context.editor;

      if (!editor.features.isEnabled('zoom')) return;

      editor.zoom.in();
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var editor = this.context.editor;

      var zoom = editor.zoom.get();
      var enabled = editor.features.isEnabled('zoom');

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'b:editorScreen' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:zoom' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: '$e:button m:zoomOut',
              onClick: this._onZoomOutClick,
              className: enabled ? null : 'is-disabled' },
            _globals.ReactBEM.createElement('img', { bem: 'e:image', src: this._getAssetPath('controls/minus.png', true) })
          ),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:label' },
            this._t('pesdk.editor.title.zoom'),
            _globals.ReactBEM.createElement('br', null),
            Math.round(zoom * 100),
            '%'
          ),
          _globals.ReactBEM.createElement(
            'div',
            {
              bem: '$e:button m:zoomIn',
              onClick: this._onZoomInClick,
              className: enabled ? null : 'is-disabled' },
            _globals.ReactBEM.createElement('img', { bem: 'e:image', src: this._getAssetPath('controls/plus.png', true) })
          )
        )
      );
    }
  }]);

  return ZoomComponent;
}(_globals.BaseComponent);

exports.default = ZoomComponent;


ZoomComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _canvasControlsComponent = __webpack_require__(10);

var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var OverviewCanvasControlsComponent = function (_CanvasControlsCompon) {
  _inherits(OverviewCanvasControlsComponent, _CanvasControlsCompon);

  function OverviewCanvasControlsComponent() {
    var _ref;

    _classCallCheck(this, OverviewCanvasControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = OverviewCanvasControlsComponent.__proto__ || Object.getPrototypeOf(OverviewCanvasControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onClick');
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the user clicks somewhere on the canvas
   * @param  {Event} e
   * @private
   */


  _createClass(OverviewCanvasControlsComponent, [{
    key: '_onClick',
    value: function _onClick(e) {
      this._performHitTest(_globals.Utils.getEventPosition(e));
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the container style
     * @return {Object}
     * @private
     */

  }, {
    key: '_getContainerStyle',
    value: function _getContainerStyle() {
      if (!this.context.editor.isReady()) {
        return { left: 0, top: 0, width: 1, height: 1 };
      }

      var _context$editor$getSD = this.context.editor.getSDK().getSprite().getBounds(),
          x = _context$editor$getSD.x,
          y = _context$editor$getSD.y,
          width = _context$editor$getSD.width,
          height = _context$editor$getSD.height;

      return {
        left: x,
        top: y,
        width: width,
        height: height
      };
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        {
          bem: '$b:canvasControls e:container m:full',
          ref: 'container' },
        _globals.ReactBEM.createElement('div', {
          bem: '$b:canvasControls e:innerContainer',
          ref: 'innerContainer',
          style: this._getContainerStyle(),
          onClick: this._onClick,
          onTouchStart: this._onClick })
      );
    }
  }]);

  return OverviewCanvasControlsComponent;
}(_canvasControlsComponent2.default);

exports.default = OverviewCanvasControlsComponent;


OverviewCanvasControlsComponent.contextTypes = _canvasControlsComponent2.default.contextTypes;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

var _fileDownloader = __webpack_require__(122);

var _fileDownloader2 = _interopRequireDefault(_fileDownloader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Exporter = function () {
  function Exporter(sdk, options, download) {
    _classCallCheck(this, Exporter);

    this._sdk = sdk;
    this._options = options;
    this._download = download;
  }

  /**
   * Exports the image / data url
   * @return {Promise}
   */


  _createClass(Exporter, [{
    key: 'export',
    value: function _export() {
      var _this = this;

      var renderType = this._getRenderType();

      return this._sdk.export(renderType, this._options.format, this._options.quality).then(function (data) {
        if (_this._download) {
          _this._downloadData(renderType, data);
        }
        return data;
      });
    }

    /**
     * Downloads the data using the given render type
     * @param  {RenderType} renderType
     * @param  {String} data
     * @private
     */

  }, {
    key: '_downloadData',
    value: function _downloadData(renderType, data) {
      switch (renderType) {
        case _globals.RenderType.DATAURL:
          _fileDownloader2.default.downloadDataURL(data, this._options.fileBasename);
          break;
        case _globals.RenderType.MSBLOB:
          _fileDownloader2.default.downloadMSBlob(data, this._options.fileBasename);
          break;
      }
    }

    /**
     * Returns the render type for this export
     * @return {RenderType}
     * @private
     */

  }, {
    key: '_getRenderType',
    value: function _getRenderType() {
      var options = this._options;
      if (options.type !== _globals.RenderType.IMAGE || !this._download) {
        return options.type;
      } else {
        if (_globals.Utils.supportsMSBlob()) {
          return _globals.RenderType.MSBLOB;
        } else {
          return _globals.RenderType.DATAURL;
        }
      }
    }
  }]);

  return Exporter;
}();

exports.default = Exporter;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FileDownloader = function () {
  function FileDownloader() {
    _classCallCheck(this, FileDownloader);
  }

  _createClass(FileDownloader, null, [{
    key: 'downloadDataURL',

    /**
     * Exports the given data url
     * @param  {String} data
     * @param  {String} baseName = 'photoeditorsdk-export'
     */
    value: function downloadDataURL(data) {
      var baseName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'photoeditorsdk-export';

      var url = this.createBlobURLFromDataURL(data);
      var extension = this.getExtensionFromDataURL(data);

      var link = document.createElement('a');
      link.download = baseName + '.' + extension;
      link.href = url;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }

    /**
     * Exports the given data url using msBlob
     * @param  {String} data
     * @param  {String} baseName = 'photoeditorsdk-export'
     */

  }, {
    key: 'downloadMSBlob',
    value: function downloadMSBlob(data) {
      var baseName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'photoeditorsdk-export';

      navigator.msSaveBlob(data, baseName + '.png');
    }

    /**
     * Returns the file extension by reading the given data url
     * @param  {String} data
     * @return {String}
     */

  }, {
    key: 'getExtensionFromDataURL',
    value: function getExtensionFromDataURL(data) {
      var mimeString = data.split(',')[0].split(':')[1].split(';')[0];
      return mimeString.split('/').pop();
    }

    /**
     * Creates a Blob URI from the given Data URI
     * @param {String} data
     */

  }, {
    key: 'createBlobURLFromDataURL',
    value: function createBlobURLFromDataURL(data) {
      if (!window.Blob || !window.URL || !ArrayBuffer || !Uint8Array) {
        return data;
      }

      var rawData = _globals.Base64.decode(data.split(',')[1]);
      var mimeString = data.split(',')[0].split(':')[1].split(';')[0];

      // write the bytes of the string to an ArrayBuffer
      var arrayBuffer = new ArrayBuffer(rawData.length);
      var intArray = new Uint8Array(arrayBuffer);
      for (var i = 0; i < rawData.length; i++) {
        intArray[i] = rawData[i];
      }

      // write the ArrayBuffer to a blob, and you're done
      var blob = new window.Blob([arrayBuffer], {
        type: mimeString
      });
      return window.URL.createObjectURL(blob);
    }
  }]);

  return FileDownloader;
}();

exports.default = FileDownloader;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageResizer = function () {
  function ImageResizer(image, maxPixels, maxDimensions) {
    _classCallCheck(this, ImageResizer);

    this._image = image;
    this._maxPixels = maxPixels;
    this._maxDimensions = maxDimensions;
  }

  /**
   * Checks if the image needs to be resized
   * @return {Boolean}
   */


  _createClass(ImageResizer, [{
    key: 'needsResize',
    value: function needsResize() {
      var dimensions = new _globals.Vector2(this._image.width, this._image.height);
      var pixels = dimensions.x * dimensions.y;
      var exceedsMaxPixels = pixels > this._maxPixels;
      var exceedsMaxDimensions = this._maxDimensions !== null && (dimensions.x > this._maxDimensions || dimensions.y > this._maxDimensions);

      return exceedsMaxPixels || exceedsMaxDimensions;
    }

    /**
     * Resizes the image to match the maximum amount of pixels
     * @return {Promise}
     */

  }, {
    key: 'resize',
    value: function resize() {
      var _this = this;

      var reason = null;
      var canvas = null;
      var maxDimensions = this._maxDimensions;

      return new _globals.Promise(function (resolve, reject) {
        window.setTimeout(function () {
          var initialDimensions = new _globals.Vector2(_this._image.width, _this._image.height);
          var dimensions = initialDimensions.clone();

          // If max pixels is exceeded, resize to fit the max pixels
          if (dimensions.x * dimensions.y > _this._maxPixels) {
            dimensions.copy(_this._getDimensionsByMaxPixels());
            reason = 'maxMegaPixels';
          }

          // If max dimensions (maximum texture size) is exceeded,
          // make sure the shorter side equals the maximum texture
          // size
          if (maxDimensions !== null && (dimensions.x > maxDimensions || dimensions.y > maxDimensions)) {
            var scale = Math.min(maxDimensions / dimensions.x, maxDimensions / dimensions.y);
            dimensions.multiply(scale);
            reason = 'maxDimensions';
          }

          dimensions.floor();
          canvas = _this._createResizedImageCanvas(dimensions);

          resolve({ canvas: canvas, dimensions: dimensions, reason: reason });
        }, 1000);
      });
    }

    /**
     * Creates a resized canvas with the given dimensions
     * @param  {PhotoEditorSDK.Math.Vector2} dimensions
     * @param  {PhotoEditorSDK.Math.Vector2} [imageDimensions] = dimensions
     * @return {Canvas}
     * @private
     */

  }, {
    key: '_createResizedImageCanvas',
    value: function _createResizedImageCanvas(dimensions) {
      var imageDimensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : dimensions;

      var image = this._image;

      var canvas = document.createElement('canvas');
      canvas.width = dimensions.x;
      canvas.height = dimensions.y;

      var offset = dimensions.clone().subtract(imageDimensions).divide(2);

      var context = canvas.getContext('2d');
      context.drawImage(image, 0, 0, image.width, image.height, offset.x, offset.y, imageDimensions.x, imageDimensions.y);
      return canvas;
    }

    /**
     * Returns the dimensions that match the max pixel count
     * @return {Vector2}
     * @private
     */

  }, {
    key: '_getDimensionsByMaxPixels',
    value: function _getDimensionsByMaxPixels() {
      var image = this._image;
      var maxPixels = this._maxPixels;

      var ratioHV = image.width / image.height;
      var ratioVH = image.height / image.width;

      return new _globals.Vector2(Math.sqrt(maxPixels * ratioHV), Math.sqrt(maxPixels * ratioVH)).floor();
    }
  }]);

  return ImageResizer;
}();

exports.default = ImageResizer;

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _photoeditorsdk = __webpack_require__(7);

var _photoeditorsdk2 = _interopRequireDefault(_photoeditorsdk);

var _globals = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EditorOperations = function () {
  function EditorOperations(editor, sdk, mediator) {
    _classCallCheck(this, EditorOperations);

    this._editor = editor;
    this._sdk = sdk;
    this._mediator = mediator;

    this._map = {};

    // `editor` might be shallow (e.g. for preloading), so _sdk might not exist.
    this._stack = this._sdk && this._sdk.getOperationsStack();
    this._preferredOrder = this._editor.getOptions().editor.operationsOrder;

    this._available = {};

    var Operations = _photoeditorsdk2.default.Operations;

    for (var operationName in Operations) {
      var Operation = Operations[operationName];
      this._available[Operation.identifier] = Operation;
    }

    var options = editor.getOptions();
    var operations = options.extensions.operations;

    for (var key in operations) {
      var operation = operations[key];
      this._available[operation.identifier] = operation;
    }

    if (this._stack) {
      this._fixStack();
    }
  }

  /**
   * Checks whether an operation with the given identifier exists
   * @param {String} identifier
   * @return {Boolean}
   */


  _createClass(EditorOperations, [{
    key: 'exists',
    value: function exists(identifier) {
      return !!this._map[identifier];
    }

    /**
     * Adds the given operation to the stack
     * @param {PhotoEditorSDK.Operation} operation
     */

  }, {
    key: 'add',
    value: function add(operation) {
      var _this = this;

      var identifier = operation.constructor.identifier;
      operation.on('update', function () {
        _this._mediator.emit(_globals.Constants.EVENTS.OPERATION_UPDATED, operation);
      });
      var index = this._preferredOrder.indexOf(identifier);
      if (index === -1) {
        throw new Error('EditorOperations#add: `' + identifier + '` does not appear in `operationsOrder`');
      }
      this._stack.set(index, operation);
      this._map[identifier] = operation;

      this._mediator.emit(_globals.Constants.EVENTS.OPERATION_CREATED, operation);
    }

    /**
     * Removes the given operation from the stack
     * @param  {PhotoEditorSDK.Operation} operation
     */

  }, {
    key: 'remove',
    value: function remove(operation) {
      var identifier = operation.constructor.identifier;
      var stack = this._stack.getStack();

      // Remove operation from map
      delete this._map[identifier];

      // Remove operation from stack
      var index = stack.map(function (op) {
        return op.constructor.identifier;
      }).indexOf(operation.constructor.identifier);

      if (index !== -1) {
        this._stack.removeAt(index);

        // Set all following operations to dirty, since they might
        // have cached stuff drawn by the removed operation
        for (var i = index + 1; i < stack.length; i++) {
          var _operation = stack[i];
          if (!_operation) continue;
          _operation.setDirty(true);
        }

        this._mediator.emit(_globals.Constants.EVENTS.OPERATION_REMOVED, operation);
      }
    }

    /**
     * Returns the operation with the given identifier
     * @param  {String} identifier
     * @return {PhotoEditorSDK.Operation}
     */

  }, {
    key: 'get',
    value: function get(identifier) {
      return this._map[identifier];
    }

    /**
     * If the operation with the given identifier already exists, it returns
     * the existing operation. Otherwise, it creates and returns a new one.
     * @param  {String} identifier
     * @param  {Object} options
     * @return {PhotoEditorSDK.Operation}
     */

  }, {
    key: 'getOrCreate',
    value: function getOrCreate(identifier) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (this._map[identifier]) {
        var operation = this._map[identifier];
        operation.set(options, false);
        return operation;
      } else {
        var Operation = this._available[identifier];
        var _operation2 = new Operation(this._sdk, options);
        this.add(_operation2);
        return _operation2;
      }
    }

    /**
     * Returns the operations stack
     * @return {PhotoEditorSDK.OperationsStack}
     */

  }, {
    key: 'getStack',
    value: function getStack() {
      return this._stack;
    }

    /**
     * Checks if the given operation is available
     * @param {String}
     * @return {Boolean}
     */

  }, {
    key: 'isAvailable',
    value: function isAvailable(identifier) {
      return !!this._available[identifier];
    }

    /**
     * Returns the available operations
     * @return {Object}
     */

  }, {
    key: 'getAvailable',
    value: function getAvailable() {
      return this._available;
    }

    /**
     * Resets the operations
     */

  }, {
    key: 'reset',
    value: function reset() {
      this._map = {};
    }

    /**
     * Since the SDK might create some operations upfront (e.g. to fix the EXIF orientation),
     * we might have operations at array positions where they should not be. This method
     * moves them to their appropriate position
     * @private
     */

  }, {
    key: '_fixStack',
    value: function _fixStack() {
      var _this2 = this;

      var stack = this._stack.getStack().slice();
      this._stack.clear();

      stack.forEach(function (s) {
        _this2.add(s);
      });
    }
  }]);

  return EditorOperations;
}();

exports.default = EditorOperations;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _controls = __webpack_require__(44);

var Controls = _interopRequireWildcard(_controls);

var _globals = __webpack_require__(0);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EditorControls = function () {
  function EditorControls(editor, sdk, mediator) {
    _classCallCheck(this, EditorControls);

    this._editor = editor;
    this._sdk = sdk;
    this._mediator = mediator;

    this._invalidOperationsSeen = [];
    this._options = this._editor.getOptions();
    this._available = _globals.SDKUtils.extend({}, Controls, this._options.extensions.controls);
  }

  /**
   * Checks if the control with the given identifier is selectable
   * @param  {String}  identifier
   * @return {Boolean}
   */


  _createClass(EditorControls, [{
    key: 'isEnabled',
    value: function isEnabled(identifier) {
      var _this = this;

      var control = this.get(identifier);

      if (!control) {
        _globals.Log.info('EditorControls#isEnabled: Unknown control: ' + identifier);
        return false;
      }

      var requiredOperations = control.requiredOperations || [];
      var missingOperations = [];
      requiredOperations.forEach(function (operationIdentifier) {
        if (!_this._editor.operations.isAvailable(operationIdentifier)) {
          missingOperations.push(operationIdentifier);
        }
      });

      if (missingOperations.length) {
        // Making sure we only show one error per control
        if (this._invalidOperationsSeen.indexOf(identifier) === -1) {
          this._invalidOperationsSeen.push(identifier);
          _globals.Log.error('Control `' + identifier + '` can not be used because ' + (missingOperations.length === 1 ? 'operation is' : 'operations are') + ' missing: ' + missingOperations.map(function (o) {
            return '`' + o + '`';
          }).join(', '));
        }
        return false;
      }

      return control.isAvailable && control.isAvailable(this._editor);
    }

    /**
     * Returns the control with the given identifier
     * @param  {String} identifier
     * @return {Control}
     */

  }, {
    key: 'get',
    value: function get(identifier) {
      return this._available[identifier];
    }

    /**
     * Returns the available controls
     * @return {Object}
     */

  }, {
    key: 'getAvailable',
    value: function getAvailable() {
      return this._available;
    }
  }]);

  return EditorControls;
}();

exports.default = EditorControls;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _controls = __webpack_require__(4);

var _controls2 = _interopRequireDefault(_controls);

var _adjustmentsControlsComponent = __webpack_require__(127);

var _adjustmentsControlsComponent2 = _interopRequireDefault(_adjustmentsControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var TOOLS = ['brightness', 'clarity', 'contrast', 'exposure', 'highlights', 'saturation', 'shadows', 'gamma', 'whites', 'blacks', 'temperature'];

/**
 * The adjustments controls
 * @class
 * @extends PhotoEditorSDK.UI.ReactUI.Control
 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
 */

var AdjustmentsControls = function (_Controls) {
  _inherits(AdjustmentsControls, _Controls);

  function AdjustmentsControls() {
    _classCallCheck(this, AdjustmentsControls);

    return _possibleConstructorReturn(this, (AdjustmentsControls.__proto__ || Object.getPrototypeOf(AdjustmentsControls)).apply(this, arguments));
  }

  _createClass(AdjustmentsControls, null, [{
    key: 'onEnter',

    /**
     * Gets called when the user enters these controls
     * @this {AdjustmentsControlsComponent}
     * @param {SharedState} sharedState
     * @override
     * @ignore
     */
    value: function onEnter(sharedState) {
      var editor = this.context.editor;

      var operationExistedBefore = editor.operations.exists('adjustments');
      var operation = editor.operations.getOrCreate('adjustments');
      var initialOptions = operation.serializeOptions();

      this.setSharedState({ operation: operation, operationExistedBefore: operationExistedBefore, initialOptions: initialOptions });
    }

    /**
     * Checks if this control is available to the user
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {Boolean}
     * @override
     * @ignore
     */

  }, {
    key: 'isAvailable',
    value: function isAvailable(editor) {
      return editor.isToolAllowed('adjustment') && TOOLS.filter(function (tool) {
        return editor.isToolEnabled(tool);
      }).length > 0;
    }

    /**
     * Returns the assets that should be preloaded for this control
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {String[]}
     */

  }, {
    key: 'getPreloadAssets',
    value: function getPreloadAssets(editor) {
      return TOOLS.filter(function (tool) {
        return editor.isToolEnabled(tool);
      }).map(function (tool) {
        return 'controls/adjustments/' + tool + '.png';
      });
    }
  }]);

  return AdjustmentsControls;
}(_controls2.default);

/**
 * This control's controls component. Used for the lower controls part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */


AdjustmentsControls.controlsComponent = _adjustmentsControlsComponent2.default;

/**
 * This control's identifier
 * @type {String}
 * @default
 */
AdjustmentsControls.identifier = 'adjustments';

/**
 * This control's icon path
 * @type {String}
 * @ignore
 */
AdjustmentsControls.iconPath = 'controls/overview/adjustments.png';

/**
 * The language key that should be used when displaying this filter
 * @type {String}
 * @ignore
 */
AdjustmentsControls.languageKey = 'pesdk.adjustments.title.name';

/**
 * The default options for this control
 * @type {Object}
 */
AdjustmentsControls.defaultOptions = {};

/**
 * The operations required for this control to work properly
 * @type {Array}
 */
AdjustmentsControls.requiredOperations = ['adjustments'];

exports.default = AdjustmentsControls;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _controlsComponent = __webpack_require__(3);

var _controlsComponent2 = _interopRequireDefault(_controlsComponent);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

var _sliderOverlayComponent = __webpack_require__(6);

var _sliderOverlayComponent2 = _interopRequireDefault(_sliderOverlayComponent);

var _miniSliderComponent = __webpack_require__(128);

var _miniSliderComponent2 = _interopRequireDefault(_miniSliderComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var AdjustmentsOperation = _globals.SDK.Operations.AdjustmentsOperation;


var ITEMS = ['brightness', 'saturation', 'contrast', 'gamma', 'clarity', 'exposure', 'shadows', 'highlights', 'whites', 'blacks', 'temperature'];

var AdjustmentsControlsComponent = function (_ControlsComponent) {
  _inherits(AdjustmentsControlsComponent, _ControlsComponent);

  function AdjustmentsControlsComponent() {
    var _ref;

    _classCallCheck(this, AdjustmentsControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = AdjustmentsControlsComponent.__proto__ || Object.getPrototypeOf(AdjustmentsControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onSliderValueChange');

    var editor = _this.context.editor;

    _this._operation = editor.operations.getOrCreate('adjustments');

    _this.state = { selectedControls: null };
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the user clicks the back button
   * @param {Event} e
   * @private
   */


  _createClass(AdjustmentsControlsComponent, [{
    key: '_onBackClick',
    value: function _onBackClick(e) {
      var editor = this.context.editor;

      var operationExistedBefore = this.getSharedState('operationExistedBefore');
      var initialOptions = this.getSharedState('initialOptions');

      if (!this._operation.optionsEqual(initialOptions)) {
        editor.history.add(this._operation, initialOptions, operationExistedBefore);
      }

      var defaultOptions = this._operation.getDefaultOptions();
      if (this._operation.optionsEqual(defaultOptions)) {
        editor.operations.remove(this._operation);
      }

      _get(AdjustmentsControlsComponent.prototype.__proto__ || Object.getPrototypeOf(AdjustmentsControlsComponent.prototype), '_onBackClick', this).call(this, e);
    }

    /**
     * Gets called when the user changes the slider value
     * @param  {Number} value
     * @private
     */

  }, {
    key: '_onSliderValueChange',
    value: function _onSliderValueChange(value) {
      var selectedControls = this.state.selectedControls;

      var option = AdjustmentsOperation.prototype.availableOptions[selectedControls];
      var minValue = option.minValue,
          midValue = option.midValue,
          maxValue = option.maxValue;


      value = value < 0 ? midValue + (midValue - minValue) * value / 100 : midValue + (maxValue - midValue) * value / 100;

      this._operation.setOption(selectedControls, value);

      var editor = this.context.editor;

      editor.render();
    }

    /**
     * Gets called when the user clicks one of the three buttons
     * @param {Object} controlsItem
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onButtonClick',
    value: function _onButtonClick(controlsItem, e) {
      this.setState({ selectedControls: controlsItem });
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Builds the props hash passed to the sliders
     * @param {String} identifier
     * @return {Object}
     */

  }, {
    key: '_buildSliderProps',
    value: function _buildSliderProps(identifier) {
      var option = AdjustmentsOperation.prototype.availableOptions[identifier];
      var minValue = option.minValue,
          midValue = option.midValue,
          maxValue = option.maxValue;


      var value = this._operation ? this._operation.getOption(identifier) : midValue;

      var sliderValue = (value <= midValue ? (value - minValue) / (midValue - minValue) - 1 : (value - midValue) / (maxValue - midValue)) * 100;

      return {
        minValue: -100,
        maxValue: 100,
        value: sliderValue,
        valueUnit: '%',
        positiveValuePrefix: '+',
        label: this._t('pesdk.adjustments.text.' + identifier),
        middleDot: true,
        onChange: this._onSliderValueChange
      };
    }

    // -------------------------------------------------------------------------- RENDERING

  }, {
    key: 'renderOverlayControls',
    value: function renderOverlayControls() {
      var selectedControls = this.state.selectedControls;

      if (!selectedControls) return;

      var sliderProps = this._buildSliderProps(selectedControls);
      return _globals.ReactBEM.createElement(_sliderOverlayComponent2.default, sliderProps);
    }

    /**
     * Renders the list items
     * @return {ReactBEM.Element[]}
     * @private
     */

  }, {
    key: '_renderListItems',
    value: function _renderListItems() {
      var _this2 = this;

      return ITEMS.filter(function (item) {
        return _this2.context.editor.isToolEnabled(item);
      }).map(function (item) {
        var isSelected = _this2.state.selectedControls === item;
        var className = isSelected ? 'is-active' : null;

        var miniSlider = void 0;
        /* eslint-disable no-constant-condition */
        if (!isSelected && false) {
          // Mini sliders temporarily disabled
          var sliderProps = _this2._buildSliderProps(item);
          miniSlider = _globals.ReactBEM.createElement(
            'bem',
            { specifier: 'b:adjustmentsControls' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:miniSlider' },
              _globals.ReactBEM.createElement(_miniSliderComponent2.default, sliderProps)
            )
          );
        }
        /* eslint-enable no-constant-condition */

        return _globals.ReactBEM.createElement(
          'li',
          {
            bem: 'e:item',
            key: item,
            'data-identifier': item },
          _globals.ReactBEM.createElement(
            'bem',
            { specifier: '$b:controls' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: '$e:button m:withLabel', onClick: _this2._onButtonClick.bind(_this2, item), className: className },
              _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: _this2._getAssetPath('controls/adjustments/' + item + '.png', true) }),
              _globals.ReactBEM.createElement(
                'div',
                { bem: 'e:label' },
                _this2._t('pesdk.adjustments.text.' + item)
              ),
              miniSlider
            )
          )
        );
      });
    }

    /**
     * Renders the controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderControls',
    value: function renderControls() {
      var listItems = this._renderListItems();

      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:list' },
        _globals.ReactBEM.createElement(
          _scrollbarComponent2.default,
          null,
          _globals.ReactBEM.createElement(
            'ul',
            { bem: '$e:list' },
            listItems
          )
        )
      );
    }
  }]);

  return AdjustmentsControlsComponent;
}(_controlsComponent2.default);

exports.default = AdjustmentsControlsComponent;


AdjustmentsControlsComponent.contextTypes = _controlsComponent2.default.contextTypes;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */


var MiniSliderComponent = function (_BaseComponent) {
  _inherits(MiniSliderComponent, _BaseComponent);

  function MiniSliderComponent() {
    var _ref;

    _classCallCheck(this, MiniSliderComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = MiniSliderComponent.__proto__ || Object.getPrototypeOf(MiniSliderComponent)).call.apply(_ref, [this].concat(args)));

    _this.state = {
      value: _this.props.value || 0,
      sliderPosition: 0,
      foregroundLeft: 0,
      foregroundWidth: 0
    };
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called after the component has been mounted
   */


  _createClass(MiniSliderComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Trigger a re-render to position the knob
      this._setValue(this.state.value, false);
    }

    /**
     * Gets called when this component receives new props
     * @param  {Object} props
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (props.value !== this.state.value) {
        this._setValue(props.value, false);
      }
    }

    /**
     * Returns the style for the knob (position)
     * @return {Object}
     * @private
     */

  }, {
    key: '_getKnobStyle',
    value: function _getKnobStyle() {
      return { left: this.state.sliderPosition };
    }

    /**
     * Returns the style for the foreground bar
     * @return {Object}
     * @private
     */

  }, {
    key: '_getForegroundStyle',
    value: function _getForegroundStyle() {
      return {
        left: this.state.foregroundLeft,
        width: this.state.foregroundWidth
      };
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Decides whether or not this slider should have a middle dot on the bar
     * @private
     */

  }, {
    key: '_displayMiddleDot',
    value: function _displayMiddleDot() {
      return this.props.middleDot !== false;
    }

    /**
     * Sets the value to the given value, updates the slider position
     * @param {Number} value
     * @param {Boolean} emitChange = true
     * @private
     */

  }, {
    key: '_setValue',
    value: function _setValue(value) {
      var emitChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      value = Math.round(value);
      var _props = this.props,
          minValue = _props.minValue,
          maxValue = _props.maxValue;

      var progress = (value - minValue) / (maxValue - minValue);

      // Calculate slider position
      var bar = this.refs.bar;

      var barWidth = bar.offsetWidth;
      var sliderPosition = barWidth * progress;

      // Calculate foreground position and width
      var foregroundWidth = progress * barWidth;
      var foregroundLeft = 0;
      if (this._displayMiddleDot()) {
        foregroundWidth = Math.abs(progress - 0.5) * barWidth;
        foregroundLeft = progress < 0.5 ? barWidth * 0.5 - foregroundWidth : '50%';
      }

      this.setState({ value: value, sliderPosition: sliderPosition, foregroundWidth: foregroundWidth, foregroundLeft: foregroundLeft });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var foregroundProps = {
        style: this._getForegroundStyle()
      };

      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:miniSlider' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:bar', ref: 'bar' },
          _globals.ReactBEM.createElement('div', { bem: '$e:background' }),
          _globals.ReactBEM.createElement('div', _extends({ bem: '$e:foreground' }, foregroundProps)),
          _globals.ReactBEM.createElement('div', { bem: 'e:knob', style: this._getKnobStyle() })
        )
      );
    }
  }]);

  return MiniSliderComponent;
}(_globals.BaseComponent);

exports.default = MiniSliderComponent;


MiniSliderComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _controls = __webpack_require__(4);

var _controls2 = _interopRequireDefault(_controls);

var _transformControlsComponent = __webpack_require__(130);

var _transformControlsComponent2 = _interopRequireDefault(_transformControlsComponent);

var _transformCanvasControlsComponent = __webpack_require__(131);

var _transformCanvasControlsComponent2 = _interopRequireDefault(_transformCanvasControlsComponent);

var _transformTopBarComponent = __webpack_require__(132);

var _transformTopBarComponent2 = _interopRequireDefault(_transformTopBarComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

/**
 * The transform controls
 * @class
 * @extends PhotoEditorSDK.UI.ReactUI.Control
 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
 */
var TransformControls = function (_Controls) {
  _inherits(TransformControls, _Controls);

  function TransformControls() {
    _classCallCheck(this, TransformControls);

    return _possibleConstructorReturn(this, (TransformControls.__proto__ || Object.getPrototypeOf(TransformControls)).apply(this, arguments));
  }

  _createClass(TransformControls, null, [{
    key: 'onEnter',

    /**
     * Gets called when the user enters these controls
     * @this {TransformControlsComponent}
     * @param {SharedState} sharedState
     * @override
     * @ignore
     */
    value: function onEnter(sharedState) {
      var editor = this.context.editor;


      var transformOperationExistedBefore = editor.operations.exists('transform');
      var transformOperation = editor.operations.getOrCreate('transform');
      transformOperation.setEnabled(false, false);

      var orientationOperationExistedBefore = editor.operations.exists('orientation');
      var orientationOperation = editor.operations.getOrCreate('orientation');

      var defaultOptions = {
        end: new _globals.Vector2(1, 1),
        rotation: 0,
        start: new _globals.Vector2(0, 0),
        textureScale: 1
      };

      var inputDimensions = transformOperation.getInputDimensions(false);
      var initialDimensions = transformOperation.getNewDimensions(inputDimensions);

      var initialTransformOptions = defaultOptions;
      if (transformOperationExistedBefore) {
        initialTransformOptions = transformOperation.serializeOptions();
        delete initialTransformOptions.enabled;

        // Convert operation options to our UI options
        var _initialTransformOpti = initialTransformOptions,
            start = _initialTransformOpti.start,
            end = _initialTransformOpti.end,
            rotation = _initialTransformOpti.rotation;

        var finalScale = transformOperation.calculateScale(rotation);
        var _inputDimensions = transformOperation.getInputDimensions(false);
        var cos = Math.cos(rotation);
        var sin = Math.sin(rotation);

        var halfRelativeSize = end.clone().subtract(start).divide(2);
        var middleInPixels = start.clone().add(halfRelativeSize).multiply(_inputDimensions);

        var middleDistanceFromCenter = middleInPixels.subtract(_inputDimensions.clone().multiply(0.5));

        // Rotate and scale the middle back
        var newMiddleDistanceFromCenter = new _globals.Vector2(middleDistanceFromCenter.x * cos - middleDistanceFromCenter.y * sin, middleDistanceFromCenter.x * sin + middleDistanceFromCenter.y * cos).multiply(finalScale);

        var newMiddleInPixels = _inputDimensions.clone().multiply(0.5).add(newMiddleDistanceFromCenter);

        var newRelativeMiddle = newMiddleInPixels.clone().divide(_inputDimensions);

        var newStart = newRelativeMiddle.clone().subtract(halfRelativeSize.clone().multiply(finalScale));
        var newEnd = newRelativeMiddle.clone().add(halfRelativeSize.clone().multiply(finalScale));

        initialTransformOptions.start = newStart;
        initialTransformOptions.end = newEnd;
      }

      editor.broadcastTransform(transformOperation, defaultOptions);

      var initialOrientationOptions = orientationOperation.serializeOptions();
      var activePadding = [10, 0, 58 + 10, 0];
      editor.setSpriteScale(transformOperation.calculateScale());
      editor.setRotation(initialTransformOptions.rotation);
      editor.setPadding(activePadding);

      // Reset start and end so that SpriteOperation gets an update and repositions
      // the stickers
      transformOperation.set(defaultOptions, transformOperationExistedBefore);

      editor.zoom.set('auto', function () {
        // Disable zoom and drag while we're transformping
        editor.features.disable('zoom', 'drag');
      }, false);

      this.setSharedState({
        initialTransformOptions: initialTransformOptions,
        initialOrientationOptions: initialOrientationOptions,
        operation: transformOperation,
        orientationOperation: orientationOperation,
        activePadding: activePadding,
        orientationOperationExistedBefore: orientationOperationExistedBefore,
        transformOperationExistedBefore: transformOperationExistedBefore,
        start: _globals.Vector2.fromObject(initialTransformOptions.start),
        end: _globals.Vector2.fromObject(initialTransformOptions.end),
        rotation: initialTransformOptions.rotation,
        orientationRotation: orientationOperation.getRotation(),
        flipVertically: orientationOperation.getFlipVertically(),
        flipHorizontally: orientationOperation.getFlipHorizontally(),
        initialDimensions: initialDimensions,
        inputDimensions: inputDimensions
      });
    }

    /**
     * Checks if this control is available to the user
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {Boolean}
     * @ignore
     */

  }, {
    key: 'isAvailable',
    value: function isAvailable(editor) {
      return editor.isToolAllowed('transform') && editor.isToolEnabled('transform');
    }

    /**
     * Returns the assets that should be preloaded for this control
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {String[]}
     */

  }, {
    key: 'getPreloadAssets',
    value: function getPreloadAssets(editor) {
      var options = editor.getOptions();
      var transformOptions = _globals.SDKUtils.defaults(options.editor.controlsOptions.transform, this.defaultOptions);

      var assets = ['controls/transform/rotate-ccw.png', 'controls/transform/rotate-cw.png', 'controls/transform/flip-h.png', 'controls/transform/flip-v.png'];

      // Add ratios
      var ratios = _transformControlsComponent2.default.getRatios(transformOptions);
      ratios.forEach(function (itemOrGroup) {
        if (Array.isArray(itemOrGroup)) {
          itemOrGroup.forEach(function (_ref) {
            var identifier = _ref.identifier;

            assets.push('controls/transform/' + identifier + '.png');
          });
        } else {
          assets.push('controls/transform/' + itemOrGroup.identifier + '.png');
        }
      });

      return assets;
    }
  }]);

  return TransformControls;
}(_controls2.default);

/**
 * This control's top bar component. Used for the upper part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.TopBarControlsComponent}
 */


TransformControls.topBarControlsComponent = _transformTopBarComponent2.default;

/**
 * This control's controls component. Used for the lower controls part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */
TransformControls.controlsComponent = _transformControlsComponent2.default;

/**
 * This control's canvas component. Used for the upper controls part of the editor (on
 * top of the canvas)
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */
TransformControls.canvasControlsComponent = _transformCanvasControlsComponent2.default;

/**
 * This control's identifier
 * @type {String}
 * @default
 */
TransformControls.identifier = 'transform';

/**
 * This control's icon path
 * @type {String}
 * @ignore
 */
TransformControls.iconPath = 'controls/overview/transform.png';

/**
 * The language key that should be used when displaying this filter
 * @type {String}
 * @ignore
 */
TransformControls.languageKey = 'pesdk.transform.title.name';

/**
 * The default options for this control
 * @type {Object}
 * @property {Object[]} [ratios = []]
 * @property {Boolean} [replaceRatios = false]
 * @property {String[]} [availableRatios = null]
 */
TransformControls.defaultOptions = {};

/**
 * The operations required for this control to work properly
 * @type {Array}
 */
TransformControls.requiredOperations = ['transform'];

exports.default = TransformControls;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _controlsComponent = __webpack_require__(3);

var _controlsComponent2 = _interopRequireDefault(_controlsComponent);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

var _sliderOverlayComponent = __webpack_require__(6);

var _sliderOverlayComponent2 = _interopRequireDefault(_sliderOverlayComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var TransformControlsComponent = function (_ControlsComponent) {
  _inherits(TransformControlsComponent, _ControlsComponent);

  function TransformControlsComponent() {
    var _ref;

    _classCallCheck(this, TransformControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = TransformControlsComponent.__proto__ || Object.getPrototypeOf(TransformControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_selectRatio', '_onRotationChange', '_reapplyRatio');

    _this.state = { ratio: null };
    _this._ratios = _this.constructor.getRatios(_this.props.options);

    _this._events = _defineProperty({}, _globals.Constants.EVENTS.TRANSFORM_REAPPLY_RATIO, _this._reapplyRatio);

    _this._selectInitialRatio(!_this.getSharedState('transformOperationExistedBefore'));
    return _this;
  }

  // -------------------------------------------------------------------------- INITIALIZATION

  /**
   * Initializes the available ratios
   * @param {Object} options
   * @return {Object[]}
   */


  _createClass(TransformControlsComponent, [{
    key: 'shouldSharedComponentUpdate',


    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Checks if the component should change from the given state
     * @param  {Object} oldState
     * @param  {Object} newState
     * @return {Boolean}
     */
    value: function shouldSharedComponentUpdate(oldState, newState) {
      return oldState.ratio !== newState.ratio;
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the rotation has been chagned (by using the slider)
     * @param  {Number} rotation
     * @private
     */

  }, {
    key: '_onRotationChange',
    value: function _onRotationChange(rotation) {
      var transformOperation = this.getSharedState('operation');
      var editor = this.context.editor;

      rotation = rotation * Math.PI / 180;
      editor.setRotation(rotation);
      editor.setSpriteScale(transformOperation.calculateScale(rotation));

      editor.render();
      this.setSharedState({ rotation: rotation });
    }

    /**
     * Gets the outer bounding dimensions of the rotated sprite
     * @return {PhotoEditorSDK.Math.Vector2}
     * @private
     */

  }, {
    key: '_getRotatedSpriteDimensions',
    value: function _getRotatedSpriteDimensions() {
      var editor = this.context.editor;

      var rotation = editor.getRotation();

      var outputDimensions = editor.getOutputDimensions(false);

      return new _globals.Vector2(Math.abs(outputDimensions.x * Math.cos(rotation)) + Math.abs(outputDimensions.y * Math.sin(rotation)), Math.abs(outputDimensions.x * Math.sin(rotation)) + Math.abs(outputDimensions.y * Math.cos(rotation)));
    }

    /**
     * Calculates the texture scale using the current settings
     * @return {Number}
     * @private
     */

  }, {
    key: '_calculateTextureScale',
    value: function _calculateTextureScale() {
      var transformOperation = this.getSharedState('operation');
      var ratio = this.getSharedState('ratio');
      if (!ratio || !ratio.dimensions) {
        return 1;
      }

      var start = this.getSharedState('start');
      var end = this.getSharedState('end');

      var size = end.clone().subtract(start);
      var transformDimensions = transformOperation.getInputDimensions(false).multiply(size);
      return ratio.dimensions.x / transformDimensions.x;
    }

    /**
     * Returns all the history items for all operations
     * @private
     */

  }, {
    key: '_getHistoryItems',
    value: function _getHistoryItems() {
      var historyItems = [];

      var transformHistoryItem = this._getTransformHistoryItem();
      if (transformHistoryItem) {
        historyItems.push(transformHistoryItem);
      }

      var orientationHistoryItem = this._getOrientationHistoryItem();
      if (orientationHistoryItem) {
        historyItems.push(orientationHistoryItem);
      }

      return historyItems;
    }

    /**
     * Returns the history item for the transform operation
     * @private
     */

  }, {
    key: '_getTransformHistoryItem',
    value: function _getTransformHistoryItem() {
      var editor = this.context.editor;

      var transformOperation = this.getSharedState('operation');
      var initialTransformOptions = this.getSharedState('initialTransformOptions');
      var transformOperationExistedBefore = this.getSharedState('transformOperationExistedBefore');
      if (!transformOperation.optionsEqual(initialTransformOptions)) {
        return {
          operation: transformOperation,
          options: initialTransformOptions,
          existent: transformOperationExistedBefore,
          undo: function undo(operation, newOptions) {
            editor.broadcastTransform(operation, newOptions);
          }
        };
      }
    }

    /**
     * Returns the history item for the orientation operation
     * @private
     */

  }, {
    key: '_getOrientationHistoryItem',
    value: function _getOrientationHistoryItem() {
      var editor = this.context.editor;

      var orientationOperation = this.getSharedState('orientationOperation');
      var initialOrientationOptions = this.getSharedState('initialOrientationOptions');
      var orientationOperationExistedBefore = this.getSharedState('orientationOperationExistedBefore');
      if (!orientationOperation.optionsEqual(initialOrientationOptions)) {
        return {
          operation: orientationOperation,
          options: initialOrientationOptions,
          existent: orientationOperationExistedBefore,
          undo: function undo(operation, newOptions) {
            if (operation.getRotation() !== newOptions.rotation) {
              editor.broadcastRotate(newOptions.rotation - operation.getRotation());
            }

            var rotation = newOptions.rotation;
            var inverseFlip = rotation === 90 || rotation === 270;
            if (operation.getFlipVertically() !== newOptions.flipVertically) {
              editor.broadcastFlip(inverseFlip ? 'horizontal' : 'vertical');
            } else if (operation.getFlipHorizontally() !== newOptions.flipHorizontally) {
              editor.broadcastFlip(inverseFlip ? 'vertical' : 'horizontal');
            }
          }
        };
      }
    }

    /**
     * Re-applies the current ratio
     * @private
     */

  }, {
    key: '_reapplyRatio',
    value: function _reapplyRatio() {
      var ratio = this.getSharedState('ratio');
      this._selectRatio(ratio);
    }

    /**
     * Gets called when the user clicks the back button
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onBackClick',
    value: function _onBackClick(e) {
      var editor = this.context.editor;


      var ratio = this.getSharedState('ratio');
      var transformOperation = this.getSharedState('operation');
      var orientationOperation = this.getSharedState('orientationOperation');

      var rotation = editor.getRotation();
      var start = this.getSharedState('start').clone();
      var end = this.getSharedState('end').clone();
      if ((ratio === null || start.equals(0, 0) && end.equals(1, 1)) && rotation === 0) {
        editor.operations.remove(transformOperation);
      } else {
        // Calculate texture scale
        var textureScale = this._calculateTextureScale();

        var options = {
          rotation: rotation,
          start: start,
          end: end,
          textureScale: textureScale,
          enabled: true
        };

        var finalScale = transformOperation.calculateScale(rotation);
        var inputDimensions = transformOperation.getInputDimensions(false);
        var cos = Math.cos(-rotation);
        var sin = Math.sin(-rotation);

        var halfRelativeSize = end.clone().subtract(start).divide(2);
        var middleInPixels = start.clone().add(halfRelativeSize).multiply(inputDimensions);

        var middleDistanceFromCenter = middleInPixels.subtract(inputDimensions.clone().multiply(0.5));

        // Rotate and scale the middle back
        var newMiddleDistanceFromCenter = new _globals.Vector2(middleDistanceFromCenter.x * cos - middleDistanceFromCenter.y * sin, middleDistanceFromCenter.x * sin + middleDistanceFromCenter.y * cos).divide(finalScale);

        var newMiddleInPixels = inputDimensions.clone().multiply(0.5).add(newMiddleDistanceFromCenter);

        var newRelativeMiddle = newMiddleInPixels.clone().divide(inputDimensions);

        options.start = newRelativeMiddle.clone().subtract(halfRelativeSize.clone().divide(finalScale));
        options.end = newRelativeMiddle.clone().add(halfRelativeSize.clone().divide(finalScale));

        editor.broadcastTransform(transformOperation, options);
        transformOperation.set(options);
      }

      if (orientationOperation.getRotation() === 0 && !orientationOperation.getFlipVertically() && !orientationOperation.getFlipHorizontally()) {
        editor.operations.remove(orientationOperation);
      }

      // Reset editor transforms
      editor.setPadding(false);
      editor.setRotation(0);
      editor.setSpriteScale(1);

      // Handle history
      var historyItems = this._getHistoryItems();
      if (historyItems.length) {
        var _props$options = this.props.options,
            forceCrop = _props$options.forceCrop,
            firstCrop = _props$options.firstCrop;


        if (!forceCrop && !firstCrop) {
          editor.history.add(historyItems);
        }
      }

      // Enable zoom and drag again, reset zoom
      editor.features.enable('zoom', 'drag');
      editor.zoom.set('auto');

      _get(TransformControlsComponent.prototype.__proto__ || Object.getPrototypeOf(TransformControlsComponent.prototype), '_onBackClick', this).call(this, e);
    }

    // -------------------------------------------------------------------------- RATIO HANDLING

    /**
     * Selects the initial ratio
     * @param {Boolean} setDefaultOptions = true
     * @private
     */

  }, {
    key: '_selectInitialRatio',
    value: function _selectInitialRatio() {
      var setDefaultOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      var operation = this.getSharedState('operation');
      var selectedRatio = null;
      var ratios = _globals.SDKUtils.Array.flatten(this._ratios);

      // 1. Selected ratio stored in operation
      var operationRatio = operation._ratio;
      if (operationRatio) {
        var matchingRatios = ratios.filter(function (ratio) {
          return ratio === operationRatio;
        });
        selectedRatio = matchingRatios[0];
      }

      // 2. First ratio with `selected` flag
      if (!selectedRatio) {
        var selectedRatios = ratios.filter(function (ratio) {
          return ratio.selected;
        });
        selectedRatio = selectedRatios.pop();
      }

      // 3. First ratio
      if (!selectedRatio) {
        selectedRatio = ratios[0];
      }

      return this._selectRatio(selectedRatio, setDefaultOptions, false);
    }

    /**
     * Selects the given ratio
     * @param {String} ratio
     * @param {Boolean} setDefaultOptions = true
     * @param {Boolean} update = true
     * @private
     */

  }, {
    key: '_selectRatio',
    value: function _selectRatio(ratio) {
      var setDefaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var operation = this.getSharedState('operation');
      if (setDefaultOptions && ratio) {
        this._setDefaultOptionsForRatio(ratio, update);
      }
      operation._ratio = ratio;

      var newSharedState = {
        ratio: ratio
      };
      var editor = this.context.editor;

      if (!ratio) {
        editor.setPadding(false);
        editor.setRotation(0);
        editor.setSpriteScale(1);

        newSharedState.rotation = 0;
        newSharedState.start = new _globals.Vector2(0, 0);
        newSharedState.end = new _globals.Vector2(1, 1);
      } else {
        editor.setPadding(this.getSharedState('activePadding'));
      }
      editor.render();
      this.setSharedState(newSharedState, update);
    }

    /**
     * Sets the default options (start / end) for the given ratio
     * @param {Object} ratio
     * @param {Boolean} update = false
     * @private
     */

  }, {
    key: '_setDefaultOptionsForRatio',
    value: function _setDefaultOptionsForRatio(_ref2) {
      var ratio = _ref2.ratio,
          name = _ref2.name,
          dimensions = _ref2.dimensions;
      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var editor = this.context.editor;

      var start = new _globals.Vector2();
      var end = new _globals.Vector2();

      if (dimensions && !ratio) {
        ratio = dimensions.x / dimensions.y;
      }

      if (ratio === '*') {
        start = new _globals.Vector2(0, 0);
        end = new _globals.Vector2(1, 1);
      } else {
        var outputDimensions = editor.getOutputDimensions();
        var canvasRatio = outputDimensions.x / outputDimensions.y;
        if (canvasRatio <= ratio) {
          var height = 1 / outputDimensions.y * (outputDimensions.x / ratio);
          start.set(0, (1.0 - height) / 2);
          end.set(1.0, 1 - start.y);
        } else {
          var width = 1 / outputDimensions.x * (ratio * outputDimensions.y);
          start.set((1 - width) / 2, 0);
          end.set(1 - start.x, 1.0);
        }
      }

      this.setSharedState({ start: start, end: end }, update);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the overlay controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderOverlayControls',
    value: function renderOverlayControls() {
      var rotation = this.getSharedState('rotation') * 180 / Math.PI;
      if (!this.getSharedState('ratio')) return null;
      return _globals.ReactBEM.createElement(_sliderOverlayComponent2.default, {
        value: rotation,
        minValue: -45,
        middleDot: true,
        maxValue: 45,
        valueUnit: '\xB0',
        label: this._t('pesdk.transform.text.rotation'),
        onChange: this._onRotationChange });
    }

    /**
     * Renders the list items for this controls
     * @return {ReactBEM.Element[]}
     * @private
     */

  }, {
    key: '_renderListItems',
    value: function _renderListItems() {
      var _this2 = this;

      var items = [];
      var makeItem = function makeItem(ratio) {
        return _globals.ReactBEM.createElement(
          'li',
          {
            bem: 'e:item',
            key: ratio.identifier,
            'data-identifier': ratio.identifier },
          _globals.ReactBEM.createElement(
            'bem',
            { specifier: '$b:controls' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: '$e:button m:withLabel',
                className: _this2.getSharedState('ratio') === ratio ? 'is-active' : null,
                onClick: _this2._selectRatio.bind(_this2, ratio) },
              _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: _this2._getAssetPath('controls/transform/' + ratio.identifier + '.png', true) }),
              _globals.ReactBEM.createElement(
                'div',
                { bem: 'e:label' },
                _this2._t('pesdk.transform.asset.' + ratio.identifier) || ratio.defaultName
              )
            )
          )
        );
      };

      this._ratios.forEach(function (groupOrRatio) {
        if (Array.isArray(groupOrRatio)) {
          var group = groupOrRatio;

          var groupItems = [];
          group.forEach(function (ratio) {
            groupItems.push(makeItem(ratio));
          });

          if (groupItems.length) {
            items.push(groupItems);
          }
        } else {
          var ratio = groupOrRatio;
          items.push(makeItem(ratio));
        }
      });

      var finalItems = [];
      items.forEach(function (itemOrGroup) {
        finalItems = finalItems.concat(itemOrGroup);
        if (Array.isArray(itemOrGroup) && itemOrGroup !== items[items.length - 1]) {
          finalItems.push(_globals.ReactBEM.createElement('li', { bem: 'e:separator' }));
        }
      });

      var noTransformItem = _globals.ReactBEM.createElement(
        'li',
        {
          bem: 'e:item',
          'data-identifier': 'none',
          key: 'noTransform' },
        _globals.ReactBEM.createElement(
          'bem',
          { specifier: '$b:controls' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: '$e:button m:withLabel',
              className: !this.getSharedState('ratio') ? 'is-active' : null,
              onClick: this._selectRatio.bind(this, null) },
            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/transform/no-transform.png', true) }),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:label' },
              this._t('pesdk.transform.button.none')
            )
          )
        )
      );

      var options = this.context.options;


      return options.editor.forceCrop ? finalItems : [noTransformItem, _globals.ReactBEM.createElement('li', { bem: 'e:separator' })].concat(finalItems);
    }

    /**
     * Renders the controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderControls',
    value: function renderControls() {
      var listItems = this._renderListItems();

      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:list' },
        _globals.ReactBEM.createElement(
          _scrollbarComponent2.default,
          null,
          _globals.ReactBEM.createElement(
            'ul',
            { bem: '$e:list' },
            listItems
          )
        )
      );
    }
  }], [{
    key: 'getRatios',
    value: function getRatios(options) {
      var ratios = options.ratios,
          replaceRatios = options.replaceRatios,
          availableRatios = options.availableRatios;

      ratios = ratios || [];

      var selectableRatios = void 0;
      selectableRatios = _globals.Constants.DEFAULTS.TRANSFORM_RATIOS;
      if (replaceRatios) {
        selectableRatios = ratios;
      } else {
        selectableRatios = selectableRatios.concat(ratios);
      }

      if (availableRatios && availableRatios.length) {
        var pickRatios = function pickRatios(item) {
          if (Array.isArray(item)) {
            return item.map(pickRatios).filter(function (r) {
              return r;
            });
          } else {
            if (availableRatios.indexOf(item.identifier) === -1) {
              return null;
            } else {
              return item;
            }
          }
        };
        selectableRatios = selectableRatios.map(pickRatios).filter(function (r) {
          return r;
        });
      }

      return selectableRatios;
    }
  }]);

  return TransformControlsComponent;
}(_controlsComponent2.default);

exports.default = TransformControlsComponent;


TransformControlsComponent.contextTypes = _controlsComponent2.default.contextTypes;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _draggableComponent = __webpack_require__(5);

var _draggableComponent2 = _interopRequireDefault(_draggableComponent);

var _canvasControlsComponent = __webpack_require__(10);

var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var MIN_DIMENSIONS = new _globals.Vector2(50, 50);

var TransformCanvasControlsComponent = function (_CanvasControlsCompon) {
  _inherits(TransformCanvasControlsComponent, _CanvasControlsCompon);

  function TransformCanvasControlsComponent() {
    var _ref;

    _classCallCheck(this, TransformCanvasControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = TransformCanvasControlsComponent.__proto__ || Object.getPrototypeOf(TransformCanvasControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._needsStyleFixes = true;
    _this._bindAll('_onCenterDragStart', '_onCenterDrag');

    _this.state = {
      dimensions: _this.getSharedState('initialDimensions')
    };
    return _this;
  }

  /**
   * Fixes styles in IE
   */


  _createClass(TransformCanvasControlsComponent, [{
    key: 'fixStyles',
    value: function fixStyles() {
      if (_globals.Utils.Browser.isIElte(11)) {
        var editor = this.context.editor;
        var container = this.refs.container;


        var canvasDimensions = editor.getCanvasDimensions(false);
        var cellHeight = canvasDimensions.y;
        container.style.height = cellHeight + 'px';
      }
    }

    /**
     * Gets called when the shared state did change
     * @param {Object} newState
     */

  }, {
    key: 'sharedStateDidChange',
    value: function sharedStateDidChange(newState) {
      if (newState !== this.getSharedState('ratio')) {
        this._updateDimensions();
      }
    }

    /**
     * Updates the dimensions display
     * @private
     */

  }, {
    key: '_updateDimensions',
    value: function _updateDimensions() {
      var operation = this.getSharedState('operation');
      var ratio = this.getSharedState('ratio') || { ratio: '*' };

      var dimensions = void 0;
      if (ratio.dimensions) {
        dimensions = ratio.dimensions.clone();
      } else {
        var inputDimensions = operation.getInputDimensions(false);
        var start = this.getSharedState('start');
        var end = this.getSharedState('end');
        var transformSize = end.clone().subtract(start);
        dimensions = transformSize.multiply(inputDimensions).floor();
      }

      this.setState({ dimensions: dimensions });
    }

    // -------------------------------------------------------------------------- CENTER DRAGGING

    /**
     * Gets called when the user stars dragging the center
     * @private
     */

  }, {
    key: '_onCenterDragStart',
    value: function _onCenterDragStart() {
      var start = this.getSharedState('start');
      var end = this.getSharedState('end');

      this._initialValues = {
        start: start.clone(),
        end: end.clone(),
        size: end.clone().subtract(start)
      };
    }

    /**
     * Gets called while the user drags the center
     * @param {Vector2} offset
     * @private
     */

  }, {
    key: '_onCenterDrag',
    value: function _onCenterDrag(offset) {
      var editor = this.context.editor;
      var _initialValues = this._initialValues,
          start = _initialValues.start,
          size = _initialValues.size;

      var outputDimensions = editor.getOutputDimensions();
      var transformDifference = offset.clone().divide(outputDimensions);

      var minStart = new _globals.Vector2(0, 0);
      var maxStart = new _globals.Vector2(1, 1).subtract(size);

      var newStart = start.clone().add(transformDifference).clamp(minStart, maxStart);
      var newEnd = newStart.clone().add(size);

      this.setSharedState({ start: newStart, end: newEnd });
    }

    // -------------------------------------------------------------------------- KNOB DRAGGING

    /**
     * Gets called when the user starts dragging a knob
     * @param {String} optionName
     * @private
     */

  }, {
    key: '_onKnobDragStart',
    value: function _onKnobDragStart(optionName) {
      this._currentDragOption = optionName;

      this._initialValues = {
        start: this.getSharedState('start').clone(),
        end: this.getSharedState('end').clone()
      };
    }

    /**
     * Gets called while the user drags a knob
     * @param {String} optionName
     * @param {Vector2} offset
     * @private
     */

  }, {
    key: '_onKnobDrag',
    value: function _onKnobDrag(optionName, offset) {
      var editor = this.context.editor;

      var outputDimensions = editor.getOutputDimensions();

      var _ref2 = this.getSharedState('ratio') || { ratio: '*' },
          ratio = _ref2.ratio,
          dimensions = _ref2.dimensions;

      if (dimensions && !ratio) {
        ratio = dimensions.x / dimensions.y;
      }

      var newSize = this._initialValues.end.clone().subtract(this._initialValues.start).multiply(outputDimensions);

      // Calculate max size and new size
      var maxSize = void 0;
      if (optionName === 'start') {
        newSize.subtract(offset);
        maxSize = this._initialValues.end.clone().multiply(outputDimensions);
      } else if (optionName === 'end') {
        newSize.add(offset);
        maxSize = new _globals.Vector2(1, 1).subtract(this._initialValues.start).multiply(outputDimensions);
      }

      var biggestPossibleCrop = outputDimensions;
      if (typeof ratio !== 'undefined' && ratio !== '*') {
        if (ratio > outputDimensions.x / outputDimensions.y) {
          biggestPossibleCrop = new _globals.Vector2(outputDimensions.x, outputDimensions.x / ratio);
        } else {
          biggestPossibleCrop = new _globals.Vector2(outputDimensions.y * ratio, outputDimensions.y);
        }
      }

      newSize.x = Math.min(Math.max(Math.min(MIN_DIMENSIONS.x, biggestPossibleCrop.x), newSize.x), maxSize.x);
      if (ratio !== '*') {
        newSize.y = newSize.x / ratio;
      }
      newSize.y = Math.min(Math.max(Math.min(MIN_DIMENSIONS.y, biggestPossibleCrop.y), newSize.y), maxSize.y);
      if (ratio !== '*') {
        newSize.x = newSize.y * ratio;
      }

      if (optionName === 'start') {
        var newStart = this._initialValues.end.clone().subtract(newSize.clone().divide(outputDimensions));
        this.setSharedState({ start: newStart }, false);
        this._updateDimensions();
      } else if (optionName === 'end') {
        var newEnd = this._initialValues.start.clone().add(newSize.clone().divide(outputDimensions));
        this.setSharedState({ end: newEnd }, false);
        this._updateDimensions();
      }
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Returns the dimensions according to the current transform dimensions
     * @private
     */

  }, {
    key: '_calculateDimensions',
    value: function _calculateDimensions() {
      var editor = this.context.editor;

      var start = this.getSharedState('start');
      var end = this.getSharedState('end');

      return end.clone().subtract(start).multiply(editor.getInputDimensions(false)).round();
    }

    // -------------------------------------------------------------------------- RESIZING / STYLING

    /**
     * Returns the styles (width / height) for the transform areas that define the
     * transform size
     * @return {Object}
     * @private
     */

  }, {
    key: '_getAreaStyles',
    value: function _getAreaStyles() {
      var editor = this.context.editor;

      var outputDimensions = editor.getOutputDimensions();
      var canvasDimensions = editor.getCanvasDimensions();

      var start = this.getSharedState('start').clone().multiply(outputDimensions).floor();
      var end = this.getSharedState('end').clone().multiply(outputDimensions).ceil();
      var size = end.clone().subtract(start);

      var offset = canvasDimensions.clone().subtract(outputDimensions).divide(2).floor();

      var padding = editor.getPadding();
      start.add(offset).add(0, padding[0]);

      return {
        topLeft: this._getDimensionsStyles(start.x, start.y),
        topCenter: this._getDimensionsStyles(size.x, start.y),
        centerLeft: this._getDimensionsStyles(start.x, size.y),
        center: this._getDimensionsStyles(size.x, size.y)
      };
    }

    /**
     * Returns the dimensions style (width / height) for the given dimensions
     * @param {Number} x
     * @param {Number} y
     * @return {Object}
     * @private
     */

  }, {
    key: '_getDimensionsStyles',
    value: function _getDimensionsStyles(x, y) {
      // Table cells and rows can't have a width / height of 0
      return {
        width: Math.max(1, x),
        height: Math.max(1, y)
      };
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var ratio = this.getSharedState('ratio');
      var dimensions = this.state.dimensions;


      var canvasContent = void 0;
      if (ratio) {
        var areaStyles = this._getAreaStyles();
        canvasContent = _globals.ReactBEM.createElement(
          'div',
          { bem: '$b:transformCanvasControls' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:row' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:cell m:dark', style: areaStyles.topLeft },
              '\xA0'
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:cell m:dark', style: areaStyles.topCenter },
              '\xA0'
            ),
            _globals.ReactBEM.createElement('div', { bem: 'e:cell m:dark' })
          ),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:row' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:cell m:dark', style: areaStyles.centerLeft },
              '\xA0'
            ),
            _globals.ReactBEM.createElement(
              _draggableComponent2.default,
              {
                onStart: this._onCenterDragStart,
                onDrag: this._onCenterDrag },
              _globals.ReactBEM.createElement(
                'div',
                { bem: 'e:cell m:bordered', style: areaStyles.center },
                _globals.ReactBEM.createElement(
                  _draggableComponent2.default,
                  {
                    onStart: this._onKnobDragStart.bind(this, 'start'),
                    onDrag: this._onKnobDrag.bind(this, 'start') },
                  _globals.ReactBEM.createElement(
                    'div',
                    { bem: 'e:knob m:topLeft $b:knob' },
                    _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/resize-diagonal-down.png', true) })
                  )
                ),
                _globals.ReactBEM.createElement(
                  'div',
                  { bem: 'e:dimensions' },
                  dimensions.x + 'x' + dimensions.y
                ),
                _globals.ReactBEM.createElement(
                  _draggableComponent2.default,
                  {
                    onStart: this._onKnobDragStart.bind(this, 'end'),
                    onDrag: this._onKnobDrag.bind(this, 'end') },
                  _globals.ReactBEM.createElement(
                    'div',
                    { bem: 'e:knob m:bottomRight $b:knob' },
                    _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/resize-diagonal-down.png', true) })
                  )
                )
              )
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:cell m:dark' },
              '\xA0'
            )
          ),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:row' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:cell m:dark' },
              '\xA0'
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:cell m:dark' },
              '\xA0'
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:cell m:dark' },
              '\xA0'
            )
          )
        );
      } else {
        canvasContent = _globals.ReactBEM.createElement(
          'div',
          { bem: '$b:transformCanvasControls' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:dimensions' },
            dimensions.x + 'x' + dimensions.y
          )
        );
      }

      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'b:canvasControls e:container m:full', ref: 'container' },
        canvasContent
      );
    }
  }]);

  return TransformCanvasControlsComponent;
}(_canvasControlsComponent2.default);

exports.default = TransformCanvasControlsComponent;


TransformCanvasControlsComponent.contextTypes = _canvasControlsComponent2.default.contextTypes;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _topBarComponent = __webpack_require__(12);

var _topBarComponent2 = _interopRequireDefault(_topBarComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var TransformTopBarComponent = function (_TopBarComponent) {
  _inherits(TransformTopBarComponent, _TopBarComponent);

  function TransformTopBarComponent() {
    _classCallCheck(this, TransformTopBarComponent);

    return _possibleConstructorReturn(this, (TransformTopBarComponent.__proto__ || Object.getPrototypeOf(TransformTopBarComponent)).apply(this, arguments));
  }

  _createClass(TransformTopBarComponent, [{
    key: '_onRotateClick',

    /**
     * Gets called when the user clicks one of the rotate buttons
     * @param  {String} direction
     * @private
     */
    value: function _onRotateClick(direction) {
      var degrees = void 0;
      if (direction === 'cw') {
        degrees = 90;
      } else if (direction === 'ccw') {
        degrees = -90;
      }

      var editor = this.context.editor;

      var operation = this.getSharedState('orientationOperation');
      var newRotation = (operation.getRotation() + degrees) % 360;

      operation.set({ rotation: newRotation });

      var newState = {
        orientationRotation: newRotation
      };

      var ratio = this.getSharedState('ratio');
      if (ratio && !ratio.dimensions) {
        var start = this.getSharedState('start');
        var end = this.getSharedState('end');
        var tempStart = start.clone();
        if (direction === 'cw') {
          start.set(1.0 - end.y, tempStart.x);
          end.set(1.0 - tempStart.y, end.x);
        } else if (direction === 'ccw') {
          start.set(tempStart.y, 1.0 - end.x);
          end.set(end.y, 1.0 - tempStart.x);
        }
        newState.start = start;
        newState.end = end;
      }

      if (ratio && ratio.dimensions) {
        this._emitEvent(_globals.Constants.EVENTS.TRANSFORM_REAPPLY_RATIO);
      }

      this.setSharedState(newState);

      editor.broadcastRotate(degrees);
      editor.zoom.set('auto');
    }

    /**
     * Gets called when the user clicks one of the flip buttons
     * @private
     */

  }, {
    key: '_onFlipClick',
    value: function _onFlipClick(direction) {
      var _setSharedState;

      var editor = this.context.editor;

      var operation = this.getSharedState('orientationOperation');

      var newFlip = !this.getSharedState('flip' + direction);
      var newRotation = this.getSharedState('rotation') * -1;
      this.setSharedState((_setSharedState = {}, _defineProperty(_setSharedState, 'flip' + direction, newFlip), _defineProperty(_setSharedState, 'rotation', newRotation), _setSharedState));
      editor.setRotation(newRotation);
      operation.flip(direction);

      var start = this.getSharedState('start');
      var end = this.getSharedState('end');
      var tmpStart = start.clone();
      if (direction === 'horizontal') {
        start.set(1.0 - end.x, start.y);
        end.set(1.0 - tmpStart.x, end.y);
      } else if (direction === 'vertical') {
        start.set(start.x, 1.0 - end.y);
        end.set(end.x, 1.0 - tmpStart.y);
      }

      this.setSharedState({ start: start, end: end });

      editor.broadcastFlip(direction);
      editor.render();
    }

    /**
     * Checks if the component should change from the given state
     * @param  {Object} oldState
     * @param  {Object} newState
     * @return {Boolean}
     */

  }, {
    key: 'shouldSharedComponentUpdate',
    value: function shouldSharedComponentUpdate(oldState, newState) {
      return false;
    }

    /**
     * Renders the content of this OverviewTopBarComponent
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderContent',
    value: function renderContent() {
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:topBar' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:iconButton', onClick: this._onFlipClick.bind(this, 'vertical') },
          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/transform/flip-v.png', true) })
        ),
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:iconButton', onClick: this._onFlipClick.bind(this, 'horizontal') },
          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/transform/flip-h.png', true) })
        ),
        _globals.ReactBEM.createElement('div', { bem: 'e:space' }),
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:iconButton', onClick: this._onRotateClick.bind(this, 'ccw') },
          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/transform/rotate-ccw.png', true) })
        ),
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:iconButton', onClick: this._onRotateClick.bind(this, 'cw') },
          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/transform/rotate-cw.png', true) })
        )
      );
    }
  }]);

  return TransformTopBarComponent;
}(_topBarComponent2.default);

exports.default = TransformTopBarComponent;


TransformTopBarComponent.contextTypes = _topBarComponent2.default.contextTypes;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _controls = __webpack_require__(4);

var _controls2 = _interopRequireDefault(_controls);

var _filterControlsComponent = __webpack_require__(134);

var _filterControlsComponent2 = _interopRequireDefault(_filterControlsComponent);

var _filterManager = __webpack_require__(27);

var _filterManager2 = _interopRequireDefault(_filterManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

/**
 * The filters controls
 * @class
 * @extends PhotoEditorSDK.UI.ReactUI.Control
 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
 */
var FiltersControls = function (_Controls) {
  _inherits(FiltersControls, _Controls);

  function FiltersControls() {
    _classCallCheck(this, FiltersControls);

    return _possibleConstructorReturn(this, (FiltersControls.__proto__ || Object.getPrototypeOf(FiltersControls)).apply(this, arguments));
  }

  _createClass(FiltersControls, null, [{
    key: 'onEnter',

    /**
     * Gets called when the user enters these controls
     * @this {FiltersControlsComponent}
     * @param {SharedState} sharedState
     * @override
     * @ignore
     */
    value: function onEnter(sharedState) {
      var editor = this.context.editor;

      var operationExistedBefore = editor.operations.exists('filter');
      var operation = editor.operations.getOrCreate('filter');
      var initialOptions = operation.serializeOptions(['identifier', 'filter', 'intensity']);

      this.setSharedState({ operation: operation, operationExistedBefore: operationExistedBefore, initialOptions: initialOptions });
    }

    /**
     * Gets called when the user leaves these controls
     * @this {StickersControlsComponent}
     * @override
     * @ignore
     */

  }, {
    key: 'onExit',
    value: function onExit() {
      var initialOptions = this.getSharedState('initialOptions');
      var FilterConstructor = this._operation.getFilter().constructor;
      var InitialFilterConstructor = initialOptions.filter.constructor;

      var lutImage = void 0;
      if (InitialFilterConstructor.identifier === '3d-lut') {
        lutImage = initialOptions.filter.getImage();
      }
      var intensity = this._operation.getIntensity();
      if (this._operation.getIdentifier() !== initialOptions.identifier || intensity !== initialOptions.intensity) {
        var editor = this.context.editor;

        editor.history.add(this._operation, {
          identifier: initialOptions.identifier,
          intensity: intensity
        }, this.getSharedState('operationExistedBefore'), function () {
          var operation = editor.operations.getOrCreate('filter');
          if (InitialFilterConstructor.identifier === '3d-lut') {
            operation.setFilter(new InitialFilterConstructor({ image: lutImage }));
          } else {
            operation.setFilter(new InitialFilterConstructor());
          }
        });
      }

      if (FilterConstructor.isIdentity) {
        var _editor = this.context.editor;

        _editor.operations.remove(this._operation);
      }
    }

    /**
     * Checks if this control is available to the user
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {Boolean}
     * @override
     */

  }, {
    key: 'isAvailable',
    value: function isAvailable(editor) {
      return editor.isToolAllowed('filter') && editor.isToolEnabled(this.identifier);
    }

    /**
     * Returns the assets that should be preloaded for this control
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {String[]}
     */

  }, {
    key: 'getPreloadAssets',
    value: function getPreloadAssets(editor) {
      var options = editor.getOptions();
      var filterOptions = _globals.SDKUtils.defaults(options.editor.controlsOptions.filter, this.defaultOptions);
      var filterManager = new _filterManager2.default(editor.getUI(), filterOptions);

      var assets = [];
      var categories = filterManager.getCategories();
      categories.forEach(function (category) {
        assets.push('controls/filters/categories/' + category.identifier + '.png');
        var filters = filterManager.getFiltersForCategory(category.identifier);
        filters.forEach(function (filter) {
          assets.push('controls/filters/' + filter.identifier + '.png');
          if (filter.lutImage) {
            assets.push([filter.lutImage, false, false]);
          }
        });
      });

      return assets;
    }
  }]);

  return FiltersControls;
}(_controls2.default);

/**
 * This control's controls component. Used for the lower controls part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */


FiltersControls.controlsComponent = _filterControlsComponent2.default;

/**
 * This control's identifier
 * @type {String}
 * @default
 */
FiltersControls.identifier = 'filter';

/**
 * This control's icon path
 * @type {String}
 * @ignore
 */
FiltersControls.iconPath = 'controls/overview/filters.png';

/**
 * The language key that should be used when displaying this filter
 * @type {String}
 * @ignore
 */
FiltersControls.languageKey = 'pesdk.filter.title.name';

/**
 * The default options for this control
 * @type {Object}
 * @property {PhotoEditorSDK.Filter[]} [categories = []]
 * @property {Boolean} [replaceCategories = false]
 * @property {String[]} [availableFilters = null]
 */
FiltersControls.defaultOptions = {
  categories: [],
  replaceCategories: false,
  availableFilters: null,
  hideCategories: false

  /**
   * The operations required for this control to work properly
   * @type {Array}
   */
};FiltersControls.requiredOperations = ['filter'];

exports.default = FiltersControls;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _controlsComponent = __webpack_require__(3);

var _controlsComponent2 = _interopRequireDefault(_controlsComponent);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

var _categoryDropdownComponent = __webpack_require__(45);

var _categoryDropdownComponent2 = _interopRequireDefault(_categoryDropdownComponent);

var _sliderOverlayComponent = __webpack_require__(6);

var _sliderOverlayComponent2 = _interopRequireDefault(_sliderOverlayComponent);

var _filterManager = __webpack_require__(27);

var _filterManager2 = _interopRequireDefault(_filterManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var Filters = _globals.SDK.Operations.FilterOperation.Filters;

var FilterControlsComponent = function (_ControlsComponent) {
  _inherits(FilterControlsComponent, _ControlsComponent);

  function FilterControlsComponent() {
    var _ref;

    _classCallCheck(this, FilterControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = FilterControlsComponent.__proto__ || Object.getPrototypeOf(FilterControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onItemClick', '_onOperationUpdated', '_onSliderValueChange', '_onCategoryChange');
    _this._operation = _this.getSharedState('operation');

    _this._events = _defineProperty({}, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated);

    _this._initFilterManager();

    _this.state = {
      category: _this._filterManager.getCategoryByIdentifier('all')
    };
    return _this;
  }

  // -------------------------------------------------------------------------- INITIALIZATION

  /**
   * Initializes the filter manager
   * @private
   */


  _createClass(FilterControlsComponent, [{
    key: '_initFilterManager',
    value: function _initFilterManager() {
      this._filterManager = new _filterManager2.default(this.context.ui, this.props.options);
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the slider value has been changed
     * @param {Number} value
     * @private
     */

  }, {
    key: '_onSliderValueChange',
    value: function _onSliderValueChange(value) {
      this._operation.setIntensity(value / 100);

      var editor = this.context.editor;

      editor.render();
    }

    /**
     * Gets called when the user switches the category
     * @param  {Object} category
     * @private
     */

  }, {
    key: '_onCategoryChange',
    value: function _onCategoryChange(category) {
      var _this2 = this;

      this.setState({ category: category }, function () {
        _this2.refs.scrollbar.update();
      });
    }

    /**
     * Gets called when an operation has been updated
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationUpdated',
    value: function _onOperationUpdated(operation) {
      // The undo button might change this operation's selected filter or intensity.
      // Update the component to reflect the change
      if (operation === this._operation) {
        this.forceUpdate();
      }
    }

    /**
     * Gets called when the user clicks an item
     * @param {String} identifier
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onItemClick',
    value: function _onItemClick(identifier, e) {
      var _this3 = this;

      this._filterManager.instantiateFilterWithIdentifier(identifier).then(function (filter) {
        _this3._operation.set({
          filter: filter,
          identifier: identifier,
          intensity: 1
        });

        var editor = _this3.context.editor;

        editor.render();
        _this3.forceUpdate();
      });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the overlay controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderOverlayControls',
    value: function renderOverlayControls() {
      var currentFilter = this._operation.getFilter();
      if (currentFilter.isIdentity) return null;

      var intensity = this._operation.getIntensity();
      return _globals.ReactBEM.createElement(_sliderOverlayComponent2.default, {
        minValue: 0,
        maxValue: 100,
        value: intensity * 100,
        valueUnit: '%',
        positiveValuePrefix: '+',
        label: this._t('pesdk.filter.text.intensity'),
        onChange: this._onSliderValueChange });
    }

    /**
     * Renders the list items for this control
     * @return {Array.<ReactBEM.Element>}
     * @private
     */

  }, {
    key: '_renderListItems',
    value: function _renderListItems() {
      var _this4 = this;

      var currentFilterIdentifier = this._operation.getIdentifier();
      var filters = this._filterManager.getFiltersForCategory(this.state.category.identifier);

      return [Filters.IdentityFilter].concat(filters).map(function (filter) {
        var identifier = filter.identifier;

        return _globals.ReactBEM.createElement(
          'li',
          {
            bem: 'e:item',
            key: identifier,
            onClick: _this4._onItemClick.bind(_this4, identifier) },
          _globals.ReactBEM.createElement(
            'bem',
            { specifier: '$b:controls' },
            _globals.ReactBEM.createElement(
              'div',
              {
                bem: '$e:button m:withInlineLabel' },
              _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: _this4._getAssetPath('controls/filters/' + identifier + '.png', true) }),
              _globals.ReactBEM.createElement(
                'div',
                { bem: '$e:inlineLabel', className: identifier === currentFilterIdentifier ? 'is-active' : null },
                _globals.ReactBEM.createElement(
                  'div',
                  { bem: 'e:label' },
                  _this4._t('pesdk.filter.asset.' + filter.identifier) || filter.defaultName
                )
              )
            )
          )
        );
      });
    }

    /**
     * Renders the category dropdown (if present)
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderCategoryDropdown',
    value: function _renderCategoryDropdown() {
      var _this5 = this;

      var categories = this._filterManager.getCategories();
      var categoryDropdownVisible = !this.props.options.hideCategories && categories.length > 1;
      if (!categoryDropdownVisible) {
        return null;
      }

      var categoryItems = categories.map(function (c) {
        return {
          identifier: c.identifier,
          item: c,
          label: _this5._t('pesdk.filter.asset.' + c.identifier) || c.defaultName,
          icon: _this5._getAssetPath('controls/filters/categories/' + c.identifier + '.png', true)
        };
      });

      var selectedCategory = {
        identifier: this.state.category.identifier,
        item: this.state.category,
        label: this._t('pesdk.filter.asset.' + this.state.category.identifier) || this.state.category.defaultName,
        icon: this._getAssetPath('controls/filters/categories/' + this.state.category.identifier + '.png', true)
      };

      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:categoryDropdown' },
        _globals.ReactBEM.createElement(_categoryDropdownComponent2.default, {
          items: categoryItems,
          selectedItem: selectedCategory,
          onChange: this._onCategoryChange })
      );
    }

    /**
     * Renders the controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderControls',
    value: function renderControls() {
      var listItems = this._renderListItems();
      var categoryDropdown = this._renderCategoryDropdown();

      return [categoryDropdown, _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:list' },
        _globals.ReactBEM.createElement(
          _scrollbarComponent2.default,
          { ref: 'scrollbar' },
          _globals.ReactBEM.createElement(
            'ul',
            { bem: '$e:list' },
            listItems
          )
        )
      )];
    }
  }]);

  return FilterControlsComponent;
}(_controlsComponent2.default);

exports.default = FilterControlsComponent;


FilterControlsComponent.contextTypes = _controlsComponent2.default.contextTypes;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var CategoryDropdownOverlayComponent = function (_BaseComponent) {
  _inherits(CategoryDropdownOverlayComponent, _BaseComponent);

  function CategoryDropdownOverlayComponent() {
    _classCallCheck(this, CategoryDropdownOverlayComponent);

    return _possibleConstructorReturn(this, (CategoryDropdownOverlayComponent.__proto__ || Object.getPrototypeOf(CategoryDropdownOverlayComponent)).apply(this, arguments));
  }

  _createClass(CategoryDropdownOverlayComponent, [{
    key: '_onItemClick',

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user clicks on an item
     * @param  {Object} item
     * @private
     */
    value: function _onItemClick(item) {
      this.props.onChange && this.props.onChange(item.item);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the list items
     * @return {Array.<React.Element>}
     * @private
     */

  }, {
    key: '_renderListItems',
    value: function _renderListItems() {
      var _this2 = this;

      return this.props.items.map(function (item) {
        var active = item.identifier === _this2.props.selectedItem.identifier;
        return _globals.ReactBEM.createElement(
          'li',
          {
            bem: '$e:item',
            className: active ? ' is-active' : '',
            onClick: _this2._onItemClick.bind(_this2, item) },
          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: item.icon }),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:label' },
            item.label
          )
        );
      });
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:categoryDropdown $e:overlay' },
        _globals.ReactBEM.createElement(
          'ul',
          { bem: '$e:list' },
          this._renderListItems()
        )
      );
    }
  }]);

  return CategoryDropdownOverlayComponent;
}(_globals.BaseComponent);

exports.default = CategoryDropdownOverlayComponent;


CategoryDropdownOverlayComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _controls = __webpack_require__(4);

var _controls2 = _interopRequireDefault(_controls);

var _focusControlsComponent = __webpack_require__(137);

var _focusControlsComponent2 = _interopRequireDefault(_focusControlsComponent);

var _focusCanvasControlsComponent = __webpack_require__(138);

var _focusCanvasControlsComponent2 = _interopRequireDefault(_focusCanvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

/**
 * The focus controls
 * @class
 * @extends PhotoEditorSDK.UI.ReactUI.Control
 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
 */
var FocusControls = function (_Controls) {
  _inherits(FocusControls, _Controls);

  function FocusControls() {
    _classCallCheck(this, FocusControls);

    return _possibleConstructorReturn(this, (FocusControls.__proto__ || Object.getPrototypeOf(FocusControls)).apply(this, arguments));
  }

  _createClass(FocusControls, null, [{
    key: 'isAvailable',

    /**
     * Checks if this control is available to the user
     * @param  {Editor} editor
     * @return {Boolean}
     * @ignore
     */
    value: function isAvailable(editor) {
      return editor.isToolAllowed('focus') && (editor.isToolEnabled('radial-focus') || editor.isToolEnabled('mirrored-focus'));
    }

    /**
     * Gets called when the user leaves these controls
     * @this {FocusControlsComponent}
     * @override
     * @ignore
     */

  }, {
    key: 'onExit',
    value: function onExit() {
      var editor = this.context.editor;

      editor.features.enable('zoom', 'drag');

      var initialOptions = this.getSharedState('initialOptions');
      var initialOperation = this.getSharedState('initialOperation');
      var operation = this.getSharedState('operation');

      if (!operation && initialOperation || operation && initialOperation && operation.constructor === initialOperation.constructor) {
        editor.history.add(initialOperation, initialOptions, true);
      }

      if (operation && !initialOperation) {
        editor.history.add(operation, {}, false);
      }

      if (operation && initialOperation && operation.constructor !== initialOperation.constructor) {
        editor.history.add([{
          operation: initialOperation,
          options: initialOptions,
          existent: true
        }, {
          operation: operation,
          options: {},
          existent: false
        }]);
      }
    }

    /**
     * Gets called when the user enters these controls
     * @this {FocusControlsComponent}
     * @param {SharedState} sharedState
     * @override
     * @ignore
     */

  }, {
    key: 'onEnter',
    value: function onEnter(sharedState) {
      var editor = this.context.editor;

      var operation = editor.operations.get('mirrored-focus') || editor.operations.get('radial-focus');

      var initialOptions = {};
      if (operation) {
        initialOptions = operation.serializeOptions();
        delete initialOptions.enabled;
      }

      this.setSharedState({
        operation: operation,
        initialOperation: operation,
        operationExistedBefore: !!operation,
        initialOptions: initialOptions,
        inputDimensions: editor.getOutputDimensions()
      });
    }

    /**
     * Returns the assets that should be preloaded for this control
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {String[]}
     */

  }, {
    key: 'getPreloadAssets',
    value: function getPreloadAssets(editor) {
      var assets = [];
      if (editor.isToolEnabled('radial-focus')) {
        assets.push('controls/focus/radial.png');
      }
      if (editor.isToolEnabled('mirrored-focus')) {
        assets.push('controls/focus/mirrored.png');
      }

      return assets;
    }
  }]);

  return FocusControls;
}(_controls2.default);

/**
 * This control's controls component. Used for the lower controls part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */


FocusControls.controlsComponent = _focusControlsComponent2.default;

/**
 * This control's canvas component. Used for the upper controls part of the editor (on
 * top of the canvas)
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */
FocusControls.canvasControlsComponent = _focusCanvasControlsComponent2.default;

/**
 * This control's identifier
 * @type {String}
 * @default
 */
FocusControls.identifier = 'focus';

/**
 * This control's icon path
 * @type {String}
 * @ignore
 */
FocusControls.iconPath = 'controls/overview/focus.png';

/**
 * The language key that should be used when displaying this filter
 * @type {String}
 * @ignore
 */
FocusControls.languageKey = 'pesdk.focus.title.name';

/**
 * The default options for this control
 * @type {Object}
 */
FocusControls.defaultOptions = {};

/**
 * The operations required for this control to work properly
 * @type {Array}
 */
FocusControls.requiredOperations = ['radial-focus', 'mirrored-focus', 'linear-focus', 'blur'];

exports.default = FocusControls;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _controlsComponent = __webpack_require__(3);

var _controlsComponent2 = _interopRequireDefault(_controlsComponent);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

var _sliderOverlayComponent = __webpack_require__(6);

var _sliderOverlayComponent2 = _interopRequireDefault(_sliderOverlayComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ITEMS = [{ toolName: 'radial-focus', iconName: 'radial', languageKey: 'pesdk.focus.button.radial' }, { toolName: 'mirrored-focus', iconName: 'mirrored', languageKey: 'pesdk.focus.button.mirrored' }];

var FocusControlsComponent = function (_ControlsComponent) {
  _inherits(FocusControlsComponent, _ControlsComponent);

  function FocusControlsComponent() {
    var _ref;

    _classCallCheck(this, FocusControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = FocusControlsComponent.__proto__ || Object.getPrototypeOf(FocusControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onBlurRadiusChange', '_onOperationRemoved');
    _this._removedOperation = null;

    _this._events = _defineProperty({}, _globals.Constants.EVENTS.OPERATION_REMOVED, _this._onOperationRemoved);
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the slider value has changed
   * @param {Number} value
   * @private
   */


  _createClass(FocusControlsComponent, [{
    key: '_onBlurRadiusChange',
    value: function _onBlurRadiusChange(value) {
      var operation = this.getSharedState('operation');
      var inputDimensions = this.getSharedState('inputDimensions');
      operation.setBlurRadius(value / inputDimensions.min());

      var editor = this.context.editor;

      editor.render();
    }

    /**
     * Gets called when the user clicks one of the buttons
     * @param {Object} toolName
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onButtonClick',
    value: function _onButtonClick(toolName, e) {
      var editor = this.context.editor;

      var previousOperation = this.getSharedState('operation');
      if (previousOperation) {
        this._removedOperation = previousOperation;
        editor.operations.remove(previousOperation);
      }

      var newOperation = null;
      if (toolName) {
        newOperation = editor.operations.getOrCreate(toolName);
      }

      this.setSharedState({ operation: newOperation });
      editor.render();
    }

    /**
     * Gets called when an operation has been removed
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationRemoved',
    value: function _onOperationRemoved(operation) {
      var currentOperation = this.getSharedState('operation');
      if (!currentOperation || operation !== currentOperation || operation === this._removedOperation) return;
      if (this._backButtonClicked) return;

      var editor = this.context.editor;

      var identifier = currentOperation.constructor.identifier;
      var newOperation = editor.operations.getOrCreate(identifier);

      this.setSharedState({
        operation: newOperation,
        operationExistedBefore: false,
        initialOptions: {}
      });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the overlay controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderOverlayControls',
    value: function renderOverlayControls() {
      var focusOperation = this.getSharedState('operation');
      if (!focusOperation) return null;

      var inputDimensions = this.getSharedState('inputDimensions');
      var shortestSide = inputDimensions.min();
      var value = focusOperation.getBlurRadius() * shortestSide;
      return _globals.ReactBEM.createElement(_sliderOverlayComponent2.default, {
        minValue: 0,
        maxValue: Math.min(180, Math.round(shortestSide * 0.1)),
        valueUnit: 'px',
        middleDot: false,
        label: this._t('pesdk.focus.text.blurRadius'),
        onChange: this._onBlurRadiusChange,
        value: value });
    }

    /**
     * Renders the list items for this control
     * @return {Array.<ReactBEM.Element>}
     * @private
     */

  }, {
    key: '_renderListItems',
    value: function _renderListItems() {
      var _this2 = this;

      var focusOperation = this.getSharedState('operation');

      var editor = this.context.editor;

      var noFocusItem = _globals.ReactBEM.createElement(
        'li',
        {
          bem: 'e:item',
          key: 'none' },
        _globals.ReactBEM.createElement(
          'bem',
          { specifier: '$b:controls' },
          _globals.ReactBEM.createElement(
            'div',
            {
              bem: '$e:button m:withLabel',
              className: !focusOperation ? 'is-active' : null,
              onClick: this._onButtonClick.bind(this, null) },
            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/focus/none.png', true) }),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:label' },
              this._t('pesdk.focus.button.none')
            )
          )
        )
      );

      return [noFocusItem].concat(ITEMS.filter(function (_ref2) {
        var toolName = _ref2.toolName;
        return editor.isToolEnabled(toolName);
      }).map(function (_ref3) {
        var toolName = _ref3.toolName,
            iconName = _ref3.iconName,
            languageKey = _ref3.languageKey;

        var isActive = focusOperation && focusOperation.constructor.identifier === toolName;
        return _globals.ReactBEM.createElement(
          'li',
          {
            bem: 'e:item',
            'data-identifier': toolName,
            key: toolName },
          _globals.ReactBEM.createElement(
            'bem',
            { specifier: '$b:controls' },
            _globals.ReactBEM.createElement(
              'div',
              {
                bem: '$e:button m:withLabel',
                className: isActive ? 'is-active' : null,
                onClick: _this2._onButtonClick.bind(_this2, toolName) },
              _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: _this2._getAssetPath('controls/focus/' + iconName + '.png', true) }),
              _globals.ReactBEM.createElement(
                'div',
                { bem: 'e:label' },
                _this2._t(languageKey)
              )
            )
          )
        );
      }));
    }

    /**
     * Renders the controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderControls',
    value: function renderControls() {
      var listItems = this._renderListItems();

      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:list' },
        _globals.ReactBEM.createElement(
          _scrollbarComponent2.default,
          null,
          _globals.ReactBEM.createElement(
            'ul',
            { bem: '$e:list' },
            listItems
          )
        )
      );
    }
  }]);

  return FocusControlsComponent;
}(_controlsComponent2.default);

exports.default = FocusControlsComponent;


FocusControlsComponent.contextTypes = _controlsComponent2.default.contextTypes;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _canvasControlsComponent = __webpack_require__(10);

var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);

var _linearFocusCanvasControlsComponent = __webpack_require__(139);

var _linearFocusCanvasControlsComponent2 = _interopRequireDefault(_linearFocusCanvasControlsComponent);

var _radialFocusCanvasControlsComponent = __webpack_require__(140);

var _radialFocusCanvasControlsComponent2 = _interopRequireDefault(_radialFocusCanvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var FocusCanvasControlsComponent = function (_CanvasControlsCompon) {
  _inherits(FocusCanvasControlsComponent, _CanvasControlsCompon);

  function FocusCanvasControlsComponent() {
    _classCallCheck(this, FocusCanvasControlsComponent);

    return _possibleConstructorReturn(this, (FocusCanvasControlsComponent.__proto__ || Object.getPrototypeOf(FocusCanvasControlsComponent)).apply(this, arguments));
  }

  _createClass(FocusCanvasControlsComponent, [{
    key: '_getControlsForOperation',

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Returns the appropriate canvas controls for the given operation
     * @param  {PhotoEditorSDK.Operation} operation
     * @return {ReactBEM.Element}
     * @private
     */
    value: function _getControlsForOperation(operation) {
      if (!operation) return null;

      switch (operation.constructor.identifier) {
        case 'mirrored-focus':
          return _linearFocusCanvasControlsComponent2.default;
        case 'radial-focus':
          return _radialFocusCanvasControlsComponent2.default;
      }
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var operation = this.getSharedState('operation');
      var Controls = this._getControlsForOperation(operation);
      if (!Controls) return _globals.ReactBEM.createElement('div', null);
      return _globals.ReactBEM.createElement(Controls, this.props);
    }
  }]);

  return FocusCanvasControlsComponent;
}(_canvasControlsComponent2.default);

exports.default = FocusCanvasControlsComponent;


FocusCanvasControlsComponent.contextTypes = _canvasControlsComponent2.default.contextTypes;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _draggableComponent = __webpack_require__(5);

var _draggableComponent2 = _interopRequireDefault(_draggableComponent);

var _canvasControlsComponent = __webpack_require__(10);

var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var LinearFocusCanvasControlsComponent = function (_CanvasControlsCompon) {
  _inherits(LinearFocusCanvasControlsComponent, _CanvasControlsCompon);

  function LinearFocusCanvasControlsComponent() {
    var _ref;

    _classCallCheck(this, LinearFocusCanvasControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = LinearFocusCanvasControlsComponent.__proto__ || Object.getPrototypeOf(LinearFocusCanvasControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onCenterDragStart', '_onCenterDrag', '_onKnobDragStart', '_onKnobDrag', '_onOperationUpdated');

    _this.state = {
      areaPosition: new _globals.Vector2(),
      areaDimensions: new _globals.Vector2(),
      knobPosition: new _globals.Vector2()
    };
    _this._operation = _this.getSharedState('operation');

    _this._events = _defineProperty({}, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated);
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called after the canvas has been zoomed in or out
   * @private
   */


  _createClass(LinearFocusCanvasControlsComponent, [{
    key: '_onCanvasZoomDone',
    value: function _onCanvasZoomDone() {
      this._setStylesFromOptions();
    }

    /**
     * Gets called when an operation has been updated
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationUpdated',
    value: function _onOperationUpdated(operation) {
      if (operation !== this.getSharedState('operation')) return;
      this._setStylesFromOptions();
    }

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called when the shared state did change
     * @param {Object} newState
     */

  }, {
    key: 'sharedStateDidChange',
    value: function sharedStateDidChange(newState) {
      if (newState.operation) {
        this._operation = newState.operation;
        if (this._operation.constructor.identifier === 'mirrored-focus') this._setStylesFromOptions();
      }
    }

    /**
     * Gets called when this component has been mounted
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _get(LinearFocusCanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(LinearFocusCanvasControlsComponent.prototype), 'componentDidMount', this).call(this);

      var editor = this.context.editor;

      editor.zoom.set('auto', function () {
        editor.features.disable('zoom', 'drag');
        _this2._setStylesFromOptions();
      });
    }

    // -------------------------------------------------------------------------- CENTER DRAGGING

    /**
     * Gets called when the user stars dragging the center
     * @private
     */

  }, {
    key: '_onCenterDragStart',
    value: function _onCenterDragStart() {
      this._initialStart = this._operation.getStart();
      this._initialEnd = this._operation.getEnd();
      this._initialDist = this._initialEnd.clone().subtract(this._initialStart);
    }

    /**
     * Gets called while the user drags the center
     * @param {Vector2} offset
     * @private
     */

  }, {
    key: '_onCenterDrag',
    value: function _onCenterDrag(offset) {
      var editor = this.context.editor;


      var outputDimensions = editor.getOutputDimensions();
      var relativeOffset = offset.clone().divide(outputDimensions);

      var newStart = this._initialStart.clone().add(relativeOffset).clamp(new _globals.Vector2(0, 0), new _globals.Vector2(1, 1).subtract(this._initialDist));
      var newEnd = newStart.clone().add(this._initialDist);

      this._operation.set({
        start: newStart,
        end: newEnd
      });

      editor.render();
      this._setStylesFromOptions();
      this.forceUpdate();
    }

    // -------------------------------------------------------------------------- GRADIENT KNOB DRAG

    /**
     * Gets called when the user stars dragging the gradient knob
     * @private
     */

  }, {
    key: '_onKnobDragStart',
    value: function _onKnobDragStart(e) {
      this._initialKnobPosition = this.state.knobPosition.clone();
    }

    /**
     * Gets called while the user drags the gradient knob
     * @param {Vector2} offset
     * @private
     */

  }, {
    key: '_onKnobDrag',
    value: function _onKnobDrag(offset) {
      var editor = this.context.editor;

      var outputDimensions = editor.getOutputDimensions();

      var newKnobPosition = this._initialKnobPosition.clone().add(offset).clamp(new _globals.Vector2(0, 0), outputDimensions);

      var distanceFromCenter = newKnobPosition.clone().subtract(this.state.areaPosition);

      var start = this.state.areaPosition.clone().add(-distanceFromCenter.y, distanceFromCenter.x).divide(outputDimensions);
      var end = this.state.areaPosition.clone().add(distanceFromCenter.y, -distanceFromCenter.x).divide(outputDimensions);
      var size = distanceFromCenter.len() * 2;

      this._operation.set({
        start: start,
        end: end,
        size: size / outputDimensions.min(),
        gradientSize: size / outputDimensions.min()
      });
      this.setState({
        knobPosition: newKnobPosition,
        areaDimensions: new _globals.Vector2(this.state.areaDimensions.x, size)
      });
      editor.render();
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the CSS styles for the area div
     * @return {Object}
     * @private
     */

  }, {
    key: '_getAreaStyle',
    value: function _getAreaStyle() {
      var dist = this.state.knobPosition.clone().subtract(this.state.areaPosition);
      var degrees = Math.atan2(dist.x, dist.y) * (180 / Math.PI);
      var transform = 'rotate(' + (-degrees).toFixed(2) + 'deg)';

      return {
        width: this.state.areaDimensions.x,
        height: this.state.areaDimensions.y,
        left: this.state.areaPosition.x,
        top: this.state.areaPosition.y,
        marginLeft: this.state.areaDimensions.x * -0.5,
        marginTop: this.state.areaDimensions.y * -0.5,
        transform: transform,
        MozTransform: transform,
        msTransform: transform,
        WebkitTransform: transform
      };
    }

    /**
     * Returns the CSS styles for the knob
     * @return {Object}
     * @private
     */

  }, {
    key: '_getKnobStyle',
    value: function _getKnobStyle() {
      return {
        left: this.state.knobPosition.x,
        top: this.state.knobPosition.y
      };
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Sets the dimensions and position values from the current operation options
     * @private
     */

  }, {
    key: '_setStylesFromOptions',
    value: function _setStylesFromOptions() {
      var editor = this.context.editor;

      var outputDimensions = editor.getOutputDimensions();

      var start = this._operation.getStart().clone().multiply(outputDimensions);
      var end = this._operation.getEnd().clone().multiply(outputDimensions);
      var size = this._operation.getSize() * outputDimensions.min();

      var dist = end.clone().subtract(start);
      var middle = start.clone().add(dist.clone().divide(2));

      var areaSize = new _globals.Vector2(outputDimensions.len() * 2, size);

      var totalDist = dist.len();
      var factor = dist.clone().divide(totalDist).divide(2);

      this.setState({
        areaDimensions: areaSize,
        areaPosition: middle.clone(),
        knobPosition: middle.clone().add(-size * factor.y, size * factor.x)
      });
    }

    /**
     * Returns the container style
     * @return {Object}
     * @private
     */

  }, {
    key: '_getContainerStyle',
    value: function _getContainerStyle() {
      var _context$editor$getSD = this.context.editor.getSDK().getSprite().getBounds(),
          x = _context$editor$getSD.x,
          y = _context$editor$getSD.y,
          width = _context$editor$getSD.width,
          height = _context$editor$getSD.height;

      return {
        left: x,
        top: y,
        width: width,
        height: height
      };
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'b:canvasControls e:container m:full', ref: 'container', style: this._getContainerStyle() },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$b:linearFocusCanvasControls' },
          _globals.ReactBEM.createElement(
            _draggableComponent2.default,
            {
              onStart: this._onCenterDragStart,
              onDrag: this._onCenterDrag },
            _globals.ReactBEM.createElement('div', { bem: 'e:area', style: this._getAreaStyle() })
          ),
          _globals.ReactBEM.createElement(
            _draggableComponent2.default,
            {
              onStart: this._onKnobDragStart,
              onDrag: this._onKnobDrag },
            _globals.ReactBEM.createElement('div', { bem: 'e:knob $b:knob', style: this._getKnobStyle() })
          )
        )
      );
    }
  }]);

  return LinearFocusCanvasControlsComponent;
}(_canvasControlsComponent2.default);

exports.default = LinearFocusCanvasControlsComponent;


LinearFocusCanvasControlsComponent.contextTypes = _canvasControlsComponent2.default.contextTypes;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _draggableComponent = __webpack_require__(5);

var _draggableComponent2 = _interopRequireDefault(_draggableComponent);

var _canvasControlsComponent = __webpack_require__(10);

var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var RadialFocusCanvasControlsComponent = function (_CanvasControlsCompon) {
  _inherits(RadialFocusCanvasControlsComponent, _CanvasControlsCompon);

  function RadialFocusCanvasControlsComponent() {
    var _ref;

    _classCallCheck(this, RadialFocusCanvasControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = RadialFocusCanvasControlsComponent.__proto__ || Object.getPrototypeOf(RadialFocusCanvasControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onCenterDragStart', '_onCenterDrag', '_onKnobDragStart', '_onKnobDrag', '_onOperationUpdated');

    _this.state = {
      areaPosition: new _globals.Vector2(),
      areaDimensions: new _globals.Vector2(),
      knobPosition: new _globals.Vector2()
    };
    _this._knobChangedManually = false;
    _this._operation = _this.getSharedState('operation');

    _this._events = _defineProperty({}, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated);
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called after the canvas has been zoomed in or out
   * @private
   */


  _createClass(RadialFocusCanvasControlsComponent, [{
    key: '_onCanvasZoomDone',
    value: function _onCanvasZoomDone() {
      this._setStylesFromOptions();
    }

    /**
     * Gets called when an operation has been updated
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationUpdated',
    value: function _onOperationUpdated(operation) {
      if (operation !== this.getSharedState('operation')) return;
      this._knobChangedManually = false;
      this._setStylesFromOptions();
    }

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called when the shared state did change
     * @param {Object} newState
     */

  }, {
    key: 'sharedStateDidChange',
    value: function sharedStateDidChange(newState) {
      if (newState.operation) {
        this._operation = newState.operation;
        if (this._operation.constructor.identifier === 'radial-focus') this._setStylesFromOptions();
      }
    }

    /**
     * Gets called when this component has been mounted
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _get(RadialFocusCanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(RadialFocusCanvasControlsComponent.prototype), 'componentDidMount', this).call(this);
      var editor = this.context.editor;

      editor.zoom.set('auto', function () {
        editor.features.disable('zoom', 'drag');
        _this2._setStylesFromOptions();
      });
    }

    // -------------------------------------------------------------------------- CENTER DRAGGING

    /**
     * Gets called when the user stars dragging the center
     * @private
     */

  }, {
    key: '_onCenterDragStart',
    value: function _onCenterDragStart() {
      this._initialPosition = this._operation.getPosition();
      this._initialKnobPosition = this.state.knobPosition.clone();
    }

    /**
     * Gets called while the user drags the center
     * @param {Vector2} offset
     * @private
     */

  }, {
    key: '_onCenterDrag',
    value: function _onCenterDrag(offset) {
      var editor = this.context.editor;


      var outputDimensions = editor.getOutputDimensions();
      var relativeOffset = offset.clone().divide(outputDimensions);
      var newPosition = this._initialPosition.clone().add(relativeOffset);

      var newKnobPosition = this._initialKnobPosition.clone().add(offset);

      this._operation.set({
        position: newPosition
      });

      this.state.knobPosition = newKnobPosition;

      editor.render();
      this._setStylesFromOptions();
    }

    // -------------------------------------------------------------------------- GRADIENT KNOB DRAG

    /**
     * Gets called when the user stars dragging the gradient knob
     * @private
     */

  }, {
    key: '_onKnobDragStart',
    value: function _onKnobDragStart(e) {
      this._knobChangedManually = true;
      this._initialKnobPosition = this.state.knobPosition.clone();
    }

    /**
     * Gets called while the user drags the gradient knob
     * @param {Vector2} offset
     * @private
     */

  }, {
    key: '_onKnobDrag',
    value: function _onKnobDrag(offset) {
      var editor = this.context.editor;

      var outputDimensions = editor.getOutputDimensions();

      var newKnobPosition = this._initialKnobPosition.clone().add(offset).clamp(new _globals.Vector2(0, 0), outputDimensions);

      var position = this._operation.getPosition().clone().multiply(outputDimensions);

      var radius = newKnobPosition.clone().subtract(position).abs().len();
      var gradientRadius = radius / 2;

      this.setState({
        knobPosition: newKnobPosition,
        areaDimensions: new _globals.Vector2(radius * 2, radius * 2)
      });
      this._operation.set({
        radius: radius / outputDimensions.min(),
        gradientRadius: gradientRadius / outputDimensions.min()
      });

      editor.render();
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the CSS styles for the area div
     * @return {Object}
     * @private
     */

  }, {
    key: '_getAreaStyle',
    value: function _getAreaStyle() {
      return {
        width: this.state.areaDimensions.x,
        height: this.state.areaDimensions.y,
        left: this.state.areaPosition.x,
        top: this.state.areaPosition.y,
        marginLeft: this.state.areaDimensions.x * -0.5,
        marginTop: this.state.areaDimensions.y * -0.5
      };
    }

    /**
     * Returns the CSS styles for the knob
     * @return {Object}
     * @private
     */

  }, {
    key: '_getKnobStyle',
    value: function _getKnobStyle() {
      return {
        left: this.state.knobPosition.x,
        top: this.state.knobPosition.y
      };
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Sets the dimensions and position values from the current operation options
     * @private
     */

  }, {
    key: '_setStylesFromOptions',
    value: function _setStylesFromOptions() {
      var editor = this.context.editor;


      var outputDimensions = editor.getOutputDimensions();
      var position = this._operation.getPosition().clone().multiply(outputDimensions);

      var radius = this._operation.getRadius() * outputDimensions.min();
      var diameter = radius * 2;
      var areaSize = new _globals.Vector2(diameter, diameter);

      var newState = {
        areaDimensions: areaSize,
        areaPosition: position
      };

      if (!this._knobChangedManually) {
        newState.knobPosition = position.clone().add(radius, 0);
      }

      this.setState(newState);
    }

    /**
     * Returns the container style
     * @return {Object}
     * @private
     */

  }, {
    key: '_getContainerStyle',
    value: function _getContainerStyle() {
      var editor = this.context.editor;

      var _editor$getSDK$getSpr = editor.getSDK().getSprite().getBounds(),
          x = _editor$getSDK$getSpr.x,
          y = _editor$getSDK$getSpr.y,
          width = _editor$getSDK$getSpr.width,
          height = _editor$getSDK$getSpr.height;

      return {
        left: x,
        top: y,
        width: width,
        height: height
      };
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'b:canvasControls e:container m:full', ref: 'container', style: this._getContainerStyle() },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$b:radialFocusCanvasControls' },
          _globals.ReactBEM.createElement(
            _draggableComponent2.default,
            {
              onStart: this._onCenterDragStart,
              onDrag: this._onCenterDrag },
            _globals.ReactBEM.createElement('div', { bem: 'e:area', style: this._getAreaStyle() })
          ),
          _globals.ReactBEM.createElement(
            _draggableComponent2.default,
            {
              onStart: this._onKnobDragStart,
              onDrag: this._onKnobDrag },
            _globals.ReactBEM.createElement('div', { bem: 'e:knob $b:knob', style: this._getKnobStyle() })
          )
        )
      );
    }
  }]);

  return RadialFocusCanvasControlsComponent;
}(_canvasControlsComponent2.default);

exports.default = RadialFocusCanvasControlsComponent;


RadialFocusCanvasControlsComponent.contextTypes = _canvasControlsComponent2.default.contextTypes;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _controls = __webpack_require__(4);

var _controls2 = _interopRequireDefault(_controls);

var _stickerControlsComponent = __webpack_require__(142);

var _stickerControlsComponent2 = _interopRequireDefault(_stickerControlsComponent);

var _stickerCanvasControlsComponent = __webpack_require__(144);

var _stickerCanvasControlsComponent2 = _interopRequireDefault(_stickerCanvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _SDK$Operations$Sprit = _globals.SDK.Operations.SpriteOperation,
    StickerSprite = _SDK$Operations$Sprit.StickerSprite,
    BrushSprite = _SDK$Operations$Sprit.BrushSprite;

/**
 * The sticker controls
 * @class
 * @extends PhotoEditorSDK.UI.ReactUI.Control
 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
 */

var StickerControls = function (_Controls) {
  _inherits(StickerControls, _Controls);

  function StickerControls() {
    _classCallCheck(this, StickerControls);

    return _possibleConstructorReturn(this, (StickerControls.__proto__ || Object.getPrototypeOf(StickerControls)).apply(this, arguments));
  }

  _createClass(StickerControls, null, [{
    key: 'onExit',

    /**
     * Gets called when the user leaves these controls
     * @this {StickerControlsComponent}
     * @override
     * @ignore
     */
    value: function onExit() {
      var editor = this.context.editor;

      var operation = this.getSharedState('operation');

      if (!this.getSharedState('skipHistory')) {
        editor.history.add(operation, this.getSharedState('initialOptions'), this.getSharedState('operationExistedBefore'));
      }

      editor.zoom.restore();
      editor.features.enable('zoom', 'drag');
      editor.render();
    }

    /**
     * Gets called when the user enters these controls
     * @this {StickerControlsComponent}
     * @param {SharedState} sharedState
     * @override
     * @ignore
     */

  }, {
    key: 'onEnter',
    value: function onEnter(sharedState) {
      var editor = this.context.editor;

      var operationExistedBefore = editor.operations.exists('sprite');
      var operation = editor.operations.getOrCreate('sprite');
      var sprites = operation.getSprites();
      var stickers = operation.getSpritesOfType(StickerSprite);
      var initialOptions = operation.serializeOptions();

      editor.zoom.save();
      editor.zoom.set('auto');
      editor.features.disable('zoom', 'drag');

      this.setSharedState({
        operationExistedBefore: operationExistedBefore, operation: operation, sprites: sprites, stickers: stickers, initialOptions: initialOptions
      });
    }

    /**
     * Checks if there is something at the given position that
     * would cause the UI to switch to this control on click
     * @param  {PhotoEditorSDK.Math.Vector2} position
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {*}
     * @override
     * @ignore
     */

  }, {
    key: 'clickAtPosition',
    value: function clickAtPosition(position, editor) {
      if (!editor.operations.exists('sprite')) return false;

      var operation = editor.operations.getOrCreate('sprite');
      var sprites = operation.getSpritesAtPosition(position, editor.getOutputTextureDimensions()).filter(function (s) {
        return !(s instanceof BrushSprite);
      });

      if (sprites.length && sprites[0] instanceof StickerSprite) {
        return { selectedSprite: sprites[0] };
      } else {
        return false;
      }
    }

    /**
     * Checks if this control is available to the user
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {Boolean}
     * @override
     * @ignore
     */

  }, {
    key: 'isAvailable',
    value: function isAvailable(editor) {
      return editor.isToolAllowed('sticker') && editor.isToolEnabled('sticker');
    }
  }]);

  return StickerControls;
}(_controls2.default);

/**
 * This control's controls component. Used for the lower controls part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */


StickerControls.controlsComponent = _stickerControlsComponent2.default;

/**
 * This control's canvas component. Used for the upper controls part of the editor (on
 * top of the canvas)
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */
StickerControls.canvasControlsComponent = _stickerCanvasControlsComponent2.default;

/**
 * This control's identifier
 * @type {String}
 * @default
 */
StickerControls.identifier = 'sticker';

/**
 * This control's icon path
 * @type {String}
 * @ignore
 */
StickerControls.iconPath = 'controls/overview/sticker.png';

/**
 * The language key that should be used when displaying this filter
 * @type {String}
 * @ignore
 */
StickerControls.languageKey = 'pesdk.sticker.title.name';

/**
 * The default options for this control
 * @type {Object}
 * @property {Object[]} [categories = []]
 * @property {Boolean} [replaceCategories = false]
 * @property {String[]} [availableStickers = null]
 * @property {Boolean} [tooltips = false]
 */
StickerControls.defaultOptions = {
  categories: null,
  replaceCategories: false,
  availableStickers: null,
  tooltips: false,
  hideCategories: false,
  fixedRatio: true,
  snapRotation: 90,
  snapRotationTolerance: 5,
  smoothDownscaling: false

  /**
   * The operations required for this control to work properly
   * @type {Array}
   */
};StickerControls.requiredOperations = ['sprite'];

StickerControls.getPreloadAssets = _controls2.default.getPreloadAssets;

exports.default = StickerControls;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _controlsComponent = __webpack_require__(3);

var _controlsComponent2 = _interopRequireDefault(_controlsComponent);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

var _categoryDropdownComponent = __webpack_require__(45);

var _categoryDropdownComponent2 = _interopRequireDefault(_categoryDropdownComponent);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

var _stickerManager = __webpack_require__(11);

var _stickerManager2 = _interopRequireDefault(_stickerManager);

var _stickerItemComponent = __webpack_require__(143);

var _stickerItemComponent2 = _interopRequireDefault(_stickerItemComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var StickerOverviewControlsComponent = function (_ControlsComponent) {
  _inherits(StickerOverviewControlsComponent, _ControlsComponent);

  function StickerOverviewControlsComponent() {
    var _ref;

    _classCallCheck(this, StickerOverviewControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = StickerOverviewControlsComponent.__proto__ || Object.getPrototypeOf(StickerOverviewControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onStickerMouseLeave', '_renderTooltipCanvas', '_onCategoryChange', '_onBeforeHistoryUndo');
    _this._events = _defineProperty({}, _globals.Constants.EVENTS.HISTORY_BEFORE_UNDO, _this._onBeforeHistoryUndo);

    _this._operation = _this.getSharedState('operation');
    _this._sprites = _this.getSharedState('sprites');
    _this._stickers = _this.getSharedState('stickers');

    _this._initStickerManager();

    _this.state = {
      category: _this._stickerManager.getCategory('all')
    };
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called before a history item is being undone
   * @param  {Object} historyObject
   * @private
   */


  _createClass(StickerOverviewControlsComponent, [{
    key: '_onBeforeHistoryUndo',
    value: function _onBeforeHistoryUndo(historyObject) {
      var operation = historyObject.operation,
          options = historyObject.options;

      if (operation !== this.getSharedState('operation')) return;

      var sprites = options.sprites;

      if (sprites.indexOf(this.getSharedState('selectedSprite')) === -1) {
        // Currently selected sprite is being removed. Leave control without adding history item.
        this.setSharedState({ skipHistory: true }, false);
        this.props.onSwitchControls('home');
      }
    }

    /**
     * Gets called when the user switches the category
     * @param  {Object} category
     * @private
     */

  }, {
    key: '_onCategoryChange',
    value: function _onCategoryChange(category) {
      var _this2 = this;

      this.setState({ category: category }, function () {
        _this2.refs.scrollbar.update();
      });
    }

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called when this component is mounted
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(StickerOverviewControlsComponent.prototype.__proto__ || Object.getPrototypeOf(StickerOverviewControlsComponent.prototype), 'componentDidMount', this).call(this);

      if (this.props.options.stickersJSONPath) {
        this._loadExternalStickers();
      }

      var editor = this.context.editor;

      editor.zoom.set('auto', function () {
        editor.features.disable('zoom', 'drag');
      });
    }

    // -------------------------------------------------------------------------- EXTERNAL STICKER LOADING

    /**
     * Loads the stickers from an external JSON source
     * @private
     */

  }, {
    key: '_loadExternalStickers',
    value: function _loadExternalStickers() {
      var _this3 = this;

      // Display loading modal after 100ms
      var loadingModal = null;
      var loadTimeout = setTimeout(function () {
        loadingModal = _modalManager2.default.instance.displayLoading(_this3._t('pesdk.common.text.loading'));
      }, 100);

      // Called when loading is done. Cancels the loading timeout
      // or closes the loadingModal in case it has been opened
      var doneLoading = function doneLoading() {
        if (loadTimeout) {
          clearTimeout(loadTimeout);
          loadTimeout = null;
        }
        if (loadingModal) loadingModal.close();
        _this3._jsonLoaded = true;
      };

      this._stickerManager.loadExternal(this.props.options.stickersJSONPath).then(function (result) {
        doneLoading();
        _this3.forceUpdate(function () {
          _this3.refs.scrollbar.update();
        });
      }).catch(function (e) {
        doneLoading();
        var errorModal = _modalManager2.default.instance.displayError(_this3._t('pesdk.sticker.title.loadingStickersFailed'), e.message);
        errorModal.on('close', function () {
          _this3.props.onBack();
        });
      });
    }

    // -------------------------------------------------------------------------- STICKER RENDERING

    /**
     * Renders the sticker on the tooltip canvas
     * @private
     */

  }, {
    key: '_renderTooltipCanvas',
    value: function _renderTooltipCanvas() {
      var _this4 = this;

      var hoveredSticker = this.state.hoveredSticker;

      var image = new window.Image();
      var mediaBase = hoveredSticker.images.mediaBase;

      image.addEventListener('load', function () {
        if (!_this4.state.tooltipVisible || _this4.state.hoveredSticker !== hoveredSticker) {
          return;
        }

        if (typeof mediaBase.width !== 'undefined' && typeof mediaBase.height !== 'undefined') {
          image.width = mediaBase.width;
          image.height = mediaBase.height;
        }

        var canvas = _this4.refs.tooltipCanvas;
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;

        var context = canvas.getContext('2d');
        var scale = Math.min(canvas.width / image.width, canvas.height / image.height);
        var drawSize = new _globals.Vector2(image.width, image.height).multiply(scale);
        var drawPosition = new _globals.Vector2(canvas.width, canvas.height).divide(2).subtract(drawSize.clone().divide(2));

        context.drawImage(image, 0, 0, image.width, image.height, drawPosition.x, drawPosition.y, drawSize.x, drawSize.y);
      });

      var resolvedStickerPath = this._getAssetPath(_stickerManager2.default.getURLForSticker(hoveredSticker, 'base'));
      image.crossOrigin = this.context.editor.getCrossOrigin();
      image.src = resolvedStickerPath;
    }

    // -------------------------------------------------------------------------- STICKERS

    /**
     * Initializes the sticker manager
     * @private
     */

  }, {
    key: '_initStickerManager',
    value: function _initStickerManager() {
      this._stickerManager = new _stickerManager2.default(this.context.ui, this.props.options);
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user clicks the back button
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onBackClick',
    value: function _onBackClick(e) {
      this._backButtonClicked = true;
      this.props.onSwitchControls('home');
    }

    /**
     * Gets called when a sticker has been clicked
     * @param  {Object} sticker
     * @private
     */

  }, {
    key: '_onStickerClick',
    value: function _onStickerClick(sticker) {
      var _this5 = this;

      var mediaBase = sticker.images.mediaBase;

      var url = _stickerManager2.default.getURLForSticker(sticker, 'base');
      var resolvedStickerPath = this._getAssetPath(url);
      var image = new window.Image();

      var loadingModal = void 0;
      var loadTimeout = setTimeout(function () {
        loadingModal = _modalManager2.default.instance.displayLoading(_this5._t('pesdk.common.text.loading'));
      }, 100);

      image.addEventListener('load', function () {
        if (loadingModal) loadingModal.close();
        if (loadTimeout) {
          clearTimeout(loadTimeout);
          loadTimeout = null;
        }

        if (typeof mediaBase.width !== 'undefined' && typeof mediaBase.height !== 'undefined') {
          image.width = mediaBase.width;
          image.height = mediaBase.height;
        }

        var editor = _this5.context.editor;


        var scale = _this5._calculateInitialStickerScale(sticker, image);
        var sprite = _this5._operation.createSticker({
          identifier: sticker.identifier,
          image: image,
          position: new _globals.Vector2(0.5, 0.5),
          dimensions: new _globals.Vector2(image.width, image.height).multiply(scale),
          rotation: 0,
          smoothDownscaling: _this5.props.options.smoothDownscaling
        });
        _this5._operation.addSprite(sprite);
        _this5._stickers.push(sprite);

        editor.render(function () {
          // Broadcast new state
          _this5.setSharedState({
            selectedSprite: sprite,
            sprites: _this5._sprites,
            stickers: _this5._stickers
          });
        });
      });

      image.addEventListener('error', function () {
        if (loadingModal) loadingModal.close();
        if (loadTimeout) {
          clearTimeout(loadTimeout);
          loadTimeout = null;
        }

        _modalManager2.default.instance.displayError(_this5._t('pesdk.common.title.imageLoadFail'), _this5._t('pesdk.common.text.imageLoadFail', { path: image.src }));
      });

      image.crossOrigin = this.context.editor.getCrossOrigin();
      image.src = resolvedStickerPath;
    }

    /**
     * Calculates the initial sticker scale
     * @param  {Object} sticker
     * @param  {Image} image
     * @return {Number}
     * @private
     */

  }, {
    key: '_calculateInitialStickerScale',
    value: function _calculateInitialStickerScale(sticker, image) {
      var operation = this.getSharedState('operation');
      var inputDimensions = operation.getInputDimensions(false);
      var imageDimensions = new _globals.Vector2(image.width, image.height);

      var stickerDimensions = _globals.SDKUtils.resizeVectorToFit(imageDimensions, inputDimensions.clone().multiply(0.5));
      return stickerDimensions.x / imageDimensions.x;
    }

    /**
     * Gets called when the user starts hovering a sticker
     * @param  {String} stickerPath
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onStickerMouseEnter',
    value: function _onStickerMouseEnter(stickerPath, e) {
      var _this6 = this;

      this.setState({
        tooltipVisible: true,
        hoveredSticker: stickerPath,
        hoveredStickerElement: e.currentTarget
      }, function () {
        _this6._renderTooltipCanvas();
        _this6._updateTooltipPosition();
      });
    }

    /**
     * Updates the tooltip position to match the currently hovered
     * sticker's position
     * @private
     */

  }, {
    key: '_updateTooltipPosition',
    value: function _updateTooltipPosition() {
      var el = this.state.hoveredStickerElement;
      var parent = this.refs.root;
      var boundingRect = el.getBoundingClientRect();
      var parentBoundingRect = parent.getBoundingClientRect();

      this.setState({
        tooltipPosition: boundingRect.left - parentBoundingRect.left
      });
    }

    /**
     * Gets called when the user does no longer hover a sticker
     * @private
     */

  }, {
    key: '_onStickerMouseLeave',
    value: function _onStickerMouseLeave() {
      this.setState({
        tooltipVisible: false,
        hoveredSticker: null
      });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the list items for this control
     * @return {Array.<ReactBEM.Element>}
     * @private
     */

  }, {
    key: '_renderListItems',
    value: function _renderListItems() {
      var _this7 = this;

      var _props$options = this.props.options,
          stickersJSONPath = _props$options.stickersJSONPath,
          replaceCategories = _props$options.replaceCategories;

      if (stickersJSONPath && replaceCategories && !this._jsonLoaded) {
        // If all categories are replaced by the JSON anyways, we don't need to render
        // anything before receiving the JSON data
        return;
      }

      var stickers = this._stickerManager.getStickersForCategory(this.state.category.identifier);
      return stickers.map(function (sticker, i) {
        var options = _this7.props.options;


        var itemEvents = options.tooltips ? {
          onMouseEnter: _this7._onStickerMouseEnter.bind(_this7, sticker),
          onMouseLeave: _this7._onStickerMouseLeave
        } : null;

        return _globals.ReactBEM.createElement(_stickerItemComponent2.default, _extends({
          sticker: sticker,
          onClick: _this7._onStickerClick.bind(_this7, sticker)
        }, itemEvents));
      });
    }

    /**
     * Renders the tooltip (if present)
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderTooltip',
    value: function _renderTooltip() {
      var tooltipVisible = this.props.options.tooltips && this.state.tooltipVisible;

      var style = {
        left: this.state.tooltipPosition
      };

      return tooltipVisible ? _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:empty' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$b:stickersControls $e:tooltip',
            style: style },
          _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'tooltipCanvas' })
        )
      ) : null;
    }

    /**
     * Renders the category dropdown (if present)
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderCategoryDropdown',
    value: function _renderCategoryDropdown() {
      var _this8 = this;

      var _props$options2 = this.props.options,
          stickersJSONPath = _props$options2.stickersJSONPath,
          replaceCategories = _props$options2.replaceCategories;

      if (stickersJSONPath && replaceCategories && !this._jsonLoaded) {
        // If all categories are replaced by the JSON anyways, we don't need to render
        // anything before receiving the JSON data
        return;
      }

      var categories = this._stickerManager.getCategories(true);
      var categoryDropdownVisible = !this.props.options.hideCategories && categories.length > 1;
      if (!categoryDropdownVisible) {
        return null;
      }

      var categoryItems = categories.map(function (c) {
        return {
          identifier: c.identifier,
          item: c,
          label: _this8._t('pesdk.sticker.asset.' + c.identifier) || c.defaultName,
          icon: _this8._getAssetPath('controls/stickers/categories/' + c.identifier + '.png', true)
        };
      });
      var currentCategory = this.state.category;

      var selectedCategoryItem = {
        identifier: currentCategory.identifier,
        item: currentCategory,
        label: this._t('pesdk.sticker.asset.' + currentCategory.identifier) || currentCategory.defaultName,
        icon: this._getAssetPath('controls/stickers/categories/' + currentCategory.identifier + '.png', true)
      };

      return _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:categoryDropdown' },
        _globals.ReactBEM.createElement(_categoryDropdownComponent2.default, {
          items: categoryItems,
          selectedItem: selectedCategoryItem,
          onChange: this._onCategoryChange })
      );
    }

    /**
     * Renders the controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderControls',
    value: function renderControls() {
      var listItems = this._renderListItems();
      var tooltip = this._renderTooltip();
      var categoryDropdown = this._renderCategoryDropdown();

      return [tooltip, categoryDropdown, _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:list' },
        _globals.ReactBEM.createElement(
          _scrollbarComponent2.default,
          { ref: 'scrollbar' },
          _globals.ReactBEM.createElement(
            'ul',
            { bem: '$e:list' },
            listItems
          )
        )
      )];
    }
  }]);

  return StickerOverviewControlsComponent;
}(_controlsComponent2.default);

exports.default = StickerOverviewControlsComponent;


StickerOverviewControlsComponent.contextTypes = _controlsComponent2.default.contextTypes;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _stickerManager = __webpack_require__(11);

var _stickerManager2 = _interopRequireDefault(_stickerManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var StickerOverviewControlsComponent = function (_BaseComponent) {
  _inherits(StickerOverviewControlsComponent, _BaseComponent);

  function StickerOverviewControlsComponent() {
    var _ref;

    _classCallCheck(this, StickerOverviewControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = StickerOverviewControlsComponent.__proto__ || Object.getPrototypeOf(StickerOverviewControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this.state = {
      sticker: _this.props.sticker
    };
    return _this;
  }

  /**
   * Gets called when this component has been mounted
   */


  _createClass(StickerOverviewControlsComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._renderSticker();
    }

    /**
     * Gets called when this component is about to receive new properties
     * @param  {Object} nextProps
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.sticker !== nextProps.sticker) {
        this.setState({ sticker: nextProps.sticker }, function () {
          _this2._renderSticker();
        });
      }
    }

    /**
     * Renders the sticker onto the canvas
     * @private
     */

  }, {
    key: '_renderSticker',
    value: function _renderSticker() {
      var editor = this.context.editor;

      var sdk = editor.getSDK();

      var sticker = this.props.sticker;
      var mediaThumb = sticker.images.mediaThumb;

      var url = _stickerManager2.default.getURLForSticker(sticker, 'thumb');
      var resolvedStickerPath = this._getAssetPath(url);
      var canvas = this.refs['canvas-' + sticker.name];

      var pixelRatio = sdk.getPixelRatio();
      canvas.width = canvas.offsetWidth * pixelRatio;
      canvas.height = canvas.offsetHeight * pixelRatio;

      canvas.style.width = canvas.offsetWidth + 'px';
      canvas.style.height = canvas.offsetHeight + 'px';

      var context = canvas.getContext('2d');
      var image = new window.Image();
      image.addEventListener('load', function () {
        if (typeof mediaThumb.width !== 'undefined' && typeof mediaThumb.height !== 'undefined' && !_globals.Utils.Browser.getIEVersion()) {
          image.width = mediaThumb.width;
          image.height = mediaThumb.height;
        }

        var scale = Math.min(canvas.width / image.width, canvas.height / image.height);
        var drawSize = new _globals.Vector2(image.width, image.height).multiply(scale);
        var drawPosition = new _globals.Vector2(canvas.width, canvas.height).divide(2).subtract(drawSize.clone().divide(2));

        context.drawImage(image, 0, 0, image.width, image.height, drawPosition.x, drawPosition.y, drawSize.x, drawSize.y);
      });
      image.crossOrigin = this.context.editor.getCrossOrigin();
      image.src = resolvedStickerPath;
    }

    /**
     * Renders this element
     * @return {ReactBEM.element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'li',
        {
          bem: '$b:stickersControls $e:item',
          key: this.props.sticker.name,
          onClick: this.props.onClick,
          onMouseEnter: this.props.onMouseEnter,
          onMouseLeave: this.props.onMouseLeave },
        _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'canvas-' + this.props.sticker.name })
      );
    }
  }]);

  return StickerOverviewControlsComponent;
}(_globals.BaseComponent);

exports.default = StickerOverviewControlsComponent;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _spritesCanvasControlsComponent = __webpack_require__(14);

var _spritesCanvasControlsComponent2 = _interopRequireDefault(_spritesCanvasControlsComponent);

var _stickerControlsOverlayComponent = __webpack_require__(148);

var _stickerControlsOverlayComponent2 = _interopRequireDefault(_stickerControlsOverlayComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */


var StickerCanvasControlsComponent = function (_SpritesCanvasControl) {
  _inherits(StickerCanvasControlsComponent, _SpritesCanvasControl);

  function StickerCanvasControlsComponent() {
    _classCallCheck(this, StickerCanvasControlsComponent);

    return _possibleConstructorReturn(this, (StickerCanvasControlsComponent.__proto__ || Object.getPrototypeOf(StickerCanvasControlsComponent)).apply(this, arguments));
  }

  _createClass(StickerCanvasControlsComponent, [{
    key: '_renderOverlayControls',

    /**
     * This renders controls on top of the sprites
     * @return {ReactBEM.Element}
     * @private
     */
    value: function _renderOverlayControls() {
      if (!this.getSharedState('selectedSprite')) return;

      return _globals.ReactBEM.createElement(_stickerControlsOverlayComponent2.default, {
        onFlip: this._onSpriteFlip,
        onTakeToFront: this._onSpriteTakeToFront,
        onRemove: this._onSpriteRemove });
    }
  }]);

  return StickerCanvasControlsComponent;
}(_spritesCanvasControlsComponent2.default);

exports.default = StickerCanvasControlsComponent;


StickerCanvasControlsComponent.contextTypes = _spritesCanvasControlsComponent2.default.contextTypes;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _draggableComponent = __webpack_require__(5);

var _draggableComponent2 = _interopRequireDefault(_draggableComponent);

var _itemComponent = __webpack_require__(28);

var _itemComponent2 = _interopRequireDefault(_itemComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var TextItemComponent = function (_ItemComponent) {
  _inherits(TextItemComponent, _ItemComponent);

  function TextItemComponent() {
    var _ref;

    _classCallCheck(this, TextItemComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = TextItemComponent.__proto__ || Object.getPrototypeOf(TextItemComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onTextChange', '_onItemDoubleClick', '_onItemTouchStart', '_onItemTouchEnd', '_onResizeKnobDragStart', '_onResizeKnobDrag', '_onResizeKnobDragStop', '_onRotationKnobDragStart', '_onRotationKnobDrag', '_onRotationKnobDragStop', '_onBlur');

    _this.state = {
      editMode: false,
      text: _this.props.sprite.getText()
    };
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when this component will receive new props
   * @param  {Object} nextProps
   */


  _createClass(TextItemComponent, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      _get(TextItemComponent.prototype.__proto__ || Object.getPrototypeOf(TextItemComponent.prototype), 'componentWillReceiveProps', this).call(this, nextProps);
      if (nextProps.sprite !== this.props.sprite) {
        this.refs.textarea.blur();
        this.setState({
          text: nextProps.sprite.getText(),
          editMode: false
        });
      }
    }

    /**
     * Gets called when the user has changed the text
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onTextChange',
    value: function _onTextChange(e) {
      var sprite = this.props.sprite;

      sprite.setText(e.target.value);
      this.setState({ text: e.target.value });
    }

    /**
     * Gets called when the user double clicks the text. Turns the sprite into
     * editing mode.
     * @private
     */

  }, {
    key: '_onItemDoubleClick',
    value: function _onItemDoubleClick() {
      this.enterEditMode();
    }

    /**
     * Enters the edit mode
     */

  }, {
    key: 'enterEditMode',
    value: function enterEditMode() {
      var _this2 = this;

      var sprite = this.props.sprite;
      var editor = this.context.editor;


      sprite.setVisible(false);

      if (!sprite._edited) {
        sprite.setText('');
        this.refs.textarea.value = '';
        sprite._edited = true;
        this.setState({ text: '' });
      }
      this.setState({ editMode: true }, function () {
        _this2.refs.textarea.focus();
        _this2.refs.textarea.select();
      });

      editor.render();
    }

    /**
     *  Leaves edit mode
     */

  }, {
    key: 'leaveEditMode',
    value: function leaveEditMode() {
      var sprite = this.props.sprite;
      var editor = this.context.editor;


      sprite.setVisible(true);
      editor.render();
      this.setState({ editMode: false });
    }

    /**
     * Gets called when the user starts touching the item
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onItemTouchStart',
    value: function _onItemTouchStart(e) {
      this._initialTouchPosition = _globals.Utils.getEventPosition(e);
      this._tapStartAt = (0, _globals.now)();
    }

    /**
     * Gets called when the user stops touching the item
     * @private
     */

  }, {
    key: '_onItemTouchEnd',
    value: function _onItemTouchEnd() {
      // Recognize double tap
      if ((0, _globals.now)() - this._tapStartAt <= 100) {
        // Touch didn't last longer than 100ms => recognized as tap
        if (typeof this._lastTapAt !== 'undefined' && (0, _globals.now)() - this._lastTapAt <= 300) {
          // Last tap was no longer than 300ms ago => recognized as double tap
          this._onItemDoubleClick();
        }
        this._lastTapAt = (0, _globals.now)();
      }
    }

    // -------------------------------------------------------------------------- ROTATION DRAGGING

    /**
     * Gets called when the user starts dragging the resize knob
     * @param  {Vector2} position
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onRotationKnobDragStart',
    value: function _onRotationKnobDragStart(position, e) {
      this._dragging = true;
      this._initialPosition = this._getRotationKnobPosition();

      this.props.onDragStart && this.props.onDragStart();
    }

    /**
     * Gets called while the user rotates the text
     * @param  {Vector2} offset
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onRotationKnobDrag',
    value: function _onRotationKnobDrag(offset, e) {
      var sprite = this.props.sprite;
      var editor = this.context.editor;


      var spritePosition = this._getAbsoluteSpritePosition();
      var newKnobPosition = this._initialPosition.clone().add(offset);

      // Calculate new rotation and scale from new knob position
      var knobDistanceFromCenter = newKnobPosition.clone().subtract(spritePosition);

      var boundingBox = sprite.getDimensions(editor.getSDK(), editor.getOutputDimensions());
      var radians = Math.atan2(knobDistanceFromCenter.y / 2, knobDistanceFromCenter.x / 2) - Math.atan2(boundingBox.y / 2, boundingBox.x / 2);

      sprite.setRotation(radians);
      editor.render();
      this.forceUpdate();
    }

    /**
     * Gets called when the user stops rotating the text
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onRotationKnobDragStop',
    value: function _onRotationKnobDragStop(e) {
      this.props.onDragStop && this.props.onDragStop();
    }

    // -------------------------------------------------------------------------- RESIZE DRAGGING

    /**
     * Gets called when the user starts resizing the text
     * @param  {Vector2} position
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onResizeKnobDragStart',
    value: function _onResizeKnobDragStart(position, e) {
      this._initialPosition = this._getResizeKnobPosition();

      this.props.onDragStart && this.props.onDragStart();
    }

    /**
     * Gets called while the user resizes the text
     * @param  {Vector2} offset
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onResizeKnobDrag',
    value: function _onResizeKnobDrag(offset, e) {
      var sprite = this.props.sprite;

      var textRotation = sprite.getRotation();

      var editor = this.context.editor;

      var outputDimensions = editor.getOutputDimensions();

      var cos = Math.cos(textRotation);
      var sin = Math.sin(textRotation);

      var newKnobPosition = this._initialPosition.clone().add(offset);
      var position = this._getAbsoluteSpritePosition();
      var distanceToPosition = newKnobPosition.clone().subtract(position);

      var newMaxWidth = Math.max((distanceToPosition.x * cos + distanceToPosition.y * sin) / outputDimensions.x * 2, 0.1);
      sprite.setMaxWidth(newMaxWidth);
      editor.render();
    }

    /**
     * Gets called when the user stops resizing the text
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onResizeKnobDragStop',
    value: function _onResizeKnobDragStop(e) {
      this.props.onDragStop && this.props.onDragStop();
    }

    /**
     * Get called when the textarea loses focus
     * @private
     */

  }, {
    key: '_onBlur',
    value: function _onBlur() {
      this.leaveEditMode();
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the style object for the rotation knob
     * @return {Object}
     * @private
     */

  }, {
    key: '_getRotationKnobStyle',
    value: function _getRotationKnobStyle() {
      var position = this._getRotationKnobPosition();
      return {
        left: position.x,
        top: position.y
      };
    }

    /**
     * Returns the style object for the resize knob
     * @return {Object}
     * @private
     */

  }, {
    key: '_getResizeKnobStyle',
    value: function _getResizeKnobStyle() {
      var position = this._getResizeKnobPosition();
      return {
        left: position.x,
        top: position.y
      };
    }

    /**
     * Returns the style object for the given text object
     * @return {Object}
     * @private
     */

  }, {
    key: '_getTextStyle',
    value: function _getTextStyle() {
      var editor = this.context.editor;
      var sprite = this.props.sprite;

      var sdk = editor.getSDK();
      var outputDimensions = editor.getOutputDimensions();
      var style = sprite.getDOMStyle(sdk, outputDimensions);

      var spritePosition = this._getAbsoluteSpritePosition();
      var boundingBox = sprite.getDimensions(sdk, outputDimensions);
      style.height = Math.min(boundingBox.y, outputDimensions.y - spritePosition.y);
      if (!this.state.editMode) {
        style.display = 'none';
      }
      return style;
    }

    /**
     * Returns the style object for the item container
     * @return {Object}
     * @private
     */

  }, {
    key: '_getItemContainerStyle',
    value: function _getItemContainerStyle() {
      var editor = this.context.editor;
      var sprite = this.props.sprite;


      var outputDimensions = editor.getOutputDimensions();
      var boundingBox = sprite.getDimensions(editor.getSDK(), outputDimensions);

      var position = sprite.getPosition().clone().multiply(outputDimensions);

      var degrees = sprite.getRotation() * 180 / Math.PI;
      var transform = 'rotateZ(' + degrees.toFixed(2) + 'deg)';
      var transformOrigin = '50% 50%';

      var width = boundingBox.x;
      var height = boundingBox.y;

      return {
        width: width,
        height: height,
        left: position.x - width * 0.5,
        top: position.y - height * 0.5,
        marginLeft: 0,
        marginTop: 0,
        transform: transform,
        MozTransform: transform,
        msTransform: transform,
        WebkitTransform: transform,
        transformOrigin: transformOrigin,
        MozTransformOrigin: transformOrigin,
        msTransformOrigin: transformOrigin,
        WebkitTransformOrigin: transformOrigin
      };
    }

    // -------------------------------------------------------------------------- CALCULATIONS

    /**
     * Returns the position of the rotation knob
     * @return {Vector2}
     * @private
     */

  }, {
    key: '_getRotationKnobPosition',
    value: function _getRotationKnobPosition() {
      var sprite = this.props.sprite;
      var editor = this.context.editor;


      var sin = Math.sin(sprite.getRotation());
      var cos = Math.cos(sprite.getRotation());

      var outputDimensions = editor.getOutputDimensions();
      var boundingBox = sprite.getDimensions(editor.getSDK(), outputDimensions);
      var halfDimensions = boundingBox.clone().divide(2);

      var position = sprite.getPosition().clone().multiply(outputDimensions).add(halfDimensions.x * cos - halfDimensions.y * sin, halfDimensions.x * sin + halfDimensions.y * cos);
      return position;
    }

    /**
     * Returns the position of the resize knob
     * @return {Vector2}
     * @private
     */

  }, {
    key: '_getResizeKnobPosition',
    value: function _getResizeKnobPosition() {
      var sprite = this.props.sprite;
      var editor = this.context.editor;


      var sin = Math.sin(sprite.getRotation());
      var cos = Math.cos(sprite.getRotation());

      var outputDimensions = editor.getOutputDimensions();
      var boundingBox = sprite.getDimensions(editor.getSDK(), outputDimensions);
      var halfDimensions = boundingBox.clone().divide(2);
      var position = sprite.getPosition().clone().multiply(outputDimensions).add(halfDimensions.x * cos + halfDimensions.y * sin, halfDimensions.x * sin - halfDimensions.y * cos);
      return position;
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the knobs for this item
     * @return {Array.<ReactBEM.Element>}
     * @private
     */

  }, {
    key: '_renderKnobs',
    value: function _renderKnobs() {
      var knobs = [];
      if (this.props.selected && !this.state.editMode) {
        knobs = [_globals.ReactBEM.createElement(
          _draggableComponent2.default,
          {
            onStart: this._onRotationKnobDragStart,
            onDrag: this._onRotationKnobDrag,
            onStop: this._onRotationKnobDragStop },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:knob m:rotate $b:knob', style: this._getRotationKnobStyle() },
            _globals.ReactBEM.createElement('img', { bem: 'e:icon m:larger', src: this._getAssetPath('controls/knobs/rotate.png', true) })
          )
        ), _globals.ReactBEM.createElement(
          _draggableComponent2.default,
          {
            onStart: this._onResizeKnobDragStart,
            onDrag: this._onResizeKnobDrag,
            onStop: this._onResizeKnobDragStop },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:knob m:resize $b:knob', style: this._getResizeKnobStyle() },
            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/resize-diagonal-up.png', true) })
          )
        )];
      }
      return knobs;
    }

    /**
     * Renders the draggable item
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderItem',
    value: function _renderItem() {
      var itemContainerStyle = this._getItemContainerStyle();
      var textArea = _globals.ReactBEM.createElement('textarea', {
        bem: 'e:content',
        ref: 'textarea',
        style: this._getTextStyle(),
        value: this.state.text,
        disabled: !this.state.editMode,
        onBlur: this._onBlur,
        onChange: this._onTextChange });

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'e:text' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:container', style: itemContainerStyle },
          textArea
        )
      );
    }

    /**
     * Renders the overlay that appears when the sprite is selected
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderSelectedOverlay',
    value: function _renderSelectedOverlay() {
      var selectedOverlayClassNames = [];
      if (this.props.selected) {
        selectedOverlayClassNames.push('is-selected');
      }
      if (this.state.editMode) {
        selectedOverlayClassNames.push('is-disabled');
      }
      selectedOverlayClassNames = selectedOverlayClassNames.join(' ');
      var overlayStyle = this._getItemContainerStyle();

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'e:text' },
        _globals.ReactBEM.createElement(
          _draggableComponent2.default,
          {
            onStart: this._onItemDragStart,
            onStop: this._onItemDragStop,
            onDrag: this._onItemDrag,
            disabled: !this.props.selected || this.props.selected && this.state.editMode },
          _globals.ReactBEM.createElement('div', { bem: 'e:selectedOverlay',
            onDoubleClick: this._onItemDoubleClick,
            onTouchStart: this._onItemTouchStart,
            onTouchEnd: this._onItemTouchEnd,
            style: overlayStyle,
            className: selectedOverlayClassNames })
        )
      );
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'b:spritesCanvasControls' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:item e:container' },
          this._renderItem(),
          this._renderSelectedOverlay(),
          this._renderKnobs()
        )
      );
    }
  }]);

  return TextItemComponent;
}(_itemComponent2.default);

exports.default = TextItemComponent;


TextItemComponent.contextTypes = _itemComponent2.default.contextTypes;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _draggableComponent = __webpack_require__(5);

var _draggableComponent2 = _interopRequireDefault(_draggableComponent);

var _itemComponent = __webpack_require__(28);

var _itemComponent2 = _interopRequireDefault(_itemComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var StickerItemComponent = function (_ItemComponent) {
  _inherits(StickerItemComponent, _ItemComponent);

  function StickerItemComponent() {
    var _ref;

    _classCallCheck(this, StickerItemComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = StickerItemComponent.__proto__ || Object.getPrototypeOf(StickerItemComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onRotateKnobDragStart', '_onRotateKnobDrag', '_onRotateKnobDragStop');
    _this._id = _globals.SDKUtils.getUUID();
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the user starts dragging a knob
   * @param  {String} side
   * @param  {Vector2} position
   * @param  {Event} e
   * @private
   */


  _createClass(StickerItemComponent, [{
    key: '_onKnobDragStart',
    value: function _onKnobDragStart(side, position, e) {
      var sprite = this.props.sprite;

      switch (side) {
        case 'bottom':
          this._initialPosition = this._getBottomDragKnobPosition();
          break;
        case 'top':
          this._initialPosition = this._getTopDragKnobPosition();
          break;
      }

      this._initialDimensions = sprite.getDimensions().clone();

      this.props.onDragStart && this.props.onDragStart();
    }

    /**
     * Gets called while the user drags a sticker
     * @param  {String} side
     * @param  {Vector2} offset
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onKnobDrag',
    value: function _onKnobDrag(side, offset, e) {
      var sprite = this.props.sprite;
      var editor = this.context.editor;


      var stickerPosition = this._getAbsoluteSpritePosition();
      var newKnobPosition = this._initialPosition.clone().add(offset);

      // Calculate new rotation and dimensions from new knob position
      var knobDistanceFromCenter = newKnobPosition.clone().subtract(stickerPosition);

      var initialKnobDistanceFromCenter = this._initialPosition.clone().subtract(stickerPosition);

      if (this.props.options.fixedRatio) {
        var halfDimensions = this._getStickerDimensions().divide(2).abs();

        var initialDistanceFromCenter = this._initialPosition.clone().subtract(stickerPosition);

        var radians = void 0;

        switch (side) {
          case 'bottom':
            radians = Math.atan2(knobDistanceFromCenter.y, knobDistanceFromCenter.x) - Math.atan2(halfDimensions.y, halfDimensions.x);
            break;
          case 'top':
            radians = Math.atan2(knobDistanceFromCenter.y, knobDistanceFromCenter.x) - Math.atan2(-halfDimensions.y, -halfDimensions.x);
            break;
        }

        var newDimensions = this._initialDimensions.clone().multiply(knobDistanceFromCenter.len() / initialDistanceFromCenter.len());

        var _props$options = this.props.options,
            snapRotation = _props$options.snapRotation,
            snapRotationTolerance = _props$options.snapRotationTolerance;

        var degrees = Math.round(radians * 180 / Math.PI);
        var nextSnap = Math.round(degrees / snapRotation) * snapRotation;
        var remainder = degrees - nextSnap;
        if (Math.abs(remainder) < snapRotationTolerance) {
          radians = nextSnap * Math.PI / 180;
        }

        sprite.set({
          dimensions: newDimensions,
          rotation: radians
        });
      } else {
        var zoom = this.context.editor.zoom.get();
        var rotation = sprite.getRotation();
        var cos = Math.cos(rotation * -1);
        var sin = Math.sin(rotation * -1);

        var localDistanceToCenter = new _globals.Vector2(knobDistanceFromCenter.x * cos - knobDistanceFromCenter.y * sin, knobDistanceFromCenter.x * sin + knobDistanceFromCenter.y * cos);

        var previousLocalDistanceToCenter = new _globals.Vector2(initialKnobDistanceFromCenter.x * cos - initialKnobDistanceFromCenter.y * sin, initialKnobDistanceFromCenter.x * sin + initialKnobDistanceFromCenter.y * cos);

        var distanceToCenterDiff = void 0;

        switch (side) {
          case 'bottom':
            distanceToCenterDiff = localDistanceToCenter.clone().subtract(previousLocalDistanceToCenter);
            break;
          case 'top':
            distanceToCenterDiff = previousLocalDistanceToCenter.clone().subtract(localDistanceToCenter);
            break;
        }

        var _newDimensions = this._initialDimensions.clone().add(distanceToCenterDiff.clone().divide(zoom).multiply(2));

        sprite.set({
          dimensions: _newDimensions
        });
      }
      editor.render();
    }

    /**
     * Gets called when the user stops dragging a knob
     * @private
     */

  }, {
    key: '_onKnobDragStop',
    value: function _onKnobDragStop() {
      this.props.onDragStop && this.props.onDragStop();
    }

    /**
     * Gets called when the user starts dragging the rotate knob
     * @param  {Vector2} position
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onRotateKnobDragStart',
    value: function _onRotateKnobDragStart(position, e) {
      this._initialPosition = this._getRotateKnobPosition();
      this.props.onDragStart && this.props.onDragStart();
    }

    /**
     * Gets called when the user stops dragging the rotate knob
     * @private
     */

  }, {
    key: '_onRotateKnobDragStop',
    value: function _onRotateKnobDragStop() {
      this.props.onDragStop && this.props.onDragStop();
    }

    /**
     * Gets called while the user drags a sticker
     * @param  {Vector2} offset
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onRotateKnobDrag',
    value: function _onRotateKnobDrag(offset, e) {
      var sprite = this.props.sprite;
      var editor = this.context.editor;

      var stickerPosition = this._getAbsoluteSpritePosition();
      var newKnobPosition = this._initialPosition.clone().add(offset);

      var halfDimensions = this._getStickerDimensions().divide(2);

      // Calculate new rotation and dimensions from new knob position
      var knobDistanceFromCenter = newKnobPosition.clone().subtract(stickerPosition);

      var radians = void 0;
      radians = Math.atan2(knobDistanceFromCenter.y, knobDistanceFromCenter.x) - Math.atan2(-halfDimensions.y, halfDimensions.x);

      sprite.set({
        rotation: radians
      });

      editor.render();
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the style object for the bottom right drag knob
     * @return {Object}
     * @private
     */

  }, {
    key: '_getBottomDragKnobStyle',
    value: function _getBottomDragKnobStyle() {
      var knobPosition = this._getBottomDragKnobPosition();

      return {
        left: knobPosition.x,
        top: knobPosition.y
      };
    }

    /**
     * Returns the style object for the top right drag knob
     * @return {Object}
     * @private
     */

  }, {
    key: '_getTopDragKnobStyle',
    value: function _getTopDragKnobStyle() {
      var knobPosition = this._getTopDragKnobPosition();

      return {
        left: knobPosition.x,
        top: knobPosition.y
      };
    }

    /**
     * Returns the style object for the rotate knob
     * @return {Object}
     * @private
     */

  }, {
    key: '_getRotateKnobStyle',
    value: function _getRotateKnobStyle() {
      var knobPosition = this._getRotateKnobPosition();

      return {
        left: knobPosition.x,
        top: knobPosition.y
      };
    }

    /**
     * Builds the style object for this sticker
     * @return {Object}
     * @private
     */

  }, {
    key: '_getStickerStyle',
    value: function _getStickerStyle() {
      var sprite = this.props.sprite;


      var processedDimensions = this._getStickerDimensions().abs();
      var spritePosition = this._getAbsoluteSpritePosition().subtract(processedDimensions.clone().divide(2));

      var degrees = sprite.getRotation() * 180 / Math.PI;
      var transform = 'rotate(' + degrees.toFixed(2) + 'deg)';

      var spriteDimensions = sprite.getDimensions();

      var flipVertically = sprite.getFlipVertically();
      if (spriteDimensions.y < 0) flipVertically = !flipVertically;
      if (flipVertically) {
        transform += ' scaleY(-1)';
      }

      var flipHorizontally = sprite.getFlipHorizontally();
      if (spriteDimensions.x < 0) flipHorizontally = !flipHorizontally;
      if (flipHorizontally) {
        transform += ' scaleX(-1)';
      }

      return {
        top: spritePosition.y,
        left: spritePosition.x,
        width: processedDimensions.x,
        height: processedDimensions.y,
        WebkitTransform: transform,
        msTransform: transform,
        MozTransform: transform,
        OTransform: transform
      };
    }

    // -------------------------------------------------------------------------- CALCULATIONS

    /**
     * Calculates the sticker dimensions
     * @param  {Object} sticker
     * @return {Vector2}
     * @private
     */

  }, {
    key: '_getStickerDimensions',
    value: function _getStickerDimensions() {
      var sprite = this.props.sprite;
      var editor = this.context.editor;


      return sprite.getDimensions().clone().multiply(editor.zoom.get());
    }

    /**
     * Calculates the rotate button knob's position
     * @return {PhotoEditorSDK.Math.Vector2}
     * @private
     */

  }, {
    key: '_getRotateKnobPosition',
    value: function _getRotateKnobPosition() {
      var sprite = this.props.sprite;

      var stickerPosition = this._getAbsoluteSpritePosition();
      var stickerRotation = sprite.getRotation();

      // Calculate sin and cos for rotation
      var sin = Math.sin(stickerRotation || 0);
      var cos = Math.cos(stickerRotation || 0);

      // Calculate sticker dimensions
      var halfDimensions = this._getStickerDimensions().divide(2);

      // Calculate knob position
      return stickerPosition.clone().add(halfDimensions.x * cos + halfDimensions.y * sin, halfDimensions.x * sin - halfDimensions.y * cos);
    }

    /**
     * Calculates the drag bottom right knob's position
     * @return {Vector2}
     * @private
     */

  }, {
    key: '_getBottomDragKnobPosition',
    value: function _getBottomDragKnobPosition() {
      var sprite = this.props.sprite;

      var stickerPosition = this._getAbsoluteSpritePosition();
      var stickerRotation = sprite.getRotation();

      // Calculate sin and cos for rotation
      var sin = Math.sin(stickerRotation || 0);
      var cos = Math.cos(stickerRotation || 0);

      // Calculate sticker dimensions
      var halfDimensions = this._getStickerDimensions().divide(2);

      // Calculate knob position
      return stickerPosition.clone().add(halfDimensions.x * cos - halfDimensions.y * sin, halfDimensions.x * sin + halfDimensions.y * cos);
    }

    /**
     * Calculates the drag top right knob's position
     * @return {Vector2}
     * @private
     */

  }, {
    key: '_getTopDragKnobPosition',
    value: function _getTopDragKnobPosition() {
      var sprite = this.props.sprite;

      var stickerPosition = this._getAbsoluteSpritePosition();
      var stickerRotation = sprite.getRotation();

      // Calculate sin and cos for rotation
      var sin = Math.sin(stickerRotation || 0);
      var cos = Math.cos(stickerRotation || 0);

      // Calculate sticker dimensions
      var halfDimensions = this._getStickerDimensions(sprite).divide(2);

      // Calculate knob position
      return stickerPosition.clone().subtract(halfDimensions.x * cos - halfDimensions.y * sin, halfDimensions.x * sin + halfDimensions.y * cos);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the knobs for this item
     * @return {Array.<ReactBEM.Element>}
     * @private
     */

  }, {
    key: '_renderKnobs',
    value: function _renderKnobs() {
      var knobs = [];
      if (this.props.selected) {
        knobs = [_globals.ReactBEM.createElement(
          _draggableComponent2.default,
          {
            onStart: this._onKnobDragStart.bind(this, 'bottom'),
            onStop: this._onKnobDragStop.bind(this, 'bottom'),
            onDrag: this._onKnobDrag.bind(this, 'bottom') },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:knob $b:knob', style: this._getBottomDragKnobStyle() },
            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/resize-diagonal-down.png', true) })
          )
        ), _globals.ReactBEM.createElement(
          _draggableComponent2.default,
          {
            onStart: this._onKnobDragStart.bind(this, 'top'),
            onStop: this._onKnobDragStop.bind(this, 'top'),
            onDrag: this._onKnobDrag.bind(this, 'top') },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:knob $b:knob', style: this._getTopDragKnobStyle() },
            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/resize-diagonal-down.png', true) })
          )
        )];

        if (!this.props.options.fixedRatio) {
          knobs.push(_globals.ReactBEM.createElement(
            _draggableComponent2.default,
            {
              onStart: this._onRotateKnobDragStart,
              onStop: this._onRotateKnobDragStop,
              onDrag: this._onRotateKnobDrag },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:knob $b:knob', style: this._getRotateKnobStyle() },
              _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/rotate.png', true) })
            )
          ));
        }
      }
      return knobs;
    }

    /**
     * Renders the SVG filters
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderSVGFilter',
    value: function _renderSVGFilter() {
      if (this.props.hideContent) return null;
      var sprite = this.props.sprite;

      var adjustments = sprite.getAdjustments();
      var brightness = adjustments.getBrightness();
      var saturation = adjustments.getSaturation();
      var contrast = adjustments.getContrast();

      var filtersSVG = '<filter id=\'pesdk-sticker-' + this._id + '-filter\'>\n        <feComponentTransfer>\n          <feFuncR type=\'linear\' intercept=\'' + brightness + '\' />\n          <feFuncG type=\'linear\' intercept=\'' + brightness + '\' />\n          <feFuncB type=\'linear\' intercept=\'' + brightness + '\' />\n        </feComponentTransfer>\n        <feColorMatrix type=\'saturate\' values=\'' + saturation + '\' />\n        <feComponentTransfer>\n          <feFuncR type=\'linear\' slope=\'' + contrast + '\' intercept=\'' + (-(0.5 * contrast) + 0.5) + '\' />\n          <feFuncG type=\'linear\' slope=\'' + contrast + '\' intercept=\'' + (-(0.5 * contrast) + 0.5) + '\' />\n          <feFuncB type=\'linear\' slope=\'' + contrast + '\' intercept=\'' + (-(0.5 * contrast) + 0.5) + '\' />\n        </feComponentTransfer>\n      </filter>';

      // We added `key: Math.random()` because in Safari, dangerouslySetInnerHTML
      // would not update without that...
      // https://github.com/facebook/react/issues/2863
      return _globals.ReactBEM.createElement(
        'svg',
        { width: '0', height: '0', 'color-interpolation-filters': 'sRGB', is: 'svg' },
        _globals.ReactBEM.createElement('defs', {
          key: Math.random(),
          dangerouslySetInnerHTML: {
            __html: filtersSVG
          }
        })
      );
    }

    /**
     * Renders the overlay that appears when the sprite is selected
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderSelectedOverlay',
    value: function _renderSelectedOverlay() {
      var selectedOverlayClassNames = [];
      if (this.props.selected) {
        selectedOverlayClassNames.push('is-selected');
      }
      selectedOverlayClassNames = selectedOverlayClassNames.join(' ');

      var overlayStyle = this._getStickerStyle();
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'e:text' },
        _globals.ReactBEM.createElement(
          _draggableComponent2.default,
          {
            onStart: this._onItemDragStart,
            onStop: this._onItemDragStop,
            onDrag: this._onItemDrag,
            disabled: !this.props.selected },
          _globals.ReactBEM.createElement('div', { bem: 'e:selectedOverlay',
            onDoubleClick: this._onItemDoubleClick,
            onTouchStart: this._onItemTouchStart,
            onTouchEnd: this._onItemTouchEnd,
            style: overlayStyle,
            className: selectedOverlayClassNames })
        )
      );
    }

    /**
     * Renders the draggable item
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderItem',
    value: function _renderItem() {
      if (this.props.hideContent) return null;

      var sprite = this.props.sprite;

      var stickerStyle = this._getStickerStyle();

      var baseURL = window.location.href.replace(window.location.hash, '');
      var stickerImageStyle = { filter: 'url("' + baseURL + '#pesdk-sticker-' + this._id + '-filter")' };

      var svgStyle = { width: stickerStyle.width, height: stickerStyle.height };
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'e:sticker' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:container', style: stickerStyle },
          _globals.ReactBEM.createElement(
            'svg',
            { width: parseInt(stickerStyle.width), height: parseInt(stickerStyle.height), 'color-interpolation-filters': 'sRGB', is: 'svg', style: svgStyle, preserveAspectRatio: 'none' },
            _globals.ReactBEM.createElement('image', {
              xlinkHref: sprite.getImage().src,
              width: stickerStyle.width,
              height: stickerStyle.height,
              style: stickerImageStyle,
              preserveAspectRatio: 'none'
            })
          )
        )
      );
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'b:spritesCanvasControls' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:item e:container' },
          this._renderSVGFilter(),
          this._renderItem(),
          this._renderSelectedOverlay(),
          this._renderKnobs()
        )
      );
    }
  }]);

  return StickerItemComponent;
}(_itemComponent2.default);

exports.default = StickerItemComponent;


StickerItemComponent.contextTypes = _itemComponent2.default.contextTypes;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _itemComponent = __webpack_require__(28);

var _itemComponent2 = _interopRequireDefault(_itemComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var BrushItemComponent = function (_ItemComponent) {
  _inherits(BrushItemComponent, _ItemComponent);

  function BrushItemComponent() {
    _classCallCheck(this, BrushItemComponent);

    return _possibleConstructorReturn(this, (BrushItemComponent.__proto__ || Object.getPrototypeOf(BrushItemComponent)).apply(this, arguments));
  }

  _createClass(BrushItemComponent, [{
    key: 'componentDidMount',

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called when this component has been mounted
     */
    value: function componentDidMount() {
      _get(BrushItemComponent.prototype.__proto__ || Object.getPrototypeOf(BrushItemComponent.prototype), 'componentDidMount', this).call(this);
      if (this.props.hideContent) return;
      var canvas = this.props.sprite.getCanvas();
      this._appendCanvas(canvas);
    }

    /**
     * Gets called when this component is about to receive new properties
     * @param  {Object} nextProps
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.hideContent) return;
      if (nextProps.sprite !== this.props.sprite) {
        var canvas = this.props.sprite.getCanvas();
        canvas.parentNode.removeChild(canvas);
        var newCanvas = nextProps.sprite.getCanvas();
        this._appendCanvas(newCanvas);
      }
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Checks if this item is currently selected
     * @return {Boolean}
     */

  }, {
    key: '_isSelected',
    value: function _isSelected() {
      return this.getSharedState('brush') === this.props.sprite;
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Appends and styles the given canvas
     * @param  {HTMLCanvasElement} canvas
     * @private
     */

  }, {
    key: '_appendCanvas',
    value: function _appendCanvas(canvas) {
      var editor = this.context.editor;

      var outputDimensions = editor.getOutputDimensions();
      canvas.style.width = outputDimensions.x + 'px';
      canvas.style.height = outputDimensions.y + 'px';
      this.refs.brush.appendChild(canvas);
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      if (this.props.hideContent) return null;

      var brushClassName = this._isSelected() ? 'is-selected' : null;
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'b:spritesCanvasControls' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:item e:container m:full', ref: 'container' },
          _globals.ReactBEM.createElement('div', {
            bem: '$e:brush',
            className: brushClassName,
            ref: 'brush' })
        )
      );
    }
  }]);

  return BrushItemComponent;
}(_itemComponent2.default);

exports.default = BrushItemComponent;


BrushItemComponent.contextTypes = _itemComponent2.default.contextTypes;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var StickerControlsOverlayComponent = function (_BaseComponent) {
  _inherits(StickerControlsOverlayComponent, _BaseComponent);

  function StickerControlsOverlayComponent() {
    _classCallCheck(this, StickerControlsOverlayComponent);

    return _possibleConstructorReturn(this, (StickerControlsOverlayComponent.__proto__ || Object.getPrototypeOf(StickerControlsOverlayComponent)).apply(this, arguments));
  }

  _createClass(StickerControlsOverlayComponent, [{
    key: '_onFlipClick',

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user clicks one of the flip items
     * @param  {String} direction
     * @param  {Event} e
     * @private
     */
    value: function _onFlipClick(direction, e) {
      e.preventDefault();
      e.stopPropagation();

      this.props.onFlip && this.props.onFlip(direction);
    }

    /**
     * Gets called when the user clicks the `take to front` item
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onTakeToFrontClick',
    value: function _onTakeToFrontClick(e) {
      e.preventDefault();
      e.stopPropagation();

      this.props.onTakeToFront && this.props.onTakeToFront();
    }

    /**
     * Gets called when the user clicks the `remove` item
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onRemoveClick',
    value: function _onRemoveClick(e) {
      e.preventDefault();
      e.stopPropagation();

      this.props.onRemove && this.props.onRemove();
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the items of this component
     * @return {Array.<ReactBEM.Element>}
     */

  }, {
    key: '_renderItems',
    value: function _renderItems() {
      return [_globals.ReactBEM.createElement(
        'div',
        { bem: '$e:item', onClick: this._onFlipClick.bind(this, 'h') },
        _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/flip-h.png', true) })
      ), _globals.ReactBEM.createElement(
        'div',
        { bem: '$e:item', onClick: this._onFlipClick.bind(this, 'v') },
        _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/flip-v.png', true) })
      ), _globals.ReactBEM.createElement(
        'div',
        { bem: '$e:item', onClick: this._onTakeToFrontClick.bind(this) },
        _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/take-to-front.png', true) })
      ), _globals.ReactBEM.createElement('div', { bem: '$e:separator' }), _globals.ReactBEM.createElement(
        'div',
        { bem: '$e:item', onClick: this._onRemoveClick.bind(this) },
        _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/remove.png', true) })
      )];
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        {
          bem: '$b:spritesControlsOverlay' },
        this._renderItems()
      );
    }
  }]);

  return StickerControlsOverlayComponent;
}(_globals.BaseComponent);

exports.default = StickerControlsOverlayComponent;


StickerControlsOverlayComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _controls = __webpack_require__(4);

var _controls2 = _interopRequireDefault(_controls);

var _textCanvasControlsComponent = __webpack_require__(150);

var _textCanvasControlsComponent2 = _interopRequireDefault(_textCanvasControlsComponent);

var _textControlsComponent = __webpack_require__(152);

var _textControlsComponent2 = _interopRequireDefault(_textControlsComponent);

var _fontManager = __webpack_require__(15);

var _fontManager2 = _interopRequireDefault(_fontManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _SDK$Operations$Sprit = _globals.SDK.Operations.SpriteOperation,
    TextSprite = _SDK$Operations$Sprit.TextSprite,
    BrushSprite = _SDK$Operations$Sprit.BrushSprite;
/**
 * The text controls
 * @class
 * @extends PhotoEditorSDK.UI.ReactUI.Control
 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
 */

var TextControls = function (_Controls) {
  _inherits(TextControls, _Controls);

  function TextControls() {
    _classCallCheck(this, TextControls);

    return _possibleConstructorReturn(this, (TextControls.__proto__ || Object.getPrototypeOf(TextControls)).apply(this, arguments));
  }

  _createClass(TextControls, [{
    key: 'saveTextSettings',

    /**
     * Saves the current text settings to the global state
     */
    value: function saveTextSettings() {
      var selectedSprite = this.getSharedState('selectedSprite');

      if (!selectedSprite) {
        return;
      }

      this.setGlobalToolState('text', selectedSprite.serializeOptions(['color', 'backgroundColor', 'characterSpacing', 'lineHeight', 'alignment', 'fontIdentifier', 'fontFamily', 'fontWeight', 'fontStyle']));
    }

    /**
     * Gets called when the user leaves these controls
     * @this {TextControlsComponent}
     * @ignore
     */

  }], [{
    key: 'onExit',
    value: function onExit() {
      var editor = this.context.editor;

      var operation = this.getSharedState('operation');

      this.saveTextSettings();

      if (!this.getSharedState('skipHistory')) {
        editor.history.add(operation, this.getSharedState('initialOptions'), this.getSharedState('operationExistedBefore'));
      }
      editor.zoom.restore();
      editor.features.enable('zoom', 'drag');
      editor.render();
    }

    /**
     * Gets called when the user enters these controls
     * @this {StickerControlsComponent}
     * @param {SharedState} sharedState
     * @override
     * @ignore
     */

  }, {
    key: 'onEnter',
    value: function onEnter(sharedState, options) {
      var _context = this.context,
          editor = _context.editor,
          ui = _context.ui;

      var operationExistedBefore = editor.operations.exists('sprite');
      var operation = editor.operations.getOrCreate('sprite');
      var sprites = operation.getSprites();
      var initialOptions = operation.serializeOptions();

      var fontManager = new _fontManager2.default(ui, options);
      var defaultFontVariation = fontManager.getDefaultVariation();

      this.setSharedState({
        operationExistedBefore: operationExistedBefore,
        operation: operation,
        sprites: sprites,
        initialOptions: initialOptions,
        fontManager: fontManager,
        defaultFontVariation: defaultFontVariation,
        fonts: fontManager.getFonts()
      });

      editor.zoom.save();
      editor.render();
    }

    /**
     * Checks if there is something at the given position that
     * would cause the UI to switch to this control on click
     * @param  {PhotoEditorSDK.Math.Vector2} position
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {*}
     * @ignore
     */

  }, {
    key: 'clickAtPosition',
    value: function clickAtPosition(position, editor) {
      if (!editor.operations.exists('sprite')) return false;

      var operation = editor.operations.getOrCreate('sprite');
      var sprites = operation.getSpritesAtPosition(position, editor.getOutputTextureDimensions()).filter(function (s) {
        return !(s instanceof BrushSprite);
      });

      if (sprites.length && sprites[0] instanceof TextSprite) {
        return { selectedSprite: sprites[0] };
      } else {
        return false;
      }
    }

    /**
     * Checks if this control is available to the user
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {Boolean}
     * @ignore
     */

  }, {
    key: 'isAvailable',
    value: function isAvailable(editor) {
      return editor.isToolAllowed('text') && editor.isToolEnabled('text');
    }

    /**
     * Returns the assets that should be preloaded for this control
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {String[]}
     */

  }, {
    key: 'getPreloadAssets',
    value: function getPreloadAssets(editor) {
      return ['controls/text/align_left.png', 'controls/text/align_right.png', 'controls/text/align_center.png', 'controls/text/minus.png', 'controls/text/plus.png'];
    }
  }]);

  return TextControls;
}(_controls2.default);

/**
 * This control's controls component. Used for the lower controls part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */


TextControls.controlsComponent = _textControlsComponent2.default;

/**
 * This control's canvas component. Used for the upper controls part of the editor (on
 * top of the canvas)
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */
TextControls.canvasControlsComponent = _textCanvasControlsComponent2.default;

/**
 * This control's identifier
 * @type {String}
 * @default
 */
TextControls.identifier = 'text';

/**
 * This control's icon path
 * @type {String}
 * @ignore
 */
TextControls.iconPath = 'controls/overview/text.png';

/**
 * The language key that should be used when displaying this filter
 * @type {String}
 * @ignore
 */
TextControls.languageKey = 'pesdk.text.title.name';

/**
 * The default options for this control
 * @type {Object}
 * @property {Object[]} [fonts = []]
 * @property {Boolean} [replaceFonts = false]
 * @property {String[]} [availableVariations = null]
 */
TextControls.defaultOptions = {
  fonts: [],
  replaceFonts: false,
  availableVariations: null

  /**
   * The operations required for this control to work properly
   * @type {Array}
   */
};TextControls.requiredOperations = ['sprite'];

exports.default = TextControls;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _spritesCanvasControlsComponent = __webpack_require__(14);

var _spritesCanvasControlsComponent2 = _interopRequireDefault(_spritesCanvasControlsComponent);

var _textControlsOverlayComponent = __webpack_require__(151);

var _textControlsOverlayComponent2 = _interopRequireDefault(_textControlsOverlayComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */


var TextCanvasControlsComponent = function (_SpritesCanvasControl) {
  _inherits(TextCanvasControlsComponent, _SpritesCanvasControl);

  function TextCanvasControlsComponent() {
    var _ref;

    _classCallCheck(this, TextCanvasControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = TextCanvasControlsComponent.__proto__ || Object.getPrototypeOf(TextCanvasControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onTextEdit');
    return _this;
  }

  // -------------------------------------------------------------------------- EVENTS

  /**
   * Gets called when the selected item is deselected
   * @private
   */


  _createClass(TextCanvasControlsComponent, [{
    key: '_onItemBlur',
    value: function _onItemBlur() {
      var sprite = this.getSharedState('selectedSprite');
      if (sprite && sprite.getText() === '') {
        sprite.setText(this._t('pesdk.text.placeholder.defaultText'));
        sprite._edited = false;
      }
    }

    /**
     * Gets called when the user removes the selected sprite
     * @private
     */

  }, {
    key: '_onSpriteRemove',
    value: function _onSpriteRemove() {
      _get(TextCanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(TextCanvasControlsComponent.prototype), '_onSpriteRemove', this).call(this);
      this.props.onSwitchControls('home');
    }

    /**
     * Gets called when the clicks the edit button
     * @private
     */

  }, {
    key: '_onTextEdit',
    value: function _onTextEdit() {
      var sprite = this.getSharedState('selectedSprite');
      this.refs['sprite-' + sprite.getId()].enterEditMode();
    }

    /**
     * This renders controls on top of the sprites
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderOverlayControls',
    value: function _renderOverlayControls() {
      if (!this.getSharedState('selectedSprite')) return;

      return _globals.ReactBEM.createElement(_textControlsOverlayComponent2.default, {
        onTakeToFront: this._onSpriteTakeToFront,
        onRemove: this._onSpriteRemove,
        onEdit: this._onTextEdit });
    }
  }]);

  return TextCanvasControlsComponent;
}(_spritesCanvasControlsComponent2.default);

exports.default = TextCanvasControlsComponent;


TextCanvasControlsComponent.contextTypes = _spritesCanvasControlsComponent2.default.contextTypes;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var TextControlsOverlayComponent = function (_BaseComponent) {
  _inherits(TextControlsOverlayComponent, _BaseComponent);

  function TextControlsOverlayComponent() {
    _classCallCheck(this, TextControlsOverlayComponent);

    return _possibleConstructorReturn(this, (TextControlsOverlayComponent.__proto__ || Object.getPrototypeOf(TextControlsOverlayComponent)).apply(this, arguments));
  }

  _createClass(TextControlsOverlayComponent, [{
    key: '_onEditClick',

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user clicks the `edit` item
     * @param  {Event} e
     * @private
     */
    value: function _onEditClick(e) {
      e.preventDefault();
      e.stopPropagation();

      this.props.onEdit && this.props.onEdit();
    }

    /**
     * Gets called when the user clicks the `take to front` item
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onTakeToFrontClick',
    value: function _onTakeToFrontClick(e) {
      e.preventDefault();
      e.stopPropagation();

      this.props.onTakeToFront && this.props.onTakeToFront();
    }

    /**
     * Gets called when the user clicks the `remove` item
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onRemoveClick',
    value: function _onRemoveClick(e) {
      e.preventDefault();
      e.stopPropagation();

      this.props.onRemove && this.props.onRemove();
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the items of this component
     * @return {Array.<ReactBEM.Element>}
     */

  }, {
    key: '_renderItems',
    value: function _renderItems() {
      var items = [_globals.ReactBEM.createElement(
        'div',
        { bem: '$e:item', onClick: this._onTakeToFrontClick.bind(this) },
        _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/take-to-front.png', true) })
      )];

      if (_globals.Utils.isTouchDevice()) {
        items = items.concat([_globals.ReactBEM.createElement('div', { bem: '$e:separator' }), _globals.ReactBEM.createElement(
          'div',
          { bem: '$e:item', onClick: this._onEditClick.bind(this) },
          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/edit.png', true) })
        )]);
      }

      items = items.concat([_globals.ReactBEM.createElement('div', { bem: '$e:separator' }), _globals.ReactBEM.createElement(
        'div',
        { bem: '$e:item', onClick: this._onRemoveClick.bind(this) },
        _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/remove.png', true) })
      )]);

      return items;
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        {
          bem: '$b:spritesControlsOverlay' },
        this._renderItems()
      );
    }
  }]);

  return TextControlsOverlayComponent;
}(_globals.BaseComponent);

exports.default = TextControlsOverlayComponent;


TextControlsOverlayComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _controlsComponent = __webpack_require__(3);

var _controlsComponent2 = _interopRequireDefault(_controlsComponent);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

var _colorPickerComponent = __webpack_require__(29);

var _colorPickerComponent2 = _interopRequireDefault(_colorPickerComponent);

var _sliderOverlayComponent = __webpack_require__(6);

var _sliderOverlayComponent2 = _interopRequireDefault(_sliderOverlayComponent);

var _fontPreviewComponent = __webpack_require__(46);

var _fontPreviewComponent2 = _interopRequireDefault(_fontPreviewComponent);

var _fontComponent = __webpack_require__(157);

var _fontComponent2 = _interopRequireDefault(_fontComponent);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ALIGNMENTS = ['left', 'center', 'right'];

var TextControlsComponent = function (_ControlsComponent) {
  _inherits(TextControlsComponent, _ControlsComponent);

  function TextControlsComponent() {
    var _ref;

    _classCallCheck(this, TextControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = TextControlsComponent.__proto__ || Object.getPrototypeOf(TextControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onFontSizeChange', '_onFontChange', '_onAlignmentClick', '_onTakeToFrontClick', '_onForegroundColorChange', '_onBackgroundColorChange', '_onBeforeHistoryUndo');
    _this._events = _defineProperty({}, _globals.Constants.EVENTS.HISTORY_BEFORE_UNDO, _this._onBeforeHistoryUndo);
    _this._operation = _this.getSharedState('operation');
    _this._fontLoader = _this.context.ui.getFontLoader();
    _this._fontLoader.setFonts(_this.getSharedState('fonts'));

    _this.state = { mode: null, loading: true };

    var editor = _this.context.editor;

    editor.render();

    _this._fonts = _this.getSharedState('fonts');
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component has been mounted
   */


  _createClass(TextControlsComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _get(TextControlsComponent.prototype.__proto__ || Object.getPrototypeOf(TextControlsComponent.prototype), 'componentDidMount', this).call(this);

      var editor = this.context.editor;

      editor.zoom.set('auto', function () {
        editor.features.disable('zoom', 'drag');
      });

      var fontsLoaded = function fontsLoaded() {
        _this2._createText();
        _this2.setState({ loading: false });
      };

      if (this._fontLoader.needsToLoad()) {
        this._loadFonts().then(fontsLoaded.bind(this));
      } else {
        fontsLoaded();
      }
    }

    /**
     * Loads the fonts
     * @return {Promise}
     * @private
     */

  }, {
    key: '_loadFonts',
    value: function _loadFonts() {
      var _this3 = this;

      var loadingModal = _modalManager2.default.instance.displayLoading(this._t('pesdk.common.text.loading'));
      return this._fontLoader.load().then(function () {
        loadingModal.close();
      }).catch(function (e) {
        loadingModal.close();
        _modalManager2.default.instance.displayWarning(_this3._t('pesdk.text.title.loadingFontsFailed'), _this3._t('pesdk.text.text.loadingFontsFailed'));
      });
    }

    /**
     * Creates a new text object
     * @private
     */

  }, {
    key: '_createText',
    value: function _createText() {
      var editor = this.context.editor;

      var selectedSprite = this.getSharedState('selectedSprite');
      var operation = this.getSharedState('operation');
      var fontManager = this.getSharedState('fontManager');

      // Check for previously saved text settings in the global state
      var defaultOptions = this.getGlobalToolState('text');

      var defaultFontVariation = defaultOptions ? this.getSharedState('defaultFontVariation') : fontManager.getDefaultVariation();

      var outputDimensions = editor.getOutputDimensions();
      if (!selectedSprite) {
        var sdk = editor.getSDK();
        var renderer = sdk.getRenderer();

        var maxTextureSize = renderer.getMaxTextureSize();
        var text = operation.createText(_extends({
          fontIdentifier: defaultFontVariation.getIdentifier(),
          text: this._t('pesdk.text.placeholder.defaultText'),
          position: new _globals.Vector2(0.5, 0.5),
          pivot: new _globals.Vector2(0.5, 0.5),
          maxWidth: 0.5,
          maxHeight: maxTextureSize ? maxTextureSize / outputDimensions.y : 3,
          fontSize: 0.08,
          fontFamily: defaultFontVariation.getFont().getFontFamily(),
          fontWeight: defaultFontVariation.getFontWeight(),
          fontStyle: defaultFontVariation.getFontStyle(),
          alignment: 'center'
        }, defaultOptions || {}));
        operation.addSprite(text);
        this.setSharedState({ selectedSprite: text });
        editor.render();
      }
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called before a history item is being undone
     * @param  {Object} historyObject
     * @private
     */

  }, {
    key: '_onBeforeHistoryUndo',
    value: function _onBeforeHistoryUndo(historyObject) {
      var operation = historyObject.operation,
          options = historyObject.options;

      if (operation !== this.getSharedState('operation')) return;

      var sprites = options.sprites;

      if (sprites.indexOf(this.getSharedState('selectedSprite')) === -1) {
        // Currently selected sprite is being removed. Leave control without adding history item.
        this.setSharedState({ skipHistory: true }, false);
        this.props.onSwitchControls('home');
      }
    }

    /**
     * Gets called when the user clicks the back button
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onBackClick',
    value: function _onBackClick(e) {
      var editor = this.context.editor;

      this.saveTextSettings();
      editor.render();
      this._backButtonClicked = true;
      this.props.onSwitchControls('home');
    }

    /**
     * Saves the current text settings to the global state
     */

  }, {
    key: 'saveTextSettings',
    value: function saveTextSettings() {
      var selectedSprite = this.getSharedState('selectedSprite');

      if (!selectedSprite) {
        return;
      }

      this.setGlobalToolState('text', selectedSprite.serializeOptions(['color', 'backgroundColor', 'characterSpacing', 'lineHeight', 'alignment', 'fontIdentifier', 'fontFamily', 'fontWeight', 'fontStyle']));
    }

    /**
     * Gets called when the shared state has changed
     * @param  {Object} newState
     */

  }, {
    key: 'sharedStateDidChange',
    value: function sharedStateDidChange(newState) {
      if ('selectedSprite' in newState) {
        this.forceUpdate();
      }
    }

    /**
     * Gets called when the font size has been changed
     * @param  {Number} fontSize
     * @private
     */

  }, {
    key: '_onFontSizeChange',
    value: function _onFontSizeChange(fontSize) {
      var editor = this.context.editor;

      var outputDimensions = this.context.editor.getOutputDimensions();
      var selectedText = this.getSharedState('selectedSprite');
      selectedText.setFontSize(fontSize / outputDimensions.y);
      this.forceUpdate();
      editor.render();
    }

    /**
     * Gets called when the font family or weight has been changed
     * @param  {Object} variation
     * @private
     */

  }, {
    key: '_onFontChange',
    value: function _onFontChange(variation) {
      var editor = this.context.editor;

      var selectedText = this.getSharedState('selectedSprite');
      selectedText.setFontFamily(variation.getFont().getFontFamily());
      selectedText.setFontWeight(variation.getFontWeight());
      selectedText.setFontStyle(variation.getFontStyle());
      selectedText.setFontIdentifier(variation.getIdentifier());
      this.forceUpdate();
      editor.render();
    }

    /**
     * Gets called when the user clicks the alignment button
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onAlignmentClick',
    value: function _onAlignmentClick(e) {
      var editor = this.context.editor;

      var selectedText = this.getSharedState('selectedSprite');
      var alignment = selectedText.getAlignment();

      var currentIndex = ALIGNMENTS.indexOf(alignment);
      var nextIndex = (currentIndex + 1) % ALIGNMENTS.length;
      var newAlignment = ALIGNMENTS[nextIndex];

      selectedText.setAlignment(newAlignment);
      this.forceSharedUpdate();
      editor.render();
    }

    /**
     * Gets called when the user clicks the "take to front" button
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onTakeToFrontClick',
    value: function _onTakeToFrontClick(e) {
      var editor = this.context.editor;

      var operation = this.getSharedState('operation');
      operation.takeSpriteToFront(this.getSharedState('selectedSprite'));
      this.forceSharedUpdate();
      editor.render();
    }

    /**
     * Gets called when the user changes the foreground color
     * @param  {Color} color
     * @private
     */

  }, {
    key: '_onForegroundColorChange',
    value: function _onForegroundColorChange(color) {
      var editor = this.context.editor;

      var selectedText = this.getSharedState('selectedSprite');
      selectedText.setColor(color);
      editor.render();
    }

    /**
     * Gets called when the user changes the background color
     * @param  {Color} color
     * @private
     */

  }, {
    key: '_onBackgroundColorChange',
    value: function _onBackgroundColorChange(color) {
      var editor = this.context.editor;

      var selectedText = this.getSharedState('selectedSprite');
      selectedText.setBackgroundColor(color);
      editor.render();
    }

    // -------------------------------------------------------------------------- MODES

    /**
     * Switches to the given mode
     * @param  {String} mode
     * @private
     */

  }, {
    key: '_switchToMode',
    value: function _switchToMode(mode) {
      if (mode === this.state.mode) mode = null;

      this.setState({ mode: mode });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the overlay controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderOverlayControls',
    value: function renderOverlayControls() {
      switch (this.state.mode) {
        case 'size':
          return this._renderFontSizeOverlayControl();
        case 'font':
          return this._renderFontFamilyOverlayControl();
        default:
          return null;
      }
    }

    // -------------------------------------------------------------------------- FONT SIZE

    /**
     * Renders the font size overlay control (slider)
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderFontSizeOverlayControl',
    value: function _renderFontSizeOverlayControl() {
      var selectedText = this.getSharedState('selectedSprite');
      if (!selectedText) return;

      var editor = this.context.editor;

      var outputDimensions = editor.getOutputDimensions();

      var maxFontSize = Math.round(outputDimensions.y);
      var fontSize = Math.round(selectedText.getFontSize() * outputDimensions.y);
      return _globals.ReactBEM.createElement(_sliderOverlayComponent2.default, {
        value: fontSize,
        minValue: outputDimensions.y * 0.05,
        maxValue: maxFontSize,
        label: this._t('pesdk.text.button.size'),
        onChange: this._onFontSizeChange });
    }

    /**
     * Renders the font size list item
     * @return {Component}
     * @private
     */

  }, {
    key: '_renderSizeItem',
    value: function _renderSizeItem() {
      var selectedText = this.getSharedState('selectedSprite');
      if (!selectedText) return;

      var outputDimensions = this.context.editor.getOutputDimensions();

      var fontSize = selectedText.getFontSize();
      var className = this.state.mode === 'size' ? 'is-active' : null;

      return _globals.ReactBEM.createElement(
        'li',
        {
          bem: 'e:item',
          key: 'size' },
        _globals.ReactBEM.createElement(
          'bem',
          { specifier: '$b:controls' },
          _globals.ReactBEM.createElement(
            'div',
            {
              bem: '$e:button m:withLabel',
              className: className,
              'data-identifier': 'fontSize',
              onClick: this._switchToMode.bind(this, 'size') },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'b:fontSize e:text' },
              Math.round(fontSize * outputDimensions.y)
            ),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:label' },
              this._t('pesdk.text.button.size')
            )
          )
        )
      );
    }

    // -------------------------------------------------------------------------- FONT FAMILY

    /**
     * Renders the font family overlay control
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderFontFamilyOverlayControl',
    value: function _renderFontFamilyOverlayControl() {
      var selectedText = this.getSharedState('selectedSprite');
      if (!selectedText) return;

      return _globals.ReactBEM.createElement(_fontComponent2.default, {
        fontFamily: selectedText.getFontFamily(),
        fontWeight: selectedText.getFontWeight(),
        fontStyle: selectedText.getFontStyle(),
        fonts: this._fonts,
        onChange: this._onFontChange });
    }

    /**
     * Renders the font list item
     * @return {Component}
     * @private
     */

  }, {
    key: '_renderFontItem',
    value: function _renderFontItem() {
      var selectedText = this.getSharedState('selectedSprite');
      if (!selectedText) return;

      var className = this.state.mode === 'font' ? 'is-active' : null;
      return _globals.ReactBEM.createElement(
        'li',
        {
          bem: 'e:item',
          key: 'font' },
        _globals.ReactBEM.createElement(
          'bem',
          { specifier: '$b:controls' },
          _globals.ReactBEM.createElement(
            'div',
            {
              bem: '$e:button m:withLabel',
              className: className,
              'data-identifier': 'font',
              onClick: this._switchToMode.bind(this, 'font') },
            _globals.ReactBEM.createElement(_fontPreviewComponent2.default, {
              fontFamily: selectedText.getFontFamily(),
              fontWeight: selectedText.getFontWeight(),
              fontStyle: selectedText.getFontStyle() }),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:label' },
              this._t('pesdk.text.button.font')
            )
          )
        )
      );
    }

    // -------------------------------------------------------------------------- ALIGNMENT

    /**
     * Renders the text alignment list item
     * @return {Component}
     * @private
     */

  }, {
    key: '_renderAlignmentItem',
    value: function _renderAlignmentItem() {
      var selectedText = this.getSharedState('selectedSprite');
      if (!selectedText) return;

      var alignment = selectedText.getAlignment();

      return _globals.ReactBEM.createElement(
        'li',
        {
          bem: 'e:item',
          key: 'alignment' },
        _globals.ReactBEM.createElement(
          'bem',
          { specifier: '$b:controls' },
          _globals.ReactBEM.createElement(
            'div',
            {
              bem: '$e:button m:withLabel',
              onClick: this._onAlignmentClick,
              'data-identifier': 'alignment' },
            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/text/align_' + alignment + '.png', true) }),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:label' },
              this._t('pesdk.text.button.alignment')
            )
          )
        )
      );
    }

    /**
     * Renders the "take to front" list item
     * @return {Component}
     * @private
     */

  }, {
    key: '_renderTakeToFrontItem',
    value: function _renderTakeToFrontItem() {
      return _globals.ReactBEM.createElement(
        'li',
        {
          bem: 'e:item',
          key: 'takeToFront' },
        _globals.ReactBEM.createElement(
          'bem',
          { specifier: '$b:controls' },
          _globals.ReactBEM.createElement(
            'div',
            {
              bem: '$e:button m:withLabel',
              onClick: this._onTakeToFrontClick },
            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/take_to_front.png', true) }),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:label' },
              this._t('pesdk.text.button.takeToFront')
            )
          )
        )
      );
    }

    /**
     * Renders this component
     * @return {Array.<ReactBEM.Element>}
     */

  }, {
    key: 'renderControls',
    value: function renderControls() {
      if (this.state.loading) return _globals.ReactBEM.createElement('div', null);

      var listItems = [this._renderSizeItem(), this._renderFontItem(), this._renderAlignmentItem()];

      var selectedText = this.getSharedState('selectedSprite');

      var foregroundColor = selectedText.getColor().clone();
      var backgroundColor = selectedText.getBackgroundColor().clone();

      return [_globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:list' },
        _globals.ReactBEM.createElement(
          _scrollbarComponent2.default,
          { ref: 'scrollbar' },
          _globals.ReactBEM.createElement(
            'ul',
            { bem: '$e:list' },
            listItems
          )
        )
      ), _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:colorPicker' },
        _globals.ReactBEM.createElement(_colorPickerComponent2.default, {
          initialValue: foregroundColor,
          label: this._t('pesdk.text.button.foreground'),
          onChange: this._onForegroundColorChange })
      ), _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:colorPicker' },
        _globals.ReactBEM.createElement(_colorPickerComponent2.default, {
          initialValue: backgroundColor,
          label: this._t('pesdk.text.button.background'),
          onChange: this._onBackgroundColorChange })
      )];
    }
  }]);

  return TextControlsComponent;
}(_controlsComponent2.default);

exports.default = TextControlsComponent;


TextControlsComponent.contextTypes = _controlsComponent2.default.contextTypes;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _alphaComponent = __webpack_require__(154);

var _alphaComponent2 = _interopRequireDefault(_alphaComponent);

var _saturationComponent = __webpack_require__(155);

var _saturationComponent2 = _interopRequireDefault(_saturationComponent);

var _hueComponent = __webpack_require__(156);

var _hueComponent2 = _interopRequireDefault(_hueComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ColorPickerOverlayComponent = function (_BaseComponent) {
  _inherits(ColorPickerOverlayComponent, _BaseComponent);

  function ColorPickerOverlayComponent() {
    var _ref;

    _classCallCheck(this, ColorPickerOverlayComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ColorPickerOverlayComponent.__proto__ || Object.getPrototypeOf(ColorPickerOverlayComponent)).call.apply(_ref, [this].concat(args)));

    _this._value = _this.props.initialValue.clone();
    var hsvArr = _this._value.toHSV();
    var h = hsvArr[0];
    var s = hsvArr[1];
    var v = hsvArr[2];
    _this._hsv = { h: h, s: s, v: v };

    _this._bindAll('_onElementClick', '_onColorChange', '_onDocumentClick');
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component has been mounted
   */


  _createClass(ColorPickerOverlayComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(ColorPickerOverlayComponent.prototype.__proto__ || Object.getPrototypeOf(ColorPickerOverlayComponent.prototype), 'componentDidMount', this).call(this);

      document.addEventListener('click', this._onDocumentClick);
    }

    /**
     * Gets called when this component is about to be unmounted
     */

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _get(ColorPickerOverlayComponent.prototype.__proto__ || Object.getPrototypeOf(ColorPickerOverlayComponent.prototype), 'componentWillUnmount', this).call(this);

      document.removeEventListener('click', this._onDocumentClick);
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user clicks anywhere on the screen. If the click is outside
     * of the color picker and the color picker is visible, we hide this color picker.
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onDocumentClick',
    value: function _onDocumentClick(e) {
      for (var element = e.target; element; element = element.parentNode) {
        if (element === this.refs.root) {
          return;
        }
      }
      this.props.onClose && this.props.onClose();
    }

    /**
     * Catches clicks on the element and makes sure that no click event is triggered
     * on the parent element
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onElementClick',
    value: function _onElementClick(e) {
      e.stopPropagation();
    }

    /**
     * Gets called when the color changes
     * @param  {Color} color
     * @private
     */

  }, {
    key: '_onColorChange',
    value: function _onColorChange(color) {
      this._value = color;
      this.props.onChange && this.props.onChange(color);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var alphaComponent = void 0;
      if (this.props.alpha !== false) {
        alphaComponent = _globals.ReactBEM.createElement(_alphaComponent2.default, {
          initialValue: this._value,
          onChange: this._onColorChange
        });
      }

      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:colorPicker $e:overlay', onClick: this._onElementClick, ref: 'root' },
        alphaComponent,
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:bottom' },
          _globals.ReactBEM.createElement(_saturationComponent2.default, {
            initialValue: this._value,
            onChange: this._onColorChange
          }),
          _globals.ReactBEM.createElement(_hueComponent2.default, {
            initialValue: this._value,
            onChange: this._onColorChange
          })
        )
      );
    }
  }]);

  return ColorPickerOverlayComponent;
}(_globals.BaseComponent);

exports.default = ColorPickerOverlayComponent;


ColorPickerOverlayComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _draggableComponent = __webpack_require__(5);

var _draggableComponent2 = _interopRequireDefault(_draggableComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var AlphaComponent = function (_BaseComponent) {
  _inherits(AlphaComponent, _BaseComponent);

  function AlphaComponent() {
    var _ref;

    _classCallCheck(this, AlphaComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = AlphaComponent.__proto__ || Object.getPrototypeOf(AlphaComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onKnobDrag', '_onKnobDragStart');

    _this._value = _this.props.initialValue.clone();
    _this._transparentPatternCanvas = _globals.Utils.createTransparentPatternCanvas();
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called after this component has been mounted
   */


  _createClass(AlphaComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(AlphaComponent.prototype.__proto__ || Object.getPrototypeOf(AlphaComponent.prototype), 'componentDidMount', this).call(this);
      this._renderCanvas();
    }

    /**
     * Gets called when this component receives new props or state
     * @param  {Object} newProps
     * @return {Boolean}
     */

  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(newProps) {
      var initialValue = newProps.initialValue;

      if (initialValue !== this._value) {
        this._value = initialValue.clone();
        this._renderCanvas();
        return true;
      }
      return false;
    }

    // -------------------------------------------------------------------------- DRAG EVENTS

    /**
     * Gets called when the user starts dragging the knob
     * @param  {Vector2} position
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onKnobDragStart',
    value: function _onKnobDragStart(position, e) {
      if (e.target === this.refs.knob) {
        this._initialAlpha = this._value.a;
      } else {
        this._setAlphaFromPosition(position);
      }
    }

    /**
     * Gets called while the user drags the knob
     * @param  {Vector2} offset
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onKnobDrag',
    value: function _onKnobDrag(offset, e) {
      var canvas = this.refs.canvas;
      var canvasWidth = canvas.offsetWidth;

      var alphaChange = offset.x / canvasWidth;
      this._setAlpha(this._initialAlpha + alphaChange);
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the style object for the knob
     * @return {Object}
     * @private
     */

  }, {
    key: '_getKnobStyle',
    value: function _getKnobStyle() {
      return {
        left: (this._value.a * 100).toFixed(2) + '%',
        top: '50%'
      };
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Sets the alpha value of the color to the given one
     * @param {Number} a
     * @private
     */

  }, {
    key: '_setAlpha',
    value: function _setAlpha(a) {
      this._value.a = a;
      this._value.a = Math.min(1, Math.max(0, this._value.a));
      this.forceUpdate();
      this.props.onChange && this.props.onChange(this._value);
    }

    /**
     * Sets the alpha from the given cursor position
     * @param {Vector2} position
     * @private
     */

  }, {
    key: '_setAlphaFromPosition',
    value: function _setAlphaFromPosition(position) {
      var canvas = this.refs.canvas;
      this._initialAlpha = position.x / canvas.offsetWidth;
      this._setAlpha(this._initialAlpha);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the canvas with the current color
     * @private
     */

  }, {
    key: '_renderCanvas',
    value: function _renderCanvas() {
      var canvas = this.refs.canvas;
      var context = canvas.getContext('2d');

      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;

      // Fill with pattern
      var pattern = context.createPattern(this._transparentPatternCanvas, 'repeat');
      context.fillStyle = pattern;
      context.fillRect(0, 0, canvas.width, canvas.height);

      // Create gradient
      var gradient = context.createLinearGradient(0, 0, canvas.width, canvas.height);
      var color = this._value.clone();
      color.a = 0;
      gradient.addColorStop(0, color.toRGBA());
      gradient.addColorStop(1, this._value.toHex());

      // Draw gradient
      context.fillStyle = gradient;
      context.fillRect(0, 0, canvas.width, canvas.height);
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:colorPicker $e:alpha' },
        _globals.ReactBEM.createElement(
          _draggableComponent2.default,
          {
            onStart: this._onKnobDragStart,
            onDrag: this._onKnobDrag },
          _globals.ReactBEM.createElement(
            'div',
            null,
            _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'canvas' }),
            _globals.ReactBEM.createElement('div', {
              bem: 'e:knob $b:knob m:transparent',
              ref: 'knob',
              style: this._getKnobStyle() })
          )
        )
      );
    }
  }]);

  return AlphaComponent;
}(_globals.BaseComponent);

exports.default = AlphaComponent;


AlphaComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _draggableComponent = __webpack_require__(5);

var _draggableComponent2 = _interopRequireDefault(_draggableComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var SaturationComponent = function (_BaseComponent) {
  _inherits(SaturationComponent, _BaseComponent);

  function SaturationComponent() {
    var _ref;

    _classCallCheck(this, SaturationComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = SaturationComponent.__proto__ || Object.getPrototypeOf(SaturationComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onKnobDrag', '_onKnobDragStart');

    _this._value = _this.props.initialValue.clone();
    var hsvArr = _this._value.toHSV();
    var h = hsvArr[0];
    var s = hsvArr[1];
    var v = hsvArr[2];
    _this._hsvColor = { h: h, s: s, v: v };
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called after this component has been mounted
   */


  _createClass(SaturationComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(SaturationComponent.prototype.__proto__ || Object.getPrototypeOf(SaturationComponent.prototype), 'componentDidMount', this).call(this);
      this._renderCanvas();
    }

    /**
     * Gets called when this component receives new props or state
     * @param  {Object} newProps
     * @return {Boolean}
     */

  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(newProps) {
      var initialValue = newProps.initialValue;

      if (initialValue !== this._value) {
        this._value = initialValue.clone();
        var hsvArr = this._value.toHSV();
        var h = hsvArr[0];
        var s = hsvArr[1];
        var v = hsvArr[2];
        this._hsvColor = { h: h, s: s, v: v };
        this._renderCanvas();
        return true;
      }
      return false;
    }

    // -------------------------------------------------------------------------- DRAG EVENTS

    /**
     * Gets called when the user starts dragging the knob
     * @param  {Vector} position
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onKnobDragStart',
    value: function _onKnobDragStart(position, e) {
      if (e.target === this.refs.knob) {
        this._initialValue = this._hsvColor.v;
        this._initialSaturation = this._hsvColor.s;
      } else {
        this._setValuesFromPosition(position);
      }
    }

    /**
     * Gets called while the user drags the knob
     * @param  {Vector2} offset
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onKnobDrag',
    value: function _onKnobDrag(offset, e) {
      var canvas = this.refs.canvas;

      var canvasWidth = canvas.offsetWidth;
      var canvasHeight = canvas.offsetHeight;

      var saturationChange = offset.x / canvasWidth;
      var valueChange = offset.y / canvasHeight * -1;

      var h = this._hsvColor.h;

      this._setHSV(h, this._initialSaturation + saturationChange, this._initialValue + valueChange);
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the style object for the knob
     * @return {Object}
     * @private
     */

  }, {
    key: '_getKnobStyle',
    value: function _getKnobStyle() {
      var _hsvColor = this._hsvColor,
          s = _hsvColor.s,
          v = _hsvColor.v;


      return {
        left: (s * 100).toFixed(2) + '%',
        top: ((1 - v) * 100).toFixed(2) + '%'
      };
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Sets the HSV values of the color to the given values
     * @param {Number} h
     * @param {Number} s
     * @param {Number} v
     * @private
     */

  }, {
    key: '_setHSV',
    value: function _setHSV(h, s, v) {
      s = Math.max(0.01, Math.min(s, 0.99));
      v = Math.max(0.01, Math.min(v, 0.99));
      this._value = _globals.Color.fromHSV(h, s, v, this._value.a);
      this._hsvColor = { h: h, s: s, v: v };

      this.forceUpdate();
      this.props.onChange && this.props.onChange(this._value);
    }

    /**
     * Sets the values from the given cursor position
     * @param {Vector2} position
     * @private
     */

  }, {
    key: '_setValuesFromPosition',
    value: function _setValuesFromPosition(position) {
      var canvas = this.refs.canvas;

      this._initialSaturation = position.x / canvas.offsetWidth;
      this._initialValue = 1 - position.y / canvas.offsetHeight;

      var h = this._hsvColor.h;

      this._setHSV(h, this._initialSaturation, this._initialValue);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the current color to the canvas
     * @private
     */

  }, {
    key: '_renderCanvas',
    value: function _renderCanvas() {
      var canvas = this.refs.canvas;

      var context = canvas.getContext('2d');

      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;

      var imageData = context.getImageData(0, 0, canvas.width, canvas.height);

      for (var y = 0; y < canvas.height; y++) {
        var value = (canvas.height - y) / canvas.height;
        for (var x = 0; x < canvas.width; x++) {
          var saturation = x / canvas.width;
          var color = _globals.Color.fromHSV(this._hsvColor.h, saturation, value);
          var r = color.r,
              g = color.g,
              b = color.b,
              a = color.a;


          var index = (y * canvas.width + x) * 4;

          imageData.data[index] = r * 255;
          imageData.data[index + 1] = g * 255;
          imageData.data[index + 2] = b * 255;
          imageData.data[index + 3] = a * 255;
        }
      }

      context.putImageData(imageData, 0, 0);
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:colorPicker $e:saturation' },
        _globals.ReactBEM.createElement(
          _draggableComponent2.default,
          {
            onStart: this._onKnobDragStart,
            onDrag: this._onKnobDrag },
          _globals.ReactBEM.createElement(
            'div',
            null,
            _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'canvas' }),
            _globals.ReactBEM.createElement('div', {
              bem: 'e:knob $b:knob m:transparent',
              ref: 'knob',
              style: this._getKnobStyle() })
          )
        )
      );
    }
  }]);

  return SaturationComponent;
}(_globals.BaseComponent);

exports.default = SaturationComponent;


SaturationComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _draggableComponent = __webpack_require__(5);

var _draggableComponent2 = _interopRequireDefault(_draggableComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var HueComponent = function (_BaseComponent) {
  _inherits(HueComponent, _BaseComponent);

  function HueComponent() {
    var _ref;

    _classCallCheck(this, HueComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = HueComponent.__proto__ || Object.getPrototypeOf(HueComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onKnobDrag', '_onKnobDragStart');

    _this._value = _this.props.initialValue.clone();
    var hsvArr = _this._value.toHSV();
    var h = hsvArr[0];
    var s = hsvArr[1];
    var v = hsvArr[2];
    _this._hsvColor = { h: h, s: s, v: v };

    _this.state = {
      value: _this.props.initialValue
    };
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called after this component has been mounted
   */


  _createClass(HueComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(HueComponent.prototype.__proto__ || Object.getPrototypeOf(HueComponent.prototype), 'componentDidMount', this).call(this);
      this._renderCanvas();
    }

    /**
     * Gets called when this component receives new props or state
     * @param  {Object} newProps
     * @return {Boolean}
     */

  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(newProps) {
      var initialValue = newProps.initialValue;

      if (initialValue !== this._value) {
        this._value = initialValue.clone();
        var hsvArr = this._value.toHSV();
        var h = hsvArr[0];
        var s = hsvArr[1];
        var v = hsvArr[2];
        this._hsvColor = { h: h, s: s, v: v };
        this._renderCanvas();
        return true;
      }
      return false;
    }

    // -------------------------------------------------------------------------- DRAG EVENTS

    /**
     * Gets called when the user starts dragging the knob
     * @param  {Vector2} position
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onKnobDragStart',
    value: function _onKnobDragStart(position, e) {
      if (e.target === this.refs.knob) {
        this._initialHue = this._hsvColor.h;
      } else {
        this._setValueFromPosition(position);
      }
    }

    /**
     * Gets called while the user drags the knob
     * @param  {Vector2} offset
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onKnobDrag',
    value: function _onKnobDrag(offset, e) {
      var canvas = this.refs.canvas;

      var canvasHeight = canvas.offsetHeight;

      var hueChange = offset.y / canvasHeight;
      this._setHue(this._initialHue + hueChange);
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the style object for the knob
     * @return {Object}
     * @private
     */

  }, {
    key: '_getKnobStyle',
    value: function _getKnobStyle() {
      return {
        left: '50%',
        top: (this._hsvColor.h * 100).toFixed(2) + '%'
      };
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Sets the hue value of the color to the given one
     * @param {Number} h
     * @private
     */

  }, {
    key: '_setHue',
    value: function _setHue(h) {
      var _hsvColor = this._hsvColor,
          s = _hsvColor.s,
          v = _hsvColor.v;

      h = Math.min(1, Math.max(0, h));
      s = Math.max(0.01, Math.min(s, 0.99));
      v = Math.max(0.01, Math.min(v, 0.99));

      this._value = _globals.Color.fromHSV(h, s, v, this._value.a);
      this._hsvColor = { h: h, s: s, v: v };
      this.forceUpdate();
      this.props.onChange && this.props.onChange(this._value);
    }

    /**
     * Sets the value from the given cursor position
     * @param {Vector2} position
     * @private
     */

  }, {
    key: '_setValueFromPosition',
    value: function _setValueFromPosition(position) {
      var canvas = this.refs.canvas;

      this._initialHue = position.y / canvas.offsetHeight;
      this._setHue(this._initialHue);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the hue colors to the canvas
     * @private
     */

  }, {
    key: '_renderCanvas',
    value: function _renderCanvas() {
      var canvas = this.refs.canvas;

      var context = canvas.getContext('2d');

      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;

      for (var y = 0; y < canvas.height; y++) {
        var ratio = y / canvas.height;
        var color = _globals.Color.fromHSV(ratio, 1, 1);

        context.strokeStyle = color.toRGBA();
        context.beginPath();
        context.moveTo(0, y);
        context.lineTo(canvas.width, y);
        context.stroke();
      }
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:colorPicker $e:hue' },
        _globals.ReactBEM.createElement(
          _draggableComponent2.default,
          {
            onStart: this._onKnobDragStart,
            onDrag: this._onKnobDrag },
          _globals.ReactBEM.createElement(
            'div',
            null,
            _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'canvas' }),
            _globals.ReactBEM.createElement('div', {
              bem: 'e:knob $b:knob m:transparent',
              ref: 'knob',
              style: this._getKnobStyle() })
          )
        )
      );
    }
  }]);

  return HueComponent;
}(_globals.BaseComponent);

exports.default = HueComponent;


HueComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

var _fontPreviewComponent = __webpack_require__(46);

var _fontPreviewComponent2 = _interopRequireDefault(_fontPreviewComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var FontComponent = function (_BaseComponent) {
  _inherits(FontComponent, _BaseComponent);

  function FontComponent() {
    _classCallCheck(this, FontComponent);

    return _possibleConstructorReturn(this, (FontComponent.__proto__ || Object.getPrototypeOf(FontComponent)).apply(this, arguments));
  }

  _createClass(FontComponent, [{
    key: '_onListItemClick',

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user clicks one one of the list items
     * @param  {FontVariation} variation
     * @param  {Event} e
     * @private
     */
    value: function _onListItemClick(variation, e) {
      this.props.onChange && this.props.onChange(variation);
    }

    // -------------------------------------------------------------------------- LIST ITEMS

    /**
     * Renders the list items
     * @return {Array.<ReactBEM.Element>}
     * @private
     */

  }, {
    key: '_renderListItems',
    value: function _renderListItems() {
      var _this2 = this;

      var fonts = this.props.fonts;


      return fonts.map(function (font) {
        var selectedIdentifier = _this2.props.selectedIdentifier;


        return font.getVariations().map(function (variation) {
          var isSelected = selectedIdentifier === variation.getIdentifier();
          var className = isSelected ? 'is-active' : null;

          return _globals.ReactBEM.createElement(
            'li',
            {
              bem: 'e:item',
              key: variation.getIdentifier(),
              className: className,
              onClick: _this2._onListItemClick.bind(_this2, variation) },
            _globals.ReactBEM.createElement(_fontPreviewComponent2.default, {
              fontFamily: variation.getFontFamily(),
              fontWeight: variation.getFontWeight(),
              fontStyle: variation.getFontStyle() }),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:label' },
              font.getFontFamily()
            )
          );
        });
      });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var listItems = this._renderListItems();

      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:controls e:overlay m:dark m:large' },
        _globals.ReactBEM.createElement(
          _scrollbarComponent2.default,
          null,
          _globals.ReactBEM.createElement(
            'ul',
            { bem: '$b:fontFamily e:list' },
            listItems
          )
        )
      );
    }
  }]);

  return FontComponent;
}(_globals.BaseComponent);

exports.default = FontComponent;


FontComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _photoeditorsdk = __webpack_require__(7);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var Font = function (_Configurable) {
  _inherits(Font, _Configurable);

  function Font() {
    _classCallCheck(this, Font);

    return _possibleConstructorReturn(this, (Font.__proto__ || Object.getPrototypeOf(Font)).apply(this, arguments));
  }

  return Font;
}(_photoeditorsdk.Configurable);

/**
 * Specifies the available options for the Font class
 * @type {Object}
 * @ignore
 */


exports.default = Font;
Font.prototype.availableOptions = {
  fontFamily: { type: _photoeditorsdk.OptionType.STRING, required: true },
  variations: { type: _photoeditorsdk.OptionType.ARRAY, required: true }
};

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _controls = __webpack_require__(4);

var _controls2 = _interopRequireDefault(_controls);

var _brushControlsComponent = __webpack_require__(160);

var _brushControlsComponent2 = _interopRequireDefault(_brushControlsComponent);

var _brushCanvasControlsComponent = __webpack_require__(162);

var _brushCanvasControlsComponent2 = _interopRequireDefault(_brushCanvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

/**
 * The brush controls
 * @class
 * @extends PhotoEditorSDK.UI.ReactUI.Control
 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
 */
var BrushControls = function (_Controls) {
  _inherits(BrushControls, _Controls);

  function BrushControls() {
    _classCallCheck(this, BrushControls);

    return _possibleConstructorReturn(this, (BrushControls.__proto__ || Object.getPrototypeOf(BrushControls)).apply(this, arguments));
  }

  _createClass(BrushControls, null, [{
    key: 'onExit',

    /**
     * Gets called when the user leaves these controls
     * @this {StickersControlsComponent}
     * @override
     * @ignore
     */
    value: function onExit() {
      var editor = this.context.editor;


      editor.zoom.restore();
      editor.features.enable('zoom', 'drag');
      editor.render();
    }

    /**
     * Gets called when the user enters these controls
     * @this {BrushControlsComponent}
     * @param {SharedState} sharedState
     * @param {Object} options
     * @override
     * @ignore
     */

  }, {
    key: 'onEnter',
    value: function onEnter(sharedState, options) {
      var editor = this.context.editor;


      editor.zoom.save();
      editor.zoom.set('auto', function () {
        // operation.setEnabled(false)
        editor.render();
      });

      var outputDimensions = editor.getOutputDimensions();
      var operationExistedBefore = editor.operations.exists('sprite');
      var operation = editor.operations.getOrCreate('sprite');
      var brush = operation.createBrush();
      var initialOptions = operation.serializeOptions(undefined, true);
      operation.addSprite(brush);

      var size = Math.max(outputDimensions.min() * 0.05, 1);
      if (options.sizePresets && options.sizePresets.length > 0) {
        size = options.sizePresets[0];
      }

      var color = new _globals.Color(1, 0, 0, 1);
      var hardness = 1;

      this.setSharedState({
        operationExistedBefore: operationExistedBefore, operation: operation, brush: brush, initialOptions: initialOptions, size: size, color: color, hardness: hardness
      });
    }

    /**
     * Checks if this control is available to the user
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {Boolean}
     * @override
     * @ignore
     */

  }, {
    key: 'isAvailable',
    value: function isAvailable(editor) {
      return editor.isToolAllowed('brush') && editor.isToolEnabled('brush');
    }

    /**
     * Returns the assets that should be preloaded for this control
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {String[]}
     */

  }, {
    key: 'getPreloadAssets',
    value: function getPreloadAssets() {
      return [];
    }
  }]);

  return BrushControls;
}(_controls2.default);

/**
 * This control's controls component. Used for the lower controls part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */


BrushControls.controlsComponent = _brushControlsComponent2.default;

/**
 * This control's canvas component. Used for the upper controls part of the editor (on
 * top of the canvas)
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */
BrushControls.canvasControlsComponent = _brushCanvasControlsComponent2.default;

/**
 * This control's identifier
 * @type {String}
 * @default
 */
BrushControls.identifier = 'brush';

/**
 * This control's icon path
 * @type {String}
 * @ignore
 */
BrushControls.iconPath = 'controls/overview/brush.png';

/**
 * The language key that should be used when displaying this filter
 * @type {String}
 * @ignore
 */
BrushControls.languageKey = 'pesdk.brush.title.name';

/**
 * The default options for this control
 * @type {Object}
 */
BrushControls.defaultOptions = {
  sizePresets: []

  /**
   * The operations required for this control to work properly
   * @type {Array}
   */
};BrushControls.requiredOperations = ['sprite'];

exports.default = BrushControls;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _controlsComponent = __webpack_require__(3);

var _controlsComponent2 = _interopRequireDefault(_controlsComponent);

var _sliderComponent = __webpack_require__(13);

var _sliderComponent2 = _interopRequireDefault(_sliderComponent);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

var _colorPickerComponent = __webpack_require__(29);

var _colorPickerComponent2 = _interopRequireDefault(_colorPickerComponent);

var _presetPreviewItemComponent = __webpack_require__(161);

var _presetPreviewItemComponent2 = _interopRequireDefault(_presetPreviewItemComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var BrushControlsComponent = function (_ControlsComponent) {
  _inherits(BrushControlsComponent, _ControlsComponent);

  function BrushControlsComponent() {
    var _ref, _this$_events;

    _classCallCheck(this, BrushControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = BrushControlsComponent.__proto__ || Object.getPrototypeOf(BrushControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._hasDoneButton = false;
    _this._brushOptions = {
      size: _this.getSharedState('size'),
      color: _this.getSharedState('color').clone()
    };

    _this._hasPresets = _this.props.options.sizePresets && _this.props.options.sizePresets.length > 0;
    _this._hasSlider = !_this._hasPresets;

    _this._bindAll('_onSizeUpdated', '_onColorUpdated', '_onOperationUpdated', '_onOperationRemoved');

    _this.state = {
      sizeControlsEnabled: false
    };

    _this._events = (_this$_events = {}, _defineProperty(_this$_events, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated), _defineProperty(_this$_events, _globals.Constants.EVENTS.OPERATION_REMOVED, _this._onOperationRemoved), _this$_events);
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component has been mounted
   */


  _createClass(BrushControlsComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(BrushControlsComponent.prototype.__proto__ || Object.getPrototypeOf(BrushControlsComponent.prototype), 'componentDidMount', this).call(this);

      var editor = this.context.editor;

      editor.zoom.set('auto');
      editor.features.disable('zoom', 'drag');
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the user clicks a size preset
     * @param  {Number} size
     * @private
     */

  }, {
    key: '_onSizeClick',
    value: function _onSizeClick(size) {
      this._onSizeUpdated(size);
      this.forceUpdate();
    }

    /**
     * Gets called when an operation has been removed
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationRemoved',
    value: function _onOperationRemoved(operation) {
      if (operation !== this.getSharedState('operation')) return;
      if (this._backButtonClicked) return;

      // Operation can be removed by the undo button. We need
      // to make sure we re-create the operation for the lifetime
      // of this control
      var editor = this.context.editor;

      var newOperation = editor.operations.getOrCreate('sprite');

      var brush = newOperation.createBrush();
      newOperation.addSprite(brush);

      this.setSharedState({
        operation: newOperation,
        brush: brush,
        operationExistedBefore: false,
        initialOptions: {}
      });

      editor.render();
    }

    /**
     * Gets called when an operation has been updated
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationUpdated',
    value: function _onOperationUpdated(operation) {
      if (operation === this.getSharedState('operation')) {
        // SpriteOperation re-creates all sprites when they're mass-assigned,
        // so we need to find the new instance by matching against the previous ID
        var previousBrush = this.getSharedState('brush');
        if (previousBrush) {
          var brush = operation.getSprites().filter(function (s) {
            return s.getId() === previousBrush.getId();
          })[0];
          this.setSharedState({ brush: brush });
        }

        // Trigger brush canvas rendering
        // operation.setEnabled(true)
        this.context.editor.render();
        // this.context.editor.render(() => {
        //   operation.setEnabled(false)
        //   this.context.editor.render()
        // })
      }
    }

    /**
     * Gets called when the size has been updated
     * @param {Number} size
     * @private
     */

  }, {
    key: '_onSizeUpdated',
    value: function _onSizeUpdated(size) {
      this.setSharedState({ size: size });
      this._brushOptions.size = size;
    }

    /**
     * Gets called when the color has been updated
     * @param  {Color} color
     * @private
     */

  }, {
    key: '_onColorUpdated',
    value: function _onColorUpdated(color) {
      this.setSharedState({ color: color });
      this._brushOptions.color = color.clone();
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the size list items
     * @return {Array.<ReactBEM.Element>}
     * @private
     */

  }, {
    key: '_renderSizeItems',
    value: function _renderSizeItems() {
      var _this2 = this;

      var sizePresets = this.props.options.sizePresets;

      var maxSize = Math.max.apply(null, sizePresets);
      return sizePresets.map(function (size) {
        var isActive = _this2.getSharedState('size') === size;
        return _globals.ReactBEM.createElement(_presetPreviewItemComponent2.default, {
          size: size,
          maxSize: maxSize,
          active: isActive,
          key: size,
          onClick: _this2._onSizeClick.bind(_this2, size) });
      });
    }

    /**
     * Renders the controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderControls',
    value: function renderControls() {
      var editor = this.context.editor;

      var zoom = editor.zoom.get();
      var items = [];

      if (this._hasSlider) {
        var finalDimensions = editor.getFinalDimensions();
        var minSize = 1;
        var maxSize = Math.round(finalDimensions.clone().multiply(zoom).min() / 2);
        var currentWidth = this._brushOptions.size;

        items.push(_globals.ReactBEM.createElement(
          'div',
          { bem: 'e:cell m:slider' },
          _globals.ReactBEM.createElement(_sliderComponent2.default, {
            style: 'large',
            minValue: minSize,
            maxValue: maxSize,
            valueUnit: 'px',
            middleDot: false,
            label: this._t('pesdk.brush.text.size'),
            onChange: this._onSizeUpdated,
            value: currentWidth })
        ));
      } else if (this._hasPresets) {
        items.push(_globals.ReactBEM.createElement(
          'div',
          { bem: 'e:cell m:list' },
          _globals.ReactBEM.createElement(
            _scrollbarComponent2.default,
            null,
            _globals.ReactBEM.createElement(
              'ul',
              { bem: '$e:list' },
              this._renderSizeItems()
            )
          )
        ));
      }

      items.push(_globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:colorPicker' },
        _globals.ReactBEM.createElement(_colorPickerComponent2.default, {
          initialValue: this._brushOptions.color.clone(),
          onChange: this._onColorUpdated })
      ));

      return items;
    }
  }]);

  return BrushControlsComponent;
}(_controlsComponent2.default);

exports.default = BrushControlsComponent;


BrushControlsComponent.contextTypes = _controlsComponent2.default.contextTypes;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var PresetPreviewItemComponent = function (_BaseComponent) {
  _inherits(PresetPreviewItemComponent, _BaseComponent);

  function PresetPreviewItemComponent() {
    _classCallCheck(this, PresetPreviewItemComponent);

    return _possibleConstructorReturn(this, (PresetPreviewItemComponent.__proto__ || Object.getPrototypeOf(PresetPreviewItemComponent)).apply(this, arguments));
  }

  _createClass(PresetPreviewItemComponent, [{
    key: 'componentDidMount',

    // -------------------------------------------------------------------------- LIFECYCLE

    /**
     * Gets called after the component has been mounted
     */
    value: function componentDidMount() {
      _get(PresetPreviewItemComponent.prototype.__proto__ || Object.getPrototypeOf(PresetPreviewItemComponent.prototype), 'componentDidMount', this).call(this);
      this._renderCanvas();
    }

    /**
     * Gets called after this component has been updated
     */

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._renderCanvas();
    }

    // -------------------------------------------------------------------------- CANVAS RENDERING

    /**
     * Renders the current font family onto the canvas
     * @private
     */

  }, {
    key: '_renderCanvas',
    value: function _renderCanvas() {
      var canvas = this.refs.canvas;

      var context = canvas.getContext('2d');

      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;

      var _props = this.props,
          maxSize = _props.maxSize,
          size = _props.size;

      var diameter = canvas.width * (size / maxSize);
      var radius = diameter / 2;

      context.fillStyle = 'white';
      context.beginPath();
      context.arc(canvas.width / 2, canvas.height / 2, radius, 0, 2 * Math.PI);
      context.fill();
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:controls $e:list' },
        _globals.ReactBEM.createElement(
          'li',
          {
            bem: 'e:item',
            onClick: this.props.onClick },
          _globals.ReactBEM.createElement(
            'bem',
            { specifier: '$b:controls' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: '$e:button m:withLabel', className: this.props.active ? 'is-active' : null },
              _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'canvas' }),
              _globals.ReactBEM.createElement(
                'div',
                { bem: 'e:label' },
                this.props.size
              )
            )
          )
        )
      );
    }
  }]);

  return PresetPreviewItemComponent;
}(_globals.BaseComponent);

exports.default = PresetPreviewItemComponent;


PresetPreviewItemComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _spritesCanvasControlsComponent = __webpack_require__(14);

var _spritesCanvasControlsComponent2 = _interopRequireDefault(_spritesCanvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var BrushSprite = _globals.SDK.Operations.SpriteOperation.BrushSprite;
var RadialBrush = _globals.SDK.Operations.SpriteOperation.BrushSprite.Brushes.RadialBrush;

var BrushCanvasControlsComponent = function (_SpritesCanvasControl) {
  _inherits(BrushCanvasControlsComponent, _SpritesCanvasControl);

  function BrushCanvasControlsComponent() {
    var _ref;

    _classCallCheck(this, BrushCanvasControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = BrushCanvasControlsComponent.__proto__ || Object.getPrototypeOf(BrushCanvasControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._windowResized = false;
    _this._drawing = false;
    _this._bindAll('_onMouseEnter', '_onMouseLeave', '_onMouseDown', '_onMouseMove', '_onMouseUp', '_onMouseMoveOnCanvas', '_onWindowResize');

    _this._lastDrawPosition = null;

    _this._events = _globals.SDKUtils.extend(_this._events, _defineProperty({}, _globals.Constants.EVENTS.WINDOW_RESIZE, _this._onWindowResize));

    _this.state = {
      cursorVisible: false,
      cursorPosition: new _globals.Vector2()
    };
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component has been mounted
   */


  _createClass(BrushCanvasControlsComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(BrushCanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(BrushCanvasControlsComponent.prototype), 'componentDidMount', this).call(this);
      this._updateContainerRect();
    }

    /**
     * Gets called when this component has been updated
     */

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this._windowResized) {
        this._updateContainerRect();
        this._windowResized = false;
      }
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the window has been resized
     * @private
     */

  }, {
    key: '_onWindowResize',
    value: function _onWindowResize() {
      this._windowResized = true;
    }

    /**
     * Gets called when an operation has been removed
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationRemoved',
    value: function _onOperationRemoved(operation) {
      void 0;
    }

    /**
     * Gets called when an operation has been updated
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationUpdated',
    value: function _onOperationUpdated(operation) {
      if (operation === this.getSharedState('operation')) {
        this.forceUpdate();
      }
    }

    /**
     * Gets called when the user presses a mouse button
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onMouseDown',
    value: function _onMouseDown(e) {
      e.preventDefault();

      this._optionsBeforeDraw = this.getSharedState('operation').serializeOptions();
      this._operationExistedBeforeDraw = this.getSharedState('operationExistedBefore');
      this.setSharedState({ operationExistedBefore: true }, false);

      var outputDimensions = this.context.editor.getOutputDimensions();
      var cursorPosition = this._getCursorPosition(e);

      var brush = this.getSharedState('brush');
      var size = this.getSharedState('size') / outputDimensions.min();
      var color = this.getSharedState('color');
      var hardness = this.getSharedState('hardness');
      this._drawing = true;
      var _brush = new RadialBrush({ size: size, hardness: hardness, color: color });
      this._currentPath = brush.createPath(_brush);
      this._currentPath.addControlPoint(cursorPosition.clone().divide(outputDimensions));

      document.addEventListener('mousemove', this._onMouseMove);
      document.addEventListener('touchmove', this._onMouseMove);
      document.addEventListener('mouseup', this._onMouseUp);
      document.addEventListener('touchend', this._onMouseUp);
    }

    /**
     * Gets called when the user releases a mouse button
     * @private
     */

  }, {
    key: '_onMouseUp',
    value: function _onMouseUp() {
      this._currentPath.setClosed(true);

      var editor = this.context.editor;

      var outputTextureDimensions = editor.getOutputTextureDimensions();
      this.getSharedState('brush').render(outputTextureDimensions);

      this._currentPath = null;
      this._drawing = false;

      editor.history.add(this.getSharedState('operation'), this._optionsBeforeDraw, this._operationExistedBeforeDraw);

      document.removeEventListener('mousemove', this._onMouseMove);
      document.removeEventListener('touchmove', this._onMouseMove);
      document.removeEventListener('mouseup', this._onMouseUp);
      document.removeEventListener('touchend', this._onMouseUp);
    }

    /**
     * Gets called when the user enters the canvas
     * @param {Event} event
     * @private
     */

  }, {
    key: '_onMouseEnter',
    value: function _onMouseEnter(e) {
      var cursorPosition = this._getCursorPosition(e);
      this.setState({
        cursorVisible: true,
        cursorPosition: cursorPosition
      });
      this._onMouseMove(e);
    }

    /**
     * Gets called when the user leaves the canvas
     * @private
     */

  }, {
    key: '_onMouseLeave',
    value: function _onMouseLeave() {
      this.setState({
        cursorVisible: false
      });
    }

    /**
     * Gets called while the user moves the mouse
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onMouseMove',
    value: function _onMouseMove(e) {
      var editor = this.context.editor;

      var outputDimensions = editor.getOutputDimensions();
      var outputTextureDimensions = editor.getOutputTextureDimensions();

      var zoom = editor.zoom.get();
      var cursorPosition = this._getCursorPosition(e);
      this.setState({ cursorPosition: cursorPosition });

      var shouldDraw = void 0;
      if (!this._lastDrawPosition) {
        shouldDraw = true;
      } else {
        var brushSize = this.getSharedState('size');
        var distance = this._lastDrawPosition.clone().subtract(cursorPosition).abs().len() / zoom;
        shouldDraw = distance >= brushSize / 10;
      }

      if (this._drawing && shouldDraw) {
        this._currentPath.addControlPoint(cursorPosition.clone().divide(outputDimensions));

        this.getSharedState('brush').render(outputTextureDimensions);

        this._lastDrawPosition = cursorPosition.clone();
      }
    }

    /**
     * Gets called while the user moves the mouse on top of the canvas. Updates
     * the cursor cursor position
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onMouseMoveOnCanvas',
    value: function _onMouseMoveOnCanvas(e) {
      var cursorPosition = this._getCursorPosition(e);
      this.setState({ cursorPosition: cursorPosition });
    }

    /**
     * Returns the props that are passed to the item component of the given sprite
     * @param  {Sprite} sprite
     * @return {Object}
     * @private
     */

  }, {
    key: '_getPropsForSprite',
    value: function _getPropsForSprite(sprite) {
      var props = _get(BrushCanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(BrushCanvasControlsComponent.prototype), '_getPropsForSprite', this).call(this, sprite);
      if (sprite instanceof BrushSprite) {
        props.hideContent = false;
      }
      return props;
    }
    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the cursor's style object
     * @return {Object}
     * @private
     */

  }, {
    key: '_getCursorStyle',
    value: function _getCursorStyle() {
      var size = this.getSharedState('size');
      var color = this.getSharedState('color');

      var cursorPosition = this.state.cursorPosition;

      return {
        left: cursorPosition.x,
        top: cursorPosition.y,
        width: size,
        height: size,
        background: color.toRGBA(),
        marginLeft: size * -0.5,
        marginTop: size * -0.5
      };
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Updates the container bounding rect
     * @private
     */

  }, {
    key: '_updateContainerRect',
    value: function _updateContainerRect() {
      this._containerBoundingRect = this.refs.innerContainer.getBoundingClientRect();
    }

    /**
     * Returns the cursor position for the given event
     * @param  {Event} event
     * @private
     */

  }, {
    key: '_getCursorPosition',
    value: function _getCursorPosition(event) {
      var position = _globals.Utils.getEventPosition(event);
      var boundingRect = this._containerBoundingRect;
      return position.subtract(boundingRect.left, boundingRect.top);
    }

    /**
     * Returns the properties for the outer container
     * @return {Object}
     * @private
     */

  }, {
    key: '_getContainerProps',
    value: function _getContainerProps() {
      var props = _get(BrushCanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(BrushCanvasControlsComponent.prototype), '_getContainerProps', this).call(this);

      props.onMouseDown = props.onTouchStart = this._onMouseDown;
      return props;
    }

    /**
     * Returns the properties for the canvas container
     * @return {Object}
     * @private
     */

  }, {
    key: '_getInnerContainerProps',
    value: function _getInnerContainerProps() {
      var props = _get(BrushCanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(BrushCanvasControlsComponent.prototype), '_getInnerContainerProps', this).call(this);

      // This disables the hit testing for this sub control
      delete props.onClick;

      props.onMouseEnter = this._onMouseEnter;
      props.onMouseLeave = this._onMouseLeave;
      props.onMouseMove = this._onMouseMoveOnCanvas;
      return props;
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * This renders controls on top of the sprites
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderOverlayControls',
    value: function _renderOverlayControls() {
      var cursorClass = this.state.cursorVisible ? 'is-visible' : null;
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:brushCanvasControls' },
        _globals.ReactBEM.createElement('div', { bem: 'e:cursor', className: cursorClass, style: this._getCursorStyle() })
      );
    }
  }]);

  return BrushCanvasControlsComponent;
}(_spritesCanvasControlsComponent2.default);

exports.default = BrushCanvasControlsComponent;


BrushCanvasControlsComponent.contextTypes = _spritesCanvasControlsComponent2.default.contextTypes;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _controls = __webpack_require__(4);

var _controls2 = _interopRequireDefault(_controls);

var _selectiveBlurControlsComponent = __webpack_require__(164);

var _selectiveBlurControlsComponent2 = _interopRequireDefault(_selectiveBlurControlsComponent);

var _selectiveBlurCanvasControlsComponent = __webpack_require__(165);

var _selectiveBlurCanvasControlsComponent2 = _interopRequireDefault(_selectiveBlurCanvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

/**
 * The selective blur controls
 * @class
 * @extends PhotoEditorSDK.UI.ReactUI.Control
 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
 */
var SelectiveBlurControls = function (_Controls) {
  _inherits(SelectiveBlurControls, _Controls);

  function SelectiveBlurControls() {
    _classCallCheck(this, SelectiveBlurControls);

    return _possibleConstructorReturn(this, (SelectiveBlurControls.__proto__ || Object.getPrototypeOf(SelectiveBlurControls)).apply(this, arguments));
  }

  _createClass(SelectiveBlurControls, null, [{
    key: 'onExit',

    /**
     * Gets called when the user leaves these controls
     * @this {SelectiveBlurControlsComponent}
     * @override
     * @ignore
     */
    value: function onExit() {
      var editor = this.context.editor;

      var operation = this.getSharedState('operation');

      if (operation.getPaths().length === 0) {
        editor.operations.remove(operation);
      }

      editor.zoom.restore();
      editor.features.enable('zoom', 'drag');
      editor.render();
    }

    /**
     * Gets called when the user enters these controls
     * @this {SelectiveBlurControlsComponent}
     * @param {SharedState} sharedState
     * @param {Object} options
     * @override
     * @ignore
     */

  }, {
    key: 'onEnter',
    value: function onEnter(sharedState, options) {
      var editor = this.context.editor;


      editor.zoom.save();
      editor.zoom.set('auto', function () {
        editor.render();
      });

      var outputDimensions = editor.getOutputDimensions();
      var operationExistedBefore = editor.operations.exists('selective-blur');
      var operation = editor.operations.getOrCreate('selective-blur');
      var initialOptions = operation.serializeOptions();
      var brush = operation.getBrush();

      var size = outputDimensions.min() * 0.1;
      var hardness = 1;

      var inputDimensions = operation.getInputDimensions();

      this.setSharedState({
        operationExistedBefore: operationExistedBefore, operation: operation, brush: brush, initialOptions: initialOptions, size: size, hardness: hardness, inputDimensions: inputDimensions
      });
    }

    /**
     * Checks if this control is available to the user
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {Boolean}
     * @override
     * @ignore
     */

  }, {
    key: 'isAvailable',
    value: function isAvailable(editor) {
      return editor.isToolEnabled('selective-blur');
    }
  }]);

  return SelectiveBlurControls;
}(_controls2.default);

/**
 * This control's controls component. Used for the lower controls part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */


SelectiveBlurControls.controlsComponent = _selectiveBlurControlsComponent2.default;

/**
 * This control's canvas component. Used for the upper controls part of the editor (on
 * top of the canvas)
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */
SelectiveBlurControls.canvasControlsComponent = _selectiveBlurCanvasControlsComponent2.default;

/**
 * This control's identifier
 * @type {String}
 * @default
 */
SelectiveBlurControls.identifier = 'selective-blur';

/**
 * This control's icon path
 * @type {String}
 * @ignore
 */
SelectiveBlurControls.iconPath = 'controls/overview/selective-blur.png';

/**
 * The language key that should be used when displaying this filter
 * @type {String}
 * @ignore
 */
SelectiveBlurControls.languageKey = 'controls.overview.selective-blur';

/**
 * The default options for this control
 * @type {Object}
 */
SelectiveBlurControls.defaultOptions = {};

/**
 * The operations required for this control to work properly
 * @type {Array}
 */
SelectiveBlurControls.requiredOperations = ['selective-blur'];

exports.default = SelectiveBlurControls;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _controlsComponent = __webpack_require__(3);

var _controlsComponent2 = _interopRequireDefault(_controlsComponent);

var _sliderComponent = __webpack_require__(13);

var _sliderComponent2 = _interopRequireDefault(_sliderComponent);

var _sliderOverlayComponent = __webpack_require__(6);

var _sliderOverlayComponent2 = _interopRequireDefault(_sliderOverlayComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var BrushControlsComponent = function (_ControlsComponent) {
  _inherits(BrushControlsComponent, _ControlsComponent);

  function BrushControlsComponent() {
    var _ref, _this$_events;

    _classCallCheck(this, BrushControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = BrushControlsComponent.__proto__ || Object.getPrototypeOf(BrushControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._hasDoneButton = false;
    _this._brushSize = _this.getSharedState('size');

    _this._bindAll('_onOperationUpdated', '_onOperationRemoved', '_onSizeUpdated', '_onBlurRadiusChange');

    _this.state = {
      sizeControlsEnabled: false
    };

    _this._events = (_this$_events = {}, _defineProperty(_this$_events, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated), _defineProperty(_this$_events, _globals.Constants.EVENTS.OPERATION_REMOVED, _this._onOperationRemoved), _this$_events);
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component has been mounted
   */


  _createClass(BrushControlsComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(BrushControlsComponent.prototype.__proto__ || Object.getPrototypeOf(BrushControlsComponent.prototype), 'componentDidMount', this).call(this);

      var editor = this.context.editor;

      editor.zoom.set('auto');
      editor.features.disable('zoom', 'drag');
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when an operation has been removed
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationRemoved',
    value: function _onOperationRemoved(operation) {
      if (operation !== this.getSharedState('operation')) return;
      if (this._backButtonClicked) return;

      // Operation can be removed by the undo button. We need
      // to make sure we re-create the operation for the lifetime
      // of this control
      var editor = this.context.editor;

      var newOperation = editor.operations.getOrCreate('selective-blur');
      var brush = newOperation.getBrush();

      this.setSharedState({
        operation: newOperation,
        brush: brush,
        operationExistedBefore: false,
        initialOptions: {}
      });

      editor.render();
    }

    /**
     * Gets called when an operation has been updated
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationUpdated',
    value: function _onOperationUpdated(operation) {
      if (operation === this.getSharedState('operation')) {
        var editor = this.context.editor;

        editor.render();
        this.forceUpdate();
      }
    }

    /**
     * Gets called when the size has been updated
     * @param {Number} size
     * @private
     */

  }, {
    key: '_onSizeUpdated',
    value: function _onSizeUpdated(size) {
      this.setSharedState({ size: size });
      this._brushSize = size;
    }

    /**
     * Gets called when the slider value has changed
     * @param {Number} value
     * @param {Number} previousValue
     * @param {Boolean} released
     * @private
     */

  }, {
    key: '_onBlurRadiusChange',
    value: function _onBlurRadiusChange(value, previousValue) {
      var released = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var inputDimensions = this.getSharedState('inputDimensions');
      this.getSharedState('operation').setBlurRadius(value / inputDimensions.min());

      var editor = this.context.editor;

      editor.render();

      if (released) {
        editor.history.add(this.getSharedState('operation'), { blurRadius: previousValue / inputDimensions.min() }, true);
      }
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the overlay controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderOverlayControls',
    value: function renderOverlayControls() {
      var inputDimensions = this.getSharedState('inputDimensions');
      var shortestSide = inputDimensions.min();
      var value = this.getSharedState('operation').getBlurRadius() * shortestSide;

      return _globals.ReactBEM.createElement(_sliderOverlayComponent2.default, {
        minValue: 0,
        maxValue: Math.min(180, Math.round(shortestSide * 0.1)),
        value: value,
        valueUnit: 'px',
        label: this._t('controls.selectiveBlur.blurRadius'),
        onChange: this._onBlurRadiusChange });
    }

    /**
     * Renders the controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderControls',
    value: function renderControls() {
      var editor = this.context.editor;

      var zoom = editor.zoom.get();
      var items = [];

      var finalDimensions = editor.getFinalDimensions();
      var minSize = 1;
      var maxSize = Math.round(finalDimensions.clone().multiply(zoom).min() / 2);
      var currentWidth = this._brushSize;

      items.push(_globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:slider' },
        _globals.ReactBEM.createElement(_sliderComponent2.default, {
          style: 'large',
          minValue: minSize,
          maxValue: maxSize,
          valueUnit: 'px',
          middleDot: false,
          label: this._t('controls.brush.size'),
          onChange: this._onSizeUpdated,
          value: currentWidth })
      ));

      return items;
    }
  }]);

  return BrushControlsComponent;
}(_controlsComponent2.default);

exports.default = BrushControlsComponent;


BrushControlsComponent.contextTypes = _controlsComponent2.default.contextTypes;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _spritesCanvasControlsComponent = __webpack_require__(14);

var _spritesCanvasControlsComponent2 = _interopRequireDefault(_spritesCanvasControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var BrushCanvasControlsComponent = function (_SpritesCanvasControl) {
  _inherits(BrushCanvasControlsComponent, _SpritesCanvasControl);

  function BrushCanvasControlsComponent() {
    var _ref;

    _classCallCheck(this, BrushCanvasControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = BrushCanvasControlsComponent.__proto__ || Object.getPrototypeOf(BrushCanvasControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._windowResized = false;
    _this._drawing = false;
    _this._bindAll('_onMouseEnter', '_onMouseLeave', '_onMouseDown', '_onMouseMove', '_onMouseUp', '_onMouseMoveOnCanvas', '_onWindowResize');

    _this._lastDrawPosition = null;

    _this._events = _globals.SDKUtils.extend(_this._events, _defineProperty({}, _globals.Constants.EVENTS.WINDOW_RESIZE, _this._onWindowResize));

    _this.state = {
      cursorVisible: false,
      cursorPosition: new _globals.Vector2()
    };
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component has been mounted
   */


  _createClass(BrushCanvasControlsComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(BrushCanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(BrushCanvasControlsComponent.prototype), 'componentDidMount', this).call(this);
      this._updateContainerRect();
    }

    /**
     * Gets called when this component has been updated
     */

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this._windowResized) {
        this._updateContainerRect();
        this._windowResized = false;
      }
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the window has been resized
     * @private
     */

  }, {
    key: '_onWindowResize',
    value: function _onWindowResize() {
      this._windowResized = true;
    }

    /**
     * Gets called when an operation has been removed
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationRemoved',
    value: function _onOperationRemoved(operation) {}

    /**
     * Gets called when an operation has been updated
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationUpdated',
    value: function _onOperationUpdated(operation) {
      if (operation === this.getSharedState('operation')) {
        this.forceUpdate();
      }
    }

    /**
     * Gets called when the user presses a mouse button
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onMouseDown',
    value: function _onMouseDown(e) {
      e.preventDefault();

      var operation = this.getSharedState('operation');
      this._optionsBeforeDraw = operation.serializeOptions();
      this._operationExistedBeforeDraw = this.getSharedState('operationExistedBefore');
      this.setSharedState({ operationExistedBefore: true }, false);

      var outputDimensions = this.context.editor.getOutputDimensions();
      var cursorPosition = this._getCursorPosition(e);

      var size = this.getSharedState('size') / outputDimensions.min();
      var hardness = this.getSharedState('hardness');
      this._drawing = true;

      this._currentPath = operation.createPath(size, hardness);
      this._currentPath.addControlPoint(cursorPosition.clone().divide(outputDimensions));

      document.addEventListener('mousemove', this._onMouseMove);
      document.addEventListener('touchmove', this._onMouseMove);
      document.addEventListener('mouseup', this._onMouseUp);
      document.addEventListener('touchend', this._onMouseUp);
    }

    /**
     * Gets called when the user releases a mouse button
     * @private
     */

  }, {
    key: '_onMouseUp',
    value: function _onMouseUp() {
      this._currentPath.setClosed(true);

      var editor = this.context.editor;

      editor.render();

      this._currentPath = null;
      this._drawing = false;

      editor.history.add(this.getSharedState('operation'), this._optionsBeforeDraw, this._operationExistedBeforeDraw);

      document.removeEventListener('mousemove', this._onMouseMove);
      document.removeEventListener('touchmove', this._onMouseMove);
      document.removeEventListener('mouseup', this._onMouseUp);
      document.removeEventListener('touchend', this._onMouseUp);
    }

    /**
     * Gets called when the user enters the canvas
     * @param {Event} event
     * @private
     */

  }, {
    key: '_onMouseEnter',
    value: function _onMouseEnter(e) {
      var cursorPosition = this._getCursorPosition(e);
      this.setState({
        cursorVisible: true,
        cursorPosition: cursorPosition
      });
      this._onMouseMove(e);
    }

    /**
     * Gets called when the user leaves the canvas
     * @private
     */

  }, {
    key: '_onMouseLeave',
    value: function _onMouseLeave() {
      this.setState({
        cursorVisible: false
      });
    }

    /**
     * Gets called while the user moves the mouse
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onMouseMove',
    value: function _onMouseMove(e) {
      var editor = this.context.editor;

      var outputDimensions = editor.getOutputDimensions();

      var zoom = editor.zoom.get();
      var cursorPosition = this._getCursorPosition(e);
      this.setState({ cursorPosition: cursorPosition });

      var shouldDraw = void 0;
      if (!this._lastDrawPosition) {
        shouldDraw = true;
      } else {
        var brushSize = this.getSharedState('size');
        var distance = this._lastDrawPosition.clone().subtract(cursorPosition).abs().len() / zoom;
        shouldDraw = distance >= brushSize / 10;
      }

      if (this._drawing && shouldDraw) {
        this._currentPath.addControlPoint(cursorPosition.clone().divide(outputDimensions));
        this._lastDrawPosition = cursorPosition.clone();

        editor.render();
      }
    }

    /**
     * Gets called while the user moves the mouse on top of the canvas. Updates
     * the cursor cursor position
     * @param  {Event} e
     * @private
     */

  }, {
    key: '_onMouseMoveOnCanvas',
    value: function _onMouseMoveOnCanvas(e) {
      var cursorPosition = this._getCursorPosition(e);
      this.setState({ cursorPosition: cursorPosition });
    }

    // -------------------------------------------------------------------------- STYLING

    /**
     * Returns the cursor's style object
     * @return {Object}
     * @private
     */

  }, {
    key: '_getCursorStyle',
    value: function _getCursorStyle() {
      var size = this.getSharedState('size');

      var cursorPosition = this.state.cursorPosition;

      return {
        left: cursorPosition.x,
        top: cursorPosition.y,
        width: size,
        height: size,
        marginLeft: size * -0.5,
        marginTop: size * -0.5
      };
    }

    // -------------------------------------------------------------------------- MISC

    /**
     * Updates the container bounding rect
     * @private
     */

  }, {
    key: '_updateContainerRect',
    value: function _updateContainerRect() {
      this._containerBoundingRect = this.refs.innerContainer.getBoundingClientRect();
    }

    /**
     * Returns the cursor position for the given event
     * @param  {Event} event
     * @private
     */

  }, {
    key: '_getCursorPosition',
    value: function _getCursorPosition(event) {
      var position = _globals.Utils.getEventPosition(event);
      var boundingRect = this._containerBoundingRect;
      return position.subtract(boundingRect.left, boundingRect.top);
    }

    /**
     * Returns the properties for the outer container
     * @return {Object}
     * @private
     */

  }, {
    key: '_getContainerProps',
    value: function _getContainerProps() {
      var props = _get(BrushCanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(BrushCanvasControlsComponent.prototype), '_getContainerProps', this).call(this);

      props.onMouseDown = props.onTouchStart = this._onMouseDown;
      return props;
    }

    /**
     * Returns the properties for the canvas container
     * @return {Object}
     * @private
     */

  }, {
    key: '_getInnerContainerProps',
    value: function _getInnerContainerProps() {
      var props = _get(BrushCanvasControlsComponent.prototype.__proto__ || Object.getPrototypeOf(BrushCanvasControlsComponent.prototype), '_getInnerContainerProps', this).call(this);

      // This disables the hit testing for this sub control
      delete props.onClick;

      props.onMouseEnter = this._onMouseEnter;
      props.onMouseLeave = this._onMouseLeave;
      props.onMouseMove = this._onMouseMoveOnCanvas;
      return props;
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the sprite items
     * @return {Array.<SpriteItemComponent>}
     * @private
     */

  }, {
    key: '_renderSpriteItems',
    value: function _renderSpriteItems() {
      return null;
    }

    /**
     * This renders controls on top of the sprites
     * @return {ReactBEM.Element}
     * @private
     */

  }, {
    key: '_renderOverlayControls',
    value: function _renderOverlayControls() {
      var cursorClass = this.state.cursorVisible ? 'is-visible' : null;
      return _globals.ReactBEM.createElement(
        'div',
        { bem: '$b:selectiveBlurCanvasControls' },
        _globals.ReactBEM.createElement('div', { bem: 'e:cursor', className: cursorClass, style: this._getCursorStyle() })
      );
    }
  }]);

  return BrushCanvasControlsComponent;
}(_spritesCanvasControlsComponent2.default);

exports.default = BrushCanvasControlsComponent;


BrushCanvasControlsComponent.contextTypes = _spritesCanvasControlsComponent2.default.contextTypes;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _controls = __webpack_require__(4);

var _controls2 = _interopRequireDefault(_controls);

var _frameControlsComponent = __webpack_require__(167);

var _frameControlsComponent2 = _interopRequireDefault(_frameControlsComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

/**
 * The frame controls
 * @class
 * @extends PhotoEditorSDK.UI.ReactUI.Control
 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
 */
var FrameControls = function (_Controls) {
  _inherits(FrameControls, _Controls);

  function FrameControls() {
    _classCallCheck(this, FrameControls);

    return _possibleConstructorReturn(this, (FrameControls.__proto__ || Object.getPrototypeOf(FrameControls)).apply(this, arguments));
  }

  _createClass(FrameControls, null, [{
    key: 'onExit',

    /**
     * Gets called when the user leaves these controls
     * @this {FrameControlsComponent}
     * @override
     * @ignore
     */
    value: function onExit() {
      var editor = this.context.editor;

      var operation = this.getSharedState('operation');
      var initialOptions = this.getSharedState('initialOptions');

      var frame = operation.getFrame();
      var scale = operation.getScale();

      if ((frame && frame.identifier) !== (initialOptions.frame && initialOptions.frame.identifier) || scale !== initialOptions.scale) {
        editor.history.add(operation, this.getSharedState('initialOptions'), this.getSharedState('operationExistedBefore'));
      }

      if (!operation.getFrame()) {
        editor.operations.remove(operation);
      }

      editor.render();
    }

    /**
     * Gets called when the user enters these controls
     * @this {FrameControlsComponent}
     * @param {SharedState} sharedState
     * @override
     * @ignore
     */

  }, {
    key: 'onEnter',
    value: function onEnter(sharedState) {
      var editor = this.context.editor;

      var operationExistedBefore = editor.operations.exists('frame');
      var operation = editor.operations.getOrCreate('frame');
      var initialOptions = operation.serializeOptions();

      this.setSharedState({
        operation: operation,
        operationExistedBefore: operationExistedBefore,
        initialOptions: initialOptions,
        inputDimensions: operation.getInputDimensions(),
        frame: operation.getFrame()
      });
    }

    /**
     * Checks if this control is available to the user
     * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
     * @return {Boolean}
     * @override
     * @ignore
     */

  }, {
    key: 'isAvailable',
    value: function isAvailable(editor) {
      return editor.isToolAllowed('frame') && editor.isToolEnabled('frame');
    }
  }]);

  return FrameControls;
}(_controls2.default);

/**
 * This control's controls component. Used for the lower controls part of the editor.
 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
 * @ignore
 */


FrameControls.controlsComponent = _frameControlsComponent2.default;

/**
 * This control's identifier
 * @type {String}
 * @default
 */
FrameControls.identifier = 'frame';

/**
 * This control's icon path
 * @type {String}
 * @ignore
 */
FrameControls.iconPath = 'controls/overview/frame.png';

/**
 * The language key that should be used when displaying this filter
 * @type {String}
 * @ignore
 */
FrameControls.languageKey = 'pesdk.frame.title.name';

/**
 * The default options for this control
 * @type {Object}
 * @property {Object[]} [frames = []]
 */
FrameControls.defaultOptions = {
  frames: []

  /**
   * The operations required for this control to work properly
   * @type {Array}
   */
};FrameControls.requiredOperations = ['sprite'];

FrameControls.getPreloadAssets = _controls2.default.getPreloadAssets;

exports.default = FrameControls;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _controlsComponent = __webpack_require__(3);

var _controlsComponent2 = _interopRequireDefault(_controlsComponent);

var _scrollbarComponent = __webpack_require__(2);

var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);

var _modalManager = __webpack_require__(1);

var _modalManager2 = _interopRequireDefault(_modalManager);

var _frameManager = __webpack_require__(48);

var _frameManager2 = _interopRequireDefault(_frameManager);

var _frameItemComponent = __webpack_require__(168);

var _frameItemComponent2 = _interopRequireDefault(_frameItemComponent);

var _colorPickerComponent = __webpack_require__(29);

var _colorPickerComponent2 = _interopRequireDefault(_colorPickerComponent);

var _sliderOverlayComponent = __webpack_require__(6);

var _sliderOverlayComponent2 = _interopRequireDefault(_sliderOverlayComponent);

var _frame = __webpack_require__(49);

var _frame2 = _interopRequireDefault(_frame);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var FrameOverviewControlsComponent = function (_ControlsComponent) {
  _inherits(FrameOverviewControlsComponent, _ControlsComponent);

  function FrameOverviewControlsComponent() {
    var _ref, _this$_events;

    _classCallCheck(this, FrameOverviewControlsComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = FrameOverviewControlsComponent.__proto__ || Object.getPrototypeOf(FrameOverviewControlsComponent)).call.apply(_ref, [this].concat(args)));

    _this._operation = _this.getSharedState('operation');
    _this._bindAll('_onScaleChange', '_onColorChange', '_onOperationUpdated', '_onOperationRemoved');

    _this._events = (_this$_events = {}, _defineProperty(_this$_events, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated), _defineProperty(_this$_events, _globals.Constants.EVENTS.OPERATION_REMOVED, _this._onOperationRemoved), _this$_events);

    _this._initFrameManager();
    return _this;
  }

  // -------------------------------------------------------------------------- FRAMES

  /**
   * Initializes the frame manager
   * @private
   */


  _createClass(FrameOverviewControlsComponent, [{
    key: '_initFrameManager',
    value: function _initFrameManager() {
      this._frameManager = new _frameManager2.default(this.context.ui, this.props.options);
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when an operation has been updated
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationUpdated',
    value: function _onOperationUpdated(operation) {
      if (operation === this.getSharedState('operation')) {
        this.forceSharedUpdate();
      }
    }

    /**
     * Gets called when an operation has been removed
     * @param  {Operation} operation
     * @private
     */

  }, {
    key: '_onOperationRemoved',
    value: function _onOperationRemoved(operation) {
      if (operation !== this.getSharedState('operation')) return;
      if (this._backButtonClicked) return;

      // Operation can be removed by the undo button. We need
      // to make sure we re-create the operation for the lifetime
      // of this control
      var editor = this.context.editor;

      var newOperation = editor.operations.getOrCreate('frame');

      this.setSharedState({
        operation: newOperation,
        frame: null,
        operationExistedBefore: false,
        initialOptions: {}
      });

      editor.render();
    }

    /**
     * Gets called when the scale has been changed
     * @param  {Number} scale
     * @private
     */

  }, {
    key: '_onScaleChange',
    value: function _onScaleChange(scale) {
      var editor = this.context.editor;


      var inputDimensions = this.getSharedState('inputDimensions');
      this._operation.setScale(scale / inputDimensions.min());

      editor.render();
    }

    /**
     * Gets called when the tint color has been changed
     * @param  {PhotoEditorSDK.Color} color
     * @private
     */

  }, {
    key: '_onColorChange',
    value: function _onColorChange(color) {
      var operation = this.getSharedState('operation');
      operation.setTintColor(color.clone());

      var editor = this.context.editor;

      editor.render();
    }

    /**
     * Gets called when the user clicks the back button
     * @param {Event} e
     * @private
     */

  }, {
    key: '_onBackClick',
    value: function _onBackClick(e) {
      this._backButtonClicked = true;
      this.props.onSwitchControls('home');
    }

    /**
     * Gets called when a frame has been clicked
     * @param  {Object} frameData
     * @private
     */

  }, {
    key: '_onFrameClick',
    value: function _onFrameClick(frameData) {
      var _this2 = this;

      var editor = this.context.editor;

      var operation = this.getSharedState('operation');
      if (frameData === null) {
        operation.setFrame(null);
        editor.render();
        return this.setSharedState({ frame: null });
      }

      var loadingModal = void 0;
      var loadTimeout = setTimeout(function () {
        loadingModal = _modalManager2.default.instance.displayLoading(_this2._t('pesdk.common.text.loading'));
      }, 100);

      var frame = new _frame2.default(this.context.ui, frameData);

      frame.load().then(function () {
        if (loadingModal) loadingModal.close();
        if (loadTimeout) {
          clearTimeout(loadTimeout);
          loadTimeout = null;
        }

        var frameObject = frame.getFrame();
        operation.setFrame(frameObject);

        var editor = _this2.context.editor;

        editor.render();

        _this2.setSharedState({ frame: frame });
      });
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the overlay controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderOverlayControls',
    value: function renderOverlayControls() {
      var frame = this.getSharedState('frame');

      if (!frame) return null;

      var inputDimensions = this.getSharedState('inputDimensions');

      var minSize = 5;
      var maxSize = Math.round(0.3 * inputDimensions.min());
      var currentScale = this._operation.getScale() * inputDimensions.min();

      return _globals.ReactBEM.createElement(_sliderOverlayComponent2.default, {
        minValue: minSize,
        maxValue: maxSize,
        value: currentScale,
        valueUnit: 'px',
        middleDot: false,
        label: this._t('pesdk.frame.text.scale'),
        onChange: this._onScaleChange });
    }

    /**
     * Renders the list items for this control
     * @return {Array.<ReactBEM.Element>}
     * @private
     */

  }, {
    key: '_renderListItems',
    value: function _renderListItems() {
      var _this3 = this;

      var frames = this._frameManager.getFramesForCategory('all');
      var currentFrame = this.getSharedState('operation').getFrame();

      var noFrameItem = _globals.ReactBEM.createElement(
        'li',
        {
          bem: 'e:item',
          key: 'no-frame',
          onClick: this._onFrameClick.bind(this, null) },
        _globals.ReactBEM.createElement(
          'bem',
          { specifier: '$b:controls' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: '$e:button m:withLabel',
              className: !currentFrame ? 'is-active' : null },
            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/frame/no-frame.png', true) }),
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:label' },
              this._t('pesdk.frame.button.none')
            )
          )
        )
      );

      return [noFrameItem].concat(frames.map(function (frame, i) {
        return _globals.ReactBEM.createElement(_frameItemComponent2.default, {
          frame: frame,
          active: currentFrame && currentFrame.identifier === frame.identifier,
          onClick: _this3._onFrameClick.bind(_this3, frame) });
      }));
    }

    /**
     * Renders the controls of this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderControls',
    value: function renderControls() {
      var frame = this.getSharedState('operation').getFrame();
      var listItems = this._renderListItems();

      var items = [_globals.ReactBEM.createElement(
        'div',
        { bem: 'e:cell m:list' },
        _globals.ReactBEM.createElement(
          _scrollbarComponent2.default,
          { ref: 'scrollbar' },
          _globals.ReactBEM.createElement(
            'ul',
            { bem: '$e:list' },
            listItems
          )
        )
      )];

      if (frame && frame.tintable) {
        var operation = this.getSharedState('operation');
        items.push(_globals.ReactBEM.createElement(
          'div',
          { bem: 'e:cell m:colorPicker' },
          _globals.ReactBEM.createElement(_colorPickerComponent2.default, {
            initialValue: operation.getTintColor().clone(),
            onChange: this._onColorChange })
        ));
      }

      return items;
    }
  }]);

  return FrameOverviewControlsComponent;
}(_controlsComponent2.default);

exports.default = FrameOverviewControlsComponent;


FrameOverviewControlsComponent.contextTypes = _controlsComponent2.default.contextTypes;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var FrameItemComponent = function (_BaseComponent) {
  _inherits(FrameItemComponent, _BaseComponent);

  function FrameItemComponent() {
    var _ref;

    _classCallCheck(this, FrameItemComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = FrameItemComponent.__proto__ || Object.getPrototypeOf(FrameItemComponent)).call.apply(_ref, [this].concat(args)));

    _this.state = {
      frame: _this.props.frame
    };
    return _this;
  }

  /**
   * Gets called when this component has been mounted
   */


  _createClass(FrameItemComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._renderFrame();
    }

    /**
     * Gets called when this component is about to receive new properties
     * @param  {Object} nextProps
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.frame !== nextProps.frame) {
        this.setState({ frame: nextProps.frame }, function () {
          _this2._renderFrame();
        });
      }
    }

    /**
     * Renders the frame onto the canvas
     * @private
     */

  }, {
    key: '_renderFrame',
    value: function _renderFrame() {
      var editor = this.context.editor;

      var sdk = editor.getSDK();

      var frame = this.props.frame;


      var resolvedFramePath = this._getAssetPath(frame.thumbnail);
      var canvas = this.refs['canvas-' + frame.identifier];

      var pixelRatio = sdk.getPixelRatio();
      canvas.width = canvas.offsetWidth * pixelRatio;
      canvas.height = canvas.offsetHeight * pixelRatio;

      canvas.style.width = canvas.offsetWidth + 'px';
      canvas.style.height = canvas.offsetHeight + 'px';

      var context = canvas.getContext('2d');

      var image = new window.Image();
      image.addEventListener('load', function () {
        var scale = Math.min(canvas.width / image.width, canvas.height / image.height);
        var drawSize = new _globals.Vector2(image.width, image.height).multiply(scale);
        var drawPosition = new _globals.Vector2(canvas.width, canvas.height).divide(2).subtract(drawSize.clone().divide(2));

        context.drawImage(image, 0, 0, image.width, image.height, drawPosition.x, drawPosition.y, drawSize.x, drawSize.y);
      });
      image.crossOrigin = this.context.editor.getCrossOrigin();
      image.src = resolvedFramePath;
    }

    /**
     * Renders this element
     * @return {ReactBEM.element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: 'b:controls e:list' },
        _globals.ReactBEM.createElement(
          'li',
          {
            bem: 'e:item',
            key: this.props.frame.identifier,
            onClick: this.props.onClick },
          _globals.ReactBEM.createElement(
            'bem',
            { specifier: '$b:controls' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: '$e:button m:withInlineLabel' },
              _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas m:large', ref: 'canvas-' + this.props.frame.identifier }),
              _globals.ReactBEM.createElement(
                'div',
                { bem: '$e:inlineLabel', className: this.props.active ? 'is-active' : null },
                _globals.ReactBEM.createElement(
                  'div',
                  { bem: 'e:label' },
                  this._t('pesdk.frame.asset.' + this.props.frame.identifier) || this.props.frame.defaultName
                )
              )
            )
          )
        )
      );
    }
  }]);

  return FrameItemComponent;
}(_globals.BaseComponent);

exports.default = FrameItemComponent;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EditorFeatures = function () {
  function EditorFeatures(editor, sdk, mediator) {
    _classCallCheck(this, EditorFeatures);

    this._editor = editor;
    this._sdk = sdk;
    this._mediator = mediator;

    this._options = this._editor.getOptions();

    this._features = {
      drag: this._options.editor.enableDrag,
      zoom: this._options.editor.enableZoom
    };
  }

  /**
   * Checks if the feature with the given identifier is enabled
   * @param  {String}  identifier
   * @return {Boolean}
   */


  _createClass(EditorFeatures, [{
    key: 'isEnabled',
    value: function isEnabled(identifier) {
      var capitalizedIdentifier = identifier.charAt(0).toUpperCase() + identifier.slice(1);
      var optionEnabled = this._options.editor['enable' + capitalizedIdentifier];
      return this._features[identifier] && optionEnabled;
    }

    /**
     * Enables the features with the given identifiers
     * @param  {String[]} identifiers
     */

  }, {
    key: 'enable',
    value: function enable() {
      var _this = this;

      for (var _len = arguments.length, identifiers = Array(_len), _key = 0; _key < _len; _key++) {
        identifiers[_key] = arguments[_key];
      }

      identifiers.forEach(function (identifier) {
        _this._features[identifier] = true;
      });
      this._mediator.emit(_globals.Constants.EVENTS.FEATURES_ENABLED, identifiers);
      this._mediator.emit(_globals.Constants.EVENTS.FEATURES_UPDATED, identifiers);
    }

    /**
     * Disables the features with the given identifiers
     * @param  {String[]} identifiers
     */

  }, {
    key: 'disable',
    value: function disable() {
      var _this2 = this;

      for (var _len2 = arguments.length, identifiers = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        identifiers[_key2] = arguments[_key2];
      }

      identifiers.forEach(function (identifier) {
        _this2._features[identifier] = false;
      });
      this._mediator.emit(_globals.Constants.EVENTS.FEATURES_DISABLED, identifiers);
      this._mediator.emit(_globals.Constants.EVENTS.FEATURES_UPDATED, identifiers);
    }
  }]);

  return EditorFeatures;
}();

exports.default = EditorFeatures;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var MIN_ZOOM_DIMENSIONS = 300;

var EditorZoom = function (_EventEmitter) {
  _inherits(EditorZoom, _EventEmitter);

  function EditorZoom(editor, sdk, mediator) {
    _classCallCheck(this, EditorZoom);

    var _this = _possibleConstructorReturn(this, (EditorZoom.__proto__ || Object.getPrototypeOf(EditorZoom)).call(this));

    _this._editor = editor;
    _this._sdk = sdk;
    _this._mediator = mediator;

    _this._isDefaultZoom = false;
    _this._zoom = _this._sdk.getZoom();
    _this._options = _this._editor.getOptions();

    _this._zoomLevels = [1, 2, 3, 4, 5, 6.25, 8.33, 12.5, 16.66, 25, 33.33, 50, 66.66, 100, 200, 300, 400, 500, 600, 700, 800, 1200, 1600, 3200].map(function (z) {
      return z / 100;
    });
    return _this;
  }

  /**
   * Zooms in the editor
   */


  _createClass(EditorZoom, [{
    key: 'in',
    value: function _in() {
      var newZoom = this._getClosestZoomLevel(this._zoom + 0.001, +1);
      if (!newZoom) return this._zoomLevels[this._zoomLevels.length - 1];
      this.set(newZoom);
    }

    /**
     * Zooms out the editor
     */

  }, {
    key: 'out',
    value: function out() {
      var newZoom = this._getClosestZoomLevel(this._zoom - 0.001, -1);
      if (!newZoom) return this._zoomLevels[0];
      this.set(newZoom);
    }

    /**
     * Returns the closest zoom level to the given one
     * @param  {Number} zoomLevel
     * @param  {Number} direction
     * @return {Number}
     * @private
     */

  }, {
    key: '_getClosestZoomLevel',
    value: function _getClosestZoomLevel(zoomLevel, direction) {
      if (direction === -1) {
        return this._zoomLevels.filter(function (l) {
          return l < zoomLevel;
        }).pop();
      } else if (direction === 1) {
        return this._zoomLevels.filter(function (l) {
          return l > zoomLevel;
        })[0];
      }
    }

    /**
     * Switches to the previous zoom
     */

  }, {
    key: 'restore',
    value: function restore() {
      if (!this._previousZoom) return;
      this.set(this._previousZoom);
      this._previousZoom = null;
    }

    /**
     * Stores the current zoom level, can be restored with .restore()
     */

  }, {
    key: 'save',
    value: function save() {
      this._previousZoom = this._zoom;
    }

    /**
     * Sets the zoom to the given one
     * @param {Number} zoom
     * @param {Function} [callback]
     * @param {Boolean} [considerMinimum = true]
     */

  }, {
    key: 'set',
    value: function set(zoom, callback) {
      var considerMinimum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (!this._editor.isReady()) {
        return;
      }

      var newZoom = zoom;
      var defaultZoom = this.getDefault();
      if (zoom === 'auto' || newZoom === defaultZoom) {
        newZoom = defaultZoom;
        zoom = 'auto';

        this._isDefaultZoom = true;
      } else {
        this._isDefaultZoom = false;
      }

      var maxZoom = Math.max(1, defaultZoom * 2);
      var minZoom = considerMinimum ? this.getMinimum() : 0;
      newZoom = Math.max(minZoom, Math.min(maxZoom, newZoom));

      this._zoom = newZoom;
      this._sdk.setZoom(this._zoom);
      this._sdk.setTextureQuality(Math.min(this._zoom, 1));
      this.emit('set', this._zoom, callback);
    }

    /**
     * Returns the default zoom level
     * @return {Number}
     */

  }, {
    key: 'getDefault',
    value: function getDefault() {
      var finalDimensions = this._editor.getFinalDimensions(false);
      var canvasDimensions = this._editor.getCanvasDimensions();
      var defaultDimensions = _globals.SDKUtils.resizeVectorToFit(finalDimensions, canvasDimensions);

      return defaultDimensions.divide(finalDimensions).x;
    }

    /**
     * Returns the minimum zoom level
     * @return {Number}
     */

  }, {
    key: 'getMinimum',
    value: function getMinimum() {
      var finalDimensions = this._editor.getFinalDimensions();
      var minimumDimensions = _globals.SDKUtils.resizeVectorToFit(finalDimensions, new _globals.Vector2(MIN_ZOOM_DIMENSIONS, MIN_ZOOM_DIMENSIONS));

      return minimumDimensions.divide(finalDimensions).x;
    }

    /**
     * Checks if the editor is at the default zoom level
     * @return {Boolean}
     */

  }, {
    key: 'isDefault',
    value: function isDefault() {
      return this._isDefaultZoom;
    }

    /**
     * Returns the current zoom level
     * @return {Number}
     */

  }, {
    key: 'get',
    value: function get() {
      return this._zoom;
    }
  }]);

  return EditorZoom;
}(_globals.EventEmitter);

exports.default = EditorZoom;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var EditorHistory = function (_EventEmitter) {
  _inherits(EditorHistory, _EventEmitter);

  function EditorHistory(editor, sdk, mediator) {
    _classCallCheck(this, EditorHistory);

    var _this = _possibleConstructorReturn(this, (EditorHistory.__proto__ || Object.getPrototypeOf(EditorHistory)).call(this));

    _this._editor = editor;
    _this._sdk = sdk;
    _this._mediator = mediator;

    _this._history = [];
    return _this;
  }

  /**
   * Checks if there are any history items available
   * @return {Boolean}
   */


  _createClass(EditorHistory, [{
    key: 'isAvailable',
    value: function isAvailable() {
      return this._history.length !== 0;
    }

    /**
     * Adds the given data to the history
     * @param {PhotoEditorSDK.Operation} operation
     * @param {Object} options
     * @param {Boolean} existent
     * @param {Function} [undo]
     * @return {Object}
     */

  }, {
    key: 'add',
    value: function add(operation, options, existent) {
      var _this2 = this;

      var undo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      var historyItem = void 0;
      if (operation instanceof Array) {
        var items = operation;
        this._history.push(items);
        items.forEach(function (item) {
          _this2._mediator.emit(_globals.Constants.EVENTS.HISTORY_UPDATED, item.operation);
        });

        historyItem = items;
      } else {
        historyItem = {
          operation: operation, options: options, existent: existent, undo: undo
        };
        this._history.push(historyItem);
        this._mediator.emit(_globals.Constants.EVENTS.HISTORY_UPDATED, operation);
      }
      return historyItem;
    }

    /**
     * Reverts the last change
     */

  }, {
    key: 'undo',
    value: function undo() {
      var _this3 = this;

      var operations = this._editor.operations;

      var lastItem = this._history.pop();
      if (lastItem) {
        var items = [].concat(lastItem);

        items.forEach(function (historyObject) {
          var operation = historyObject.operation,
              existent = historyObject.existent,
              options = historyObject.options,
              undo = historyObject.undo;

          _this3._mediator.emit(_globals.Constants.EVENTS.HISTORY_BEFORE_UNDO, historyObject);

          if (!existent) {
            operations.remove(operation);
          } else {
            operation = operations.getOrCreate(operation.constructor.identifier);
            operation.set(options);
            _this3._mediator.emit(_globals.Constants.EVENTS.OPERATION_UPDATED, operation);
          }

          if (typeof undo === 'function') {
            undo(operation, options);
          }

          _this3._mediator.emit(_globals.Constants.EVENTS.HISTORY_UPDATED, operation);
          _this3._mediator.emit(_globals.Constants.EVENTS.HISTORY_UNDO, operation);
        });

        this.emit('undo');
      }
    }

    /**
     * Resets the history
     */

  }, {
    key: 'reset',
    value: function reset() {
      this._history = [];
    }
  }]);

  return EditorHistory;
}(_globals.EventEmitter);

exports.default = EditorHistory;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _serializer = __webpack_require__(50);

var _serializer2 = _interopRequireDefault(_serializer);

var _deserializer = __webpack_require__(51);

var _deserializer2 = _interopRequireDefault(_deserializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Serialization = function () {
  function Serialization(editor) {
    _classCallCheck(this, Serialization);

    this._editor = editor;
  }

  /**
   * Serializes the editor state
   * @return {Promise}
   */


  _createClass(Serialization, [{
    key: 'serialize',
    value: function serialize() {
      var serializer = new _serializer2.default(this._editor);
      return serializer.serialize.apply(serializer, arguments);
    }

    /**
     * Deserializes the given data
     * @param  {Object} data
     * @return {Promise}
     */

  }, {
    key: 'deserialize',
    value: function deserialize(data) {
      var deserializer = new _deserializer2.default(this._editor, data);
      return deserializer.deserialize();
    }
  }]);

  return Serialization;
}();

exports.default = Serialization;


Serialization.version = '1.0.0';

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(174);


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(175);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 175 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BrushManager = function () {
  function BrushManager(ui, options) {
    _classCallCheck(this, BrushManager);

    this._ui = ui;
    this._options = options;
    this._brushes = [];
    this._brushesById = {};

    this._addBrushes(_globals.Constants.DEFAULTS.BRUSHES);

    var _options = this._options,
        brushes = _options.brushes,
        replaceBrushes = _options.replaceBrushes,
        availableBrushes = _options.availableBrushes;

    if (this._options.brushes) {
      this._addBrushes(brushes, replaceBrushes);
    }

    if (availableBrushes) {
      this._brushes = this._brushes.filter(function (brush) {
        return availableBrushes.indexOf(brush.identifier) !== -1;
      });
    }
  }

  _createClass(BrushManager, [{
    key: '_addBrushes',
    value: function _addBrushes(brushes, replaceBrushes) {
      var _this = this;

      if (replaceBrushes) {
        this._brushes = [];
        this._brushesById = {};
      }

      brushes.forEach(function (brush) {
        _this._brushes.push(brush);
        _this._brushesById[brush.identifier] = brush;
      });
    }

    /**
     * Returns the brush with the given identifier
     * @param  {String} identifier
     */

  }, {
    key: 'getBrushByIdentifier',
    value: function getBrushByIdentifier(identifier) {
      return this._brushesById[identifier];
    }

    /**
     * Returns all brushes
     * @return {PhotoEditorSDK.Operations.SpriteOperation.BrushSprite.Brush[]}
     */

  }, {
    key: 'getBrushes',
    value: function getBrushes() {
      return this._brushes;
    }

    /**
     * Returns the first available brush
     * @return {PhotoEditorSDK.Operations.SpriteOperation.BrushSprite.Brush}
     */

  }, {
    key: 'getFirstBrush',
    value: function getFirstBrush() {
      return this._brushes[0];
    }
  }]);

  return BrushManager;
}();

exports.default = BrushManager;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _baseFontLoader = __webpack_require__(52);

var _baseFontLoader2 = _interopRequireDefault(_baseFontLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var FONT_STYLES = {
  italic: 'i'
};

var GoogleFontLoader = function (_BaseFontLoader) {
  _inherits(GoogleFontLoader, _BaseFontLoader);

  function GoogleFontLoader() {
    _classCallCheck(this, GoogleFontLoader);

    return _possibleConstructorReturn(this, (GoogleFontLoader.__proto__ || Object.getPrototypeOf(GoogleFontLoader)).apply(this, arguments));
  }

  _createClass(GoogleFontLoader, [{
    key: 'load',
    value: function load() {
      if (this._fonts.length) {
        this._addStylesheetTag();
      }
      return _get(GoogleFontLoader.prototype.__proto__ || Object.getPrototypeOf(GoogleFontLoader.prototype), 'load', this).call(this);
    }

    /**
     * Appends the <link> tag to the head
     * @private
     */

  }, {
    key: '_addStylesheetTag',
    value: function _addStylesheetTag() {
      var families = this._getFamiliesString();
      var link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = 'https://fonts.googleapis.com/css?family=' + families;

      var head = document.getElementsByTagName('head')[0];
      head.appendChild(link);
    }

    /**
     * Returns the string representation of all Google Fonts families that
     * should be loaded
     * @return {String}
     * @private
     */

  }, {
    key: '_getFamiliesString',
    value: function _getFamiliesString() {
      var families = {};
      this._fonts.forEach(function (font) {
        var fontFamily = font.getFontFamily();
        var fontStyle = font.getFontStyle();
        var fontWeight = font.getFontWeight();
        families[fontFamily] = families[fontFamily] || [];
        if (typeof fontWeight !== 'undefined') {
          families[fontFamily].push('' + fontWeight + (FONT_STYLES[fontStyle] || ''));
        } else {
          families[fontFamily].push(400); // default weight
        }
      });

      var familyStrings = [];
      for (var name in families) {
        var variants = families[name];
        var variantsString = variants.length ? ':' + variants.join(',') : '';
        var nameString = name.replace(' ', '+') + variantsString;
        familyStrings.push(nameString);
      }

      return familyStrings.join('|');
    }
  }]);

  return GoogleFontLoader;
}(_baseFontLoader2.default);

exports.default = GoogleFontLoader;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _fontRuler = __webpack_require__(179);

var _fontRuler2 = _interopRequireDefault(_fontRuler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var now = typeof window !== 'undefined' && window.performance && window.performance.now ? window.performance.now.bind(window.performance) : __webpack_require__(39);

var OBSERVE_INTERVAL = 50;
var OBSERVE_TIMEOUT = 5000;

var FontObserver = function () {
  function FontObserver(fontVariation) {
    _classCallCheck(this, FontObserver);

    this._fontVariation = fontVariation;

    this._defaultFontRuler = new _fontRuler2.default();
    this._customFontRuler = new _fontRuler2.default(this._fontVariation);
  }

  _createClass(FontObserver, [{
    key: 'observe',
    value: function observe() {
      var _this = this;

      var startedAt = now();

      return new Promise(function (resolve, reject) {
        var interval = window.setInterval(function () {
          var changed = _this._defaultFontRuler.getWidth() !== _this._customFontRuler.getWidth();
          if (changed) {
            window.clearInterval(interval);
            return resolve();
          } else {
            if (now() - startedAt >= OBSERVE_TIMEOUT) {
              var error = new Error('Failed to load font ' + _this._fontVariation.getFontFamily() + '.');
              error.font = _this._fontVariation;
              return reject(error);
            }
          }
        }, OBSERVE_INTERVAL);
      });
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this._defaultFontRuler.dispose();
      this._customFontRuler.dispose();
    }
  }]);

  return FontObserver;
}();

exports.default = FontObserver;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _fontVariation = __webpack_require__(47);

var _fontVariation2 = _interopRequireDefault(_fontVariation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FONT_SIZE = 30;
var CHARACTERS = 'abcdefghijklmnopqrstuvwxzy';

var FontRuler = function () {
  function FontRuler(fontVariation) {
    _classCallCheck(this, FontRuler);

    this._fontVariation = fontVariation || new _fontVariation2.default({
      fontFamily: 'Times New Roman',
      fontWeight: 'normal',
      fontStyle: 'normal'
    });

    this._createRuler();
  }

  /**
   * Creates the ruler and attaches it to the DOM
   * @private
   */


  _createClass(FontRuler, [{
    key: '_createRuler',
    value: function _createRuler() {
      this._ruler = document.createElement('div');
      this._ruler.innerText = CHARACTERS;
      document.body.appendChild(this._ruler);
      this._setRulerStyle();
    }

    /**
     * Styles the ruler
     * @private
     */

  }, {
    key: '_setRulerStyle',
    value: function _setRulerStyle() {
      this._ruler.style.cssText = '\n      position: absolute;\n      top: -9999px;\n      left: -9999px;\n      opacity: 0;\n      display: inline-block;\n      font: ' + this._fontVariation.getFontStyle() + ' ' + this._fontVariation.getFontWeight() + ' ' + FONT_SIZE + 'px ' + this._fontVariation.getFontFamily() + ';\n    ';
    }

    /**
     * Sets the font variation to the given one
     * @param {PhotoEditorSDK.UI.ReactUI.FontVariation} fontVariation
     */

  }, {
    key: 'setFontVariation',
    value: function setFontVariation(fontVariation) {
      this._fontVariation = fontVariation;
      this._setRulerStyle();
    }

    /**
     * Returns the width of this ruler
     * @return {Number}
     */

  }, {
    key: 'getWidth',
    value: function getWidth() {
      return this._ruler.offsetWidth;
    }

    /**
     * Removes this ruler from the DOM
     */

  }, {
    key: 'dispose',
    value: function dispose() {
      if (this._ruler) {
        this._ruler.parentNode.removeChild(this._ruler);
        this._ruler = null;
      }
    }
  }]);

  return FontRuler;
}();

exports.default = FontRuler;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _baseFontLoader = __webpack_require__(52);

var _baseFontLoader2 = _interopRequireDefault(_baseFontLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var FileFontLoader = function (_BaseFontLoader) {
  _inherits(FileFontLoader, _BaseFontLoader);

  function FileFontLoader() {
    _classCallCheck(this, FileFontLoader);

    return _possibleConstructorReturn(this, (FileFontLoader.__proto__ || Object.getPrototypeOf(FileFontLoader)).apply(this, arguments));
  }

  _createClass(FileFontLoader, [{
    key: 'load',
    value: function load() {
      var _this2 = this;

      var fontFacesCSS = [];

      this._fonts.forEach(function (variation) {
        var fontPath = _this2._ui.getAssetPath(variation.getFilePath(), false, true);
        fontFacesCSS.push('@font-face {\n        font-family: "' + variation.getFontFamily() + '";\n        src: url(\'' + fontPath + '\') format(\'woff\');\n        font-weight: ' + variation.getFontWeight() + ';\n        font-style: ' + variation.getFontStyle() + ';\n      }');
      });

      var css = fontFacesCSS.join('\n');

      var styleTag = document.createElement('style');
      styleTag.innerHTML = css;

      var head = document.getElementsByTagName('head')[0];
      head.appendChild(styleTag);

      return _get(FileFontLoader.prototype.__proto__ || Object.getPrototypeOf(FileFontLoader.prototype), 'load', this).call(this);
    }
  }]);

  return FileFontLoader;
}(_baseFontLoader2.default);

exports.default = FileFontLoader;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _serializer = __webpack_require__(53);

var _serializer2 = _interopRequireDefault(_serializer);

var _deserializer = __webpack_require__(54);

var _deserializer2 = _interopRequireDefault(_deserializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Serialization = function () {
  function Serialization(editor) {
    _classCallCheck(this, Serialization);

    this._editor = editor;
  }

  /**
   * Serializes the editor state
   * @return {Promise}
   */


  _createClass(Serialization, [{
    key: 'serialize',
    value: function serialize() {
      var serializer = new _serializer2.default(this._editor);
      return serializer.serialize.apply(serializer, arguments);
    }

    /**
     * Deserializes the given data
     * @param  {Object} data
     * @return {Promise}
     */

  }, {
    key: 'deserialize',
    value: function deserialize(data) {
      var deserializer = new _deserializer2.default(this._editor, data);
      return deserializer.deserialize();
    }
  }]);

  return Serialization;
}();

exports.default = Serialization;


Serialization.version = '1.0.1';

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _serializer = __webpack_require__(31);

var _serializer2 = _interopRequireDefault(_serializer);

var _deserializer = __webpack_require__(32);

var _deserializer2 = _interopRequireDefault(_deserializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Serialization = function () {
  function Serialization(editor) {
    _classCallCheck(this, Serialization);

    this._editor = editor;
  }

  /**
   * Serializes the editor state
   * @return {Promise}
   */


  _createClass(Serialization, [{
    key: 'serialize',
    value: function serialize() {
      var serializer = new _serializer2.default(this._editor);
      return serializer.serialize.apply(serializer, arguments);
    }

    /**
     * Deserializes the given data
     * @param  {Object} data
     * @return {Promise}
     */

  }, {
    key: 'deserialize',
    value: function deserialize(data) {
      var deserializer = new _deserializer2.default(this._editor, data);
      return deserializer.deserialize();
    }
  }]);

  return Serialization;
}();

exports.default = Serialization;


Serialization.version = '2.0.0';

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OverlayManager = function () {
  function OverlayManager(ui, options) {
    var _this = this;

    _classCallCheck(this, OverlayManager);

    this._ui = ui;
    this._options = options;
    this._overlays = _globals.SharedConstants.DEFAULTS.OVERLAYS.slice(0);
    this._overlaysByIdentifier = {};

    if (options.overlays) {
      if (options.replaceOverlays) {
        this._overlays = options.overlays;
      } else {
        this._overlays = this._overlays.concat(options.overlays);
      }
    }

    // Filter available
    if (options.availableOverlays) {
      this._overlays = this._overlays.filter(function (o) {
        return options.availableOverlays.indexOf(o.identifier) !== -1;
      });
    }

    this._overlays.forEach(function (overlay) {
      _this._overlaysByIdentifier[overlay.identifier] = overlay;
    });
  }

  /**
   * Returns the overlays
   * @return {Object[]}
   */


  _createClass(OverlayManager, [{
    key: 'getOverlays',
    value: function getOverlays() {
      return this._overlays;
    }

    /**
     * Returns the overlay with the given identifier
     * @param  {String} identifier
     * @return {Object}
     */

  }, {
    key: 'getOverlayByIdentifier',
    value: function getOverlayByIdentifier(identifier) {
      return this._overlaysByIdentifier[identifier];
    }
  }]);

  return OverlayManager;
}();

exports.default = OverlayManager;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _serializer = __webpack_require__(185);

var _serializer2 = _interopRequireDefault(_serializer);

var _deserializer = __webpack_require__(186);

var _deserializer2 = _interopRequireDefault(_deserializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Serialization = function () {
  function Serialization(editor) {
    _classCallCheck(this, Serialization);

    this._editor = editor;
  }

  /**
   * Serializes the editor state
   * @return {Promise}
   */


  _createClass(Serialization, [{
    key: 'serialize',
    value: function serialize() {
      var serializer = new _serializer2.default(this._editor);
      return serializer.serialize.apply(serializer, arguments);
    }

    /**
     * Deserializes the given data
     * @param  {Object} data
     * @return {Promise}
     */

  }, {
    key: 'deserialize',
    value: function deserialize(data) {
      var deserializer = new _deserializer2.default(this._editor, data);
      return deserializer.deserialize();
    }
  }]);

  return Serialization;
}();

exports.default = Serialization;


Serialization.version = '2.0.1';

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _serializer = __webpack_require__(31);

var _serializer2 = _interopRequireDefault(_serializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var v201Serializer = function (_PreviousSerializer) {
  _inherits(v201Serializer, _PreviousSerializer);

  function v201Serializer() {
    _classCallCheck(this, v201Serializer);

    return _possibleConstructorReturn(this, (v201Serializer.__proto__ || Object.getPrototypeOf(v201Serializer)).apply(this, arguments));
  }

  return v201Serializer;
}(_serializer2.default);

exports.default = v201Serializer;


v201Serializer.version = '2.0.0';

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _deserializer = __webpack_require__(32);

var _deserializer2 = _interopRequireDefault(_deserializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var v201Deserializer = function (_PreviousDeserializer) {
  _inherits(v201Deserializer, _PreviousDeserializer);

  function v201Deserializer() {
    _classCallCheck(this, v201Deserializer);

    return _possibleConstructorReturn(this, (v201Deserializer.__proto__ || Object.getPrototypeOf(v201Deserializer)).apply(this, arguments));
  }

  return v201Deserializer;
}(_deserializer2.default);

exports.default = v201Deserializer;


v201Deserializer.version = '2.0.1';

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _serializer = __webpack_require__(56);

var _serializer2 = _interopRequireDefault(_serializer);

var _deserializer = __webpack_require__(57);

var _deserializer2 = _interopRequireDefault(_deserializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Serialization = function () {
  function Serialization(editor) {
    _classCallCheck(this, Serialization);

    this._editor = editor;
  }

  /**
   * Serializes the editor state
   * @return {Promise}
   */


  _createClass(Serialization, [{
    key: 'serialize',
    value: function serialize() {
      var serializer = new _serializer2.default(this._editor);
      return serializer.serialize.apply(serializer, arguments);
    }

    /**
     * Deserializes the given data
     * @param  {Object} data
     * @return {Promise}
     */

  }, {
    key: 'deserialize',
    value: function deserialize(data) {
      var deserializer = new _deserializer2.default(this._editor, data);
      return deserializer.deserialize();
    }
  }]);

  return Serialization;
}();

exports.default = Serialization;


Serialization.version = '3.0.0';

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _serializer = __webpack_require__(189);

var _serializer2 = _interopRequireDefault(_serializer);

var _deserializer = __webpack_require__(190);

var _deserializer2 = _interopRequireDefault(_deserializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Serialization = function () {
  function Serialization(editor) {
    _classCallCheck(this, Serialization);

    this._editor = editor;
  }

  /**
   * Serializes the editor state
   * @return {Promise}
   */


  _createClass(Serialization, [{
    key: 'serialize',
    value: function serialize() {
      var serializer = new _serializer2.default(this._editor);
      return serializer.serialize.apply(serializer, arguments);
    }

    /**
     * Deserializes the given data
     * @param  {Object} data
     * @return {Promise}
     */

  }, {
    key: 'deserialize',
    value: function deserialize(data) {
      var deserializer = new _deserializer2.default(this._editor, data);
      return deserializer.deserialize();
    }
  }]);

  return Serialization;
}();

exports.default = Serialization;


Serialization.version = '3.1.0';

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _serializer = __webpack_require__(56);

var _serializer2 = _interopRequireDefault(_serializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var v310Serializer = function (_PreviousSerializer) {
  _inherits(v310Serializer, _PreviousSerializer);

  function v310Serializer() {
    _classCallCheck(this, v310Serializer);

    return _possibleConstructorReturn(this, (v310Serializer.__proto__ || Object.getPrototypeOf(v310Serializer)).apply(this, arguments));
  }

  _createClass(v310Serializer, [{
    key: '_serializeTextDesign',
    value: function _serializeTextDesign(operation, sprite) {
      var options = sprite.serializeOptions(['position', 'rotation', 'flipHorizontally', 'flipVertically', 'text', 'color', 'width', 'seed', 'inverted'], true);

      options.color = {
        rgba: options.color
      };

      var layout = sprite.getLayout();

      if (layout) {
        options.identifier = layout.constructor.identifier;
      }

      return {
        type: 'textdesign',
        options: options
      };
    }
  }]);

  return v310Serializer;
}(_serializer2.default);

exports.default = v310Serializer;


v310Serializer.version = '3.1.0';

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _deserializer = __webpack_require__(57);

var _deserializer2 = _interopRequireDefault(_deserializer);

var _textDesignManager = __webpack_require__(58);

var _textDesignManager2 = _interopRequireDefault(_textDesignManager);

var _fontManager = __webpack_require__(15);

var _fontManager2 = _interopRequireDefault(_fontManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var v310Deserializer = function (_PreviousDeserializer) {
  _inherits(v310Deserializer, _PreviousDeserializer);

  function v310Deserializer() {
    _classCallCheck(this, v310Deserializer);

    return _possibleConstructorReturn(this, (v310Deserializer.__proto__ || Object.getPrototypeOf(v310Deserializer)).apply(this, arguments));
  }

  _createClass(v310Deserializer, [{
    key: '_deserializeTextDesign',
    value: function _deserializeTextDesign(operation, sprite) {
      var _this2 = this;

      var options = sprite.options;
      var position = options.position,
          rotation = options.rotation,
          flipHorizontally = options.flipHorizontally,
          flipVertically = options.flipVertically,
          text = options.text,
          color = options.color,
          width = options.width,
          seed = options.seed,
          inverted = options.inverted,
          identifier = options.identifier;


      var textDesignManager = new _textDesignManager2.default(this._ui, this._getOptions('textdesign'));
      var fontManager = new _fontManager2.default(this._ui, { fonts: _globals.Constants.DEFAULTS.TEXT_DESIGN_FONTS, replaceFonts: true });
      var AssetManager = operation.constructor.TextDesignSprite.AssetManager;
      var fontLoader = this._ui.getFontLoader();

      var Layout = textDesignManager.getLayoutByIdentifier(identifier);

      var layout = new Layout();

      fontLoader.setFonts(fontManager.getFonts());

      AssetManager.setFonts(_extends({}, AssetManager.getFonts(), fontManager.getVariationsByIdentifier()));

      return fontLoader.load().then(function () {
        var images = layout.getImagePaths().map(function (path) {
          return { path: path, fullPath: _this2._ui.getAssetPath(path), image: null };
        });
        return AssetManager.loadImages(images).then(function () {
          layout.onImagesLoaded();

          return operation.createTextDesign({
            position: position,
            rotation: rotation,
            flipHorizontally: flipHorizontally,
            flipVertically: flipVertically,
            text: text,
            color: _globals.Color.fromArray(color.rgba),
            width: width,
            seed: seed,
            inverted: inverted,
            layout: layout
          });
        });
      });
    }
  }]);

  return v310Deserializer;
}(_deserializer2.default);

exports.default = v310Deserializer;


v310Deserializer.version = '3.1.0';

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _globals = __webpack_require__(0);

var _loadingModalComponent = __webpack_require__(192);

var _loadingModalComponent2 = _interopRequireDefault(_loadingModalComponent);

var _warningModalComponent = __webpack_require__(193);

var _warningModalComponent2 = _interopRequireDefault(_warningModalComponent);

var _errorModalComponent = __webpack_require__(194);

var _errorModalComponent2 = _interopRequireDefault(_errorModalComponent);

var _progressModalComponent = __webpack_require__(195);

var _progressModalComponent2 = _interopRequireDefault(_progressModalComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ModalContainerComponent = function (_BaseComponent) {
  _inherits(ModalContainerComponent, _BaseComponent);

  function ModalContainerComponent() {
    var _ref;

    _classCallCheck(this, ModalContainerComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ModalContainerComponent.__proto__ || Object.getPrototypeOf(ModalContainerComponent)).call.apply(_ref, [this].concat(args)));

    _this._modalManager = _this.props.modalManager;
    _this._bindAll('_onModalManagerUpdate');
    return _this;
  }

  // -------------------------------------------------------------------------- LIFECYCLE

  /**
   * Gets called when this component has been mounted
   */


  _createClass(ModalContainerComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(ModalContainerComponent.prototype.__proto__ || Object.getPrototypeOf(ModalContainerComponent.prototype), 'componentDidMount', this).call(this);

      this._modalManager.on('update', this._onModalManagerUpdate);
    }

    /**
     * Gets called when this component is about to be unmounted
     */

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _get(ModalContainerComponent.prototype.__proto__ || Object.getPrototypeOf(ModalContainerComponent.prototype), 'componentWillUnmount', this).call(this);

      this._modalManager.off('update', this._onModalManagerUpdate);
    }

    // -------------------------------------------------------------------------- EVENTS

    /**
     * Gets called when the modal manager updates
     * @private
     */

  }, {
    key: '_onModalManagerUpdate',
    value: function _onModalManagerUpdate() {
      this.forceUpdate();
    }

    /**
     * Gets called when a modal is closed. Removes it from the manager.
     * @param  {Modal} modal
     * @private
     */

  }, {
    key: '_onModalClosed',
    value: function _onModalClosed(modal) {
      this._modalManager.removeModal(modal);
    }

    // -------------------------------------------------------------------------- RENDERING

    /**
     * Renders the modals
     * @return {Array.<React.Component>}
     */

  }, {
    key: '_renderModals',
    value: function _renderModals() {
      var _this2 = this;

      var modals = this._modalManager.getModals();
      return modals.map(function (modal) {
        var ModalComponent = void 0;

        switch (modal.type) {
          case 'loading':
            ModalComponent = _loadingModalComponent2.default;
            break;
          case 'warning':
            ModalComponent = _warningModalComponent2.default;
            break;
          case 'error':
            ModalComponent = _errorModalComponent2.default;
            break;
          case 'progress':
            ModalComponent = _progressModalComponent2.default;
            break;
        }

        return _globals.ReactBEM.createElement(ModalComponent, {
          modal: modal,
          onClose: _this2._onModalClosed.bind(_this2, modal) });
      });
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      return _globals.ReactBEM.createElement(
        'div',
        null,
        this._renderModals()
      );
    }
  }]);

  return ModalContainerComponent;
}(_globals.BaseComponent);

exports.default = ModalContainerComponent;


ModalContainerComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var LoadingModalComponent = function (_BaseComponent) {
  _inherits(LoadingModalComponent, _BaseComponent);

  function LoadingModalComponent() {
    _classCallCheck(this, LoadingModalComponent);

    return _possibleConstructorReturn(this, (LoadingModalComponent.__proto__ || Object.getPrototypeOf(LoadingModalComponent)).apply(this, arguments));
  }

  _createClass(LoadingModalComponent, [{
    key: 'renderWithBEM',

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */
    value: function renderWithBEM() {
      var modal = this.props.modal;
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:modals' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:overlay' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:modal m:loading' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:text' },
              modal.text
            )
          )
        )
      );
    }
  }]);

  return LoadingModalComponent;
}(_globals.BaseComponent);

exports.default = LoadingModalComponent;


LoadingModalComponent.propTypes = {
  modal: _globals.PropTypes.object
};

LoadingModalComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var WarningModalComponent = function (_BaseComponent) {
  _inherits(WarningModalComponent, _BaseComponent);

  function WarningModalComponent() {
    _classCallCheck(this, WarningModalComponent);

    return _possibleConstructorReturn(this, (WarningModalComponent.__proto__ || Object.getPrototypeOf(WarningModalComponent)).apply(this, arguments));
  }

  _createClass(WarningModalComponent, [{
    key: 'renderWithBEM',

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */
    value: function renderWithBEM() {
      var modal = this.props.modal;
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:modals' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:modal m:warning' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:title' },
            modal.title
          ),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:text' },
            modal.text
          ),
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:button b:button m:inline', onClick: this.props.onClose },
            'OK'
          )
        )
      );
    }
  }]);

  return WarningModalComponent;
}(_globals.BaseComponent);

exports.default = WarningModalComponent;


WarningModalComponent.propTypes = {
  modal: _globals.PropTypes.object
};

WarningModalComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ErrorModalComponent = function (_BaseComponent) {
  _inherits(ErrorModalComponent, _BaseComponent);

  function ErrorModalComponent() {
    var _ref;

    _classCallCheck(this, ErrorModalComponent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ErrorModalComponent.__proto__ || Object.getPrototypeOf(ErrorModalComponent)).call.apply(_ref, [this].concat(args)));

    _this._bindAll('_onClose');
    return _this;
  }

  /**
   * Gets called when the user clicks the close button
   * @private
   */


  _createClass(ErrorModalComponent, [{
    key: '_onClose',
    value: function _onClose() {
      this.props.modal.close();
    }

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */

  }, {
    key: 'renderWithBEM',
    value: function renderWithBEM() {
      var modal = this.props.modal;

      var modalElement = _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:modal m:error' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:title' },
          modal.title
        ),
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:text' },
          modal.text
        ),
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:button b:button m:inline', onClick: this._onClose },
          'OK'
        )
      );

      var content = modal.overlay ? _globals.ReactBEM.createElement(
        'div',
        { bem: 'e:overlay' },
        modalElement
      ) : modalElement;

      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:modals' },
        content
      );
    }
  }]);

  return ErrorModalComponent;
}(_globals.BaseComponent);

exports.default = ErrorModalComponent;


ErrorModalComponent.propTypes = {
  modal: _globals.PropTypes.object
};

ErrorModalComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx ReactBEM.createElement **/
/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var ProgressModalComponent = function (_BaseComponent) {
  _inherits(ProgressModalComponent, _BaseComponent);

  function ProgressModalComponent() {
    _classCallCheck(this, ProgressModalComponent);

    return _possibleConstructorReturn(this, (ProgressModalComponent.__proto__ || Object.getPrototypeOf(ProgressModalComponent)).apply(this, arguments));
  }

  _createClass(ProgressModalComponent, [{
    key: 'renderWithBEM',

    /**
     * Renders this component
     * @return {ReactBEM.Element}
     */
    value: function renderWithBEM() {
      var modal = this.props.modal;
      var progress = modal.data.progress;

      var progressStyle = {
        width: ((progress || 0) * 100).toFixed(2) + '%'
      };
      return _globals.ReactBEM.createElement(
        'bem',
        { specifier: '$b:modals' },
        _globals.ReactBEM.createElement(
          'div',
          { bem: 'e:overlay' },
          _globals.ReactBEM.createElement(
            'div',
            { bem: 'e:modal m:loading' },
            _globals.ReactBEM.createElement(
              'div',
              { bem: 'e:text' },
              modal.text
            ),
            _globals.ReactBEM.createElement(
              'bem',
              { specifier: 'b:loadingModal' },
              _globals.ReactBEM.createElement(
                'div',
                { bem: '$e:progressBar' },
                _globals.ReactBEM.createElement('div', { bem: 'e:progress', style: progressStyle })
              )
            )
          )
        )
      );
    }
  }]);

  return ProgressModalComponent;
}(_globals.BaseComponent);

exports.default = ProgressModalComponent;


ProgressModalComponent.propTypes = {
  modal: _globals.PropTypes.object
};

ProgressModalComponent.contextTypes = _globals.BaseComponent.contextTypes;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globals = __webpack_require__(0);

var _editor = __webpack_require__(43);

var _editor2 = _interopRequireDefault(_editor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var LOAD_TIMEOUT = 5000;

var Preloader = function (_EventEmitter) {
  _inherits(Preloader, _EventEmitter);

  function Preloader(ui, options, mediator) {
    _classCallCheck(this, Preloader);

    var _this = _possibleConstructorReturn(this, (Preloader.__proto__ || Object.getPrototypeOf(Preloader)).call(this));

    _this._ui = ui;
    _this._options = options;
    _this._mediator = mediator;

    _this._assets = {};

    // A shallow Editor instance that is only there to check for features etc.
    _this._editor = new _editor2.default(ui, options, mediator, true);

    // Generic assets that are pretty much always required
    _this._assets = ['controls/back.png', 'controls/minus.png', 'controls/plus.png', 'controls/tick.png', 'controls/webcam/shutter.png', 'controls/knobs/remove.png', 'controls/knobs/resize-diagonal-down.png', 'controls/knobs/resize-diagonal-up.png', 'controls/knobs/rotate.png', 'editor/export.png', 'editor/new.png', 'editor/undo.png', ['splash/photo-roll.png', false, true], ['splash/webcam.png', false, true], 'top-bar/back.png', 'close.png'];
    _this._appendControlsAssets();
    return _this;
  }

  /**
   * Adds the control-specific assets if necessary
   * @private
   */


  _createClass(Preloader, [{
    key: '_appendControlsAssets',
    value: function _appendControlsAssets() {
      var controls = this._editor.controls.getAvailable();
      for (var key in controls) {
        var Control = controls[key];
        if (this._editor.controls.isEnabled(key)) {
          this._assets = this._assets.concat(Control.getPreloadAssets(this._editor));
          this._assets.push(Control.iconPath);
        }
      }
    }

    /**
     * Loads the assets, emits progress events
     */

  }, {
    key: 'load',
    value: function load() {
      var _this2 = this;

      var assets = this._assets.slice();
      var assetsCount = assets.length;
      var assetsLoaded = 0;

      /**
       * Called when an asset has been loaded. Increases the asset counter and emits a progress
       * event
       */
      var assetLoaded = function assetLoaded() {
        assetsLoaded++;
        _this2.emit('progress', assetsLoaded / assetsCount);
        if (assetsLoaded === assetsCount) {
          _this2.emit('done');
        }
      };

      /**
       * Logs a warning message that the given asset failed to load for the given reason
       * @param  {String} path
       * @param  {String} reason
       */
      var assetLoadFailed = function assetLoadFailed(path) {
        var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'timed out';

        _globals.Log.warn('Preloader', path + ' ' + reason + '.');
        assetLoaded();
      };

      /**
       * Creates a timeout for the given asset path. Assumes an asset failed to load when timeout
       * runs out
       * @param  {String} path
       * @return {Number}
       */
      var loadTimeout = function loadTimeout(path) {
        return window.setTimeout(function () {
          assetLoadFailed(path);
        }, LOAD_TIMEOUT);
      };

      assets.forEach(function (asset) {
        var retinaAsset = true;
        var uiAsset = true;
        if (_globals.SDKUtils.isArray(asset)) {
          uiAsset = asset[2];
          retinaAsset = asset[1];
          asset = asset[0];
        }

        var assetPath = _this2._ui.getAssetPath(asset, uiAsset, !retinaAsset);
        var image = new window.Image();
        var timeout = loadTimeout(assetPath);
        image.addEventListener('load', function () {
          _this2._assets[assetPath] = image;
          window.clearTimeout(timeout);
          assetLoaded();
        });
        image.addEventListener('error', function () {
          window.clearTimeout(timeout);
          assetLoadFailed(assetPath, 'was not found');
        });
        image.crossOrigin = _globals.SDKUtils.getCrossOriginValue(_this2._options.crossOrigin); // this._ui.getSDK().getCrossOrigin()
        image.src = assetPath;
      });
    }
  }, {
    key: 'getAsset',
    value: function getAsset(assetPath) {
      return this._assets[assetPath];
    }
  }]);

  return Preloader;
}(_globals.EventEmitter);

exports.default = Preloader;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _provider = __webpack_require__(198);

Object.defineProperty(exports, 'Provider', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_provider).default;
  }
});

var _library = __webpack_require__(199);

Object.defineProperty(exports, 'Library', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_library).default;
  }
});

var _searchSuggestion = __webpack_require__(200);

Object.defineProperty(exports, 'SearchSuggestion', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_searchSuggestion).default;
  }
});

var _photo = __webpack_require__(201);

Object.defineProperty(exports, 'Photo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_photo).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var _globals = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Provider = function () {
  function Provider() {
    _classCallCheck(this, Provider);
  }

  _createClass(Provider, [{
    key: 'getLibraries',

    /**
     * Returns the libraries
     * @return {Promise}
     * @abstract
     */
    value: function getLibraries() {
      _globals.Log.warn(this.constructor.name, '`getLibraries` is abstract and not implemented.');
      return _globals.Promise.resolve([]);
    }

    /**
     * Returns search suggestions shown on the overview and "no results" page
     * @return {Promise}
     * @abstract
     */

  }, {
    key: 'getSearchSuggestions',
    value: function getSearchSuggestions() {
      _globals.Log.warn(this.constructor.name, '`getSearchSuggestions` is abstract and not implemented.');
      return _globals.Promise.resolve([]);
    }

    /**
     * Returns the photos for the given library
     * @param {PhotoEditorSDK.UI.ReactUI.PhotoRoll.Library} library
     * @return {Promise}
     * @abstract
     */

  }, {
    key: 'getPhotosForLibrary',
    value: function getPhotosForLibrary(library) {
      _globals.Log.warn(this.constructor.name, '`getPhotosForLibrary` is abstract and not implemented.');
      return _globals.Promise.resolve([]);
    }

    /**
     * Searches for photos with the given query
     * @param {String} query
     * @return {Promise}
     */

  }, {
    key: 'searchPhotos',
    value: function searchPhotos(query) {
      _globals.Log.warn(this.constructor.name, '`searchPhotos` is abstract and not implemented.');
      return _globals.Promise.resolve([]);
    }
  }]);

  return Provider;
}();

exports.default = Provider;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var Library = function Library(data) {
  _classCallCheck(this, Library);

  this.name = data.name;
  this.coverImage = data.coverImage;
};

exports.default = Library;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var SearchSuggestion = function SearchSuggestion(data) {
  _classCallCheck(this, SearchSuggestion);

  this.query = data.query;
  this.name = this.query;
  this.coverImage = data.coverImage;
};

exports.default = SearchSuggestion;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* @module */
/*
 * This file is part of PhotoEditorSDK.
 *
 * Copyright (C) 2016-2017 9elements GmbH <contact@9elements.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, without
 * modification, are permitted provided that the following license agreement
 * is approved and a legal/financial contract was signed by the user.
 * The license agreement can be found under following link:
 *
 * https://www.photoeditorsdk.com/LICENSE.txt
 */

var Photo = function Photo(library, data) {
  _classCallCheck(this, Photo);

  this.library = library;
  this.title = data.title;
  this.urls = data.urls;
};

exports.default = Photo;

/***/ }),
/* 202 */
/***/ (function(module, exports) {

module.exports = {"pesdk":{"adjustments":{"title":{"name":"Korrekturen"},"text":{"brightness":"Helligkeit","saturation":"Sättigung","contrast":"Kontrast","gamma":"Gamma","clarity":"Klarheit","exposure":"Belichtung","shadows":"Schatten","highlights":"Lichter"}},"brush":{"title":{"name":"Malen"},"text":{"size":"Dicke"}},"camera":{"title":{"headline":"Mache ein Foto!"},"text":{"webcamUnavailable":"Webcam-Bild kann nicht dargestellt werden. (Fehler: ${error})"}},"common":{"title":{"error":"Es ist ein Fehler aufgetreten","imageLoadFail":"Bild konnte nicht geladen werden"},"text":{"color":"Farbe","loading":"Lade...","imageLoadFail":"Beim Laden des Bildes unter ${path} ist ein Fehler aufgetreten."},"button":{"back":"Zurück","cancel":"Abbrechen"}},"editor":{"title":{"zoom":"Zoom","renderingError":"Rendering-Fehler","imageResized_maxMegaPixels":"Bild verkleinert","imageResized_maxDimensions":"Bild verkleinert"},"button":{"export":"Speichern","backgroundImage":"Hintergrundbild","new":"Neu","undo":"Rückgängig"},"text":{"invalidFileType":"Der Dateityp ${fileType} wird nicht unterstützt.","exporting":"Exportiere...","renderingError":"Beim Rendern des Bildes ist ein Fehler aufgetreten.","resizing":"Bild wird bearbeitet...","imageResized_maxMegaPixels":"Da dein Bild die maximale Größe von ${maxMegaPixels} Megapixeln überschreitet, wurde es auf ${width}x${height} Pixel verkleinert.","imageResized_maxDimensions":"Aufgrund von Hardware-Beschränkungen wurde das Bild auf ${width}x${height} Pixel verkleinert."}},"filter":{"title":{"name":"Filter"},"text":{"intensity":"Intensität"},"asset":{"identity":"Original","imgly_lut_celsius":"Celsius","imgly_lut_chest":"Chest","imgly_lut_fixie":"Fixie","imgly_lut_fridge":"Fridge","imgly_lut_front":"Front","imgly_lut_k2":"K2","imgly_lut_mellow":"Mellow","imgly_lut_sin":"Sin","imgly_lut_texas":"Texas","imgly_lut_ad1920":"1920 A.D.","imgly_lut_ancient":"Ancient","imgly_lut_bleached":"Bleached","imgly_lut_bleachedblue":"Bleached Blue","imgly_lut_blues":"Blues","imgly_lut_blueshadows":"Blue Shadows","imgly_lut_breeze":"Breeze","imgly_lut_bw":"B & W","imgly_lut_classic":"Classic","imgly_lut_colorful":"Colorful","imgly_lut_cool":"Cool","imgly_lut_cottoncandy":"Cotton Candy","imgly_lut_creamy":"Creamy","imgly_lut_eighties":"Eighties","imgly_lut_elder":"Elder","imgly_lut_evening":"Evening","imgly_lut_fall":"Fall","imgly_lut_food":"Food","imgly_lut_glam":"Glam","imgly_lut_gobblin":"Gobblin","imgly_lut_highcarb":"High Carb","imgly_lut_highcontrast":"High Contrast","imgly_lut_k1":"K1","imgly_lut_k6":"K6","imgly_lut_kdynamic":"KDynamic","imgly_lut_keen":"Keen","imgly_lut_lenin":"Lenin","imgly_lut_litho":"Litho","imgly_lut_lomo100":"Lomo 100","imgly_lut_lucid":"Lucid","imgly_lut_neat":"Neat","imgly_lut_nogreen":"No Green","imgly_lut_orchid":"Orchid","imgly_lut_pale":"Pale","imgly_lut_pitched":"Pitched","imgly_lut_plate":"Plate","imgly_lut_pola669":"Pola 669","imgly_lut_polasx":"Pola SX","imgly_lut_pro400":"Pro 400","imgly_lut_quozi":"Quozi","imgly_lut_sepiahigh":"Sepia High","imgly_lut_settled":"Settled","imgly_lut_seventies":"Seventies","imgly_lut_soft":"Soft","imgly_lut_steel":"Steel","imgly_lut_summer":"Summer","imgly_lut_sunset":"Sunset","imgly_lut_tender":"Tender","imgly_lut_twilight":"Twilight","imgly_lut_winter":"Winter","imgly_lut_x400":"X400","imgly_filters_analog":"Analog","imgly_filters_bw":"Black & White","imgly_filters_retro":"Retro","imgly_filters_special":"Special","imgly_filters_summer":"Summer","imgly_filters_winter":"Winter","all":"Alle"}},"focus":{"title":{"name":"Focus"},"text":{"blurRadius":"Radius"},"button":{"none":"Original","radial":"Kreisförmig","mirrored":"Gespiegelt"}},"frame":{"title":{"name":"Rahmen"},"text":{"scale":"Größe"},"button":{"none":"Kein Rahmen"},"asset":{"imgly_frame_dia":"Dia","imgly_frame_art_decor":"Art Decor","imgly_frame_black_passepartout":"Black Passepartout","imgly_frame_lowpoly_shadow":"Low Poly","imgly_frame_wood_passepartout":"Wood Passepartout"}},"library":{"title":{"searchResults":"Suchergebnisse für \"${query}\"","photoRollLoadFail":"Laden der Photo Roll fehlgeschlagen"},"text":{"photoRollLoadFail":"Failed to load photos for the photo roll: ${error}","noSearchResults":"Die Photo Roll konnte nicht geladen werden: ${error}"},"placeholder":{"search":"Nach Fotos suchen"}},"splash":{"button":{"upload":"Lade ein Foto hoch"},"title":{"photoRoll":"Kostenloses Bildmaterial","webcam":"Webcam"},"text":{"photoRoll":"Suche dir eines von tausenden Stock Photos aus.","upload":"Klicke hier, um ein Foto von deinem Rechner hochzuladen oder lade es per Drag-and-Drop hoch","webcam":"Klicke hier, um ein Foto mit deiner Webcam zu machen"}},"sticker":{"title":{"name":"Sticker","loadingStickersFailed":"Laden der Sticker fehlgeschlagen"},"asset":{"all":"Alle","imgly_sticker_emoticons":"Emoticons","imgly_sticker_shapes":"Shapes"}},"text":{"title":{"name":"Text","loadingFontsFailed":"Laden der Schriftarten fehlgeschlagen"},"text":{"loadingFontsFailed":"Einige Schriftarten sind möglicherweise nicht verfügbar."},"button":{"size":"Größe","font":"Schriftart","alignment":"Ausrichtung","foreground":"Vordergrund","background":"Hintergrund","takeToFront":"Nach oben"},"placeholder":{"defaultText":"Doppelklick zum Bearbeiten!"}},"transform":{"title":{"name":"Zuschneiden"},"button":{"none":"Original"},"text":{"rotation":"Drehung"},"asset":{"imgly_transform_common_custom":"Frei","imgly_transform_common_square":"Quadratisch","imgly_transform_common_4-3":"4:3","imgly_transform_common_16-9":"16:9","imgly_transform_facebook_ad":"FB Ad","imgly_transform_facebook_post":"FB Post","imgly_transform_facebook_cover":"FB Cover","imgly_transform_facebook_profile":"FB Profile"}}}}

/***/ }),
/* 203 */
/***/ (function(module, exports) {

module.exports = {"pesdk":{"adjustments":{"title":{"name":"Adjust"},"text":{"brightness":"Brightness","saturation":"Saturation","contrast":"Contrast","gamma":"Gamma","clarity":"Clarity","exposure":"Exposure","shadows":"Shadows","highlights":"Highlights","whites":"Whites","blacks":"Blacks","temperature":"Temperature"}},"brush":{"title":{"name":"Brush"},"text":{"size":"Size"}},"camera":{"title":{"headline":"Take a photo!"},"text":{"webcamUnavailable":"Unable to display webcam image (Error: ${error})"}},"common":{"title":{"error":"An error has occurred","imageLoadFail":"Failed to load image"},"text":{"color":"Color","loading":"Loading...","imageLoadFail":"Failed to load the image at ${path}"},"button":{"back":"Back","cancel":"Cancel"}},"editor":{"title":{"zoom":"Zoom","renderingError":"Error while rendering","imageResized_maxMegaPixels":"Image resized","imageResized_maxDimensions":"Image resized"},"button":{"export":"Export","backgroundImage":"Background Image","new":"New","undo":"Undo"},"text":{"invalidFileType":"The file type ${fileType} is not supported.","exporting":"Exporting...","renderingError":"An error has occurred while rendering the image.","resizing":"Resizing...","imageResized_maxMegaPixels":"Your image exceeds the maximum size of ${maxMegaPixels} megapixels and has therefore been resized to ${width}x${height} pixels.","imageResized_maxDimensions":"Due to hardware limitations your image has been resized to ${width}x${height} pixels."}},"filter":{"title":{"name":"Filters"},"text":{"intensity":"Intensity"},"asset":{"identity":"None","imgly_lut_celsius":"Celsius","imgly_lut_chest":"Chest","imgly_lut_fixie":"Fixie","imgly_lut_fridge":"Fridge","imgly_lut_front":"Front","imgly_lut_k2":"K2","imgly_lut_mellow":"Mellow","imgly_lut_sin":"Sin","imgly_lut_texas":"Texas","imgly_lut_ad1920":"1920 A.D.","imgly_lut_ancient":"Ancient","imgly_lut_bleached":"Bleached","imgly_lut_bleachedblue":"Bleached Blue","imgly_lut_blues":"Blues","imgly_lut_blueshadows":"Blue Shadows","imgly_lut_breeze":"Breeze","imgly_lut_bw":"B & W","imgly_lut_classic":"Classic","imgly_lut_colorful":"Colorful","imgly_lut_cool":"Cool","imgly_lut_cottoncandy":"Cotton Candy","imgly_lut_creamy":"Creamy","imgly_lut_eighties":"Eighties","imgly_lut_elder":"Elder","imgly_lut_evening":"Evening","imgly_lut_fall":"Fall","imgly_lut_food":"Food","imgly_lut_glam":"Glam","imgly_lut_gobblin":"Gobblin","imgly_lut_highcarb":"High Carb","imgly_lut_highcontrast":"High Contrast","imgly_lut_k1":"K1","imgly_lut_k6":"K6","imgly_lut_kdynamic":"KDynamic","imgly_lut_keen":"Keen","imgly_lut_lenin":"Lenin","imgly_lut_litho":"Litho","imgly_lut_lomo100":"Lomo 100","imgly_lut_lucid":"Lucid","imgly_lut_neat":"Neat","imgly_lut_nogreen":"No Green","imgly_lut_orchid":"Orchid","imgly_lut_pale":"Pale","imgly_lut_pitched":"Pitched","imgly_lut_plate":"Plate","imgly_lut_pola669":"Pola 669","imgly_lut_polasx":"Pola SX","imgly_lut_pro400":"Pro 400","imgly_lut_quozi":"Quozi","imgly_lut_sepiahigh":"Sepia High","imgly_lut_settled":"Settled","imgly_lut_seventies":"Seventies","imgly_lut_soft":"Soft","imgly_lut_steel":"Steel","imgly_lut_summer":"Summer","imgly_lut_sunset":"Sunset","imgly_lut_tender":"Tender","imgly_lut_twilight":"Twilight","imgly_lut_winter":"Winter","imgly_lut_x400":"X400","imgly_filters_analog":"Analog","imgly_filters_bw":"Black & White","imgly_filters_retro":"Retro","imgly_filters_special":"Special","imgly_filters_summer":"Summer","imgly_filters_winter":"Winter","all":"All"}},"focus":{"title":{"name":"Focus"},"text":{"blurRadius":"Blur radius"},"button":{"none":"None","radial":"Radial","mirrored":"Mirrored"}},"frame":{"title":{"name":"Frame"},"text":{"scale":"Scale"},"button":{"none":"None"},"asset":{"imgly_frame_dia":"Dia","imgly_frame_art_decor":"Art Decor","imgly_frame_black_passepartout":"Black Passepartout","imgly_frame_lowpoly_shadow":"Low Poly","imgly_frame_wood_passepartout":"Wood Passepartout"}},"library":{"title":{"searchResults":"Search results for \"${query}\"","photoRollLoadFail":"Failed to load Photo Roll"},"text":{"photoRollLoadFail":"Failed to load photos for the photo roll: ${error}","noSearchResults":"Sorry, but we couldn't find any photos for <strong>\"${query}\"</strong>."},"placeholder":{"search":"Search for photos"}},"splash":{"button":{"upload":"Upload your image"},"title":{"photoRoll":"Free stock footage","webcam":"Webcam"},"text":{"photoRoll":"Select from thousands of Free Stock Photos","upload":"Upload a picture from your library or just drag and drop","webcam":"Take a picture with your webcam or phone"}},"sticker":{"title":{"name":"Sticker","loadingStickersFailed":"Failed to load stickers"},"asset":{"all":"All","imgly_sticker_emoticons":"Emoticons","imgly_sticker_shapes":"Shapes"}},"text":{"title":{"name":"Text","loadingFontsFailed":"Failed to load fonts"},"text":{"loadingFontsFailed":"Some fonts might not be available."},"button":{"size":"Size","font":"Font","alignment":"Alignment","foreground":"Foreground","background":"Background","takeToFront":"To Front"},"placeholder":{"defaultText":"Double-click to edit"}},"transform":{"title":{"name":"Transform"},"button":{"none":"Original"},"text":{"rotation":"Rotation"},"asset":{"imgly_transform_common_custom":"Custom","imgly_transform_common_square":"Square","imgly_transform_common_4-3":"4:3","imgly_transform_common_16-9":"16:9","imgly_transform_facebook_ad":"FB Ad","imgly_transform_facebook_post":"FB Post","imgly_transform_facebook_cover":"FB Cover","imgly_transform_facebook_profile":"FB Profile"}}}}

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,